(function(){
"use strict";
var nape, zpp_nape, js, Std, Reflect, StringTools;
var $_, $estr = function() { return js.Boot.__string_rec(this,''); };

nape = {};
nape.callbacks = {};
nape.constraint = {};
nape.dynamics = {};
nape.geom = {};
nape.phys = {};
nape.shape = {};
nape.space = {};
nape.util = {};

zpp_nape = {};
zpp_nape.callbacks = {};
zpp_nape.constraint = {};
zpp_nape.dynamics = {};
zpp_nape.geom = {};
zpp_nape.phys = {};
zpp_nape.shape = {};
zpp_nape.space = {};
zpp_nape.util = {};

function $bind(o,m) { var f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; return f; };;
Reflect = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
Reflect.prototype.__class__ = Reflect;
Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js.Boot.__string_rec(s,"");
};
Std.prototype.__class__ = Std;
StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.hex = function(n,digits) {
	var s = "";
	while(true) {
		s = "0123456789ABCDEF".charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
StringTools.prototype.__class__ = StringTools;
if(typeof js=='undefined') js = {};
if(!js._Boot) js._Boot = {};
js._Boot.HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js._Boot.HaxeError);
	}
};
js._Boot.HaxeError.__name__ = ["js","_Boot","HaxeError"];
js._Boot.HaxeError.__super__ = Error;
// for(var k in Error.prototype ) js._Boot.HaxeError.prototype[k] = Error.prototype[k];
js._Boot.HaxeError.prototype = Object.create(Error.prototype);
js._Boot.HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js._Boot.HaxeError(val);
	}
};
js._Boot.HaxeError.prototype.val = null;
js._Boot.HaxeError.prototype.__class__ = js._Boot.HaxeError;
js.Boot = function() { };
js.Boot.__name__ = ["js","Boot"];
js.Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js.Boot.__nativeClassName(o);
		if(name != null) {
			return js.Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js.Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js.Boot.__string_rec(o[i],s);
					} else {
						str += js.Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js.Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js.Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js.Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js.Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js.Boot.__interfLoop(cc.__super__,cl);
};
js.Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js.Boot.__interfLoop(js.Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js.Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class && o.__name__ != null) {
			return true;
		}
		if(cl == Enum && o.__ename__ != null) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js.Boot.__nativeClassName = function(o) {
	var name = js.Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js.Boot.__isNativeObj = function(o) {
	return js.Boot.__nativeClassName(o) != null;
};
js.Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
js.Boot.prototype.__class__ = js.Boot;
var Config = nape.Config = function() {
};
Config.__name__ = ["nape","Config"];
Config.prototype.__class__ = Config;
var Callback = nape.callbacks.Callback = function() {
	this.zpp_inner = null;
	if(!ZPP_Callback.internal) {
		throw new js._Boot.HaxeError("Error: Callback cannot be instantiated derp!");
	}
};
Callback.__name__ = ["nape","callbacks","Callback"];
Callback.prototype.zpp_inner = null;
Callback.prototype.get_event = function() {
	return ZPP_Listener.events[this.zpp_inner.event];
};
Callback.prototype.get_listener = function() {
	return this.zpp_inner.listener.outer;
};
Callback.prototype.toString = function() {
	return "";
};
Callback.prototype.__class__ = Callback;
var BodyCallback = nape.callbacks.BodyCallback = function() {
	Callback.call(this);
};
BodyCallback.__name__ = ["nape","callbacks","BodyCallback"];
BodyCallback.__super__ = Callback;
// for(var k in Callback.prototype ) BodyCallback.prototype[k] = Callback.prototype[k];
BodyCallback.prototype = Object.create(Callback.prototype);
BodyCallback.prototype.get_body = function() {
	return this.zpp_inner.body.outer;
};
BodyCallback.prototype.toString = function() {
	var ret = "Cb:";
	ret = "Cb:" + ["WAKE","SLEEP"][this.zpp_inner.event - 2];
	ret += ":" + this.zpp_inner.body.outer.toString();
	ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
	return ret;
};
BodyCallback.prototype.__class__ = BodyCallback;
var Listener = nape.callbacks.Listener = function() {
	this.zpp_inner = null;
	if(!ZPP_Listener.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate Listener derp!");
	}
};
Listener.__name__ = ["nape","callbacks","Listener"];
Listener.prototype.zpp_inner = null;
Listener.prototype.get_type = function() {
	return ZPP_Listener.types[this.zpp_inner.type];
};
Listener.prototype.get_event = function() {
	return ZPP_Listener.events[this.zpp_inner.event];
};
Listener.prototype.set_event = function(event) {
	if(event == null) {
		throw new js._Boot.HaxeError("Error: Cannot set listener event type to null");
	}
	if(ZPP_Listener.events[this.zpp_inner.event] != event) {
		var xevent;
		if(ZPP_Flags.CbEvent_BEGIN == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.CbEvent_BEGIN = new CbEvent();
			ZPP_Flags.internal = false;
		}
		if(event == ZPP_Flags.CbEvent_BEGIN) {
			xevent = 0;
		} else {
			if(ZPP_Flags.CbEvent_ONGOING == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.CbEvent_ONGOING = new CbEvent();
				ZPP_Flags.internal = false;
			}
			if(event == ZPP_Flags.CbEvent_ONGOING) {
				xevent = 6;
			} else {
				if(ZPP_Flags.CbEvent_END == null) {
					ZPP_Flags.internal = true;
					ZPP_Flags.CbEvent_END = new CbEvent();
					ZPP_Flags.internal = false;
				}
				if(event == ZPP_Flags.CbEvent_END) {
					xevent = 1;
				} else {
					if(ZPP_Flags.CbEvent_SLEEP == null) {
						ZPP_Flags.internal = true;
						ZPP_Flags.CbEvent_SLEEP = new CbEvent();
						ZPP_Flags.internal = false;
					}
					if(event == ZPP_Flags.CbEvent_SLEEP) {
						xevent = 3;
					} else {
						if(ZPP_Flags.CbEvent_WAKE == null) {
							ZPP_Flags.internal = true;
							ZPP_Flags.CbEvent_WAKE = new CbEvent();
							ZPP_Flags.internal = false;
						}
						if(event == ZPP_Flags.CbEvent_WAKE) {
							xevent = 2;
						} else {
							if(ZPP_Flags.CbEvent_PRE == null) {
								ZPP_Flags.internal = true;
								ZPP_Flags.CbEvent_PRE = new CbEvent();
								ZPP_Flags.internal = false;
							}
							if(event == ZPP_Flags.CbEvent_PRE) {
								xevent = 5;
							} else {
								xevent = 4;
							}
						}
					}
				}
			}
		}
		this.zpp_inner.swapEvent(xevent);
	}
	return ZPP_Listener.events[this.zpp_inner.event];
};
Listener.prototype.get_precedence = function() {
	return this.zpp_inner.precedence;
};
Listener.prototype.set_precedence = function(precedence) {
	if(this.zpp_inner.precedence != precedence) {
		this.zpp_inner.precedence = precedence;
		this.zpp_inner.invalidate_precedence();
	}
	return this.zpp_inner.precedence;
};
Listener.prototype.get_space = function() {
	if(this.zpp_inner.space == null) {
		return null;
	} else {
		return this.zpp_inner.space.outer;
	}
};
Listener.prototype.set_space = function(space) {
	if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
		if(this.zpp_inner.space != null) {
			this.zpp_inner.space.outer.zpp_inner.wrap_listeners.remove(this);
		}
		if(space != null) {
			var _this = space.zpp_inner.wrap_listeners;
			if(_this.zpp_inner.reverse_flag) {
				_this.push(this);
			} else {
				_this.unshift(this);
			}
		} else {
			this.zpp_inner.space = null;
		}
	}
	if(this.zpp_inner.space == null) {
		return null;
	} else {
		return this.zpp_inner.space.outer;
	}
};
Listener.prototype.toString = function() {
	var event = ["BEGIN","END","WAKE","SLEEP","BREAK","PRE","ONGOING"][this.zpp_inner.event];
	if(this.zpp_inner.type == 0) {
		return "BodyListener{" + event + "::" + Std.string(this.zpp_inner.body.outer_zn.zpp_inner_zn.options.outer) + "}";
	} else if(this.zpp_inner.type == 1) {
		return "ConstraintListener{" + event + "::" + Std.string(this.zpp_inner.constraint.outer_zn.zpp_inner_zn.options.outer) + "}";
	} else {
		var con = this.zpp_inner.interaction;
		var itype;
		switch(con.itype) {
		case 1:
			itype = "COLLISION";
			break;
		case 2:
			itype = "SENSOR";
			break;
		case 4:
			itype = "FLUID";
			break;
		default:
			itype = "ALL";
		}
		return (this.zpp_inner.type == 2?"InteractionListener{" + event + "#" + itype + "::" + Std.string(con.outer_zni.zpp_inner_zn.options1.outer) + ":" + Std.string(con.outer_zni.zpp_inner_zn.options2.outer) + "}":"PreListener{" + itype + "::" + Std.string(con.outer_znp.zpp_inner_zn.options1.outer) + ":" + Std.string(con.outer_znp.zpp_inner_zn.options2.outer) + "}") + " precedence=" + this.zpp_inner.precedence;
	}
};
Listener.prototype.__class__ = Listener;
var BodyListener = nape.callbacks.BodyListener = function(event,options,handler,precedence) {
	if(precedence == null) {
		precedence = 0;
	}
	this.zpp_inner_zn = null;
	ZPP_Listener.internal = true;
	Listener.call(this);
	ZPP_Listener.internal = false;
	if(handler == null) {
		throw new js._Boot.HaxeError("Error: BodyListener::handler cannot be null");
	}
	var xevent = -1;
	if(ZPP_Flags.CbEvent_WAKE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.CbEvent_WAKE = new CbEvent();
		ZPP_Flags.internal = false;
	}
	if(event == ZPP_Flags.CbEvent_WAKE) {
		xevent = 2;
	} else {
		if(ZPP_Flags.CbEvent_SLEEP == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.CbEvent_SLEEP = new CbEvent();
			ZPP_Flags.internal = false;
		}
		if(event == ZPP_Flags.CbEvent_SLEEP) {
			xevent = 3;
		} else {
			throw new js._Boot.HaxeError("Error: cbEvent '" + event.toString() + "' is not a valid event type for a BodyListener");
		}
	}
	this.zpp_inner_zn = new ZPP_BodyListener(ZPP_OptionType.argument(options),xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner.precedence = precedence;
};
BodyListener.__name__ = ["nape","callbacks","BodyListener"];
BodyListener.__super__ = Listener;
// for(var k in Listener.prototype ) BodyListener.prototype[k] = Listener.prototype[k];
BodyListener.prototype = Object.create(Listener.prototype);
BodyListener.prototype.zpp_inner_zn = null;
BodyListener.prototype.get_options = function() {
	return this.zpp_inner_zn.options.outer;
};
BodyListener.prototype.set_options = function(options) {
	this.zpp_inner_zn.options.set(options.zpp_inner);
	return this.zpp_inner_zn.options.outer;
};
BodyListener.prototype.get_handler = function() {
	return this.zpp_inner_zn.handler;
};
BodyListener.prototype.set_handler = function(handler) {
	if(handler == null) {
		throw new js._Boot.HaxeError("Error: BodyListener::handler cannot be null");
	}
	this.zpp_inner_zn.handler = handler;
	return this.zpp_inner_zn.handler;
};
BodyListener.prototype.__class__ = BodyListener;
var CbEvent = nape.callbacks.CbEvent = function() {
	if(!ZPP_Flags.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "CbEvent" + " derp!");
	}
};
CbEvent.__name__ = ["nape","callbacks","CbEvent"];
CbEvent.BEGIN = null;
CbEvent.get_BEGIN = function() {
	if(ZPP_Flags.CbEvent_BEGIN == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.CbEvent_BEGIN = new CbEvent();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.CbEvent_BEGIN;
};
CbEvent.ONGOING = null;
CbEvent.get_ONGOING = function() {
	if(ZPP_Flags.CbEvent_ONGOING == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.CbEvent_ONGOING = new CbEvent();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.CbEvent_ONGOING;
};
CbEvent.END = null;
CbEvent.get_END = function() {
	if(ZPP_Flags.CbEvent_END == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.CbEvent_END = new CbEvent();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.CbEvent_END;
};
CbEvent.WAKE = null;
CbEvent.get_WAKE = function() {
	if(ZPP_Flags.CbEvent_WAKE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.CbEvent_WAKE = new CbEvent();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.CbEvent_WAKE;
};
CbEvent.SLEEP = null;
CbEvent.get_SLEEP = function() {
	if(ZPP_Flags.CbEvent_SLEEP == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.CbEvent_SLEEP = new CbEvent();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.CbEvent_SLEEP;
};
CbEvent.BREAK = null;
CbEvent.get_BREAK = function() {
	if(ZPP_Flags.CbEvent_BREAK == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.CbEvent_BREAK = new CbEvent();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.CbEvent_BREAK;
};
CbEvent.PRE = null;
CbEvent.get_PRE = function() {
	if(ZPP_Flags.CbEvent_PRE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.CbEvent_PRE = new CbEvent();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.CbEvent_PRE;
};
CbEvent.prototype.toString = function() {
	if(ZPP_Flags.CbEvent_PRE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.CbEvent_PRE = new CbEvent();
		ZPP_Flags.internal = false;
	}
	if(this == ZPP_Flags.CbEvent_PRE) {
		return "PRE";
	} else {
		if(ZPP_Flags.CbEvent_BEGIN == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.CbEvent_BEGIN = new CbEvent();
			ZPP_Flags.internal = false;
		}
		if(this == ZPP_Flags.CbEvent_BEGIN) {
			return "BEGIN";
		} else {
			if(ZPP_Flags.CbEvent_ONGOING == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.CbEvent_ONGOING = new CbEvent();
				ZPP_Flags.internal = false;
			}
			if(this == ZPP_Flags.CbEvent_ONGOING) {
				return "ONGOING";
			} else {
				if(ZPP_Flags.CbEvent_END == null) {
					ZPP_Flags.internal = true;
					ZPP_Flags.CbEvent_END = new CbEvent();
					ZPP_Flags.internal = false;
				}
				if(this == ZPP_Flags.CbEvent_END) {
					return "END";
				} else {
					if(ZPP_Flags.CbEvent_WAKE == null) {
						ZPP_Flags.internal = true;
						ZPP_Flags.CbEvent_WAKE = new CbEvent();
						ZPP_Flags.internal = false;
					}
					if(this == ZPP_Flags.CbEvent_WAKE) {
						return "WAKE";
					} else {
						if(ZPP_Flags.CbEvent_SLEEP == null) {
							ZPP_Flags.internal = true;
							ZPP_Flags.CbEvent_SLEEP = new CbEvent();
							ZPP_Flags.internal = false;
						}
						if(this == ZPP_Flags.CbEvent_SLEEP) {
							return "SLEEP";
						} else {
							if(ZPP_Flags.CbEvent_BREAK == null) {
								ZPP_Flags.internal = true;
								ZPP_Flags.CbEvent_BREAK = new CbEvent();
								ZPP_Flags.internal = false;
							}
							if(this == ZPP_Flags.CbEvent_BREAK) {
								return "BREAK";
							} else {
								return "";
							}
						}
					}
				}
			}
		}
	}
};
CbEvent.prototype.__class__ = CbEvent;
var CbType = nape.callbacks.CbType = function() {
	this.zpp_inner = null;
	this.zpp_inner = new ZPP_CbType();
	this.zpp_inner.outer = this;
};
CbType.__name__ = ["nape","callbacks","CbType"];
CbType.ANY_BODY = null;
CbType.get_ANY_BODY = function() {
	return ZPP_CbType.ANY_BODY;
};
CbType.ANY_CONSTRAINT = null;
CbType.get_ANY_CONSTRAINT = function() {
	return ZPP_CbType.ANY_CONSTRAINT;
};
CbType.ANY_SHAPE = null;
CbType.get_ANY_SHAPE = function() {
	return ZPP_CbType.ANY_SHAPE;
};
CbType.ANY_COMPOUND = null;
CbType.get_ANY_COMPOUND = function() {
	return ZPP_CbType.ANY_COMPOUND;
};
CbType.prototype.zpp_inner = null;
CbType.prototype.get_id = function() {
	return this.zpp_inner.id;
};
CbType.prototype.including = function(includes) {
	return new OptionType(this).including(includes);
};
CbType.prototype.excluding = function(excludes) {
	return new OptionType(this).excluding(excludes);
};
CbType.prototype.get_userData = function() {
	if(this.zpp_inner.userData == null) {
		this.zpp_inner.userData = { };
	}
	return this.zpp_inner.userData;
};
CbType.prototype.get_interactors = function() {
	if(this.zpp_inner.wrap_interactors == null) {
		this.zpp_inner.wrap_interactors = ZPP_InteractorList.get(this.zpp_inner.interactors,true);
	}
	return this.zpp_inner.wrap_interactors;
};
CbType.prototype.get_constraints = function() {
	if(this.zpp_inner.wrap_constraints == null) {
		this.zpp_inner.wrap_constraints = ZPP_ConstraintList.get(this.zpp_inner.constraints,true);
	}
	return this.zpp_inner.wrap_constraints;
};
CbType.prototype.toString = function() {
	if(this == ZPP_CbType.ANY_BODY) {
		return "ANY_BODY";
	} else if(this == ZPP_CbType.ANY_SHAPE) {
		return "ANY_SHAPE";
	} else if(this == ZPP_CbType.ANY_COMPOUND) {
		return "ANY_COMPOUND";
	} else if(this == ZPP_CbType.ANY_CONSTRAINT) {
		return "ANY_CONSTRAINT";
	} else {
		return "CbType#" + this.zpp_inner.id;
	}
};
CbType.prototype.__class__ = CbType;
var CbTypeIterator = nape.callbacks.CbTypeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!ZPP_CbTypeList.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "CbType" + "Iterator derp!");
	}
};
CbTypeIterator.__name__ = ["nape","callbacks","CbTypeIterator"];
CbTypeIterator.get = function(list) {
	var ret;
	if(CbTypeIterator.zpp_pool == null) {
		ZPP_CbTypeList.internal = true;
		var ret1 = new CbTypeIterator();
		ZPP_CbTypeList.internal = false;
		ret = ret1;
	} else {
		var r = CbTypeIterator.zpp_pool;
		CbTypeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
CbTypeIterator.prototype.zpp_inner = null;
CbTypeIterator.prototype.zpp_i = null;
CbTypeIterator.prototype.zpp_critical = null;
CbTypeIterator.prototype.zpp_next = null;
CbTypeIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var _this = this.zpp_inner;
	_this.zpp_inner.valmod();
	if(_this.zpp_inner.zip_length) {
		_this.zpp_inner.zip_length = false;
		_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
	}
	var length = _this.zpp_inner.user_length;
	this.zpp_critical = true;
	if(this.zpp_i < length) {
		return true;
	} else {
		this.zpp_next = CbTypeIterator.zpp_pool;
		CbTypeIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
CbTypeIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
CbTypeIterator.prototype.__class__ = CbTypeIterator;
var CbTypeList = nape.callbacks.CbTypeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new ZPP_CbTypeList();
	this.zpp_inner.outer = this;
};
CbTypeList.__name__ = ["nape","callbacks","CbTypeList"];
CbTypeList.fromArray = function(array) {
	if(array == null) {
		throw new js._Boot.HaxeError("Error: Cannot convert null Array to Nape list");
	}
	var ret = new CbTypeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
CbTypeList.prototype.zpp_inner = null;
CbTypeList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
CbTypeList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
CbTypeList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	var tmp;
	if(index >= 0) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		tmp = index >= this.zpp_inner.user_length;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Index out of bounds");
	}
	if(this.zpp_inner.reverse_flag) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		index = this.zpp_inner.user_length - 1 - index;
	}
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else {
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	return this.zpp_inner.at_ite.elt.outer;
};
CbTypeList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "CbType" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.inner.add(obj.zpp_inner);
		} else {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
CbTypeList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "CbType" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else {
			this.zpp_inner.inner.add(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
CbTypeList.prototype.pop = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "CbType" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	}
	this.zpp_inner.invalidate();
	return ret.outer;
};
CbTypeList.prototype.shift = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "CbType" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	}
	this.zpp_inner.invalidate();
	return ret.outer;
};
CbTypeList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) {
		return this.push(obj);
	} else {
		return this.unshift(obj);
	}
};
CbTypeList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "CbType" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(obj);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.remove(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
	}
	return ret;
};
CbTypeList.prototype.clear = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "CbType" + "List is immutable");
	}
	if(this.zpp_inner.reverse_flag) {
		while(this.zpp_inner.inner.head != null) this.pop();
	} else {
		while(this.zpp_inner.inner.head != null) this.shift();
	}
};
CbTypeList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
CbTypeList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return CbTypeIterator.get(this);
};
CbTypeList.prototype.copy = function(deep) {
	if(deep == null) {
		deep = false;
	}
	var ret = new CbTypeList();
	this.zpp_inner.valmod();
	var _g = CbTypeIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = CbTypeIterator.zpp_pool;
			CbTypeIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(deep) {
			throw new js._Boot.HaxeError("Error: " + "CbType" + " is not a copyable type");
		}
		ret.push(i);
	}
	return ret;
};
CbTypeList.prototype.merge = function(xs) {
	if(xs == null) {
		throw new js._Boot.HaxeError("Error: Cannot merge with null list");
	}
	xs.zpp_inner.valmod();
	var _g = CbTypeIterator.get(xs);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = CbTypeIterator.zpp_pool;
			CbTypeIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) {
				this.push(x);
			} else {
				this.unshift(x);
			}
		}
	}
};
CbTypeList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	this.zpp_inner.valmod();
	var _g = CbTypeIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = CbTypeIterator.zpp_pool;
			CbTypeIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) {
			ret += ",";
		}
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
};
CbTypeList.prototype.foreach = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot execute null on list elements");
	}
	this.zpp_inner.valmod();
	var it = CbTypeIterator.get(this);
	while(true) {
		it.zpp_inner.zpp_inner.valmod();
		var _this = it.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		it.zpp_critical = true;
		var tmp;
		if(it.zpp_i < length) {
			tmp = true;
		} else {
			it.zpp_next = CbTypeIterator.zpp_pool;
			CbTypeIterator.zpp_pool = it;
			it.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		try {
			it.zpp_critical = false;
			lambda(it.zpp_inner.at(it.zpp_i++));
		} catch( e ) {
			it.zpp_next = CbTypeIterator.zpp_pool;
			CbTypeIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
	}
	return this;
};
CbTypeList.prototype.filter = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot select elements of list with null");
	}
	var i = 0;
	while(true) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(!(i < this.zpp_inner.user_length)) {
			break;
		}
		var x = this.at(i);
		try {
			if(lambda(x)) {
				++i;
			} else {
				this.remove(x);
			}
		} catch( e ) {
			break;
		}
	}
	return this;
};
CbTypeList.prototype.__class__ = CbTypeList;
var ConstraintCallback = nape.callbacks.ConstraintCallback = function() {
	Callback.call(this);
};
ConstraintCallback.__name__ = ["nape","callbacks","ConstraintCallback"];
ConstraintCallback.__super__ = Callback;
// for(var k in Callback.prototype ) ConstraintCallback.prototype[k] = Callback.prototype[k];
ConstraintCallback.prototype = Object.create(Callback.prototype);
ConstraintCallback.prototype.get_constraint = function() {
	return this.zpp_inner.constraint.outer;
};
ConstraintCallback.prototype.toString = function() {
	var ret = "Cb:";
	ret = "Cb:" + ["WAKE","SLEEP","BREAK"][this.zpp_inner.event - 2];
	ret += ":" + this.zpp_inner.constraint.outer.toString();
	ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
	return ret;
};
ConstraintCallback.prototype.__class__ = ConstraintCallback;
var ConstraintListener = nape.callbacks.ConstraintListener = function(event,options,handler,precedence) {
	if(precedence == null) {
		precedence = 0;
	}
	this.zpp_inner_zn = null;
	ZPP_Listener.internal = true;
	Listener.call(this);
	ZPP_Listener.internal = false;
	if(handler == null) {
		throw new js._Boot.HaxeError("Error: ConstraintListener::handler cannot be null");
	}
	var xevent = -1;
	if(ZPP_Flags.CbEvent_WAKE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.CbEvent_WAKE = new CbEvent();
		ZPP_Flags.internal = false;
	}
	if(event == ZPP_Flags.CbEvent_WAKE) {
		xevent = 2;
	} else {
		if(ZPP_Flags.CbEvent_SLEEP == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.CbEvent_SLEEP = new CbEvent();
			ZPP_Flags.internal = false;
		}
		if(event == ZPP_Flags.CbEvent_SLEEP) {
			xevent = 3;
		} else {
			if(ZPP_Flags.CbEvent_BREAK == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.CbEvent_BREAK = new CbEvent();
				ZPP_Flags.internal = false;
			}
			if(event == ZPP_Flags.CbEvent_BREAK) {
				xevent = 4;
			} else {
				throw new js._Boot.HaxeError("Error: cbEvent '" + event.toString() + "' is not a valid event type for a ConstraintListener");
			}
		}
	}
	this.zpp_inner_zn = new ZPP_ConstraintListener(ZPP_OptionType.argument(options),xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner.precedence = precedence;
};
ConstraintListener.__name__ = ["nape","callbacks","ConstraintListener"];
ConstraintListener.__super__ = Listener;
// for(var k in Listener.prototype ) ConstraintListener.prototype[k] = Listener.prototype[k];
ConstraintListener.prototype = Object.create(Listener.prototype);
ConstraintListener.prototype.zpp_inner_zn = null;
ConstraintListener.prototype.get_options = function() {
	return this.zpp_inner_zn.options.outer;
};
ConstraintListener.prototype.set_options = function(options) {
	this.zpp_inner_zn.options.set(options.zpp_inner);
	return this.zpp_inner_zn.options.outer;
};
ConstraintListener.prototype.get_handler = function() {
	return this.zpp_inner_zn.handler;
};
ConstraintListener.prototype.set_handler = function(handler) {
	if(handler == null) {
		throw new js._Boot.HaxeError("Error: ConstraintListener::handler cannot be null");
	}
	this.zpp_inner_zn.handler = handler;
	return this.zpp_inner_zn.handler;
};
ConstraintListener.prototype.__class__ = ConstraintListener;
var InteractionCallback = nape.callbacks.InteractionCallback = function() {
	Callback.call(this);
};
InteractionCallback.__name__ = ["nape","callbacks","InteractionCallback"];
InteractionCallback.__super__ = Callback;
// for(var k in Callback.prototype ) InteractionCallback.prototype[k] = Callback.prototype[k];
InteractionCallback.prototype = Object.create(Callback.prototype);
InteractionCallback.prototype.get_int1 = function() {
	return this.zpp_inner.int1.outer_i;
};
InteractionCallback.prototype.get_int2 = function() {
	return this.zpp_inner.int2.outer_i;
};
InteractionCallback.prototype.get_arbiters = function() {
	return this.zpp_inner.wrap_arbiters;
};
InteractionCallback.prototype.toString = function() {
	var ret = "Cb:";
	ret = "Cb:" + ["BEGIN","END","","","","","ONGOING"][this.zpp_inner.event];
	ret += ":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString();
	ret += " : " + this.zpp_inner.wrap_arbiters.toString();
	ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
	return ret;
};
InteractionCallback.prototype.__class__ = InteractionCallback;
var InteractionListener = nape.callbacks.InteractionListener = function(event,interactionType,options1,options2,handler,precedence) {
	if(precedence == null) {
		precedence = 0;
	}
	this.zpp_inner_zn = null;
	ZPP_Listener.internal = true;
	Listener.call(this);
	ZPP_Listener.internal = false;
	if(handler == null) {
		throw new js._Boot.HaxeError("Error: InteractionListener::handler cannot be null");
	}
	if(event == null) {
		throw new js._Boot.HaxeError("Error: CbEvent cannot be null for InteractionListener");
	}
	var xevent = -1;
	if(ZPP_Flags.CbEvent_BEGIN == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.CbEvent_BEGIN = new CbEvent();
		ZPP_Flags.internal = false;
	}
	if(event == ZPP_Flags.CbEvent_BEGIN) {
		xevent = 0;
	} else {
		if(ZPP_Flags.CbEvent_END == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.CbEvent_END = new CbEvent();
			ZPP_Flags.internal = false;
		}
		if(event == ZPP_Flags.CbEvent_END) {
			xevent = 1;
		} else {
			if(ZPP_Flags.CbEvent_ONGOING == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.CbEvent_ONGOING = new CbEvent();
				ZPP_Flags.internal = false;
			}
			if(event == ZPP_Flags.CbEvent_ONGOING) {
				xevent = 6;
			} else {
				throw new js._Boot.HaxeError("Error: CbEvent '" + event.toString() + "' is not a valid event type for InteractionListener");
			}
		}
	}
	this.zpp_inner_zn = new ZPP_InteractionListener(ZPP_OptionType.argument(options1),ZPP_OptionType.argument(options2),xevent,2);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zni = this;
	this.zpp_inner.precedence = precedence;
	this.zpp_inner_zn.handleri = handler;
	if(interactionType == null) {
		throw new js._Boot.HaxeError("Error: Cannot set listener interaction type to null");
	}
	var ret = this.zpp_inner_zn.itype;
	var tmp;
	if(ret == 1) {
		if(ZPP_Flags.InteractionType_COLLISION == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_COLLISION = new InteractionType();
			ZPP_Flags.internal = false;
		}
		tmp = ZPP_Flags.InteractionType_COLLISION;
	} else if(ret == 2) {
		if(ZPP_Flags.InteractionType_SENSOR == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_SENSOR = new InteractionType();
			ZPP_Flags.internal = false;
		}
		tmp = ZPP_Flags.InteractionType_SENSOR;
	} else if(ret == 4) {
		if(ZPP_Flags.InteractionType_FLUID == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_FLUID = new InteractionType();
			ZPP_Flags.internal = false;
		}
		tmp = ZPP_Flags.InteractionType_FLUID;
	} else if(ret == 7) {
		if(ZPP_Flags.InteractionType_ANY == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_ANY = new InteractionType();
			ZPP_Flags.internal = false;
		}
		tmp = ZPP_Flags.InteractionType_ANY;
	} else {
		tmp = null;
	}
	if(tmp != interactionType) {
		var xtype;
		if(ZPP_Flags.InteractionType_COLLISION == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_COLLISION = new InteractionType();
			ZPP_Flags.internal = false;
		}
		if(interactionType == ZPP_Flags.InteractionType_COLLISION) {
			xtype = 1;
		} else {
			if(ZPP_Flags.InteractionType_SENSOR == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.InteractionType_SENSOR = new InteractionType();
				ZPP_Flags.internal = false;
			}
			if(interactionType == ZPP_Flags.InteractionType_SENSOR) {
				xtype = 2;
			} else {
				if(ZPP_Flags.InteractionType_FLUID == null) {
					ZPP_Flags.internal = true;
					ZPP_Flags.InteractionType_FLUID = new InteractionType();
					ZPP_Flags.internal = false;
				}
				if(interactionType == ZPP_Flags.InteractionType_FLUID) {
					xtype = 4;
				} else {
					xtype = 7;
				}
			}
		}
		this.zpp_inner_zn.itype = xtype;
	}
	var ret1 = this.zpp_inner_zn.itype;
	if(ret1 == 1) {
		if(ZPP_Flags.InteractionType_COLLISION == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_COLLISION = new InteractionType();
			ZPP_Flags.internal = false;
		}
	} else if(ret1 == 2) {
		if(ZPP_Flags.InteractionType_SENSOR == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_SENSOR = new InteractionType();
			ZPP_Flags.internal = false;
		}
	} else if(ret1 == 4) {
		if(ZPP_Flags.InteractionType_FLUID == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_FLUID = new InteractionType();
			ZPP_Flags.internal = false;
		}
	} else if(ret1 == 7) {
		if(ZPP_Flags.InteractionType_ANY == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_ANY = new InteractionType();
			ZPP_Flags.internal = false;
		}
	}
};
InteractionListener.__name__ = ["nape","callbacks","InteractionListener"];
InteractionListener.__super__ = Listener;
// for(var k in Listener.prototype ) InteractionListener.prototype[k] = Listener.prototype[k];
InteractionListener.prototype = Object.create(Listener.prototype);
InteractionListener.prototype.zpp_inner_zn = null;
InteractionListener.prototype.get_options1 = function() {
	return this.zpp_inner_zn.options1.outer;
};
InteractionListener.prototype.set_options1 = function(options1) {
	this.zpp_inner_zn.options1.set(options1.zpp_inner);
	return this.zpp_inner_zn.options1.outer;
};
InteractionListener.prototype.get_options2 = function() {
	return this.zpp_inner_zn.options2.outer;
};
InteractionListener.prototype.set_options2 = function(options2) {
	this.zpp_inner_zn.options2.set(options2.zpp_inner);
	return this.zpp_inner_zn.options2.outer;
};
InteractionListener.prototype.get_interactionType = function() {
	var ret = this.zpp_inner_zn.itype;
	if(ret == 1) {
		if(ZPP_Flags.InteractionType_COLLISION == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_COLLISION = new InteractionType();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.InteractionType_COLLISION;
	} else if(ret == 2) {
		if(ZPP_Flags.InteractionType_SENSOR == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_SENSOR = new InteractionType();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.InteractionType_SENSOR;
	} else if(ret == 4) {
		if(ZPP_Flags.InteractionType_FLUID == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_FLUID = new InteractionType();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.InteractionType_FLUID;
	} else if(ret == 7) {
		if(ZPP_Flags.InteractionType_ANY == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_ANY = new InteractionType();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.InteractionType_ANY;
	} else {
		return null;
	}
};
InteractionListener.prototype.set_interactionType = function(interactionType) {
	if(interactionType == null) {
		throw new js._Boot.HaxeError("Error: Cannot set listener interaction type to null");
	}
	var ret = this.zpp_inner_zn.itype;
	var tmp;
	if(ret == 1) {
		if(ZPP_Flags.InteractionType_COLLISION == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_COLLISION = new InteractionType();
			ZPP_Flags.internal = false;
		}
		tmp = ZPP_Flags.InteractionType_COLLISION;
	} else if(ret == 2) {
		if(ZPP_Flags.InteractionType_SENSOR == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_SENSOR = new InteractionType();
			ZPP_Flags.internal = false;
		}
		tmp = ZPP_Flags.InteractionType_SENSOR;
	} else if(ret == 4) {
		if(ZPP_Flags.InteractionType_FLUID == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_FLUID = new InteractionType();
			ZPP_Flags.internal = false;
		}
		tmp = ZPP_Flags.InteractionType_FLUID;
	} else if(ret == 7) {
		if(ZPP_Flags.InteractionType_ANY == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_ANY = new InteractionType();
			ZPP_Flags.internal = false;
		}
		tmp = ZPP_Flags.InteractionType_ANY;
	} else {
		tmp = null;
	}
	if(tmp != interactionType) {
		var xtype;
		if(ZPP_Flags.InteractionType_COLLISION == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_COLLISION = new InteractionType();
			ZPP_Flags.internal = false;
		}
		if(interactionType == ZPP_Flags.InteractionType_COLLISION) {
			xtype = 1;
		} else {
			if(ZPP_Flags.InteractionType_SENSOR == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.InteractionType_SENSOR = new InteractionType();
				ZPP_Flags.internal = false;
			}
			if(interactionType == ZPP_Flags.InteractionType_SENSOR) {
				xtype = 2;
			} else {
				if(ZPP_Flags.InteractionType_FLUID == null) {
					ZPP_Flags.internal = true;
					ZPP_Flags.InteractionType_FLUID = new InteractionType();
					ZPP_Flags.internal = false;
				}
				if(interactionType == ZPP_Flags.InteractionType_FLUID) {
					xtype = 4;
				} else {
					xtype = 7;
				}
			}
		}
		this.zpp_inner_zn.itype = xtype;
	}
	var ret1 = this.zpp_inner_zn.itype;
	if(ret1 == 1) {
		if(ZPP_Flags.InteractionType_COLLISION == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_COLLISION = new InteractionType();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.InteractionType_COLLISION;
	} else if(ret1 == 2) {
		if(ZPP_Flags.InteractionType_SENSOR == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_SENSOR = new InteractionType();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.InteractionType_SENSOR;
	} else if(ret1 == 4) {
		if(ZPP_Flags.InteractionType_FLUID == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_FLUID = new InteractionType();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.InteractionType_FLUID;
	} else if(ret1 == 7) {
		if(ZPP_Flags.InteractionType_ANY == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_ANY = new InteractionType();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.InteractionType_ANY;
	} else {
		return null;
	}
};
InteractionListener.prototype.get_handler = function() {
	return this.zpp_inner_zn.handleri;
};
InteractionListener.prototype.set_handler = function(handler) {
	if(handler == null) {
		throw new js._Boot.HaxeError("Error: InteractionListener::handler cannot be null");
	}
	this.zpp_inner_zn.handleri = handler;
	return this.zpp_inner_zn.handleri;
};
InteractionListener.prototype.get_allowSleepingCallbacks = function() {
	return this.zpp_inner_zn.allowSleepingCallbacks;
};
InteractionListener.prototype.set_allowSleepingCallbacks = function(allowSleepingCallbacks) {
	this.zpp_inner_zn.allowSleepingCallbacks = allowSleepingCallbacks;
	return this.zpp_inner_zn.allowSleepingCallbacks;
};
InteractionListener.prototype.__class__ = InteractionListener;
var InteractionType = nape.callbacks.InteractionType = function() {
	if(!ZPP_Flags.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "InteractionType" + " derp!");
	}
};
InteractionType.__name__ = ["nape","callbacks","InteractionType"];
InteractionType.COLLISION = null;
InteractionType.get_COLLISION = function() {
	if(ZPP_Flags.InteractionType_COLLISION == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.InteractionType_COLLISION = new InteractionType();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.InteractionType_COLLISION;
};
InteractionType.SENSOR = null;
InteractionType.get_SENSOR = function() {
	if(ZPP_Flags.InteractionType_SENSOR == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.InteractionType_SENSOR = new InteractionType();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.InteractionType_SENSOR;
};
InteractionType.FLUID = null;
InteractionType.get_FLUID = function() {
	if(ZPP_Flags.InteractionType_FLUID == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.InteractionType_FLUID = new InteractionType();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.InteractionType_FLUID;
};
InteractionType.ANY = null;
InteractionType.get_ANY = function() {
	if(ZPP_Flags.InteractionType_ANY == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.InteractionType_ANY = new InteractionType();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.InteractionType_ANY;
};
InteractionType.prototype.toString = function() {
	if(ZPP_Flags.InteractionType_COLLISION == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.InteractionType_COLLISION = new InteractionType();
		ZPP_Flags.internal = false;
	}
	if(this == ZPP_Flags.InteractionType_COLLISION) {
		return "COLLISION";
	} else {
		if(ZPP_Flags.InteractionType_SENSOR == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_SENSOR = new InteractionType();
			ZPP_Flags.internal = false;
		}
		if(this == ZPP_Flags.InteractionType_SENSOR) {
			return "SENSOR";
		} else {
			if(ZPP_Flags.InteractionType_FLUID == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.InteractionType_FLUID = new InteractionType();
				ZPP_Flags.internal = false;
			}
			if(this == ZPP_Flags.InteractionType_FLUID) {
				return "FLUID";
			} else {
				if(ZPP_Flags.InteractionType_ANY == null) {
					ZPP_Flags.internal = true;
					ZPP_Flags.InteractionType_ANY = new InteractionType();
					ZPP_Flags.internal = false;
				}
				if(this == ZPP_Flags.InteractionType_ANY) {
					return "ANY";
				} else {
					return "";
				}
			}
		}
	}
};
InteractionType.prototype.__class__ = InteractionType;
var ListenerIterator = nape.callbacks.ListenerIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!ZPP_ListenerList.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "Listener" + "Iterator derp!");
	}
};
ListenerIterator.__name__ = ["nape","callbacks","ListenerIterator"];
ListenerIterator.get = function(list) {
	var ret;
	if(ListenerIterator.zpp_pool == null) {
		ZPP_ListenerList.internal = true;
		var ret1 = new ListenerIterator();
		ZPP_ListenerList.internal = false;
		ret = ret1;
	} else {
		var r = ListenerIterator.zpp_pool;
		ListenerIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
ListenerIterator.prototype.zpp_inner = null;
ListenerIterator.prototype.zpp_i = null;
ListenerIterator.prototype.zpp_critical = null;
ListenerIterator.prototype.zpp_next = null;
ListenerIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var _this = this.zpp_inner;
	_this.zpp_inner.valmod();
	if(_this.zpp_inner.zip_length) {
		_this.zpp_inner.zip_length = false;
		_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
	}
	var length = _this.zpp_inner.user_length;
	this.zpp_critical = true;
	if(this.zpp_i < length) {
		return true;
	} else {
		this.zpp_next = ListenerIterator.zpp_pool;
		ListenerIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
ListenerIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
ListenerIterator.prototype.__class__ = ListenerIterator;
var ListenerList = nape.callbacks.ListenerList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new ZPP_ListenerList();
	this.zpp_inner.outer = this;
};
ListenerList.__name__ = ["nape","callbacks","ListenerList"];
ListenerList.fromArray = function(array) {
	if(array == null) {
		throw new js._Boot.HaxeError("Error: Cannot convert null Array to Nape list");
	}
	var ret = new ListenerList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
ListenerList.prototype.zpp_inner = null;
ListenerList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
ListenerList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
ListenerList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	var tmp;
	if(index >= 0) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		tmp = index >= this.zpp_inner.user_length;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Index out of bounds");
	}
	if(this.zpp_inner.reverse_flag) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		index = this.zpp_inner.user_length - 1 - index;
	}
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else {
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	return this.zpp_inner.at_ite.elt.outer;
};
ListenerList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Listener" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.inner.add(obj.zpp_inner);
		} else {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
ListenerList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Listener" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else {
			this.zpp_inner.inner.add(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
ListenerList.prototype.pop = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Listener" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	}
	this.zpp_inner.invalidate();
	return ret.outer;
};
ListenerList.prototype.shift = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Listener" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	}
	this.zpp_inner.invalidate();
	return ret.outer;
};
ListenerList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) {
		return this.push(obj);
	} else {
		return this.unshift(obj);
	}
};
ListenerList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Listener" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(obj);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.remove(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
	}
	return ret;
};
ListenerList.prototype.clear = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Listener" + "List is immutable");
	}
	if(this.zpp_inner.reverse_flag) {
		while(this.zpp_inner.inner.head != null) this.pop();
	} else {
		while(this.zpp_inner.inner.head != null) this.shift();
	}
};
ListenerList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
ListenerList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return ListenerIterator.get(this);
};
ListenerList.prototype.copy = function(deep) {
	if(deep == null) {
		deep = false;
	}
	var ret = new ListenerList();
	this.zpp_inner.valmod();
	var _g = ListenerIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ListenerIterator.zpp_pool;
			ListenerIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(deep) {
			throw new js._Boot.HaxeError("Error: " + "Listener" + " is not a copyable type");
		}
		ret.push(i);
	}
	return ret;
};
ListenerList.prototype.merge = function(xs) {
	if(xs == null) {
		throw new js._Boot.HaxeError("Error: Cannot merge with null list");
	}
	xs.zpp_inner.valmod();
	var _g = ListenerIterator.get(xs);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ListenerIterator.zpp_pool;
			ListenerIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) {
				this.push(x);
			} else {
				this.unshift(x);
			}
		}
	}
};
ListenerList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	this.zpp_inner.valmod();
	var _g = ListenerIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ListenerIterator.zpp_pool;
			ListenerIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) {
			ret += ",";
		}
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
};
ListenerList.prototype.foreach = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot execute null on list elements");
	}
	this.zpp_inner.valmod();
	var it = ListenerIterator.get(this);
	while(true) {
		it.zpp_inner.zpp_inner.valmod();
		var _this = it.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		it.zpp_critical = true;
		var tmp;
		if(it.zpp_i < length) {
			tmp = true;
		} else {
			it.zpp_next = ListenerIterator.zpp_pool;
			ListenerIterator.zpp_pool = it;
			it.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		try {
			it.zpp_critical = false;
			lambda(it.zpp_inner.at(it.zpp_i++));
		} catch( e ) {
			it.zpp_next = ListenerIterator.zpp_pool;
			ListenerIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
	}
	return this;
};
ListenerList.prototype.filter = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot select elements of list with null");
	}
	var i = 0;
	while(true) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(!(i < this.zpp_inner.user_length)) {
			break;
		}
		var x = this.at(i);
		try {
			if(lambda(x)) {
				++i;
			} else {
				this.remove(x);
			}
		} catch( e ) {
			break;
		}
	}
	return this;
};
ListenerList.prototype.__class__ = ListenerList;
var ListenerType = nape.callbacks.ListenerType = function() {
	if(!ZPP_Flags.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "ListenerType" + " derp!");
	}
};
ListenerType.__name__ = ["nape","callbacks","ListenerType"];
ListenerType.BODY = null;
ListenerType.get_BODY = function() {
	if(ZPP_Flags.ListenerType_BODY == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ListenerType_BODY = new ListenerType();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.ListenerType_BODY;
};
ListenerType.CONSTRAINT = null;
ListenerType.get_CONSTRAINT = function() {
	if(ZPP_Flags.ListenerType_CONSTRAINT == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ListenerType_CONSTRAINT = new ListenerType();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.ListenerType_CONSTRAINT;
};
ListenerType.INTERACTION = null;
ListenerType.get_INTERACTION = function() {
	if(ZPP_Flags.ListenerType_INTERACTION == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ListenerType_INTERACTION = new ListenerType();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.ListenerType_INTERACTION;
};
ListenerType.PRE = null;
ListenerType.get_PRE = function() {
	if(ZPP_Flags.ListenerType_PRE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ListenerType_PRE = new ListenerType();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.ListenerType_PRE;
};
ListenerType.prototype.toString = function() {
	if(ZPP_Flags.ListenerType_BODY == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ListenerType_BODY = new ListenerType();
		ZPP_Flags.internal = false;
	}
	if(this == ZPP_Flags.ListenerType_BODY) {
		return "BODY";
	} else {
		if(ZPP_Flags.ListenerType_CONSTRAINT == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.ListenerType_CONSTRAINT = new ListenerType();
			ZPP_Flags.internal = false;
		}
		if(this == ZPP_Flags.ListenerType_CONSTRAINT) {
			return "CONSTRAINT";
		} else {
			if(ZPP_Flags.ListenerType_INTERACTION == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.ListenerType_INTERACTION = new ListenerType();
				ZPP_Flags.internal = false;
			}
			if(this == ZPP_Flags.ListenerType_INTERACTION) {
				return "INTERACTION";
			} else {
				if(ZPP_Flags.ListenerType_PRE == null) {
					ZPP_Flags.internal = true;
					ZPP_Flags.ListenerType_PRE = new ListenerType();
					ZPP_Flags.internal = false;
				}
				if(this == ZPP_Flags.ListenerType_PRE) {
					return "PRE";
				} else {
					return "";
				}
			}
		}
	}
};
ListenerType.prototype.__class__ = ListenerType;
var OptionType = nape.callbacks.OptionType = function(includes,excludes) {
	this.zpp_inner = null;
	this.zpp_inner = new ZPP_OptionType();
	this.zpp_inner.outer = this;
	if(includes != null) {
		this.including(includes);
	}
	if(excludes != null) {
		this.excluding(excludes);
	}
};
OptionType.__name__ = ["nape","callbacks","OptionType"];
OptionType.prototype.zpp_inner = null;
OptionType.prototype.get_includes = function() {
	if(this.zpp_inner.wrap_includes == null) {
		this.zpp_inner.setup_includes();
	}
	return this.zpp_inner.wrap_includes;
};
OptionType.prototype.get_excludes = function() {
	if(this.zpp_inner.wrap_excludes == null) {
		this.zpp_inner.setup_excludes();
	}
	return this.zpp_inner.wrap_excludes;
};
OptionType.prototype.including = function(includes) {
	this.zpp_inner.append(this.zpp_inner.includes,includes);
	return this;
};
OptionType.prototype.excluding = function(excludes) {
	this.zpp_inner.append(this.zpp_inner.excludes,excludes);
	return this;
};
OptionType.prototype.toString = function() {
	if(this.zpp_inner.wrap_includes == null) {
		this.zpp_inner.setup_includes();
	}
	var inc = this.zpp_inner.wrap_includes.toString();
	if(this.zpp_inner.wrap_excludes == null) {
		this.zpp_inner.setup_excludes();
	}
	return "@{" + inc + " excluding " + this.zpp_inner.wrap_excludes.toString() + "}";
};
OptionType.prototype.__class__ = OptionType;
var PreCallback = nape.callbacks.PreCallback = function() {
	Callback.call(this);
};
PreCallback.__name__ = ["nape","callbacks","PreCallback"];
PreCallback.__super__ = Callback;
// for(var k in Callback.prototype ) PreCallback.prototype[k] = Callback.prototype[k];
PreCallback.prototype = Object.create(Callback.prototype);
PreCallback.prototype.get_arbiter = function() {
	return this.zpp_inner.pre_arbiter.wrapper();
};
PreCallback.prototype.get_int1 = function() {
	return this.zpp_inner.int1.outer_i;
};
PreCallback.prototype.get_int2 = function() {
	return this.zpp_inner.int2.outer_i;
};
PreCallback.prototype.get_swapped = function() {
	return this.zpp_inner.pre_swapped;
};
PreCallback.prototype.toString = function() {
	var ret = "Cb:PRE:";
	ret = "Cb:PRE:" + (":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString());
	ret += " : " + this.zpp_inner.pre_arbiter.wrapper().toString();
	ret += " : listnener: " + Std.string(this.zpp_inner.listener.outer);
	return ret;
};
PreCallback.prototype.__class__ = PreCallback;
var PreFlag = nape.callbacks.PreFlag = function() {
	if(!ZPP_Flags.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "PreFlag" + " derp!");
	}
};
PreFlag.__name__ = ["nape","callbacks","PreFlag"];
PreFlag.ACCEPT = null;
PreFlag.get_ACCEPT = function() {
	if(ZPP_Flags.PreFlag_ACCEPT == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.PreFlag_ACCEPT = new PreFlag();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.PreFlag_ACCEPT;
};
PreFlag.IGNORE = null;
PreFlag.get_IGNORE = function() {
	if(ZPP_Flags.PreFlag_IGNORE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.PreFlag_IGNORE = new PreFlag();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.PreFlag_IGNORE;
};
PreFlag.ACCEPT_ONCE = null;
PreFlag.get_ACCEPT_ONCE = function() {
	if(ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.PreFlag_ACCEPT_ONCE = new PreFlag();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.PreFlag_ACCEPT_ONCE;
};
PreFlag.IGNORE_ONCE = null;
PreFlag.get_IGNORE_ONCE = function() {
	if(ZPP_Flags.PreFlag_IGNORE_ONCE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.PreFlag_IGNORE_ONCE = new PreFlag();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.PreFlag_IGNORE_ONCE;
};
PreFlag.prototype.toString = function() {
	if(ZPP_Flags.PreFlag_ACCEPT == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.PreFlag_ACCEPT = new PreFlag();
		ZPP_Flags.internal = false;
	}
	if(this == ZPP_Flags.PreFlag_ACCEPT) {
		return "ACCEPT";
	} else {
		if(ZPP_Flags.PreFlag_IGNORE == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.PreFlag_IGNORE = new PreFlag();
			ZPP_Flags.internal = false;
		}
		if(this == ZPP_Flags.PreFlag_IGNORE) {
			return "IGNORE";
		} else {
			if(ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.PreFlag_ACCEPT_ONCE = new PreFlag();
				ZPP_Flags.internal = false;
			}
			if(this == ZPP_Flags.PreFlag_ACCEPT_ONCE) {
				return "ACCEPT_ONCE";
			} else {
				if(ZPP_Flags.PreFlag_IGNORE_ONCE == null) {
					ZPP_Flags.internal = true;
					ZPP_Flags.PreFlag_IGNORE_ONCE = new PreFlag();
					ZPP_Flags.internal = false;
				}
				if(this == ZPP_Flags.PreFlag_IGNORE_ONCE) {
					return "IGNORE_ONCE";
				} else {
					return "";
				}
			}
		}
	}
};
PreFlag.prototype.__class__ = PreFlag;
var PreListener = nape.callbacks.PreListener = function(interactionType,options1,options2,handler,precedence,pure) {
	if(pure == null) {
		pure = false;
	}
	if(precedence == null) {
		precedence = 0;
	}
	this.zpp_inner_zn = null;
	ZPP_Listener.internal = true;
	Listener.call(this);
	ZPP_Listener.internal = false;
	if(handler == null) {
		throw new js._Boot.HaxeError("Error: PreListener must take a handler!");
	}
	this.zpp_inner_zn = new ZPP_InteractionListener(ZPP_OptionType.argument(options1),ZPP_OptionType.argument(options2),5,3);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_znp = this;
	this.zpp_inner.precedence = precedence;
	this.zpp_inner_zn.pure = pure;
	this.zpp_inner_zn.handlerp = handler;
	if(interactionType == null) {
		throw new js._Boot.HaxeError("Error: Cannot set listener interaction type to null");
	}
	var ret = this.zpp_inner_zn.itype;
	var tmp;
	if(ret == 1) {
		if(ZPP_Flags.InteractionType_COLLISION == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_COLLISION = new InteractionType();
			ZPP_Flags.internal = false;
		}
		tmp = ZPP_Flags.InteractionType_COLLISION;
	} else if(ret == 2) {
		if(ZPP_Flags.InteractionType_SENSOR == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_SENSOR = new InteractionType();
			ZPP_Flags.internal = false;
		}
		tmp = ZPP_Flags.InteractionType_SENSOR;
	} else if(ret == 4) {
		if(ZPP_Flags.InteractionType_FLUID == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_FLUID = new InteractionType();
			ZPP_Flags.internal = false;
		}
		tmp = ZPP_Flags.InteractionType_FLUID;
	} else if(ret == 7) {
		if(ZPP_Flags.InteractionType_ANY == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_ANY = new InteractionType();
			ZPP_Flags.internal = false;
		}
		tmp = ZPP_Flags.InteractionType_ANY;
	} else {
		tmp = null;
	}
	if(tmp != interactionType) {
		var xtype;
		if(ZPP_Flags.InteractionType_COLLISION == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_COLLISION = new InteractionType();
			ZPP_Flags.internal = false;
		}
		if(interactionType == ZPP_Flags.InteractionType_COLLISION) {
			xtype = 1;
		} else {
			if(ZPP_Flags.InteractionType_SENSOR == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.InteractionType_SENSOR = new InteractionType();
				ZPP_Flags.internal = false;
			}
			if(interactionType == ZPP_Flags.InteractionType_SENSOR) {
				xtype = 2;
			} else {
				if(ZPP_Flags.InteractionType_FLUID == null) {
					ZPP_Flags.internal = true;
					ZPP_Flags.InteractionType_FLUID = new InteractionType();
					ZPP_Flags.internal = false;
				}
				if(interactionType == ZPP_Flags.InteractionType_FLUID) {
					xtype = 4;
				} else {
					xtype = 7;
				}
			}
		}
		this.zpp_inner_zn.itype = xtype;
	}
	var ret1 = this.zpp_inner_zn.itype;
	if(ret1 == 1) {
		if(ZPP_Flags.InteractionType_COLLISION == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_COLLISION = new InteractionType();
			ZPP_Flags.internal = false;
		}
	} else if(ret1 == 2) {
		if(ZPP_Flags.InteractionType_SENSOR == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_SENSOR = new InteractionType();
			ZPP_Flags.internal = false;
		}
	} else if(ret1 == 4) {
		if(ZPP_Flags.InteractionType_FLUID == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_FLUID = new InteractionType();
			ZPP_Flags.internal = false;
		}
	} else if(ret1 == 7) {
		if(ZPP_Flags.InteractionType_ANY == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_ANY = new InteractionType();
			ZPP_Flags.internal = false;
		}
	}
};
PreListener.__name__ = ["nape","callbacks","PreListener"];
PreListener.__super__ = Listener;
// for(var k in Listener.prototype ) PreListener.prototype[k] = Listener.prototype[k];
PreListener.prototype = Object.create(Listener.prototype);
PreListener.prototype.zpp_inner_zn = null;
PreListener.prototype.get_options1 = function() {
	return this.zpp_inner_zn.options1.outer;
};
PreListener.prototype.set_options1 = function(options1) {
	this.zpp_inner_zn.options1.set(options1.zpp_inner);
	return this.zpp_inner_zn.options1.outer;
};
PreListener.prototype.get_options2 = function() {
	return this.zpp_inner_zn.options2.outer;
};
PreListener.prototype.set_options2 = function(options2) {
	this.zpp_inner_zn.options2.set(options2.zpp_inner);
	return this.zpp_inner_zn.options2.outer;
};
PreListener.prototype.get_handler = function() {
	return this.zpp_inner_zn.handlerp;
};
PreListener.prototype.set_handler = function(handler) {
	if(handler == null) {
		throw new js._Boot.HaxeError("Error: PreListener must take a non-null handler!");
	}
	this.zpp_inner_zn.handlerp = handler;
	this.zpp_inner_zn.wake();
	return this.zpp_inner_zn.handlerp;
};
PreListener.prototype.get_pure = function() {
	return this.zpp_inner_zn.pure;
};
PreListener.prototype.set_pure = function(pure) {
	if(!pure) {
		this.zpp_inner_zn.wake();
	}
	this.zpp_inner_zn.pure = pure;
	return this.zpp_inner_zn.pure;
};
PreListener.prototype.get_interactionType = function() {
	var ret = this.zpp_inner_zn.itype;
	if(ret == 1) {
		if(ZPP_Flags.InteractionType_COLLISION == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_COLLISION = new InteractionType();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.InteractionType_COLLISION;
	} else if(ret == 2) {
		if(ZPP_Flags.InteractionType_SENSOR == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_SENSOR = new InteractionType();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.InteractionType_SENSOR;
	} else if(ret == 4) {
		if(ZPP_Flags.InteractionType_FLUID == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_FLUID = new InteractionType();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.InteractionType_FLUID;
	} else if(ret == 7) {
		if(ZPP_Flags.InteractionType_ANY == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_ANY = new InteractionType();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.InteractionType_ANY;
	} else {
		return null;
	}
};
PreListener.prototype.set_interactionType = function(interactionType) {
	if(interactionType == null) {
		throw new js._Boot.HaxeError("Error: Cannot set listener interaction type to null");
	}
	var ret = this.zpp_inner_zn.itype;
	var tmp;
	if(ret == 1) {
		if(ZPP_Flags.InteractionType_COLLISION == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_COLLISION = new InteractionType();
			ZPP_Flags.internal = false;
		}
		tmp = ZPP_Flags.InteractionType_COLLISION;
	} else if(ret == 2) {
		if(ZPP_Flags.InteractionType_SENSOR == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_SENSOR = new InteractionType();
			ZPP_Flags.internal = false;
		}
		tmp = ZPP_Flags.InteractionType_SENSOR;
	} else if(ret == 4) {
		if(ZPP_Flags.InteractionType_FLUID == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_FLUID = new InteractionType();
			ZPP_Flags.internal = false;
		}
		tmp = ZPP_Flags.InteractionType_FLUID;
	} else if(ret == 7) {
		if(ZPP_Flags.InteractionType_ANY == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_ANY = new InteractionType();
			ZPP_Flags.internal = false;
		}
		tmp = ZPP_Flags.InteractionType_ANY;
	} else {
		tmp = null;
	}
	if(tmp != interactionType) {
		var xtype;
		if(ZPP_Flags.InteractionType_COLLISION == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_COLLISION = new InteractionType();
			ZPP_Flags.internal = false;
		}
		if(interactionType == ZPP_Flags.InteractionType_COLLISION) {
			xtype = 1;
		} else {
			if(ZPP_Flags.InteractionType_SENSOR == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.InteractionType_SENSOR = new InteractionType();
				ZPP_Flags.internal = false;
			}
			if(interactionType == ZPP_Flags.InteractionType_SENSOR) {
				xtype = 2;
			} else {
				if(ZPP_Flags.InteractionType_FLUID == null) {
					ZPP_Flags.internal = true;
					ZPP_Flags.InteractionType_FLUID = new InteractionType();
					ZPP_Flags.internal = false;
				}
				if(interactionType == ZPP_Flags.InteractionType_FLUID) {
					xtype = 4;
				} else {
					xtype = 7;
				}
			}
		}
		this.zpp_inner_zn.itype = xtype;
	}
	var ret1 = this.zpp_inner_zn.itype;
	if(ret1 == 1) {
		if(ZPP_Flags.InteractionType_COLLISION == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_COLLISION = new InteractionType();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.InteractionType_COLLISION;
	} else if(ret1 == 2) {
		if(ZPP_Flags.InteractionType_SENSOR == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_SENSOR = new InteractionType();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.InteractionType_SENSOR;
	} else if(ret1 == 4) {
		if(ZPP_Flags.InteractionType_FLUID == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_FLUID = new InteractionType();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.InteractionType_FLUID;
	} else if(ret1 == 7) {
		if(ZPP_Flags.InteractionType_ANY == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_ANY = new InteractionType();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.InteractionType_ANY;
	} else {
		return null;
	}
};
PreListener.prototype.__class__ = PreListener;
var Constraint = nape.constraint.Constraint = function() {
	this.debugDraw = true;
	this.zpp_inner.insert_cbtype(ZPP_CbType.ANY_CONSTRAINT.zpp_inner);
	if(!Constraint.zpp_internalAlloc) {
		throw new js._Boot.HaxeError("Error: Constraint cannot be instantiated derp!");
	}
};
Constraint.__name__ = ["nape","constraint","Constraint"];
Constraint.prototype.zpp_inner = null;
Constraint.prototype.get_userData = function() {
	if(this.zpp_inner.userData == null) {
		this.zpp_inner.userData = { };
	}
	return this.zpp_inner.userData;
};
Constraint.prototype.debugDraw = null;
Constraint.prototype.get_compound = function() {
	if(this.zpp_inner.compound == null) {
		return null;
	} else {
		return this.zpp_inner.compound.outer;
	}
};
Constraint.prototype.set_compound = function(compound) {
	if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != compound) {
		if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != null) {
			(this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer).zpp_inner.wrap_constraints.remove(this);
		}
		if(compound != null) {
			var _this = compound.zpp_inner.wrap_constraints;
			if(_this.zpp_inner.reverse_flag) {
				_this.push(this);
			} else {
				_this.unshift(this);
			}
		}
	}
	if(this.zpp_inner.compound == null) {
		return null;
	} else {
		return this.zpp_inner.compound.outer;
	}
};
Constraint.prototype.get_space = function() {
	if(this.zpp_inner.space == null) {
		return null;
	} else {
		return this.zpp_inner.space.outer;
	}
};
Constraint.prototype.set_space = function(space) {
	if(this.zpp_inner.compound != null) {
		throw new js._Boot.HaxeError("Error: Cannot set the space of a Constraint belonging to" + " a Compound, only the root Compound space can be set");
	}
	if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
		if(this.zpp_inner.component != null) {
			this.zpp_inner.component.woken = false;
		}
		this.zpp_inner.clearcache();
		if(this.zpp_inner.space != null) {
			this.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(this);
		}
		if(space != null) {
			var _this = space.zpp_inner.wrap_constraints;
			if(_this.zpp_inner.reverse_flag) {
				_this.push(this);
			} else {
				_this.unshift(this);
			}
		} else {
			this.zpp_inner.space = null;
		}
	}
	if(this.zpp_inner.space == null) {
		return null;
	} else {
		return this.zpp_inner.space.outer;
	}
};
Constraint.prototype.get_isSleeping = function() {
	if(this.zpp_inner.space == null || !this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: isSleeping only makes sense if constraint is" + " active and inside a space");
	}
	return this.zpp_inner.component.sleeping;
};
Constraint.prototype.get_active = function() {
	return this.zpp_inner.active;
};
Constraint.prototype.set_active = function(active) {
	if(this.zpp_inner.active != active) {
		if(this.zpp_inner.component != null) {
			this.zpp_inner.component.woken = false;
		}
		this.zpp_inner.clearcache();
		if(active) {
			this.zpp_inner.active = active;
			this.zpp_inner.activate();
			if(this.zpp_inner.space != null) {
				if(this.zpp_inner.component != null) {
					this.zpp_inner.component.sleeping = true;
				}
				this.zpp_inner.space.wake_constraint(this.zpp_inner,true);
			}
		} else {
			if(this.zpp_inner.space != null) {
				this.zpp_inner.wake();
				this.zpp_inner.space.live_constraints.remove(this.zpp_inner);
			}
			this.zpp_inner.active = active;
			this.zpp_inner.deactivate();
		}
	}
	return this.zpp_inner.active;
};
Constraint.prototype.get_ignore = function() {
	return this.zpp_inner.ignore;
};
Constraint.prototype.set_ignore = function(ignore) {
	if(this.zpp_inner.ignore != ignore) {
		this.zpp_inner.ignore = ignore;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.ignore;
};
Constraint.prototype.get_stiff = function() {
	return this.zpp_inner.stiff;
};
Constraint.prototype.set_stiff = function(stiff) {
	if(this.zpp_inner.stiff != stiff) {
		this.zpp_inner.stiff = stiff;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.stiff;
};
Constraint.prototype.get_frequency = function() {
	return this.zpp_inner.frequency;
};
Constraint.prototype.set_frequency = function(frequency) {
	if(frequency != frequency) {
		throw new js._Boot.HaxeError("Error: Constraint::Frequency cannot be NaN");
	}
	if(frequency <= 0) {
		throw new js._Boot.HaxeError("Error: Constraint::Frequency must be >0");
	}
	if(this.zpp_inner.frequency != frequency) {
		this.zpp_inner.frequency = frequency;
		if(!this.zpp_inner.stiff) {
			this.zpp_inner.wake();
		}
	}
	return this.zpp_inner.frequency;
};
Constraint.prototype.get_damping = function() {
	return this.zpp_inner.damping;
};
Constraint.prototype.set_damping = function(damping) {
	if(damping != damping) {
		throw new js._Boot.HaxeError("Error: Constraint::Damping cannot be Nan");
	}
	if(damping < 0) {
		throw new js._Boot.HaxeError("Error: Constraint::Damping must be >=0");
	}
	if(this.zpp_inner.damping != damping) {
		this.zpp_inner.damping = damping;
		if(!this.zpp_inner.stiff) {
			this.zpp_inner.wake();
		}
	}
	return this.zpp_inner.damping;
};
Constraint.prototype.get_maxForce = function() {
	return this.zpp_inner.maxForce;
};
Constraint.prototype.set_maxForce = function(maxForce) {
	if(maxForce != maxForce) {
		throw new js._Boot.HaxeError("Error: Constraint::maxForce cannot be NaN");
	}
	if(maxForce < 0) {
		throw new js._Boot.HaxeError("Error: Constraint::maxForce must be >=0");
	}
	if(this.zpp_inner.maxForce != maxForce) {
		this.zpp_inner.maxForce = maxForce;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.maxForce;
};
Constraint.prototype.get_maxError = function() {
	return this.zpp_inner.maxError;
};
Constraint.prototype.set_maxError = function(maxError) {
	if(maxError != maxError) {
		throw new js._Boot.HaxeError("Error: Constraint::maxError cannot be NaN");
	}
	if(maxError < 0) {
		throw new js._Boot.HaxeError("Error: Constraint::maxError must be >=0");
	}
	if(this.zpp_inner.maxError != maxError) {
		this.zpp_inner.maxError = maxError;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.maxError;
};
Constraint.prototype.get_breakUnderForce = function() {
	return this.zpp_inner.breakUnderForce;
};
Constraint.prototype.set_breakUnderForce = function(breakUnderForce) {
	if(this.zpp_inner.breakUnderForce != breakUnderForce) {
		this.zpp_inner.breakUnderForce = breakUnderForce;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.breakUnderForce;
};
Constraint.prototype.get_breakUnderError = function() {
	return this.zpp_inner.breakUnderError;
};
Constraint.prototype.set_breakUnderError = function(breakUnderError) {
	if(this.zpp_inner.breakUnderError != breakUnderError) {
		this.zpp_inner.breakUnderError = breakUnderError;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.breakUnderError;
};
Constraint.prototype.get_removeOnBreak = function() {
	return this.zpp_inner.removeOnBreak;
};
Constraint.prototype.set_removeOnBreak = function(removeOnBreak) {
	this.zpp_inner.removeOnBreak = removeOnBreak;
	return this.zpp_inner.removeOnBreak;
};
Constraint.prototype.impulse = function() {
	return null;
};
Constraint.prototype.bodyImpulse = function(body) {
	return null;
};
Constraint.prototype.visitBodies = function(lambda) {
};
Constraint.prototype.get_cbTypes = function() {
	if(this.zpp_inner.wrap_cbTypes == null) {
		this.zpp_inner.setupcbTypes();
	}
	return this.zpp_inner.wrap_cbTypes;
};
Constraint.prototype.toString = function() {
	return "{Constraint}";
};
Constraint.prototype.copy = function() {
	return this.zpp_inner.copy();
};
Constraint.prototype.__class__ = Constraint;
var AngleJoint = nape.constraint.AngleJoint = function(body1,body2,jointMin,jointMax,ratio) {
	if(ratio == null) {
		ratio = 1.0;
	}
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new ZPP_AngleJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	Constraint.zpp_internalAlloc = true;
	Constraint.call(this);
	Constraint.zpp_internalAlloc = false;
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null?null:body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null?null:body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	this.zpp_inner.immutable_midstep("AngleJoint::jointMin");
	if(jointMin != jointMin) {
		throw new js._Boot.HaxeError("Error: AngleJoint::jointMin cannot be NaN");
	}
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner.immutable_midstep("AngleJoint::jointMax");
	if(jointMax != jointMax) {
		throw new js._Boot.HaxeError("Error: AngleJoint::jointMax cannot be NaN");
	}
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner.immutable_midstep("AngleJoint::ratio");
	if(ratio != ratio) {
		throw new js._Boot.HaxeError("Error: AngleJoint::ratio cannot be NaN");
	}
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
};
AngleJoint.__name__ = ["nape","constraint","AngleJoint"];
AngleJoint.__super__ = Constraint;
// for(var k in Constraint.prototype ) AngleJoint.prototype[k] = Constraint.prototype[k];
AngleJoint.prototype = Object.create(Constraint.prototype);
AngleJoint.prototype.zpp_inner_zn = null;
AngleJoint.prototype.get_body1 = function() {
	if(this.zpp_inner_zn.b1 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b1.outer;
	}
};
AngleJoint.prototype.set_body1 = function(body1) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null?null:body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	if(this.zpp_inner_zn.b1 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b1.outer;
	}
};
AngleJoint.prototype.get_body2 = function() {
	if(this.zpp_inner_zn.b2 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b2.outer;
	}
};
AngleJoint.prototype.set_body2 = function(body2) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null?null:body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	if(this.zpp_inner_zn.b2 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b2.outer;
	}
};
AngleJoint.prototype.get_jointMin = function() {
	return this.zpp_inner_zn.jointMin;
};
AngleJoint.prototype.set_jointMin = function(jointMin) {
	this.zpp_inner.immutable_midstep("AngleJoint::jointMin");
	if(jointMin != jointMin) {
		throw new js._Boot.HaxeError("Error: AngleJoint::jointMin cannot be NaN");
	}
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMin;
};
AngleJoint.prototype.get_jointMax = function() {
	return this.zpp_inner_zn.jointMax;
};
AngleJoint.prototype.set_jointMax = function(jointMax) {
	this.zpp_inner.immutable_midstep("AngleJoint::jointMax");
	if(jointMax != jointMax) {
		throw new js._Boot.HaxeError("Error: AngleJoint::jointMax cannot be NaN");
	}
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMax;
};
AngleJoint.prototype.get_ratio = function() {
	return this.zpp_inner_zn.ratio;
};
AngleJoint.prototype.set_ratio = function(ratio) {
	this.zpp_inner.immutable_midstep("AngleJoint::ratio");
	if(ratio != ratio) {
		throw new js._Boot.HaxeError("Error: AngleJoint::ratio cannot be NaN");
	}
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.ratio;
};
AngleJoint.prototype.isSlack = function() {
	if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) == null || (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) == null) {
		throw new js._Boot.HaxeError("Error: Cannot compute slack for AngleJoint if either body is null.");
	}
	var _this = this.zpp_inner_zn;
	var slack;
	var C = _this.ratio * _this.b2.rot - _this.b1.rot;
	if(_this.equal) {
		slack = false;
		_this.scale = 1.0;
	} else if(C < _this.jointMin) {
		_this.scale = -1.0;
		slack = false;
	} else if(C > _this.jointMax) {
		C -= _this.jointMax;
		_this.scale = 1.0;
		slack = false;
	} else {
		_this.scale = 0.0;
		C = 0;
		slack = true;
	}
	return slack;
};
AngleJoint.prototype.impulse = function() {
	var ret = new MatMN(1,1);
	var x = this.zpp_inner_zn.jAcc;
	if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) {
		throw new js._Boot.HaxeError("Error: MatMN indices out of range");
	}
	ret.zpp_inner.x[0 * ret.zpp_inner.n] = x;
	return ret;
};
AngleJoint.prototype.bodyImpulse = function(body) {
	if(body == null) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate impulse on null body");
	}
	if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) {
		throw new js._Boot.HaxeError("Error: Body is not linked to this constraint");
	}
	if(!this.zpp_inner.active) {
		return Vec3.get(0,0,0);
	} else {
		return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
};
AngleJoint.prototype.visitBodies = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot apply null lambda to bodies");
	}
	if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) {
		lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
	}
	if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) {
		lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
};
AngleJoint.prototype.__class__ = AngleJoint;
var ConstraintIterator = nape.constraint.ConstraintIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!ZPP_ConstraintList.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "Constraint" + "Iterator derp!");
	}
};
ConstraintIterator.__name__ = ["nape","constraint","ConstraintIterator"];
ConstraintIterator.get = function(list) {
	var ret;
	if(ConstraintIterator.zpp_pool == null) {
		ZPP_ConstraintList.internal = true;
		var ret1 = new ConstraintIterator();
		ZPP_ConstraintList.internal = false;
		ret = ret1;
	} else {
		var r = ConstraintIterator.zpp_pool;
		ConstraintIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
ConstraintIterator.prototype.zpp_inner = null;
ConstraintIterator.prototype.zpp_i = null;
ConstraintIterator.prototype.zpp_critical = null;
ConstraintIterator.prototype.zpp_next = null;
ConstraintIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var _this = this.zpp_inner;
	_this.zpp_inner.valmod();
	if(_this.zpp_inner.zip_length) {
		_this.zpp_inner.zip_length = false;
		_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
	}
	var length = _this.zpp_inner.user_length;
	this.zpp_critical = true;
	if(this.zpp_i < length) {
		return true;
	} else {
		this.zpp_next = ConstraintIterator.zpp_pool;
		ConstraintIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
ConstraintIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
ConstraintIterator.prototype.__class__ = ConstraintIterator;
var ConstraintList = nape.constraint.ConstraintList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new ZPP_ConstraintList();
	this.zpp_inner.outer = this;
};
ConstraintList.__name__ = ["nape","constraint","ConstraintList"];
ConstraintList.fromArray = function(array) {
	if(array == null) {
		throw new js._Boot.HaxeError("Error: Cannot convert null Array to Nape list");
	}
	var ret = new ConstraintList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
ConstraintList.prototype.zpp_inner = null;
ConstraintList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
ConstraintList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
ConstraintList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	var tmp;
	if(index >= 0) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		tmp = index >= this.zpp_inner.user_length;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Index out of bounds");
	}
	if(this.zpp_inner.reverse_flag) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		index = this.zpp_inner.user_length - 1 - index;
	}
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else {
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	return this.zpp_inner.at_ite.elt.outer;
};
ConstraintList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Constraint" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.inner.add(obj.zpp_inner);
		} else {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
ConstraintList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Constraint" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else {
			this.zpp_inner.inner.add(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
ConstraintList.prototype.pop = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Constraint" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	}
	this.zpp_inner.invalidate();
	return ret.outer;
};
ConstraintList.prototype.shift = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Constraint" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	}
	this.zpp_inner.invalidate();
	return ret.outer;
};
ConstraintList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) {
		return this.push(obj);
	} else {
		return this.unshift(obj);
	}
};
ConstraintList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Constraint" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(obj);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.remove(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
	}
	return ret;
};
ConstraintList.prototype.clear = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Constraint" + "List is immutable");
	}
	if(this.zpp_inner.reverse_flag) {
		while(this.zpp_inner.inner.head != null) this.pop();
	} else {
		while(this.zpp_inner.inner.head != null) this.shift();
	}
};
ConstraintList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
ConstraintList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return ConstraintIterator.get(this);
};
ConstraintList.prototype.copy = function(deep) {
	if(deep == null) {
		deep = false;
	}
	var ret = new ConstraintList();
	this.zpp_inner.valmod();
	var _g = ConstraintIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ConstraintIterator.zpp_pool;
			ConstraintIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(deep) {
			throw new js._Boot.HaxeError("Error: " + "Constraint" + " is not a copyable type");
		}
		ret.push(i);
	}
	return ret;
};
ConstraintList.prototype.merge = function(xs) {
	if(xs == null) {
		throw new js._Boot.HaxeError("Error: Cannot merge with null list");
	}
	xs.zpp_inner.valmod();
	var _g = ConstraintIterator.get(xs);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ConstraintIterator.zpp_pool;
			ConstraintIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) {
				this.push(x);
			} else {
				this.unshift(x);
			}
		}
	}
};
ConstraintList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	this.zpp_inner.valmod();
	var _g = ConstraintIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ConstraintIterator.zpp_pool;
			ConstraintIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) {
			ret += ",";
		}
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
};
ConstraintList.prototype.foreach = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot execute null on list elements");
	}
	this.zpp_inner.valmod();
	var it = ConstraintIterator.get(this);
	while(true) {
		it.zpp_inner.zpp_inner.valmod();
		var _this = it.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		it.zpp_critical = true;
		var tmp;
		if(it.zpp_i < length) {
			tmp = true;
		} else {
			it.zpp_next = ConstraintIterator.zpp_pool;
			ConstraintIterator.zpp_pool = it;
			it.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		try {
			it.zpp_critical = false;
			lambda(it.zpp_inner.at(it.zpp_i++));
		} catch( e ) {
			it.zpp_next = ConstraintIterator.zpp_pool;
			ConstraintIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
	}
	return this;
};
ConstraintList.prototype.filter = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot select elements of list with null");
	}
	var i = 0;
	while(true) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(!(i < this.zpp_inner.user_length)) {
			break;
		}
		var x = this.at(i);
		try {
			if(lambda(x)) {
				++i;
			} else {
				this.remove(x);
			}
		} catch( e ) {
			break;
		}
	}
	return this;
};
ConstraintList.prototype.__class__ = ConstraintList;
var DistanceJoint = nape.constraint.DistanceJoint = function(body1,body2,anchor1,anchor2,jointMin,jointMax) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new ZPP_DistanceJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	Constraint.zpp_internalAlloc = true;
	Constraint.call(this);
	Constraint.zpp_internalAlloc = false;
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null?null:body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null?null:body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	var _this = this.zpp_inner_zn.wrap_a1;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor1 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor1.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor1.zpp_inner.x;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor1.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor1.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(anchor1.zpp_inner.weak) {
		if(anchor1 != null && anchor1.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor1.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor1.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor1.zpp_inner;
		anchor1.zpp_inner.outer = null;
		anchor1.zpp_inner = null;
		anchor1.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor1;
		} else {
			ZPP_PubPool.poolVec2 = anchor1;
		}
		ZPP_PubPool.nextVec2 = anchor1;
		anchor1.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	var _this9 = this.zpp_inner_zn.wrap_a2;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this10 = _this9.zpp_inner;
	if(_this10._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this10._isimmutable != null) {
		_this10._isimmutable();
	}
	if(anchor2 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this11 = anchor2.zpp_inner;
	if(_this11._validate != null) {
		_this11._validate();
	}
	var x1 = anchor2.zpp_inner.x;
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this12 = anchor2.zpp_inner;
	if(_this12._validate != null) {
		_this12._validate();
	}
	var y1 = anchor2.zpp_inner.y;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this13 = _this9.zpp_inner;
	if(_this13._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this13._isimmutable != null) {
		_this13._isimmutable();
	}
	if(x1 != x1 || y1 != y1) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp1;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this14 = _this9.zpp_inner;
	if(_this14._validate != null) {
		_this14._validate();
	}
	if(_this9.zpp_inner.x == x1) {
		if(_this9 != null && _this9.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this15 = _this9.zpp_inner;
		if(_this15._validate != null) {
			_this15._validate();
		}
		tmp1 = _this9.zpp_inner.y == y1;
	} else {
		tmp1 = false;
	}
	if(!tmp1) {
		_this9.zpp_inner.x = x1;
		_this9.zpp_inner.y = y1;
		var _this16 = _this9.zpp_inner;
		if(_this16._invalidate != null) {
			_this16._invalidate(_this16);
		}
	}
	if(anchor2.zpp_inner.weak) {
		if(anchor2 != null && anchor2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this17 = anchor2.zpp_inner;
		if(_this17._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this17._isimmutable != null) {
			_this17._isimmutable();
		}
		if(anchor2.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = anchor2.zpp_inner;
		anchor2.zpp_inner.outer = null;
		anchor2.zpp_inner = null;
		anchor2.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor2;
		} else {
			ZPP_PubPool.poolVec2 = anchor2;
		}
		ZPP_PubPool.nextVec2 = anchor2;
		anchor2.zpp_disp = true;
		if(inner1.outer != null) {
			inner1.outer.zpp_inner = null;
			inner1.outer = null;
		}
		inner1._isimmutable = null;
		inner1._validate = null;
		inner1._invalidate = null;
		inner1.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner1;
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMin");
	if(jointMin != jointMin) {
		throw new js._Boot.HaxeError("Error: DistanceJoint::jointMin cannot be NaN");
	}
	if(jointMin < 0) {
		throw new js._Boot.HaxeError("Error: DistanceJoint::jointMin must be >= 0");
	}
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMax");
	if(jointMax != jointMax) {
		throw new js._Boot.HaxeError("Error: DistanceJoint::jointMax cannot be NaN");
	}
	if(jointMax < 0) {
		throw new js._Boot.HaxeError("Error: DistanceJoint::jointMax must be >= 0");
	}
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
};
DistanceJoint.__name__ = ["nape","constraint","DistanceJoint"];
DistanceJoint.__super__ = Constraint;
// for(var k in Constraint.prototype ) DistanceJoint.prototype[k] = Constraint.prototype[k];
DistanceJoint.prototype = Object.create(Constraint.prototype);
DistanceJoint.prototype.zpp_inner_zn = null;
DistanceJoint.prototype.get_body1 = function() {
	if(this.zpp_inner_zn.b1 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b1.outer;
	}
};
DistanceJoint.prototype.set_body1 = function(body1) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null?null:body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	if(this.zpp_inner_zn.b1 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b1.outer;
	}
};
DistanceJoint.prototype.get_body2 = function() {
	if(this.zpp_inner_zn.b2 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b2.outer;
	}
};
DistanceJoint.prototype.set_body2 = function(body2) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null?null:body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	if(this.zpp_inner_zn.b2 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b2.outer;
	}
};
DistanceJoint.prototype.get_anchor1 = function() {
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	return this.zpp_inner_zn.wrap_a1;
};
DistanceJoint.prototype.set_anchor1 = function(anchor1) {
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	var _this = this.zpp_inner_zn.wrap_a1;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor1 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor1.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor1.zpp_inner.x;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor1.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor1.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(anchor1.zpp_inner.weak) {
		if(anchor1 != null && anchor1.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor1.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor1.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor1.zpp_inner;
		anchor1.zpp_inner.outer = null;
		anchor1.zpp_inner = null;
		anchor1.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor1;
		} else {
			ZPP_PubPool.poolVec2 = anchor1;
		}
		ZPP_PubPool.nextVec2 = anchor1;
		anchor1.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	return this.zpp_inner_zn.wrap_a1;
};
DistanceJoint.prototype.get_anchor2 = function() {
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	return this.zpp_inner_zn.wrap_a2;
};
DistanceJoint.prototype.set_anchor2 = function(anchor2) {
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	var _this = this.zpp_inner_zn.wrap_a2;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor2 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor2.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor2.zpp_inner.x;
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor2.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor2.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(anchor2.zpp_inner.weak) {
		if(anchor2 != null && anchor2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor2.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor2.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor2.zpp_inner;
		anchor2.zpp_inner.outer = null;
		anchor2.zpp_inner = null;
		anchor2.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor2;
		} else {
			ZPP_PubPool.poolVec2 = anchor2;
		}
		ZPP_PubPool.nextVec2 = anchor2;
		anchor2.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	return this.zpp_inner_zn.wrap_a2;
};
DistanceJoint.prototype.get_jointMin = function() {
	return this.zpp_inner_zn.jointMin;
};
DistanceJoint.prototype.set_jointMin = function(jointMin) {
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMin");
	if(jointMin != jointMin) {
		throw new js._Boot.HaxeError("Error: DistanceJoint::jointMin cannot be NaN");
	}
	if(jointMin < 0) {
		throw new js._Boot.HaxeError("Error: DistanceJoint::jointMin must be >= 0");
	}
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMin;
};
DistanceJoint.prototype.get_jointMax = function() {
	return this.zpp_inner_zn.jointMax;
};
DistanceJoint.prototype.set_jointMax = function(jointMax) {
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMax");
	if(jointMax != jointMax) {
		throw new js._Boot.HaxeError("Error: DistanceJoint::jointMax cannot be NaN");
	}
	if(jointMax < 0) {
		throw new js._Boot.HaxeError("Error: DistanceJoint::jointMax must be >= 0");
	}
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMax;
};
DistanceJoint.prototype.isSlack = function() {
	if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) == null || (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) == null) {
		throw new js._Boot.HaxeError("Error: Cannot compute slack for DistanceJoint if either body is null.");
	}
	return this.zpp_inner_zn.slack;
};
DistanceJoint.prototype.impulse = function() {
	var ret = new MatMN(1,1);
	var x = this.zpp_inner_zn.jAcc;
	if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) {
		throw new js._Boot.HaxeError("Error: MatMN indices out of range");
	}
	ret.zpp_inner.x[0 * ret.zpp_inner.n] = x;
	return ret;
};
DistanceJoint.prototype.bodyImpulse = function(body) {
	if(body == null) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate impulse on null body");
	}
	if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) {
		throw new js._Boot.HaxeError("Error: Body is not linked to this constraint");
	}
	if(!this.zpp_inner.active) {
		return Vec3.get();
	} else {
		return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
};
DistanceJoint.prototype.visitBodies = function(lambda) {
	if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) {
		lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
	}
	if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) {
		lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
};
DistanceJoint.prototype.__class__ = DistanceJoint;
var LineJoint = nape.constraint.LineJoint = function(body1,body2,anchor1,anchor2,direction,jointMin,jointMax) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new ZPP_LineJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	Constraint.zpp_internalAlloc = true;
	Constraint.call(this);
	Constraint.zpp_internalAlloc = false;
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null?null:body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null?null:body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	var _this = this.zpp_inner_zn.wrap_a1;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor1 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor1.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor1.zpp_inner.x;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor1.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor1.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(anchor1.zpp_inner.weak) {
		if(anchor1 != null && anchor1.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor1.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor1.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor1.zpp_inner;
		anchor1.zpp_inner.outer = null;
		anchor1.zpp_inner = null;
		anchor1.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor1;
		} else {
			ZPP_PubPool.poolVec2 = anchor1;
		}
		ZPP_PubPool.nextVec2 = anchor1;
		anchor1.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	var _this9 = this.zpp_inner_zn.wrap_a2;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this10 = _this9.zpp_inner;
	if(_this10._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this10._isimmutable != null) {
		_this10._isimmutable();
	}
	if(anchor2 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this11 = anchor2.zpp_inner;
	if(_this11._validate != null) {
		_this11._validate();
	}
	var x1 = anchor2.zpp_inner.x;
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this12 = anchor2.zpp_inner;
	if(_this12._validate != null) {
		_this12._validate();
	}
	var y1 = anchor2.zpp_inner.y;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this13 = _this9.zpp_inner;
	if(_this13._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this13._isimmutable != null) {
		_this13._isimmutable();
	}
	if(x1 != x1 || y1 != y1) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp1;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this14 = _this9.zpp_inner;
	if(_this14._validate != null) {
		_this14._validate();
	}
	if(_this9.zpp_inner.x == x1) {
		if(_this9 != null && _this9.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this15 = _this9.zpp_inner;
		if(_this15._validate != null) {
			_this15._validate();
		}
		tmp1 = _this9.zpp_inner.y == y1;
	} else {
		tmp1 = false;
	}
	if(!tmp1) {
		_this9.zpp_inner.x = x1;
		_this9.zpp_inner.y = y1;
		var _this16 = _this9.zpp_inner;
		if(_this16._invalidate != null) {
			_this16._invalidate(_this16);
		}
	}
	if(anchor2.zpp_inner.weak) {
		if(anchor2 != null && anchor2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this17 = anchor2.zpp_inner;
		if(_this17._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this17._isimmutable != null) {
			_this17._isimmutable();
		}
		if(anchor2.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = anchor2.zpp_inner;
		anchor2.zpp_inner.outer = null;
		anchor2.zpp_inner = null;
		anchor2.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor2;
		} else {
			ZPP_PubPool.poolVec2 = anchor2;
		}
		ZPP_PubPool.nextVec2 = anchor2;
		anchor2.zpp_disp = true;
		if(inner1.outer != null) {
			inner1.outer.zpp_inner = null;
			inner1.outer = null;
		}
		inner1._isimmutable = null;
		inner1._validate = null;
		inner1._invalidate = null;
		inner1.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner1;
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	if(direction != null && direction.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(direction == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "direction" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_n == null) {
		this.zpp_inner_zn.setup_n();
	}
	var _this18 = this.zpp_inner_zn.wrap_n;
	if(_this18 != null && _this18.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(direction != null && direction.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this19 = _this18.zpp_inner;
	if(_this19._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this19._isimmutable != null) {
		_this19._isimmutable();
	}
	if(direction == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(direction != null && direction.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this20 = direction.zpp_inner;
	if(_this20._validate != null) {
		_this20._validate();
	}
	var x2 = direction.zpp_inner.x;
	if(direction != null && direction.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this21 = direction.zpp_inner;
	if(_this21._validate != null) {
		_this21._validate();
	}
	var y2 = direction.zpp_inner.y;
	if(_this18 != null && _this18.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this22 = _this18.zpp_inner;
	if(_this22._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this22._isimmutable != null) {
		_this22._isimmutable();
	}
	if(x2 != x2 || y2 != y2) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp2;
	if(_this18 != null && _this18.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this23 = _this18.zpp_inner;
	if(_this23._validate != null) {
		_this23._validate();
	}
	if(_this18.zpp_inner.x == x2) {
		if(_this18 != null && _this18.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this24 = _this18.zpp_inner;
		if(_this24._validate != null) {
			_this24._validate();
		}
		tmp2 = _this18.zpp_inner.y == y2;
	} else {
		tmp2 = false;
	}
	if(!tmp2) {
		_this18.zpp_inner.x = x2;
		_this18.zpp_inner.y = y2;
		var _this25 = _this18.zpp_inner;
		if(_this25._invalidate != null) {
			_this25._invalidate(_this25);
		}
	}
	if(direction.zpp_inner.weak) {
		if(direction != null && direction.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this26 = direction.zpp_inner;
		if(_this26._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this26._isimmutable != null) {
			_this26._isimmutable();
		}
		if(direction.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner2 = direction.zpp_inner;
		direction.zpp_inner.outer = null;
		direction.zpp_inner = null;
		direction.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = direction;
		} else {
			ZPP_PubPool.poolVec2 = direction;
		}
		ZPP_PubPool.nextVec2 = direction;
		direction.zpp_disp = true;
		if(inner2.outer != null) {
			inner2.outer.zpp_inner = null;
			inner2.outer = null;
		}
		inner2._isimmutable = null;
		inner2._validate = null;
		inner2._invalidate = null;
		inner2.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner2;
	}
	if(this.zpp_inner_zn.wrap_n == null) {
		this.zpp_inner_zn.setup_n();
	}
	this.zpp_inner.immutable_midstep("LineJoint::jointMin");
	if(jointMin != jointMin) {
		throw new js._Boot.HaxeError("Error: AngleJoint::jointMin cannot be NaN");
	}
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner.immutable_midstep("LineJoint::jointMax");
	if(jointMax != jointMax) {
		throw new js._Boot.HaxeError("Error: AngleJoint::jointMax cannot be NaN");
	}
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
};
LineJoint.__name__ = ["nape","constraint","LineJoint"];
LineJoint.__super__ = Constraint;
// for(var k in Constraint.prototype ) LineJoint.prototype[k] = Constraint.prototype[k];
LineJoint.prototype = Object.create(Constraint.prototype);
LineJoint.prototype.zpp_inner_zn = null;
LineJoint.prototype.get_body1 = function() {
	if(this.zpp_inner_zn.b1 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b1.outer;
	}
};
LineJoint.prototype.set_body1 = function(body1) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null?null:body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	if(this.zpp_inner_zn.b1 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b1.outer;
	}
};
LineJoint.prototype.get_body2 = function() {
	if(this.zpp_inner_zn.b2 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b2.outer;
	}
};
LineJoint.prototype.set_body2 = function(body2) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null?null:body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	if(this.zpp_inner_zn.b2 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b2.outer;
	}
};
LineJoint.prototype.get_anchor1 = function() {
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	return this.zpp_inner_zn.wrap_a1;
};
LineJoint.prototype.set_anchor1 = function(anchor1) {
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	var _this = this.zpp_inner_zn.wrap_a1;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor1 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor1.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor1.zpp_inner.x;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor1.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor1.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(anchor1.zpp_inner.weak) {
		if(anchor1 != null && anchor1.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor1.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor1.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor1.zpp_inner;
		anchor1.zpp_inner.outer = null;
		anchor1.zpp_inner = null;
		anchor1.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor1;
		} else {
			ZPP_PubPool.poolVec2 = anchor1;
		}
		ZPP_PubPool.nextVec2 = anchor1;
		anchor1.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	return this.zpp_inner_zn.wrap_a1;
};
LineJoint.prototype.get_anchor2 = function() {
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	return this.zpp_inner_zn.wrap_a2;
};
LineJoint.prototype.set_anchor2 = function(anchor2) {
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	var _this = this.zpp_inner_zn.wrap_a2;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor2 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor2.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor2.zpp_inner.x;
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor2.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor2.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(anchor2.zpp_inner.weak) {
		if(anchor2 != null && anchor2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor2.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor2.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor2.zpp_inner;
		anchor2.zpp_inner.outer = null;
		anchor2.zpp_inner = null;
		anchor2.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor2;
		} else {
			ZPP_PubPool.poolVec2 = anchor2;
		}
		ZPP_PubPool.nextVec2 = anchor2;
		anchor2.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	return this.zpp_inner_zn.wrap_a2;
};
LineJoint.prototype.get_direction = function() {
	if(this.zpp_inner_zn.wrap_n == null) {
		this.zpp_inner_zn.setup_n();
	}
	return this.zpp_inner_zn.wrap_n;
};
LineJoint.prototype.set_direction = function(direction) {
	if(direction != null && direction.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(direction == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "direction" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_n == null) {
		this.zpp_inner_zn.setup_n();
	}
	var _this = this.zpp_inner_zn.wrap_n;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(direction != null && direction.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(direction == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(direction != null && direction.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = direction.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = direction.zpp_inner.x;
	if(direction != null && direction.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = direction.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = direction.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(direction.zpp_inner.weak) {
		if(direction != null && direction.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = direction.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(direction.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = direction.zpp_inner;
		direction.zpp_inner.outer = null;
		direction.zpp_inner = null;
		direction.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = direction;
		} else {
			ZPP_PubPool.poolVec2 = direction;
		}
		ZPP_PubPool.nextVec2 = direction;
		direction.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner_zn.wrap_n == null) {
		this.zpp_inner_zn.setup_n();
	}
	return this.zpp_inner_zn.wrap_n;
};
LineJoint.prototype.get_jointMin = function() {
	return this.zpp_inner_zn.jointMin;
};
LineJoint.prototype.set_jointMin = function(jointMin) {
	this.zpp_inner.immutable_midstep("LineJoint::jointMin");
	if(jointMin != jointMin) {
		throw new js._Boot.HaxeError("Error: AngleJoint::jointMin cannot be NaN");
	}
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMin;
};
LineJoint.prototype.get_jointMax = function() {
	return this.zpp_inner_zn.jointMax;
};
LineJoint.prototype.set_jointMax = function(jointMax) {
	this.zpp_inner.immutable_midstep("LineJoint::jointMax");
	if(jointMax != jointMax) {
		throw new js._Boot.HaxeError("Error: AngleJoint::jointMax cannot be NaN");
	}
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMax;
};
LineJoint.prototype.impulse = function() {
	var ret = new MatMN(2,1);
	var x = this.zpp_inner_zn.jAccx;
	if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) {
		throw new js._Boot.HaxeError("Error: MatMN indices out of range");
	}
	ret.zpp_inner.x[0 * ret.zpp_inner.n] = x;
	var x1 = this.zpp_inner_zn.jAccy;
	if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) {
		throw new js._Boot.HaxeError("Error: MatMN indices out of range");
	}
	ret.zpp_inner.x[ret.zpp_inner.n] = x1;
	return ret;
};
LineJoint.prototype.bodyImpulse = function(body) {
	if(body == null) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate impulse on null body");
	}
	if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) {
		throw new js._Boot.HaxeError("Error: Body is not linked to this constraint");
	}
	if(!this.zpp_inner.active) {
		return Vec3.get();
	} else {
		return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
};
LineJoint.prototype.visitBodies = function(lambda) {
	if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) {
		lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
	}
	if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) {
		lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
};
LineJoint.prototype.__class__ = LineJoint;
var MotorJoint = nape.constraint.MotorJoint = function(body1,body2,rate,ratio) {
	if(ratio == null) {
		ratio = 1.0;
	}
	if(rate == null) {
		rate = 0.0;
	}
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new ZPP_MotorJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	Constraint.zpp_internalAlloc = true;
	Constraint.call(this);
	Constraint.zpp_internalAlloc = false;
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null?null:body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null?null:body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	this.zpp_inner.immutable_midstep("MotorJoint::rate");
	if(rate != rate) {
		throw new js._Boot.HaxeError("Error: MotorJoint::rate cannot be NaN");
	}
	if(this.zpp_inner_zn.rate != rate) {
		this.zpp_inner_zn.rate = rate;
		this.zpp_inner.wake();
	}
	this.zpp_inner.immutable_midstep("MotorJoint::ratio");
	if(ratio != ratio) {
		throw new js._Boot.HaxeError("Error: MotorJoint::ratio cannot be NaN");
	}
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
};
MotorJoint.__name__ = ["nape","constraint","MotorJoint"];
MotorJoint.__super__ = Constraint;
// for(var k in Constraint.prototype ) MotorJoint.prototype[k] = Constraint.prototype[k];
MotorJoint.prototype = Object.create(Constraint.prototype);
MotorJoint.prototype.zpp_inner_zn = null;
MotorJoint.prototype.get_body1 = function() {
	if(this.zpp_inner_zn.b1 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b1.outer;
	}
};
MotorJoint.prototype.set_body1 = function(body1) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null?null:body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	if(this.zpp_inner_zn.b1 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b1.outer;
	}
};
MotorJoint.prototype.get_body2 = function() {
	if(this.zpp_inner_zn.b2 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b2.outer;
	}
};
MotorJoint.prototype.set_body2 = function(body2) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null?null:body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	if(this.zpp_inner_zn.b2 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b2.outer;
	}
};
MotorJoint.prototype.get_ratio = function() {
	return this.zpp_inner_zn.ratio;
};
MotorJoint.prototype.set_ratio = function(ratio) {
	this.zpp_inner.immutable_midstep("MotorJoint::ratio");
	if(ratio != ratio) {
		throw new js._Boot.HaxeError("Error: MotorJoint::ratio cannot be NaN");
	}
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.ratio;
};
MotorJoint.prototype.get_rate = function() {
	return this.zpp_inner_zn.rate;
};
MotorJoint.prototype.set_rate = function(rate) {
	this.zpp_inner.immutable_midstep("MotorJoint::rate");
	if(rate != rate) {
		throw new js._Boot.HaxeError("Error: MotorJoint::rate cannot be NaN");
	}
	if(this.zpp_inner_zn.rate != rate) {
		this.zpp_inner_zn.rate = rate;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.rate;
};
MotorJoint.prototype.impulse = function() {
	var ret = new MatMN(1,1);
	var x = this.zpp_inner_zn.jAcc;
	if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) {
		throw new js._Boot.HaxeError("Error: MatMN indices out of range");
	}
	ret.zpp_inner.x[0 * ret.zpp_inner.n] = x;
	return ret;
};
MotorJoint.prototype.bodyImpulse = function(body) {
	if(body == null) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate impulse on null body");
	}
	if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) {
		throw new js._Boot.HaxeError("Error: Body is not linked to this constraint");
	}
	if(!this.zpp_inner.active) {
		return Vec3.get();
	} else {
		return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
};
MotorJoint.prototype.visitBodies = function(lambda) {
	if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) {
		lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
	}
	if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) {
		lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
};
MotorJoint.prototype.__class__ = MotorJoint;
var PivotJoint = nape.constraint.PivotJoint = function(body1,body2,anchor1,anchor2) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new ZPP_PivotJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	Constraint.zpp_internalAlloc = true;
	Constraint.call(this);
	Constraint.zpp_internalAlloc = false;
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null?null:body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null?null:body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	var _this = this.zpp_inner_zn.wrap_a1;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor1 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor1.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor1.zpp_inner.x;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor1.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor1.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(anchor1.zpp_inner.weak) {
		if(anchor1 != null && anchor1.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor1.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor1.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor1.zpp_inner;
		anchor1.zpp_inner.outer = null;
		anchor1.zpp_inner = null;
		anchor1.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor1;
		} else {
			ZPP_PubPool.poolVec2 = anchor1;
		}
		ZPP_PubPool.nextVec2 = anchor1;
		anchor1.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	var _this9 = this.zpp_inner_zn.wrap_a2;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this10 = _this9.zpp_inner;
	if(_this10._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this10._isimmutable != null) {
		_this10._isimmutable();
	}
	if(anchor2 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this11 = anchor2.zpp_inner;
	if(_this11._validate != null) {
		_this11._validate();
	}
	var x1 = anchor2.zpp_inner.x;
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this12 = anchor2.zpp_inner;
	if(_this12._validate != null) {
		_this12._validate();
	}
	var y1 = anchor2.zpp_inner.y;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this13 = _this9.zpp_inner;
	if(_this13._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this13._isimmutable != null) {
		_this13._isimmutable();
	}
	if(x1 != x1 || y1 != y1) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp1;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this14 = _this9.zpp_inner;
	if(_this14._validate != null) {
		_this14._validate();
	}
	if(_this9.zpp_inner.x == x1) {
		if(_this9 != null && _this9.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this15 = _this9.zpp_inner;
		if(_this15._validate != null) {
			_this15._validate();
		}
		tmp1 = _this9.zpp_inner.y == y1;
	} else {
		tmp1 = false;
	}
	if(!tmp1) {
		_this9.zpp_inner.x = x1;
		_this9.zpp_inner.y = y1;
		var _this16 = _this9.zpp_inner;
		if(_this16._invalidate != null) {
			_this16._invalidate(_this16);
		}
	}
	if(anchor2.zpp_inner.weak) {
		if(anchor2 != null && anchor2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this17 = anchor2.zpp_inner;
		if(_this17._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this17._isimmutable != null) {
			_this17._isimmutable();
		}
		if(anchor2.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = anchor2.zpp_inner;
		anchor2.zpp_inner.outer = null;
		anchor2.zpp_inner = null;
		anchor2.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor2;
		} else {
			ZPP_PubPool.poolVec2 = anchor2;
		}
		ZPP_PubPool.nextVec2 = anchor2;
		anchor2.zpp_disp = true;
		if(inner1.outer != null) {
			inner1.outer.zpp_inner = null;
			inner1.outer = null;
		}
		inner1._isimmutable = null;
		inner1._validate = null;
		inner1._invalidate = null;
		inner1.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner1;
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
};
PivotJoint.__name__ = ["nape","constraint","PivotJoint"];
PivotJoint.__super__ = Constraint;
// for(var k in Constraint.prototype ) PivotJoint.prototype[k] = Constraint.prototype[k];
PivotJoint.prototype = Object.create(Constraint.prototype);
PivotJoint.prototype.zpp_inner_zn = null;
PivotJoint.prototype.get_body1 = function() {
	if(this.zpp_inner_zn.b1 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b1.outer;
	}
};
PivotJoint.prototype.set_body1 = function(body1) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null?null:body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	if(this.zpp_inner_zn.b1 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b1.outer;
	}
};
PivotJoint.prototype.get_body2 = function() {
	if(this.zpp_inner_zn.b2 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b2.outer;
	}
};
PivotJoint.prototype.set_body2 = function(body2) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null?null:body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	if(this.zpp_inner_zn.b2 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b2.outer;
	}
};
PivotJoint.prototype.get_anchor1 = function() {
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	return this.zpp_inner_zn.wrap_a1;
};
PivotJoint.prototype.set_anchor1 = function(anchor1) {
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	var _this = this.zpp_inner_zn.wrap_a1;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor1 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor1.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor1.zpp_inner.x;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor1.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor1.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(anchor1.zpp_inner.weak) {
		if(anchor1 != null && anchor1.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor1.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor1.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor1.zpp_inner;
		anchor1.zpp_inner.outer = null;
		anchor1.zpp_inner = null;
		anchor1.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor1;
		} else {
			ZPP_PubPool.poolVec2 = anchor1;
		}
		ZPP_PubPool.nextVec2 = anchor1;
		anchor1.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	return this.zpp_inner_zn.wrap_a1;
};
PivotJoint.prototype.get_anchor2 = function() {
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	return this.zpp_inner_zn.wrap_a2;
};
PivotJoint.prototype.set_anchor2 = function(anchor2) {
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	var _this = this.zpp_inner_zn.wrap_a2;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor2 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor2.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor2.zpp_inner.x;
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor2.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor2.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(anchor2.zpp_inner.weak) {
		if(anchor2 != null && anchor2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor2.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor2.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor2.zpp_inner;
		anchor2.zpp_inner.outer = null;
		anchor2.zpp_inner = null;
		anchor2.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor2;
		} else {
			ZPP_PubPool.poolVec2 = anchor2;
		}
		ZPP_PubPool.nextVec2 = anchor2;
		anchor2.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	return this.zpp_inner_zn.wrap_a2;
};
PivotJoint.prototype.impulse = function() {
	var ret = new MatMN(2,1);
	var x = this.zpp_inner_zn.jAccx;
	if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) {
		throw new js._Boot.HaxeError("Error: MatMN indices out of range");
	}
	ret.zpp_inner.x[0 * ret.zpp_inner.n] = x;
	var x1 = this.zpp_inner_zn.jAccy;
	if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) {
		throw new js._Boot.HaxeError("Error: MatMN indices out of range");
	}
	ret.zpp_inner.x[ret.zpp_inner.n] = x1;
	return ret;
};
PivotJoint.prototype.bodyImpulse = function(body) {
	if(body == null) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate impulse on null body");
	}
	if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) {
		throw new js._Boot.HaxeError("Error: Body is not linked to this constraint");
	}
	if(!this.zpp_inner.active) {
		return Vec3.get();
	} else {
		return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
};
PivotJoint.prototype.visitBodies = function(lambda) {
	if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) {
		lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
	}
	if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) {
		lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
};
PivotJoint.prototype.__class__ = PivotJoint;
var PulleyJoint = nape.constraint.PulleyJoint = function(body1,body2,body3,body4,anchor1,anchor2,anchor3,anchor4,jointMin,jointMax,ratio) {
	if(ratio == null) {
		ratio = 1.0;
	}
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new ZPP_PulleyJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	Constraint.zpp_internalAlloc = true;
	Constraint.call(this);
	Constraint.zpp_internalAlloc = false;
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null?null:body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1 && this.zpp_inner_zn.b3 != inbody1 && this.zpp_inner_zn.b4 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null?null:body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2 && this.zpp_inner_zn.b3 != inbody2 && this.zpp_inner_zn.b4 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	this.zpp_inner.immutable_midstep("Constraint::" + "body3");
	var inbody3 = body3 == null?null:body3.zpp_inner;
	if(inbody3 != this.zpp_inner_zn.b3) {
		if(this.zpp_inner_zn.b3 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b3) {
				if(this.zpp_inner_zn.b3 != null) {
					this.zpp_inner_zn.b3.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b3.wake();
			}
		}
		this.zpp_inner_zn.b3 = inbody3;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody3 != null && this.zpp_inner_zn.b1 != inbody3 && this.zpp_inner_zn.b2 != inbody3 && this.zpp_inner_zn.b4 != inbody3) {
			if(inbody3 != null) {
				inbody3.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody3 != null) {
				inbody3.wake();
			}
		}
	}
	this.zpp_inner.immutable_midstep("Constraint::" + "body4");
	var inbody4 = body4 == null?null:body4.zpp_inner;
	if(inbody4 != this.zpp_inner_zn.b4) {
		if(this.zpp_inner_zn.b4 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b4) {
				if(this.zpp_inner_zn.b4 != null) {
					this.zpp_inner_zn.b4.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b4.wake();
			}
		}
		this.zpp_inner_zn.b4 = inbody4;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody4 != null && this.zpp_inner_zn.b1 != inbody4 && this.zpp_inner_zn.b2 != inbody4 && this.zpp_inner_zn.b3 != inbody4) {
			if(inbody4 != null) {
				inbody4.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody4 != null) {
				inbody4.wake();
			}
		}
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	var _this = this.zpp_inner_zn.wrap_a1;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor1 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor1.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor1.zpp_inner.x;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor1.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor1.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(anchor1.zpp_inner.weak) {
		if(anchor1 != null && anchor1.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor1.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor1.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor1.zpp_inner;
		anchor1.zpp_inner.outer = null;
		anchor1.zpp_inner = null;
		anchor1.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor1;
		} else {
			ZPP_PubPool.poolVec2 = anchor1;
		}
		ZPP_PubPool.nextVec2 = anchor1;
		anchor1.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	var _this9 = this.zpp_inner_zn.wrap_a2;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this10 = _this9.zpp_inner;
	if(_this10._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this10._isimmutable != null) {
		_this10._isimmutable();
	}
	if(anchor2 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this11 = anchor2.zpp_inner;
	if(_this11._validate != null) {
		_this11._validate();
	}
	var x1 = anchor2.zpp_inner.x;
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this12 = anchor2.zpp_inner;
	if(_this12._validate != null) {
		_this12._validate();
	}
	var y1 = anchor2.zpp_inner.y;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this13 = _this9.zpp_inner;
	if(_this13._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this13._isimmutable != null) {
		_this13._isimmutable();
	}
	if(x1 != x1 || y1 != y1) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp1;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this14 = _this9.zpp_inner;
	if(_this14._validate != null) {
		_this14._validate();
	}
	if(_this9.zpp_inner.x == x1) {
		if(_this9 != null && _this9.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this15 = _this9.zpp_inner;
		if(_this15._validate != null) {
			_this15._validate();
		}
		tmp1 = _this9.zpp_inner.y == y1;
	} else {
		tmp1 = false;
	}
	if(!tmp1) {
		_this9.zpp_inner.x = x1;
		_this9.zpp_inner.y = y1;
		var _this16 = _this9.zpp_inner;
		if(_this16._invalidate != null) {
			_this16._invalidate(_this16);
		}
	}
	if(anchor2.zpp_inner.weak) {
		if(anchor2 != null && anchor2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this17 = anchor2.zpp_inner;
		if(_this17._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this17._isimmutable != null) {
			_this17._isimmutable();
		}
		if(anchor2.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = anchor2.zpp_inner;
		anchor2.zpp_inner.outer = null;
		anchor2.zpp_inner = null;
		anchor2.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor2;
		} else {
			ZPP_PubPool.poolVec2 = anchor2;
		}
		ZPP_PubPool.nextVec2 = anchor2;
		anchor2.zpp_disp = true;
		if(inner1.outer != null) {
			inner1.outer.zpp_inner = null;
			inner1.outer = null;
		}
		inner1._isimmutable = null;
		inner1._validate = null;
		inner1._invalidate = null;
		inner1.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner1;
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	if(anchor3 != null && anchor3.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor3 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor3" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a3 == null) {
		this.zpp_inner_zn.setup_a3();
	}
	var _this18 = this.zpp_inner_zn.wrap_a3;
	if(_this18 != null && _this18.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor3 != null && anchor3.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this19 = _this18.zpp_inner;
	if(_this19._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this19._isimmutable != null) {
		_this19._isimmutable();
	}
	if(anchor3 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor3 != null && anchor3.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this20 = anchor3.zpp_inner;
	if(_this20._validate != null) {
		_this20._validate();
	}
	var x2 = anchor3.zpp_inner.x;
	if(anchor3 != null && anchor3.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this21 = anchor3.zpp_inner;
	if(_this21._validate != null) {
		_this21._validate();
	}
	var y2 = anchor3.zpp_inner.y;
	if(_this18 != null && _this18.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this22 = _this18.zpp_inner;
	if(_this22._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this22._isimmutable != null) {
		_this22._isimmutable();
	}
	if(x2 != x2 || y2 != y2) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp2;
	if(_this18 != null && _this18.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this23 = _this18.zpp_inner;
	if(_this23._validate != null) {
		_this23._validate();
	}
	if(_this18.zpp_inner.x == x2) {
		if(_this18 != null && _this18.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this24 = _this18.zpp_inner;
		if(_this24._validate != null) {
			_this24._validate();
		}
		tmp2 = _this18.zpp_inner.y == y2;
	} else {
		tmp2 = false;
	}
	if(!tmp2) {
		_this18.zpp_inner.x = x2;
		_this18.zpp_inner.y = y2;
		var _this25 = _this18.zpp_inner;
		if(_this25._invalidate != null) {
			_this25._invalidate(_this25);
		}
	}
	if(anchor3.zpp_inner.weak) {
		if(anchor3 != null && anchor3.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this26 = anchor3.zpp_inner;
		if(_this26._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this26._isimmutable != null) {
			_this26._isimmutable();
		}
		if(anchor3.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner2 = anchor3.zpp_inner;
		anchor3.zpp_inner.outer = null;
		anchor3.zpp_inner = null;
		anchor3.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor3;
		} else {
			ZPP_PubPool.poolVec2 = anchor3;
		}
		ZPP_PubPool.nextVec2 = anchor3;
		anchor3.zpp_disp = true;
		if(inner2.outer != null) {
			inner2.outer.zpp_inner = null;
			inner2.outer = null;
		}
		inner2._isimmutable = null;
		inner2._validate = null;
		inner2._invalidate = null;
		inner2.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner2;
	}
	if(this.zpp_inner_zn.wrap_a3 == null) {
		this.zpp_inner_zn.setup_a3();
	}
	if(anchor4 != null && anchor4.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor4 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor4" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a4 == null) {
		this.zpp_inner_zn.setup_a4();
	}
	var _this27 = this.zpp_inner_zn.wrap_a4;
	if(_this27 != null && _this27.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor4 != null && anchor4.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this28 = _this27.zpp_inner;
	if(_this28._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this28._isimmutable != null) {
		_this28._isimmutable();
	}
	if(anchor4 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor4 != null && anchor4.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this29 = anchor4.zpp_inner;
	if(_this29._validate != null) {
		_this29._validate();
	}
	var x3 = anchor4.zpp_inner.x;
	if(anchor4 != null && anchor4.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this30 = anchor4.zpp_inner;
	if(_this30._validate != null) {
		_this30._validate();
	}
	var y3 = anchor4.zpp_inner.y;
	if(_this27 != null && _this27.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this31 = _this27.zpp_inner;
	if(_this31._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this31._isimmutable != null) {
		_this31._isimmutable();
	}
	if(x3 != x3 || y3 != y3) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp3;
	if(_this27 != null && _this27.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this32 = _this27.zpp_inner;
	if(_this32._validate != null) {
		_this32._validate();
	}
	if(_this27.zpp_inner.x == x3) {
		if(_this27 != null && _this27.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this33 = _this27.zpp_inner;
		if(_this33._validate != null) {
			_this33._validate();
		}
		tmp3 = _this27.zpp_inner.y == y3;
	} else {
		tmp3 = false;
	}
	if(!tmp3) {
		_this27.zpp_inner.x = x3;
		_this27.zpp_inner.y = y3;
		var _this34 = _this27.zpp_inner;
		if(_this34._invalidate != null) {
			_this34._invalidate(_this34);
		}
	}
	if(anchor4.zpp_inner.weak) {
		if(anchor4 != null && anchor4.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this35 = anchor4.zpp_inner;
		if(_this35._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this35._isimmutable != null) {
			_this35._isimmutable();
		}
		if(anchor4.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner3 = anchor4.zpp_inner;
		anchor4.zpp_inner.outer = null;
		anchor4.zpp_inner = null;
		anchor4.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor4;
		} else {
			ZPP_PubPool.poolVec2 = anchor4;
		}
		ZPP_PubPool.nextVec2 = anchor4;
		anchor4.zpp_disp = true;
		if(inner3.outer != null) {
			inner3.outer.zpp_inner = null;
			inner3.outer = null;
		}
		inner3._isimmutable = null;
		inner3._validate = null;
		inner3._invalidate = null;
		inner3.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner3;
	}
	if(this.zpp_inner_zn.wrap_a4 == null) {
		this.zpp_inner_zn.setup_a4();
	}
	this.zpp_inner.immutable_midstep("PulleyJoint::ratio");
	if(ratio != ratio) {
		throw new js._Boot.HaxeError("Error: PulleyJoint::ratio cannot be NaN");
	}
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMin");
	if(jointMin != jointMin) {
		throw new js._Boot.HaxeError("Error: PulleyJoint::jointMin cannot be NaN");
	}
	if(jointMin < 0) {
		throw new js._Boot.HaxeError("Error: PulleyJoint::jointMin must be >= 0");
	}
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMax");
	if(jointMax != jointMax) {
		throw new js._Boot.HaxeError("Error: PulleyJoint::jointMax cannot be NaN");
	}
	if(jointMax < 0) {
		throw new js._Boot.HaxeError("Error: PulleyJoint::jointMax must be >= 0");
	}
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
};
PulleyJoint.__name__ = ["nape","constraint","PulleyJoint"];
PulleyJoint.__super__ = Constraint;
// for(var k in Constraint.prototype ) PulleyJoint.prototype[k] = Constraint.prototype[k];
PulleyJoint.prototype = Object.create(Constraint.prototype);
PulleyJoint.prototype.zpp_inner_zn = null;
PulleyJoint.prototype.get_body1 = function() {
	if(this.zpp_inner_zn.b1 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b1.outer;
	}
};
PulleyJoint.prototype.set_body1 = function(body1) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null?null:body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1 && this.zpp_inner_zn.b3 != inbody1 && this.zpp_inner_zn.b4 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	if(this.zpp_inner_zn.b1 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b1.outer;
	}
};
PulleyJoint.prototype.get_body2 = function() {
	if(this.zpp_inner_zn.b2 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b2.outer;
	}
};
PulleyJoint.prototype.set_body2 = function(body2) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null?null:body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2 && this.zpp_inner_zn.b3 != inbody2 && this.zpp_inner_zn.b4 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	if(this.zpp_inner_zn.b2 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b2.outer;
	}
};
PulleyJoint.prototype.get_body3 = function() {
	if(this.zpp_inner_zn.b3 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b3.outer;
	}
};
PulleyJoint.prototype.set_body3 = function(body3) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body3");
	var inbody3 = body3 == null?null:body3.zpp_inner;
	if(inbody3 != this.zpp_inner_zn.b3) {
		if(this.zpp_inner_zn.b3 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b3) {
				if(this.zpp_inner_zn.b3 != null) {
					this.zpp_inner_zn.b3.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b3.wake();
			}
		}
		this.zpp_inner_zn.b3 = inbody3;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody3 != null && this.zpp_inner_zn.b1 != inbody3 && this.zpp_inner_zn.b2 != inbody3 && this.zpp_inner_zn.b4 != inbody3) {
			if(inbody3 != null) {
				inbody3.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody3 != null) {
				inbody3.wake();
			}
		}
	}
	if(this.zpp_inner_zn.b3 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b3.outer;
	}
};
PulleyJoint.prototype.get_body4 = function() {
	if(this.zpp_inner_zn.b4 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b4.outer;
	}
};
PulleyJoint.prototype.set_body4 = function(body4) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body4");
	var inbody4 = body4 == null?null:body4.zpp_inner;
	if(inbody4 != this.zpp_inner_zn.b4) {
		if(this.zpp_inner_zn.b4 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b4) {
				if(this.zpp_inner_zn.b4 != null) {
					this.zpp_inner_zn.b4.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b4.wake();
			}
		}
		this.zpp_inner_zn.b4 = inbody4;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody4 != null && this.zpp_inner_zn.b1 != inbody4 && this.zpp_inner_zn.b2 != inbody4 && this.zpp_inner_zn.b3 != inbody4) {
			if(inbody4 != null) {
				inbody4.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody4 != null) {
				inbody4.wake();
			}
		}
	}
	if(this.zpp_inner_zn.b4 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b4.outer;
	}
};
PulleyJoint.prototype.get_anchor1 = function() {
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	return this.zpp_inner_zn.wrap_a1;
};
PulleyJoint.prototype.set_anchor1 = function(anchor1) {
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	var _this = this.zpp_inner_zn.wrap_a1;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor1 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor1.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor1.zpp_inner.x;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor1.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor1.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(anchor1.zpp_inner.weak) {
		if(anchor1 != null && anchor1.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor1.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor1.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor1.zpp_inner;
		anchor1.zpp_inner.outer = null;
		anchor1.zpp_inner = null;
		anchor1.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor1;
		} else {
			ZPP_PubPool.poolVec2 = anchor1;
		}
		ZPP_PubPool.nextVec2 = anchor1;
		anchor1.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	return this.zpp_inner_zn.wrap_a1;
};
PulleyJoint.prototype.get_anchor2 = function() {
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	return this.zpp_inner_zn.wrap_a2;
};
PulleyJoint.prototype.set_anchor2 = function(anchor2) {
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	var _this = this.zpp_inner_zn.wrap_a2;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor2 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor2.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor2.zpp_inner.x;
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor2.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor2.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(anchor2.zpp_inner.weak) {
		if(anchor2 != null && anchor2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor2.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor2.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor2.zpp_inner;
		anchor2.zpp_inner.outer = null;
		anchor2.zpp_inner = null;
		anchor2.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor2;
		} else {
			ZPP_PubPool.poolVec2 = anchor2;
		}
		ZPP_PubPool.nextVec2 = anchor2;
		anchor2.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	return this.zpp_inner_zn.wrap_a2;
};
PulleyJoint.prototype.get_anchor3 = function() {
	if(this.zpp_inner_zn.wrap_a3 == null) {
		this.zpp_inner_zn.setup_a3();
	}
	return this.zpp_inner_zn.wrap_a3;
};
PulleyJoint.prototype.set_anchor3 = function(anchor3) {
	if(anchor3 != null && anchor3.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor3 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor3" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a3 == null) {
		this.zpp_inner_zn.setup_a3();
	}
	var _this = this.zpp_inner_zn.wrap_a3;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor3 != null && anchor3.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor3 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor3 != null && anchor3.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor3.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor3.zpp_inner.x;
	if(anchor3 != null && anchor3.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor3.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor3.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(anchor3.zpp_inner.weak) {
		if(anchor3 != null && anchor3.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor3.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor3.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor3.zpp_inner;
		anchor3.zpp_inner.outer = null;
		anchor3.zpp_inner = null;
		anchor3.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor3;
		} else {
			ZPP_PubPool.poolVec2 = anchor3;
		}
		ZPP_PubPool.nextVec2 = anchor3;
		anchor3.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner_zn.wrap_a3 == null) {
		this.zpp_inner_zn.setup_a3();
	}
	return this.zpp_inner_zn.wrap_a3;
};
PulleyJoint.prototype.get_anchor4 = function() {
	if(this.zpp_inner_zn.wrap_a4 == null) {
		this.zpp_inner_zn.setup_a4();
	}
	return this.zpp_inner_zn.wrap_a4;
};
PulleyJoint.prototype.set_anchor4 = function(anchor4) {
	if(anchor4 != null && anchor4.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor4 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor4" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a4 == null) {
		this.zpp_inner_zn.setup_a4();
	}
	var _this = this.zpp_inner_zn.wrap_a4;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor4 != null && anchor4.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor4 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor4 != null && anchor4.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor4.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor4.zpp_inner.x;
	if(anchor4 != null && anchor4.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor4.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor4.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(anchor4.zpp_inner.weak) {
		if(anchor4 != null && anchor4.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor4.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor4.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor4.zpp_inner;
		anchor4.zpp_inner.outer = null;
		anchor4.zpp_inner = null;
		anchor4.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor4;
		} else {
			ZPP_PubPool.poolVec2 = anchor4;
		}
		ZPP_PubPool.nextVec2 = anchor4;
		anchor4.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner_zn.wrap_a4 == null) {
		this.zpp_inner_zn.setup_a4();
	}
	return this.zpp_inner_zn.wrap_a4;
};
PulleyJoint.prototype.get_jointMin = function() {
	return this.zpp_inner_zn.jointMin;
};
PulleyJoint.prototype.set_jointMin = function(jointMin) {
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMin");
	if(jointMin != jointMin) {
		throw new js._Boot.HaxeError("Error: PulleyJoint::jointMin cannot be NaN");
	}
	if(jointMin < 0) {
		throw new js._Boot.HaxeError("Error: PulleyJoint::jointMin must be >= 0");
	}
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMin;
};
PulleyJoint.prototype.get_jointMax = function() {
	return this.zpp_inner_zn.jointMax;
};
PulleyJoint.prototype.set_jointMax = function(jointMax) {
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMax");
	if(jointMax != jointMax) {
		throw new js._Boot.HaxeError("Error: PulleyJoint::jointMax cannot be NaN");
	}
	if(jointMax < 0) {
		throw new js._Boot.HaxeError("Error: PulleyJoint::jointMax must be >= 0");
	}
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMax;
};
PulleyJoint.prototype.get_ratio = function() {
	return this.zpp_inner_zn.ratio;
};
PulleyJoint.prototype.set_ratio = function(ratio) {
	this.zpp_inner.immutable_midstep("PulleyJoint::ratio");
	if(ratio != ratio) {
		throw new js._Boot.HaxeError("Error: PulleyJoint::ratio cannot be NaN");
	}
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.ratio;
};
PulleyJoint.prototype.isSlack = function() {
	if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) == null || (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) == null || (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) == null || (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) == null) {
		throw new js._Boot.HaxeError("Error: Cannot compute slack for PulleyJoint if either body is null.");
	}
	return this.zpp_inner_zn.slack;
};
PulleyJoint.prototype.impulse = function() {
	var ret = new MatMN(1,1);
	var x = this.zpp_inner_zn.jAcc;
	if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) {
		throw new js._Boot.HaxeError("Error: MatMN indices out of range");
	}
	ret.zpp_inner.x[0 * ret.zpp_inner.n] = x;
	return ret;
};
PulleyJoint.prototype.bodyImpulse = function(body) {
	if(body == null) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate impulse on null body");
	}
	if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) && body != (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) && body != (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer)) {
		throw new js._Boot.HaxeError("Error: Body is not linked to this constraint");
	}
	if(!this.zpp_inner.active) {
		return Vec3.get();
	} else {
		return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
};
PulleyJoint.prototype.visitBodies = function(lambda) {
	if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) {
		lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
	}
	if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) {
		lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	if((this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) != null && (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) {
		lambda(this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer);
	}
	if((this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != null && (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) && (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer)) {
		lambda(this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer);
	}
};
PulleyJoint.prototype.__class__ = PulleyJoint;
var UserConstraint = nape.constraint.UserConstraint = function(dimensions,velocityOnly) {
	if(velocityOnly == null) {
		velocityOnly = false;
	}
	this.zpp_inner_zn = null;
	if(dimensions < 1) {
		throw new js._Boot.HaxeError("Error: Constraint dimension must be at least 1");
	}
	this.zpp_inner_zn = new ZPP_UserConstraint(dimensions,velocityOnly);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	Constraint.zpp_internalAlloc = true;
	Constraint.call(this);
	Constraint.zpp_internalAlloc = false;
};
UserConstraint.__name__ = ["nape","constraint","UserConstraint"];
UserConstraint.__super__ = Constraint;
// for(var k in Constraint.prototype ) UserConstraint.prototype[k] = Constraint.prototype[k];
UserConstraint.prototype = Object.create(Constraint.prototype);
UserConstraint.prototype.zpp_inner_zn = null;
UserConstraint.prototype.__bindVec2 = function() {
	var ret = new Vec2();
	ret.zpp_inner._inuse = true;
	ret.zpp_inner._invalidate = ($_=this.zpp_inner_zn,$bind($_,$_.bindVec2_invalidate));
	return ret;
};
UserConstraint.prototype.__copy = function() {
	throw new js._Boot.HaxeError("Error: UserConstraint::__copy must be overriden");
};
UserConstraint.prototype.__broken = function() {
};
UserConstraint.prototype.__validate = function() {
};
UserConstraint.prototype.__draw = function(debug) {
};
UserConstraint.prototype.__prepare = function() {
};
UserConstraint.prototype.__position = function(err) {
	throw new js._Boot.HaxeError("Error: UserConstraint::__position must be overriden");
};
UserConstraint.prototype.__velocity = function(err) {
	throw new js._Boot.HaxeError("Error: Userconstraint::__velocity must be overriden");
};
UserConstraint.prototype.__eff_mass = function(eff) {
	throw new js._Boot.HaxeError("Error: UserConstraint::__eff_mass must be overriden");
};
UserConstraint.prototype.__clamp = function(jAcc) {
};
UserConstraint.prototype.__impulse = function(imp,body,out) {
	throw new js._Boot.HaxeError("Error: UserConstraint::__impulse must be overriden");
};
UserConstraint.prototype.impulse = function() {
	var ret = new MatMN(this.zpp_inner_zn.dim,1);
	var _g1 = 0;
	var _g = this.zpp_inner_zn.dim;
	while(_g1 < _g) {
		var i = _g1++;
		if(i < 0 || i >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) {
			throw new js._Boot.HaxeError("Error: MatMN indices out of range");
		}
		ret.zpp_inner.x[i * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc[i];
	}
	return ret;
};
UserConstraint.prototype.bodyImpulse = function(body) {
	if(body == null) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate impulse on null body");
	}
	var found = false;
	var _g = 0;
	var _g1 = this.zpp_inner_zn.bodies;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.body == body.zpp_inner) {
			found = true;
			break;
		}
	}
	if(!found) {
		throw new js._Boot.HaxeError("Error: Body is not linked to this constraint");
	}
	if(!this.zpp_inner.active) {
		return Vec3.get();
	} else {
		return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
};
UserConstraint.prototype.visitBodies = function(lambda) {
	var i = 0;
	var nbodies = this.zpp_inner_zn.bodies.length;
	while(i < nbodies) {
		var b = this.zpp_inner_zn.bodies[i];
		if(b.body != null) {
			var found = false;
			var _g1 = i + 1;
			while(_g1 < nbodies) if(this.zpp_inner_zn.bodies[_g1++].body == b.body) {
				found = true;
				break;
			}
			if(!found) {
				lambda(b.body.outer);
			}
		}
		++i;
	}
};
UserConstraint.prototype.__invalidate = function() {
	this.zpp_inner.immutable_midstep("UserConstraint::invalidate()");
	if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
		this.zpp_inner.wake();
	}
};
UserConstraint.prototype.__registerBody = function(oldBody,newBody) {
	this.zpp_inner.immutable_midstep("UserConstraint::registerBody(..)");
	if(oldBody != newBody) {
		if(oldBody != null) {
			if(!this.zpp_inner_zn.remBody(oldBody.zpp_inner)) {
				throw new js._Boot.HaxeError("Error: oldBody is not registered to the cosntraint");
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				oldBody.zpp_inner.wake();
			}
		}
		if(newBody != null) {
			this.zpp_inner_zn.addBody(newBody.zpp_inner);
		}
		this.zpp_inner.wake();
		if(newBody != null) {
			newBody.zpp_inner.wake();
		}
	}
	return newBody;
};
UserConstraint.prototype.__class__ = UserConstraint;
var WeldJoint = nape.constraint.WeldJoint = function(body1,body2,anchor1,anchor2,phase) {
	if(phase == null) {
		phase = 0.0;
	}
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new ZPP_WeldJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	Constraint.zpp_internalAlloc = true;
	Constraint.call(this);
	Constraint.zpp_internalAlloc = false;
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null?null:body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null?null:body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	var _this = this.zpp_inner_zn.wrap_a1;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor1 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor1.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor1.zpp_inner.x;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor1.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor1.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(anchor1.zpp_inner.weak) {
		if(anchor1 != null && anchor1.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor1.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor1.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor1.zpp_inner;
		anchor1.zpp_inner.outer = null;
		anchor1.zpp_inner = null;
		anchor1.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor1;
		} else {
			ZPP_PubPool.poolVec2 = anchor1;
		}
		ZPP_PubPool.nextVec2 = anchor1;
		anchor1.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	var _this9 = this.zpp_inner_zn.wrap_a2;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this10 = _this9.zpp_inner;
	if(_this10._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this10._isimmutable != null) {
		_this10._isimmutable();
	}
	if(anchor2 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this11 = anchor2.zpp_inner;
	if(_this11._validate != null) {
		_this11._validate();
	}
	var x1 = anchor2.zpp_inner.x;
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this12 = anchor2.zpp_inner;
	if(_this12._validate != null) {
		_this12._validate();
	}
	var y1 = anchor2.zpp_inner.y;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this13 = _this9.zpp_inner;
	if(_this13._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this13._isimmutable != null) {
		_this13._isimmutable();
	}
	if(x1 != x1 || y1 != y1) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp1;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this14 = _this9.zpp_inner;
	if(_this14._validate != null) {
		_this14._validate();
	}
	if(_this9.zpp_inner.x == x1) {
		if(_this9 != null && _this9.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this15 = _this9.zpp_inner;
		if(_this15._validate != null) {
			_this15._validate();
		}
		tmp1 = _this9.zpp_inner.y == y1;
	} else {
		tmp1 = false;
	}
	if(!tmp1) {
		_this9.zpp_inner.x = x1;
		_this9.zpp_inner.y = y1;
		var _this16 = _this9.zpp_inner;
		if(_this16._invalidate != null) {
			_this16._invalidate(_this16);
		}
	}
	if(anchor2.zpp_inner.weak) {
		if(anchor2 != null && anchor2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this17 = anchor2.zpp_inner;
		if(_this17._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this17._isimmutable != null) {
			_this17._isimmutable();
		}
		if(anchor2.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = anchor2.zpp_inner;
		anchor2.zpp_inner.outer = null;
		anchor2.zpp_inner = null;
		anchor2.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor2;
		} else {
			ZPP_PubPool.poolVec2 = anchor2;
		}
		ZPP_PubPool.nextVec2 = anchor2;
		anchor2.zpp_disp = true;
		if(inner1.outer != null) {
			inner1.outer.zpp_inner = null;
			inner1.outer = null;
		}
		inner1._isimmutable = null;
		inner1._validate = null;
		inner1._invalidate = null;
		inner1.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner1;
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	this.zpp_inner.immutable_midstep("WeldJoint::phase");
	if(phase != phase) {
		throw new js._Boot.HaxeError("Error: WeldJoint::phase cannot be NaN");
	}
	if(this.zpp_inner_zn.phase != phase) {
		this.zpp_inner_zn.phase = phase;
		this.zpp_inner.wake();
	}
};
WeldJoint.__name__ = ["nape","constraint","WeldJoint"];
WeldJoint.__super__ = Constraint;
// for(var k in Constraint.prototype ) WeldJoint.prototype[k] = Constraint.prototype[k];
WeldJoint.prototype = Object.create(Constraint.prototype);
WeldJoint.prototype.zpp_inner_zn = null;
WeldJoint.prototype.get_body1 = function() {
	if(this.zpp_inner_zn.b1 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b1.outer;
	}
};
WeldJoint.prototype.set_body1 = function(body1) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body1");
	var inbody1 = body1 == null?null:body1.zpp_inner;
	if(inbody1 != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
				if(this.zpp_inner_zn.b1 != null) {
					this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b1.wake();
			}
		}
		this.zpp_inner_zn.b1 = inbody1;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
			if(inbody1 != null) {
				inbody1.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody1 != null) {
				inbody1.wake();
			}
		}
	}
	if(this.zpp_inner_zn.b1 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b1.outer;
	}
};
WeldJoint.prototype.get_body2 = function() {
	if(this.zpp_inner_zn.b2 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b2.outer;
	}
};
WeldJoint.prototype.set_body2 = function(body2) {
	this.zpp_inner.immutable_midstep("Constraint::" + "body2");
	var inbody2 = body2 == null?null:body2.zpp_inner;
	if(inbody2 != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
				if(this.zpp_inner_zn.b2 != null) {
					this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner_zn.b2.wake();
			}
		}
		this.zpp_inner_zn.b2 = inbody2;
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
			if(inbody2 != null) {
				inbody2.constraints.add(this.zpp_inner);
			}
		}
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.wake();
			if(inbody2 != null) {
				inbody2.wake();
			}
		}
	}
	if(this.zpp_inner_zn.b2 == null) {
		return null;
	} else {
		return this.zpp_inner_zn.b2.outer;
	}
};
WeldJoint.prototype.get_anchor1 = function() {
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	return this.zpp_inner_zn.wrap_a1;
};
WeldJoint.prototype.set_anchor1 = function(anchor1) {
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor1" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	var _this = this.zpp_inner_zn.wrap_a1;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor1 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor1.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor1.zpp_inner.x;
	if(anchor1 != null && anchor1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor1.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor1.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(anchor1.zpp_inner.weak) {
		if(anchor1 != null && anchor1.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor1.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor1.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor1.zpp_inner;
		anchor1.zpp_inner.outer = null;
		anchor1.zpp_inner = null;
		anchor1.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor1;
		} else {
			ZPP_PubPool.poolVec2 = anchor1;
		}
		ZPP_PubPool.nextVec2 = anchor1;
		anchor1.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner_zn.wrap_a1 == null) {
		this.zpp_inner_zn.setup_a1();
	}
	return this.zpp_inner_zn.wrap_a1;
};
WeldJoint.prototype.get_anchor2 = function() {
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	return this.zpp_inner_zn.wrap_a2;
};
WeldJoint.prototype.set_anchor2 = function(anchor2) {
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 == null) {
		throw new js._Boot.HaxeError("Error: Constraint::" + "anchor2" + " cannot be null");
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	var _this = this.zpp_inner_zn.wrap_a2;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(anchor2 == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = anchor2.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = anchor2.zpp_inner.x;
	if(anchor2 != null && anchor2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = anchor2.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = anchor2.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(anchor2.zpp_inner.weak) {
		if(anchor2 != null && anchor2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = anchor2.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(anchor2.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = anchor2.zpp_inner;
		anchor2.zpp_inner.outer = null;
		anchor2.zpp_inner = null;
		anchor2.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = anchor2;
		} else {
			ZPP_PubPool.poolVec2 = anchor2;
		}
		ZPP_PubPool.nextVec2 = anchor2;
		anchor2.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner_zn.wrap_a2 == null) {
		this.zpp_inner_zn.setup_a2();
	}
	return this.zpp_inner_zn.wrap_a2;
};
WeldJoint.prototype.get_phase = function() {
	return this.zpp_inner_zn.phase;
};
WeldJoint.prototype.set_phase = function(phase) {
	this.zpp_inner.immutable_midstep("WeldJoint::phase");
	if(phase != phase) {
		throw new js._Boot.HaxeError("Error: WeldJoint::phase cannot be NaN");
	}
	if(this.zpp_inner_zn.phase != phase) {
		this.zpp_inner_zn.phase = phase;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.phase;
};
WeldJoint.prototype.impulse = function() {
	var ret = new MatMN(3,1);
	var x = this.zpp_inner_zn.jAccx;
	if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) {
		throw new js._Boot.HaxeError("Error: MatMN indices out of range");
	}
	ret.zpp_inner.x[0 * ret.zpp_inner.n] = x;
	var x1 = this.zpp_inner_zn.jAccy;
	if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) {
		throw new js._Boot.HaxeError("Error: MatMN indices out of range");
	}
	ret.zpp_inner.x[ret.zpp_inner.n] = x1;
	var x2 = this.zpp_inner_zn.jAccz;
	if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) {
		throw new js._Boot.HaxeError("Error: MatMN indices out of range");
	}
	ret.zpp_inner.x[ret.zpp_inner.n] = x2;
	return ret;
};
WeldJoint.prototype.bodyImpulse = function(body) {
	if(body == null) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate impulse on null body");
	}
	if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) {
		throw new js._Boot.HaxeError("Error: Body is not linked to this constraint");
	}
	if(!this.zpp_inner.active) {
		return Vec3.get();
	} else {
		return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
};
WeldJoint.prototype.visitBodies = function(lambda) {
	if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) {
		lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
	}
	if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) {
		lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
};
WeldJoint.prototype.__class__ = WeldJoint;
var Arbiter = nape.dynamics.Arbiter = function() {
	this.zpp_inner = null;
	if(!ZPP_Arbiter.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate Arbiter derp!");
	}
};
Arbiter.__name__ = ["nape","dynamics","Arbiter"];
Arbiter.prototype.zpp_inner = null;
Arbiter.prototype.get_isSleeping = function() {
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	return this.zpp_inner.sleeping;
};
Arbiter.prototype.get_type = function() {
	return ZPP_Arbiter.types[this.zpp_inner.type];
};
Arbiter.prototype.isCollisionArbiter = function() {
	return this.zpp_inner.type == ZPP_Arbiter.COL;
};
Arbiter.prototype.isFluidArbiter = function() {
	return this.zpp_inner.type == ZPP_Arbiter.FLUID;
};
Arbiter.prototype.isSensorArbiter = function() {
	return this.zpp_inner.type == ZPP_Arbiter.SENSOR;
};
Arbiter.prototype.get_collisionArbiter = function() {
	if(this.zpp_inner.type == ZPP_Arbiter.COL) {
		return this.zpp_inner.colarb.outer_zn;
	} else {
		return null;
	}
};
Arbiter.prototype.get_fluidArbiter = function() {
	if(this.zpp_inner.type == ZPP_Arbiter.FLUID) {
		return this.zpp_inner.fluidarb.outer_zn;
	} else {
		return null;
	}
};
Arbiter.prototype.get_shape1 = function() {
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) {
		return this.zpp_inner.ws2.outer;
	} else {
		return this.zpp_inner.ws1.outer;
	}
};
Arbiter.prototype.get_shape2 = function() {
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) {
		return this.zpp_inner.ws1.outer;
	} else {
		return this.zpp_inner.ws2.outer;
	}
};
Arbiter.prototype.get_body1 = function() {
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) {
		return this.zpp_inner.b2.outer;
	} else {
		return this.zpp_inner.b1.outer;
	}
};
Arbiter.prototype.get_body2 = function() {
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) {
		return this.zpp_inner.b1.outer;
	} else {
		return this.zpp_inner.b2.outer;
	}
};
Arbiter.prototype.get_state = function() {
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	var _g = this.zpp_inner.immState;
	if(_g == 5) {
		if(ZPP_Flags.PreFlag_ACCEPT == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.PreFlag_ACCEPT = new PreFlag();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.PreFlag_ACCEPT;
	} else if(_g == 1) {
		if(ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.PreFlag_ACCEPT_ONCE = new PreFlag();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.PreFlag_ACCEPT_ONCE;
	} else if(_g == 6) {
		if(ZPP_Flags.PreFlag_IGNORE == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.PreFlag_IGNORE = new PreFlag();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.PreFlag_IGNORE;
	} else {
		if(ZPP_Flags.PreFlag_IGNORE_ONCE == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.PreFlag_IGNORE_ONCE = new PreFlag();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.PreFlag_IGNORE_ONCE;
	}
};
Arbiter.prototype.totalImpulse = function(body,freshOnly) {
	if(freshOnly == null) {
		freshOnly = false;
	}
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	var tmp;
	var tmp1;
	if(body != null) {
		if(!this.zpp_inner.active) {
			throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
		}
		tmp1 = body != (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.b2.outer:this.zpp_inner.b1.outer);
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		if(!this.zpp_inner.active) {
			throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
		}
		tmp = body != (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.b1.outer:this.zpp_inner.b2.outer);
	} else {
		tmp = false;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Arbiter does not relate to body");
	}
	return Vec3.get(0,0,0);
};
Arbiter.prototype.toString = function() {
	var ret = this.zpp_inner.type == ZPP_Arbiter.COL?"CollisionArbiter":this.zpp_inner.type == ZPP_Arbiter.FLUID?"FluidArbiter":"SensorArbiter";
	if(this.zpp_inner.cleared) {
		return ret + "(object-pooled)";
	} else {
		var tmp = ret + "(";
		if(!this.zpp_inner.active) {
			throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
		}
		var tmp1 = tmp + (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.ws2.outer:this.zpp_inner.ws1.outer).toString() + "|";
		if(!this.zpp_inner.active) {
			throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
		}
		var tmp2 = tmp1 + (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.ws1.outer:this.zpp_inner.ws2.outer).toString() + ")" + (this.zpp_inner.type == ZPP_Arbiter.COL?"[" + ["SD","DD"][this.zpp_inner.colarb.stat?0:1] + "]":"") + "<-";
		if(!this.zpp_inner.active) {
			throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
		}
		var tmp3;
		var _g = this.zpp_inner.immState;
		if(_g == 5) {
			if(ZPP_Flags.PreFlag_ACCEPT == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.PreFlag_ACCEPT = new PreFlag();
				ZPP_Flags.internal = false;
			}
			tmp3 = ZPP_Flags.PreFlag_ACCEPT;
		} else if(_g == 1) {
			if(ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.PreFlag_ACCEPT_ONCE = new PreFlag();
				ZPP_Flags.internal = false;
			}
			tmp3 = ZPP_Flags.PreFlag_ACCEPT_ONCE;
		} else if(_g == 6) {
			if(ZPP_Flags.PreFlag_IGNORE == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.PreFlag_IGNORE = new PreFlag();
				ZPP_Flags.internal = false;
			}
			tmp3 = ZPP_Flags.PreFlag_IGNORE;
		} else {
			if(ZPP_Flags.PreFlag_IGNORE_ONCE == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.PreFlag_IGNORE_ONCE = new PreFlag();
				ZPP_Flags.internal = false;
			}
			tmp3 = ZPP_Flags.PreFlag_IGNORE_ONCE;
		}
		return tmp2 + tmp3.toString();
	}
};
Arbiter.prototype.__class__ = Arbiter;
Object.defineProperty(Arbiter.prototype, "isSleeping", {get: Arbiter.prototype.get_isSleeping});
Object.defineProperty(Arbiter.prototype, "type", {get: Arbiter.prototype.get_type});
Object.defineProperty(Arbiter.prototype, "collisionArbiter", {get: Arbiter.prototype.get_collisionArbiter});
Object.defineProperty(Arbiter.prototype, "fluidArbiter", {get: Arbiter.prototype.get_fluidArbiter});
Object.defineProperty(Arbiter.prototype, "shape1", {get: Arbiter.prototype.get_shape1});
Object.defineProperty(Arbiter.prototype, "shape2", {get: Arbiter.prototype.get_shape2});
Object.defineProperty(Arbiter.prototype, "body1", {get: Arbiter.prototype.get_body1});
Object.defineProperty(Arbiter.prototype, "body2", {get: Arbiter.prototype.get_body2});
Object.defineProperty(Arbiter.prototype, "state", {get: Arbiter.prototype.get_state});
var ArbiterIterator = nape.dynamics.ArbiterIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!ZPP_ArbiterList.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "Arbiter" + "Iterator derp!");
	}
};
ArbiterIterator.__name__ = ["nape","dynamics","ArbiterIterator"];
ArbiterIterator.get = function(list) {
	var ret;
	if(ArbiterIterator.zpp_pool == null) {
		ZPP_ArbiterList.internal = true;
		var ret1 = new ArbiterIterator();
		ZPP_ArbiterList.internal = false;
		ret = ret1;
	} else {
		var r = ArbiterIterator.zpp_pool;
		ArbiterIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
ArbiterIterator.prototype.zpp_inner = null;
ArbiterIterator.prototype.zpp_i = null;
ArbiterIterator.prototype.zpp_critical = null;
ArbiterIterator.prototype.zpp_next = null;
ArbiterIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.zpp_gl();
	this.zpp_critical = true;
	if(this.zpp_i < length) {
		return true;
	} else {
		this.zpp_next = ArbiterIterator.zpp_pool;
		ArbiterIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
ArbiterIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
ArbiterIterator.prototype.__class__ = ArbiterIterator;
var ArbiterList = nape.dynamics.ArbiterList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new ZPP_ArbiterList();
	this.zpp_inner.outer = this;
};
ArbiterList.__name__ = ["nape","dynamics","ArbiterList"];
ArbiterList.fromArray = function(array) {
	if(array == null) {
		throw new js._Boot.HaxeError("Error: Cannot convert null Array to Nape list");
	}
	var ret = new ArbiterList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
ArbiterList.prototype.zpp_inner = null;
ArbiterList.prototype.get_length = function() {
	return this.zpp_gl();
};
ArbiterList.prototype.zpp_gl = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = 0;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			if(cx_ite.elt.active) {
				this.zpp_inner.user_length++;
			}
			cx_ite = cx_ite.next;
		}
	}
	return this.zpp_inner.user_length;
};
ArbiterList.prototype.zpp_vm = function() {
	this.zpp_inner.valmod();
};
ArbiterList.prototype.has = function(obj) {
	this.zpp_vm();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
ArbiterList.prototype.at = function(index) {
	this.zpp_vm();
	if(index < 0 || index >= this.zpp_gl()) {
		throw new js._Boot.HaxeError("Error: Index out of bounds");
	}
	if(this.zpp_inner.reverse_flag) {
		index = this.zpp_gl() - 1 - index;
	}
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = 0;
		this.zpp_inner.at_ite = this.zpp_inner.inner.head;
		while(!this.zpp_inner.at_ite.elt.active) this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		while(!this.zpp_inner.at_ite.elt.active) this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt.wrapper();
};
ArbiterList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Arbiter" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_vm();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.inner.add(obj.zpp_inner);
		} else {
			if(this.zpp_inner.push_ite == null) {
				this.zpp_inner.push_ite = this.empty()?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
ArbiterList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Arbiter" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_vm();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) {
				this.zpp_inner.push_ite = this.empty()?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else {
			this.zpp_inner.inner.add(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
ArbiterList.prototype.pop = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Arbiter" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.empty()) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_vm();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite = this.zpp_gl() == 1?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx1 = ret.wrapper();
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	}
	this.zpp_inner.invalidate();
	return ret.wrapper();
};
ArbiterList.prototype.shift = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Arbiter" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.empty()) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_vm();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite = this.zpp_gl() == 1?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.wrapper();
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	}
	this.zpp_inner.invalidate();
	return ret.wrapper();
};
ArbiterList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) {
		return this.push(obj);
	} else {
		return this.unshift(obj);
	}
};
ArbiterList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Arbiter" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_vm();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(obj);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.remove(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
	}
	return ret;
};
ArbiterList.prototype.clear = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Arbiter" + "List is immutable");
	}
	if(this.zpp_inner.reverse_flag) {
		while(!this.empty()) this.pop();
	} else {
		while(!this.empty()) this.shift();
	}
};
ArbiterList.prototype.empty = function() {
	return this.zpp_gl() == 0;
};
ArbiterList.prototype.iterator = function() {
	this.zpp_vm();
	return ArbiterIterator.get(this);
};
ArbiterList.prototype.copy = function(deep) {
	if(deep == null) {
		deep = false;
	}
	var ret = new ArbiterList();
	var _g = this.iterator();
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var length = _g.zpp_inner.zpp_gl();
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ArbiterIterator.zpp_pool;
			ArbiterIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(deep) {
			throw new js._Boot.HaxeError("Error: " + "Arbiter" + " is not a copyable type");
		}
		ret.push(i);
	}
	return ret;
};
ArbiterList.prototype.merge = function(xs) {
	if(xs == null) {
		throw new js._Boot.HaxeError("Error: Cannot merge with null list");
	}
	var _g = xs.iterator();
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var length = _g.zpp_inner.zpp_gl();
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ArbiterIterator.zpp_pool;
			ArbiterIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			this.add(x);
		}
	}
};
ArbiterList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var _g = this.iterator();
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var length = _g.zpp_inner.zpp_gl();
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ArbiterIterator.zpp_pool;
			ArbiterIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) {
			ret += ",";
		}
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
};
ArbiterList.prototype.foreach = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot execute null on list elements");
	}
	var it = this.iterator();
	while(true) {
		it.zpp_inner.zpp_inner.valmod();
		var length = it.zpp_inner.zpp_gl();
		it.zpp_critical = true;
		var tmp;
		if(it.zpp_i < length) {
			tmp = true;
		} else {
			it.zpp_next = ArbiterIterator.zpp_pool;
			ArbiterIterator.zpp_pool = it;
			it.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		try {
			it.zpp_critical = false;
			lambda(it.zpp_inner.at(it.zpp_i++));
		} catch( e ) {
			it.zpp_next = ArbiterIterator.zpp_pool;
			ArbiterIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
	}
	return this;
};
ArbiterList.prototype.filter = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot select elements of list with null");
	}
	var i = 0;
	while(i < this.zpp_gl()) {
		var x = this.at(i);
		try {
			if(lambda(x)) {
				++i;
			} else {
				this.remove(x);
			}
		} catch( e ) {
			break;
		}
	}
	return this;
};
ArbiterList.prototype.__class__ = ArbiterList;
var ArbiterType = nape.dynamics.ArbiterType = function() {
	if(!ZPP_Flags.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "ArbiterType" + " derp!");
	}
};
ArbiterType.__name__ = ["nape","dynamics","ArbiterType"];
ArbiterType.COLLISION = null;
ArbiterType.get_COLLISION = function() {
	if(ZPP_Flags.ArbiterType_COLLISION == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ArbiterType_COLLISION = new ArbiterType();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.ArbiterType_COLLISION;
};
ArbiterType.SENSOR = null;
ArbiterType.get_SENSOR = function() {
	if(ZPP_Flags.ArbiterType_SENSOR == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ArbiterType_SENSOR = new ArbiterType();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.ArbiterType_SENSOR;
};
ArbiterType.FLUID = null;
ArbiterType.get_FLUID = function() {
	if(ZPP_Flags.ArbiterType_FLUID == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ArbiterType_FLUID = new ArbiterType();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.ArbiterType_FLUID;
};
ArbiterType.prototype.toString = function() {
	if(ZPP_Flags.ArbiterType_COLLISION == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ArbiterType_COLLISION = new ArbiterType();
		ZPP_Flags.internal = false;
	}
	if(this == ZPP_Flags.ArbiterType_COLLISION) {
		return "COLLISION";
	} else {
		if(ZPP_Flags.ArbiterType_SENSOR == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.ArbiterType_SENSOR = new ArbiterType();
			ZPP_Flags.internal = false;
		}
		if(this == ZPP_Flags.ArbiterType_SENSOR) {
			return "SENSOR";
		} else {
			if(ZPP_Flags.ArbiterType_FLUID == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.ArbiterType_FLUID = new ArbiterType();
				ZPP_Flags.internal = false;
			}
			if(this == ZPP_Flags.ArbiterType_FLUID) {
				return "FLUID";
			} else {
				return "";
			}
		}
	}
};
ArbiterType.prototype.__class__ = ArbiterType;
var CollisionArbiter = nape.dynamics.CollisionArbiter = function() {
	if(!ZPP_Arbiter.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate CollisionArbiter derp!");
	}
	Arbiter.call(this);
};
CollisionArbiter.__name__ = ["nape","dynamics","CollisionArbiter"];
CollisionArbiter.__super__ = Arbiter;
// for(var k in Arbiter.prototype ) CollisionArbiter.prototype[k] = Arbiter.prototype[k];
CollisionArbiter.prototype = Object.create(Arbiter.prototype);
CollisionArbiter.prototype.get_contacts = function() {
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	if(this.zpp_inner.colarb.wrap_contacts == null) {
		this.zpp_inner.colarb.setupcontacts();
	}
	return this.zpp_inner.colarb.wrap_contacts;
};
CollisionArbiter.prototype.get_normal = function() {
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	if(this.zpp_inner.colarb.wrap_normal == null) {
		this.zpp_inner.colarb.getnormal();
	}
	return this.zpp_inner.colarb.wrap_normal;
};
CollisionArbiter.prototype.get_radius = function() {
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	return this.zpp_inner.colarb.radius;
};
CollisionArbiter.prototype.get_referenceEdge1 = function() {
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	var edge = this.zpp_inner.colarb.__ref_edge1;
	var tmp;
	if(edge != null) {
		if(!this.zpp_inner.active) {
			throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
		}
		if(!((this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.ws2.outer:this.zpp_inner.ws1.outer).zpp_inner.type != 1)) {
			if(!this.zpp_inner.active) {
				throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
			}
			tmp = (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.ws2.outer:this.zpp_inner.ws1.outer).zpp_inner != edge.polygon;
		} else {
			tmp = true;
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		edge = this.zpp_inner.colarb.__ref_edge2;
	}
	if(edge == null) {
		return null;
	} else {
		return edge.wrapper();
	}
};
CollisionArbiter.prototype.get_referenceEdge2 = function() {
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	var edge = this.zpp_inner.colarb.__ref_edge1;
	var tmp;
	if(edge != null) {
		if(!this.zpp_inner.active) {
			throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
		}
		if(!((this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.ws1.outer:this.zpp_inner.ws2.outer).zpp_inner.type != 1)) {
			if(!this.zpp_inner.active) {
				throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
			}
			tmp = (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.ws1.outer:this.zpp_inner.ws2.outer).zpp_inner != edge.polygon;
		} else {
			tmp = true;
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		edge = this.zpp_inner.colarb.__ref_edge2;
	}
	if(edge == null) {
		return null;
	} else {
		return edge.wrapper();
	}
};
CollisionArbiter.prototype.firstVertex = function() {
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	if(this.zpp_inner.colarb.__ref_edge1 != null != (this.zpp_inner.colarb.__ref_edge2 != null)) {
		return this.zpp_inner.colarb.__ref_vertex == -1;
	} else {
		return false;
	}
};
CollisionArbiter.prototype.secondVertex = function() {
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	if(this.zpp_inner.colarb.__ref_edge1 != null != (this.zpp_inner.colarb.__ref_edge2 != null)) {
		return this.zpp_inner.colarb.__ref_vertex == 1;
	} else {
		return false;
	}
};
CollisionArbiter.prototype.normalImpulse = function(body,freshOnly) {
	if(freshOnly == null) {
		freshOnly = false;
	}
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	var tmp;
	var tmp1;
	if(body != null) {
		if(!this.zpp_inner.active) {
			throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
		}
		tmp1 = body != (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.b2.outer:this.zpp_inner.b1.outer);
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		if(!this.zpp_inner.active) {
			throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
		}
		tmp = body != (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.b1.outer:this.zpp_inner.b2.outer);
	} else {
		tmp = false;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Arbiter does not relate to body");
	}
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var colarb = this.zpp_inner.colarb;
	if(!freshOnly || colarb.oc1.fresh) {
		var imp = colarb.oc1.wrapper().normalImpulse(body);
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this = imp.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		retx += imp.zpp_inner.x;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this1 = imp.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		rety += imp.zpp_inner.y;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this2 = imp.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		retz += imp.zpp_inner.z;
		imp.dispose();
	}
	if(colarb.hc2) {
		if(!freshOnly || colarb.oc2.fresh) {
			var imp1 = colarb.oc2.wrapper().normalImpulse(body);
			if(imp1 != null && imp1.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this3 = imp1.zpp_inner;
			if(_this3._validate != null) {
				_this3._validate();
			}
			retx += imp1.zpp_inner.x;
			if(imp1 != null && imp1.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this4 = imp1.zpp_inner;
			if(_this4._validate != null) {
				_this4._validate();
			}
			rety += imp1.zpp_inner.y;
			if(imp1 != null && imp1.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this5 = imp1.zpp_inner;
			if(_this5._validate != null) {
				_this5._validate();
			}
			retz += imp1.zpp_inner.z;
			imp1.dispose();
		}
	}
	return Vec3.get(retx,rety,retz);
};
CollisionArbiter.prototype.tangentImpulse = function(body,freshOnly) {
	if(freshOnly == null) {
		freshOnly = false;
	}
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	var tmp;
	var tmp1;
	if(body != null) {
		if(!this.zpp_inner.active) {
			throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
		}
		tmp1 = body != (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.b2.outer:this.zpp_inner.b1.outer);
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		if(!this.zpp_inner.active) {
			throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
		}
		tmp = body != (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.b1.outer:this.zpp_inner.b2.outer);
	} else {
		tmp = false;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Arbiter does not relate to body");
	}
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var colarb = this.zpp_inner.colarb;
	if(!freshOnly || colarb.oc1.fresh) {
		var imp = colarb.oc1.wrapper().tangentImpulse(body);
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this = imp.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		retx += imp.zpp_inner.x;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this1 = imp.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		rety += imp.zpp_inner.y;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this2 = imp.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		retz += imp.zpp_inner.z;
		imp.dispose();
	}
	if(colarb.hc2) {
		if(!freshOnly || colarb.oc2.fresh) {
			var imp1 = colarb.oc2.wrapper().tangentImpulse(body);
			if(imp1 != null && imp1.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this3 = imp1.zpp_inner;
			if(_this3._validate != null) {
				_this3._validate();
			}
			retx += imp1.zpp_inner.x;
			if(imp1 != null && imp1.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this4 = imp1.zpp_inner;
			if(_this4._validate != null) {
				_this4._validate();
			}
			rety += imp1.zpp_inner.y;
			if(imp1 != null && imp1.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this5 = imp1.zpp_inner;
			if(_this5._validate != null) {
				_this5._validate();
			}
			retz += imp1.zpp_inner.z;
			imp1.dispose();
		}
	}
	return Vec3.get(retx,rety,retz);
};
CollisionArbiter.prototype.totalImpulse = function(body,freshOnly) {
	if(freshOnly == null) {
		freshOnly = false;
	}
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	var tmp;
	var tmp1;
	if(body != null) {
		if(!this.zpp_inner.active) {
			throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
		}
		tmp1 = body != (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.b2.outer:this.zpp_inner.b1.outer);
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		if(!this.zpp_inner.active) {
			throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
		}
		tmp = body != (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.b1.outer:this.zpp_inner.b2.outer);
	} else {
		tmp = false;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Arbiter does not relate to body");
	}
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var colarb = this.zpp_inner.colarb;
	if(!freshOnly || colarb.oc1.fresh) {
		var imp = colarb.oc1.wrapper().totalImpulse(body);
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this = imp.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		retx += imp.zpp_inner.x;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this1 = imp.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		rety += imp.zpp_inner.y;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this2 = imp.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		retz += imp.zpp_inner.z;
		imp.dispose();
	}
	if(colarb.hc2) {
		if(!freshOnly || colarb.oc2.fresh) {
			var imp1 = colarb.oc2.wrapper().totalImpulse(body);
			if(imp1 != null && imp1.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this3 = imp1.zpp_inner;
			if(_this3._validate != null) {
				_this3._validate();
			}
			retx += imp1.zpp_inner.x;
			if(imp1 != null && imp1.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this4 = imp1.zpp_inner;
			if(_this4._validate != null) {
				_this4._validate();
			}
			rety += imp1.zpp_inner.y;
			if(imp1 != null && imp1.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this5 = imp1.zpp_inner;
			if(_this5._validate != null) {
				_this5._validate();
			}
			retz += imp1.zpp_inner.z;
			imp1.dispose();
		}
	}
	return Vec3.get(retx,rety,retz);
};
CollisionArbiter.prototype.rollingImpulse = function(body,freshOnly) {
	if(freshOnly == null) {
		freshOnly = false;
	}
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	var tmp;
	var tmp1;
	if(body != null) {
		if(!this.zpp_inner.active) {
			throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
		}
		tmp1 = body != (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.b2.outer:this.zpp_inner.b1.outer);
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		if(!this.zpp_inner.active) {
			throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
		}
		tmp = body != (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.b1.outer:this.zpp_inner.b2.outer);
	} else {
		tmp = false;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Arbiter does not relate to body");
	}
	var colarb = this.zpp_inner.colarb;
	if(!freshOnly || colarb.oc1.fresh) {
		return colarb.oc1.wrapper().rollingImpulse(body);
	} else {
		return 0.0;
	}
};
CollisionArbiter.prototype.get_elasticity = function() {
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	var colarb = this.zpp_inner.colarb;
	if(colarb.invalidated) {
		colarb.invalidated = false;
		if(!colarb.userdef_restitution) {
			if(colarb.s1.material.elasticity <= -Infinity || colarb.s2.material.elasticity <= -Infinity) {
				colarb.restitution = 0;
			} else if(colarb.s1.material.elasticity >= Infinity || colarb.s2.material.elasticity >= Infinity) {
				colarb.restitution = 1;
			} else {
				colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
			}
			if(colarb.restitution < 0) {
				colarb.restitution = 0;
			}
			if(colarb.restitution > 1) {
				colarb.restitution = 1;
			}
		}
		if(!colarb.userdef_dyn_fric) {
			colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
		}
		if(!colarb.userdef_stat_fric) {
			colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
		}
		if(!colarb.userdef_rfric) {
			colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
	}
	return colarb.restitution;
};
CollisionArbiter.prototype.set_elasticity = function(elasticity) {
	if(!this.zpp_inner.colarb.mutable) {
		throw new js._Boot.HaxeError("Error: CollisionArbiter::" + "elasticity" + " is only mutable during a pre-handler");
	}
	if(elasticity != elasticity) {
		throw new js._Boot.HaxeError("Error: CollisionArbiter::" + "elasticity" + " cannot be NaN");
	}
	if(elasticity < 0) {
		throw new js._Boot.HaxeError("Error: CollisionArbiter::" + "elasticity" + " cannot be negative");
	}
	var colarb = this.zpp_inner.colarb;
	colarb.restitution = elasticity;
	colarb.userdef_restitution = true;
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	var colarb1 = this.zpp_inner.colarb;
	if(colarb1.invalidated) {
		colarb1.invalidated = false;
		if(!colarb1.userdef_restitution) {
			if(colarb1.s1.material.elasticity <= -Infinity || colarb1.s2.material.elasticity <= -Infinity) {
				colarb1.restitution = 0;
			} else if(colarb1.s1.material.elasticity >= Infinity || colarb1.s2.material.elasticity >= Infinity) {
				colarb1.restitution = 1;
			} else {
				colarb1.restitution = (colarb1.s1.material.elasticity + colarb1.s2.material.elasticity) / 2;
			}
			if(colarb1.restitution < 0) {
				colarb1.restitution = 0;
			}
			if(colarb1.restitution > 1) {
				colarb1.restitution = 1;
			}
		}
		if(!colarb1.userdef_dyn_fric) {
			colarb1.dyn_fric = Math.sqrt(colarb1.s1.material.dynamicFriction * colarb1.s2.material.dynamicFriction);
		}
		if(!colarb1.userdef_stat_fric) {
			colarb1.stat_fric = Math.sqrt(colarb1.s1.material.staticFriction * colarb1.s2.material.staticFriction);
		}
		if(!colarb1.userdef_rfric) {
			colarb1.rfric = Math.sqrt(colarb1.s1.material.rollingFriction * colarb1.s2.material.rollingFriction);
		}
	}
	return colarb1.restitution;
};
CollisionArbiter.prototype.get_dynamicFriction = function() {
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	var colarb = this.zpp_inner.colarb;
	if(colarb.invalidated) {
		colarb.invalidated = false;
		if(!colarb.userdef_restitution) {
			if(colarb.s1.material.elasticity <= -Infinity || colarb.s2.material.elasticity <= -Infinity) {
				colarb.restitution = 0;
			} else if(colarb.s1.material.elasticity >= Infinity || colarb.s2.material.elasticity >= Infinity) {
				colarb.restitution = 1;
			} else {
				colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
			}
			if(colarb.restitution < 0) {
				colarb.restitution = 0;
			}
			if(colarb.restitution > 1) {
				colarb.restitution = 1;
			}
		}
		if(!colarb.userdef_dyn_fric) {
			colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
		}
		if(!colarb.userdef_stat_fric) {
			colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
		}
		if(!colarb.userdef_rfric) {
			colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
	}
	return colarb.dyn_fric;
};
CollisionArbiter.prototype.set_dynamicFriction = function(dynamicFriction) {
	if(!this.zpp_inner.colarb.mutable) {
		throw new js._Boot.HaxeError("Error: CollisionArbiter::" + "dynamicFriction" + " is only mutable during a pre-handler");
	}
	if(dynamicFriction != dynamicFriction) {
		throw new js._Boot.HaxeError("Error: CollisionArbiter::" + "dynamicFriction" + " cannot be NaN");
	}
	if(dynamicFriction < 0) {
		throw new js._Boot.HaxeError("Error: CollisionArbiter::" + "dynamicFriction" + " cannot be negative");
	}
	var colarb = this.zpp_inner.colarb;
	colarb.dyn_fric = dynamicFriction;
	colarb.userdef_dyn_fric = true;
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	var colarb1 = this.zpp_inner.colarb;
	if(colarb1.invalidated) {
		colarb1.invalidated = false;
		if(!colarb1.userdef_restitution) {
			if(colarb1.s1.material.elasticity <= -Infinity || colarb1.s2.material.elasticity <= -Infinity) {
				colarb1.restitution = 0;
			} else if(colarb1.s1.material.elasticity >= Infinity || colarb1.s2.material.elasticity >= Infinity) {
				colarb1.restitution = 1;
			} else {
				colarb1.restitution = (colarb1.s1.material.elasticity + colarb1.s2.material.elasticity) / 2;
			}
			if(colarb1.restitution < 0) {
				colarb1.restitution = 0;
			}
			if(colarb1.restitution > 1) {
				colarb1.restitution = 1;
			}
		}
		if(!colarb1.userdef_dyn_fric) {
			colarb1.dyn_fric = Math.sqrt(colarb1.s1.material.dynamicFriction * colarb1.s2.material.dynamicFriction);
		}
		if(!colarb1.userdef_stat_fric) {
			colarb1.stat_fric = Math.sqrt(colarb1.s1.material.staticFriction * colarb1.s2.material.staticFriction);
		}
		if(!colarb1.userdef_rfric) {
			colarb1.rfric = Math.sqrt(colarb1.s1.material.rollingFriction * colarb1.s2.material.rollingFriction);
		}
	}
	return colarb1.dyn_fric;
};
CollisionArbiter.prototype.get_staticFriction = function() {
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	var colarb = this.zpp_inner.colarb;
	if(colarb.invalidated) {
		colarb.invalidated = false;
		if(!colarb.userdef_restitution) {
			if(colarb.s1.material.elasticity <= -Infinity || colarb.s2.material.elasticity <= -Infinity) {
				colarb.restitution = 0;
			} else if(colarb.s1.material.elasticity >= Infinity || colarb.s2.material.elasticity >= Infinity) {
				colarb.restitution = 1;
			} else {
				colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
			}
			if(colarb.restitution < 0) {
				colarb.restitution = 0;
			}
			if(colarb.restitution > 1) {
				colarb.restitution = 1;
			}
		}
		if(!colarb.userdef_dyn_fric) {
			colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
		}
		if(!colarb.userdef_stat_fric) {
			colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
		}
		if(!colarb.userdef_rfric) {
			colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
	}
	return colarb.stat_fric;
};
CollisionArbiter.prototype.set_staticFriction = function(staticFriction) {
	if(!this.zpp_inner.colarb.mutable) {
		throw new js._Boot.HaxeError("Error: CollisionArbiter::" + "staticFriction" + " is only mutable during a pre-handler");
	}
	if(staticFriction != staticFriction) {
		throw new js._Boot.HaxeError("Error: CollisionArbiter::" + "staticFriction" + " cannot be NaN");
	}
	if(staticFriction < 0) {
		throw new js._Boot.HaxeError("Error: CollisionArbiter::" + "staticFriction" + " cannot be negative");
	}
	var colarb = this.zpp_inner.colarb;
	colarb.stat_fric = staticFriction;
	colarb.userdef_stat_fric = true;
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	var colarb1 = this.zpp_inner.colarb;
	if(colarb1.invalidated) {
		colarb1.invalidated = false;
		if(!colarb1.userdef_restitution) {
			if(colarb1.s1.material.elasticity <= -Infinity || colarb1.s2.material.elasticity <= -Infinity) {
				colarb1.restitution = 0;
			} else if(colarb1.s1.material.elasticity >= Infinity || colarb1.s2.material.elasticity >= Infinity) {
				colarb1.restitution = 1;
			} else {
				colarb1.restitution = (colarb1.s1.material.elasticity + colarb1.s2.material.elasticity) / 2;
			}
			if(colarb1.restitution < 0) {
				colarb1.restitution = 0;
			}
			if(colarb1.restitution > 1) {
				colarb1.restitution = 1;
			}
		}
		if(!colarb1.userdef_dyn_fric) {
			colarb1.dyn_fric = Math.sqrt(colarb1.s1.material.dynamicFriction * colarb1.s2.material.dynamicFriction);
		}
		if(!colarb1.userdef_stat_fric) {
			colarb1.stat_fric = Math.sqrt(colarb1.s1.material.staticFriction * colarb1.s2.material.staticFriction);
		}
		if(!colarb1.userdef_rfric) {
			colarb1.rfric = Math.sqrt(colarb1.s1.material.rollingFriction * colarb1.s2.material.rollingFriction);
		}
	}
	return colarb1.stat_fric;
};
CollisionArbiter.prototype.get_rollingFriction = function() {
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	var colarb = this.zpp_inner.colarb;
	if(colarb.invalidated) {
		colarb.invalidated = false;
		if(!colarb.userdef_restitution) {
			if(colarb.s1.material.elasticity <= -Infinity || colarb.s2.material.elasticity <= -Infinity) {
				colarb.restitution = 0;
			} else if(colarb.s1.material.elasticity >= Infinity || colarb.s2.material.elasticity >= Infinity) {
				colarb.restitution = 1;
			} else {
				colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
			}
			if(colarb.restitution < 0) {
				colarb.restitution = 0;
			}
			if(colarb.restitution > 1) {
				colarb.restitution = 1;
			}
		}
		if(!colarb.userdef_dyn_fric) {
			colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
		}
		if(!colarb.userdef_stat_fric) {
			colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
		}
		if(!colarb.userdef_rfric) {
			colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
	}
	return colarb.rfric;
};
CollisionArbiter.prototype.set_rollingFriction = function(rollingFriction) {
	if(!this.zpp_inner.colarb.mutable) {
		throw new js._Boot.HaxeError("Error: CollisionArbiter::" + "rollingFriction" + " is only mutable during a pre-handler");
	}
	if(rollingFriction != rollingFriction) {
		throw new js._Boot.HaxeError("Error: CollisionArbiter::" + "rollingFriction" + " cannot be NaN");
	}
	if(rollingFriction < 0) {
		throw new js._Boot.HaxeError("Error: CollisionArbiter::" + "rollingFriction" + " cannot be negative");
	}
	var colarb = this.zpp_inner.colarb;
	colarb.rfric = rollingFriction;
	colarb.userdef_rfric = true;
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	var colarb1 = this.zpp_inner.colarb;
	if(colarb1.invalidated) {
		colarb1.invalidated = false;
		if(!colarb1.userdef_restitution) {
			if(colarb1.s1.material.elasticity <= -Infinity || colarb1.s2.material.elasticity <= -Infinity) {
				colarb1.restitution = 0;
			} else if(colarb1.s1.material.elasticity >= Infinity || colarb1.s2.material.elasticity >= Infinity) {
				colarb1.restitution = 1;
			} else {
				colarb1.restitution = (colarb1.s1.material.elasticity + colarb1.s2.material.elasticity) / 2;
			}
			if(colarb1.restitution < 0) {
				colarb1.restitution = 0;
			}
			if(colarb1.restitution > 1) {
				colarb1.restitution = 1;
			}
		}
		if(!colarb1.userdef_dyn_fric) {
			colarb1.dyn_fric = Math.sqrt(colarb1.s1.material.dynamicFriction * colarb1.s2.material.dynamicFriction);
		}
		if(!colarb1.userdef_stat_fric) {
			colarb1.stat_fric = Math.sqrt(colarb1.s1.material.staticFriction * colarb1.s2.material.staticFriction);
		}
		if(!colarb1.userdef_rfric) {
			colarb1.rfric = Math.sqrt(colarb1.s1.material.rollingFriction * colarb1.s2.material.rollingFriction);
		}
	}
	return colarb1.rfric;
};
CollisionArbiter.prototype.__class__ = CollisionArbiter;
var Contact = nape.dynamics.Contact = function() {
	this.zpp_inner = null;
	if(!ZPP_Contact.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate Contact derp!");
	}
};
Contact.__name__ = ["nape","dynamics","Contact"];
Contact.prototype.zpp_inner = null;
Contact.prototype.get_arbiter = function() {
	if(this.zpp_inner.arbiter == null) {
		return null;
	} else {
		var _this = this.zpp_inner.arbiter.outer;
		if(_this.zpp_inner.type == ZPP_Arbiter.COL) {
			return _this.zpp_inner.colarb.outer_zn;
		} else {
			return null;
		}
	}
};
Contact.prototype.get_penetration = function() {
	if(this.zpp_inner.inactiveme()) {
		throw new js._Boot.HaxeError("Error: Contact not currently in use");
	}
	return -this.zpp_inner.dist;
};
Contact.prototype.get_position = function() {
	if(this.zpp_inner.inactiveme()) {
		throw new js._Boot.HaxeError("Error: Contact not currently in use");
	}
	if(this.zpp_inner.wrap_position == null) {
		this.zpp_inner.getposition();
	}
	return this.zpp_inner.wrap_position;
};
Contact.prototype.get_fresh = function() {
	if(this.zpp_inner.inactiveme()) {
		throw new js._Boot.HaxeError("Error: Contact not currently in use");
	}
	return this.zpp_inner.fresh;
};
Contact.prototype.normalImpulse = function(body) {
	if(this.zpp_inner.inactiveme()) {
		throw new js._Boot.HaxeError("Error: Contact not currently in use");
	}
	var colarb = this.zpp_inner.arbiter.colarb;
	var cin = this.zpp_inner.inner;
	var jnAcc = cin.jnAcc;
	if(body == null) {
		return Vec3.get(colarb.nx * jnAcc,colarb.ny * jnAcc);
	} else {
		if(body != colarb.b1.outer && body != colarb.b2.outer) {
			throw new js._Boot.HaxeError("Error: Contact does not relate to the given body");
		}
		if(body == colarb.b1.outer) {
			return Vec3.get(colarb.nx * -jnAcc,colarb.ny * -jnAcc,-(colarb.ny * cin.r1x - colarb.nx * cin.r1y) * jnAcc);
		} else {
			return Vec3.get(colarb.nx * jnAcc,colarb.ny * jnAcc,(colarb.ny * cin.r2x - colarb.nx * cin.r2y) * jnAcc);
		}
	}
};
Contact.prototype.tangentImpulse = function(body) {
	if(this.zpp_inner.inactiveme()) {
		throw new js._Boot.HaxeError("Error: Contact not currently in use");
	}
	var colarb = this.zpp_inner.arbiter.colarb;
	var cin = this.zpp_inner.inner;
	var jtAcc = cin.jtAcc;
	if(body == null) {
		return Vec3.get(-colarb.ny * jtAcc,colarb.nx * jtAcc);
	} else {
		if(body != colarb.b1.outer && body != colarb.b2.outer) {
			throw new js._Boot.HaxeError("Error: Contact does not relate to the given body");
		}
		if(body == colarb.b1.outer) {
			return Vec3.get(colarb.ny * jtAcc,-colarb.nx * jtAcc,-(cin.r1x * colarb.nx + cin.r1y * colarb.ny) * jtAcc);
		} else {
			return Vec3.get(-colarb.ny * jtAcc,colarb.nx * jtAcc,(cin.r2x * colarb.nx + cin.r2y * colarb.ny) * jtAcc);
		}
	}
};
Contact.prototype.rollingImpulse = function(body) {
	if(this.zpp_inner.inactiveme()) {
		throw new js._Boot.HaxeError("Error: Contact not currently in use");
	}
	var colarb = this.zpp_inner.arbiter.colarb;
	var jrAcc = this.zpp_inner.arbiter.colarb.jrAcc;
	if(body == null) {
		return jrAcc;
	} else {
		if(body != colarb.b1.outer && body != colarb.b2.outer) {
			throw new js._Boot.HaxeError("Error: Contact does not relate to the given body");
		}
		if(body == colarb.b1.outer) {
			return -jrAcc;
		} else {
			return jrAcc;
		}
	}
};
Contact.prototype.totalImpulse = function(body) {
	if(this.zpp_inner.inactiveme()) {
		throw new js._Boot.HaxeError("Error: Contact not currently in use");
	}
	var colarb = this.zpp_inner.arbiter.colarb;
	var cin = this.zpp_inner.inner;
	var jnAcc = cin.jnAcc;
	var jtAcc = cin.jtAcc;
	var jrAcc = colarb.jrAcc;
	if(body == null) {
		return Vec3.get(colarb.nx * jnAcc - colarb.ny * jtAcc,colarb.ny * jnAcc + colarb.nx * jtAcc,jrAcc);
	} else {
		if(body != colarb.b1.outer && body != colarb.b2.outer) {
			throw new js._Boot.HaxeError("Error: Contact does not relate to the given body");
		}
		var jx = colarb.nx * jnAcc - colarb.ny * jtAcc;
		var jy = colarb.ny * jnAcc + colarb.nx * jtAcc;
		if(body == colarb.b1.outer) {
			return Vec3.get(-jx,-jy,-(jy * cin.r1x - jx * cin.r1y) - jrAcc);
		} else {
			return Vec3.get(jx,jy,jy * cin.r2x - jx * cin.r2y + jrAcc);
		}
	}
};
Contact.prototype.get_friction = function() {
	if(this.zpp_inner.inactiveme()) {
		throw new js._Boot.HaxeError("Error: Contact not currently in use");
	}
	return this.zpp_inner.inner.friction;
};
Contact.prototype.toString = function() {
	if(this.zpp_inner.arbiter == null || this.zpp_inner.arbiter.cleared) {
		return "{object-pooled}";
	} else {
		return "{Contact}";
	}
};
Contact.prototype.__class__ = Contact;
var ContactIterator = nape.dynamics.ContactIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!ZPP_ContactList.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "Contact" + "Iterator derp!");
	}
};
ContactIterator.__name__ = ["nape","dynamics","ContactIterator"];
ContactIterator.get = function(list) {
	var ret;
	if(ContactIterator.zpp_pool == null) {
		ZPP_ContactList.internal = true;
		var ret1 = new ContactIterator();
		ZPP_ContactList.internal = false;
		ret = ret1;
	} else {
		var r = ContactIterator.zpp_pool;
		ContactIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
ContactIterator.prototype.zpp_inner = null;
ContactIterator.prototype.zpp_i = null;
ContactIterator.prototype.zpp_critical = null;
ContactIterator.prototype.zpp_next = null;
ContactIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var _this = this.zpp_inner;
	_this.zpp_inner.valmod();
	if(_this.zpp_inner.zip_length) {
		_this.zpp_inner.zip_length = false;
		_this.zpp_inner.user_length = 0;
		var cx_ite = _this.zpp_inner.inner.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i.active && i.arbiter.active) {
				_this.zpp_inner.user_length++;
			}
			cx_ite = cx_ite.next;
		}
	}
	var length = _this.zpp_inner.user_length;
	this.zpp_critical = true;
	if(this.zpp_i < length) {
		return true;
	} else {
		this.zpp_next = ContactIterator.zpp_pool;
		ContactIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
ContactIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
ContactIterator.prototype.__class__ = ContactIterator;
var ContactList = nape.dynamics.ContactList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new ZPP_ContactList();
	this.zpp_inner.outer = this;
};
ContactList.__name__ = ["nape","dynamics","ContactList"];
ContactList.fromArray = function(array) {
	if(array == null) {
		throw new js._Boot.HaxeError("Error: Cannot convert null Array to Nape list");
	}
	var ret = new ContactList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
ContactList.prototype.zpp_inner = null;
ContactList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = 0;
		var cx_ite = this.zpp_inner.inner.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i.active && i.arbiter.active) {
				this.zpp_inner.user_length++;
			}
			cx_ite = cx_ite.next;
		}
	}
	return this.zpp_inner.user_length;
};
ContactList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
ContactList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	var tmp;
	if(index >= 0) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = 0;
			var cx_ite = this.zpp_inner.inner.next;
			while(cx_ite != null) {
				var i = cx_ite;
				if(i.active && i.arbiter.active) {
					this.zpp_inner.user_length++;
				}
				cx_ite = cx_ite.next;
			}
		}
		tmp = index >= this.zpp_inner.user_length;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Index out of bounds");
	}
	if(this.zpp_inner.reverse_flag) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = 0;
			var cx_ite1 = this.zpp_inner.inner.next;
			while(cx_ite1 != null) {
				var i1 = cx_ite1;
				if(i1.active && i1.arbiter.active) {
					this.zpp_inner.user_length++;
				}
				cx_ite1 = cx_ite1.next;
			}
		}
		index = this.zpp_inner.user_length - 1 - index;
	}
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = 0;
		this.zpp_inner.at_ite = this.zpp_inner.inner.next;
		while(true) {
			var x = this.zpp_inner.at_ite;
			if(x.active && x.arbiter.active) {
				break;
			}
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		while(true) {
			var x1 = this.zpp_inner.at_ite;
			if(x1.active && x1.arbiter.active) {
				break;
			}
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	return this.zpp_inner.at_ite.wrapper();
};
ContactList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Contact" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.inner.add(obj.zpp_inner);
		} else {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				this.zpp_inner.valmod();
				if(this.zpp_inner.zip_length) {
					this.zpp_inner.zip_length = false;
					this.zpp_inner.user_length = 0;
					var cx_ite = this.zpp_inner.inner.next;
					while(cx_ite != null) {
						var i = cx_ite;
						if(i.active && i.arbiter.active) {
							this.zpp_inner.user_length++;
						}
						cx_ite = cx_ite.next;
					}
				}
				if(this.zpp_inner.user_length == 0) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = 0;
						var cx_ite1 = this.zpp_inner.inner.next;
						while(cx_ite1 != null) {
							var i1 = cx_ite1;
							if(i1.active && i1.arbiter.active) {
								this.zpp_inner.user_length++;
							}
							cx_ite1 = cx_ite1.next;
						}
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
ContactList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Contact" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				this.zpp_inner.valmod();
				if(this.zpp_inner.zip_length) {
					this.zpp_inner.zip_length = false;
					this.zpp_inner.user_length = 0;
					var cx_ite = this.zpp_inner.inner.next;
					while(cx_ite != null) {
						var i = cx_ite;
						if(i.active && i.arbiter.active) {
							this.zpp_inner.user_length++;
						}
						cx_ite = cx_ite.next;
					}
				}
				if(this.zpp_inner.user_length == 0) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = 0;
						var cx_ite1 = this.zpp_inner.inner.next;
						while(cx_ite1 != null) {
							var i1 = cx_ite1;
							if(i1.active && i1.arbiter.active) {
								this.zpp_inner.user_length++;
							}
							cx_ite1 = cx_ite1.next;
						}
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else {
			this.zpp_inner.inner.add(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
ContactList.prototype.pop = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Contact" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = 0;
		var cx_ite = this.zpp_inner.inner.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i.active && i.arbiter.active) {
				this.zpp_inner.user_length++;
			}
			cx_ite = cx_ite.next;
		}
	}
	if(this.zpp_inner.user_length == 0) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.next;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = 0;
			var cx_ite1 = this.zpp_inner.inner.next;
			while(cx_ite1 != null) {
				var i1 = cx_ite1;
				if(i1.active && i1.arbiter.active) {
					this.zpp_inner.user_length++;
				}
				cx_ite1 = cx_ite1.next;
			}
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = 0;
				var cx_ite2 = this.zpp_inner.inner.next;
				while(cx_ite2 != null) {
					var i2 = cx_ite2;
					if(i2.active && i2.arbiter.active) {
						this.zpp_inner.user_length++;
					}
					cx_ite2 = cx_ite2.next;
				}
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.next;
		} else {
			ret = ite.next;
		}
		var retx1 = ret.wrapper();
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	}
	this.zpp_inner.invalidate();
	return ret.wrapper();
};
ContactList.prototype.shift = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Contact" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = 0;
		var cx_ite = this.zpp_inner.inner.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i.active && i.arbiter.active) {
				this.zpp_inner.user_length++;
			}
			cx_ite = cx_ite.next;
		}
	}
	if(this.zpp_inner.user_length == 0) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = 0;
			var cx_ite1 = this.zpp_inner.inner.next;
			while(cx_ite1 != null) {
				var i1 = cx_ite1;
				if(i1.active && i1.arbiter.active) {
					this.zpp_inner.user_length++;
				}
				cx_ite1 = cx_ite1.next;
			}
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = 0;
				var cx_ite2 = this.zpp_inner.inner.next;
				while(cx_ite2 != null) {
					var i2 = cx_ite2;
					if(i2.active && i2.arbiter.active) {
						this.zpp_inner.user_length++;
					}
					cx_ite2 = cx_ite2.next;
				}
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.next;
		} else {
			ret = ite.next;
		}
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	} else {
		ret = this.zpp_inner.inner.next;
		var retx1 = ret.wrapper();
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	}
	this.zpp_inner.invalidate();
	return ret.wrapper();
};
ContactList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) {
		return this.push(obj);
	} else {
		return this.unshift(obj);
	}
};
ContactList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Contact" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.next;
	while(cx_ite != null) {
		if(cx_ite == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(obj);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.remove(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
	}
	return ret;
};
ContactList.prototype.clear = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Contact" + "List is immutable");
	}
	if(this.zpp_inner.reverse_flag) {
		while(true) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = 0;
				var cx_ite = this.zpp_inner.inner.next;
				while(cx_ite != null) {
					var i = cx_ite;
					if(i.active && i.arbiter.active) {
						this.zpp_inner.user_length++;
					}
					cx_ite = cx_ite.next;
				}
			}
			if(!(this.zpp_inner.user_length != 0)) {
				break;
			}
			this.pop();
		}
	} else {
		while(true) {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = 0;
				var cx_ite1 = this.zpp_inner.inner.next;
				while(cx_ite1 != null) {
					var i1 = cx_ite1;
					if(i1.active && i1.arbiter.active) {
						this.zpp_inner.user_length++;
					}
					cx_ite1 = cx_ite1.next;
				}
			}
			if(!(this.zpp_inner.user_length != 0)) {
				break;
			}
			this.shift();
		}
	}
};
ContactList.prototype.empty = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = 0;
		var cx_ite = this.zpp_inner.inner.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i.active && i.arbiter.active) {
				this.zpp_inner.user_length++;
			}
			cx_ite = cx_ite.next;
		}
	}
	return this.zpp_inner.user_length == 0;
};
ContactList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return ContactIterator.get(this);
};
ContactList.prototype.copy = function(deep) {
	if(deep == null) {
		deep = false;
	}
	var ret = new ContactList();
	this.zpp_inner.valmod();
	var _g = ContactIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = 0;
			var cx_ite = _this.zpp_inner.inner.next;
			while(cx_ite != null) {
				var i = cx_ite;
				if(i.active && i.arbiter.active) {
					_this.zpp_inner.user_length++;
				}
				cx_ite = cx_ite.next;
			}
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ContactIterator.zpp_pool;
			ContactIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i1 = _g.zpp_inner.at(_g.zpp_i++);
		if(deep) {
			throw new js._Boot.HaxeError("Error: " + "Contact" + " is not a copyable type");
		}
		ret.push(i1);
	}
	return ret;
};
ContactList.prototype.merge = function(xs) {
	if(xs == null) {
		throw new js._Boot.HaxeError("Error: Cannot merge with null list");
	}
	xs.zpp_inner.valmod();
	var _g = ContactIterator.get(xs);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = 0;
			var cx_ite = _this.zpp_inner.inner.next;
			while(cx_ite != null) {
				var i = cx_ite;
				if(i.active && i.arbiter.active) {
					_this.zpp_inner.user_length++;
				}
				cx_ite = cx_ite.next;
			}
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ContactIterator.zpp_pool;
			ContactIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) {
				this.push(x);
			} else {
				this.unshift(x);
			}
		}
	}
};
ContactList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	this.zpp_inner.valmod();
	var _g = ContactIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = 0;
			var cx_ite = _this.zpp_inner.inner.next;
			while(cx_ite != null) {
				var i = cx_ite;
				if(i.active && i.arbiter.active) {
					_this.zpp_inner.user_length++;
				}
				cx_ite = cx_ite.next;
			}
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ContactIterator.zpp_pool;
			ContactIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i1 = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) {
			ret += ",";
		}
		ret += i1 == null?"NULL":i1.toString();
		fst = false;
	}
	return ret + "]";
};
ContactList.prototype.foreach = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot execute null on list elements");
	}
	this.zpp_inner.valmod();
	var it = ContactIterator.get(this);
	while(true) {
		it.zpp_inner.zpp_inner.valmod();
		var _this = it.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = 0;
			var cx_ite = _this.zpp_inner.inner.next;
			while(cx_ite != null) {
				var i = cx_ite;
				if(i.active && i.arbiter.active) {
					_this.zpp_inner.user_length++;
				}
				cx_ite = cx_ite.next;
			}
		}
		var length = _this.zpp_inner.user_length;
		it.zpp_critical = true;
		var tmp;
		if(it.zpp_i < length) {
			tmp = true;
		} else {
			it.zpp_next = ContactIterator.zpp_pool;
			ContactIterator.zpp_pool = it;
			it.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		try {
			it.zpp_critical = false;
			lambda(it.zpp_inner.at(it.zpp_i++));
		} catch( e ) {
			it.zpp_next = ContactIterator.zpp_pool;
			ContactIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
	}
	return this;
};
ContactList.prototype.filter = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot select elements of list with null");
	}
	var i = 0;
	while(true) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = 0;
			var cx_ite = this.zpp_inner.inner.next;
			while(cx_ite != null) {
				var i1 = cx_ite;
				if(i1.active && i1.arbiter.active) {
					this.zpp_inner.user_length++;
				}
				cx_ite = cx_ite.next;
			}
		}
		if(!(i < this.zpp_inner.user_length)) {
			break;
		}
		var x = this.at(i);
		try {
			if(lambda(x)) {
				++i;
			} else {
				this.remove(x);
			}
		} catch( e ) {
			break;
		}
	}
	return this;
};
ContactList.prototype.__class__ = ContactList;
var FluidArbiter = nape.dynamics.FluidArbiter = function() {
	if(!ZPP_Arbiter.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate FluidArbiter derp!");
	}
	Arbiter.call(this);
};
FluidArbiter.__name__ = ["nape","dynamics","FluidArbiter"];
FluidArbiter.__super__ = Arbiter;
// for(var k in Arbiter.prototype ) FluidArbiter.prototype[k] = Arbiter.prototype[k];
FluidArbiter.prototype = Object.create(Arbiter.prototype);
FluidArbiter.prototype.get_position = function() {
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	if(this.zpp_inner.fluidarb.wrap_position == null) {
		this.zpp_inner.fluidarb.getposition();
	}
	return this.zpp_inner.fluidarb.wrap_position;
};
FluidArbiter.prototype.set_position = function(position) {
	if(!this.zpp_inner.fluidarb.mutable) {
		throw new js._Boot.HaxeError("Error: Arbiter is mutable only within a pre-handler");
	}
	if(position == null) {
		throw new js._Boot.HaxeError("Error: FluidArbiter::position cannot be null");
	}
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	if(this.zpp_inner.fluidarb.wrap_position == null) {
		this.zpp_inner.fluidarb.getposition();
	}
	var _this = this.zpp_inner.fluidarb.wrap_position;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(position != null && position.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(position == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(position != null && position.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = position.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = position.zpp_inner.x;
	if(position != null && position.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = position.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = position.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(position.zpp_inner.weak) {
		if(position != null && position.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = position.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(position.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = position.zpp_inner;
		position.zpp_inner.outer = null;
		position.zpp_inner = null;
		position.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = position;
		} else {
			ZPP_PubPool.poolVec2 = position;
		}
		ZPP_PubPool.nextVec2 = position;
		position.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	if(this.zpp_inner.fluidarb.wrap_position == null) {
		this.zpp_inner.fluidarb.getposition();
	}
	return this.zpp_inner.fluidarb.wrap_position;
};
FluidArbiter.prototype.get_overlap = function() {
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	return this.zpp_inner.fluidarb.overlap;
};
FluidArbiter.prototype.set_overlap = function(overlap) {
	if(!this.zpp_inner.fluidarb.mutable) {
		throw new js._Boot.HaxeError("Error: Arbiter is mutable only within a pre-handler");
	}
	if(overlap != overlap) {
		throw new js._Boot.HaxeError("Error: FluidArbiter::overlap cannot be NaN");
	}
	if(overlap <= 0 || overlap == Infinity) {
		throw new js._Boot.HaxeError("Error: FluidArbiter::overlap must be strictly positive and non infinite");
	}
	this.zpp_inner.fluidarb.overlap = overlap;
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	return this.zpp_inner.fluidarb.overlap;
};
FluidArbiter.prototype.buoyancyImpulse = function(body) {
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	var tmp;
	var tmp1;
	if(body != null) {
		if(!this.zpp_inner.active) {
			throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
		}
		tmp1 = body != (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.b2.outer:this.zpp_inner.b1.outer);
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		if(!this.zpp_inner.active) {
			throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
		}
		tmp = body != (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.b1.outer:this.zpp_inner.b2.outer);
	} else {
		tmp = false;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Arbiter does not relate to body");
	}
	var farb = this.zpp_inner.fluidarb;
	if(body == null) {
		return Vec3.get(farb.buoyx,farb.buoyy,0);
	} else if(body.zpp_inner == this.zpp_inner.b2) {
		return Vec3.get(farb.buoyx,farb.buoyy,farb.buoyy * farb.r2x - farb.buoyx * farb.r2y);
	} else {
		return Vec3.get(-farb.buoyx,-farb.buoyy,-(farb.buoyy * farb.r1x - farb.buoyx * farb.r1y));
	}
};
FluidArbiter.prototype.dragImpulse = function(body) {
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	var tmp;
	var tmp1;
	if(body != null) {
		if(!this.zpp_inner.active) {
			throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
		}
		tmp1 = body != (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.b2.outer:this.zpp_inner.b1.outer);
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		if(!this.zpp_inner.active) {
			throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
		}
		tmp = body != (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.b1.outer:this.zpp_inner.b2.outer);
	} else {
		tmp = false;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Arbiter does not relate to body");
	}
	var farb = this.zpp_inner.fluidarb;
	var scale = body == null || body.zpp_inner == this.zpp_inner.b2?1:-1;
	return Vec3.get(farb.dampx * scale,farb.dampy * scale,farb.adamp * scale);
};
FluidArbiter.prototype.totalImpulse = function(body,freshOnly) {
	if(freshOnly == null) {
		freshOnly = false;
	}
	if(!this.zpp_inner.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	var tmp;
	var tmp1;
	if(body != null) {
		if(!this.zpp_inner.active) {
			throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
		}
		tmp1 = body != (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.b2.outer:this.zpp_inner.b1.outer);
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		if(!this.zpp_inner.active) {
			throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
		}
		tmp = body != (this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.b1.outer:this.zpp_inner.b2.outer);
	} else {
		tmp = false;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Arbiter does not relate to body");
	}
	var tmp2 = this.buoyancyImpulse(body);
	var ret = this.dragImpulse(body);
	if(ret != null && ret.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this = ret.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp3 = ret.zpp_inner.x;
	if(tmp2 != null && tmp2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this1 = tmp2.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(ret != null && ret.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(ret.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: Vec3 is immutable");
	}
	ret.zpp_inner.x = tmp3 + tmp2.zpp_inner.x;
	if(ret != null && ret.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this2 = ret.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	if(ret != null && ret.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this3 = ret.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var tmp4 = ret.zpp_inner.y;
	if(tmp2 != null && tmp2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this4 = tmp2.zpp_inner;
	if(_this4._validate != null) {
		_this4._validate();
	}
	if(ret != null && ret.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(ret.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: Vec3 is immutable");
	}
	ret.zpp_inner.y = tmp4 + tmp2.zpp_inner.y;
	if(ret != null && ret.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this5 = ret.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(ret != null && ret.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this6 = ret.zpp_inner;
	if(_this6._validate != null) {
		_this6._validate();
	}
	var tmp5 = ret.zpp_inner.z;
	if(tmp2 != null && tmp2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this7 = tmp2.zpp_inner;
	if(_this7._validate != null) {
		_this7._validate();
	}
	if(ret != null && ret.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(ret.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: Vec3 is immutable");
	}
	ret.zpp_inner.z = tmp5 + tmp2.zpp_inner.z;
	if(ret != null && ret.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this8 = ret.zpp_inner;
	if(_this8._validate != null) {
		_this8._validate();
	}
	tmp2.dispose();
	return ret;
};
FluidArbiter.prototype.__class__ = FluidArbiter;
var InteractionFilter = nape.dynamics.InteractionFilter = function(collisionGroup,collisionMask,sensorGroup,sensorMask,fluidGroup,fluidMask) {
	if(fluidMask == null) {
		fluidMask = -1;
	}
	if(fluidGroup == null) {
		fluidGroup = 1;
	}
	if(sensorMask == null) {
		sensorMask = -1;
	}
	if(sensorGroup == null) {
		sensorGroup = 1;
	}
	if(collisionMask == null) {
		collisionMask = -1;
	}
	if(collisionGroup == null) {
		collisionGroup = 1;
	}
	this.zpp_inner = null;
	if(ZPP_InteractionFilter.zpp_pool == null) {
		this.zpp_inner = new ZPP_InteractionFilter();
	} else {
		this.zpp_inner = ZPP_InteractionFilter.zpp_pool;
		ZPP_InteractionFilter.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	this.zpp_inner.outer = this;
	if(this.zpp_inner.collisionGroup != collisionGroup) {
		this.zpp_inner.collisionGroup = collisionGroup;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_inner.collisionMask != collisionMask) {
		this.zpp_inner.collisionMask = collisionMask;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_inner.sensorGroup != sensorGroup) {
		this.zpp_inner.sensorGroup = sensorGroup;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_inner.sensorMask != sensorMask) {
		this.zpp_inner.sensorMask = sensorMask;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_inner.fluidGroup != fluidGroup) {
		this.zpp_inner.fluidGroup = fluidGroup;
		this.zpp_inner.invalidate();
	}
	if(this.zpp_inner.fluidMask != fluidMask) {
		this.zpp_inner.fluidMask = fluidMask;
		this.zpp_inner.invalidate();
	}
};
InteractionFilter.__name__ = ["nape","dynamics","InteractionFilter"];
InteractionFilter.prototype.zpp_inner = null;
InteractionFilter.prototype.get_userData = function() {
	if(this.zpp_inner.userData == null) {
		this.zpp_inner.userData = { };
	}
	return this.zpp_inner.userData;
};
InteractionFilter.prototype.get_shapes = function() {
	if(this.zpp_inner.wrap_shapes == null) {
		this.zpp_inner.wrap_shapes = ZPP_ShapeList.get(this.zpp_inner.shapes,true);
	}
	return this.zpp_inner.wrap_shapes;
};
InteractionFilter.prototype.get_collisionGroup = function() {
	return this.zpp_inner.collisionGroup;
};
InteractionFilter.prototype.set_collisionGroup = function(collisionGroup) {
	if(this.zpp_inner.collisionGroup != collisionGroup) {
		this.zpp_inner.collisionGroup = collisionGroup;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.collisionGroup;
};
InteractionFilter.prototype.get_collisionMask = function() {
	return this.zpp_inner.collisionMask;
};
InteractionFilter.prototype.set_collisionMask = function(collisionMask) {
	if(this.zpp_inner.collisionMask != collisionMask) {
		this.zpp_inner.collisionMask = collisionMask;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.collisionMask;
};
InteractionFilter.prototype.get_sensorGroup = function() {
	return this.zpp_inner.sensorGroup;
};
InteractionFilter.prototype.set_sensorGroup = function(sensorGroup) {
	if(this.zpp_inner.sensorGroup != sensorGroup) {
		this.zpp_inner.sensorGroup = sensorGroup;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.sensorGroup;
};
InteractionFilter.prototype.get_sensorMask = function() {
	return this.zpp_inner.sensorMask;
};
InteractionFilter.prototype.set_sensorMask = function(sensorMask) {
	if(this.zpp_inner.sensorMask != sensorMask) {
		this.zpp_inner.sensorMask = sensorMask;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.sensorMask;
};
InteractionFilter.prototype.get_fluidGroup = function() {
	return this.zpp_inner.fluidGroup;
};
InteractionFilter.prototype.set_fluidGroup = function(fluidGroup) {
	if(this.zpp_inner.fluidGroup != fluidGroup) {
		this.zpp_inner.fluidGroup = fluidGroup;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.fluidGroup;
};
InteractionFilter.prototype.get_fluidMask = function() {
	return this.zpp_inner.fluidMask;
};
InteractionFilter.prototype.set_fluidMask = function(fluidMask) {
	if(this.zpp_inner.fluidMask != fluidMask) {
		this.zpp_inner.fluidMask = fluidMask;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.fluidMask;
};
InteractionFilter.prototype.shouldCollide = function(filter) {
	if(filter == null) {
		throw new js._Boot.HaxeError("Error: filter argument cannot be null for shouldCollide");
	}
	var _this = this.zpp_inner;
	var x = filter.zpp_inner;
	if((_this.collisionMask & x.collisionGroup) != 0) {
		return (x.collisionMask & _this.collisionGroup) != 0;
	} else {
		return false;
	}
};
InteractionFilter.prototype.shouldSense = function(filter) {
	if(filter == null) {
		throw new js._Boot.HaxeError("Error: filter argument cannot be null for shouldSense");
	}
	var _this = this.zpp_inner;
	var x = filter.zpp_inner;
	if((_this.sensorMask & x.sensorGroup) != 0) {
		return (x.sensorMask & _this.sensorGroup) != 0;
	} else {
		return false;
	}
};
InteractionFilter.prototype.shouldFlow = function(filter) {
	if(filter == null) {
		throw new js._Boot.HaxeError("Error: filter argument cannot be null for shouldFlow");
	}
	var _this = this.zpp_inner;
	var x = filter.zpp_inner;
	if((_this.fluidMask & x.fluidGroup) != 0) {
		return (x.fluidMask & _this.fluidGroup) != 0;
	} else {
		return false;
	}
};
InteractionFilter.prototype.copy = function() {
	return new InteractionFilter(this.zpp_inner.collisionGroup,this.zpp_inner.collisionMask,this.zpp_inner.sensorGroup,this.zpp_inner.sensorMask,this.zpp_inner.fluidGroup,this.zpp_inner.fluidMask);
};
InteractionFilter.prototype.toString = function() {
	return "{ collision: " + StringTools.hex(this.zpp_inner.collisionGroup,8) + "~" + StringTools.hex(this.zpp_inner.collisionMask,8) + " sensor: " + StringTools.hex(this.zpp_inner.sensorGroup,8) + "~" + StringTools.hex(this.zpp_inner.sensorMask,8) + " fluid: " + StringTools.hex(this.zpp_inner.fluidGroup,8) + "~" + StringTools.hex(this.zpp_inner.fluidMask,8) + " }";
};
InteractionFilter.prototype.__class__ = InteractionFilter;
var InteractionGroup = nape.dynamics.InteractionGroup = function(ignore) {
	if(ignore == null) {
		ignore = false;
	}
	this.zpp_inner = null;
	this.zpp_inner = new ZPP_InteractionGroup();
	this.zpp_inner.outer = this;
	if(this.zpp_inner.ignore != ignore) {
		this.zpp_inner.invalidate(true);
		this.zpp_inner.ignore = ignore;
	}
};
InteractionGroup.__name__ = ["nape","dynamics","InteractionGroup"];
InteractionGroup.prototype.zpp_inner = null;
InteractionGroup.prototype.get_group = function() {
	if(this.zpp_inner.group == null) {
		return null;
	} else {
		return this.zpp_inner.group.outer;
	}
};
InteractionGroup.prototype.set_group = function(group) {
	if(group == this) {
		throw new js._Boot.HaxeError("Error: Cannot assign InteractionGroup to itself");
	}
	this.zpp_inner.setGroup(group == null?null:group.zpp_inner);
	if(this.zpp_inner.group == null) {
		return null;
	} else {
		return this.zpp_inner.group.outer;
	}
};
InteractionGroup.prototype.get_ignore = function() {
	return this.zpp_inner.ignore;
};
InteractionGroup.prototype.set_ignore = function(ignore) {
	if(this.zpp_inner.ignore != ignore) {
		this.zpp_inner.invalidate(true);
		this.zpp_inner.ignore = ignore;
	}
	return this.zpp_inner.ignore;
};
InteractionGroup.prototype.get_interactors = function() {
	if(this.zpp_inner.wrap_interactors == null) {
		this.zpp_inner.wrap_interactors = ZPP_InteractorList.get(this.zpp_inner.interactors,true);
	}
	return this.zpp_inner.wrap_interactors;
};
InteractionGroup.prototype.get_groups = function() {
	if(this.zpp_inner.wrap_groups == null) {
		this.zpp_inner.wrap_groups = ZPP_InteractionGroupList.get(this.zpp_inner.groups,true);
	}
	return this.zpp_inner.wrap_groups;
};
InteractionGroup.prototype.toString = function() {
	var ret = "InteractionGroup";
	if(this.zpp_inner.ignore) {
		ret = "InteractionGroup" + ":ignore";
	}
	return ret;
};
InteractionGroup.prototype.__class__ = InteractionGroup;
var InteractionGroupIterator = nape.dynamics.InteractionGroupIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!ZPP_InteractionGroupList.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "InteractionGroup" + "Iterator derp!");
	}
};
InteractionGroupIterator.__name__ = ["nape","dynamics","InteractionGroupIterator"];
InteractionGroupIterator.get = function(list) {
	var ret;
	if(InteractionGroupIterator.zpp_pool == null) {
		ZPP_InteractionGroupList.internal = true;
		var ret1 = new InteractionGroupIterator();
		ZPP_InteractionGroupList.internal = false;
		ret = ret1;
	} else {
		var r = InteractionGroupIterator.zpp_pool;
		InteractionGroupIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
InteractionGroupIterator.prototype.zpp_inner = null;
InteractionGroupIterator.prototype.zpp_i = null;
InteractionGroupIterator.prototype.zpp_critical = null;
InteractionGroupIterator.prototype.zpp_next = null;
InteractionGroupIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var _this = this.zpp_inner;
	_this.zpp_inner.valmod();
	if(_this.zpp_inner.zip_length) {
		_this.zpp_inner.zip_length = false;
		_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
	}
	var length = _this.zpp_inner.user_length;
	this.zpp_critical = true;
	if(this.zpp_i < length) {
		return true;
	} else {
		this.zpp_next = InteractionGroupIterator.zpp_pool;
		InteractionGroupIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
InteractionGroupIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
InteractionGroupIterator.prototype.__class__ = InteractionGroupIterator;
var InteractionGroupList = nape.dynamics.InteractionGroupList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new ZPP_InteractionGroupList();
	this.zpp_inner.outer = this;
};
InteractionGroupList.__name__ = ["nape","dynamics","InteractionGroupList"];
InteractionGroupList.fromArray = function(array) {
	if(array == null) {
		throw new js._Boot.HaxeError("Error: Cannot convert null Array to Nape list");
	}
	var ret = new InteractionGroupList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
InteractionGroupList.prototype.zpp_inner = null;
InteractionGroupList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
InteractionGroupList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
InteractionGroupList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	var tmp;
	if(index >= 0) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		tmp = index >= this.zpp_inner.user_length;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Index out of bounds");
	}
	if(this.zpp_inner.reverse_flag) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		index = this.zpp_inner.user_length - 1 - index;
	}
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else {
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	return this.zpp_inner.at_ite.elt.outer;
};
InteractionGroupList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "InteractionGroup" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.inner.add(obj.zpp_inner);
		} else {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
InteractionGroupList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "InteractionGroup" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else {
			this.zpp_inner.inner.add(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
InteractionGroupList.prototype.pop = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "InteractionGroup" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	}
	this.zpp_inner.invalidate();
	return ret.outer;
};
InteractionGroupList.prototype.shift = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "InteractionGroup" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	}
	this.zpp_inner.invalidate();
	return ret.outer;
};
InteractionGroupList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) {
		return this.push(obj);
	} else {
		return this.unshift(obj);
	}
};
InteractionGroupList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "InteractionGroup" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(obj);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.remove(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
	}
	return ret;
};
InteractionGroupList.prototype.clear = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "InteractionGroup" + "List is immutable");
	}
	if(this.zpp_inner.reverse_flag) {
		while(this.zpp_inner.inner.head != null) this.pop();
	} else {
		while(this.zpp_inner.inner.head != null) this.shift();
	}
};
InteractionGroupList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
InteractionGroupList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return InteractionGroupIterator.get(this);
};
InteractionGroupList.prototype.copy = function(deep) {
	if(deep == null) {
		deep = false;
	}
	var ret = new InteractionGroupList();
	this.zpp_inner.valmod();
	var _g = InteractionGroupIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = InteractionGroupIterator.zpp_pool;
			InteractionGroupIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(deep) {
			throw new js._Boot.HaxeError("Error: " + "InteractionGroup" + " is not a copyable type");
		}
		ret.push(i);
	}
	return ret;
};
InteractionGroupList.prototype.merge = function(xs) {
	if(xs == null) {
		throw new js._Boot.HaxeError("Error: Cannot merge with null list");
	}
	xs.zpp_inner.valmod();
	var _g = InteractionGroupIterator.get(xs);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = InteractionGroupIterator.zpp_pool;
			InteractionGroupIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) {
				this.push(x);
			} else {
				this.unshift(x);
			}
		}
	}
};
InteractionGroupList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	this.zpp_inner.valmod();
	var _g = InteractionGroupIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = InteractionGroupIterator.zpp_pool;
			InteractionGroupIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) {
			ret += ",";
		}
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
};
InteractionGroupList.prototype.foreach = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot execute null on list elements");
	}
	this.zpp_inner.valmod();
	var it = InteractionGroupIterator.get(this);
	while(true) {
		it.zpp_inner.zpp_inner.valmod();
		var _this = it.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		it.zpp_critical = true;
		var tmp;
		if(it.zpp_i < length) {
			tmp = true;
		} else {
			it.zpp_next = InteractionGroupIterator.zpp_pool;
			InteractionGroupIterator.zpp_pool = it;
			it.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		try {
			it.zpp_critical = false;
			lambda(it.zpp_inner.at(it.zpp_i++));
		} catch( e ) {
			it.zpp_next = InteractionGroupIterator.zpp_pool;
			InteractionGroupIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
	}
	return this;
};
InteractionGroupList.prototype.filter = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot select elements of list with null");
	}
	var i = 0;
	while(true) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(!(i < this.zpp_inner.user_length)) {
			break;
		}
		var x = this.at(i);
		try {
			if(lambda(x)) {
				++i;
			} else {
				this.remove(x);
			}
		} catch( e ) {
			break;
		}
	}
	return this;
};
InteractionGroupList.prototype.__class__ = InteractionGroupList;
var AABB = nape.geom.AABB = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.zpp_inner = null;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: AABB position cannot be NaN");
	}
	if(width != width || height != height) {
		throw new js._Boot.HaxeError("Error: AABB dimensions cannot be NaN");
	}
	var ret;
	if(ZPP_AABB.zpp_pool == null) {
		ret = new ZPP_AABB();
	} else {
		ret = ZPP_AABB.zpp_pool;
		ZPP_AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.minx = x;
	ret.miny = y;
	ret.maxx = x + width;
	ret.maxy = y + height;
	this.zpp_inner = ret;
	this.zpp_inner.outer = this;
};
AABB.__name__ = ["nape","geom","AABB"];
AABB.prototype.zpp_inner = null;
AABB.prototype.copy = function() {
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var _this1 = this.zpp_inner;
	var minx = _this1.minx;
	var miny = _this1.miny;
	var maxx = _this1.maxx;
	var maxy = _this1.maxy;
	var ret;
	if(ZPP_AABB.zpp_pool == null) {
		ret = new ZPP_AABB();
	} else {
		ret = ZPP_AABB.zpp_pool;
		ZPP_AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.minx = minx;
	ret.miny = miny;
	ret.maxx = maxx;
	ret.maxy = maxy;
	return ret.wrapper();
};
AABB.prototype.get_min = function() {
	return this.zpp_inner.getmin();
};
AABB.prototype.set_min = function(min) {
	if(min != null && min.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner._immutable) {
		throw new js._Boot.HaxeError("Error: AABB is immutable");
	}
	if(min == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null to AABB::" + "min");
	}
	var tmp;
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp1 = this.zpp_inner.minx;
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(tmp1 == this.zpp_inner.minx) {
		var _this2 = this.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		var tmp2 = this.zpp_inner.miny;
		var _this3 = this.zpp_inner;
		if(_this3._validate != null) {
			_this3._validate();
		}
		tmp = tmp2 != this.zpp_inner.miny;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: AABB::" + "min" + " components cannot be NaN");
	}
	if(min != null && min.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = min.zpp_inner;
	if(_this4._validate != null) {
		_this4._validate();
	}
	var tmp3 = min.zpp_inner.x;
	var _this5 = this.zpp_inner.getmax();
	if(_this5 != null && _this5.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this6 = _this5.zpp_inner;
	if(_this6._validate != null) {
		_this6._validate();
	}
	if(tmp3 > _this5.zpp_inner.x) {
		throw new js._Boot.HaxeError("Error: Assignment would cause negative width");
	}
	if(min != null && min.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this7 = min.zpp_inner;
	if(_this7._validate != null) {
		_this7._validate();
	}
	var tmp4 = min.zpp_inner.y;
	var _this8 = this.zpp_inner.getmax();
	if(_this8 != null && _this8.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this9 = _this8.zpp_inner;
	if(_this9._validate != null) {
		_this9._validate();
	}
	if(tmp4 > _this8.zpp_inner.y) {
		throw new js._Boot.HaxeError("Error: Assignment would cause negative height");
	}
	var _this10 = this.zpp_inner.getmin();
	if(_this10 != null && _this10.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(min != null && min.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this11 = _this10.zpp_inner;
	if(_this11._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this11._isimmutable != null) {
		_this11._isimmutable();
	}
	if(min == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(min != null && min.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this12 = min.zpp_inner;
	if(_this12._validate != null) {
		_this12._validate();
	}
	var x = min.zpp_inner.x;
	if(min != null && min.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this13 = min.zpp_inner;
	if(_this13._validate != null) {
		_this13._validate();
	}
	var y = min.zpp_inner.y;
	if(_this10 != null && _this10.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this14 = _this10.zpp_inner;
	if(_this14._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this14._isimmutable != null) {
		_this14._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp5;
	if(_this10 != null && _this10.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this15 = _this10.zpp_inner;
	if(_this15._validate != null) {
		_this15._validate();
	}
	if(_this10.zpp_inner.x == x) {
		if(_this10 != null && _this10.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this16 = _this10.zpp_inner;
		if(_this16._validate != null) {
			_this16._validate();
		}
		tmp5 = _this10.zpp_inner.y == y;
	} else {
		tmp5 = false;
	}
	if(!tmp5) {
		_this10.zpp_inner.x = x;
		_this10.zpp_inner.y = y;
		var _this17 = _this10.zpp_inner;
		if(_this17._invalidate != null) {
			_this17._invalidate(_this17);
		}
	}
	if(min.zpp_inner.weak) {
		if(min != null && min.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this18 = min.zpp_inner;
		if(_this18._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this18._isimmutable != null) {
			_this18._isimmutable();
		}
		if(min.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = min.zpp_inner;
		min.zpp_inner.outer = null;
		min.zpp_inner = null;
		min.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = min;
		} else {
			ZPP_PubPool.poolVec2 = min;
		}
		ZPP_PubPool.nextVec2 = min;
		min.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return this.zpp_inner.getmin();
};
AABB.prototype.get_max = function() {
	return this.zpp_inner.getmax();
};
AABB.prototype.set_max = function(max) {
	if(max != null && max.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner._immutable) {
		throw new js._Boot.HaxeError("Error: AABB is immutable");
	}
	if(max == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null to AABB::" + "max");
	}
	var tmp;
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp1 = this.zpp_inner.minx;
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(tmp1 == this.zpp_inner.minx) {
		var _this2 = this.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		var tmp2 = this.zpp_inner.miny;
		var _this3 = this.zpp_inner;
		if(_this3._validate != null) {
			_this3._validate();
		}
		tmp = tmp2 != this.zpp_inner.miny;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: AABB::" + "max" + " components cannot be NaN");
	}
	if(max != null && max.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = max.zpp_inner;
	if(_this4._validate != null) {
		_this4._validate();
	}
	var tmp3 = max.zpp_inner.x;
	var _this5 = this.zpp_inner.getmin();
	if(_this5 != null && _this5.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this6 = _this5.zpp_inner;
	if(_this6._validate != null) {
		_this6._validate();
	}
	if(tmp3 < _this5.zpp_inner.x) {
		throw new js._Boot.HaxeError("Error: Assignment would cause negative width");
	}
	if(max != null && max.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this7 = max.zpp_inner;
	if(_this7._validate != null) {
		_this7._validate();
	}
	var tmp4 = max.zpp_inner.y;
	var _this8 = this.zpp_inner.getmin();
	if(_this8 != null && _this8.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this9 = _this8.zpp_inner;
	if(_this9._validate != null) {
		_this9._validate();
	}
	if(tmp4 < _this8.zpp_inner.y) {
		throw new js._Boot.HaxeError("Error: Assignment would cause negative height");
	}
	var _this10 = this.zpp_inner.getmax();
	if(_this10 != null && _this10.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(max != null && max.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this11 = _this10.zpp_inner;
	if(_this11._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this11._isimmutable != null) {
		_this11._isimmutable();
	}
	if(max == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(max != null && max.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this12 = max.zpp_inner;
	if(_this12._validate != null) {
		_this12._validate();
	}
	var x = max.zpp_inner.x;
	if(max != null && max.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this13 = max.zpp_inner;
	if(_this13._validate != null) {
		_this13._validate();
	}
	var y = max.zpp_inner.y;
	if(_this10 != null && _this10.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this14 = _this10.zpp_inner;
	if(_this14._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this14._isimmutable != null) {
		_this14._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp5;
	if(_this10 != null && _this10.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this15 = _this10.zpp_inner;
	if(_this15._validate != null) {
		_this15._validate();
	}
	if(_this10.zpp_inner.x == x) {
		if(_this10 != null && _this10.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this16 = _this10.zpp_inner;
		if(_this16._validate != null) {
			_this16._validate();
		}
		tmp5 = _this10.zpp_inner.y == y;
	} else {
		tmp5 = false;
	}
	if(!tmp5) {
		_this10.zpp_inner.x = x;
		_this10.zpp_inner.y = y;
		var _this17 = _this10.zpp_inner;
		if(_this17._invalidate != null) {
			_this17._invalidate(_this17);
		}
	}
	if(max.zpp_inner.weak) {
		if(max != null && max.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this18 = max.zpp_inner;
		if(_this18._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this18._isimmutable != null) {
			_this18._isimmutable();
		}
		if(max.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = max.zpp_inner;
		max.zpp_inner.outer = null;
		max.zpp_inner = null;
		max.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = max;
		} else {
			ZPP_PubPool.poolVec2 = max;
		}
		ZPP_PubPool.nextVec2 = max;
		max.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return this.zpp_inner.getmax();
};
AABB.prototype.get_x = function() {
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	return this.zpp_inner.minx;
};
AABB.prototype.set_x = function(x) {
	if(this.zpp_inner._immutable) {
		throw new js._Boot.HaxeError("Error: AABB is immutable");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	if(this.zpp_inner.minx != x) {
		if(x != x) {
			throw new js._Boot.HaxeError("Error: AABB::" + "x" + " cannot be NaN");
		}
		this.zpp_inner.maxx += x - this.zpp_inner.minx;
		this.zpp_inner.minx = x;
		var _this1 = this.zpp_inner;
		if(_this1._invalidate != null) {
			_this1._invalidate(_this1);
		}
	}
	var _this2 = this.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	return this.zpp_inner.minx;
};
AABB.prototype.get_y = function() {
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	return this.zpp_inner.miny;
};
AABB.prototype.set_y = function(y) {
	if(this.zpp_inner._immutable) {
		throw new js._Boot.HaxeError("Error: AABB is immutable");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	if(this.zpp_inner.miny != y) {
		if(y != y) {
			throw new js._Boot.HaxeError("Error: AABB::" + "y" + " cannot be NaN");
		}
		this.zpp_inner.maxy += y - this.zpp_inner.miny;
		this.zpp_inner.miny = y;
		var _this1 = this.zpp_inner;
		if(_this1._invalidate != null) {
			_this1._invalidate(_this1);
		}
	}
	var _this2 = this.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	return this.zpp_inner.miny;
};
AABB.prototype.get_width = function() {
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var _this1 = this.zpp_inner;
	return _this1.maxx - _this1.minx;
};
AABB.prototype.set_width = function(width) {
	if(this.zpp_inner._immutable) {
		throw new js._Boot.HaxeError("Error: AABB is immutable");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var _this1 = this.zpp_inner;
	if(_this1.maxx - _this1.minx != width) {
		if(width != width) {
			throw new js._Boot.HaxeError("Error: AABB::" + "width" + " cannot be NaN");
		}
		if(width < 0) {
			throw new js._Boot.HaxeError("Error: AABB::" + "width" + " (" + width + ") must be >= 0");
		}
		var _this2 = this.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		this.zpp_inner.maxx = this.zpp_inner.minx + width;
		var _this3 = this.zpp_inner;
		if(_this3._invalidate != null) {
			_this3._invalidate(_this3);
		}
	}
	var _this4 = this.zpp_inner;
	if(_this4._validate != null) {
		_this4._validate();
	}
	var _this5 = this.zpp_inner;
	return _this5.maxx - _this5.minx;
};
AABB.prototype.get_height = function() {
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var _this1 = this.zpp_inner;
	return _this1.maxy - _this1.miny;
};
AABB.prototype.set_height = function(height) {
	if(this.zpp_inner._immutable) {
		throw new js._Boot.HaxeError("Error: AABB is immutable");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var _this1 = this.zpp_inner;
	if(_this1.maxy - _this1.miny != height) {
		if(height != height) {
			throw new js._Boot.HaxeError("Error: AABB::" + "height" + " cannot be NaN");
		}
		if(height < 0) {
			throw new js._Boot.HaxeError("Error: AABB::" + "height" + " (" + height + ") must be >= 0");
		}
		var _this2 = this.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		this.zpp_inner.maxy = this.zpp_inner.miny + height;
		var _this3 = this.zpp_inner;
		if(_this3._invalidate != null) {
			_this3._invalidate(_this3);
		}
	}
	var _this4 = this.zpp_inner;
	if(_this4._validate != null) {
		_this4._validate();
	}
	var _this5 = this.zpp_inner;
	return _this5.maxy - _this5.miny;
};
AABB.prototype.toString = function() {
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	return this.zpp_inner.toString();
};
AABB.prototype.__class__ = AABB;
var ConvexResult = nape.geom.ConvexResult = function() {
	this.zpp_inner = null;
	if(!ZPP_ConvexRayResult.internal) {
		throw new js._Boot.HaxeError("Error: ConvexResult cannot be instantiated derp!");
	}
};
ConvexResult.__name__ = ["nape","geom","ConvexResult"];
ConvexResult.prototype.zpp_inner = null;
ConvexResult.prototype.get_normal = function() {
	if(this.zpp_inner.next != null) {
		throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
	}
	return this.zpp_inner.normal;
};
ConvexResult.prototype.get_position = function() {
	if(this.zpp_inner.next != null) {
		throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
	}
	return this.zpp_inner.position;
};
ConvexResult.prototype.get_toi = function() {
	if(this.zpp_inner.next != null) {
		throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
	}
	return this.zpp_inner.toiDistance;
};
ConvexResult.prototype.get_shape = function() {
	if(this.zpp_inner.next != null) {
		throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
	}
	return this.zpp_inner.shape;
};
ConvexResult.prototype.dispose = function() {
	if(this.zpp_inner.next != null) {
		throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
	}
	this.zpp_inner.free();
};
ConvexResult.prototype.toString = function() {
	if(this.zpp_inner.next != null) {
		throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
	}
	if(this.zpp_inner.next != null) {
		throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
	}
	var tmp = "{ shape: " + Std.string(this.zpp_inner.shape) + " toi: ";
	if(this.zpp_inner.next != null) {
		throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
	}
	return tmp + this.zpp_inner.toiDistance + " }";
};
ConvexResult.prototype.__class__ = ConvexResult;
var ConvexResultIterator = nape.geom.ConvexResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!ZPP_ConvexResultList.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "ConvexResult" + "Iterator derp!");
	}
};
ConvexResultIterator.__name__ = ["nape","geom","ConvexResultIterator"];
ConvexResultIterator.get = function(list) {
	var ret;
	if(ConvexResultIterator.zpp_pool == null) {
		ZPP_ConvexResultList.internal = true;
		var ret1 = new ConvexResultIterator();
		ZPP_ConvexResultList.internal = false;
		ret = ret1;
	} else {
		var r = ConvexResultIterator.zpp_pool;
		ConvexResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
ConvexResultIterator.prototype.zpp_inner = null;
ConvexResultIterator.prototype.zpp_i = null;
ConvexResultIterator.prototype.zpp_critical = null;
ConvexResultIterator.prototype.zpp_next = null;
ConvexResultIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var _this = this.zpp_inner;
	_this.zpp_inner.valmod();
	if(_this.zpp_inner.zip_length) {
		_this.zpp_inner.zip_length = false;
		_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
	}
	var length = _this.zpp_inner.user_length;
	this.zpp_critical = true;
	if(this.zpp_i < length) {
		return true;
	} else {
		this.zpp_next = ConvexResultIterator.zpp_pool;
		ConvexResultIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
ConvexResultIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
ConvexResultIterator.prototype.__class__ = ConvexResultIterator;
var ConvexResultList = nape.geom.ConvexResultList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new ZPP_ConvexResultList();
	this.zpp_inner.outer = this;
};
ConvexResultList.__name__ = ["nape","geom","ConvexResultList"];
ConvexResultList.fromArray = function(array) {
	if(array == null) {
		throw new js._Boot.HaxeError("Error: Cannot convert null Array to Nape list");
	}
	var ret = new ConvexResultList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
ConvexResultList.prototype.zpp_inner = null;
ConvexResultList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
ConvexResultList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj);
};
ConvexResultList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	var tmp;
	if(index >= 0) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		tmp = index >= this.zpp_inner.user_length;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Index out of bounds");
	}
	if(this.zpp_inner.reverse_flag) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		index = this.zpp_inner.user_length - 1 - index;
	}
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else {
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	return this.zpp_inner.at_ite.elt;
};
ConvexResultList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "ConvexResult" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.inner.add(obj);
		} else {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
ConvexResultList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "ConvexResult" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
		} else {
			this.zpp_inner.inner.add(obj);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
ConvexResultList.prototype.pop = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "ConvexResult" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx1 = ret;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	}
	this.zpp_inner.invalidate();
	return ret;
};
ConvexResultList.prototype.shift = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "ConvexResult" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx = ret;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	}
	this.zpp_inner.invalidate();
	return ret;
};
ConvexResultList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) {
		return this.push(obj);
	} else {
		return this.unshift(obj);
	}
};
ConvexResultList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "ConvexResult" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(obj);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.remove(obj);
		}
		this.zpp_inner.invalidate();
	}
	return ret;
};
ConvexResultList.prototype.clear = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "ConvexResult" + "List is immutable");
	}
	if(this.zpp_inner.reverse_flag) {
		while(this.zpp_inner.inner.head != null) this.pop();
	} else {
		while(this.zpp_inner.inner.head != null) this.shift();
	}
};
ConvexResultList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
ConvexResultList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return ConvexResultIterator.get(this);
};
ConvexResultList.prototype.copy = function(deep) {
	if(deep == null) {
		deep = false;
	}
	var ret = new ConvexResultList();
	this.zpp_inner.valmod();
	var _g = ConvexResultIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ConvexResultIterator.zpp_pool;
			ConvexResultIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(deep) {
			throw new js._Boot.HaxeError("Error: " + "ConvexResult" + " is not a copyable type");
		}
		ret.push(i);
	}
	return ret;
};
ConvexResultList.prototype.merge = function(xs) {
	if(xs == null) {
		throw new js._Boot.HaxeError("Error: Cannot merge with null list");
	}
	xs.zpp_inner.valmod();
	var _g = ConvexResultIterator.get(xs);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ConvexResultIterator.zpp_pool;
			ConvexResultIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) {
				this.push(x);
			} else {
				this.unshift(x);
			}
		}
	}
};
ConvexResultList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	this.zpp_inner.valmod();
	var _g = ConvexResultIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ConvexResultIterator.zpp_pool;
			ConvexResultIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) {
			ret += ",";
		}
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
};
ConvexResultList.prototype.foreach = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot execute null on list elements");
	}
	this.zpp_inner.valmod();
	var it = ConvexResultIterator.get(this);
	while(true) {
		it.zpp_inner.zpp_inner.valmod();
		var _this = it.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		it.zpp_critical = true;
		var tmp;
		if(it.zpp_i < length) {
			tmp = true;
		} else {
			it.zpp_next = ConvexResultIterator.zpp_pool;
			ConvexResultIterator.zpp_pool = it;
			it.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		try {
			it.zpp_critical = false;
			lambda(it.zpp_inner.at(it.zpp_i++));
		} catch( e ) {
			it.zpp_next = ConvexResultIterator.zpp_pool;
			ConvexResultIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
	}
	return this;
};
ConvexResultList.prototype.filter = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot select elements of list with null");
	}
	var i = 0;
	while(true) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(!(i < this.zpp_inner.user_length)) {
			break;
		}
		var x = this.at(i);
		try {
			if(lambda(x)) {
				++i;
			} else {
				this.remove(x);
			}
		} catch( e ) {
			break;
		}
	}
	return this;
};
ConvexResultList.prototype.__class__ = ConvexResultList;
var Geom = nape.geom.Geom = function() { };
Geom.__name__ = ["nape","geom","Geom"];
Geom.distanceBody = function(body1,body2,out1,out2) {
	if(out1 != null && out1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(out2 != null && out2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = out1.zpp_inner;
	if(_this._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this._isimmutable != null) {
		_this._isimmutable();
	}
	var _this1 = out2.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(body1.zpp_inner.wrap_shapes.zpp_inner.inner.head == null || body2.zpp_inner.wrap_shapes.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Bodies cannot be empty in calculating distances");
	}
	var cx_ite = body1.zpp_inner.shapes.head;
	while(cx_ite != null) {
		ZPP_Geom.validateShape(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = body2.zpp_inner.shapes.head;
	while(cx_ite1 != null) {
		ZPP_Geom.validateShape(cx_ite1.elt);
		cx_ite1 = cx_ite1.next;
	}
	return ZPP_SweepDistance.distanceBody(body1.zpp_inner,body2.zpp_inner,out1.zpp_inner,out2.zpp_inner);
};
Geom.distance = function(shape1,shape2,out1,out2) {
	if(out1 != null && out1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(out2 != null && out2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = out1.zpp_inner;
	if(_this._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this._isimmutable != null) {
		_this._isimmutable();
	}
	var _this1 = out2.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) {
		throw new js._Boot.HaxeError("Error: Shape must be part of a Body to calculate distances");
	}
	ZPP_Geom.validateShape(shape1.zpp_inner);
	ZPP_Geom.validateShape(shape2.zpp_inner);
	var tmp;
	if(ZPP_Vec2.zpp_pool == null) {
		tmp = new ZPP_Vec2();
	} else {
		tmp = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = tmp.next;
		tmp.next = null;
	}
	tmp.weak = false;
	var s1 = shape1.zpp_inner;
	var s2 = shape2.zpp_inner;
	var w1 = out1.zpp_inner;
	var w2 = out2.zpp_inner;
	var ret;
	if(s1.type == 0 && s2.type == 0) {
		var c1 = s1.circle;
		var c2 = s2.circle;
		var dist;
		var nx = 0.0;
		var ny = 0.0;
		nx = c2.worldCOMx - c1.worldCOMx;
		ny = c2.worldCOMy - c1.worldCOMy;
		var len = Math.sqrt(nx * nx + ny * ny);
		dist = len - (c1.radius + c2.radius);
		if(dist < 1e100) {
			if(len == 0) {
				nx = 1;
				ny = 0;
			} else {
				var t = 1.0 / len;
				nx *= t;
				ny *= t;
			}
			var t1 = c1.radius;
			w1.x = c1.worldCOMx + nx * t1;
			w1.y = c1.worldCOMy + ny * t1;
			var t2 = -c2.radius;
			w2.x = c2.worldCOMx + nx * t2;
			w2.y = c2.worldCOMy + ny * t2;
			tmp.x = nx;
			tmp.y = ny;
		}
		ret = dist;
	} else {
		var swapped = false;
		if(s1.type == 0 && s2.type == 1) {
			var tmp1 = s1;
			s1 = s2;
			s2 = tmp1;
			var tmp2 = w1;
			w1 = w2;
			w2 = tmp2;
			swapped = true;
		}
		if(s1.type == 1 && s2.type == 0) {
			var poly = s1.polygon;
			var circle = s2.circle;
			var best = -1e+100;
			var a0 = null;
			var cx_ite = poly.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				var dist1 = a.gnormx * circle.worldCOMx + a.gnormy * circle.worldCOMy - a.gprojection - circle.radius;
				if(dist1 > 1e100) {
					best = dist1;
					break;
				}
				if(dist1 > 0) {
					if(dist1 > best) {
						best = dist1;
						a0 = a;
					}
				} else if(best < 0 && dist1 > best) {
					best = dist1;
					a0 = a;
				}
				cx_ite = cx_ite.next;
			}
			if(best < 1e100) {
				var v0 = a0.gp0;
				var v1 = a0.gp1;
				var dt = circle.worldCOMy * a0.gnormx - circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var nx1 = 0.0;
					var ny1 = 0.0;
					nx1 = circle.worldCOMx - v0.x;
					ny1 = circle.worldCOMy - v0.y;
					var len1 = Math.sqrt(nx1 * nx1 + ny1 * ny1);
					best = len1 - circle.radius;
					if(best < 1e100) {
						if(len1 == 0) {
							nx1 = 1;
							ny1 = 0;
						} else {
							var t3 = 1.0 / len1;
							nx1 *= t3;
							ny1 *= t3;
						}
						w1.x = v0.x + nx1 * 0;
						w1.y = v0.y + ny1 * 0;
						var t4 = -circle.radius;
						w2.x = circle.worldCOMx + nx1 * t4;
						w2.y = circle.worldCOMy + ny1 * t4;
						tmp.x = nx1;
						tmp.y = ny1;
					}
				} else if(dt >= v1.y * a0.gnormx - v1.x * a0.gnormy) {
					var nx2 = 0.0;
					var ny2 = 0.0;
					nx2 = circle.worldCOMx - v1.x;
					ny2 = circle.worldCOMy - v1.y;
					var len2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);
					best = len2 - circle.radius;
					if(best < 1e100) {
						if(len2 == 0) {
							nx2 = 1;
							ny2 = 0;
						} else {
							var t5 = 1.0 / len2;
							nx2 *= t5;
							ny2 *= t5;
						}
						w1.x = v1.x + nx2 * 0;
						w1.y = v1.y + ny2 * 0;
						var t6 = -circle.radius;
						w2.x = circle.worldCOMx + nx2 * t6;
						w2.y = circle.worldCOMy + ny2 * t6;
						tmp.x = nx2;
						tmp.y = ny2;
					}
				} else {
					var t7 = -circle.radius;
					w2.x = circle.worldCOMx + a0.gnormx * t7;
					w2.y = circle.worldCOMy + a0.gnormy * t7;
					var t8 = -best;
					w1.x = w2.x + a0.gnormx * t8;
					w1.y = w2.y + a0.gnormy * t8;
					tmp.x = a0.gnormx;
					tmp.y = a0.gnormy;
				}
			}
			if(swapped) {
				tmp.x = -tmp.x;
				tmp.y = -tmp.y;
			}
			ret = best;
		} else {
			var p1 = s1.polygon;
			var p2 = s2.polygon;
			var best1 = -1e+100;
			var a1 = null;
			var a2 = null;
			var besti = 0;
			var cx_ite1 = p1.edges.head;
			while(cx_ite1 != null) {
				var a3 = cx_ite1.elt;
				var min = 1e100;
				var cx_ite2 = p2.gverts.next;
				while(cx_ite2 != null) {
					var v = cx_ite2;
					var k = a3.gnormx * v.x + a3.gnormy * v.y;
					if(k < min) {
						min = k;
					}
					cx_ite2 = cx_ite2.next;
				}
				min -= a3.gprojection;
				if(min > 1e100) {
					best1 = min;
					break;
				}
				if(min > 0) {
					if(min > best1) {
						best1 = min;
						a1 = a3;
						besti = 1;
					}
				} else if(best1 < 0 && min > best1) {
					best1 = min;
					a1 = a3;
					besti = 1;
				}
				cx_ite1 = cx_ite1.next;
			}
			if(best1 < 1e100) {
				var cx_ite3 = p2.edges.head;
				while(cx_ite3 != null) {
					var a4 = cx_ite3.elt;
					var min1 = 1e100;
					var cx_ite4 = p1.gverts.next;
					while(cx_ite4 != null) {
						var v2 = cx_ite4;
						var k1 = a4.gnormx * v2.x + a4.gnormy * v2.y;
						if(k1 < min1) {
							min1 = k1;
						}
						cx_ite4 = cx_ite4.next;
					}
					min1 -= a4.gprojection;
					if(min1 > 1e100) {
						best1 = min1;
						break;
					}
					if(min1 > 0) {
						if(min1 > best1) {
							best1 = min1;
							a2 = a4;
							besti = 2;
						}
					} else if(best1 < 0 && min1 > best1) {
						best1 = min1;
						a2 = a4;
						besti = 2;
					}
					cx_ite3 = cx_ite3.next;
				}
				if(best1 < 1e100) {
					var q2;
					var ax;
					if(besti == 1) {
						q2 = p2;
						ax = a1;
					} else {
						q2 = p1;
						ax = a2;
						var tmp3 = w1;
						w1 = w2;
						w2 = tmp3;
						swapped = !swapped;
					}
					var ay = null;
					var min2 = 1e100;
					var cx_ite5 = q2.edges.head;
					while(cx_ite5 != null) {
						var a5 = cx_ite5.elt;
						var k2 = ax.gnormx * a5.gnormx + ax.gnormy * a5.gnormy;
						if(k2 < min2) {
							min2 = k2;
							ay = a5;
						}
						cx_ite5 = cx_ite5.next;
					}
					if(swapped) {
						tmp.x = -ax.gnormx;
						tmp.y = -ax.gnormy;
					} else {
						tmp.x = ax.gnormx;
						tmp.y = ax.gnormy;
					}
					if(best1 >= 0) {
						var v01 = ax.gp0;
						var v11 = ax.gp1;
						var q0 = ay.gp0;
						var q1 = ay.gp1;
						var vx = 0.0;
						var vy = 0.0;
						var qx = 0.0;
						var qy = 0.0;
						vx = v11.x - v01.x;
						vy = v11.y - v01.y;
						qx = q1.x - q0.x;
						qy = q1.y - q0.y;
						var vdot = 1 / (vx * vx + vy * vy);
						var qdot = 1 / (qx * qx + qy * qy);
						var t11 = -(vx * (v01.x - q0.x) + vy * (v01.y - q0.y)) * vdot;
						var t21 = -(vx * (v01.x - q1.x) + vy * (v01.y - q1.y)) * vdot;
						var s11 = -(qx * (q0.x - v01.x) + qy * (q0.y - v01.y)) * qdot;
						var s21 = -(qx * (q0.x - v11.x) + qy * (q0.y - v11.y)) * qdot;
						if(t11 < 0) {
							t11 = 0;
						} else if(t11 > 1) {
							t11 = 1;
						}
						if(t21 < 0) {
							t21 = 0;
						} else if(t21 > 1) {
							t21 = 1;
						}
						if(s11 < 0) {
							s11 = 0;
						} else if(s11 > 1) {
							s11 = 1;
						}
						if(s21 < 0) {
							s21 = 0;
						} else if(s21 > 1) {
							s21 = 1;
						}
						var f1x = 0.0;
						var f1y = 0.0;
						var t9 = t11;
						f1x = v01.x + vx * t9;
						f1y = v01.y + vy * t9;
						var f2x = 0.0;
						var f2y = 0.0;
						var t10 = t21;
						f2x = v01.x + vx * t10;
						f2y = v01.y + vy * t10;
						var g1x = 0.0;
						var g1y = 0.0;
						var t12 = s11;
						g1x = q0.x + qx * t12;
						g1y = q0.y + qy * t12;
						var g2x = 0.0;
						var g2y = 0.0;
						var t13 = s21;
						g2x = q0.x + qx * t13;
						g2y = q0.y + qy * t13;
						var bx = q0.x;
						var by = q0.y;
						var dx = 0.0;
						var dy = 0.0;
						dx = f1x - bx;
						dy = f1y - by;
						var d1 = dx * dx + dy * dy;
						var bx1 = q1.x;
						var by1 = q1.y;
						var dx1 = 0.0;
						var dy1 = 0.0;
						dx1 = f2x - bx1;
						dy1 = f2y - by1;
						var d2 = dx1 * dx1 + dy1 * dy1;
						var bx2 = v01.x;
						var by2 = v01.y;
						var dx2 = 0.0;
						var dy2 = 0.0;
						dx2 = g1x - bx2;
						dy2 = g1y - by2;
						var e1 = dx2 * dx2 + dy2 * dy2;
						var bx3 = v11.x;
						var by3 = v11.y;
						var dx3 = 0.0;
						var dy3 = 0.0;
						dx3 = g2x - bx3;
						dy3 = g2y - by3;
						var e2 = dx3 * dx3 + dy3 * dy3;
						var minfx = 0.0;
						var minfy = 0.0;
						var minq = null;
						if(d1 < d2) {
							minfx = f1x;
							minfy = f1y;
							minq = q0;
						} else {
							minfx = f2x;
							minfy = f2y;
							minq = q1;
							d1 = d2;
						}
						var mingx = 0.0;
						var mingy = 0.0;
						var minv = null;
						if(e1 < e2) {
							mingx = g1x;
							mingy = g1y;
							minv = v01;
						} else {
							mingx = g2x;
							mingy = g2y;
							minv = v11;
							e1 = e2;
						}
						if(d1 < e1) {
							w1.x = minfx;
							w1.y = minfy;
							w2.x = minq.x;
							w2.y = minq.y;
							best1 = Math.sqrt(d1);
						} else {
							w2.x = mingx;
							w2.y = mingy;
							w1.x = minv.x;
							w1.y = minv.y;
							best1 = Math.sqrt(e1);
						}
						if(best1 != 0) {
							tmp.x = w2.x - w1.x;
							tmp.y = w2.y - w1.y;
							var t14 = 1.0 / best1;
							tmp.x *= t14;
							tmp.y *= t14;
							if(swapped) {
								tmp.x = -tmp.x;
								tmp.y = -tmp.y;
							}
						}
						ret = best1;
					} else {
						var c0x = 0.0;
						var c0y = 0.0;
						c0x = ay.gp0.x;
						c0y = ay.gp0.y;
						var c1x = 0.0;
						var c1y = 0.0;
						c1x = ay.gp1.x;
						c1y = ay.gp1.y;
						var dvx = 0.0;
						var dvy = 0.0;
						dvx = c1x - c0x;
						dvy = c1y - c0y;
						var d0 = ax.gnormy * c0x - ax.gnormx * c0y;
						var d11 = ax.gnormy * c1x - ax.gnormx * c1y;
						var den = 1 / (d11 - d0);
						var t15 = (-ax.tp1 - d0) * den;
						if(t15 > Config.epsilon) {
							c0x += dvx * t15;
							c0y += dvy * t15;
						}
						var t16 = (-ax.tp0 - d11) * den;
						if(t16 < -Config.epsilon) {
							c1x += dvx * t16;
							c1y += dvy * t16;
						}
						var c0d = c0x * ax.gnormx + c0y * ax.gnormy - ax.gprojection;
						var c1d = c1x * ax.gnormx + c1y * ax.gnormy - ax.gprojection;
						if(c0d < c1d) {
							w2.x = c0x;
							w2.y = c0y;
							var t17 = -c0d;
							w1.x = w2.x + ax.gnormx * t17;
							w1.y = w2.y + ax.gnormy * t17;
							ret = c0d;
						} else {
							w2.x = c1x;
							w2.y = c1y;
							var t18 = -c1d;
							w1.x = w2.x + ax.gnormx * t18;
							w1.y = w2.y + ax.gnormy * t18;
							ret = c1d;
						}
					}
				} else {
					ret = 1e100;
				}
			} else {
				ret = 1e100;
			}
		}
	}
	var o = tmp;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = ZPP_Vec2.zpp_pool;
	ZPP_Vec2.zpp_pool = o;
	return ret;
};
Geom.intersectsBody = function(body1,body2) {
	if(body1.zpp_inner.wrap_shapes.zpp_inner.inner.head == null || body2.zpp_inner.wrap_shapes.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Bodies must have shapes to test for intersection.");
	}
	var cx_ite = body1.zpp_inner.shapes.head;
	while(cx_ite != null) {
		ZPP_Geom.validateShape(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = body2.zpp_inner.shapes.head;
	while(cx_ite1 != null) {
		ZPP_Geom.validateShape(cx_ite1.elt);
		cx_ite1 = cx_ite1.next;
	}
	var _this = body1.zpp_inner.aabb;
	var x = body2.zpp_inner.aabb;
	if(!(x.miny <= _this.maxy && _this.miny <= x.maxy && x.minx <= _this.maxx && _this.minx <= x.maxx)) {
		return false;
	} else {
		var cx_ite2 = body1.zpp_inner.shapes.head;
		while(cx_ite2 != null) {
			var s1 = cx_ite2.elt;
			var cx_ite3 = body2.zpp_inner.shapes.head;
			while(cx_ite3 != null) {
				if(ZPP_Collide.testCollide_safe(s1,cx_ite3.elt)) {
					return true;
				}
				cx_ite3 = cx_ite3.next;
			}
			cx_ite2 = cx_ite2.next;
		}
		return false;
	}
};
Geom.intersects = function(shape1,shape2) {
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) {
		throw new js._Boot.HaxeError("Error: Shape must be part of a Body to calculate intersection");
	}
	ZPP_Geom.validateShape(shape1.zpp_inner);
	ZPP_Geom.validateShape(shape2.zpp_inner);
	var _this = shape1.zpp_inner.aabb;
	var x = shape2.zpp_inner.aabb;
	if(x.miny <= _this.maxy && _this.miny <= x.maxy && x.minx <= _this.maxx && _this.minx <= x.maxx) {
		return ZPP_Collide.testCollide_safe(shape1.zpp_inner,shape2.zpp_inner);
	} else {
		return false;
	}
};
Geom.contains = function(shape1,shape2) {
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) {
		throw new js._Boot.HaxeError("Error: Shape must be part of a Body to calculate containment");
	}
	ZPP_Geom.validateShape(shape1.zpp_inner);
	ZPP_Geom.validateShape(shape2.zpp_inner);
	return ZPP_Collide.containTest(shape1.zpp_inner,shape2.zpp_inner);
};
Geom.prototype.__class__ = Geom;
var GeomPoly = nape.geom.GeomPoly = function(vertices) {
	this.zpp_inner = null;
	this.zpp_pool = null;
	this.zpp_inner = new ZPP_GeomPoly(this);
	if(vertices != null) {
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				if(vite == null) {
					throw new js._Boot.HaxeError("Error: Array<Vec2> contains null objects");
				}
				if(!js.Boot.__instanceof(vite,Vec2)) {
					throw new js._Boot.HaxeError("Error: Array<Vec2> contains non Vec2 objects");
				}
				var v = vite;
				if(v != null && v.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				if(v != null && v.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = v.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				var x = v.zpp_inner.x;
				if(v != null && v.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this1 = v.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				var y = v.zpp_inner.y;
				var ret;
				if(ZPP_GeomVert.zpp_pool == null) {
					ret = new ZPP_GeomVert();
				} else {
					ret = ZPP_GeomVert.zpp_pool;
					ZPP_GeomVert.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.forced = false;
				ret.x = x;
				ret.y = y;
				var obj = ret;
				if(this.zpp_inner.vertices == null) {
					this.zpp_inner.vertices = obj.prev = obj.next = obj;
				} else {
					obj.prev = this.zpp_inner.vertices;
					obj.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj;
					this.zpp_inner.vertices.next = obj;
				}
				this.zpp_inner.vertices = obj;
			}
		} else if(js.Boot.__instanceof(vertices,Vec2List)) {
			var lv1 = vertices;
			var _g1 = lv1.iterator();
			while(true) {
				_g1.zpp_inner.zpp_inner.valmod();
				var length = _g1.zpp_inner.zpp_gl();
				_g1.zpp_critical = true;
				var tmp;
				if(_g1.zpp_i < length) {
					tmp = true;
				} else {
					_g1.zpp_next = Vec2Iterator.zpp_pool;
					Vec2Iterator.zpp_pool = _g1;
					_g1.zpp_inner = null;
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				_g1.zpp_critical = false;
				var v1 = _g1.zpp_inner.at(_g1.zpp_i++);
				if(v1 == null) {
					throw new js._Boot.HaxeError("Error: Vec2List contains null objects");
				}
				if(v1 != null && v1.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				if(v1 != null && v1.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = v1.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				var x1 = v1.zpp_inner.x;
				if(v1 != null && v1.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this3 = v1.zpp_inner;
				if(_this3._validate != null) {
					_this3._validate();
				}
				var y1 = v1.zpp_inner.y;
				var ret1;
				if(ZPP_GeomVert.zpp_pool == null) {
					ret1 = new ZPP_GeomVert();
				} else {
					ret1 = ZPP_GeomVert.zpp_pool;
					ZPP_GeomVert.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.forced = false;
				ret1.x = x1;
				ret1.y = y1;
				var obj1 = ret1;
				if(this.zpp_inner.vertices == null) {
					this.zpp_inner.vertices = obj1.prev = obj1.next = obj1;
				} else {
					obj1.prev = this.zpp_inner.vertices;
					obj1.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj1;
					this.zpp_inner.vertices.next = obj1;
				}
				this.zpp_inner.vertices = obj1;
			}
		} else if(js.Boot.__instanceof(vertices,GeomPoly)) {
			var lv2 = vertices;
			if(lv2 != null && lv2.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
			}
			var verts = lv2.zpp_inner.vertices;
			if(verts != null) {
				var vite1 = verts;
				while(true) {
					var x2 = vite1.x;
					var y2 = vite1.y;
					if(x2 != x2 || y2 != y2) {
						throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
					}
					var ret2;
					if(ZPP_PubPool.poolVec2 == null) {
						ret2 = new Vec2();
					} else {
						ret2 = ZPP_PubPool.poolVec2;
						ZPP_PubPool.poolVec2 = ret2.zpp_pool;
						ret2.zpp_pool = null;
						ret2.zpp_disp = false;
						if(ret2 == ZPP_PubPool.nextVec2) {
							ZPP_PubPool.nextVec2 = null;
						}
					}
					if(ret2.zpp_inner == null) {
						var ret3;
						if(ZPP_Vec2.zpp_pool == null) {
							ret3 = new ZPP_Vec2();
						} else {
							ret3 = ZPP_Vec2.zpp_pool;
							ZPP_Vec2.zpp_pool = ret3.next;
							ret3.next = null;
						}
						ret3.weak = false;
						ret3._immutable = false;
						ret3.x = x2;
						ret3.y = y2;
						ret2.zpp_inner = ret3;
						ret2.zpp_inner.outer = ret2;
					} else {
						if(ret2 != null && ret2.zpp_disp) {
							throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this4 = ret2.zpp_inner;
						if(_this4._immutable) {
							throw new js._Boot.HaxeError("Error: Vec2 is immutable");
						}
						if(_this4._isimmutable != null) {
							_this4._isimmutable();
						}
						if(x2 != x2 || y2 != y2) {
							throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
						}
						var tmp1;
						if(ret2 != null && ret2.zpp_disp) {
							throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this5 = ret2.zpp_inner;
						if(_this5._validate != null) {
							_this5._validate();
						}
						if(ret2.zpp_inner.x == x2) {
							if(ret2 != null && ret2.zpp_disp) {
								throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
							}
							var _this6 = ret2.zpp_inner;
							if(_this6._validate != null) {
								_this6._validate();
							}
							tmp1 = ret2.zpp_inner.y == y2;
						} else {
							tmp1 = false;
						}
						if(!tmp1) {
							ret2.zpp_inner.x = x2;
							ret2.zpp_inner.y = y2;
							var _this7 = ret2.zpp_inner;
							if(_this7._invalidate != null) {
								_this7._invalidate(_this7);
							}
						}
					}
					ret2.zpp_inner.weak = false;
					var v2 = ret2;
					vite1 = vite1.next;
					if(v2 != null && v2.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this8 = v2.zpp_inner;
					if(_this8._validate != null) {
						_this8._validate();
					}
					var x3 = v2.zpp_inner.x;
					if(v2 != null && v2.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this9 = v2.zpp_inner;
					if(_this9._validate != null) {
						_this9._validate();
					}
					var y3 = v2.zpp_inner.y;
					var ret4;
					if(ZPP_GeomVert.zpp_pool == null) {
						ret4 = new ZPP_GeomVert();
					} else {
						ret4 = ZPP_GeomVert.zpp_pool;
						ZPP_GeomVert.zpp_pool = ret4.next;
						ret4.next = null;
					}
					ret4.forced = false;
					ret4.x = x3;
					ret4.y = y3;
					var obj2 = ret4;
					if(this.zpp_inner.vertices == null) {
						this.zpp_inner.vertices = obj2.prev = obj2.next = obj2;
					} else {
						obj2.prev = this.zpp_inner.vertices;
						obj2.next = this.zpp_inner.vertices.next;
						this.zpp_inner.vertices.next.prev = obj2;
						this.zpp_inner.vertices.next = obj2;
					}
					this.zpp_inner.vertices = obj2;
					if(v2 != null && v2.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this10 = v2.zpp_inner;
					if(_this10._immutable) {
						throw new js._Boot.HaxeError("Error: Vec2 is immutable");
					}
					if(_this10._isimmutable != null) {
						_this10._isimmutable();
					}
					if(v2.zpp_inner._inuse) {
						throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
					}
					var inner = v2.zpp_inner;
					v2.zpp_inner.outer = null;
					v2.zpp_inner = null;
					var o = v2;
					o.zpp_pool = null;
					if(ZPP_PubPool.nextVec2 != null) {
						ZPP_PubPool.nextVec2.zpp_pool = o;
					} else {
						ZPP_PubPool.poolVec2 = o;
					}
					ZPP_PubPool.nextVec2 = o;
					o.zpp_disp = true;
					var o1 = inner;
					if(o1.outer != null) {
						o1.outer.zpp_inner = null;
						o1.outer = null;
					}
					o1._isimmutable = null;
					o1._validate = null;
					o1._invalidate = null;
					o1.next = ZPP_Vec2.zpp_pool;
					ZPP_Vec2.zpp_pool = o1;
					if(vite1 == verts) {
						break;
					}
				}
			}
		} else {
			throw new js._Boot.HaxeError("Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>");
		}
		this.skipForward(1);
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv3 = vertices;
			var i = 0;
			while(i < lv3.length) {
				var cur = lv3[i];
				var tmp2;
				if(cur.zpp_inner.weak) {
					if(cur != null && cur.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this11 = cur.zpp_inner;
					if(_this11._immutable) {
						throw new js._Boot.HaxeError("Error: Vec2 is immutable");
					}
					if(_this11._isimmutable != null) {
						_this11._isimmutable();
					}
					if(cur.zpp_inner._inuse) {
						throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
					}
					var inner1 = cur.zpp_inner;
					cur.zpp_inner.outer = null;
					cur.zpp_inner = null;
					var o2 = cur;
					o2.zpp_pool = null;
					if(ZPP_PubPool.nextVec2 != null) {
						ZPP_PubPool.nextVec2.zpp_pool = o2;
					} else {
						ZPP_PubPool.poolVec2 = o2;
					}
					ZPP_PubPool.nextVec2 = o2;
					o2.zpp_disp = true;
					var o3 = inner1;
					if(o3.outer != null) {
						o3.outer.zpp_inner = null;
						o3.outer = null;
					}
					o3._isimmutable = null;
					o3._validate = null;
					o3._invalidate = null;
					o3.next = ZPP_Vec2.zpp_pool;
					ZPP_Vec2.zpp_pool = o3;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					lv3.splice(i,1);
					continue;
				}
				++i;
			}
		} else if(js.Boot.__instanceof(vertices,Vec2List)) {
			var lv4 = vertices;
			if(lv4.zpp_inner._validate != null) {
				lv4.zpp_inner._validate();
			}
			var ins = lv4.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x4 = cur1.elt;
				if(x4.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x4.outer.zpp_inner.weak) {
						var _this12 = x4.outer;
						if(_this12 != null && _this12.zpp_disp) {
							throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this13 = _this12.zpp_inner;
						if(_this13._immutable) {
							throw new js._Boot.HaxeError("Error: Vec2 is immutable");
						}
						if(_this13._isimmutable != null) {
							_this13._isimmutable();
						}
						if(_this12.zpp_inner._inuse) {
							throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
						}
						var inner2 = _this12.zpp_inner;
						_this12.zpp_inner.outer = null;
						_this12.zpp_inner = null;
						var o4 = _this12;
						o4.zpp_pool = null;
						if(ZPP_PubPool.nextVec2 != null) {
							ZPP_PubPool.nextVec2.zpp_pool = o4;
						} else {
							ZPP_PubPool.poolVec2 = o4;
						}
						ZPP_PubPool.nextVec2 = o4;
						o4.zpp_disp = true;
						var o5 = inner2;
						if(o5.outer != null) {
							o5.outer.zpp_inner = null;
							o5.outer = null;
						}
						o5._isimmutable = null;
						o5._validate = null;
						o5._invalidate = null;
						o5.next = ZPP_Vec2.zpp_pool;
						ZPP_Vec2.zpp_pool = o5;
					}
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
};
GeomPoly.__name__ = ["nape","geom","GeomPoly"];
GeomPoly.get = function(vertices) {
	var ret;
	if(ZPP_PubPool.poolGeomPoly == null) {
		ret = new GeomPoly();
	} else {
		ret = ZPP_PubPool.poolGeomPoly;
		ZPP_PubPool.poolGeomPoly = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextGeomPoly) {
			ZPP_PubPool.nextGeomPoly = null;
		}
	}
	if(vertices != null) {
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				if(vite == null) {
					throw new js._Boot.HaxeError("Error: Array<Vec2> contains null objects");
				}
				if(!js.Boot.__instanceof(vite,Vec2)) {
					throw new js._Boot.HaxeError("Error: Array<Vec2> contains non Vec2 objects");
				}
				var v = vite;
				if(v != null && v.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				if(v != null && v.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = v.zpp_inner;
				if(_this._validate != null) {
					_this._validate();
				}
				var x = v.zpp_inner.x;
				if(v != null && v.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this1 = v.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				var y = v.zpp_inner.y;
				var ret1;
				if(ZPP_GeomVert.zpp_pool == null) {
					ret1 = new ZPP_GeomVert();
				} else {
					ret1 = ZPP_GeomVert.zpp_pool;
					ZPP_GeomVert.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.forced = false;
				ret1.x = x;
				ret1.y = y;
				var obj = ret1;
				if(ret.zpp_inner.vertices == null) {
					ret.zpp_inner.vertices = obj.prev = obj.next = obj;
				} else {
					obj.prev = ret.zpp_inner.vertices;
					obj.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj;
					ret.zpp_inner.vertices.next = obj;
				}
				ret.zpp_inner.vertices = obj;
			}
		} else if(js.Boot.__instanceof(vertices,Vec2List)) {
			var lv1 = vertices;
			var _g1 = lv1.iterator();
			while(true) {
				_g1.zpp_inner.zpp_inner.valmod();
				var length = _g1.zpp_inner.zpp_gl();
				_g1.zpp_critical = true;
				var tmp;
				if(_g1.zpp_i < length) {
					tmp = true;
				} else {
					_g1.zpp_next = Vec2Iterator.zpp_pool;
					Vec2Iterator.zpp_pool = _g1;
					_g1.zpp_inner = null;
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				_g1.zpp_critical = false;
				var v1 = _g1.zpp_inner.at(_g1.zpp_i++);
				if(v1 == null) {
					throw new js._Boot.HaxeError("Error: Vec2List contains null objects");
				}
				if(v1 != null && v1.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				if(v1 != null && v1.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = v1.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				var x1 = v1.zpp_inner.x;
				if(v1 != null && v1.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this3 = v1.zpp_inner;
				if(_this3._validate != null) {
					_this3._validate();
				}
				var y1 = v1.zpp_inner.y;
				var ret2;
				if(ZPP_GeomVert.zpp_pool == null) {
					ret2 = new ZPP_GeomVert();
				} else {
					ret2 = ZPP_GeomVert.zpp_pool;
					ZPP_GeomVert.zpp_pool = ret2.next;
					ret2.next = null;
				}
				ret2.forced = false;
				ret2.x = x1;
				ret2.y = y1;
				var obj1 = ret2;
				if(ret.zpp_inner.vertices == null) {
					ret.zpp_inner.vertices = obj1.prev = obj1.next = obj1;
				} else {
					obj1.prev = ret.zpp_inner.vertices;
					obj1.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj1;
					ret.zpp_inner.vertices.next = obj1;
				}
				ret.zpp_inner.vertices = obj1;
			}
		} else if(js.Boot.__instanceof(vertices,GeomPoly)) {
			var lv2 = vertices;
			if(lv2 != null && lv2.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
			}
			var verts = lv2.zpp_inner.vertices;
			if(verts != null) {
				var vite1 = verts;
				while(true) {
					var x2 = vite1.x;
					var y2 = vite1.y;
					if(x2 != x2 || y2 != y2) {
						throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
					}
					var ret3;
					if(ZPP_PubPool.poolVec2 == null) {
						ret3 = new Vec2();
					} else {
						ret3 = ZPP_PubPool.poolVec2;
						ZPP_PubPool.poolVec2 = ret3.zpp_pool;
						ret3.zpp_pool = null;
						ret3.zpp_disp = false;
						if(ret3 == ZPP_PubPool.nextVec2) {
							ZPP_PubPool.nextVec2 = null;
						}
					}
					if(ret3.zpp_inner == null) {
						var ret4;
						if(ZPP_Vec2.zpp_pool == null) {
							ret4 = new ZPP_Vec2();
						} else {
							ret4 = ZPP_Vec2.zpp_pool;
							ZPP_Vec2.zpp_pool = ret4.next;
							ret4.next = null;
						}
						ret4.weak = false;
						ret4._immutable = false;
						ret4.x = x2;
						ret4.y = y2;
						ret3.zpp_inner = ret4;
						ret3.zpp_inner.outer = ret3;
					} else {
						if(ret3 != null && ret3.zpp_disp) {
							throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this4 = ret3.zpp_inner;
						if(_this4._immutable) {
							throw new js._Boot.HaxeError("Error: Vec2 is immutable");
						}
						if(_this4._isimmutable != null) {
							_this4._isimmutable();
						}
						if(x2 != x2 || y2 != y2) {
							throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
						}
						var tmp1;
						if(ret3 != null && ret3.zpp_disp) {
							throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this5 = ret3.zpp_inner;
						if(_this5._validate != null) {
							_this5._validate();
						}
						if(ret3.zpp_inner.x == x2) {
							if(ret3 != null && ret3.zpp_disp) {
								throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
							}
							var _this6 = ret3.zpp_inner;
							if(_this6._validate != null) {
								_this6._validate();
							}
							tmp1 = ret3.zpp_inner.y == y2;
						} else {
							tmp1 = false;
						}
						if(!tmp1) {
							ret3.zpp_inner.x = x2;
							ret3.zpp_inner.y = y2;
							var _this7 = ret3.zpp_inner;
							if(_this7._invalidate != null) {
								_this7._invalidate(_this7);
							}
						}
					}
					ret3.zpp_inner.weak = false;
					var v2 = ret3;
					vite1 = vite1.next;
					if(v2 != null && v2.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this8 = v2.zpp_inner;
					if(_this8._validate != null) {
						_this8._validate();
					}
					var x3 = v2.zpp_inner.x;
					if(v2 != null && v2.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this9 = v2.zpp_inner;
					if(_this9._validate != null) {
						_this9._validate();
					}
					var y3 = v2.zpp_inner.y;
					var ret5;
					if(ZPP_GeomVert.zpp_pool == null) {
						ret5 = new ZPP_GeomVert();
					} else {
						ret5 = ZPP_GeomVert.zpp_pool;
						ZPP_GeomVert.zpp_pool = ret5.next;
						ret5.next = null;
					}
					ret5.forced = false;
					ret5.x = x3;
					ret5.y = y3;
					var obj2 = ret5;
					if(ret.zpp_inner.vertices == null) {
						ret.zpp_inner.vertices = obj2.prev = obj2.next = obj2;
					} else {
						obj2.prev = ret.zpp_inner.vertices;
						obj2.next = ret.zpp_inner.vertices.next;
						ret.zpp_inner.vertices.next.prev = obj2;
						ret.zpp_inner.vertices.next = obj2;
					}
					ret.zpp_inner.vertices = obj2;
					if(v2 != null && v2.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this10 = v2.zpp_inner;
					if(_this10._immutable) {
						throw new js._Boot.HaxeError("Error: Vec2 is immutable");
					}
					if(_this10._isimmutable != null) {
						_this10._isimmutable();
					}
					if(v2.zpp_inner._inuse) {
						throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
					}
					var inner = v2.zpp_inner;
					v2.zpp_inner.outer = null;
					v2.zpp_inner = null;
					var o = v2;
					o.zpp_pool = null;
					if(ZPP_PubPool.nextVec2 != null) {
						ZPP_PubPool.nextVec2.zpp_pool = o;
					} else {
						ZPP_PubPool.poolVec2 = o;
					}
					ZPP_PubPool.nextVec2 = o;
					o.zpp_disp = true;
					var o1 = inner;
					if(o1.outer != null) {
						o1.outer.zpp_inner = null;
						o1.outer = null;
					}
					o1._isimmutable = null;
					o1._validate = null;
					o1._invalidate = null;
					o1.next = ZPP_Vec2.zpp_pool;
					ZPP_Vec2.zpp_pool = o1;
					if(!(vite1 != verts)) {
						break;
					}
				}
			}
		} else {
			throw new js._Boot.HaxeError("Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>");
		}
		ret.skipForward(1);
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv3 = vertices;
			var i = 0;
			while(i < lv3.length) {
				var cur = lv3[i];
				var tmp2;
				if(cur.zpp_inner.weak) {
					if(cur != null && cur.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this11 = cur.zpp_inner;
					if(_this11._immutable) {
						throw new js._Boot.HaxeError("Error: Vec2 is immutable");
					}
					if(_this11._isimmutable != null) {
						_this11._isimmutable();
					}
					if(cur.zpp_inner._inuse) {
						throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
					}
					var inner1 = cur.zpp_inner;
					cur.zpp_inner.outer = null;
					cur.zpp_inner = null;
					var o2 = cur;
					o2.zpp_pool = null;
					if(ZPP_PubPool.nextVec2 != null) {
						ZPP_PubPool.nextVec2.zpp_pool = o2;
					} else {
						ZPP_PubPool.poolVec2 = o2;
					}
					ZPP_PubPool.nextVec2 = o2;
					o2.zpp_disp = true;
					var o3 = inner1;
					if(o3.outer != null) {
						o3.outer.zpp_inner = null;
						o3.outer = null;
					}
					o3._isimmutable = null;
					o3._validate = null;
					o3._invalidate = null;
					o3.next = ZPP_Vec2.zpp_pool;
					ZPP_Vec2.zpp_pool = o3;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					lv3.splice(i,1);
					continue;
				}
				++i;
			}
		} else if(js.Boot.__instanceof(vertices,Vec2List)) {
			var lv4 = vertices;
			if(lv4.zpp_inner._validate != null) {
				lv4.zpp_inner._validate();
			}
			var ins = lv4.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.head;
			while(cur1 != null) {
				var x4 = cur1.elt;
				if(x4.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x4.outer.zpp_inner.weak) {
						var _this12 = x4.outer;
						if(_this12 != null && _this12.zpp_disp) {
							throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this13 = _this12.zpp_inner;
						if(_this13._immutable) {
							throw new js._Boot.HaxeError("Error: Vec2 is immutable");
						}
						if(_this13._isimmutable != null) {
							_this13._isimmutable();
						}
						if(_this12.zpp_inner._inuse) {
							throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
						}
						var inner2 = _this12.zpp_inner;
						_this12.zpp_inner.outer = null;
						_this12.zpp_inner = null;
						var o4 = _this12;
						o4.zpp_pool = null;
						if(ZPP_PubPool.nextVec2 != null) {
							ZPP_PubPool.nextVec2.zpp_pool = o4;
						} else {
							ZPP_PubPool.poolVec2 = o4;
						}
						ZPP_PubPool.nextVec2 = o4;
						o4.zpp_disp = true;
						var o5 = inner2;
						if(o5.outer != null) {
							o5.outer.zpp_inner = null;
							o5.outer = null;
						}
						o5._isimmutable = null;
						o5._validate = null;
						o5._invalidate = null;
						o5.next = ZPP_Vec2.zpp_pool;
						ZPP_Vec2.zpp_pool = o5;
					}
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
	return ret;
};
GeomPoly.prototype.zpp_pool = null;
GeomPoly.prototype.zpp_disp = null;
GeomPoly.prototype.zpp_inner = null;
GeomPoly.prototype.empty = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	return this.zpp_inner.vertices == null;
};
GeomPoly.prototype.size = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	var ret = 0;
	var F = this.zpp_inner.vertices;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		while(true) {
			++ret;
			nite = nite.next;
			if(!(nite != L)) {
				break;
			}
		}
	}
	return ret;
};
GeomPoly.prototype.iterator = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	return ZPP_GeomVertexIterator.get(this.zpp_inner.vertices,true);
};
GeomPoly.prototype.forwardIterator = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	return ZPP_GeomVertexIterator.get(this.zpp_inner.vertices,true);
};
GeomPoly.prototype.backwardsIterator = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	return ZPP_GeomVertexIterator.get(this.zpp_inner.vertices,false);
};
GeomPoly.prototype.current = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.vertices == null) {
		throw new js._Boot.HaxeError("Error: GeomPoly is empty");
	}
	var _this = this.zpp_inner.vertices;
	if(_this.wrap == null) {
		var x = _this.x;
		var y = _this.y;
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(ZPP_PubPool.poolVec2 == null) {
			ret = new Vec2();
		} else {
			ret = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(ZPP_Vec2.zpp_pool == null) {
				ret1 = new ZPP_Vec2();
			} else {
				ret1 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this1._isimmutable != null) {
				_this1._isimmutable();
			}
			if(x != x || y != y) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this3 = ret.zpp_inner;
				if(_this3._validate != null) {
					_this3._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this4 = ret.zpp_inner;
				if(_this4._invalidate != null) {
					_this4._invalidate(_this4);
				}
			}
		}
		ret.zpp_inner.weak = false;
		_this.wrap = ret;
		_this.wrap.zpp_inner._inuse = true;
		_this.wrap.zpp_inner._invalidate = $bind(_this,_this.modwrap);
		_this.wrap.zpp_inner._validate = $bind(_this,_this.getwrap);
	}
	return _this.wrap;
};
GeomPoly.prototype.push = function(vertex) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(vertex != null && vertex.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(vertex == null) {
		throw new js._Boot.HaxeError("Error: Cannot push null vertex");
	}
	if(vertex != null && vertex.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = vertex.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var x = vertex.zpp_inner.x;
	if(vertex != null && vertex.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = vertex.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var y = vertex.zpp_inner.y;
	var ret;
	if(ZPP_GeomVert.zpp_pool == null) {
		ret = new ZPP_GeomVert();
	} else {
		ret = ZPP_GeomVert.zpp_pool;
		ZPP_GeomVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.forced = false;
	ret.x = x;
	ret.y = y;
	var obj = ret;
	if(this.zpp_inner.vertices == null) {
		this.zpp_inner.vertices = obj.prev = obj.next = obj;
	} else {
		obj.prev = this.zpp_inner.vertices;
		obj.next = this.zpp_inner.vertices.next;
		this.zpp_inner.vertices.next.prev = obj;
		this.zpp_inner.vertices.next = obj;
	}
	this.zpp_inner.vertices = obj;
	if(vertex.zpp_inner.weak) {
		if(vertex != null && vertex.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this2 = vertex.zpp_inner;
		if(_this2._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this2._isimmutable != null) {
			_this2._isimmutable();
		}
		if(vertex.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = vertex.zpp_inner;
		vertex.zpp_inner.outer = null;
		vertex.zpp_inner = null;
		vertex.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = vertex;
		} else {
			ZPP_PubPool.poolVec2 = vertex;
		}
		ZPP_PubPool.nextVec2 = vertex;
		vertex.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return this;
};
GeomPoly.prototype.pop = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.vertices == null) {
		throw new js._Boot.HaxeError("Error: Cannot pop from empty polygon");
	}
	var retv = this.zpp_inner.vertices;
	var tmp;
	if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
		this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
		tmp = null;
	} else {
		var retnodes = this.zpp_inner.vertices.prev;
		this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
		this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
		this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
		this.zpp_inner.vertices = null;
		tmp = retnodes;
	}
	this.zpp_inner.vertices = tmp;
	if(retv.wrap != null) {
		retv.wrap.zpp_inner._inuse = false;
		var _this = retv.wrap;
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this1._isimmutable != null) {
			_this1._isimmutable();
		}
		if(_this.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = _this.zpp_inner;
		_this.zpp_inner.outer = null;
		_this.zpp_inner = null;
		_this.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = _this;
		} else {
			ZPP_PubPool.poolVec2 = _this;
		}
		ZPP_PubPool.nextVec2 = _this;
		_this.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
		retv.wrap = null;
	}
	retv.prev = retv.next = null;
	retv.next = ZPP_GeomVert.zpp_pool;
	ZPP_GeomVert.zpp_pool = retv;
	return this;
};
GeomPoly.prototype.unshift = function(vertex) {
	if(vertex != null && vertex.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(vertex == null) {
		throw new js._Boot.HaxeError("Error: Cannot unshift null vertex");
	}
	if(vertex != null && vertex.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = vertex.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var x = vertex.zpp_inner.x;
	if(vertex != null && vertex.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = vertex.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var y = vertex.zpp_inner.y;
	var ret;
	if(ZPP_GeomVert.zpp_pool == null) {
		ret = new ZPP_GeomVert();
	} else {
		ret = ZPP_GeomVert.zpp_pool;
		ZPP_GeomVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.forced = false;
	ret.x = x;
	ret.y = y;
	var obj = ret;
	if(this.zpp_inner.vertices == null) {
		this.zpp_inner.vertices = obj.prev = obj.next = obj;
	} else {
		obj.next = this.zpp_inner.vertices;
		obj.prev = this.zpp_inner.vertices.prev;
		this.zpp_inner.vertices.prev.next = obj;
		this.zpp_inner.vertices.prev = obj;
	}
	this.zpp_inner.vertices = obj;
	if(vertex.zpp_inner.weak) {
		if(vertex != null && vertex.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this2 = vertex.zpp_inner;
		if(_this2._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this2._isimmutable != null) {
			_this2._isimmutable();
		}
		if(vertex.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = vertex.zpp_inner;
		vertex.zpp_inner.outer = null;
		vertex.zpp_inner = null;
		vertex.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = vertex;
		} else {
			ZPP_PubPool.poolVec2 = vertex;
		}
		ZPP_PubPool.nextVec2 = vertex;
		vertex.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return this;
};
GeomPoly.prototype.shift = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.vertices == null) {
		throw new js._Boot.HaxeError("Error: Cannot shift from empty polygon");
	}
	var retv = this.zpp_inner.vertices;
	var tmp;
	if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
		this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
		tmp = this.zpp_inner.vertices = null;
	} else {
		var retnodes = this.zpp_inner.vertices.next;
		this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
		this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
		this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
		this.zpp_inner.vertices = null;
		tmp = retnodes;
	}
	this.zpp_inner.vertices = tmp;
	if(retv.wrap != null) {
		retv.wrap.zpp_inner._inuse = false;
		var _this = retv.wrap;
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this1._isimmutable != null) {
			_this1._isimmutable();
		}
		if(_this.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = _this.zpp_inner;
		_this.zpp_inner.outer = null;
		_this.zpp_inner = null;
		_this.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = _this;
		} else {
			ZPP_PubPool.poolVec2 = _this;
		}
		ZPP_PubPool.nextVec2 = _this;
		_this.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
		retv.wrap = null;
	}
	retv.prev = retv.next = null;
	retv.next = ZPP_GeomVert.zpp_pool;
	ZPP_GeomVert.zpp_pool = retv;
	return this;
};
GeomPoly.prototype.skipForward = function(times) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.vertices != null) {
		if(times > 0) {
			while(times-- > 0) this.zpp_inner.vertices = this.zpp_inner.vertices.next;
		} else if(times < 0) {
			while(times++ < 0) this.zpp_inner.vertices = this.zpp_inner.vertices.prev;
		}
	}
	return this;
};
GeomPoly.prototype.skipBackwards = function(times) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	return this.skipForward(-times);
};
GeomPoly.prototype.erase = function(count) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	while(count != 0 && this.zpp_inner.vertices != null) {
		var retv = this.zpp_inner.vertices;
		if(count > 0) {
			var tmp;
			if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
				this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
				tmp = this.zpp_inner.vertices = null;
			} else {
				var retnodes = this.zpp_inner.vertices.next;
				this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
				this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
				this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
				this.zpp_inner.vertices = null;
				tmp = retnodes;
			}
			this.zpp_inner.vertices = tmp;
			--count;
		} else if(count < 0) {
			var tmp1;
			if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
				this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
				tmp1 = null;
			} else {
				var retnodes1 = this.zpp_inner.vertices.prev;
				this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
				this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
				this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
				this.zpp_inner.vertices = null;
				tmp1 = retnodes1;
			}
			this.zpp_inner.vertices = tmp1;
			++count;
		}
		if(retv.wrap != null) {
			retv.wrap.zpp_inner._inuse = false;
			var _this = retv.wrap;
			if(_this != null && _this.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this1._isimmutable != null) {
				_this1._isimmutable();
			}
			if(_this.zpp_inner._inuse) {
				throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
			}
			var inner = _this.zpp_inner;
			_this.zpp_inner.outer = null;
			_this.zpp_inner = null;
			_this.zpp_pool = null;
			if(ZPP_PubPool.nextVec2 != null) {
				ZPP_PubPool.nextVec2.zpp_pool = _this;
			} else {
				ZPP_PubPool.poolVec2 = _this;
			}
			ZPP_PubPool.nextVec2 = _this;
			_this.zpp_disp = true;
			if(inner.outer != null) {
				inner.outer.zpp_inner = null;
				inner.outer = null;
			}
			inner._isimmutable = null;
			inner._validate = null;
			inner._invalidate = null;
			inner.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = inner;
			retv.wrap = null;
		}
		retv.prev = retv.next = null;
		retv.next = ZPP_GeomVert.zpp_pool;
		ZPP_GeomVert.zpp_pool = retv;
	}
	return this;
};
GeomPoly.prototype.clear = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	while(this.zpp_inner.vertices != null) {
		var tmp = this.zpp_inner.vertices;
		var tmp1;
		if(this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices) {
			this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
			tmp1 = this.zpp_inner.vertices = null;
		} else {
			var retnodes = this.zpp_inner.vertices.next;
			this.zpp_inner.vertices.prev.next = this.zpp_inner.vertices.next;
			this.zpp_inner.vertices.next.prev = this.zpp_inner.vertices.prev;
			this.zpp_inner.vertices.next = this.zpp_inner.vertices.prev = null;
			this.zpp_inner.vertices = null;
			tmp1 = retnodes;
		}
		this.zpp_inner.vertices = tmp1;
		if(tmp.wrap != null) {
			tmp.wrap.zpp_inner._inuse = false;
			var _this = tmp.wrap;
			if(_this != null && _this.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this1._isimmutable != null) {
				_this1._isimmutable();
			}
			if(_this.zpp_inner._inuse) {
				throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
			}
			var inner = _this.zpp_inner;
			_this.zpp_inner.outer = null;
			_this.zpp_inner = null;
			_this.zpp_pool = null;
			if(ZPP_PubPool.nextVec2 != null) {
				ZPP_PubPool.nextVec2.zpp_pool = _this;
			} else {
				ZPP_PubPool.poolVec2 = _this;
			}
			ZPP_PubPool.nextVec2 = _this;
			_this.zpp_disp = true;
			if(inner.outer != null) {
				inner.outer.zpp_inner = null;
				inner.outer = null;
			}
			inner._isimmutable = null;
			inner._validate = null;
			inner._invalidate = null;
			inner.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = inner;
			tmp.wrap = null;
		}
		tmp.prev = tmp.next = null;
		tmp.next = ZPP_GeomVert.zpp_pool;
		ZPP_GeomVert.zpp_pool = tmp;
	}
	return this;
};
GeomPoly.prototype.copy = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	var ret = GeomPoly.get();
	var F = this.zpp_inner.vertices;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		while(true) {
			var v = nite;
			var x = v.x;
			var y = v.y;
			var ret1;
			if(ZPP_GeomVert.zpp_pool == null) {
				ret1 = new ZPP_GeomVert();
			} else {
				ret1 = ZPP_GeomVert.zpp_pool;
				ZPP_GeomVert.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.forced = false;
			ret1.x = x;
			ret1.y = y;
			var obj = ret1;
			if(ret.zpp_inner.vertices == null) {
				ret.zpp_inner.vertices = obj.prev = obj.next = obj;
			} else {
				obj.prev = ret.zpp_inner.vertices;
				obj.next = ret.zpp_inner.vertices.next;
				ret.zpp_inner.vertices.next.prev = obj;
				ret.zpp_inner.vertices.next = obj;
			}
			ret.zpp_inner.vertices = obj;
			nite = nite.next;
			if(!(nite != L)) {
				break;
			}
		}
	}
	return ret.skipForward(1);
};
GeomPoly.prototype.dispose = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	this.clear();
	var o = this;
	o.zpp_pool = null;
	if(ZPP_PubPool.nextGeomPoly != null) {
		ZPP_PubPool.nextGeomPoly.zpp_pool = o;
	} else {
		ZPP_PubPool.poolGeomPoly = o;
	}
	ZPP_PubPool.nextGeomPoly = o;
	o.zpp_disp = true;
};
GeomPoly.prototype.toString = function() {
	var ret = "GeomPoly[";
	var F = this.zpp_inner.vertices;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		while(true) {
			var v = nite;
			if(v != this.zpp_inner.vertices) {
				ret += ",";
			}
			ret += "{" + v.x + "," + v.y + "}";
			nite = nite.next;
			if(!(nite != L)) {
				break;
			}
		}
	}
	return ret + "]";
};
GeomPoly.prototype.area = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) {
		return 0.0;
	} else {
		var area = 0.0;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			while(true) {
				var v = nite;
				area += v.x * (v.next.y - v.prev.y);
				nite = nite.next;
				if(!(nite != L)) {
					break;
				}
			}
		}
		var ret = area * 0.5;
		if(ret < 0) {
			return -ret;
		} else {
			return ret;
		}
	}
};
GeomPoly.prototype.winding = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) {
		if(ZPP_Flags.Winding_UNDEFINED == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.Winding_UNDEFINED = new Winding();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.Winding_UNDEFINED;
	} else {
		var area = 0.0;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			while(true) {
				var v = nite;
				area += v.x * (v.next.y - v.prev.y);
				nite = nite.next;
				if(!(nite != L)) {
					break;
				}
			}
		}
		var area1 = area * 0.5;
		if(area1 > 0) {
			if(ZPP_Flags.Winding_CLOCKWISE == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.Winding_CLOCKWISE = new Winding();
				ZPP_Flags.internal = false;
			}
			return ZPP_Flags.Winding_CLOCKWISE;
		} else if(area1 == 0) {
			if(ZPP_Flags.Winding_UNDEFINED == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.Winding_UNDEFINED = new Winding();
				ZPP_Flags.internal = false;
			}
			return ZPP_Flags.Winding_UNDEFINED;
		} else {
			if(ZPP_Flags.Winding_ANTICLOCKWISE == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.Winding_ANTICLOCKWISE = new Winding();
				ZPP_Flags.internal = false;
			}
			return ZPP_Flags.Winding_ANTICLOCKWISE;
		}
	}
};
GeomPoly.prototype.contains = function(point) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(point != null && point.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(point == null) {
		throw new js._Boot.HaxeError("Error: GeomPoly::contains point cannot be null");
	}
	if(point != null && point.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = point.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var x = point.zpp_inner.x;
	if(point != null && point.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = point.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var y = point.zpp_inner.y;
	var ret = false;
	var F = this.zpp_inner.vertices;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		while(true) {
			var p = nite;
			var q = p.prev;
			if((p.y < y && q.y >= y || q.y < y && p.y >= y) && (p.x <= x || q.x <= x)) {
				if(p.x + (y - p.y) / (q.y - p.y) * (q.x - p.x) < x) {
					ret = !ret;
				}
			}
			nite = nite.next;
			if(!(nite != L)) {
				break;
			}
		}
	}
	var ret1 = ret;
	if(point.zpp_inner.weak) {
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this2 = point.zpp_inner;
		if(_this2._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this2._isimmutable != null) {
			_this2._isimmutable();
		}
		if(point.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = point.zpp_inner;
		point.zpp_inner.outer = null;
		point.zpp_inner = null;
		point.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = point;
		} else {
			ZPP_PubPool.poolVec2 = point;
		}
		ZPP_PubPool.nextVec2 = point;
		point.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return ret1;
};
GeomPoly.prototype.isClockwise = function() {
	var tmp = this.winding();
	if(ZPP_Flags.Winding_CLOCKWISE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.Winding_CLOCKWISE = new Winding();
		ZPP_Flags.internal = false;
	}
	return tmp == ZPP_Flags.Winding_CLOCKWISE;
};
GeomPoly.prototype.isConvex = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) {
		return true;
	} else {
		var neg = false;
		var pos = false;
		var ret = true;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			while(true) {
				var v = nite;
				var u = v.prev;
				var w = v.next;
				var ax = 0.0;
				var ay = 0.0;
				ax = w.x - v.x;
				ay = w.y - v.y;
				var bx = 0.0;
				var by = 0.0;
				bx = v.x - u.x;
				by = v.y - u.y;
				var dot = by * ax - bx * ay;
				if(dot > 0.0) {
					pos = true;
				} else if(dot < 0.0) {
					neg = true;
				}
				if(pos && neg) {
					ret = false;
					break;
				}
				nite = nite.next;
				if(!(nite != L)) {
					break;
				}
			}
		}
		return ret;
	}
};
GeomPoly.prototype.isSimple = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) {
		return true;
	} else {
		return ZPP_Simple.isSimple(this.zpp_inner.vertices);
	}
};
GeomPoly.prototype.isMonotone = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) {
		return true;
	} else {
		return ZPP_Monotone.isMonotone(this.zpp_inner.vertices);
	}
};
GeomPoly.prototype.isDegenerate = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) {
		return true;
	} else {
		return this.area() < Config.epsilon;
	}
};
GeomPoly.prototype.simplify = function(epsilon) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(epsilon <= 0.0) {
		throw new js._Boot.HaxeError("Error: Epsilon should be > 0 for simplifying a GeomPoly");
	}
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) {
		return this.copy();
	} else {
		var x = ZPP_Simplify.simplify(this.zpp_inner.vertices,epsilon);
		var ret = GeomPoly.get();
		ret.zpp_inner.vertices = x;
		return ret;
	}
};
GeomPoly.prototype.simpleDecomposition = function(output) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) {
		throw new js._Boot.HaxeError("Error: Cannot decompose a degenerate polygon");
	}
	if(ZPP_PartitionedPoly.sharedGVList == null) {
		ZPP_PartitionedPoly.sharedGVList = new ZNPList_ZPP_GeomVert();
	}
	var MPs = ZPP_Simple.decompose(this.zpp_inner.vertices,ZPP_PartitionedPoly.sharedGVList);
	var ret = output == null?new GeomPolyList():output;
	while(MPs.head != null) {
		var MP = MPs.pop_unsafe();
		var x = GeomPoly.get();
		x.zpp_inner.vertices = MP;
		if(ret.zpp_inner.reverse_flag) {
			ret.push(x);
		} else {
			ret.unshift(x);
		}
	}
	return ret;
};
GeomPoly.prototype.monotoneDecomposition = function(output) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) {
		throw new js._Boot.HaxeError("Error: Cannot decompose a degenerate polygon");
	}
	if(ZPP_Monotone.sharedPPoly == null) {
		ZPP_Monotone.sharedPPoly = new ZPP_PartitionedPoly();
	}
	var poly = ZPP_Monotone.decompose(this.zpp_inner.vertices,ZPP_Monotone.sharedPPoly);
	if(ZPP_PartitionedPoly.sharedGVList == null) {
		ZPP_PartitionedPoly.sharedGVList = new ZNPList_ZPP_GeomVert();
	}
	var MPs = poly.extract(ZPP_PartitionedPoly.sharedGVList);
	var ret = output == null?new GeomPolyList():output;
	while(MPs.head != null) {
		var MP = MPs.pop_unsafe();
		var x = GeomPoly.get();
		x.zpp_inner.vertices = MP;
		if(ret.zpp_inner.reverse_flag) {
			ret.push(x);
		} else {
			ret.unshift(x);
		}
	}
	return ret;
};
GeomPoly.prototype.convexDecomposition = function(delaunay,output) {
	if(delaunay == null) {
		delaunay = false;
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) {
		throw new js._Boot.HaxeError("Error: Cannot decompose a degenerate polygon");
	}
	if(ZPP_Monotone.sharedPPoly == null) {
		ZPP_Monotone.sharedPPoly = new ZPP_PartitionedPoly();
	}
	var poly = ZPP_Monotone.decompose(this.zpp_inner.vertices,ZPP_Monotone.sharedPPoly);
	if(ZPP_PartitionedPoly.sharedPPList == null) {
		ZPP_PartitionedPoly.sharedPPList = new ZNPList_ZPP_PartitionedPoly();
	}
	var MPs = poly.extract_partitions(ZPP_PartitionedPoly.sharedPPList);
	var ret = output == null?new GeomPolyList():output;
	while(MPs.head != null) {
		var MP = MPs.pop_unsafe();
		ZPP_Triangular.triangulate(MP);
		if(delaunay) {
			ZPP_Triangular.optimise(MP);
		}
		ZPP_Convex.optimise(MP);
		if(ZPP_PartitionedPoly.sharedGVList == null) {
			ZPP_PartitionedPoly.sharedGVList = new ZNPList_ZPP_GeomVert();
		}
		var MQs = MP.extract(ZPP_PartitionedPoly.sharedGVList);
		MP.next = ZPP_PartitionedPoly.zpp_pool;
		ZPP_PartitionedPoly.zpp_pool = MP;
		while(MQs.head != null) {
			var MQ = MQs.pop_unsafe();
			var x = GeomPoly.get();
			x.zpp_inner.vertices = MQ;
			if(ret.zpp_inner.reverse_flag) {
				ret.push(x);
			} else {
				ret.unshift(x);
			}
		}
	}
	return ret;
};
GeomPoly.prototype.triangularDecomposition = function(delaunay,output) {
	if(delaunay == null) {
		delaunay = false;
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) {
		throw new js._Boot.HaxeError("Error: Cannot decompose a degenerate polygon");
	}
	if(ZPP_Monotone.sharedPPoly == null) {
		ZPP_Monotone.sharedPPoly = new ZPP_PartitionedPoly();
	}
	var poly = ZPP_Monotone.decompose(this.zpp_inner.vertices,ZPP_Monotone.sharedPPoly);
	if(ZPP_PartitionedPoly.sharedPPList == null) {
		ZPP_PartitionedPoly.sharedPPList = new ZNPList_ZPP_PartitionedPoly();
	}
	var MPs = poly.extract_partitions(ZPP_PartitionedPoly.sharedPPList);
	var ret = output == null?new GeomPolyList():output;
	while(MPs.head != null) {
		var MP = MPs.pop_unsafe();
		ZPP_Triangular.triangulate(MP);
		if(delaunay) {
			ZPP_Triangular.optimise(MP);
		}
		if(ZPP_PartitionedPoly.sharedGVList == null) {
			ZPP_PartitionedPoly.sharedGVList = new ZNPList_ZPP_GeomVert();
		}
		var MQs = MP.extract(ZPP_PartitionedPoly.sharedGVList);
		MP.next = ZPP_PartitionedPoly.zpp_pool;
		ZPP_PartitionedPoly.zpp_pool = MP;
		while(MQs.head != null) {
			var MQ = MQs.pop_unsafe();
			var x = GeomPoly.get();
			x.zpp_inner.vertices = MQ;
			if(ret.zpp_inner.reverse_flag) {
				ret.push(x);
			} else {
				ret.unshift(x);
			}
		}
	}
	return ret;
};
GeomPoly.prototype.inflate = function(inflation) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	var ret = GeomPoly.get();
	var tmp = this.winding();
	if(ZPP_Flags.Winding_CLOCKWISE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.Winding_CLOCKWISE = new Winding();
		ZPP_Flags.internal = false;
	}
	if(tmp == ZPP_Flags.Winding_CLOCKWISE) {
		inflation = -inflation;
	}
	var F = this.zpp_inner.vertices;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		while(true) {
			var p = nite;
			var prev = p.prev;
			var next = p.next;
			var ax = 0.0;
			var ay = 0.0;
			var bx = 0.0;
			var by = 0.0;
			ax = p.x - prev.x;
			ay = p.y - prev.y;
			bx = next.x - p.x;
			by = next.y - p.y;
			var apx = 0.0;
			var apy = 0.0;
			var bpx = 0.0;
			var bpy = 0.0;
			apx = ax;
			apy = ay;
			var imag = 1.0 / Math.sqrt(apx * apx + apy * apy);
			apx *= imag;
			apy *= imag;
			var t = apx;
			apx = -apy;
			apy = t;
			var t1 = inflation;
			apx *= t1;
			apy *= t1;
			bpx = bx;
			bpy = by;
			var imag1 = 1.0 / Math.sqrt(bpx * bpx + bpy * bpy);
			bpx *= imag1;
			bpy *= imag1;
			var t2 = bpx;
			bpx = -bpy;
			bpy = t2;
			var t3 = inflation;
			bpx *= t3;
			bpy *= t3;
			var bapx = 0.0;
			var bapy = 0.0;
			bapx = bpx - apx;
			bapy = bpy - apy;
			var num = by * bapx - bx * bapy;
			var t4 = num == 0?0:num / (by * ax - bx * ay);
			var px = 0.0;
			var py = 0.0;
			px = p.x + apx;
			py = p.y + apy;
			var t5 = t4;
			px += ax * t5;
			py += ay * t5;
			if(px != px || py != py) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var ret1;
			if(ZPP_PubPool.poolVec2 == null) {
				ret1 = new Vec2();
			} else {
				ret1 = ZPP_PubPool.poolVec2;
				ZPP_PubPool.poolVec2 = ret1.zpp_pool;
				ret1.zpp_pool = null;
				ret1.zpp_disp = false;
				if(ret1 == ZPP_PubPool.nextVec2) {
					ZPP_PubPool.nextVec2 = null;
				}
			}
			if(ret1.zpp_inner == null) {
				var ret2;
				if(ZPP_Vec2.zpp_pool == null) {
					ret2 = new ZPP_Vec2();
				} else {
					ret2 = ZPP_Vec2.zpp_pool;
					ZPP_Vec2.zpp_pool = ret2.next;
					ret2.next = null;
				}
				ret2.weak = false;
				ret2._immutable = false;
				ret2.x = px;
				ret2.y = py;
				ret1.zpp_inner = ret2;
				ret1.zpp_inner.outer = ret1;
			} else {
				if(ret1 != null && ret1.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this = ret1.zpp_inner;
				if(_this._immutable) {
					throw new js._Boot.HaxeError("Error: Vec2 is immutable");
				}
				if(_this._isimmutable != null) {
					_this._isimmutable();
				}
				if(px != px || py != py) {
					throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
				}
				var tmp1;
				if(ret1 != null && ret1.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this1 = ret1.zpp_inner;
				if(_this1._validate != null) {
					_this1._validate();
				}
				if(ret1.zpp_inner.x == px) {
					if(ret1 != null && ret1.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this2 = ret1.zpp_inner;
					if(_this2._validate != null) {
						_this2._validate();
					}
					tmp1 = ret1.zpp_inner.y == py;
				} else {
					tmp1 = false;
				}
				if(!tmp1) {
					ret1.zpp_inner.x = px;
					ret1.zpp_inner.y = py;
					var _this3 = ret1.zpp_inner;
					if(_this3._invalidate != null) {
						_this3._invalidate(_this3);
					}
				}
			}
			ret1.zpp_inner.weak = false;
			ret.push(ret1);
			nite = nite.next;
			if(!(nite != L)) {
				break;
			}
		}
	}
	return ret.skipForward(1);
};
GeomPoly.prototype.cut = function(start,end,boundedStart,boundedEnd,output) {
	if(boundedEnd == null) {
		boundedEnd = false;
	}
	if(boundedStart == null) {
		boundedStart = false;
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(!(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next?true:ZPP_Simple.isSimple(this.zpp_inner.vertices))) {
		throw new js._Boot.HaxeError("Error: Cut requires a truly simple polygon");
	}
	if(start == null || end == null) {
		throw new js._Boot.HaxeError("Error: Cannot cut with null start/end's");
	}
	if(start != null && start.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(end != null && end.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var ret = ZPP_Cutter.run(this.zpp_inner.vertices,start,end,boundedStart,boundedEnd,output);
	if(start.zpp_inner.weak) {
		if(start != null && start.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = start.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(start.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = start.zpp_inner;
		start.zpp_inner.outer = null;
		start.zpp_inner = null;
		start.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = start;
		} else {
			ZPP_PubPool.poolVec2 = start;
		}
		ZPP_PubPool.nextVec2 = start;
		start.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(end.zpp_inner.weak) {
		if(end != null && end.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = end.zpp_inner;
		if(_this1._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this1._isimmutable != null) {
			_this1._isimmutable();
		}
		if(end.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = end.zpp_inner;
		end.zpp_inner.outer = null;
		end.zpp_inner = null;
		end.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = end;
		} else {
			ZPP_PubPool.poolVec2 = end;
		}
		ZPP_PubPool.nextVec2 = end;
		end.zpp_disp = true;
		if(inner1.outer != null) {
			inner1.outer.zpp_inner = null;
			inner1.outer = null;
		}
		inner1._isimmutable = null;
		inner1._validate = null;
		inner1._invalidate = null;
		inner1.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner1;
	}
	return ret;
};
GeomPoly.prototype.transform = function(matrix) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(matrix == null) {
		throw new js._Boot.HaxeError("Error: Cannot transform by null matrix");
	}
	var F = this.zpp_inner.vertices;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		while(true) {
			var v = nite;
			var t = matrix.zpp_inner.a * v.x + matrix.zpp_inner.b * v.y + matrix.zpp_inner.tx;
			v.y = matrix.zpp_inner.c * v.x + matrix.zpp_inner.d * v.y + matrix.zpp_inner.ty;
			v.x = t;
			nite = nite.next;
			if(!(nite != L)) {
				break;
			}
		}
	}
	return this;
};
GeomPoly.prototype.bounds = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.vertices == null) {
		throw new js._Boot.HaxeError("Error: empty GeomPoly has no defineable bounds");
	}
	var minx = 1e100;
	var miny = 1e100;
	var maxx = -1e+100;
	var maxy = -1e+100;
	var F = this.zpp_inner.vertices;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		while(true) {
			var v = nite;
			if(v.x < minx) {
				minx = v.x;
			}
			if(v.y < miny) {
				miny = v.y;
			}
			if(v.x > maxx) {
				maxx = v.x;
			}
			if(v.y > maxy) {
				maxy = v.y;
			}
			nite = nite.next;
			if(!(nite != L)) {
				break;
			}
		}
	}
	return new AABB(minx,miny,maxx - minx,maxy - miny);
};
GeomPoly.prototype.top = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.vertices == null) {
		throw new js._Boot.HaxeError("Error: empty GeomPoly has no defineable topmost vertex");
	}
	var min = this.zpp_inner.vertices;
	var F = this.zpp_inner.vertices.next;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		while(true) {
			var v = nite;
			if(v.y < min.y) {
				min = v;
			}
			nite = nite.next;
			if(!(nite != L)) {
				break;
			}
		}
	}
	if(min.wrap == null) {
		var x = min.x;
		var y = min.y;
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(ZPP_PubPool.poolVec2 == null) {
			ret = new Vec2();
		} else {
			ret = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(ZPP_Vec2.zpp_pool == null) {
				ret1 = new ZPP_Vec2();
			} else {
				ret1 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		min.wrap = ret;
		min.wrap.zpp_inner._inuse = true;
		min.wrap.zpp_inner._invalidate = $bind(min,min.modwrap);
		min.wrap.zpp_inner._validate = $bind(min,min.getwrap);
	}
	return min.wrap;
};
GeomPoly.prototype.bottom = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.vertices == null) {
		throw new js._Boot.HaxeError("Error: empty GeomPoly has no defineable bottommost vertex");
	}
	var max = this.zpp_inner.vertices;
	var F = this.zpp_inner.vertices.next;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		while(true) {
			var v = nite;
			if(v.y > max.y) {
				max = v;
			}
			nite = nite.next;
			if(!(nite != L)) {
				break;
			}
		}
	}
	if(max.wrap == null) {
		var x = max.x;
		var y = max.y;
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(ZPP_PubPool.poolVec2 == null) {
			ret = new Vec2();
		} else {
			ret = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(ZPP_Vec2.zpp_pool == null) {
				ret1 = new ZPP_Vec2();
			} else {
				ret1 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		max.wrap = ret;
		max.wrap.zpp_inner._inuse = true;
		max.wrap.zpp_inner._invalidate = $bind(max,max.modwrap);
		max.wrap.zpp_inner._validate = $bind(max,max.getwrap);
	}
	return max.wrap;
};
GeomPoly.prototype.left = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.vertices == null) {
		throw new js._Boot.HaxeError("Error: empty GeomPoly has no defineable leftmost vertex");
	}
	var min = this.zpp_inner.vertices;
	var F = this.zpp_inner.vertices.next;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		while(true) {
			var v = nite;
			if(v.x < min.x) {
				min = v;
			}
			nite = nite.next;
			if(!(nite != L)) {
				break;
			}
		}
	}
	if(min.wrap == null) {
		var x = min.x;
		var y = min.y;
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(ZPP_PubPool.poolVec2 == null) {
			ret = new Vec2();
		} else {
			ret = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(ZPP_Vec2.zpp_pool == null) {
				ret1 = new ZPP_Vec2();
			} else {
				ret1 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		min.wrap = ret;
		min.wrap.zpp_inner._inuse = true;
		min.wrap.zpp_inner._invalidate = $bind(min,min.modwrap);
		min.wrap.zpp_inner._validate = $bind(min,min.getwrap);
	}
	return min.wrap;
};
GeomPoly.prototype.right = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.vertices == null) {
		throw new js._Boot.HaxeError("Error: empty GeomPoly has no defineable rightmmost vertex");
	}
	var max = this.zpp_inner.vertices;
	var F = this.zpp_inner.vertices.next;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		while(true) {
			var v = nite;
			if(v.x > max.x) {
				max = v;
			}
			nite = nite.next;
			if(!(nite != L)) {
				break;
			}
		}
	}
	if(max.wrap == null) {
		var x = max.x;
		var y = max.y;
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(ZPP_PubPool.poolVec2 == null) {
			ret = new Vec2();
		} else {
			ret = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(ZPP_Vec2.zpp_pool == null) {
				ret1 = new ZPP_Vec2();
			} else {
				ret1 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		max.wrap = ret;
		max.wrap.zpp_inner._inuse = true;
		max.wrap.zpp_inner._invalidate = $bind(max,max.modwrap);
		max.wrap.zpp_inner._validate = $bind(max,max.getwrap);
	}
	return max.wrap;
};
GeomPoly.prototype.__class__ = GeomPoly;
var GeomPolyIterator = nape.geom.GeomPolyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!ZPP_GeomPolyList.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "GeomPoly" + "Iterator derp!");
	}
};
GeomPolyIterator.__name__ = ["nape","geom","GeomPolyIterator"];
GeomPolyIterator.get = function(list) {
	var ret;
	if(GeomPolyIterator.zpp_pool == null) {
		ZPP_GeomPolyList.internal = true;
		var ret1 = new GeomPolyIterator();
		ZPP_GeomPolyList.internal = false;
		ret = ret1;
	} else {
		var r = GeomPolyIterator.zpp_pool;
		GeomPolyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
GeomPolyIterator.prototype.zpp_inner = null;
GeomPolyIterator.prototype.zpp_i = null;
GeomPolyIterator.prototype.zpp_critical = null;
GeomPolyIterator.prototype.zpp_next = null;
GeomPolyIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var _this = this.zpp_inner;
	_this.zpp_inner.valmod();
	if(_this.zpp_inner.zip_length) {
		_this.zpp_inner.zip_length = false;
		_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
	}
	var length = _this.zpp_inner.user_length;
	this.zpp_critical = true;
	if(this.zpp_i < length) {
		return true;
	} else {
		this.zpp_next = GeomPolyIterator.zpp_pool;
		GeomPolyIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
GeomPolyIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
GeomPolyIterator.prototype.__class__ = GeomPolyIterator;
var GeomPolyList = nape.geom.GeomPolyList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new ZPP_GeomPolyList();
	this.zpp_inner.outer = this;
};
GeomPolyList.__name__ = ["nape","geom","GeomPolyList"];
GeomPolyList.fromArray = function(array) {
	if(array == null) {
		throw new js._Boot.HaxeError("Error: Cannot convert null Array to Nape list");
	}
	var ret = new GeomPolyList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
GeomPolyList.prototype.zpp_inner = null;
GeomPolyList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
GeomPolyList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
GeomPolyList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	var tmp;
	if(index >= 0) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		tmp = index >= this.zpp_inner.user_length;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Index out of bounds");
	}
	if(this.zpp_inner.reverse_flag) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		index = this.zpp_inner.user_length - 1 - index;
	}
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else {
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	return this.zpp_inner.at_ite.elt.outer;
};
GeomPolyList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.inner.add(obj.zpp_inner);
		} else {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
GeomPolyList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else {
			this.zpp_inner.inner.add(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
GeomPolyList.prototype.pop = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	}
	this.zpp_inner.invalidate();
	return ret.outer;
};
GeomPolyList.prototype.shift = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	}
	this.zpp_inner.invalidate();
	return ret.outer;
};
GeomPolyList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) {
		return this.push(obj);
	} else {
		return this.unshift(obj);
	}
};
GeomPolyList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(obj);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.remove(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
	}
	return ret;
};
GeomPolyList.prototype.clear = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "GeomPoly" + "List is immutable");
	}
	if(this.zpp_inner.reverse_flag) {
		while(this.zpp_inner.inner.head != null) this.pop();
	} else {
		while(this.zpp_inner.inner.head != null) this.shift();
	}
};
GeomPolyList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
GeomPolyList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return GeomPolyIterator.get(this);
};
GeomPolyList.prototype.copy = function(deep) {
	if(deep == null) {
		deep = false;
	}
	var ret = new GeomPolyList();
	this.zpp_inner.valmod();
	var _g = GeomPolyIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = GeomPolyIterator.zpp_pool;
			GeomPolyIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(deep) {
			throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " is not a copyable type");
		}
		ret.push(i);
	}
	return ret;
};
GeomPolyList.prototype.merge = function(xs) {
	if(xs == null) {
		throw new js._Boot.HaxeError("Error: Cannot merge with null list");
	}
	xs.zpp_inner.valmod();
	var _g = GeomPolyIterator.get(xs);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = GeomPolyIterator.zpp_pool;
			GeomPolyIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) {
				this.push(x);
			} else {
				this.unshift(x);
			}
		}
	}
};
GeomPolyList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	this.zpp_inner.valmod();
	var _g = GeomPolyIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = GeomPolyIterator.zpp_pool;
			GeomPolyIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) {
			ret += ",";
		}
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
};
GeomPolyList.prototype.foreach = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot execute null on list elements");
	}
	this.zpp_inner.valmod();
	var it = GeomPolyIterator.get(this);
	while(true) {
		it.zpp_inner.zpp_inner.valmod();
		var _this = it.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		it.zpp_critical = true;
		var tmp;
		if(it.zpp_i < length) {
			tmp = true;
		} else {
			it.zpp_next = GeomPolyIterator.zpp_pool;
			GeomPolyIterator.zpp_pool = it;
			it.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		try {
			it.zpp_critical = false;
			lambda(it.zpp_inner.at(it.zpp_i++));
		} catch( e ) {
			it.zpp_next = GeomPolyIterator.zpp_pool;
			GeomPolyIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
	}
	return this;
};
GeomPolyList.prototype.filter = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot select elements of list with null");
	}
	var i = 0;
	while(true) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(!(i < this.zpp_inner.user_length)) {
			break;
		}
		var x = this.at(i);
		try {
			if(lambda(x)) {
				++i;
			} else {
				this.remove(x);
			}
		} catch( e ) {
			break;
		}
	}
	return this;
};
GeomPolyList.prototype.__class__ = GeomPolyList;
var GeomVertexIterator = nape.geom.GeomVertexIterator = function() {
	if(!ZPP_GeomVertexIterator.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate GeomVertexIterator");
	}
};
GeomVertexIterator.__name__ = ["nape","geom","GeomVertexIterator"];
GeomVertexIterator.prototype.zpp_inner = null;
GeomVertexIterator.prototype.hasNext = function() {
	if(this.zpp_inner == null) {
		throw new js._Boot.HaxeError("Error: Iterator has been disposed");
	}
	var ret = this.zpp_inner.ptr != this.zpp_inner.start || this.zpp_inner.first;
	this.zpp_inner.first = false;
	if(!ret) {
		var o = this.zpp_inner;
		o.outer.zpp_inner = null;
		o.ptr = o.start = null;
		o.next = ZPP_GeomVertexIterator.zpp_pool;
		ZPP_GeomVertexIterator.zpp_pool = o;
	}
	return ret;
};
GeomVertexIterator.prototype.next = function() {
	if(this.zpp_inner == null) {
		throw new js._Boot.HaxeError("Error: Iterator has been disposed");
	}
	var _this = this.zpp_inner.ptr;
	if(_this.wrap == null) {
		var x = _this.x;
		var y = _this.y;
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(ZPP_PubPool.poolVec2 == null) {
			ret = new Vec2();
		} else {
			ret = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(ZPP_Vec2.zpp_pool == null) {
				ret1 = new ZPP_Vec2();
			} else {
				ret1 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this1._isimmutable != null) {
				_this1._isimmutable();
			}
			if(x != x || y != y) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this3 = ret.zpp_inner;
				if(_this3._validate != null) {
					_this3._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this4 = ret.zpp_inner;
				if(_this4._invalidate != null) {
					_this4._invalidate(_this4);
				}
			}
		}
		ret.zpp_inner.weak = false;
		_this.wrap = ret;
		_this.wrap.zpp_inner._inuse = true;
		_this.wrap.zpp_inner._invalidate = $bind(_this,_this.modwrap);
		_this.wrap.zpp_inner._validate = $bind(_this,_this.getwrap);
	}
	var ret2 = _this.wrap;
	this.zpp_inner.ptr = this.zpp_inner.forward?this.zpp_inner.ptr.next:this.zpp_inner.ptr.prev;
	return ret2;
};
GeomVertexIterator.prototype.__class__ = GeomVertexIterator;
var MarchingSquares = nape.geom.MarchingSquares = function() { };
MarchingSquares.__name__ = ["nape","geom","MarchingSquares"];
MarchingSquares.run = function(iso,bounds,cellsize,quality,subgrid,combine,output) {
	if(combine == null) {
		combine = true;
	}
	if(quality == null) {
		quality = 2;
	}
	if(cellsize != null && cellsize.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(subgrid != null && subgrid.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(iso == null) {
		throw new js._Boot.HaxeError("Error: MarchingSquares requires an iso function to operate");
	}
	if(bounds == null) {
		throw new js._Boot.HaxeError("Error: MarchingSquares requires an AABB to define bounds of surface extraction");
	}
	if(cellsize == null) {
		throw new js._Boot.HaxeError("Error: MarchingSquares requires a Vec2 to define cell size for surface extraction");
	}
	var tmp;
	if(cellsize != null && cellsize.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = cellsize.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	if(!(cellsize.zpp_inner.x <= 0)) {
		if(cellsize != null && cellsize.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = cellsize.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		tmp = cellsize.zpp_inner.y <= 0;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: MarchingSquares cannot operate with non-positive cell dimensions");
	}
	if(quality < 0) {
		throw new js._Boot.HaxeError("Error: MarchingSquares cannot use a negative quality value for interpolation");
	}
	var tmp1;
	if(subgrid != null) {
		if(subgrid != null && subgrid.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this2 = subgrid.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		if(!(subgrid.zpp_inner.x <= 0)) {
			if(subgrid != null && subgrid.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this3 = subgrid.zpp_inner;
			if(_this3._validate != null) {
				_this3._validate();
			}
			tmp1 = subgrid.zpp_inner.y <= 0;
		} else {
			tmp1 = true;
		}
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		throw new js._Boot.HaxeError("Error: MarchingSquares cannot with non-positive sub-grid dimensions");
	}
	var ret = output != null?output:new GeomPolyList();
	if(subgrid == null) {
		var _this4 = bounds.zpp_inner;
		if(_this4._validate != null) {
			_this4._validate();
		}
		var tmp2 = bounds.zpp_inner.minx;
		var _this5 = bounds.zpp_inner;
		if(_this5._validate != null) {
			_this5._validate();
		}
		var tmp3 = bounds.zpp_inner.miny;
		var _this6 = bounds.zpp_inner.getmax();
		if(_this6 != null && _this6.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this7 = _this6.zpp_inner;
		if(_this7._validate != null) {
			_this7._validate();
		}
		var tmp4 = _this6.zpp_inner.x;
		var _this8 = bounds.zpp_inner.getmax();
		if(_this8 != null && _this8.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this9 = _this8.zpp_inner;
		if(_this9._validate != null) {
			_this9._validate();
		}
		ZPP_MarchingSquares.run(iso,tmp2,tmp3,tmp4,_this8.zpp_inner.y,cellsize,quality,combine,ret);
	} else {
		var _this10 = bounds.zpp_inner;
		if(_this10._validate != null) {
			_this10._validate();
		}
		var _this11 = bounds.zpp_inner;
		var tmp5 = _this11.maxx - _this11.minx;
		if(subgrid != null && subgrid.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this12 = subgrid.zpp_inner;
		if(_this12._validate != null) {
			_this12._validate();
		}
		var xp = tmp5 / subgrid.zpp_inner.x;
		var _this13 = bounds.zpp_inner;
		if(_this13._validate != null) {
			_this13._validate();
		}
		var _this14 = bounds.zpp_inner;
		var tmp6 = _this14.maxy - _this14.miny;
		if(subgrid != null && subgrid.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this15 = subgrid.zpp_inner;
		if(_this15._validate != null) {
			_this15._validate();
		}
		var yp = tmp6 / subgrid.zpp_inner.y;
		var xn = xp | 0;
		var yn = yp | 0;
		if(xn != xp) {
			++xn;
		}
		if(yn != yp) {
			++yn;
		}
		var _g1 = 0;
		var _g = xn;
		while(_g1 < _g) {
			var x = _g1++;
			var _this16 = bounds.zpp_inner;
			if(_this16._validate != null) {
				_this16._validate();
			}
			var tmp7 = bounds.zpp_inner.minx;
			if(subgrid != null && subgrid.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this17 = subgrid.zpp_inner;
			if(_this17._validate != null) {
				_this17._validate();
			}
			var x0 = tmp7 + subgrid.zpp_inner.x * x;
			var x1;
			if(x == xn - 1) {
				var _this18 = bounds.zpp_inner.getmax();
				if(_this18 != null && _this18.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this19 = _this18.zpp_inner;
				if(_this19._validate != null) {
					_this19._validate();
				}
				x1 = _this18.zpp_inner.x;
			} else {
				if(subgrid != null && subgrid.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this20 = subgrid.zpp_inner;
				if(_this20._validate != null) {
					_this20._validate();
				}
				x1 = x0 + subgrid.zpp_inner.x;
			}
			var _g3 = 0;
			var _g2 = yn;
			while(_g3 < _g2) {
				var y = _g3++;
				var _this21 = bounds.zpp_inner;
				if(_this21._validate != null) {
					_this21._validate();
				}
				var tmp8 = bounds.zpp_inner.miny;
				if(subgrid != null && subgrid.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this22 = subgrid.zpp_inner;
				if(_this22._validate != null) {
					_this22._validate();
				}
				var y0 = tmp8 + subgrid.zpp_inner.y * y;
				var y1;
				if(y == yn - 1) {
					var _this23 = bounds.zpp_inner.getmax();
					if(_this23 != null && _this23.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this24 = _this23.zpp_inner;
					if(_this24._validate != null) {
						_this24._validate();
					}
					y1 = _this23.zpp_inner.y;
				} else {
					if(subgrid != null && subgrid.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this25 = subgrid.zpp_inner;
					if(_this25._validate != null) {
						_this25._validate();
					}
					y1 = y0 + subgrid.zpp_inner.y;
				}
				ZPP_MarchingSquares.run(iso,x0,y0,x1,y1,cellsize,quality,combine,ret);
			}
		}
	}
	if(cellsize.zpp_inner.weak) {
		if(cellsize != null && cellsize.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this26 = cellsize.zpp_inner;
		if(_this26._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this26._isimmutable != null) {
			_this26._isimmutable();
		}
		if(cellsize.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = cellsize.zpp_inner;
		cellsize.zpp_inner.outer = null;
		cellsize.zpp_inner = null;
		cellsize.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = cellsize;
		} else {
			ZPP_PubPool.poolVec2 = cellsize;
		}
		ZPP_PubPool.nextVec2 = cellsize;
		cellsize.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(subgrid != null) {
		if(subgrid.zpp_inner.weak) {
			if(subgrid != null && subgrid.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this27 = subgrid.zpp_inner;
			if(_this27._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this27._isimmutable != null) {
				_this27._isimmutable();
			}
			if(subgrid.zpp_inner._inuse) {
				throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
			}
			var inner1 = subgrid.zpp_inner;
			subgrid.zpp_inner.outer = null;
			subgrid.zpp_inner = null;
			subgrid.zpp_pool = null;
			if(ZPP_PubPool.nextVec2 != null) {
				ZPP_PubPool.nextVec2.zpp_pool = subgrid;
			} else {
				ZPP_PubPool.poolVec2 = subgrid;
			}
			ZPP_PubPool.nextVec2 = subgrid;
			subgrid.zpp_disp = true;
			if(inner1.outer != null) {
				inner1.outer.zpp_inner = null;
				inner1.outer = null;
			}
			inner1._isimmutable = null;
			inner1._validate = null;
			inner1._invalidate = null;
			inner1.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = inner1;
		}
	}
	return ret;
};
MarchingSquares.prototype.__class__ = MarchingSquares;
var Mat23 = nape.geom.Mat23 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0.0;
	}
	if(tx == null) {
		tx = 0.0;
	}
	if(d == null) {
		d = 1.0;
	}
	if(c == null) {
		c = 0.0;
	}
	if(b == null) {
		b = 0.0;
	}
	if(a == null) {
		a = 1.0;
	}
	this.zpp_inner = null;
	this.zpp_inner = ZPP_Mat23.get();
	this.zpp_inner.outer = this;
	if(a != a) {
		throw new js._Boot.HaxeError("Error: Mat23::" + "a" + " cannot be NaN");
	}
	this.zpp_inner.a = a;
	var _this = this.zpp_inner;
	if(_this._invalidate != null) {
		_this._invalidate();
	}
	if(b != b) {
		throw new js._Boot.HaxeError("Error: Mat23::" + "b" + " cannot be NaN");
	}
	this.zpp_inner.b = b;
	var _this1 = this.zpp_inner;
	if(_this1._invalidate != null) {
		_this1._invalidate();
	}
	if(tx != tx) {
		throw new js._Boot.HaxeError("Error: Mat23::" + "tx" + " cannot be NaN");
	}
	this.zpp_inner.tx = tx;
	var _this2 = this.zpp_inner;
	if(_this2._invalidate != null) {
		_this2._invalidate();
	}
	if(c != c) {
		throw new js._Boot.HaxeError("Error: Mat23::" + "c" + " cannot be NaN");
	}
	this.zpp_inner.c = c;
	var _this3 = this.zpp_inner;
	if(_this3._invalidate != null) {
		_this3._invalidate();
	}
	if(d != d) {
		throw new js._Boot.HaxeError("Error: Mat23::" + "d" + " cannot be NaN");
	}
	this.zpp_inner.d = d;
	var _this4 = this.zpp_inner;
	if(_this4._invalidate != null) {
		_this4._invalidate();
	}
	if(ty != ty) {
		throw new js._Boot.HaxeError("Error: Mat23::" + "ty" + " cannot be NaN");
	}
	this.zpp_inner.ty = ty;
	var _this5 = this.zpp_inner;
	if(_this5._invalidate != null) {
		_this5._invalidate();
	}
};
Mat23.__name__ = ["nape","geom","Mat23"];
Mat23.rotation = function(angle) {
	if(angle != angle) {
		throw new js._Boot.HaxeError("Error: Cannot create rotation matrix with NaN angle");
	}
	var cos = Math.cos(angle);
	var sin = Math.sin(angle);
	return new Mat23(cos,-sin,sin,cos,0,0);
};
Mat23.translation = function(tx,ty) {
	return new Mat23(1,0,0,1,tx,ty);
};
Mat23.scale = function(sx,sy) {
	return new Mat23(sx,0,0,sy,0,0);
};
Mat23.prototype.zpp_inner = null;
Mat23.prototype.get_a = function() {
	return this.zpp_inner.a;
};
Mat23.prototype.set_a = function(a) {
	if(a != a) {
		throw new js._Boot.HaxeError("Error: Mat23::" + "a" + " cannot be NaN");
	}
	this.zpp_inner.a = a;
	var _this = this.zpp_inner;
	if(_this._invalidate != null) {
		_this._invalidate();
	}
	return this.zpp_inner.a;
};
Mat23.prototype.get_b = function() {
	return this.zpp_inner.b;
};
Mat23.prototype.set_b = function(b) {
	if(b != b) {
		throw new js._Boot.HaxeError("Error: Mat23::" + "b" + " cannot be NaN");
	}
	this.zpp_inner.b = b;
	var _this = this.zpp_inner;
	if(_this._invalidate != null) {
		_this._invalidate();
	}
	return this.zpp_inner.b;
};
Mat23.prototype.get_c = function() {
	return this.zpp_inner.c;
};
Mat23.prototype.set_c = function(c) {
	if(c != c) {
		throw new js._Boot.HaxeError("Error: Mat23::" + "c" + " cannot be NaN");
	}
	this.zpp_inner.c = c;
	var _this = this.zpp_inner;
	if(_this._invalidate != null) {
		_this._invalidate();
	}
	return this.zpp_inner.c;
};
Mat23.prototype.get_d = function() {
	return this.zpp_inner.d;
};
Mat23.prototype.set_d = function(d) {
	if(d != d) {
		throw new js._Boot.HaxeError("Error: Mat23::" + "d" + " cannot be NaN");
	}
	this.zpp_inner.d = d;
	var _this = this.zpp_inner;
	if(_this._invalidate != null) {
		_this._invalidate();
	}
	return this.zpp_inner.d;
};
Mat23.prototype.get_tx = function() {
	return this.zpp_inner.tx;
};
Mat23.prototype.set_tx = function(tx) {
	if(tx != tx) {
		throw new js._Boot.HaxeError("Error: Mat23::" + "tx" + " cannot be NaN");
	}
	this.zpp_inner.tx = tx;
	var _this = this.zpp_inner;
	if(_this._invalidate != null) {
		_this._invalidate();
	}
	return this.zpp_inner.tx;
};
Mat23.prototype.get_ty = function() {
	return this.zpp_inner.ty;
};
Mat23.prototype.set_ty = function(ty) {
	if(ty != ty) {
		throw new js._Boot.HaxeError("Error: Mat23::" + "ty" + " cannot be NaN");
	}
	this.zpp_inner.ty = ty;
	var _this = this.zpp_inner;
	if(_this._invalidate != null) {
		_this._invalidate();
	}
	return this.zpp_inner.ty;
};
Mat23.prototype.copy = function() {
	return new Mat23(this.zpp_inner.a,this.zpp_inner.b,this.zpp_inner.c,this.zpp_inner.d,this.zpp_inner.tx,this.zpp_inner.ty);
};
Mat23.prototype.set = function(matrix) {
	if(matrix == null) {
		throw new js._Boot.HaxeError("Error: Cannot set form null matrix");
	}
	var m = matrix.zpp_inner;
	this.zpp_inner.setas(m.a,m.b,m.c,m.d,m.tx,m.ty);
	var _this = this.zpp_inner;
	if(_this._invalidate != null) {
		_this._invalidate();
	}
	return this;
};
Mat23.prototype.setAs = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0.0;
	}
	if(tx == null) {
		tx = 0.0;
	}
	if(d == null) {
		d = 1.0;
	}
	if(c == null) {
		c = 0.0;
	}
	if(b == null) {
		b = 0.0;
	}
	if(a == null) {
		a = 1.0;
	}
	this.zpp_inner.setas(a,b,c,d,tx,ty);
	var _this = this.zpp_inner;
	if(_this._invalidate != null) {
		_this._invalidate();
	}
	return this;
};
Mat23.prototype.reset = function() {
	return this.setAs();
};
Mat23.prototype.get_determinant = function() {
	return this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c;
};
Mat23.prototype.singular = function() {
	var norm = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.c + this.zpp_inner.d * this.zpp_inner.d;
	var limit = this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c;
	if(limit < 0) {
		limit = -limit;
	}
	return norm > Config.illConditionedThreshold * limit;
};
Mat23.prototype.inverse = function() {
	if(this.singular()) {
		throw new js._Boot.HaxeError("Error: Matrix is singular and cannot be inverted");
	}
	var idet = 1.0 / (this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c);
	return new Mat23(this.zpp_inner.d * idet,-this.zpp_inner.b * idet,-this.zpp_inner.c * idet,this.zpp_inner.a * idet,(this.zpp_inner.b * this.zpp_inner.ty - this.zpp_inner.d * this.zpp_inner.tx) * idet,(this.zpp_inner.c * this.zpp_inner.tx - this.zpp_inner.a * this.zpp_inner.ty) * idet);
};
Mat23.prototype.transpose = function() {
	return new Mat23(this.zpp_inner.a,this.zpp_inner.c,this.zpp_inner.b,this.zpp_inner.d,-this.zpp_inner.a * this.zpp_inner.tx - this.zpp_inner.c * this.zpp_inner.ty,-this.zpp_inner.b * this.zpp_inner.tx - this.zpp_inner.d * this.zpp_inner.ty);
};
Mat23.prototype.concat = function(matrix) {
	if(matrix == null) {
		throw new js._Boot.HaxeError("Error: Cannot concatenate with null Mat23");
	}
	return new Mat23(matrix.zpp_inner.a * this.zpp_inner.a + matrix.zpp_inner.b * this.zpp_inner.c,matrix.zpp_inner.a * this.zpp_inner.b + matrix.zpp_inner.b * this.zpp_inner.d,matrix.zpp_inner.c * this.zpp_inner.a + matrix.zpp_inner.d * this.zpp_inner.c,matrix.zpp_inner.c * this.zpp_inner.b + matrix.zpp_inner.d * this.zpp_inner.d,matrix.zpp_inner.a * this.zpp_inner.tx + matrix.zpp_inner.b * this.zpp_inner.ty + matrix.zpp_inner.tx,matrix.zpp_inner.c * this.zpp_inner.tx + matrix.zpp_inner.d * this.zpp_inner.ty + matrix.zpp_inner.ty);
};
Mat23.prototype.transform = function(point,noTranslation,weak) {
	if(weak == null) {
		weak = false;
	}
	if(noTranslation == null) {
		noTranslation = false;
	}
	if(point != null && point.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(point == null) {
		throw new js._Boot.HaxeError("Error: Cannot transform null Vec2");
	}
	var ret;
	if(noTranslation) {
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = point.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		var tmp = point.zpp_inner.x * this.zpp_inner.a;
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = point.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		var x = tmp + point.zpp_inner.y * this.zpp_inner.b;
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this2 = point.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		var tmp1 = point.zpp_inner.x * this.zpp_inner.c;
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this3 = point.zpp_inner;
		if(_this3._validate != null) {
			_this3._validate();
		}
		var y = tmp1 + point.zpp_inner.y * this.zpp_inner.d;
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret1;
		if(ZPP_PubPool.poolVec2 == null) {
			ret1 = new Vec2();
		} else {
			ret1 = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret1.zpp_pool;
			ret1.zpp_pool = null;
			ret1.zpp_disp = false;
			if(ret1 == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret1.zpp_inner == null) {
			var ret2;
			if(ZPP_Vec2.zpp_pool == null) {
				ret2 = new ZPP_Vec2();
			} else {
				ret2 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret2.next;
				ret2.next = null;
			}
			ret2.weak = false;
			ret2._immutable = false;
			ret2.x = x;
			ret2.y = y;
			ret1.zpp_inner = ret2;
			ret1.zpp_inner.outer = ret1;
		} else {
			if(ret1 != null && ret1.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this4 = ret1.zpp_inner;
			if(_this4._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this4._isimmutable != null) {
				_this4._isimmutable();
			}
			if(x != x || y != y) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp2;
			if(ret1 != null && ret1.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this5 = ret1.zpp_inner;
			if(_this5._validate != null) {
				_this5._validate();
			}
			if(ret1.zpp_inner.x == x) {
				if(ret1 != null && ret1.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this6 = ret1.zpp_inner;
				if(_this6._validate != null) {
					_this6._validate();
				}
				tmp2 = ret1.zpp_inner.y == y;
			} else {
				tmp2 = false;
			}
			if(!tmp2) {
				ret1.zpp_inner.x = x;
				ret1.zpp_inner.y = y;
				var _this7 = ret1.zpp_inner;
				if(_this7._invalidate != null) {
					_this7._invalidate(_this7);
				}
			}
		}
		ret1.zpp_inner.weak = weak;
		ret = ret1;
	} else {
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = point.zpp_inner;
		if(_this8._validate != null) {
			_this8._validate();
		}
		var tmp3 = point.zpp_inner.x * this.zpp_inner.a;
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this9 = point.zpp_inner;
		if(_this9._validate != null) {
			_this9._validate();
		}
		var x1 = tmp3 + point.zpp_inner.y * this.zpp_inner.b + this.zpp_inner.tx;
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this10 = point.zpp_inner;
		if(_this10._validate != null) {
			_this10._validate();
		}
		var tmp4 = point.zpp_inner.x * this.zpp_inner.c;
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this11 = point.zpp_inner;
		if(_this11._validate != null) {
			_this11._validate();
		}
		var y1 = tmp4 + point.zpp_inner.y * this.zpp_inner.d + this.zpp_inner.ty;
		if(x1 != x1 || y1 != y1) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret3;
		if(ZPP_PubPool.poolVec2 == null) {
			ret3 = new Vec2();
		} else {
			ret3 = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret3.zpp_pool;
			ret3.zpp_pool = null;
			ret3.zpp_disp = false;
			if(ret3 == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret3.zpp_inner == null) {
			var ret4;
			if(ZPP_Vec2.zpp_pool == null) {
				ret4 = new ZPP_Vec2();
			} else {
				ret4 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret4.next;
				ret4.next = null;
			}
			ret4.weak = false;
			ret4._immutable = false;
			ret4.x = x1;
			ret4.y = y1;
			ret3.zpp_inner = ret4;
			ret3.zpp_inner.outer = ret3;
		} else {
			if(ret3 != null && ret3.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this12 = ret3.zpp_inner;
			if(_this12._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this12._isimmutable != null) {
				_this12._isimmutable();
			}
			if(x1 != x1 || y1 != y1) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp5;
			if(ret3 != null && ret3.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this13 = ret3.zpp_inner;
			if(_this13._validate != null) {
				_this13._validate();
			}
			if(ret3.zpp_inner.x == x1) {
				if(ret3 != null && ret3.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this14 = ret3.zpp_inner;
				if(_this14._validate != null) {
					_this14._validate();
				}
				tmp5 = ret3.zpp_inner.y == y1;
			} else {
				tmp5 = false;
			}
			if(!tmp5) {
				ret3.zpp_inner.x = x1;
				ret3.zpp_inner.y = y1;
				var _this15 = ret3.zpp_inner;
				if(_this15._invalidate != null) {
					_this15._invalidate(_this15);
				}
			}
		}
		ret3.zpp_inner.weak = weak;
		ret = ret3;
	}
	if(point.zpp_inner.weak) {
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this16 = point.zpp_inner;
		if(_this16._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this16._isimmutable != null) {
			_this16._isimmutable();
		}
		if(point.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = point.zpp_inner;
		point.zpp_inner.outer = null;
		point.zpp_inner = null;
		point.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = point;
		} else {
			ZPP_PubPool.poolVec2 = point;
		}
		ZPP_PubPool.nextVec2 = point;
		point.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return ret;
};
Mat23.prototype.inverseTransform = function(point,noTranslation,weak) {
	if(weak == null) {
		weak = false;
	}
	if(noTranslation == null) {
		noTranslation = false;
	}
	if(point != null && point.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(point == null) {
		throw new js._Boot.HaxeError("Error: Cannot transform null Vec2");
	}
	if(this.singular()) {
		throw new js._Boot.HaxeError("Error: Matrix is singular and inverse transformation cannot be performed");
	}
	var idet = 1.0 / (this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c);
	var ret;
	if(noTranslation) {
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = point.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		var tmp = point.zpp_inner.x * this.zpp_inner.d;
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = point.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		var x = (tmp - point.zpp_inner.y * this.zpp_inner.b) * idet;
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this2 = point.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		var tmp1 = point.zpp_inner.y * this.zpp_inner.a;
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this3 = point.zpp_inner;
		if(_this3._validate != null) {
			_this3._validate();
		}
		var y = (tmp1 - point.zpp_inner.x * this.zpp_inner.c) * idet;
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret1;
		if(ZPP_PubPool.poolVec2 == null) {
			ret1 = new Vec2();
		} else {
			ret1 = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret1.zpp_pool;
			ret1.zpp_pool = null;
			ret1.zpp_disp = false;
			if(ret1 == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret1.zpp_inner == null) {
			var ret2;
			if(ZPP_Vec2.zpp_pool == null) {
				ret2 = new ZPP_Vec2();
			} else {
				ret2 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret2.next;
				ret2.next = null;
			}
			ret2.weak = false;
			ret2._immutable = false;
			ret2.x = x;
			ret2.y = y;
			ret1.zpp_inner = ret2;
			ret1.zpp_inner.outer = ret1;
		} else {
			if(ret1 != null && ret1.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this4 = ret1.zpp_inner;
			if(_this4._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this4._isimmutable != null) {
				_this4._isimmutable();
			}
			if(x != x || y != y) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp2;
			if(ret1 != null && ret1.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this5 = ret1.zpp_inner;
			if(_this5._validate != null) {
				_this5._validate();
			}
			if(ret1.zpp_inner.x == x) {
				if(ret1 != null && ret1.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this6 = ret1.zpp_inner;
				if(_this6._validate != null) {
					_this6._validate();
				}
				tmp2 = ret1.zpp_inner.y == y;
			} else {
				tmp2 = false;
			}
			if(!tmp2) {
				ret1.zpp_inner.x = x;
				ret1.zpp_inner.y = y;
				var _this7 = ret1.zpp_inner;
				if(_this7._invalidate != null) {
					_this7._invalidate(_this7);
				}
			}
		}
		ret1.zpp_inner.weak = weak;
		ret = ret1;
	} else {
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = point.zpp_inner;
		if(_this8._validate != null) {
			_this8._validate();
		}
		var dx = point.zpp_inner.x - this.zpp_inner.tx;
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this9 = point.zpp_inner;
		if(_this9._validate != null) {
			_this9._validate();
		}
		var dy = point.zpp_inner.y - this.zpp_inner.ty;
		var x1 = (dx * this.zpp_inner.d - dy * this.zpp_inner.b) * idet;
		var y1 = (dy * this.zpp_inner.a - dx * this.zpp_inner.c) * idet;
		if(x1 != x1 || y1 != y1) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret3;
		if(ZPP_PubPool.poolVec2 == null) {
			ret3 = new Vec2();
		} else {
			ret3 = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret3.zpp_pool;
			ret3.zpp_pool = null;
			ret3.zpp_disp = false;
			if(ret3 == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret3.zpp_inner == null) {
			var ret4;
			if(ZPP_Vec2.zpp_pool == null) {
				ret4 = new ZPP_Vec2();
			} else {
				ret4 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret4.next;
				ret4.next = null;
			}
			ret4.weak = false;
			ret4._immutable = false;
			ret4.x = x1;
			ret4.y = y1;
			ret3.zpp_inner = ret4;
			ret3.zpp_inner.outer = ret3;
		} else {
			if(ret3 != null && ret3.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this10 = ret3.zpp_inner;
			if(_this10._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this10._isimmutable != null) {
				_this10._isimmutable();
			}
			if(x1 != x1 || y1 != y1) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp3;
			if(ret3 != null && ret3.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this11 = ret3.zpp_inner;
			if(_this11._validate != null) {
				_this11._validate();
			}
			if(ret3.zpp_inner.x == x1) {
				if(ret3 != null && ret3.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this12 = ret3.zpp_inner;
				if(_this12._validate != null) {
					_this12._validate();
				}
				tmp3 = ret3.zpp_inner.y == y1;
			} else {
				tmp3 = false;
			}
			if(!tmp3) {
				ret3.zpp_inner.x = x1;
				ret3.zpp_inner.y = y1;
				var _this13 = ret3.zpp_inner;
				if(_this13._invalidate != null) {
					_this13._invalidate(_this13);
				}
			}
		}
		ret3.zpp_inner.weak = weak;
		ret = ret3;
	}
	if(point.zpp_inner.weak) {
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this14 = point.zpp_inner;
		if(_this14._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this14._isimmutable != null) {
			_this14._isimmutable();
		}
		if(point.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = point.zpp_inner;
		point.zpp_inner.outer = null;
		point.zpp_inner = null;
		point.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = point;
		} else {
			ZPP_PubPool.poolVec2 = point;
		}
		ZPP_PubPool.nextVec2 = point;
		point.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return ret;
};
Mat23.prototype.toString = function() {
	return "{ a: " + this.zpp_inner.a + " b: " + this.zpp_inner.b + " c: " + this.zpp_inner.c + " d: " + this.zpp_inner.d + " tx: " + this.zpp_inner.tx + " ty: " + this.zpp_inner.ty + " }";
};
Mat23.prototype.equiorthogonal = function() {
	if(this.singular()) {
		return false;
	} else {
		var x = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
		if(x * x < Config.epsilon) {
			var y = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b - this.zpp_inner.c * this.zpp_inner.c - this.zpp_inner.d * this.zpp_inner.d;
			return y * y < Config.epsilon;
		} else {
			return false;
		}
	}
};
Mat23.prototype.orthogonal = function() {
	var x = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
	if(x * x < Config.epsilon) {
		var y = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b - 1;
		var z = this.zpp_inner.c * this.zpp_inner.c + this.zpp_inner.d * this.zpp_inner.d - 1;
		if(y * y < Config.epsilon) {
			return z * z < Config.epsilon;
		} else {
			return false;
		}
	} else {
		return false;
	}
};
Mat23.prototype.equiorthogonalise = function() {
	if(!this.equiorthogonal()) {
		var k1 = Math.sqrt(this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.c * this.zpp_inner.c);
		var k2 = Math.sqrt(this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.d * this.zpp_inner.d);
		if(k1 * k1 < Config.epsilon || k2 * k2 < Config.epsilon) {
			throw new js._Boot.HaxeError("Error: Matrix is singular and cannot be " + "equiorthogonal" + "ised");
		}
		var k = (k1 + k2) / 2;
		k1 = k / k1;
		k2 = k / k2;
		var _g = this;
		var a = _g.zpp_inner.a * k1;
		if(a != a) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "a" + " cannot be NaN");
		}
		_g.zpp_inner.a = a;
		var _this = _g.zpp_inner;
		if(_this._invalidate != null) {
			_this._invalidate();
		}
		var _g1 = this;
		var c = _g1.zpp_inner.c * k1;
		if(c != c) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "c" + " cannot be NaN");
		}
		_g1.zpp_inner.c = c;
		var _this1 = _g1.zpp_inner;
		if(_this1._invalidate != null) {
			_this1._invalidate();
		}
		var _g2 = this;
		var b = _g2.zpp_inner.b * k2;
		if(b != b) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "b" + " cannot be NaN");
		}
		_g2.zpp_inner.b = b;
		var _this2 = _g2.zpp_inner;
		if(_this2._invalidate != null) {
			_this2._invalidate();
		}
		var _g3 = this;
		var d = _g3.zpp_inner.d * k2;
		if(d != d) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "d" + " cannot be NaN");
		}
		_g3.zpp_inner.d = d;
		var _this3 = _g3.zpp_inner;
		if(_this3._invalidate != null) {
			_this3._invalidate();
		}
		var ang = 0.25 * Math.PI - 0.5 * Math.acos((this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d) / (k * k));
		if(this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c > 0) {
			ang = -ang;
		}
		var sin = Math.sin(ang);
		var cos = Math.cos(ang);
		var a2 = this.zpp_inner.a * cos - this.zpp_inner.c * sin;
		var b2 = this.zpp_inner.b * cos + this.zpp_inner.d * sin;
		var c1 = this.zpp_inner.c * cos + this.zpp_inner.a * sin;
		if(c1 != c1) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "c" + " cannot be NaN");
		}
		this.zpp_inner.c = c1;
		var _this4 = this.zpp_inner;
		if(_this4._invalidate != null) {
			_this4._invalidate();
		}
		if(a2 != a2) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "a" + " cannot be NaN");
		}
		this.zpp_inner.a = a2;
		var _this5 = this.zpp_inner;
		if(_this5._invalidate != null) {
			_this5._invalidate();
		}
		var d1 = this.zpp_inner.d * cos - this.zpp_inner.b * sin;
		if(d1 != d1) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "d" + " cannot be NaN");
		}
		this.zpp_inner.d = d1;
		var _this6 = this.zpp_inner;
		if(_this6._invalidate != null) {
			_this6._invalidate();
		}
		if(b2 != b2) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "b" + " cannot be NaN");
		}
		this.zpp_inner.b = b2;
		var _this7 = this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate();
		}
		var _this8 = this.zpp_inner;
		if(_this8._invalidate != null) {
			_this8._invalidate();
		}
	}
	return this;
};
Mat23.prototype.orthogonalise = function() {
	if(!this.orthogonal()) {
		var k1 = Math.sqrt(this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.c * this.zpp_inner.c);
		var k2 = Math.sqrt(this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.d * this.zpp_inner.d);
		if(k1 * k1 < Config.epsilon || k2 * k2 < Config.epsilon) {
			throw new js._Boot.HaxeError("Error: Matrix is singular and cannot be " + "orthogonal" + "ised");
		}
		k1 = 1 / k1;
		k2 = 1 / k2;
		var _g = this;
		var a = _g.zpp_inner.a * k1;
		if(a != a) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "a" + " cannot be NaN");
		}
		_g.zpp_inner.a = a;
		var _this = _g.zpp_inner;
		if(_this._invalidate != null) {
			_this._invalidate();
		}
		var _g1 = this;
		var c = _g1.zpp_inner.c * k1;
		if(c != c) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "c" + " cannot be NaN");
		}
		_g1.zpp_inner.c = c;
		var _this1 = _g1.zpp_inner;
		if(_this1._invalidate != null) {
			_this1._invalidate();
		}
		var _g2 = this;
		var b = _g2.zpp_inner.b * k2;
		if(b != b) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "b" + " cannot be NaN");
		}
		_g2.zpp_inner.b = b;
		var _this2 = _g2.zpp_inner;
		if(_this2._invalidate != null) {
			_this2._invalidate();
		}
		var _g3 = this;
		var d = _g3.zpp_inner.d * k2;
		if(d != d) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "d" + " cannot be NaN");
		}
		_g3.zpp_inner.d = d;
		var _this3 = _g3.zpp_inner;
		if(_this3._invalidate != null) {
			_this3._invalidate();
		}
		var ang = 0.25 * Math.PI - 0.5 * Math.acos((this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d) / 1);
		if(this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c > 0) {
			ang = -ang;
		}
		var sin = Math.sin(ang);
		var cos = Math.cos(ang);
		var a2 = this.zpp_inner.a * cos - this.zpp_inner.c * sin;
		var b2 = this.zpp_inner.b * cos + this.zpp_inner.d * sin;
		var c1 = this.zpp_inner.c * cos + this.zpp_inner.a * sin;
		if(c1 != c1) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "c" + " cannot be NaN");
		}
		this.zpp_inner.c = c1;
		var _this4 = this.zpp_inner;
		if(_this4._invalidate != null) {
			_this4._invalidate();
		}
		if(a2 != a2) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "a" + " cannot be NaN");
		}
		this.zpp_inner.a = a2;
		var _this5 = this.zpp_inner;
		if(_this5._invalidate != null) {
			_this5._invalidate();
		}
		var d1 = this.zpp_inner.d * cos - this.zpp_inner.b * sin;
		if(d1 != d1) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "d" + " cannot be NaN");
		}
		this.zpp_inner.d = d1;
		var _this6 = this.zpp_inner;
		if(_this6._invalidate != null) {
			_this6._invalidate();
		}
		if(b2 != b2) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "b" + " cannot be NaN");
		}
		this.zpp_inner.b = b2;
		var _this7 = this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate();
		}
		var _this8 = this.zpp_inner;
		if(_this8._invalidate != null) {
			_this8._invalidate();
		}
	}
	return this;
};
Mat23.prototype.__class__ = Mat23;
var MatMN = nape.geom.MatMN = function(rows,cols) {
	this.zpp_inner = null;
	if(rows <= 0 || cols <= 0) {
		throw new js._Boot.HaxeError("Error: MatMN::dimensions cannot be < 1");
	}
	this.zpp_inner = new ZPP_MatMN(rows,cols);
	this.zpp_inner.outer = this;
};
MatMN.__name__ = ["nape","geom","MatMN"];
MatMN.prototype.zpp_inner = null;
MatMN.prototype.get_rows = function() {
	return this.zpp_inner.m;
};
MatMN.prototype.get_cols = function() {
	return this.zpp_inner.n;
};
MatMN.prototype.x = function(row,col) {
	if(row < 0 || col < 0 || row >= this.zpp_inner.m || col >= this.zpp_inner.n) {
		throw new js._Boot.HaxeError("Error: MatMN indices out of range");
	}
	return this.zpp_inner.x[row * this.zpp_inner.n + col];
};
MatMN.prototype.setx = function(row,col,x) {
	if(row < 0 || col < 0 || row >= this.zpp_inner.m || col >= this.zpp_inner.n) {
		throw new js._Boot.HaxeError("Error: MatMN indices out of range");
	}
	return this.zpp_inner.x[row * this.zpp_inner.n + col] = x;
};
MatMN.prototype.toString = function() {
	var ret = "{ ";
	var fst = true;
	var _g1 = 0;
	var _g = this.zpp_inner.m;
	while(_g1 < _g) {
		var i = _g1++;
		if(!fst) {
			ret += "; ";
		}
		fst = false;
		var _g3 = 0;
		var _g2 = this.zpp_inner.n;
		while(_g3 < _g2) {
			var j = _g3++;
			if(i < 0 || j < 0 || i >= this.zpp_inner.m || j >= this.zpp_inner.n) {
				throw new js._Boot.HaxeError("Error: MatMN indices out of range");
			}
			ret += this.zpp_inner.x[i * this.zpp_inner.n + j] + " ";
		}
	}
	ret += "}";
	return ret;
};
MatMN.prototype.transpose = function() {
	var ret = new MatMN(this.zpp_inner.n,this.zpp_inner.m);
	var _g1 = 0;
	var _g = this.zpp_inner.m;
	while(_g1 < _g) {
		var i = _g1++;
		var _g3 = 0;
		var _g2 = this.zpp_inner.n;
		while(_g3 < _g2) {
			var j = _g3++;
			if(i < 0 || j < 0 || i >= this.zpp_inner.m || j >= this.zpp_inner.n) {
				throw new js._Boot.HaxeError("Error: MatMN indices out of range");
			}
			var x = this.zpp_inner.x[i * this.zpp_inner.n + j];
			if(j < 0 || i < 0 || j >= ret.zpp_inner.m || i >= ret.zpp_inner.n) {
				throw new js._Boot.HaxeError("Error: MatMN indices out of range");
			}
			ret.zpp_inner.x[j * ret.zpp_inner.n + i] = x;
		}
	}
	return ret;
};
MatMN.prototype.mul = function(matrix) {
	if(this.zpp_inner.n != matrix.zpp_inner.m) {
		throw new js._Boot.HaxeError("Error: Matrix dimensions aren't compatible");
	}
	var ret = new MatMN(this.zpp_inner.m,matrix.zpp_inner.n);
	var _g1 = 0;
	var _g = this.zpp_inner.m;
	while(_g1 < _g) {
		var i = _g1++;
		var _g3 = 0;
		var _g2 = matrix.zpp_inner.n;
		while(_g3 < _g2) {
			var j = _g3++;
			var v = 0.0;
			var _g5 = 0;
			var _g4 = this.zpp_inner.n;
			while(_g5 < _g4) {
				var k = _g5++;
				if(i < 0 || k < 0 || i >= this.zpp_inner.m || k >= this.zpp_inner.n) {
					throw new js._Boot.HaxeError("Error: MatMN indices out of range");
				}
				var tmp = this.zpp_inner.x[i * this.zpp_inner.n + k];
				if(k < 0 || j < 0 || k >= matrix.zpp_inner.m || j >= matrix.zpp_inner.n) {
					throw new js._Boot.HaxeError("Error: MatMN indices out of range");
				}
				v += tmp * matrix.zpp_inner.x[k * matrix.zpp_inner.n + j];
			}
			if(i < 0 || j < 0 || i >= ret.zpp_inner.m || j >= ret.zpp_inner.n) {
				throw new js._Boot.HaxeError("Error: MatMN indices out of range");
			}
			ret.zpp_inner.x[i * ret.zpp_inner.n + j] = v;
		}
	}
	return ret;
};
MatMN.prototype.__class__ = MatMN;
var Ray = nape.geom.Ray = function(origin,direction) {
	this.zpp_inner = null;
	if(origin != null && origin.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(direction != null && direction.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	this.zpp_inner = new ZPP_Ray();
	if(origin != null && origin.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(origin == null) {
		throw new js._Boot.HaxeError("Error: Ray::origin cannot be null");
	}
	var _this = this.zpp_inner.origin;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(origin != null && origin.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(origin == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(origin != null && origin.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = origin.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = origin.zpp_inner.x;
	if(origin != null && origin.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = origin.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = origin.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(origin.zpp_inner.weak) {
		if(origin != null && origin.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = origin.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(origin.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = origin.zpp_inner;
		origin.zpp_inner.outer = null;
		origin.zpp_inner = null;
		origin.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = origin;
		} else {
			ZPP_PubPool.poolVec2 = origin;
		}
		ZPP_PubPool.nextVec2 = origin;
		origin.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(direction != null && direction.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(direction == null) {
		throw new js._Boot.HaxeError("Error: Ray::direction cannot be null");
	}
	var _this9 = this.zpp_inner.direction;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(direction != null && direction.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this10 = _this9.zpp_inner;
	if(_this10._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this10._isimmutable != null) {
		_this10._isimmutable();
	}
	if(direction == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(direction != null && direction.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this11 = direction.zpp_inner;
	if(_this11._validate != null) {
		_this11._validate();
	}
	var x1 = direction.zpp_inner.x;
	if(direction != null && direction.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this12 = direction.zpp_inner;
	if(_this12._validate != null) {
		_this12._validate();
	}
	var y1 = direction.zpp_inner.y;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this13 = _this9.zpp_inner;
	if(_this13._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this13._isimmutable != null) {
		_this13._isimmutable();
	}
	if(x1 != x1 || y1 != y1) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp1;
	if(_this9 != null && _this9.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this14 = _this9.zpp_inner;
	if(_this14._validate != null) {
		_this14._validate();
	}
	if(_this9.zpp_inner.x == x1) {
		if(_this9 != null && _this9.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this15 = _this9.zpp_inner;
		if(_this15._validate != null) {
			_this15._validate();
		}
		tmp1 = _this9.zpp_inner.y == y1;
	} else {
		tmp1 = false;
	}
	if(!tmp1) {
		_this9.zpp_inner.x = x1;
		_this9.zpp_inner.y = y1;
		var _this16 = _this9.zpp_inner;
		if(_this16._invalidate != null) {
			_this16._invalidate(_this16);
		}
	}
	if(direction.zpp_inner.weak) {
		if(direction != null && direction.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this17 = direction.zpp_inner;
		if(_this17._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this17._isimmutable != null) {
			_this17._isimmutable();
		}
		if(direction.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = direction.zpp_inner;
		direction.zpp_inner.outer = null;
		direction.zpp_inner = null;
		direction.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = direction;
		} else {
			ZPP_PubPool.poolVec2 = direction;
		}
		ZPP_PubPool.nextVec2 = direction;
		direction.zpp_disp = true;
		if(inner1.outer != null) {
			inner1.outer.zpp_inner = null;
			inner1.outer = null;
		}
		inner1._isimmutable = null;
		inner1._validate = null;
		inner1._invalidate = null;
		inner1.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner1;
	}
	this.zpp_inner.zip_dir = true;
	this.zpp_inner.maxdist = Infinity;
};
Ray.__name__ = ["nape","geom","Ray"];
Ray.fromSegment = function(start,end) {
	if(start != null && start.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(end != null && end.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(start == null) {
		throw new js._Boot.HaxeError("Error: Ray::fromSegment::start is null");
	}
	if(end == null) {
		throw new js._Boot.HaxeError("Error: Ray::fromSegment::end is null");
	}
	var ret = new Ray(start,end.sub(start,true));
	if(start != null && start.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = start.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var ax = start.zpp_inner.x;
	if(start != null && start.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = start.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var ay = start.zpp_inner.y;
	if(end != null && end.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = end.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var bx = end.zpp_inner.x;
	if(end != null && end.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = end.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var by = end.zpp_inner.y;
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - by;
	var maxDistance = Math.sqrt(dx * dx + dy * dy);
	if(maxDistance != maxDistance) {
		throw new js._Boot.HaxeError("Error: maxDistance cannot be NaN");
	}
	ret.zpp_inner.maxdist = maxDistance;
	if(start.zpp_inner.weak) {
		if(start != null && start.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = start.zpp_inner;
		if(_this4._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this4._isimmutable != null) {
			_this4._isimmutable();
		}
		if(start.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = start.zpp_inner;
		start.zpp_inner.outer = null;
		start.zpp_inner = null;
		start.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = start;
		} else {
			ZPP_PubPool.poolVec2 = start;
		}
		ZPP_PubPool.nextVec2 = start;
		start.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(end.zpp_inner.weak) {
		if(end != null && end.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = end.zpp_inner;
		if(_this5._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this5._isimmutable != null) {
			_this5._isimmutable();
		}
		if(end.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = end.zpp_inner;
		end.zpp_inner.outer = null;
		end.zpp_inner = null;
		end.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = end;
		} else {
			ZPP_PubPool.poolVec2 = end;
		}
		ZPP_PubPool.nextVec2 = end;
		end.zpp_disp = true;
		if(inner1.outer != null) {
			inner1.outer.zpp_inner = null;
			inner1.outer = null;
		}
		inner1._isimmutable = null;
		inner1._validate = null;
		inner1._invalidate = null;
		inner1.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner1;
	}
	return ret;
};
Ray.prototype.zpp_inner = null;
Ray.prototype.get_userData = function() {
	if(this.zpp_inner.userData == null) {
		this.zpp_inner.userData = { };
	}
	return this.zpp_inner.userData;
};
Ray.prototype.get_origin = function() {
	return this.zpp_inner.origin;
};
Ray.prototype.set_origin = function(origin) {
	if(origin != null && origin.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(origin == null) {
		throw new js._Boot.HaxeError("Error: Ray::origin cannot be null");
	}
	var _this = this.zpp_inner.origin;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(origin != null && origin.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(origin == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(origin != null && origin.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = origin.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = origin.zpp_inner.x;
	if(origin != null && origin.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = origin.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = origin.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(origin.zpp_inner.weak) {
		if(origin != null && origin.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = origin.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(origin.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = origin.zpp_inner;
		origin.zpp_inner.outer = null;
		origin.zpp_inner = null;
		origin.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = origin;
		} else {
			ZPP_PubPool.poolVec2 = origin;
		}
		ZPP_PubPool.nextVec2 = origin;
		origin.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return this.zpp_inner.origin;
};
Ray.prototype.get_direction = function() {
	return this.zpp_inner.direction;
};
Ray.prototype.set_direction = function(direction) {
	if(direction != null && direction.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(direction == null) {
		throw new js._Boot.HaxeError("Error: Ray::direction cannot be null");
	}
	var _this = this.zpp_inner.direction;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(direction != null && direction.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(direction == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(direction != null && direction.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = direction.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = direction.zpp_inner.x;
	if(direction != null && direction.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = direction.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = direction.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(direction.zpp_inner.weak) {
		if(direction != null && direction.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = direction.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(direction.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = direction.zpp_inner;
		direction.zpp_inner.outer = null;
		direction.zpp_inner = null;
		direction.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = direction;
		} else {
			ZPP_PubPool.poolVec2 = direction;
		}
		ZPP_PubPool.nextVec2 = direction;
		direction.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	this.zpp_inner.zip_dir = true;
	return this.zpp_inner.direction;
};
Ray.prototype.get_maxDistance = function() {
	return this.zpp_inner.maxdist;
};
Ray.prototype.set_maxDistance = function(maxDistance) {
	if(maxDistance != maxDistance) {
		throw new js._Boot.HaxeError("Error: maxDistance cannot be NaN");
	}
	this.zpp_inner.maxdist = maxDistance;
	return this.zpp_inner.maxdist;
};
Ray.prototype.aabb = function() {
	return this.zpp_inner.rayAABB().wrapper();
};
Ray.prototype.at = function(distance,weak) {
	if(weak == null) {
		weak = false;
	}
	this.zpp_inner.validate_dir();
	var _this = this.zpp_inner.origin;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var x = _this.zpp_inner.x + distance * this.zpp_inner.dirx;
	var _this2 = this.zpp_inner.origin;
	if(_this2 != null && _this2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = _this2.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = _this2.zpp_inner.y + distance * this.zpp_inner.diry;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = ret.zpp_inner;
		if(_this4._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this4._isimmutable != null) {
			_this4._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = ret.zpp_inner;
		if(_this5._validate != null) {
			_this5._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this6 = ret.zpp_inner;
			if(_this6._validate != null) {
				_this6._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this7 = ret.zpp_inner;
			if(_this7._invalidate != null) {
				_this7._invalidate(_this7);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
Ray.prototype.copy = function() {
	var ret = new Ray(this.zpp_inner.origin,this.zpp_inner.direction);
	var maxDistance = this.zpp_inner.maxdist;
	if(maxDistance != maxDistance) {
		throw new js._Boot.HaxeError("Error: maxDistance cannot be NaN");
	}
	ret.zpp_inner.maxdist = maxDistance;
	return ret;
};
Ray.prototype.__class__ = Ray;
var RayResult = nape.geom.RayResult = function() {
	this.zpp_inner = null;
	if(!ZPP_ConvexRayResult.internal) {
		throw new js._Boot.HaxeError("Error: RayResult cannot be instantiated derp!");
	}
};
RayResult.__name__ = ["nape","geom","RayResult"];
RayResult.prototype.zpp_inner = null;
RayResult.prototype.get_normal = function() {
	if(this.zpp_inner.next != null) {
		throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
	}
	return this.zpp_inner.normal;
};
RayResult.prototype.get_distance = function() {
	if(this.zpp_inner.next != null) {
		throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
	}
	return this.zpp_inner.toiDistance;
};
RayResult.prototype.get_inner = function() {
	if(this.zpp_inner.next != null) {
		throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
	}
	return this.zpp_inner.inner;
};
RayResult.prototype.get_shape = function() {
	if(this.zpp_inner.next != null) {
		throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
	}
	return this.zpp_inner.shape;
};
RayResult.prototype.dispose = function() {
	if(this.zpp_inner.next != null) {
		throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
	}
	this.zpp_inner.free();
};
RayResult.prototype.toString = function() {
	if(this.zpp_inner.next != null) {
		throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
	}
	if(this.zpp_inner.next != null) {
		throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
	}
	var tmp = "{ shape: " + Std.string(this.zpp_inner.shape) + " distance: ";
	if(this.zpp_inner.next != null) {
		throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
	}
	var tmp1 = tmp + this.zpp_inner.toiDistance + " ?inner: ";
	if(this.zpp_inner.next != null) {
		throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
	}
	return tmp1 + Std.string(this.zpp_inner.inner) + " }";
};
RayResult.prototype.__class__ = RayResult;
var RayResultIterator = nape.geom.RayResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!ZPP_RayResultList.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "RayResult" + "Iterator derp!");
	}
};
RayResultIterator.__name__ = ["nape","geom","RayResultIterator"];
RayResultIterator.get = function(list) {
	var ret;
	if(RayResultIterator.zpp_pool == null) {
		ZPP_RayResultList.internal = true;
		var ret1 = new RayResultIterator();
		ZPP_RayResultList.internal = false;
		ret = ret1;
	} else {
		var r = RayResultIterator.zpp_pool;
		RayResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
RayResultIterator.prototype.zpp_inner = null;
RayResultIterator.prototype.zpp_i = null;
RayResultIterator.prototype.zpp_critical = null;
RayResultIterator.prototype.zpp_next = null;
RayResultIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var _this = this.zpp_inner;
	_this.zpp_inner.valmod();
	if(_this.zpp_inner.zip_length) {
		_this.zpp_inner.zip_length = false;
		_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
	}
	var length = _this.zpp_inner.user_length;
	this.zpp_critical = true;
	if(this.zpp_i < length) {
		return true;
	} else {
		this.zpp_next = RayResultIterator.zpp_pool;
		RayResultIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
RayResultIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
RayResultIterator.prototype.__class__ = RayResultIterator;
var RayResultList = nape.geom.RayResultList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new ZPP_RayResultList();
	this.zpp_inner.outer = this;
};
RayResultList.__name__ = ["nape","geom","RayResultList"];
RayResultList.fromArray = function(array) {
	if(array == null) {
		throw new js._Boot.HaxeError("Error: Cannot convert null Array to Nape list");
	}
	var ret = new RayResultList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
RayResultList.prototype.zpp_inner = null;
RayResultList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
RayResultList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj);
};
RayResultList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	var tmp;
	if(index >= 0) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		tmp = index >= this.zpp_inner.user_length;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Index out of bounds");
	}
	if(this.zpp_inner.reverse_flag) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		index = this.zpp_inner.user_length - 1 - index;
	}
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else {
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	return this.zpp_inner.at_ite.elt;
};
RayResultList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "RayResult" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.inner.add(obj);
		} else {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
RayResultList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "RayResult" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
		} else {
			this.zpp_inner.inner.add(obj);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
RayResultList.prototype.pop = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "RayResult" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx1 = ret;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	}
	this.zpp_inner.invalidate();
	return ret;
};
RayResultList.prototype.shift = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "RayResult" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx = ret;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	}
	this.zpp_inner.invalidate();
	return ret;
};
RayResultList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) {
		return this.push(obj);
	} else {
		return this.unshift(obj);
	}
};
RayResultList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "RayResult" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(obj);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.remove(obj);
		}
		this.zpp_inner.invalidate();
	}
	return ret;
};
RayResultList.prototype.clear = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "RayResult" + "List is immutable");
	}
	if(this.zpp_inner.reverse_flag) {
		while(this.zpp_inner.inner.head != null) this.pop();
	} else {
		while(this.zpp_inner.inner.head != null) this.shift();
	}
};
RayResultList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
RayResultList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return RayResultIterator.get(this);
};
RayResultList.prototype.copy = function(deep) {
	if(deep == null) {
		deep = false;
	}
	var ret = new RayResultList();
	this.zpp_inner.valmod();
	var _g = RayResultIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = RayResultIterator.zpp_pool;
			RayResultIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(deep) {
			throw new js._Boot.HaxeError("Error: " + "RayResult" + " is not a copyable type");
		}
		ret.push(i);
	}
	return ret;
};
RayResultList.prototype.merge = function(xs) {
	if(xs == null) {
		throw new js._Boot.HaxeError("Error: Cannot merge with null list");
	}
	xs.zpp_inner.valmod();
	var _g = RayResultIterator.get(xs);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = RayResultIterator.zpp_pool;
			RayResultIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) {
				this.push(x);
			} else {
				this.unshift(x);
			}
		}
	}
};
RayResultList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	this.zpp_inner.valmod();
	var _g = RayResultIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = RayResultIterator.zpp_pool;
			RayResultIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) {
			ret += ",";
		}
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
};
RayResultList.prototype.foreach = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot execute null on list elements");
	}
	this.zpp_inner.valmod();
	var it = RayResultIterator.get(this);
	while(true) {
		it.zpp_inner.zpp_inner.valmod();
		var _this = it.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		it.zpp_critical = true;
		var tmp;
		if(it.zpp_i < length) {
			tmp = true;
		} else {
			it.zpp_next = RayResultIterator.zpp_pool;
			RayResultIterator.zpp_pool = it;
			it.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		try {
			it.zpp_critical = false;
			lambda(it.zpp_inner.at(it.zpp_i++));
		} catch( e ) {
			it.zpp_next = RayResultIterator.zpp_pool;
			RayResultIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
	}
	return this;
};
RayResultList.prototype.filter = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot select elements of list with null");
	}
	var i = 0;
	while(true) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(!(i < this.zpp_inner.user_length)) {
			break;
		}
		var x = this.at(i);
		try {
			if(lambda(x)) {
				++i;
			} else {
				this.remove(x);
			}
		} catch( e ) {
			break;
		}
	}
	return this;
};
RayResultList.prototype.__class__ = RayResultList;
var Vec2 = nape.geom.Vec2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.zpp_pool = null;
	this.zpp_inner = null;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_Vec2.zpp_pool == null) {
		ret = new ZPP_Vec2();
	} else {
		ret = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.weak = false;
	ret._immutable = false;
	ret.x = x;
	ret.y = y;
	this.zpp_inner = ret;
	this.zpp_inner.outer = this;
};
Vec2.__name__ = ["nape","geom","Vec2"];
Vec2.weak = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = true;
	return ret;
};
Vec2.get = function(x,y,weak) {
	if(weak == null) {
		weak = false;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
Vec2.fromPolar = function(length,angle,weak) {
	if(weak == null) {
		weak = false;
	}
	if(length != length) {
		throw new js._Boot.HaxeError("Error: Vec2::length cannot be NaN");
	}
	if(angle != angle) {
		throw new js._Boot.HaxeError("Error: Vec2::angle cannot be NaN");
	}
	var x = length * Math.cos(angle);
	var y = length * Math.sin(angle);
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
Vec2.dsq = function(a,b) {
	if(a != null && a.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(b != null && b.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(a == null || b == null) {
		throw new js._Boot.HaxeError("Error: Cannot compute squared distance between null Vec2");
	}
	if(a != null && a.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = a.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var ax = a.zpp_inner.x;
	if(a != null && a.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = a.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var ay = a.zpp_inner.y;
	if(b != null && b.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = b.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var bx = b.zpp_inner.x;
	if(b != null && b.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = b.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var by = b.zpp_inner.y;
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - by;
	var ret = dx * dx + dy * dy;
	if(a.zpp_inner.weak) {
		if(a != null && a.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = a.zpp_inner;
		if(_this4._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this4._isimmutable != null) {
			_this4._isimmutable();
		}
		if(a.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = a.zpp_inner;
		a.zpp_inner.outer = null;
		a.zpp_inner = null;
		a.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = a;
		} else {
			ZPP_PubPool.poolVec2 = a;
		}
		ZPP_PubPool.nextVec2 = a;
		a.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(b.zpp_inner.weak) {
		if(b != null && b.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = b.zpp_inner;
		if(_this5._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this5._isimmutable != null) {
			_this5._isimmutable();
		}
		if(b.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = b.zpp_inner;
		b.zpp_inner.outer = null;
		b.zpp_inner = null;
		b.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = b;
		} else {
			ZPP_PubPool.poolVec2 = b;
		}
		ZPP_PubPool.nextVec2 = b;
		b.zpp_disp = true;
		if(inner1.outer != null) {
			inner1.outer.zpp_inner = null;
			inner1.outer = null;
		}
		inner1._isimmutable = null;
		inner1._validate = null;
		inner1._invalidate = null;
		inner1.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner1;
	}
	return ret;
};
Vec2.distance = function(a,b) {
	if(a != null && a.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(b != null && b.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(a == null || b == null) {
		throw new js._Boot.HaxeError("Error: Cannot compute squared distance between null Vec2");
	}
	if(a != null && a.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = a.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var ax = a.zpp_inner.x;
	if(a != null && a.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = a.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var ay = a.zpp_inner.y;
	if(b != null && b.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = b.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var bx = b.zpp_inner.x;
	if(b != null && b.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = b.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var by = b.zpp_inner.y;
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - by;
	var ret = Math.sqrt(dx * dx + dy * dy);
	if(a.zpp_inner.weak) {
		if(a != null && a.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = a.zpp_inner;
		if(_this4._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this4._isimmutable != null) {
			_this4._isimmutable();
		}
		if(a.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = a.zpp_inner;
		a.zpp_inner.outer = null;
		a.zpp_inner = null;
		a.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = a;
		} else {
			ZPP_PubPool.poolVec2 = a;
		}
		ZPP_PubPool.nextVec2 = a;
		a.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(b.zpp_inner.weak) {
		if(b != null && b.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = b.zpp_inner;
		if(_this5._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this5._isimmutable != null) {
			_this5._isimmutable();
		}
		if(b.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = b.zpp_inner;
		b.zpp_inner.outer = null;
		b.zpp_inner = null;
		b.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = b;
		} else {
			ZPP_PubPool.poolVec2 = b;
		}
		ZPP_PubPool.nextVec2 = b;
		b.zpp_disp = true;
		if(inner1.outer != null) {
			inner1.outer.zpp_inner = null;
			inner1.outer = null;
		}
		inner1._isimmutable = null;
		inner1._validate = null;
		inner1._invalidate = null;
		inner1.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner1;
	}
	return ret;
};
Vec2.prototype.zpp_inner = null;
Vec2.prototype.zpp_pool = null;
Vec2.prototype.zpp_disp = null;
Vec2.prototype.dispose = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this._isimmutable != null) {
		_this._isimmutable();
	}
	if(this.zpp_inner._inuse) {
		throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
	}
	var inner = this.zpp_inner;
	this.zpp_inner.outer = null;
	this.zpp_inner = null;
	var o = this;
	o.zpp_pool = null;
	if(ZPP_PubPool.nextVec2 != null) {
		ZPP_PubPool.nextVec2.zpp_pool = o;
	} else {
		ZPP_PubPool.poolVec2 = o;
	}
	ZPP_PubPool.nextVec2 = o;
	o.zpp_disp = true;
	if(inner.outer != null) {
		inner.outer.zpp_inner = null;
		inner.outer = null;
	}
	inner._isimmutable = null;
	inner._validate = null;
	inner._invalidate = null;
	inner.next = ZPP_Vec2.zpp_pool;
	ZPP_Vec2.zpp_pool = inner;
};
Vec2.prototype.copy = function(weak) {
	if(weak == null) {
		weak = false;
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var x = this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var y = this.zpp_inner.y;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this2 = ret.zpp_inner;
		if(_this2._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this2._isimmutable != null) {
			_this2._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this3 = ret.zpp_inner;
		if(_this3._validate != null) {
			_this3._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this4 = ret.zpp_inner;
			if(_this4._validate != null) {
				_this4._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this5 = ret.zpp_inner;
			if(_this5._invalidate != null) {
				_this5._invalidate(_this5);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
Vec2.prototype.get_x = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	return this.zpp_inner.x;
};
Vec2.prototype.set_x = function(x) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this._isimmutable != null) {
		_this._isimmutable();
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(this.zpp_inner.x != x) {
		if(x != x) {
			throw new js._Boot.HaxeError("Error: Vec2::" + "x" + " cannot be NaN");
		}
		this.zpp_inner.x = x;
		var _this2 = this.zpp_inner;
		if(_this2._invalidate != null) {
			_this2._invalidate(_this2);
		}
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = this.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	return this.zpp_inner.x;
};
Vec2.prototype.get_y = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	return this.zpp_inner.y;
};
Vec2.prototype.set_y = function(y) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this._isimmutable != null) {
		_this._isimmutable();
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(this.zpp_inner.y != y) {
		if(y != y) {
			throw new js._Boot.HaxeError("Error: Vec2::" + "y" + " cannot be NaN");
		}
		this.zpp_inner.y = y;
		var _this2 = this.zpp_inner;
		if(_this2._invalidate != null) {
			_this2._invalidate(_this2);
		}
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = this.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	return this.zpp_inner.y;
};
Vec2.prototype.get_length = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp = this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var tmp1 = tmp * this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = this.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var tmp2 = this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = this.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	return Math.sqrt(tmp1 + tmp2 * this.zpp_inner.y);
};
Vec2.prototype.set_length = function(length) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this._isimmutable != null) {
		_this._isimmutable();
	}
	if(length != length) {
		throw new js._Boot.HaxeError("Error: Vec2::length cannot be NaN");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var tmp = this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = this.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var tmp1 = tmp * this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = this.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var tmp2 = this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = this.zpp_inner;
	if(_this4._validate != null) {
		_this4._validate();
	}
	if(tmp1 + tmp2 * this.zpp_inner.y == 0) {
		throw new js._Boot.HaxeError("Error: Cannot set length of a zero vector");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	var tmp3 = this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this6 = this.zpp_inner;
	if(_this6._validate != null) {
		_this6._validate();
	}
	var tmp4 = tmp3 * this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this7 = this.zpp_inner;
	if(_this7._validate != null) {
		_this7._validate();
	}
	var tmp5 = this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this8 = this.zpp_inner;
	if(_this8._validate != null) {
		_this8._validate();
	}
	var t = length / Math.sqrt(tmp4 + tmp5 * this.zpp_inner.y);
	var _g = this;
	if(_g != null && _g.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this9 = _g.zpp_inner;
	if(_this9._validate != null) {
		_this9._validate();
	}
	var x = _g.zpp_inner.x * t;
	if(_g != null && _g.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this10 = _g.zpp_inner;
	if(_this10._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this10._isimmutable != null) {
		_this10._isimmutable();
	}
	if(_g != null && _g.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this11 = _g.zpp_inner;
	if(_this11._validate != null) {
		_this11._validate();
	}
	if(_g.zpp_inner.x != x) {
		if(x != x) {
			throw new js._Boot.HaxeError("Error: Vec2::" + "x" + " cannot be NaN");
		}
		_g.zpp_inner.x = x;
		var _this12 = _g.zpp_inner;
		if(_this12._invalidate != null) {
			_this12._invalidate(_this12);
		}
	}
	if(_g != null && _g.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this13 = _g.zpp_inner;
	if(_this13._validate != null) {
		_this13._validate();
	}
	var _g1 = this;
	if(_g1 != null && _g1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this14 = _g1.zpp_inner;
	if(_this14._validate != null) {
		_this14._validate();
	}
	var y = _g1.zpp_inner.y * t;
	if(_g1 != null && _g1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this15 = _g1.zpp_inner;
	if(_this15._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this15._isimmutable != null) {
		_this15._isimmutable();
	}
	if(_g1 != null && _g1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this16 = _g1.zpp_inner;
	if(_this16._validate != null) {
		_this16._validate();
	}
	if(_g1.zpp_inner.y != y) {
		if(y != y) {
			throw new js._Boot.HaxeError("Error: Vec2::" + "y" + " cannot be NaN");
		}
		_g1.zpp_inner.y = y;
		var _this17 = _g1.zpp_inner;
		if(_this17._invalidate != null) {
			_this17._invalidate(_this17);
		}
	}
	if(_g1 != null && _g1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this18 = _g1.zpp_inner;
	if(_this18._validate != null) {
		_this18._validate();
	}
	var _this19 = this.zpp_inner;
	if(_this19._invalidate != null) {
		_this19._invalidate(_this19);
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this20 = this.zpp_inner;
	if(_this20._validate != null) {
		_this20._validate();
	}
	var tmp6 = this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this21 = this.zpp_inner;
	if(_this21._validate != null) {
		_this21._validate();
	}
	var tmp7 = tmp6 * this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this22 = this.zpp_inner;
	if(_this22._validate != null) {
		_this22._validate();
	}
	var tmp8 = this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this23 = this.zpp_inner;
	if(_this23._validate != null) {
		_this23._validate();
	}
	return Math.sqrt(tmp7 + tmp8 * this.zpp_inner.y);
};
Vec2.prototype.lsq = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp = this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var tmp1 = tmp * this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = this.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var tmp2 = this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = this.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	return tmp1 + tmp2 * this.zpp_inner.y;
};
Vec2.prototype.set = function(vector) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this._isimmutable != null) {
		_this._isimmutable();
	}
	if(vector == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = vector.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var x = vector.zpp_inner.x;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = vector.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var y = vector.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = this.zpp_inner;
	if(_this3._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this3._isimmutable != null) {
		_this3._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = this.zpp_inner;
	if(_this4._validate != null) {
		_this4._validate();
	}
	if(this.zpp_inner.x == x) {
		if(this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = this.zpp_inner;
		if(_this5._validate != null) {
			_this5._validate();
		}
		tmp = this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		this.zpp_inner.x = x;
		this.zpp_inner.y = y;
		var _this6 = this.zpp_inner;
		if(_this6._invalidate != null) {
			_this6._invalidate(_this6);
		}
	}
	var ret = this;
	if(vector.zpp_inner.weak) {
		if(vector != null && vector.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this7 = vector.zpp_inner;
		if(_this7._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this7._isimmutable != null) {
			_this7._isimmutable();
		}
		if(vector.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = vector.zpp_inner;
		vector.zpp_inner.outer = null;
		vector.zpp_inner = null;
		vector.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = vector;
		} else {
			ZPP_PubPool.poolVec2 = vector;
		}
		ZPP_PubPool.nextVec2 = vector;
		vector.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return ret;
};
Vec2.prototype.setxy = function(x,y) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this._isimmutable != null) {
		_this._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(this.zpp_inner.x == x) {
		if(this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this2 = this.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		tmp = this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		this.zpp_inner.x = x;
		this.zpp_inner.y = y;
		var _this3 = this.zpp_inner;
		if(_this3._invalidate != null) {
			_this3._invalidate(_this3);
		}
	}
	return this;
};
Vec2.prototype.get_angle = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var tmp;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp1 = this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(tmp1 == this.zpp_inner.y) {
		if(this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this2 = this.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		tmp = this.zpp_inner.x == 0;
	} else {
		tmp = false;
	}
	if(tmp) {
		return 0.0;
	} else {
		if(this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this3 = this.zpp_inner;
		if(_this3._validate != null) {
			_this3._validate();
		}
		var tmp2 = this.zpp_inner.y;
		if(this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = this.zpp_inner;
		if(_this4._validate != null) {
			_this4._validate();
		}
		return Math.atan2(tmp2,this.zpp_inner.x);
	}
};
Vec2.prototype.set_angle = function(angle) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this._isimmutable != null) {
		_this._isimmutable();
	}
	if(angle != angle) {
		throw new js._Boot.HaxeError("Error: Vec2::angle cannot be NaN");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var tmp = this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = this.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var tmp1 = tmp * this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = this.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var tmp2 = this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = this.zpp_inner;
	if(_this4._validate != null) {
		_this4._validate();
	}
	var l = Math.sqrt(tmp1 + tmp2 * this.zpp_inner.y);
	var x = l * Math.cos(angle);
	var y = l * Math.sin(angle);
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = this.zpp_inner;
	if(_this5._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this5._isimmutable != null) {
		_this5._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp3;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this6 = this.zpp_inner;
	if(_this6._validate != null) {
		_this6._validate();
	}
	if(this.zpp_inner.x == x) {
		if(this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this7 = this.zpp_inner;
		if(_this7._validate != null) {
			_this7._validate();
		}
		tmp3 = this.zpp_inner.y == y;
	} else {
		tmp3 = false;
	}
	if(!tmp3) {
		this.zpp_inner.x = x;
		this.zpp_inner.y = y;
		var _this8 = this.zpp_inner;
		if(_this8._invalidate != null) {
			_this8._invalidate(_this8);
		}
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var tmp4;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this9 = this.zpp_inner;
	if(_this9._validate != null) {
		_this9._validate();
	}
	var tmp5 = this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this10 = this.zpp_inner;
	if(_this10._validate != null) {
		_this10._validate();
	}
	if(tmp5 == this.zpp_inner.y) {
		if(this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this11 = this.zpp_inner;
		if(_this11._validate != null) {
			_this11._validate();
		}
		tmp4 = this.zpp_inner.x == 0;
	} else {
		tmp4 = false;
	}
	if(tmp4) {
		return 0.0;
	} else {
		if(this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this12 = this.zpp_inner;
		if(_this12._validate != null) {
			_this12._validate();
		}
		var tmp6 = this.zpp_inner.y;
		if(this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this13 = this.zpp_inner;
		if(_this13._validate != null) {
			_this13._validate();
		}
		return Math.atan2(tmp6,this.zpp_inner.x);
	}
};
Vec2.prototype.rotate = function(angle) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this._isimmutable != null) {
		_this._isimmutable();
	}
	if(angle != angle) {
		throw new js._Boot.HaxeError("Error: Cannot rotate Vec2 by NaN");
	}
	if(angle % (Math.PI * 2) != 0) {
		var ax = Math.sin(angle);
		var ay = Math.cos(angle);
		var t = ay * this.zpp_inner.x - ax * this.zpp_inner.y;
		this.zpp_inner.y = this.zpp_inner.x * ax + this.zpp_inner.y * ay;
		this.zpp_inner.x = t;
		var _this1 = this.zpp_inner;
		if(_this1._invalidate != null) {
			_this1._invalidate(_this1);
		}
	}
	return this;
};
Vec2.prototype.reflect = function(vec,weak) {
	if(weak == null) {
		weak = false;
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(vec != null && vec.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp = this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var tmp1 = tmp * this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = this.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var tmp2 = this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = this.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	if(Math.sqrt(tmp1 + tmp2 * this.zpp_inner.y) == 0) {
		throw new js._Boot.HaxeError("Error: Cannot reflect in zero vector");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = this.zpp_inner;
	if(_this4._validate != null) {
		_this4._validate();
	}
	var x = this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	var y = this.zpp_inner.y;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = ret.zpp_inner;
		if(_this6._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this6._isimmutable != null) {
			_this6._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp3;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this7 = ret.zpp_inner;
		if(_this7._validate != null) {
			_this7._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this8 = ret.zpp_inner;
			if(_this8._validate != null) {
				_this8._validate();
			}
			tmp3 = ret.zpp_inner.y == y;
		} else {
			tmp3 = false;
		}
		if(!tmp3) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this9 = ret.zpp_inner;
			if(_this9._invalidate != null) {
				_this9._invalidate(_this9);
			}
		}
	}
	ret.zpp_inner.weak = true;
	var normal = ret.normalise();
	var ret2 = vec.sub(normal.muleq(2 * normal.dot(vec)),weak);
	if(vec.zpp_inner.weak) {
		if(vec != null && vec.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this10 = vec.zpp_inner;
		if(_this10._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this10._isimmutable != null) {
			_this10._isimmutable();
		}
		if(vec.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = vec.zpp_inner;
		vec.zpp_inner.outer = null;
		vec.zpp_inner = null;
		vec.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = vec;
		} else {
			ZPP_PubPool.poolVec2 = vec;
		}
		ZPP_PubPool.nextVec2 = vec;
		vec.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return ret2;
};
Vec2.prototype.normalise = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this._isimmutable != null) {
		_this._isimmutable();
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var tmp = this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = this.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var tmp1 = tmp * this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = this.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var tmp2 = this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = this.zpp_inner;
	if(_this4._validate != null) {
		_this4._validate();
	}
	if(Math.sqrt(tmp1 + tmp2 * this.zpp_inner.y) == 0) {
		throw new js._Boot.HaxeError("Error: Cannot normalise vector of length 0");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	var tmp3 = this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this6 = this.zpp_inner;
	if(_this6._validate != null) {
		_this6._validate();
	}
	var tmp4 = tmp3 * this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this7 = this.zpp_inner;
	if(_this7._validate != null) {
		_this7._validate();
	}
	var tmp5 = this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this8 = this.zpp_inner;
	if(_this8._validate != null) {
		_this8._validate();
	}
	var imag = 1.0 / Math.sqrt(tmp4 + tmp5 * this.zpp_inner.y);
	var _g = this;
	if(_g != null && _g.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this9 = _g.zpp_inner;
	if(_this9._validate != null) {
		_this9._validate();
	}
	var x = _g.zpp_inner.x * imag;
	if(_g != null && _g.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this10 = _g.zpp_inner;
	if(_this10._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this10._isimmutable != null) {
		_this10._isimmutable();
	}
	if(_g != null && _g.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this11 = _g.zpp_inner;
	if(_this11._validate != null) {
		_this11._validate();
	}
	if(_g.zpp_inner.x != x) {
		if(x != x) {
			throw new js._Boot.HaxeError("Error: Vec2::" + "x" + " cannot be NaN");
		}
		_g.zpp_inner.x = x;
		var _this12 = _g.zpp_inner;
		if(_this12._invalidate != null) {
			_this12._invalidate(_this12);
		}
	}
	if(_g != null && _g.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this13 = _g.zpp_inner;
	if(_this13._validate != null) {
		_this13._validate();
	}
	var _g1 = this;
	if(_g1 != null && _g1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this14 = _g1.zpp_inner;
	if(_this14._validate != null) {
		_this14._validate();
	}
	var y = _g1.zpp_inner.y * imag;
	if(_g1 != null && _g1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this15 = _g1.zpp_inner;
	if(_this15._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this15._isimmutable != null) {
		_this15._isimmutable();
	}
	if(_g1 != null && _g1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this16 = _g1.zpp_inner;
	if(_this16._validate != null) {
		_this16._validate();
	}
	if(_g1.zpp_inner.y != y) {
		if(y != y) {
			throw new js._Boot.HaxeError("Error: Vec2::" + "y" + " cannot be NaN");
		}
		_g1.zpp_inner.y = y;
		var _this17 = _g1.zpp_inner;
		if(_this17._invalidate != null) {
			_this17._invalidate(_this17);
		}
	}
	if(_g1 != null && _g1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this18 = _g1.zpp_inner;
	if(_this18._validate != null) {
		_this18._validate();
	}
	var _this19 = this.zpp_inner;
	if(_this19._invalidate != null) {
		_this19._invalidate(_this19);
	}
	return this;
};
Vec2.prototype.unit = function(weak) {
	if(weak == null) {
		weak = false;
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp = this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var tmp1 = tmp * this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = this.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var tmp2 = this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = this.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	if(Math.sqrt(tmp1 + tmp2 * this.zpp_inner.y) == 0) {
		throw new js._Boot.HaxeError("Error: Cannot normalise vector of length 0");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = this.zpp_inner;
	if(_this4._validate != null) {
		_this4._validate();
	}
	var tmp3 = this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	var tmp4 = tmp3 * this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this6 = this.zpp_inner;
	if(_this6._validate != null) {
		_this6._validate();
	}
	var tmp5 = this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this7 = this.zpp_inner;
	if(_this7._validate != null) {
		_this7._validate();
	}
	var scale = 1 / Math.sqrt(tmp4 + tmp5 * this.zpp_inner.y);
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this8 = this.zpp_inner;
	if(_this8._validate != null) {
		_this8._validate();
	}
	var x = this.zpp_inner.x * scale;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this9 = this.zpp_inner;
	if(_this9._validate != null) {
		_this9._validate();
	}
	var y = this.zpp_inner.y * scale;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this10 = ret.zpp_inner;
		if(_this10._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this10._isimmutable != null) {
			_this10._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp6;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this11 = ret.zpp_inner;
		if(_this11._validate != null) {
			_this11._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this12 = ret.zpp_inner;
			if(_this12._validate != null) {
				_this12._validate();
			}
			tmp6 = ret.zpp_inner.y == y;
		} else {
			tmp6 = false;
		}
		if(!tmp6) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this13 = ret.zpp_inner;
			if(_this13._invalidate != null) {
				_this13._invalidate(_this13);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
Vec2.prototype.add = function(vector,weak) {
	if(weak == null) {
		weak = false;
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(vector == null) {
		throw new js._Boot.HaxeError("Error: Cannot add null vectors");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp = this.zpp_inner.x;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = vector.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var x = tmp + vector.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = this.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var tmp1 = this.zpp_inner.y;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = vector.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = tmp1 + vector.zpp_inner.y;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = ret.zpp_inner;
		if(_this4._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this4._isimmutable != null) {
			_this4._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp2;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = ret.zpp_inner;
		if(_this5._validate != null) {
			_this5._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this6 = ret.zpp_inner;
			if(_this6._validate != null) {
				_this6._validate();
			}
			tmp2 = ret.zpp_inner.y == y;
		} else {
			tmp2 = false;
		}
		if(!tmp2) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this7 = ret.zpp_inner;
			if(_this7._invalidate != null) {
				_this7._invalidate(_this7);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	var ret2 = ret;
	if(vector.zpp_inner.weak) {
		if(vector != null && vector.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = vector.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(vector.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = vector.zpp_inner;
		vector.zpp_inner.outer = null;
		vector.zpp_inner = null;
		vector.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = vector;
		} else {
			ZPP_PubPool.poolVec2 = vector;
		}
		ZPP_PubPool.nextVec2 = vector;
		vector.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return ret2;
};
Vec2.prototype.addMul = function(vector,scalar,weak) {
	if(weak == null) {
		weak = false;
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(vector == null) {
		throw new js._Boot.HaxeError("Error: Cannot add null vectors");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp = this.zpp_inner.x;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = vector.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var x = tmp + vector.zpp_inner.x * scalar;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = this.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var tmp1 = this.zpp_inner.y;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = vector.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = tmp1 + vector.zpp_inner.y * scalar;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = ret.zpp_inner;
		if(_this4._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this4._isimmutable != null) {
			_this4._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp2;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = ret.zpp_inner;
		if(_this5._validate != null) {
			_this5._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this6 = ret.zpp_inner;
			if(_this6._validate != null) {
				_this6._validate();
			}
			tmp2 = ret.zpp_inner.y == y;
		} else {
			tmp2 = false;
		}
		if(!tmp2) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this7 = ret.zpp_inner;
			if(_this7._invalidate != null) {
				_this7._invalidate(_this7);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	var ret2 = ret;
	if(vector.zpp_inner.weak) {
		if(vector != null && vector.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = vector.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(vector.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = vector.zpp_inner;
		vector.zpp_inner.outer = null;
		vector.zpp_inner = null;
		vector.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = vector;
		} else {
			ZPP_PubPool.poolVec2 = vector;
		}
		ZPP_PubPool.nextVec2 = vector;
		vector.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return ret2;
};
Vec2.prototype.sub = function(vector,weak) {
	if(weak == null) {
		weak = false;
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(vector == null) {
		throw new js._Boot.HaxeError("Error: Cannot subtract null vectors");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp = this.zpp_inner.x;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = vector.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var x = tmp - vector.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = this.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var tmp1 = this.zpp_inner.y;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = vector.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = tmp1 - vector.zpp_inner.y;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = ret.zpp_inner;
		if(_this4._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this4._isimmutable != null) {
			_this4._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp2;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = ret.zpp_inner;
		if(_this5._validate != null) {
			_this5._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this6 = ret.zpp_inner;
			if(_this6._validate != null) {
				_this6._validate();
			}
			tmp2 = ret.zpp_inner.y == y;
		} else {
			tmp2 = false;
		}
		if(!tmp2) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this7 = ret.zpp_inner;
			if(_this7._invalidate != null) {
				_this7._invalidate(_this7);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	var ret2 = ret;
	if(vector.zpp_inner.weak) {
		if(vector != null && vector.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = vector.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(vector.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = vector.zpp_inner;
		vector.zpp_inner.outer = null;
		vector.zpp_inner = null;
		vector.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = vector;
		} else {
			ZPP_PubPool.poolVec2 = vector;
		}
		ZPP_PubPool.nextVec2 = vector;
		vector.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return ret2;
};
Vec2.prototype.mul = function(scalar,weak) {
	if(weak == null) {
		weak = false;
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(scalar != scalar) {
		throw new js._Boot.HaxeError("Error: Cannot multiply with NaN");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var x = this.zpp_inner.x * scalar;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var y = this.zpp_inner.y * scalar;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this2 = ret.zpp_inner;
		if(_this2._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this2._isimmutable != null) {
			_this2._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this3 = ret.zpp_inner;
		if(_this3._validate != null) {
			_this3._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this4 = ret.zpp_inner;
			if(_this4._validate != null) {
				_this4._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this5 = ret.zpp_inner;
			if(_this5._invalidate != null) {
				_this5._invalidate(_this5);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
Vec2.prototype.addeq = function(vector) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this._isimmutable != null) {
		_this._isimmutable();
	}
	if(vector == null) {
		throw new js._Boot.HaxeError("Error: Cannot add null vectors");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var tmp = this.zpp_inner.x;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = vector.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = tmp + vector.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = this.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var tmp1 = this.zpp_inner.y;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = vector.zpp_inner;
	if(_this4._validate != null) {
		_this4._validate();
	}
	var y = tmp1 + vector.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = this.zpp_inner;
	if(_this5._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this5._isimmutable != null) {
		_this5._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp2;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this6 = this.zpp_inner;
	if(_this6._validate != null) {
		_this6._validate();
	}
	if(this.zpp_inner.x == x) {
		if(this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this7 = this.zpp_inner;
		if(_this7._validate != null) {
			_this7._validate();
		}
		tmp2 = this.zpp_inner.y == y;
	} else {
		tmp2 = false;
	}
	if(!tmp2) {
		this.zpp_inner.x = x;
		this.zpp_inner.y = y;
		var _this8 = this.zpp_inner;
		if(_this8._invalidate != null) {
			_this8._invalidate(_this8);
		}
	}
	if(vector.zpp_inner.weak) {
		if(vector != null && vector.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this9 = vector.zpp_inner;
		if(_this9._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this9._isimmutable != null) {
			_this9._isimmutable();
		}
		if(vector.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = vector.zpp_inner;
		vector.zpp_inner.outer = null;
		vector.zpp_inner = null;
		vector.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = vector;
		} else {
			ZPP_PubPool.poolVec2 = vector;
		}
		ZPP_PubPool.nextVec2 = vector;
		vector.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return this;
};
Vec2.prototype.subeq = function(vector) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this._isimmutable != null) {
		_this._isimmutable();
	}
	if(vector == null) {
		throw new js._Boot.HaxeError("Error: Cannot subtract null vectors");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var tmp = this.zpp_inner.x;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = vector.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = tmp - vector.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = this.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var tmp1 = this.zpp_inner.y;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = vector.zpp_inner;
	if(_this4._validate != null) {
		_this4._validate();
	}
	var y = tmp1 - vector.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = this.zpp_inner;
	if(_this5._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this5._isimmutable != null) {
		_this5._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp2;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this6 = this.zpp_inner;
	if(_this6._validate != null) {
		_this6._validate();
	}
	if(this.zpp_inner.x == x) {
		if(this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this7 = this.zpp_inner;
		if(_this7._validate != null) {
			_this7._validate();
		}
		tmp2 = this.zpp_inner.y == y;
	} else {
		tmp2 = false;
	}
	if(!tmp2) {
		this.zpp_inner.x = x;
		this.zpp_inner.y = y;
		var _this8 = this.zpp_inner;
		if(_this8._invalidate != null) {
			_this8._invalidate(_this8);
		}
	}
	if(vector.zpp_inner.weak) {
		if(vector != null && vector.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this9 = vector.zpp_inner;
		if(_this9._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this9._isimmutable != null) {
			_this9._isimmutable();
		}
		if(vector.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = vector.zpp_inner;
		vector.zpp_inner.outer = null;
		vector.zpp_inner = null;
		vector.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = vector;
		} else {
			ZPP_PubPool.poolVec2 = vector;
		}
		ZPP_PubPool.nextVec2 = vector;
		vector.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return this;
};
Vec2.prototype.muleq = function(scalar) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this._isimmutable != null) {
		_this._isimmutable();
	}
	if(scalar != scalar) {
		throw new js._Boot.HaxeError("Error: Cannot multiply with NaN");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var x = this.zpp_inner.x * scalar;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = this.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var y = this.zpp_inner.y * scalar;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = this.zpp_inner;
	if(_this3._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this3._isimmutable != null) {
		_this3._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = this.zpp_inner;
	if(_this4._validate != null) {
		_this4._validate();
	}
	if(this.zpp_inner.x == x) {
		if(this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = this.zpp_inner;
		if(_this5._validate != null) {
			_this5._validate();
		}
		tmp = this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		this.zpp_inner.x = x;
		this.zpp_inner.y = y;
		var _this6 = this.zpp_inner;
		if(_this6._invalidate != null) {
			_this6._invalidate(_this6);
		}
	}
	return this;
};
Vec2.prototype.dot = function(vector) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(vector == null) {
		throw new js._Boot.HaxeError("Error: Cannot take dot product with null vector");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp = this.zpp_inner.x;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = vector.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var tmp1 = tmp * vector.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = this.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var tmp2 = this.zpp_inner.y;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = vector.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var ret = tmp1 + tmp2 * vector.zpp_inner.y;
	if(vector.zpp_inner.weak) {
		if(vector != null && vector.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = vector.zpp_inner;
		if(_this4._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this4._isimmutable != null) {
			_this4._isimmutable();
		}
		if(vector.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = vector.zpp_inner;
		vector.zpp_inner.outer = null;
		vector.zpp_inner = null;
		vector.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = vector;
		} else {
			ZPP_PubPool.poolVec2 = vector;
		}
		ZPP_PubPool.nextVec2 = vector;
		vector.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return ret;
};
Vec2.prototype.cross = function(vector) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(vector == null) {
		throw new js._Boot.HaxeError("Error: Cannot take cross product with null vector");
	}
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = vector.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp = vector.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var tmp1 = tmp * this.zpp_inner.x;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = vector.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var tmp2 = vector.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = this.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var ret = tmp1 - tmp2 * this.zpp_inner.y;
	if(vector.zpp_inner.weak) {
		if(vector != null && vector.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = vector.zpp_inner;
		if(_this4._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this4._isimmutable != null) {
			_this4._isimmutable();
		}
		if(vector.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = vector.zpp_inner;
		vector.zpp_inner.outer = null;
		vector.zpp_inner = null;
		vector.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = vector;
		} else {
			ZPP_PubPool.poolVec2 = vector;
		}
		ZPP_PubPool.nextVec2 = vector;
		vector.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return ret;
};
Vec2.prototype.perp = function(weak) {
	if(weak == null) {
		weak = false;
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var x = -this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var y = this.zpp_inner.x;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this2 = ret.zpp_inner;
		if(_this2._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this2._isimmutable != null) {
			_this2._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this3 = ret.zpp_inner;
		if(_this3._validate != null) {
			_this3._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this4 = ret.zpp_inner;
			if(_this4._validate != null) {
				_this4._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this5 = ret.zpp_inner;
			if(_this5._invalidate != null) {
				_this5._invalidate(_this5);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
Vec2.prototype.toString = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	return this.zpp_inner.toString();
};
Vec2.prototype.__class__ = Vec2;
var Vec2Iterator = nape.geom.Vec2Iterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!ZPP_Vec2List.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "Vec2" + "Iterator derp!");
	}
};
Vec2Iterator.__name__ = ["nape","geom","Vec2Iterator"];
Vec2Iterator.get = function(list) {
	var ret;
	if(Vec2Iterator.zpp_pool == null) {
		ZPP_Vec2List.internal = true;
		var ret1 = new Vec2Iterator();
		ZPP_Vec2List.internal = false;
		ret = ret1;
	} else {
		var r = Vec2Iterator.zpp_pool;
		Vec2Iterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
Vec2Iterator.prototype.zpp_inner = null;
Vec2Iterator.prototype.zpp_i = null;
Vec2Iterator.prototype.zpp_critical = null;
Vec2Iterator.prototype.zpp_next = null;
Vec2Iterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.zpp_gl();
	this.zpp_critical = true;
	if(this.zpp_i < length) {
		return true;
	} else {
		this.zpp_next = Vec2Iterator.zpp_pool;
		Vec2Iterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
Vec2Iterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
Vec2Iterator.prototype.__class__ = Vec2Iterator;
var Vec2List = nape.geom.Vec2List = function() {
	this.zpp_inner = null;
	this.zpp_inner = new ZPP_Vec2List();
	this.zpp_inner.outer = this;
};
Vec2List.__name__ = ["nape","geom","Vec2List"];
Vec2List.fromArray = function(array) {
	if(array == null) {
		throw new js._Boot.HaxeError("Error: Cannot convert null Array to Nape list");
	}
	var ret = new Vec2List();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
Vec2List.prototype.zpp_inner = null;
Vec2List.prototype.get_length = function() {
	return this.zpp_gl();
};
Vec2List.prototype.zpp_gl = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
Vec2List.prototype.zpp_vm = function() {
	this.zpp_inner.valmod();
};
Vec2List.prototype.has = function(obj) {
	this.zpp_vm();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
Vec2List.prototype.at = function(index) {
	this.zpp_vm();
	if(index < 0 || index >= this.zpp_gl()) {
		throw new js._Boot.HaxeError("Error: Index out of bounds");
	}
	if(this.zpp_inner.reverse_flag) {
		index = this.zpp_gl() - 1 - index;
	}
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else {
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	var _this = this.zpp_inner.at_ite.elt;
	if(_this.outer == null) {
		_this.outer = new Vec2();
		var o = _this.outer.zpp_inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = o;
		_this.outer.zpp_inner = _this;
	}
	return _this.outer;
};
Vec2List.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_vm();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.inner.add(obj.zpp_inner);
		} else {
			if(this.zpp_inner.push_ite == null) {
				this.zpp_inner.push_ite = this.empty()?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
Vec2List.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_vm();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) {
				this.zpp_inner.push_ite = this.empty()?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else {
			this.zpp_inner.inner.add(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
Vec2List.prototype.pop = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.empty()) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_vm();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		if(ret.outer == null) {
			ret.outer = new Vec2();
			var o = ret.outer.zpp_inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o._isimmutable = null;
			o._validate = null;
			o._invalidate = null;
			o.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = o;
			ret.outer.zpp_inner = ret;
		}
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite = this.zpp_gl() == 1?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		if(ret.outer == null) {
			ret.outer = new Vec2();
			var o1 = ret.outer.zpp_inner;
			if(o1.outer != null) {
				o1.outer.zpp_inner = null;
				o1.outer = null;
			}
			o1._isimmutable = null;
			o1._validate = null;
			o1._invalidate = null;
			o1.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = o1;
			ret.outer.zpp_inner = ret;
		}
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	}
	this.zpp_inner.invalidate();
	if(ret.outer == null) {
		ret.outer = new Vec2();
		var o2 = ret.outer.zpp_inner;
		if(o2.outer != null) {
			o2.outer.zpp_inner = null;
			o2.outer = null;
		}
		o2._isimmutable = null;
		o2._validate = null;
		o2._invalidate = null;
		o2.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = o2;
		ret.outer.zpp_inner = ret;
	}
	return ret.outer;
};
Vec2List.prototype.shift = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.empty()) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_vm();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite = this.zpp_gl() == 1?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		if(ret.outer == null) {
			ret.outer = new Vec2();
			var o = ret.outer.zpp_inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o._isimmutable = null;
			o._validate = null;
			o._invalidate = null;
			o.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = o;
			ret.outer.zpp_inner = ret;
		}
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	} else {
		ret = this.zpp_inner.inner.head.elt;
		if(ret.outer == null) {
			ret.outer = new Vec2();
			var o1 = ret.outer.zpp_inner;
			if(o1.outer != null) {
				o1.outer.zpp_inner = null;
				o1.outer = null;
			}
			o1._isimmutable = null;
			o1._validate = null;
			o1._invalidate = null;
			o1.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = o1;
			ret.outer.zpp_inner = ret;
		}
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	}
	this.zpp_inner.invalidate();
	if(ret.outer == null) {
		ret.outer = new Vec2();
		var o2 = ret.outer.zpp_inner;
		if(o2.outer != null) {
			o2.outer.zpp_inner = null;
			o2.outer = null;
		}
		o2._isimmutable = null;
		o2._validate = null;
		o2._invalidate = null;
		o2.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = o2;
		ret.outer.zpp_inner = ret;
	}
	return ret.outer;
};
Vec2List.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) {
		return this.push(obj);
	} else {
		return this.unshift(obj);
	}
};
Vec2List.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_vm();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(obj);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.remove(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
	}
	return ret;
};
Vec2List.prototype.clear = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + "List is immutable");
	}
	if(this.zpp_inner.reverse_flag) {
		while(!this.empty()) this.pop();
	} else {
		while(!this.empty()) this.shift();
	}
};
Vec2List.prototype.empty = function() {
	return this.zpp_gl() == 0;
};
Vec2List.prototype.iterator = function() {
	this.zpp_vm();
	return Vec2Iterator.get(this);
};
Vec2List.prototype.copy = function(deep) {
	if(deep == null) {
		deep = false;
	}
	var ret = new Vec2List();
	var _g = this.iterator();
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var length = _g.zpp_inner.zpp_gl();
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = Vec2Iterator.zpp_pool;
			Vec2Iterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		var tmp1;
		if(deep) {
			if(i != null && i.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			if(i.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = i.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			var x = i.zpp_inner.x;
			if(i.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = i.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			var y = i.zpp_inner.y;
			if(x != x || y != y) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var ret1;
			if(ZPP_PubPool.poolVec2 == null) {
				ret1 = new Vec2();
			} else {
				ret1 = ZPP_PubPool.poolVec2;
				ZPP_PubPool.poolVec2 = ret1.zpp_pool;
				ret1.zpp_pool = null;
				ret1.zpp_disp = false;
				if(ret1 == ZPP_PubPool.nextVec2) {
					ZPP_PubPool.nextVec2 = null;
				}
			}
			if(ret1.zpp_inner == null) {
				var ret2;
				if(ZPP_Vec2.zpp_pool == null) {
					ret2 = new ZPP_Vec2();
				} else {
					ret2 = ZPP_Vec2.zpp_pool;
					ZPP_Vec2.zpp_pool = ret2.next;
					ret2.next = null;
				}
				ret2.weak = false;
				ret2._immutable = false;
				ret2.x = x;
				ret2.y = y;
				ret1.zpp_inner = ret2;
				ret1.zpp_inner.outer = ret1;
			} else {
				if(ret1 != null && ret1.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret1.zpp_inner;
				if(_this2._immutable) {
					throw new js._Boot.HaxeError("Error: Vec2 is immutable");
				}
				if(_this2._isimmutable != null) {
					_this2._isimmutable();
				}
				if(x != x || y != y) {
					throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
				}
				var tmp2;
				if(ret1 != null && ret1.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this3 = ret1.zpp_inner;
				if(_this3._validate != null) {
					_this3._validate();
				}
				if(ret1.zpp_inner.x == x) {
					if(ret1 != null && ret1.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this4 = ret1.zpp_inner;
					if(_this4._validate != null) {
						_this4._validate();
					}
					tmp2 = ret1.zpp_inner.y == y;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					ret1.zpp_inner.x = x;
					ret1.zpp_inner.y = y;
					var _this5 = ret1.zpp_inner;
					if(_this5._invalidate != null) {
						_this5._invalidate(_this5);
					}
				}
			}
			ret1.zpp_inner.weak = false;
			tmp1 = ret1;
		} else {
			tmp1 = i;
		}
		ret.push(tmp1);
	}
	return ret;
};
Vec2List.prototype.merge = function(xs) {
	if(xs == null) {
		throw new js._Boot.HaxeError("Error: Cannot merge with null list");
	}
	var _g = xs.iterator();
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var length = _g.zpp_inner.zpp_gl();
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = Vec2Iterator.zpp_pool;
			Vec2Iterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			this.add(x);
		}
	}
};
Vec2List.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var _g = this.iterator();
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var length = _g.zpp_inner.zpp_gl();
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = Vec2Iterator.zpp_pool;
			Vec2Iterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) {
			ret += ",";
		}
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
};
Vec2List.prototype.foreach = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot execute null on list elements");
	}
	var it = this.iterator();
	while(true) {
		it.zpp_inner.zpp_inner.valmod();
		var length = it.zpp_inner.zpp_gl();
		it.zpp_critical = true;
		var tmp;
		if(it.zpp_i < length) {
			tmp = true;
		} else {
			it.zpp_next = Vec2Iterator.zpp_pool;
			Vec2Iterator.zpp_pool = it;
			it.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		try {
			it.zpp_critical = false;
			lambda(it.zpp_inner.at(it.zpp_i++));
		} catch( e ) {
			it.zpp_next = Vec2Iterator.zpp_pool;
			Vec2Iterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
	}
	return this;
};
Vec2List.prototype.filter = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot select elements of list with null");
	}
	var i = 0;
	while(i < this.zpp_gl()) {
		var x = this.at(i);
		try {
			if(lambda(x)) {
				++i;
			} else {
				this.remove(x);
			}
		} catch( e ) {
			break;
		}
	}
	return this;
};
Vec2List.prototype.__class__ = Vec2List;
var Vec3 = nape.geom.Vec3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.zpp_pool = null;
	this.zpp_inner = null;
	this.zpp_inner = new ZPP_Vec3();
	this.zpp_inner.outer = this;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: Vec3 is immutable");
	}
	this.zpp_inner.x = x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: Vec3 is immutable");
	}
	this.zpp_inner.y = y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: Vec3 is immutable");
	}
	this.zpp_inner.z = z;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this2 = this.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
};
Vec3.__name__ = ["nape","geom","Vec3"];
Vec3.get = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var ret;
	if(ZPP_PubPool.poolVec3 == null) {
		ret = new Vec3();
	} else {
		ret = ZPP_PubPool.poolVec3;
		ZPP_PubPool.poolVec3 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec3) {
			ZPP_PubPool.nextVec3 = null;
		}
	}
	ret.setxyz(x,y,z);
	ret.zpp_inner.immutable = false;
	ret.zpp_inner._validate = null;
	return ret;
};
Vec3.prototype.zpp_inner = null;
Vec3.prototype.zpp_pool = null;
Vec3.prototype.zpp_disp = null;
Vec3.prototype.get_x = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	return this.zpp_inner.x;
};
Vec3.prototype.set_x = function(x) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: Vec3 is immutable");
	}
	this.zpp_inner.x = x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	return this.zpp_inner.x;
};
Vec3.prototype.get_y = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	return this.zpp_inner.y;
};
Vec3.prototype.set_y = function(y) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: Vec3 is immutable");
	}
	this.zpp_inner.y = y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	return this.zpp_inner.y;
};
Vec3.prototype.get_z = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	return this.zpp_inner.z;
};
Vec3.prototype.set_z = function(z) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: Vec3 is immutable");
	}
	this.zpp_inner.z = z;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	return this.zpp_inner.z;
};
Vec3.prototype.dispose = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: This Vec3 is not disposable");
	}
	var o = this;
	o.zpp_pool = null;
	if(ZPP_PubPool.nextVec3 != null) {
		ZPP_PubPool.nextVec3.zpp_pool = o;
	} else {
		ZPP_PubPool.poolVec3 = o;
	}
	ZPP_PubPool.nextVec3 = o;
	o.zpp_disp = true;
};
Vec3.prototype.get_length = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp = this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var tmp1 = tmp * this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this2 = this.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var tmp2 = this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this3 = this.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var tmp3 = tmp1 + tmp2 * this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this4 = this.zpp_inner;
	if(_this4._validate != null) {
		_this4._validate();
	}
	var tmp4 = this.zpp_inner.z;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this5 = this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	return Math.sqrt(tmp3 + tmp4 * this.zpp_inner.z);
};
Vec3.prototype.set_length = function(length) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(length != length) {
		throw new js._Boot.HaxeError("Error: Vec3::length cannot be NaN");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp = this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var tmp1 = tmp * this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this2 = this.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var tmp2 = this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this3 = this.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var tmp3 = tmp1 + tmp2 * this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this4 = this.zpp_inner;
	if(_this4._validate != null) {
		_this4._validate();
	}
	var tmp4 = this.zpp_inner.z;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this5 = this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(tmp3 + tmp4 * this.zpp_inner.z == 0) {
		throw new js._Boot.HaxeError("Error: Cannot set length of a zero vector");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this6 = this.zpp_inner;
	if(_this6._validate != null) {
		_this6._validate();
	}
	var tmp5 = this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this7 = this.zpp_inner;
	if(_this7._validate != null) {
		_this7._validate();
	}
	var tmp6 = tmp5 * this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this8 = this.zpp_inner;
	if(_this8._validate != null) {
		_this8._validate();
	}
	var tmp7 = this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this9 = this.zpp_inner;
	if(_this9._validate != null) {
		_this9._validate();
	}
	var tmp8 = tmp6 + tmp7 * this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this10 = this.zpp_inner;
	if(_this10._validate != null) {
		_this10._validate();
	}
	var tmp9 = this.zpp_inner.z;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this11 = this.zpp_inner;
	if(_this11._validate != null) {
		_this11._validate();
	}
	var t = length / Math.sqrt(tmp8 + tmp9 * this.zpp_inner.z);
	var _g = this;
	if(_g != null && _g.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this12 = _g.zpp_inner;
	if(_this12._validate != null) {
		_this12._validate();
	}
	if(_g != null && _g.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(_g.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: Vec3 is immutable");
	}
	_g.zpp_inner.x = _g.zpp_inner.x * t;
	if(_g != null && _g.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this13 = _g.zpp_inner;
	if(_this13._validate != null) {
		_this13._validate();
	}
	var _g1 = this;
	if(_g1 != null && _g1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this14 = _g1.zpp_inner;
	if(_this14._validate != null) {
		_this14._validate();
	}
	if(_g1 != null && _g1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(_g1.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: Vec3 is immutable");
	}
	_g1.zpp_inner.y = _g1.zpp_inner.y * t;
	if(_g1 != null && _g1.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this15 = _g1.zpp_inner;
	if(_this15._validate != null) {
		_this15._validate();
	}
	var _g2 = this;
	if(_g2 != null && _g2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this16 = _g2.zpp_inner;
	if(_this16._validate != null) {
		_this16._validate();
	}
	if(_g2 != null && _g2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(_g2.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: Vec3 is immutable");
	}
	_g2.zpp_inner.z = _g2.zpp_inner.z * t;
	if(_g2 != null && _g2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this17 = _g2.zpp_inner;
	if(_this17._validate != null) {
		_this17._validate();
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this18 = this.zpp_inner;
	if(_this18._validate != null) {
		_this18._validate();
	}
	var tmp10 = this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this19 = this.zpp_inner;
	if(_this19._validate != null) {
		_this19._validate();
	}
	var tmp11 = tmp10 * this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this20 = this.zpp_inner;
	if(_this20._validate != null) {
		_this20._validate();
	}
	var tmp12 = this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this21 = this.zpp_inner;
	if(_this21._validate != null) {
		_this21._validate();
	}
	var tmp13 = tmp11 + tmp12 * this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this22 = this.zpp_inner;
	if(_this22._validate != null) {
		_this22._validate();
	}
	var tmp14 = this.zpp_inner.z;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this23 = this.zpp_inner;
	if(_this23._validate != null) {
		_this23._validate();
	}
	return Math.sqrt(tmp13 + tmp14 * this.zpp_inner.z);
};
Vec3.prototype.lsq = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp = this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var tmp1 = tmp * this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this2 = this.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var tmp2 = this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this3 = this.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var tmp3 = tmp1 + tmp2 * this.zpp_inner.y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this4 = this.zpp_inner;
	if(_this4._validate != null) {
		_this4._validate();
	}
	var tmp4 = this.zpp_inner.z;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this5 = this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	return tmp3 + tmp4 * this.zpp_inner.z;
};
Vec3.prototype.set = function(vector) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(vector == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec3");
	}
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this = vector.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp = vector.zpp_inner.x;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this1 = vector.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var tmp1 = vector.zpp_inner.y;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this2 = vector.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	return this.setxyz(tmp,tmp1,vector.zpp_inner.z);
};
Vec3.prototype.setxyz = function(x,y,z) {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: Vec3 is immutable");
	}
	this.zpp_inner.x = x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: Vec3 is immutable");
	}
	this.zpp_inner.y = y;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: Vec3 is immutable");
	}
	this.zpp_inner.z = z;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this2 = this.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	return this;
};
Vec3.prototype.xy = function(weak) {
	if(weak == null) {
		weak = false;
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var x = this.zpp_inner.x;
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var y = this.zpp_inner.y;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this2 = ret.zpp_inner;
		if(_this2._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this2._isimmutable != null) {
			_this2._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this3 = ret.zpp_inner;
		if(_this3._validate != null) {
			_this3._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this4 = ret.zpp_inner;
			if(_this4._validate != null) {
				_this4._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this5 = ret.zpp_inner;
			if(_this5._invalidate != null) {
				_this5._invalidate(_this5);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
Vec3.prototype.toString = function() {
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this = this.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp = "{ x: " + this.zpp_inner.x + " y: ";
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this1 = this.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var tmp1 = tmp + this.zpp_inner.y + " z: ";
	if(this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
	}
	var _this2 = this.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	return tmp1 + this.zpp_inner.z + " }";
};
Vec3.prototype.__class__ = Vec3;
var Winding = nape.geom.Winding = function() {
	if(!ZPP_Flags.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "Winding" + " derp!");
	}
};
Winding.__name__ = ["nape","geom","Winding"];
Winding.UNDEFINED = null;
Winding.get_UNDEFINED = function() {
	if(ZPP_Flags.Winding_UNDEFINED == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.Winding_UNDEFINED = new Winding();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.Winding_UNDEFINED;
};
Winding.CLOCKWISE = null;
Winding.get_CLOCKWISE = function() {
	if(ZPP_Flags.Winding_CLOCKWISE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.Winding_CLOCKWISE = new Winding();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.Winding_CLOCKWISE;
};
Winding.ANTICLOCKWISE = null;
Winding.get_ANTICLOCKWISE = function() {
	if(ZPP_Flags.Winding_ANTICLOCKWISE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.Winding_ANTICLOCKWISE = new Winding();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.Winding_ANTICLOCKWISE;
};
Winding.prototype.toString = function() {
	if(ZPP_Flags.Winding_UNDEFINED == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.Winding_UNDEFINED = new Winding();
		ZPP_Flags.internal = false;
	}
	if(this == ZPP_Flags.Winding_UNDEFINED) {
		return "UNDEFINED";
	} else {
		if(ZPP_Flags.Winding_CLOCKWISE == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.Winding_CLOCKWISE = new Winding();
			ZPP_Flags.internal = false;
		}
		if(this == ZPP_Flags.Winding_CLOCKWISE) {
			return "CLOCKWISE";
		} else {
			if(ZPP_Flags.Winding_ANTICLOCKWISE == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.Winding_ANTICLOCKWISE = new Winding();
				ZPP_Flags.internal = false;
			}
			if(this == ZPP_Flags.Winding_ANTICLOCKWISE) {
				return "ANTICLOCKWISE";
			} else {
				return "";
			}
		}
	}
};
Winding.prototype.__class__ = Winding;
var Interactor = nape.phys.Interactor = function() {
	this.zpp_inner_i = null;
	if(!Interactor.zpp_internalAlloc) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate an Interactor, only Shape/Body/Compound");
	}
};
Interactor.__name__ = ["nape","phys","Interactor"];
Interactor.prototype.zpp_inner_i = null;
Interactor.prototype.get_id = function() {
	return this.zpp_inner_i.id;
};
Interactor.prototype.get_userData = function() {
	if(this.zpp_inner_i.userData == null) {
		this.zpp_inner_i.userData = { };
	}
	return this.zpp_inner_i.userData;
};
Interactor.prototype.isShape = function() {
	return this.zpp_inner_i.ishape != null;
};
Interactor.prototype.isBody = function() {
	return this.zpp_inner_i.ibody != null;
};
Interactor.prototype.isCompound = function() {
	return this.zpp_inner_i.icompound != null;
};
Interactor.prototype.get_castShape = function() {
	if(this.zpp_inner_i.ishape != null) {
		return this.zpp_inner_i.ishape.outer;
	} else {
		return null;
	}
};
Interactor.prototype.get_castBody = function() {
	if(this.zpp_inner_i.ibody != null) {
		return this.zpp_inner_i.ibody.outer;
	} else {
		return null;
	}
};
Interactor.prototype.get_castCompound = function() {
	if(this.zpp_inner_i.icompound != null) {
		return this.zpp_inner_i.icompound.outer;
	} else {
		return null;
	}
};
Interactor.prototype.get_group = function() {
	if(this.zpp_inner_i.group == null) {
		return null;
	} else {
		return this.zpp_inner_i.group.outer;
	}
};
Interactor.prototype.set_group = function(group) {
	this.zpp_inner_i.immutable_midstep("Interactor::group");
	this.zpp_inner_i.setGroup(group == null?null:group.zpp_inner);
	if(this.zpp_inner_i.group == null) {
		return null;
	} else {
		return this.zpp_inner_i.group.outer;
	}
};
Interactor.prototype.get_cbTypes = function() {
	if(this.zpp_inner_i.wrap_cbTypes == null) {
		this.zpp_inner_i.setupcbTypes();
	}
	return this.zpp_inner_i.wrap_cbTypes;
};
Interactor.prototype.toString = function() {
	return "";
};
Interactor.prototype.__class__ = Interactor;
var Body = nape.phys.Body = function(type,position) {
	this.debugDraw = true;
	this.zpp_inner = null;
	Interactor.zpp_internalAlloc = true;
	Interactor.call(this);
	Interactor.zpp_internalAlloc = false;
	this.zpp_inner = new ZPP_Body();
	this.zpp_inner.outer = this;
	this.zpp_inner.outer_i = this;
	this.zpp_inner_i = this.zpp_inner;
	if(position != null) {
		if(position != null && position.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		if(position != null && position.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = position.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		this.zpp_inner.posx = position.zpp_inner.x;
		if(position != null && position.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = position.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		this.zpp_inner.posy = position.zpp_inner.y;
	} else {
		this.zpp_inner.posx = 0;
		this.zpp_inner.posy = 0;
	}
	var type1;
	if(type == null) {
		if(ZPP_Flags.BodyType_DYNAMIC == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.BodyType_DYNAMIC = new BodyType();
			ZPP_Flags.internal = false;
		}
		type1 = ZPP_Flags.BodyType_DYNAMIC;
	} else {
		type1 = type;
	}
	this.zpp_inner.immutable_midstep("Body::type");
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	if(ZPP_Body.types[this.zpp_inner.type] != type1) {
		if(type1 == null) {
			throw new js._Boot.HaxeError("Error: Cannot use null BodyType");
		}
		var ntype;
		if(ZPP_Flags.BodyType_DYNAMIC == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.BodyType_DYNAMIC = new BodyType();
			ZPP_Flags.internal = false;
		}
		if(type1 == ZPP_Flags.BodyType_DYNAMIC) {
			ntype = 2;
		} else {
			if(ZPP_Flags.BodyType_KINEMATIC == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.BodyType_KINEMATIC = new BodyType();
				ZPP_Flags.internal = false;
			}
			if(type1 == ZPP_Flags.BodyType_KINEMATIC) {
				ntype = 3;
			} else {
				ntype = 1;
			}
		}
		if(ntype == 1 && this.zpp_inner.space != null) {
			this.zpp_inner.velx = 0;
			this.zpp_inner.vely = 0;
			this.zpp_inner.angvel = 0;
		}
		this.zpp_inner.invalidate_type();
		if(this.zpp_inner.space != null) {
			this.zpp_inner.space.transmitType(this.zpp_inner,ntype);
		} else {
			this.zpp_inner.type = ntype;
		}
	}
	if(position != null) {
		if(position.zpp_inner.weak) {
			if(position != null && position.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = position.zpp_inner;
			if(_this2._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this2._isimmutable != null) {
				_this2._isimmutable();
			}
			if(position.zpp_inner._inuse) {
				throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
			}
			var inner = position.zpp_inner;
			position.zpp_inner.outer = null;
			position.zpp_inner = null;
			position.zpp_pool = null;
			if(ZPP_PubPool.nextVec2 != null) {
				ZPP_PubPool.nextVec2.zpp_pool = position;
			} else {
				ZPP_PubPool.poolVec2 = position;
			}
			ZPP_PubPool.nextVec2 = position;
			position.zpp_disp = true;
			if(inner.outer != null) {
				inner.outer.zpp_inner = null;
				inner.outer = null;
			}
			inner._isimmutable = null;
			inner._validate = null;
			inner._invalidate = null;
			inner.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = inner;
		}
	}
	this.zpp_inner_i.insert_cbtype(ZPP_CbType.ANY_BODY.zpp_inner);
};
Body.__name__ = ["nape","phys","Body"];
Body.__super__ = Interactor;
// for(var k in Interactor.prototype ) Body.prototype[k] = Interactor.prototype[k];
Body.prototype = Object.create(Interactor.prototype);
Body.prototype.zpp_inner = null;
Body.prototype.debugDraw = null;
Body.prototype.get_type = function() {
	return ZPP_Body.types[this.zpp_inner.type];
};
Body.prototype.set_type = function(type) {
	this.zpp_inner.immutable_midstep("Body::type");
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	if(ZPP_Body.types[this.zpp_inner.type] != type) {
		if(type == null) {
			throw new js._Boot.HaxeError("Error: Cannot use null BodyType");
		}
		var ntype;
		if(ZPP_Flags.BodyType_DYNAMIC == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.BodyType_DYNAMIC = new BodyType();
			ZPP_Flags.internal = false;
		}
		if(type == ZPP_Flags.BodyType_DYNAMIC) {
			ntype = 2;
		} else {
			if(ZPP_Flags.BodyType_KINEMATIC == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.BodyType_KINEMATIC = new BodyType();
				ZPP_Flags.internal = false;
			}
			if(type == ZPP_Flags.BodyType_KINEMATIC) {
				ntype = 3;
			} else {
				ntype = 1;
			}
		}
		if(ntype == 1 && this.zpp_inner.space != null) {
			this.zpp_inner.velx = 0;
			this.zpp_inner.vely = 0;
			this.zpp_inner.angvel = 0;
		}
		this.zpp_inner.invalidate_type();
		if(this.zpp_inner.space != null) {
			this.zpp_inner.space.transmitType(this.zpp_inner,ntype);
		} else {
			this.zpp_inner.type = ntype;
		}
	}
	return ZPP_Body.types[this.zpp_inner.type];
};
Body.prototype.get_isBullet = function() {
	return this.zpp_inner.bulletEnabled;
};
Body.prototype.set_isBullet = function(isBullet) {
	this.zpp_inner.bulletEnabled = isBullet;
	return this.zpp_inner.bulletEnabled;
};
Body.prototype.get_disableCCD = function() {
	return this.zpp_inner.disableCCD;
};
Body.prototype.set_disableCCD = function(disableCCD) {
	this.zpp_inner.disableCCD = disableCCD;
	return this.zpp_inner.disableCCD;
};
Body.prototype.integrate = function(deltaTime) {
	if(deltaTime != deltaTime) {
		throw new js._Boot.HaxeError("Cannot integrate by NaN time");
	}
	this.zpp_inner.immutable_midstep("Body::space");
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	if(deltaTime == 0) {
		return this;
	}
	var cur = this.zpp_inner;
	cur.sweepTime = 0;
	cur.sweep_angvel = cur.angvel;
	var delta = deltaTime - cur.sweepTime;
	if(delta != 0) {
		cur.sweepTime = deltaTime;
		cur.posx += cur.velx * delta;
		cur.posy += cur.vely * delta;
		if(cur.angvel != 0) {
			var dr = cur.sweep_angvel * delta;
			cur.rot += dr;
			if(dr * dr > 0.0001) {
				cur.axisx = Math.sin(cur.rot);
				cur.axisy = Math.cos(cur.rot);
			} else {
				var d2 = dr * dr;
				var p = 1 - 0.5 * d2;
				var m = 1 - d2 * d2 / 8;
				var nx = (p * cur.axisx + dr * cur.axisy) * m;
				cur.axisy = (p * cur.axisy - dr * cur.axisx) * m;
				cur.axisx = nx;
			}
		}
	}
	var cx_ite = cur.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		if(s.type == 1) {
			s.polygon.invalidate_gverts();
			s.polygon.invalidate_gaxi();
		}
		s.invalidate_worldCOM();
		cx_ite = cx_ite.next;
	}
	cur.zip_worldCOM = true;
	cur.zip_axis = true;
	var cx_ite1 = cur.shapes.head;
	while(cx_ite1 != null) {
		var s1 = cx_ite1.elt;
		if(s1.type == 1) {
			s1.polygon.invalidate_gverts();
			s1.polygon.invalidate_gaxi();
		}
		s1.invalidate_worldCOM();
		cx_ite1 = cx_ite1.next;
	}
	cur.zip_worldCOM = true;
	cur.sweepTime = 0;
	return this;
};
Body.prototype.isStatic = function() {
	return this.zpp_inner.type == 1;
};
Body.prototype.isDynamic = function() {
	return this.zpp_inner.type == 2;
};
Body.prototype.isKinematic = function() {
	return this.zpp_inner.type == 3;
};
Body.prototype.get_shapes = function() {
	return this.zpp_inner.wrap_shapes;
};
Body.prototype.get_compound = function() {
	if(this.zpp_inner.compound == null) {
		return null;
	} else {
		return this.zpp_inner.compound.outer;
	}
};
Body.prototype.set_compound = function(compound) {
	if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != compound) {
		if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != null) {
			(this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer).zpp_inner.wrap_bodies.remove(this);
		}
		if(compound != null) {
			var _this = compound.zpp_inner.wrap_bodies;
			if(_this.zpp_inner.reverse_flag) {
				_this.push(this);
			} else {
				_this.unshift(this);
			}
		}
	}
	if(this.zpp_inner.compound == null) {
		return null;
	} else {
		return this.zpp_inner.compound.outer;
	}
};
Body.prototype.get_space = function() {
	if(this.zpp_inner.space == null) {
		return null;
	} else {
		return this.zpp_inner.space.outer;
	}
};
Body.prototype.set_space = function(space) {
	if(this.zpp_inner.compound != null) {
		throw new js._Boot.HaxeError("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
	}
	this.zpp_inner.immutable_midstep("Body::space");
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			this.zpp_inner.component.woken = false;
		}
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			(this.zpp_inner.space == null?null:this.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(this);
		}
		if(space != null) {
			var _this = space.zpp_inner.wrap_bodies;
			if(_this.zpp_inner.reverse_flag) {
				_this.push(this);
			} else {
				_this.unshift(this);
			}
		}
	}
	if(this.zpp_inner.space == null) {
		return null;
	} else {
		return this.zpp_inner.space.outer;
	}
};
Body.prototype.get_arbiters = function() {
	if(this.zpp_inner.wrap_arbiters == null) {
		this.zpp_inner.wrap_arbiters = ZPP_ArbiterList.get(this.zpp_inner.arbiters,true);
	}
	return this.zpp_inner.wrap_arbiters;
};
Body.prototype.get_isSleeping = function() {
	if(this.zpp_inner.space == null) {
		throw new js._Boot.HaxeError("Error: isSleeping makes no sense if the object is not contained within a Space");
	}
	return this.zpp_inner.component.sleeping;
};
Body.prototype.get_constraints = function() {
	if(this.zpp_inner.wrap_constraints == null) {
		this.zpp_inner.wrap_constraints = ZPP_ConstraintList.get(this.zpp_inner.constraints,true);
	}
	return this.zpp_inner.wrap_constraints;
};
Body.prototype.copy = function() {
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world cannot be copied");
	}
	return this.zpp_inner.copy();
};
Body.prototype.get_position = function() {
	if(this.zpp_inner.wrap_pos == null) {
		this.zpp_inner.setupPosition();
	}
	return this.zpp_inner.wrap_pos;
};
Body.prototype.set_position = function(position) {
	if(position != null && position.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(position == null) {
		throw new js._Boot.HaxeError("Error: Body::" + "position" + " cannot be null");
	}
	if(this.zpp_inner.wrap_pos == null) {
		this.zpp_inner.setupPosition();
	}
	var _this = this.zpp_inner.wrap_pos;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(position != null && position.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(position == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(position != null && position.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = position.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = position.zpp_inner.x;
	if(position != null && position.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = position.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = position.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(position.zpp_inner.weak) {
		if(position != null && position.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = position.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(position.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = position.zpp_inner;
		position.zpp_inner.outer = null;
		position.zpp_inner = null;
		position.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = position;
		} else {
			ZPP_PubPool.poolVec2 = position;
		}
		ZPP_PubPool.nextVec2 = position;
		position.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner.wrap_pos == null) {
		this.zpp_inner.setupPosition();
	}
	return this.zpp_inner.wrap_pos;
};
Body.prototype.get_velocity = function() {
	if(this.zpp_inner.wrap_vel == null) {
		this.zpp_inner.setupVelocity();
	}
	return this.zpp_inner.wrap_vel;
};
Body.prototype.set_velocity = function(velocity) {
	if(velocity != null && velocity.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(velocity == null) {
		throw new js._Boot.HaxeError("Error: Body::" + "velocity" + " cannot be null");
	}
	if(this.zpp_inner.wrap_vel == null) {
		this.zpp_inner.setupVelocity();
	}
	var _this = this.zpp_inner.wrap_vel;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(velocity != null && velocity.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(velocity == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(velocity != null && velocity.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = velocity.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = velocity.zpp_inner.x;
	if(velocity != null && velocity.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = velocity.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = velocity.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(velocity.zpp_inner.weak) {
		if(velocity != null && velocity.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = velocity.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(velocity.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = velocity.zpp_inner;
		velocity.zpp_inner.outer = null;
		velocity.zpp_inner = null;
		velocity.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = velocity;
		} else {
			ZPP_PubPool.poolVec2 = velocity;
		}
		ZPP_PubPool.nextVec2 = velocity;
		velocity.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner.wrap_vel == null) {
		this.zpp_inner.setupVelocity();
	}
	return this.zpp_inner.wrap_vel;
};
Body.prototype.setVelocityFromTarget = function(targetPosition,targetRotation,deltaTime) {
	if(targetPosition != null && targetPosition.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(targetPosition == null) {
		throw new js._Boot.HaxeError("Cannot set velocity for null target position");
	}
	if(deltaTime == 0) {
		throw new js._Boot.HaxeError("deltaTime cannot be 0 for setVelocityFromTarget");
	}
	var idt = 1 / deltaTime;
	if(this.zpp_inner.wrap_vel == null) {
		this.zpp_inner.setupVelocity();
	}
	var _this = this.zpp_inner.wrap_vel;
	if(this.zpp_inner.wrap_pos == null) {
		this.zpp_inner.setupPosition();
	}
	var vector = targetPosition.sub(this.zpp_inner.wrap_pos,true).muleq(idt);
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(vector == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = vector.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = vector.zpp_inner.x;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = vector.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = vector.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(vector.zpp_inner.weak) {
		if(vector != null && vector.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = vector.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(vector.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = vector.zpp_inner;
		vector.zpp_inner.outer = null;
		vector.zpp_inner = null;
		vector.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = vector;
		} else {
			ZPP_PubPool.poolVec2 = vector;
		}
		ZPP_PubPool.nextVec2 = vector;
		vector.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	var angularVel = (targetRotation - this.zpp_inner.rot) * idt;
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	if(this.zpp_inner.angvel != angularVel) {
		if(angularVel != angularVel) {
			throw new js._Boot.HaxeError("Error: Body::angularVel cannot be NaN");
		}
		if(this.zpp_inner.type == 1) {
			throw new js._Boot.HaxeError("Error: A static object cannot be given a velocity");
		}
		this.zpp_inner.angvel = angularVel;
		this.zpp_inner.wake();
	}
	if(targetPosition.zpp_inner.weak) {
		if(targetPosition != null && targetPosition.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this9 = targetPosition.zpp_inner;
		if(_this9._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this9._isimmutable != null) {
			_this9._isimmutable();
		}
		if(targetPosition.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = targetPosition.zpp_inner;
		targetPosition.zpp_inner.outer = null;
		targetPosition.zpp_inner = null;
		targetPosition.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = targetPosition;
		} else {
			ZPP_PubPool.poolVec2 = targetPosition;
		}
		ZPP_PubPool.nextVec2 = targetPosition;
		targetPosition.zpp_disp = true;
		if(inner1.outer != null) {
			inner1.outer.zpp_inner = null;
			inner1.outer = null;
		}
		inner1._isimmutable = null;
		inner1._validate = null;
		inner1._invalidate = null;
		inner1.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner1;
	}
	return this;
};
Body.prototype.get_kinematicVel = function() {
	if(this.zpp_inner.wrap_kinvel == null) {
		this.zpp_inner.setupkinvel();
	}
	return this.zpp_inner.wrap_kinvel;
};
Body.prototype.set_kinematicVel = function(kinematicVel) {
	if(kinematicVel != null && kinematicVel.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(kinematicVel == null) {
		throw new js._Boot.HaxeError("Error: Body::" + "kinematicVel" + " cannot be null");
	}
	if(this.zpp_inner.wrap_kinvel == null) {
		this.zpp_inner.setupkinvel();
	}
	var _this = this.zpp_inner.wrap_kinvel;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(kinematicVel != null && kinematicVel.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(kinematicVel == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(kinematicVel != null && kinematicVel.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = kinematicVel.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = kinematicVel.zpp_inner.x;
	if(kinematicVel != null && kinematicVel.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = kinematicVel.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = kinematicVel.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(kinematicVel.zpp_inner.weak) {
		if(kinematicVel != null && kinematicVel.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = kinematicVel.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(kinematicVel.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = kinematicVel.zpp_inner;
		kinematicVel.zpp_inner.outer = null;
		kinematicVel.zpp_inner = null;
		kinematicVel.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = kinematicVel;
		} else {
			ZPP_PubPool.poolVec2 = kinematicVel;
		}
		ZPP_PubPool.nextVec2 = kinematicVel;
		kinematicVel.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner.wrap_kinvel == null) {
		this.zpp_inner.setupkinvel();
	}
	return this.zpp_inner.wrap_kinvel;
};
Body.prototype.get_surfaceVel = function() {
	if(this.zpp_inner.wrap_svel == null) {
		this.zpp_inner.setupsvel();
	}
	return this.zpp_inner.wrap_svel;
};
Body.prototype.set_surfaceVel = function(surfaceVel) {
	if(surfaceVel != null && surfaceVel.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(surfaceVel == null) {
		throw new js._Boot.HaxeError("Error: Body::" + "surfaceVel" + " cannot be null");
	}
	if(this.zpp_inner.wrap_svel == null) {
		this.zpp_inner.setupsvel();
	}
	var _this = this.zpp_inner.wrap_svel;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(surfaceVel != null && surfaceVel.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(surfaceVel == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(surfaceVel != null && surfaceVel.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = surfaceVel.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = surfaceVel.zpp_inner.x;
	if(surfaceVel != null && surfaceVel.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = surfaceVel.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = surfaceVel.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(surfaceVel.zpp_inner.weak) {
		if(surfaceVel != null && surfaceVel.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = surfaceVel.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(surfaceVel.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = surfaceVel.zpp_inner;
		surfaceVel.zpp_inner.outer = null;
		surfaceVel.zpp_inner = null;
		surfaceVel.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = surfaceVel;
		} else {
			ZPP_PubPool.poolVec2 = surfaceVel;
		}
		ZPP_PubPool.nextVec2 = surfaceVel;
		surfaceVel.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner.wrap_svel == null) {
		this.zpp_inner.setupsvel();
	}
	return this.zpp_inner.wrap_svel;
};
Body.prototype.get_force = function() {
	if(this.zpp_inner.wrap_force == null) {
		this.zpp_inner.setupForce();
	}
	return this.zpp_inner.wrap_force;
};
Body.prototype.set_force = function(force) {
	if(force != null && force.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(force == null) {
		throw new js._Boot.HaxeError("Error: Body::" + "force" + " cannot be null");
	}
	if(this.zpp_inner.wrap_force == null) {
		this.zpp_inner.setupForce();
	}
	var _this = this.zpp_inner.wrap_force;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(force != null && force.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(force == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(force != null && force.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = force.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = force.zpp_inner.x;
	if(force != null && force.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = force.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = force.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(force.zpp_inner.weak) {
		if(force != null && force.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = force.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(force.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = force.zpp_inner;
		force.zpp_inner.outer = null;
		force.zpp_inner = null;
		force.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = force;
		} else {
			ZPP_PubPool.poolVec2 = force;
		}
		ZPP_PubPool.nextVec2 = force;
		force.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner.wrap_force == null) {
		this.zpp_inner.setupForce();
	}
	return this.zpp_inner.wrap_force;
};
Body.prototype.get_constraintVelocity = function() {
	if(this.zpp_inner.wrapcvel == null) {
		this.zpp_inner.setup_cvel();
	}
	return this.zpp_inner.wrapcvel;
};
Body.prototype.get_rotation = function() {
	return this.zpp_inner.rot;
};
Body.prototype.set_rotation = function(rotation) {
	this.zpp_inner.immutable_midstep("Body::rotation");
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	if(this.zpp_inner.type == 1 && this.zpp_inner.space != null) {
		throw new js._Boot.HaxeError("Error: Static objects cannot be rotated once inside a Space");
	}
	if(this.zpp_inner.rot != rotation) {
		if(rotation != rotation) {
			throw new js._Boot.HaxeError("Error: Body::rotation cannot be NaN");
		}
		this.zpp_inner.rot = rotation;
		var _this = this.zpp_inner;
		_this.zip_axis = true;
		var cx_ite = _this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.type == 1) {
				s.polygon.invalidate_gverts();
				s.polygon.invalidate_gaxi();
			}
			s.invalidate_worldCOM();
			cx_ite = cx_ite.next;
		}
		_this.zip_worldCOM = true;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.rot;
};
Body.prototype.get_angularVel = function() {
	return this.zpp_inner.angvel;
};
Body.prototype.set_angularVel = function(angularVel) {
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	if(this.zpp_inner.angvel != angularVel) {
		if(angularVel != angularVel) {
			throw new js._Boot.HaxeError("Error: Body::angularVel cannot be NaN");
		}
		if(this.zpp_inner.type == 1) {
			throw new js._Boot.HaxeError("Error: A static object cannot be given a velocity");
		}
		this.zpp_inner.angvel = angularVel;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.angvel;
};
Body.prototype.get_kinAngVel = function() {
	return this.zpp_inner.kinangvel;
};
Body.prototype.set_kinAngVel = function(kinAngVel) {
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	if(this.zpp_inner.kinangvel != kinAngVel) {
		if(kinAngVel != kinAngVel) {
			throw new js._Boot.HaxeError("Error: Body::kinAngVel cannot be NaN");
		}
		this.zpp_inner.kinangvel = kinAngVel;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.kinangvel;
};
Body.prototype.get_torque = function() {
	return this.zpp_inner.torque;
};
Body.prototype.set_torque = function(torque) {
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	if(this.zpp_inner.type != 2) {
		throw new js._Boot.HaxeError("Error: Non-dynamic body cannot have torque applied.");
	}
	if(torque != torque) {
		throw new js._Boot.HaxeError("Error: Body::torque cannot be NaN");
	}
	if(this.zpp_inner.torque != torque) {
		this.zpp_inner.torque = torque;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.torque;
};
Body.prototype.get_bounds = function() {
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world has no bounds");
	}
	return this.zpp_inner.aabb.wrapper();
};
Body.prototype.get_allowMovement = function() {
	return !this.zpp_inner.nomove;
};
Body.prototype.set_allowMovement = function(allowMovement) {
	this.zpp_inner.immutable_midstep("Body::" + (allowMovement == null?"null":"" + allowMovement));
	if(!this.zpp_inner.nomove != allowMovement) {
		this.zpp_inner.nomove = !allowMovement;
		this.zpp_inner.invalidate_mass();
	}
	return !this.zpp_inner.nomove;
};
Body.prototype.get_allowRotation = function() {
	return !this.zpp_inner.norotate;
};
Body.prototype.set_allowRotation = function(allowRotation) {
	this.zpp_inner.immutable_midstep("Body::" + (allowRotation == null?"null":"" + allowRotation));
	if(!this.zpp_inner.norotate != allowRotation) {
		this.zpp_inner.norotate = !allowRotation;
		this.zpp_inner.invalidate_inertia();
	}
	return !this.zpp_inner.norotate;
};
Body.prototype.get_massMode = function() {
	if(ZPP_Flags.MassMode_DEFAULT == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.MassMode_DEFAULT = new MassMode();
		ZPP_Flags.internal = false;
	}
	var tmp = ZPP_Flags.MassMode_DEFAULT;
	if(ZPP_Flags.MassMode_FIXED == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.MassMode_FIXED = new MassMode();
		ZPP_Flags.internal = false;
	}
	return [tmp,ZPP_Flags.MassMode_FIXED][this.zpp_inner.massMode];
};
Body.prototype.set_massMode = function(massMode) {
	this.zpp_inner.immutable_midstep("Body::massMode");
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	if(massMode == null) {
		throw new js._Boot.HaxeError("Error: cannot use null massMode");
	}
	var tmp;
	if(ZPP_Flags.MassMode_DEFAULT == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.MassMode_DEFAULT = new MassMode();
		ZPP_Flags.internal = false;
	}
	if(massMode == ZPP_Flags.MassMode_DEFAULT) {
		tmp = 0;
	} else {
		tmp = 1;
	}
	this.zpp_inner.massMode = tmp;
	this.zpp_inner.invalidate_mass();
	if(ZPP_Flags.MassMode_DEFAULT == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.MassMode_DEFAULT = new MassMode();
		ZPP_Flags.internal = false;
	}
	var tmp1 = ZPP_Flags.MassMode_DEFAULT;
	if(ZPP_Flags.MassMode_FIXED == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.MassMode_FIXED = new MassMode();
		ZPP_Flags.internal = false;
	}
	return [tmp1,ZPP_Flags.MassMode_FIXED][this.zpp_inner.massMode];
};
Body.prototype.get_constraintMass = function() {
	if(!this.zpp_inner.world) {
		this.zpp_inner.validate_mass();
	}
	return this.zpp_inner.smass;
};
Body.prototype.get_mass = function() {
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world has no mass");
	}
	this.zpp_inner.validate_mass();
	if(this.zpp_inner.massMode == 0 && this.zpp_inner.shapes.head == null) {
		throw new js._Boot.HaxeError("Error: Given current mass mode, Body::mass only makes sense if it contains shapes");
	}
	return this.zpp_inner.cmass;
};
Body.prototype.set_mass = function(mass) {
	this.zpp_inner.immutable_midstep("Body::mass");
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	if(mass != mass) {
		throw new js._Boot.HaxeError("Error: Mass cannot be NaN");
	}
	if(mass <= 0) {
		throw new js._Boot.HaxeError("Error: Mass must be strictly positive");
	}
	if(mass >= Infinity) {
		throw new js._Boot.HaxeError("Error: Mass cannot be infinite, use allowMovement = false instead");
	}
	this.zpp_inner.massMode = 1;
	this.zpp_inner.cmass = mass;
	this.zpp_inner.invalidate_mass();
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world has no mass");
	}
	this.zpp_inner.validate_mass();
	if(this.zpp_inner.massMode == 0 && this.zpp_inner.shapes.head == null) {
		throw new js._Boot.HaxeError("Error: Given current mass mode, Body::mass only makes sense if it contains shapes");
	}
	return this.zpp_inner.cmass;
};
Body.prototype.get_gravMassMode = function() {
	if(ZPP_Flags.GravMassMode_DEFAULT == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.GravMassMode_DEFAULT = new GravMassMode();
		ZPP_Flags.internal = false;
	}
	var tmp = ZPP_Flags.GravMassMode_DEFAULT;
	if(ZPP_Flags.GravMassMode_FIXED == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.GravMassMode_FIXED = new GravMassMode();
		ZPP_Flags.internal = false;
	}
	var tmp1 = ZPP_Flags.GravMassMode_FIXED;
	if(ZPP_Flags.GravMassMode_SCALED == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.GravMassMode_SCALED = new GravMassMode();
		ZPP_Flags.internal = false;
	}
	return [tmp,tmp1,ZPP_Flags.GravMassMode_SCALED][this.zpp_inner.massMode];
};
Body.prototype.set_gravMassMode = function(gravMassMode) {
	this.zpp_inner.immutable_midstep("Body::gravMassMode");
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	if(gravMassMode == null) {
		throw new js._Boot.HaxeError("Error: Cannot use null gravMassMode");
	}
	var tmp;
	if(ZPP_Flags.GravMassMode_SCALED == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.GravMassMode_SCALED = new GravMassMode();
		ZPP_Flags.internal = false;
	}
	if(gravMassMode == ZPP_Flags.GravMassMode_SCALED) {
		tmp = 2;
	} else {
		if(ZPP_Flags.GravMassMode_DEFAULT == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.GravMassMode_DEFAULT = new GravMassMode();
			ZPP_Flags.internal = false;
		}
		if(gravMassMode == ZPP_Flags.GravMassMode_DEFAULT) {
			tmp = 0;
		} else {
			tmp = 1;
		}
	}
	this.zpp_inner.gravMassMode = tmp;
	this.zpp_inner.invalidate_gravMass();
	if(ZPP_Flags.GravMassMode_DEFAULT == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.GravMassMode_DEFAULT = new GravMassMode();
		ZPP_Flags.internal = false;
	}
	var tmp1 = ZPP_Flags.GravMassMode_DEFAULT;
	if(ZPP_Flags.GravMassMode_FIXED == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.GravMassMode_FIXED = new GravMassMode();
		ZPP_Flags.internal = false;
	}
	var tmp2 = ZPP_Flags.GravMassMode_FIXED;
	if(ZPP_Flags.GravMassMode_SCALED == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.GravMassMode_SCALED = new GravMassMode();
		ZPP_Flags.internal = false;
	}
	return [tmp1,tmp2,ZPP_Flags.GravMassMode_SCALED][this.zpp_inner.massMode];
};
Body.prototype.get_gravMass = function() {
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world has no gravMass");
	}
	this.zpp_inner.validate_gravMass();
	if(this.zpp_inner.shapes.head == null) {
		if(this.zpp_inner.massMode == 0 && this.zpp_inner.gravMassMode != 1) {
			throw new js._Boot.HaxeError("Error: Given current mass/gravMass modes; Body::gravMass only makes sense if it contains Shapes");
		}
	}
	return this.zpp_inner.gravMass;
};
Body.prototype.set_gravMass = function(gravMass) {
	this.zpp_inner.immutable_midstep("Body::gravMass");
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	if(gravMass != gravMass) {
		throw new js._Boot.HaxeError("Error: gravMass cannot be NaN");
	}
	this.zpp_inner.gravMassMode = 1;
	this.zpp_inner.gravMass = gravMass;
	this.zpp_inner.invalidate_gravMass();
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world has no gravMass");
	}
	this.zpp_inner.validate_gravMass();
	if(this.zpp_inner.shapes.head == null) {
		if(this.zpp_inner.massMode == 0 && this.zpp_inner.gravMassMode != 1) {
			throw new js._Boot.HaxeError("Error: Given current mass/gravMass modes; Body::gravMass only makes sense if it contains Shapes");
		}
	}
	return this.zpp_inner.gravMass;
};
Body.prototype.get_gravMassScale = function() {
	this.zpp_inner.validate_gravMassScale();
	if(this.zpp_inner.shapes.head == null) {
		if(this.zpp_inner.massMode == 0 && this.zpp_inner.gravMassMode != 2) {
			throw new js._Boot.HaxeError("Error: Given current mass/gravMass modes; Body::gravMassScale only makes sense if it contains Shapes");
		}
	}
	return this.zpp_inner.gravMassScale;
};
Body.prototype.set_gravMassScale = function(gravMassScale) {
	this.zpp_inner.immutable_midstep("Body::gravMassScale");
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	if(gravMassScale != gravMassScale) {
		throw new js._Boot.HaxeError("Error: gravMassScale cannot be NaN");
	}
	this.zpp_inner.gravMassMode = 2;
	this.zpp_inner.gravMassScale = gravMassScale;
	this.zpp_inner.invalidate_gravMassScale();
	this.zpp_inner.validate_gravMassScale();
	if(this.zpp_inner.shapes.head == null) {
		if(this.zpp_inner.massMode == 0 && this.zpp_inner.gravMassMode != 2) {
			throw new js._Boot.HaxeError("Error: Given current mass/gravMass modes; Body::gravMassScale only makes sense if it contains Shapes");
		}
	}
	return this.zpp_inner.gravMassScale;
};
Body.prototype.get_inertiaMode = function() {
	if(ZPP_Flags.InertiaMode_DEFAULT == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.InertiaMode_DEFAULT = new InertiaMode();
		ZPP_Flags.internal = false;
	}
	var tmp = ZPP_Flags.InertiaMode_DEFAULT;
	if(ZPP_Flags.InertiaMode_FIXED == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.InertiaMode_FIXED = new InertiaMode();
		ZPP_Flags.internal = false;
	}
	return [tmp,ZPP_Flags.InertiaMode_FIXED][this.zpp_inner.inertiaMode];
};
Body.prototype.set_inertiaMode = function(inertiaMode) {
	this.zpp_inner.immutable_midstep("Body::inertiaMode");
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	if(inertiaMode == null) {
		throw new js._Boot.HaxeError("Error: Cannot use null InertiaMode");
	}
	var tmp;
	if(ZPP_Flags.InertiaMode_FIXED == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.InertiaMode_FIXED = new InertiaMode();
		ZPP_Flags.internal = false;
	}
	if(inertiaMode == ZPP_Flags.InertiaMode_FIXED) {
		tmp = 1;
	} else {
		tmp = 0;
	}
	this.zpp_inner.inertiaMode = tmp;
	this.zpp_inner.invalidate_inertia();
	if(ZPP_Flags.InertiaMode_DEFAULT == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.InertiaMode_DEFAULT = new InertiaMode();
		ZPP_Flags.internal = false;
	}
	var tmp1 = ZPP_Flags.InertiaMode_DEFAULT;
	if(ZPP_Flags.InertiaMode_FIXED == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.InertiaMode_FIXED = new InertiaMode();
		ZPP_Flags.internal = false;
	}
	return [tmp1,ZPP_Flags.InertiaMode_FIXED][this.zpp_inner.inertiaMode];
};
Body.prototype.get_constraintInertia = function() {
	if(!this.zpp_inner.world) {
		this.zpp_inner.validate_inertia();
	}
	return this.zpp_inner.sinertia;
};
Body.prototype.get_inertia = function() {
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world has no inertia");
	}
	this.zpp_inner.validate_inertia();
	if(this.zpp_inner.inertiaMode == 0 && this.zpp_inner.wrap_shapes.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Given current inertia mode flag, Body::inertia only makes sense if Body contains Shapes");
	}
	return this.zpp_inner.cinertia;
};
Body.prototype.set_inertia = function(inertia) {
	this.zpp_inner.immutable_midstep("Body::inertia");
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	if(inertia != inertia) {
		throw new js._Boot.HaxeError("Error: Inertia cannot be NaN");
	}
	if(inertia <= 0) {
		throw new js._Boot.HaxeError("Error: Inertia must be strictly positive");
	}
	if(inertia >= Infinity) {
		throw new js._Boot.HaxeError("Error: Inertia cannot be infinite, use allowRotation = false instead");
	}
	this.zpp_inner.inertiaMode = 1;
	this.zpp_inner.cinertia = inertia;
	this.zpp_inner.invalidate_inertia();
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world has no inertia");
	}
	this.zpp_inner.validate_inertia();
	if(this.zpp_inner.inertiaMode == 0 && this.zpp_inner.wrap_shapes.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Given current inertia mode flag, Body::inertia only makes sense if Body contains Shapes");
	}
	return this.zpp_inner.cinertia;
};
Body.prototype.connectedBodies = function(depth,output) {
	if(depth == null) {
		depth = -1;
	}
	return this.zpp_inner.connectedBodies(depth,output);
};
Body.prototype.interactingBodies = function(type,depth,output) {
	if(depth == null) {
		depth = -1;
	}
	var arbiter_type;
	if(type == null) {
		arbiter_type = ZPP_Arbiter.COL | ZPP_Arbiter.SENSOR | ZPP_Arbiter.FLUID;
	} else {
		if(ZPP_Flags.InteractionType_COLLISION == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_COLLISION = new InteractionType();
			ZPP_Flags.internal = false;
		}
		if(type == ZPP_Flags.InteractionType_COLLISION) {
			arbiter_type = ZPP_Arbiter.COL;
		} else {
			if(ZPP_Flags.InteractionType_SENSOR == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.InteractionType_SENSOR = new InteractionType();
				ZPP_Flags.internal = false;
			}
			if(type == ZPP_Flags.InteractionType_SENSOR) {
				arbiter_type = ZPP_Arbiter.SENSOR;
			} else {
				arbiter_type = ZPP_Arbiter.FLUID;
			}
		}
	}
	return this.zpp_inner.interactingBodies(arbiter_type,depth,output);
};
Body.prototype.crushFactor = function() {
	if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) == null) {
		throw new js._Boot.HaxeError("Error: Makes no sense to see how much an object not taking part in a simulation is being crushed");
	}
	var msum = 0.0;
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = 0;
		ret1.y = 0;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == 0) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == 0;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = 0;
			ret.zpp_inner.y = 0;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	var jsum = ret;
	if(this.zpp_inner.wrap_arbiters == null) {
		this.zpp_inner.wrap_arbiters = ZPP_ArbiterList.get(this.zpp_inner.arbiters,true);
	}
	var _g = this.zpp_inner.wrap_arbiters.iterator();
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var length = _g.zpp_inner.zpp_gl();
		_g.zpp_critical = true;
		var tmp1;
		if(_g.zpp_i < length) {
			tmp1 = true;
		} else {
			_g.zpp_next = ArbiterIterator.zpp_pool;
			ArbiterIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp1 = false;
		}
		if(!tmp1) {
			break;
		}
		_g.zpp_critical = false;
		var imp3 = _g.zpp_inner.at(_g.zpp_i++).totalImpulse(this);
		var imp = imp3.xy();
		jsum.addeq(imp);
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = imp.zpp_inner;
		if(_this4._validate != null) {
			_this4._validate();
		}
		var tmp2 = imp.zpp_inner.x;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = imp.zpp_inner;
		if(_this5._validate != null) {
			_this5._validate();
		}
		var tmp3 = tmp2 * imp.zpp_inner.x;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = imp.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		var tmp4 = imp.zpp_inner.y;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this7 = imp.zpp_inner;
		if(_this7._validate != null) {
			_this7._validate();
		}
		msum += Math.sqrt(tmp3 + tmp4 * imp.zpp_inner.y);
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = imp.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(imp.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = imp.zpp_inner;
		imp.zpp_inner.outer = null;
		imp.zpp_inner = null;
		imp.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = imp;
		} else {
			ZPP_PubPool.poolVec2 = imp;
		}
		ZPP_PubPool.nextVec2 = imp;
		imp.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
		imp3.dispose();
	}
	if(this.zpp_inner.wrap_constraints == null) {
		this.zpp_inner.wrap_constraints = ZPP_ConstraintList.get(this.zpp_inner.constraints,true);
	}
	var _this9 = this.zpp_inner.wrap_constraints;
	_this9.zpp_inner.valmod();
	var _g1 = ConstraintIterator.get(_this9);
	while(true) {
		_g1.zpp_inner.zpp_inner.valmod();
		var _this10 = _g1.zpp_inner;
		_this10.zpp_inner.valmod();
		if(_this10.zpp_inner.zip_length) {
			_this10.zpp_inner.zip_length = false;
			_this10.zpp_inner.user_length = _this10.zpp_inner.inner.length;
		}
		var length1 = _this10.zpp_inner.user_length;
		_g1.zpp_critical = true;
		var tmp5;
		if(_g1.zpp_i < length1) {
			tmp5 = true;
		} else {
			_g1.zpp_next = ConstraintIterator.zpp_pool;
			ConstraintIterator.zpp_pool = _g1;
			_g1.zpp_inner = null;
			tmp5 = false;
		}
		if(!tmp5) {
			break;
		}
		_g1.zpp_critical = false;
		var imp31 = _g1.zpp_inner.at(_g1.zpp_i++).bodyImpulse(this);
		var imp1 = imp31.xy();
		jsum.addeq(imp1);
		if(imp1 != null && imp1.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		if(imp1 != null && imp1.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this11 = imp1.zpp_inner;
		if(_this11._validate != null) {
			_this11._validate();
		}
		var tmp6 = imp1.zpp_inner.x;
		if(imp1 != null && imp1.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this12 = imp1.zpp_inner;
		if(_this12._validate != null) {
			_this12._validate();
		}
		var tmp7 = tmp6 * imp1.zpp_inner.x;
		if(imp1 != null && imp1.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this13 = imp1.zpp_inner;
		if(_this13._validate != null) {
			_this13._validate();
		}
		var tmp8 = imp1.zpp_inner.y;
		if(imp1 != null && imp1.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this14 = imp1.zpp_inner;
		if(_this14._validate != null) {
			_this14._validate();
		}
		msum += Math.sqrt(tmp7 + tmp8 * imp1.zpp_inner.y);
		if(imp1 != null && imp1.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this15 = imp1.zpp_inner;
		if(_this15._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this15._isimmutable != null) {
			_this15._isimmutable();
		}
		if(imp1.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = imp1.zpp_inner;
		imp1.zpp_inner.outer = null;
		imp1.zpp_inner = null;
		imp1.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = imp1;
		} else {
			ZPP_PubPool.poolVec2 = imp1;
		}
		ZPP_PubPool.nextVec2 = imp1;
		imp1.zpp_disp = true;
		if(inner1.outer != null) {
			inner1.outer.zpp_inner = null;
			inner1.outer = null;
		}
		inner1._isimmutable = null;
		inner1._validate = null;
		inner1._invalidate = null;
		inner1.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner1;
		imp31.dispose();
	}
	if(jsum != null && jsum.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(jsum != null && jsum.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this16 = jsum.zpp_inner;
	if(_this16._validate != null) {
		_this16._validate();
	}
	var tmp9 = jsum.zpp_inner.x;
	if(jsum != null && jsum.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this17 = jsum.zpp_inner;
	if(_this17._validate != null) {
		_this17._validate();
	}
	var tmp10 = tmp9 * jsum.zpp_inner.x;
	if(jsum != null && jsum.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this18 = jsum.zpp_inner;
	if(_this18._validate != null) {
		_this18._validate();
	}
	var tmp11 = jsum.zpp_inner.y;
	if(jsum != null && jsum.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this19 = jsum.zpp_inner;
	if(_this19._validate != null) {
		_this19._validate();
	}
	var tmp12 = msum - Math.sqrt(tmp10 + tmp11 * jsum.zpp_inner.y);
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world has no mass");
	}
	this.zpp_inner.validate_mass();
	if(this.zpp_inner.massMode == 0 && this.zpp_inner.shapes.head == null) {
		throw new js._Boot.HaxeError("Error: Given current mass mode, Body::mass only makes sense if it contains shapes");
	}
	var ret2 = tmp12 / (this.zpp_inner.cmass * (this.zpp_inner.space == null?null:this.zpp_inner.space.outer).zpp_inner.pre_dt);
	if(jsum != null && jsum.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this20 = jsum.zpp_inner;
	if(_this20._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this20._isimmutable != null) {
		_this20._isimmutable();
	}
	if(jsum.zpp_inner._inuse) {
		throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
	}
	var inner2 = jsum.zpp_inner;
	jsum.zpp_inner.outer = null;
	jsum.zpp_inner = null;
	jsum.zpp_pool = null;
	if(ZPP_PubPool.nextVec2 != null) {
		ZPP_PubPool.nextVec2.zpp_pool = jsum;
	} else {
		ZPP_PubPool.poolVec2 = jsum;
	}
	ZPP_PubPool.nextVec2 = jsum;
	jsum.zpp_disp = true;
	if(inner2.outer != null) {
		inner2.outer.zpp_inner = null;
		inner2.outer = null;
	}
	inner2._isimmutable = null;
	inner2._validate = null;
	inner2._invalidate = null;
	inner2.next = ZPP_Vec2.zpp_pool;
	ZPP_Vec2.zpp_pool = inner2;
	return ret2;
};
Body.prototype.localPointToWorld = function(point,weak) {
	if(weak == null) {
		weak = false;
	}
	if(point != null && point.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(point == null) {
		throw new js._Boot.HaxeError("Error: Cannot transform null Vec2");
	}
	var _this = this.zpp_inner;
	if(_this.zip_axis) {
		_this.zip_axis = false;
		_this.axisx = Math.sin(_this.rot);
		_this.axisy = Math.cos(_this.rot);
	}
	var tempx = 0.0;
	var tempy = 0.0;
	var tmp = this.zpp_inner.axisy;
	if(point != null && point.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = point.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var tmp1 = tmp * point.zpp_inner.x;
	var tmp2 = this.zpp_inner.axisx;
	if(point != null && point.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = point.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	tempx = tmp1 - tmp2 * point.zpp_inner.y;
	if(point != null && point.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = point.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var tmp3 = point.zpp_inner.x * this.zpp_inner.axisx;
	if(point != null && point.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = point.zpp_inner;
	if(_this4._validate != null) {
		_this4._validate();
	}
	tempy = tmp3 + point.zpp_inner.y * this.zpp_inner.axisy;
	if(point.zpp_inner.weak) {
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = point.zpp_inner;
		if(_this5._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this5._isimmutable != null) {
			_this5._isimmutable();
		}
		if(point.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = point.zpp_inner;
		point.zpp_inner.outer = null;
		point.zpp_inner = null;
		point.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = point;
		} else {
			ZPP_PubPool.poolVec2 = point;
		}
		ZPP_PubPool.nextVec2 = point;
		point.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	var x = tempx + this.zpp_inner.posx;
	var y = tempy + this.zpp_inner.posy;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = ret.zpp_inner;
		if(_this6._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this6._isimmutable != null) {
			_this6._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp4;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this7 = ret.zpp_inner;
		if(_this7._validate != null) {
			_this7._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this8 = ret.zpp_inner;
			if(_this8._validate != null) {
				_this8._validate();
			}
			tmp4 = ret.zpp_inner.y == y;
		} else {
			tmp4 = false;
		}
		if(!tmp4) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this9 = ret.zpp_inner;
			if(_this9._invalidate != null) {
				_this9._invalidate(_this9);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
Body.prototype.worldPointToLocal = function(point,weak) {
	if(weak == null) {
		weak = false;
	}
	if(point != null && point.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(point == null) {
		throw new js._Boot.HaxeError("Error: Cannot transform null Vec2");
	}
	var _this = this.zpp_inner;
	if(_this.zip_axis) {
		_this.zip_axis = false;
		_this.axisx = Math.sin(_this.rot);
		_this.axisy = Math.cos(_this.rot);
	}
	var tempx = 0.0;
	var tempy = 0.0;
	var pointx = 0.0;
	var pointy = 0.0;
	if(point != null && point.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = point.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	pointx = point.zpp_inner.x - this.zpp_inner.posx;
	if(point != null && point.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = point.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	pointy = point.zpp_inner.y - this.zpp_inner.posy;
	tempx = pointx * this.zpp_inner.axisy + pointy * this.zpp_inner.axisx;
	tempy = pointy * this.zpp_inner.axisy - pointx * this.zpp_inner.axisx;
	if(point.zpp_inner.weak) {
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this3 = point.zpp_inner;
		if(_this3._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this3._isimmutable != null) {
			_this3._isimmutable();
		}
		if(point.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = point.zpp_inner;
		point.zpp_inner.outer = null;
		point.zpp_inner = null;
		point.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = point;
		} else {
			ZPP_PubPool.poolVec2 = point;
		}
		ZPP_PubPool.nextVec2 = point;
		point.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(tempx != tempx || tempy != tempy) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = tempx;
		ret1.y = tempy;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = ret.zpp_inner;
		if(_this4._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this4._isimmutable != null) {
			_this4._isimmutable();
		}
		if(tempx != tempx || tempy != tempy) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = ret.zpp_inner;
		if(_this5._validate != null) {
			_this5._validate();
		}
		if(ret.zpp_inner.x == tempx) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this6 = ret.zpp_inner;
			if(_this6._validate != null) {
				_this6._validate();
			}
			tmp = ret.zpp_inner.y == tempy;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = tempx;
			ret.zpp_inner.y = tempy;
			var _this7 = ret.zpp_inner;
			if(_this7._invalidate != null) {
				_this7._invalidate(_this7);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
Body.prototype.localVectorToWorld = function(vector,weak) {
	if(weak == null) {
		weak = false;
	}
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(vector == null) {
		throw new js._Boot.HaxeError("Error: Cannot transform null Vec2");
	}
	var _this = this.zpp_inner;
	if(_this.zip_axis) {
		_this.zip_axis = false;
		_this.axisx = Math.sin(_this.rot);
		_this.axisy = Math.cos(_this.rot);
	}
	var tempx = 0.0;
	var tempy = 0.0;
	var tmp = this.zpp_inner.axisy;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = vector.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var tmp1 = tmp * vector.zpp_inner.x;
	var tmp2 = this.zpp_inner.axisx;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = vector.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	tempx = tmp1 - tmp2 * vector.zpp_inner.y;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = vector.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var tmp3 = vector.zpp_inner.x * this.zpp_inner.axisx;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = vector.zpp_inner;
	if(_this4._validate != null) {
		_this4._validate();
	}
	tempy = tmp3 + vector.zpp_inner.y * this.zpp_inner.axisy;
	if(vector.zpp_inner.weak) {
		if(vector != null && vector.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = vector.zpp_inner;
		if(_this5._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this5._isimmutable != null) {
			_this5._isimmutable();
		}
		if(vector.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = vector.zpp_inner;
		vector.zpp_inner.outer = null;
		vector.zpp_inner = null;
		vector.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = vector;
		} else {
			ZPP_PubPool.poolVec2 = vector;
		}
		ZPP_PubPool.nextVec2 = vector;
		vector.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(tempx != tempx || tempy != tempy) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = tempx;
		ret1.y = tempy;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = ret.zpp_inner;
		if(_this6._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this6._isimmutable != null) {
			_this6._isimmutable();
		}
		if(tempx != tempx || tempy != tempy) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp4;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this7 = ret.zpp_inner;
		if(_this7._validate != null) {
			_this7._validate();
		}
		if(ret.zpp_inner.x == tempx) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this8 = ret.zpp_inner;
			if(_this8._validate != null) {
				_this8._validate();
			}
			tmp4 = ret.zpp_inner.y == tempy;
		} else {
			tmp4 = false;
		}
		if(!tmp4) {
			ret.zpp_inner.x = tempx;
			ret.zpp_inner.y = tempy;
			var _this9 = ret.zpp_inner;
			if(_this9._invalidate != null) {
				_this9._invalidate(_this9);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
Body.prototype.worldVectorToLocal = function(vector,weak) {
	if(weak == null) {
		weak = false;
	}
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(vector == null) {
		throw new js._Boot.HaxeError("Error: Cannot transform null Vec2");
	}
	var _this = this.zpp_inner;
	if(_this.zip_axis) {
		_this.zip_axis = false;
		_this.axisx = Math.sin(_this.rot);
		_this.axisy = Math.cos(_this.rot);
	}
	var tempx = 0.0;
	var tempy = 0.0;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = vector.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var tmp = vector.zpp_inner.x * this.zpp_inner.axisy;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = vector.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	tempx = tmp + vector.zpp_inner.y * this.zpp_inner.axisx;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = vector.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var tmp1 = vector.zpp_inner.y * this.zpp_inner.axisy;
	if(vector != null && vector.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = vector.zpp_inner;
	if(_this4._validate != null) {
		_this4._validate();
	}
	tempy = tmp1 - vector.zpp_inner.x * this.zpp_inner.axisx;
	if(vector.zpp_inner.weak) {
		if(vector != null && vector.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = vector.zpp_inner;
		if(_this5._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this5._isimmutable != null) {
			_this5._isimmutable();
		}
		if(vector.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = vector.zpp_inner;
		vector.zpp_inner.outer = null;
		vector.zpp_inner = null;
		vector.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = vector;
		} else {
			ZPP_PubPool.poolVec2 = vector;
		}
		ZPP_PubPool.nextVec2 = vector;
		vector.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(tempx != tempx || tempy != tempy) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = tempx;
		ret1.y = tempy;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = ret.zpp_inner;
		if(_this6._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this6._isimmutable != null) {
			_this6._isimmutable();
		}
		if(tempx != tempx || tempy != tempy) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp2;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this7 = ret.zpp_inner;
		if(_this7._validate != null) {
			_this7._validate();
		}
		if(ret.zpp_inner.x == tempx) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this8 = ret.zpp_inner;
			if(_this8._validate != null) {
				_this8._validate();
			}
			tmp2 = ret.zpp_inner.y == tempy;
		} else {
			tmp2 = false;
		}
		if(!tmp2) {
			ret.zpp_inner.x = tempx;
			ret.zpp_inner.y = tempy;
			var _this9 = ret.zpp_inner;
			if(_this9._invalidate != null) {
				_this9._invalidate(_this9);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
Body.prototype.applyImpulse = function(impulse,pos,sleepable) {
	if(sleepable == null) {
		sleepable = false;
	}
	if(impulse != null && impulse.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(pos != null && pos.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	if(impulse == null) {
		throw new js._Boot.HaxeError("Error: Cannot apply null impulse to Body");
	}
	var tmp;
	if(sleepable) {
		if(this.zpp_inner.space == null) {
			throw new js._Boot.HaxeError("Error: isSleeping makes no sense if the object is not contained within a Space");
		}
		tmp = this.zpp_inner.component.sleeping;
	} else {
		tmp = false;
	}
	if(tmp) {
		if(impulse.zpp_inner.weak) {
			if(impulse != null && impulse.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = impulse.zpp_inner;
			if(_this._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(impulse.zpp_inner._inuse) {
				throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
			}
			var inner = impulse.zpp_inner;
			impulse.zpp_inner.outer = null;
			impulse.zpp_inner = null;
			impulse.zpp_pool = null;
			if(ZPP_PubPool.nextVec2 != null) {
				ZPP_PubPool.nextVec2.zpp_pool = impulse;
			} else {
				ZPP_PubPool.poolVec2 = impulse;
			}
			ZPP_PubPool.nextVec2 = impulse;
			impulse.zpp_disp = true;
			if(inner.outer != null) {
				inner.outer.zpp_inner = null;
				inner.outer = null;
			}
			inner._isimmutable = null;
			inner._validate = null;
			inner._invalidate = null;
			inner.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = inner;
		}
		if(pos != null) {
			if(pos.zpp_inner.weak) {
				if(pos != null && pos.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this1 = pos.zpp_inner;
				if(_this1._immutable) {
					throw new js._Boot.HaxeError("Error: Vec2 is immutable");
				}
				if(_this1._isimmutable != null) {
					_this1._isimmutable();
				}
				if(pos.zpp_inner._inuse) {
					throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
				}
				var inner1 = pos.zpp_inner;
				pos.zpp_inner.outer = null;
				pos.zpp_inner = null;
				pos.zpp_pool = null;
				if(ZPP_PubPool.nextVec2 != null) {
					ZPP_PubPool.nextVec2.zpp_pool = pos;
				} else {
					ZPP_PubPool.poolVec2 = pos;
				}
				ZPP_PubPool.nextVec2 = pos;
				pos.zpp_disp = true;
				if(inner1.outer != null) {
					inner1.outer.zpp_inner = null;
					inner1.outer = null;
				}
				inner1._isimmutable = null;
				inner1._validate = null;
				inner1._invalidate = null;
				inner1.next = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = inner1;
			}
		}
		return this;
	}
	this.zpp_inner.validate_mass();
	var t = this.zpp_inner.imass;
	if(impulse != null && impulse.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = impulse.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	this.zpp_inner.velx += impulse.zpp_inner.x * t;
	if(impulse != null && impulse.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = impulse.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	this.zpp_inner.vely += impulse.zpp_inner.y * t;
	if(pos != null) {
		var rx = 0.0;
		var ry = 0.0;
		if(pos != null && pos.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = pos.zpp_inner;
		if(_this4._validate != null) {
			_this4._validate();
		}
		rx = pos.zpp_inner.x - this.zpp_inner.posx;
		if(pos != null && pos.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = pos.zpp_inner;
		if(_this5._validate != null) {
			_this5._validate();
		}
		ry = pos.zpp_inner.y - this.zpp_inner.posy;
		this.zpp_inner.validate_inertia();
		if(impulse != null && impulse.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = impulse.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		var tmp1 = impulse.zpp_inner.y * rx;
		if(impulse != null && impulse.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this7 = impulse.zpp_inner;
		if(_this7._validate != null) {
			_this7._validate();
		}
		this.zpp_inner.angvel += (tmp1 - impulse.zpp_inner.x * ry) * this.zpp_inner.iinertia;
		if(pos.zpp_inner.weak) {
			if(pos != null && pos.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this8 = pos.zpp_inner;
			if(_this8._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this8._isimmutable != null) {
				_this8._isimmutable();
			}
			if(pos.zpp_inner._inuse) {
				throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
			}
			var inner2 = pos.zpp_inner;
			pos.zpp_inner.outer = null;
			pos.zpp_inner = null;
			pos.zpp_pool = null;
			if(ZPP_PubPool.nextVec2 != null) {
				ZPP_PubPool.nextVec2.zpp_pool = pos;
			} else {
				ZPP_PubPool.poolVec2 = pos;
			}
			ZPP_PubPool.nextVec2 = pos;
			pos.zpp_disp = true;
			if(inner2.outer != null) {
				inner2.outer.zpp_inner = null;
				inner2.outer = null;
			}
			inner2._isimmutable = null;
			inner2._validate = null;
			inner2._invalidate = null;
			inner2.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = inner2;
		}
	}
	if(!sleepable) {
		if(this.zpp_inner.type == 2) {
			this.zpp_inner.wake();
		}
	}
	if(impulse.zpp_inner.weak) {
		if(impulse != null && impulse.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this9 = impulse.zpp_inner;
		if(_this9._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this9._isimmutable != null) {
			_this9._isimmutable();
		}
		if(impulse.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner3 = impulse.zpp_inner;
		impulse.zpp_inner.outer = null;
		impulse.zpp_inner = null;
		impulse.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = impulse;
		} else {
			ZPP_PubPool.poolVec2 = impulse;
		}
		ZPP_PubPool.nextVec2 = impulse;
		impulse.zpp_disp = true;
		if(inner3.outer != null) {
			inner3.outer.zpp_inner = null;
			inner3.outer = null;
		}
		inner3._isimmutable = null;
		inner3._validate = null;
		inner3._invalidate = null;
		inner3.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner3;
	}
	return this;
};
Body.prototype.applyAngularImpulse = function(impulse,sleepable) {
	if(sleepable == null) {
		sleepable = false;
	}
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	var tmp;
	if(sleepable) {
		if(this.zpp_inner.space == null) {
			throw new js._Boot.HaxeError("Error: isSleeping makes no sense if the object is not contained within a Space");
		}
		tmp = this.zpp_inner.component.sleeping;
	} else {
		tmp = false;
	}
	if(tmp) {
		return this;
	}
	this.zpp_inner.validate_inertia();
	this.zpp_inner.angvel += impulse * this.zpp_inner.iinertia;
	if(!sleepable) {
		if(this.zpp_inner.type == 2) {
			this.zpp_inner.wake();
		}
	}
	return this;
};
Body.prototype.translateShapes = function(translation) {
	this.zpp_inner.immutable_midstep("Body::translateShapes()");
	if(translation != null && translation.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	if(translation == null) {
		throw new js._Boot.HaxeError("Error: Cannot displace by null Vec2");
	}
	var weak = translation.zpp_inner.weak;
	translation.zpp_inner.weak = false;
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		cx_ite.elt.outer.translate(translation);
		cx_ite = cx_ite.next;
	}
	translation.zpp_inner.weak = weak;
	if(translation.zpp_inner.weak) {
		if(translation != null && translation.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = translation.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(translation.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = translation.zpp_inner;
		translation.zpp_inner.outer = null;
		translation.zpp_inner = null;
		translation.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = translation;
		} else {
			ZPP_PubPool.poolVec2 = translation;
		}
		ZPP_PubPool.nextVec2 = translation;
		translation.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return this;
};
Body.prototype.rotateShapes = function(angle) {
	this.zpp_inner.immutable_midstep("Body::rotateShapes()");
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		cx_ite.elt.outer.rotate(angle);
		cx_ite = cx_ite.next;
	}
	return this;
};
Body.prototype.scaleShapes = function(scaleX,scaleY) {
	this.zpp_inner.immutable_midstep("Body::scaleShapes()");
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		cx_ite.elt.outer.scale(scaleX,scaleY);
		cx_ite = cx_ite.next;
	}
	return this;
};
Body.prototype.transformShapes = function(matrix) {
	this.zpp_inner.immutable_midstep("Body::transformShapes()");
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		cx_ite.elt.outer.transform(matrix);
		cx_ite = cx_ite.next;
	}
	return this;
};
Body.prototype.align = function() {
	this.zpp_inner.immutable_midstep("Body::align()");
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	if(this.zpp_inner.shapes.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot align empty Body");
	}
	this.zpp_inner.validate_localCOM();
	var x = -this.zpp_inner.localCOMx;
	var y = -this.zpp_inner.localCOMy;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	var dx = ret;
	this.translateShapes(dx);
	var dx2 = this.localVectorToWorld(dx);
	if(this.zpp_inner.wrap_pos == null) {
		this.zpp_inner.setupPosition();
	}
	this.zpp_inner.wrap_pos.subeq(dx2);
	if(this.zpp_inner.pre_posx < Infinity) {
		if(dx2 != null && dx2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = dx2.zpp_inner;
		if(_this4._validate != null) {
			_this4._validate();
		}
		this.zpp_inner.pre_posx -= dx2.zpp_inner.x;
		if(dx2 != null && dx2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = dx2.zpp_inner;
		if(_this5._validate != null) {
			_this5._validate();
		}
		this.zpp_inner.pre_posy -= dx2.zpp_inner.y;
	}
	if(dx != null && dx.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this6 = dx.zpp_inner;
	if(_this6._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this6._isimmutable != null) {
		_this6._isimmutable();
	}
	if(dx.zpp_inner._inuse) {
		throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
	}
	var inner = dx.zpp_inner;
	dx.zpp_inner.outer = null;
	dx.zpp_inner = null;
	dx.zpp_pool = null;
	if(ZPP_PubPool.nextVec2 != null) {
		ZPP_PubPool.nextVec2.zpp_pool = dx;
	} else {
		ZPP_PubPool.poolVec2 = dx;
	}
	ZPP_PubPool.nextVec2 = dx;
	dx.zpp_disp = true;
	if(inner.outer != null) {
		inner.outer.zpp_inner = null;
		inner.outer = null;
	}
	inner._isimmutable = null;
	inner._validate = null;
	inner._invalidate = null;
	inner.next = ZPP_Vec2.zpp_pool;
	ZPP_Vec2.zpp_pool = inner;
	if(dx2 != null && dx2.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this7 = dx2.zpp_inner;
	if(_this7._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this7._isimmutable != null) {
		_this7._isimmutable();
	}
	if(dx2.zpp_inner._inuse) {
		throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
	}
	var inner1 = dx2.zpp_inner;
	dx2.zpp_inner.outer = null;
	dx2.zpp_inner = null;
	dx2.zpp_pool = null;
	if(ZPP_PubPool.nextVec2 != null) {
		ZPP_PubPool.nextVec2.zpp_pool = dx2;
	} else {
		ZPP_PubPool.poolVec2 = dx2;
	}
	ZPP_PubPool.nextVec2 = dx2;
	dx2.zpp_disp = true;
	if(inner1.outer != null) {
		inner1.outer.zpp_inner = null;
		inner1.outer = null;
	}
	inner1._isimmutable = null;
	inner1._validate = null;
	inner1._invalidate = null;
	inner1.next = ZPP_Vec2.zpp_pool;
	ZPP_Vec2.zpp_pool = inner1;
	return this;
};
Body.prototype.rotate = function(centre,angle) {
	if(centre != null && centre.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(centre == null) {
		throw new js._Boot.HaxeError("Error: Cannot rotate about a null Vec2");
	}
	if(angle != angle) {
		throw new js._Boot.HaxeError("Error: Cannot rotate by NaN radians");
	}
	var weak = centre.zpp_inner.weak;
	centre.zpp_inner.weak = false;
	if(this.zpp_inner.wrap_pos == null) {
		this.zpp_inner.setupPosition();
	}
	var del = this.zpp_inner.wrap_pos.sub(centre);
	del.rotate(angle);
	var position = centre.add(del,true);
	if(position != null && position.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(position == null) {
		throw new js._Boot.HaxeError("Error: Body::" + "position" + " cannot be null");
	}
	if(this.zpp_inner.wrap_pos == null) {
		this.zpp_inner.setupPosition();
	}
	var _this = this.zpp_inner.wrap_pos;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(position != null && position.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(position == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(position != null && position.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = position.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = position.zpp_inner.x;
	if(position != null && position.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = position.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = position.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(position.zpp_inner.weak) {
		if(position != null && position.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = position.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(position.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = position.zpp_inner;
		position.zpp_inner.outer = null;
		position.zpp_inner = null;
		position.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = position;
		} else {
			ZPP_PubPool.poolVec2 = position;
		}
		ZPP_PubPool.nextVec2 = position;
		position.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner.wrap_pos == null) {
		this.zpp_inner.setupPosition();
	}
	if(del != null && del.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this9 = del.zpp_inner;
	if(_this9._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this9._isimmutable != null) {
		_this9._isimmutable();
	}
	if(del.zpp_inner._inuse) {
		throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
	}
	var inner1 = del.zpp_inner;
	del.zpp_inner.outer = null;
	del.zpp_inner = null;
	del.zpp_pool = null;
	if(ZPP_PubPool.nextVec2 != null) {
		ZPP_PubPool.nextVec2.zpp_pool = del;
	} else {
		ZPP_PubPool.poolVec2 = del;
	}
	ZPP_PubPool.nextVec2 = del;
	del.zpp_disp = true;
	if(inner1.outer != null) {
		inner1.outer.zpp_inner = null;
		inner1.outer = null;
	}
	inner1._isimmutable = null;
	inner1._validate = null;
	inner1._invalidate = null;
	inner1.next = ZPP_Vec2.zpp_pool;
	ZPP_Vec2.zpp_pool = inner1;
	var _g = this;
	var rotation = _g.zpp_inner.rot + angle;
	_g.zpp_inner.immutable_midstep("Body::rotation");
	if(_g.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	if(_g.zpp_inner.type == 1 && _g.zpp_inner.space != null) {
		throw new js._Boot.HaxeError("Error: Static objects cannot be rotated once inside a Space");
	}
	if(_g.zpp_inner.rot != rotation) {
		if(rotation != rotation) {
			throw new js._Boot.HaxeError("Error: Body::rotation cannot be NaN");
		}
		_g.zpp_inner.rot = rotation;
		var _this10 = _g.zpp_inner;
		_this10.zip_axis = true;
		var cx_ite = _this10.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.type == 1) {
				s.polygon.invalidate_gverts();
				s.polygon.invalidate_gaxi();
			}
			s.invalidate_worldCOM();
			cx_ite = cx_ite.next;
		}
		_this10.zip_worldCOM = true;
		_g.zpp_inner.wake();
	}
	centre.zpp_inner.weak = weak;
	if(centre.zpp_inner.weak) {
		if(centre != null && centre.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this11 = centre.zpp_inner;
		if(_this11._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this11._isimmutable != null) {
			_this11._isimmutable();
		}
		if(centre.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner2 = centre.zpp_inner;
		centre.zpp_inner.outer = null;
		centre.zpp_inner = null;
		centre.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = centre;
		} else {
			ZPP_PubPool.poolVec2 = centre;
		}
		ZPP_PubPool.nextVec2 = centre;
		centre.zpp_disp = true;
		if(inner2.outer != null) {
			inner2.outer.zpp_inner = null;
			inner2.outer = null;
		}
		inner2._isimmutable = null;
		inner2._validate = null;
		inner2._invalidate = null;
		inner2.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner2;
	}
	return this;
};
Body.prototype.setShapeMaterials = function(material) {
	this.zpp_inner.immutable_midstep("Body::setShapeMaterials()");
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var _this = cx_ite.elt.outer;
		_this.zpp_inner.immutable_midstep("Shape::material");
		if(material == null) {
			throw new js._Boot.HaxeError("Error: Cannot assign null as Shape material");
		}
		_this.zpp_inner.setMaterial(material.zpp_inner);
		_this.zpp_inner.material.wrapper();
		cx_ite = cx_ite.next;
	}
	return this;
};
Body.prototype.setShapeFilters = function(filter) {
	this.zpp_inner.immutable_midstep("Body::setShapeFilters()");
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var _this = cx_ite.elt.outer;
		_this.zpp_inner.immutable_midstep("Shape::filter");
		if(filter == null) {
			throw new js._Boot.HaxeError("Error: Cannot assign null as Shape filter");
		}
		_this.zpp_inner.setFilter(filter.zpp_inner);
		_this.zpp_inner.filter.wrapper();
		cx_ite = cx_ite.next;
	}
	return this;
};
Body.prototype.setShapeFluidProperties = function(fluidProperties) {
	this.zpp_inner.immutable_midstep("Body::setShapeFluidProperties()");
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world is immutable");
	}
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var _this = cx_ite.elt.outer;
		if(fluidProperties == null) {
			throw new js._Boot.HaxeError("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false");
		}
		_this.zpp_inner.setFluid(fluidProperties.zpp_inner);
		_this.zpp_inner.immutable_midstep("Shape::fluidProperties");
		if(_this.zpp_inner.fluidProperties == null) {
			_this.zpp_inner.setFluid(new FluidProperties().zpp_inner);
		}
		_this.zpp_inner.fluidProperties.wrapper();
		cx_ite = cx_ite.next;
	}
	return this;
};
Body.prototype.get_localCOM = function() {
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world has no " + "localCOM");
	}
	if(this.zpp_inner.wrap_localCOM == null) {
		var x = this.zpp_inner.localCOMx;
		var y = this.zpp_inner.localCOMy;
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(ZPP_PubPool.poolVec2 == null) {
			ret = new Vec2();
		} else {
			ret = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(ZPP_Vec2.zpp_pool == null) {
				ret1 = new ZPP_Vec2();
			} else {
				ret1 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.zpp_inner.wrap_localCOM = ret;
		this.zpp_inner.wrap_localCOM.zpp_inner._inuse = true;
		this.zpp_inner.wrap_localCOM.zpp_inner._immutable = true;
		this.zpp_inner.wrap_localCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getlocalCOM));
	}
	return this.zpp_inner.wrap_localCOM;
};
Body.prototype.get_worldCOM = function() {
	if(this.zpp_inner.world) {
		throw new js._Boot.HaxeError("Error: Space::world has no " + "worldCOM");
	}
	if(this.zpp_inner.wrap_worldCOM == null) {
		var x = this.zpp_inner.worldCOMx;
		var y = this.zpp_inner.worldCOMy;
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(ZPP_PubPool.poolVec2 == null) {
			ret = new Vec2();
		} else {
			ret = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(ZPP_Vec2.zpp_pool == null) {
				ret1 = new ZPP_Vec2();
			} else {
				ret1 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.zpp_inner.wrap_worldCOM = ret;
		this.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
		this.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
		this.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getworldCOM));
	}
	return this.zpp_inner.wrap_worldCOM;
};
Body.prototype.normalImpulse = function(body,freshOnly) {
	if(freshOnly == null) {
		freshOnly = false;
	}
	var retx = 0;
	var rety = 0;
	var retz = 0;
	if(this.zpp_inner.wrap_arbiters == null) {
		this.zpp_inner.wrap_arbiters = ZPP_ArbiterList.get(this.zpp_inner.arbiters,true);
	}
	var _g = this.zpp_inner.wrap_arbiters.iterator();
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var length = _g.zpp_inner.zpp_gl();
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ArbiterIterator.zpp_pool;
			ArbiterIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var arb = _g.zpp_inner.at(_g.zpp_i++).zpp_inner;
		if(arb.type != ZPP_Arbiter.COL) {
			continue;
		}
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) {
			continue;
		}
		var _this = arb.wrapper();
		var imp = (_this.zpp_inner.type == ZPP_Arbiter.COL?_this.zpp_inner.colarb.outer_zn:null).normalImpulse(this,freshOnly);
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this1 = imp.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		retx += imp.zpp_inner.x;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this2 = imp.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		rety += imp.zpp_inner.y;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this3 = imp.zpp_inner;
		if(_this3._validate != null) {
			_this3._validate();
		}
		retz += imp.zpp_inner.z;
		imp.dispose();
	}
	return Vec3.get(retx,rety,retz);
};
Body.prototype.tangentImpulse = function(body,freshOnly) {
	if(freshOnly == null) {
		freshOnly = false;
	}
	var retx = 0;
	var rety = 0;
	var retz = 0;
	if(this.zpp_inner.wrap_arbiters == null) {
		this.zpp_inner.wrap_arbiters = ZPP_ArbiterList.get(this.zpp_inner.arbiters,true);
	}
	var _g = this.zpp_inner.wrap_arbiters.iterator();
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var length = _g.zpp_inner.zpp_gl();
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ArbiterIterator.zpp_pool;
			ArbiterIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var arb = _g.zpp_inner.at(_g.zpp_i++).zpp_inner;
		if(arb.type != ZPP_Arbiter.COL) {
			continue;
		}
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) {
			continue;
		}
		var _this = arb.wrapper();
		var imp = (_this.zpp_inner.type == ZPP_Arbiter.COL?_this.zpp_inner.colarb.outer_zn:null).tangentImpulse(this,freshOnly);
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this1 = imp.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		retx += imp.zpp_inner.x;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this2 = imp.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		rety += imp.zpp_inner.y;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this3 = imp.zpp_inner;
		if(_this3._validate != null) {
			_this3._validate();
		}
		retz += imp.zpp_inner.z;
		imp.dispose();
	}
	return Vec3.get(retx,rety,retz);
};
Body.prototype.totalContactsImpulse = function(body,freshOnly) {
	if(freshOnly == null) {
		freshOnly = false;
	}
	var retx = 0;
	var rety = 0;
	var retz = 0;
	if(this.zpp_inner.wrap_arbiters == null) {
		this.zpp_inner.wrap_arbiters = ZPP_ArbiterList.get(this.zpp_inner.arbiters,true);
	}
	var _g = this.zpp_inner.wrap_arbiters.iterator();
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var length = _g.zpp_inner.zpp_gl();
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ArbiterIterator.zpp_pool;
			ArbiterIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var arb = _g.zpp_inner.at(_g.zpp_i++).zpp_inner;
		if(arb.type != ZPP_Arbiter.COL) {
			continue;
		}
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) {
			continue;
		}
		var _this = arb.wrapper();
		var imp = (_this.zpp_inner.type == ZPP_Arbiter.COL?_this.zpp_inner.colarb.outer_zn:null).totalImpulse(this,freshOnly);
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this1 = imp.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		retx += imp.zpp_inner.x;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this2 = imp.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		rety += imp.zpp_inner.y;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this3 = imp.zpp_inner;
		if(_this3._validate != null) {
			_this3._validate();
		}
		retz += imp.zpp_inner.z;
		imp.dispose();
	}
	return Vec3.get(retx,rety,retz);
};
Body.prototype.rollingImpulse = function(body,freshOnly) {
	if(freshOnly == null) {
		freshOnly = false;
	}
	var ret = 0.0;
	if(this.zpp_inner.wrap_arbiters == null) {
		this.zpp_inner.wrap_arbiters = ZPP_ArbiterList.get(this.zpp_inner.arbiters,true);
	}
	var _g = this.zpp_inner.wrap_arbiters.iterator();
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var length = _g.zpp_inner.zpp_gl();
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ArbiterIterator.zpp_pool;
			ArbiterIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var arb = _g.zpp_inner.at(_g.zpp_i++).zpp_inner;
		if(arb.type != ZPP_Arbiter.COL) {
			continue;
		}
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) {
			continue;
		}
		var _this = arb.wrapper();
		ret += (_this.zpp_inner.type == ZPP_Arbiter.COL?_this.zpp_inner.colarb.outer_zn:null).rollingImpulse(this,freshOnly);
	}
	return ret;
};
Body.prototype.buoyancyImpulse = function(body) {
	var retx = 0;
	var rety = 0;
	var retz = 0;
	if(this.zpp_inner.wrap_arbiters == null) {
		this.zpp_inner.wrap_arbiters = ZPP_ArbiterList.get(this.zpp_inner.arbiters,true);
	}
	var _g = this.zpp_inner.wrap_arbiters.iterator();
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var length = _g.zpp_inner.zpp_gl();
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ArbiterIterator.zpp_pool;
			ArbiterIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var arb = _g.zpp_inner.at(_g.zpp_i++).zpp_inner;
		if(arb.type != ZPP_Arbiter.FLUID) {
			continue;
		}
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) {
			continue;
		}
		var _this = arb.wrapper();
		var imp = (_this.zpp_inner.type == ZPP_Arbiter.FLUID?_this.zpp_inner.fluidarb.outer_zn:null).buoyancyImpulse(this);
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this1 = imp.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		retx += imp.zpp_inner.x;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this2 = imp.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		rety += imp.zpp_inner.y;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this3 = imp.zpp_inner;
		if(_this3._validate != null) {
			_this3._validate();
		}
		retz += imp.zpp_inner.z;
		imp.dispose();
	}
	return Vec3.get(retx,rety,retz);
};
Body.prototype.dragImpulse = function(body) {
	var retx = 0;
	var rety = 0;
	var retz = 0;
	if(this.zpp_inner.wrap_arbiters == null) {
		this.zpp_inner.wrap_arbiters = ZPP_ArbiterList.get(this.zpp_inner.arbiters,true);
	}
	var _g = this.zpp_inner.wrap_arbiters.iterator();
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var length = _g.zpp_inner.zpp_gl();
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ArbiterIterator.zpp_pool;
			ArbiterIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var arb = _g.zpp_inner.at(_g.zpp_i++).zpp_inner;
		if(arb.type != ZPP_Arbiter.FLUID) {
			continue;
		}
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) {
			continue;
		}
		var _this = arb.wrapper();
		var imp = (_this.zpp_inner.type == ZPP_Arbiter.FLUID?_this.zpp_inner.fluidarb.outer_zn:null).dragImpulse(this);
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this1 = imp.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		retx += imp.zpp_inner.x;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this2 = imp.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		rety += imp.zpp_inner.y;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this3 = imp.zpp_inner;
		if(_this3._validate != null) {
			_this3._validate();
		}
		retz += imp.zpp_inner.z;
		imp.dispose();
	}
	return Vec3.get(retx,rety,retz);
};
Body.prototype.totalFluidImpulse = function(body) {
	var retx = 0;
	var rety = 0;
	var retz = 0;
	if(this.zpp_inner.wrap_arbiters == null) {
		this.zpp_inner.wrap_arbiters = ZPP_ArbiterList.get(this.zpp_inner.arbiters,true);
	}
	var _g = this.zpp_inner.wrap_arbiters.iterator();
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var length = _g.zpp_inner.zpp_gl();
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ArbiterIterator.zpp_pool;
			ArbiterIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var arb = _g.zpp_inner.at(_g.zpp_i++).zpp_inner;
		if(arb.type != ZPP_Arbiter.FLUID) {
			continue;
		}
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) {
			continue;
		}
		var _this = arb.wrapper();
		var imp = (_this.zpp_inner.type == ZPP_Arbiter.FLUID?_this.zpp_inner.fluidarb.outer_zn:null).totalImpulse(this);
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this1 = imp.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		retx += imp.zpp_inner.x;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this2 = imp.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		rety += imp.zpp_inner.y;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this3 = imp.zpp_inner;
		if(_this3._validate != null) {
			_this3._validate();
		}
		retz += imp.zpp_inner.z;
		imp.dispose();
	}
	return Vec3.get(retx,rety,retz);
};
Body.prototype.constraintsImpulse = function() {
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var cx_ite = this.zpp_inner.constraints.head;
	while(cx_ite != null) {
		var imp = cx_ite.elt.outer.bodyImpulse(this);
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this = imp.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		retx += imp.zpp_inner.x;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this1 = imp.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		rety += imp.zpp_inner.y;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this2 = imp.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		retz += imp.zpp_inner.z;
		imp.dispose();
		cx_ite = cx_ite.next;
	}
	return Vec3.get(retx,rety,retz);
};
Body.prototype.totalImpulse = function(body,freshOnly) {
	if(freshOnly == null) {
		freshOnly = false;
	}
	var retx = 0;
	var rety = 0;
	var retz = 0;
	if(this.zpp_inner.wrap_arbiters == null) {
		this.zpp_inner.wrap_arbiters = ZPP_ArbiterList.get(this.zpp_inner.arbiters,true);
	}
	var _g = this.zpp_inner.wrap_arbiters.iterator();
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var length = _g.zpp_inner.zpp_gl();
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ArbiterIterator.zpp_pool;
			ArbiterIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var arb = _g.zpp_inner.at(_g.zpp_i++).zpp_inner;
		if(arb.type == ZPP_Arbiter.SENSOR) {
			continue;
		}
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) {
			continue;
		}
		var imp = arb.wrapper().totalImpulse(this,freshOnly);
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this = imp.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		retx += imp.zpp_inner.x;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this1 = imp.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		rety += imp.zpp_inner.y;
		if(imp != null && imp.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this2 = imp.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		retz += imp.zpp_inner.z;
		imp.dispose();
	}
	var cx_ite = this.zpp_inner.constraints.head;
	while(cx_ite != null) {
		var con = cx_ite.elt;
		if(con.active) {
			var imp1 = con.outer.bodyImpulse(this);
			if(imp1 != null && imp1.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this3 = imp1.zpp_inner;
			if(_this3._validate != null) {
				_this3._validate();
			}
			retx += imp1.zpp_inner.x;
			if(imp1 != null && imp1.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this4 = imp1.zpp_inner;
			if(_this4._validate != null) {
				_this4._validate();
			}
			rety += imp1.zpp_inner.y;
			if(imp1 != null && imp1.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this5 = imp1.zpp_inner;
			if(_this5._validate != null) {
				_this5._validate();
			}
			retz += imp1.zpp_inner.z;
			imp1.dispose();
		}
		cx_ite = cx_ite.next;
	}
	return Vec3.get(retx,rety,retz);
};
Body.prototype.contains = function(point) {
	if(point != null && point.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(point == null) {
		throw new js._Boot.HaxeError("Error: Cannot check containment of null point");
	}
	var wasWeak = point.zpp_inner.weak;
	point.zpp_inner.weak = false;
	var retvar;
	retvar = false;
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		if(cx_ite.elt.outer.contains(point)) {
			retvar = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	point.zpp_inner.weak = wasWeak;
	if(point.zpp_inner.weak) {
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = point.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(point.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = point.zpp_inner;
		point.zpp_inner.outer = null;
		point.zpp_inner = null;
		point.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = point;
		} else {
			ZPP_PubPool.poolVec2 = point;
		}
		ZPP_PubPool.nextVec2 = point;
		point.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return retvar;
};
Body.prototype.toString = function() {
	return (this.zpp_inner.world?"(space::world":"(" + (this.zpp_inner.type == 2?"dynamic":this.zpp_inner.type == 1?"static":"kinematic")) + ")#" + this.zpp_inner_i.id;
};
Body.prototype.__class__ = Body;
var BodyIterator = nape.phys.BodyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!ZPP_BodyList.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "Body" + "Iterator derp!");
	}
};
BodyIterator.__name__ = ["nape","phys","BodyIterator"];
BodyIterator.get = function(list) {
	var ret;
	if(BodyIterator.zpp_pool == null) {
		ZPP_BodyList.internal = true;
		var ret1 = new BodyIterator();
		ZPP_BodyList.internal = false;
		ret = ret1;
	} else {
		var r = BodyIterator.zpp_pool;
		BodyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
BodyIterator.prototype.zpp_inner = null;
BodyIterator.prototype.zpp_i = null;
BodyIterator.prototype.zpp_critical = null;
BodyIterator.prototype.zpp_next = null;
BodyIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var _this = this.zpp_inner;
	_this.zpp_inner.valmod();
	if(_this.zpp_inner.zip_length) {
		_this.zpp_inner.zip_length = false;
		_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
	}
	var length = _this.zpp_inner.user_length;
	this.zpp_critical = true;
	if(this.zpp_i < length) {
		return true;
	} else {
		this.zpp_next = BodyIterator.zpp_pool;
		BodyIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
BodyIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
BodyIterator.prototype.__class__ = BodyIterator;
var BodyList = nape.phys.BodyList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new ZPP_BodyList();
	this.zpp_inner.outer = this;
};
BodyList.__name__ = ["nape","phys","BodyList"];
BodyList.fromArray = function(array) {
	if(array == null) {
		throw new js._Boot.HaxeError("Error: Cannot convert null Array to Nape list");
	}
	var ret = new BodyList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
BodyList.prototype.zpp_inner = null;
BodyList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
BodyList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
BodyList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	var tmp;
	if(index >= 0) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		tmp = index >= this.zpp_inner.user_length;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Index out of bounds");
	}
	if(this.zpp_inner.reverse_flag) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		index = this.zpp_inner.user_length - 1 - index;
	}
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else {
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	return this.zpp_inner.at_ite.elt.outer;
};
BodyList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Body" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.inner.add(obj.zpp_inner);
		} else {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
BodyList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Body" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else {
			this.zpp_inner.inner.add(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
BodyList.prototype.pop = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Body" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	}
	this.zpp_inner.invalidate();
	return ret.outer;
};
BodyList.prototype.shift = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Body" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	}
	this.zpp_inner.invalidate();
	return ret.outer;
};
BodyList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) {
		return this.push(obj);
	} else {
		return this.unshift(obj);
	}
};
BodyList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Body" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(obj);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.remove(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
	}
	return ret;
};
BodyList.prototype.clear = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Body" + "List is immutable");
	}
	if(this.zpp_inner.reverse_flag) {
		while(this.zpp_inner.inner.head != null) this.pop();
	} else {
		while(this.zpp_inner.inner.head != null) this.shift();
	}
};
BodyList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
BodyList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return BodyIterator.get(this);
};
BodyList.prototype.copy = function(deep) {
	if(deep == null) {
		deep = false;
	}
	var ret = new BodyList();
	this.zpp_inner.valmod();
	var _g = BodyIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = BodyIterator.zpp_pool;
			BodyIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(deep) {
			throw new js._Boot.HaxeError("Error: " + "Body" + " is not a copyable type");
		}
		ret.push(i);
	}
	return ret;
};
BodyList.prototype.merge = function(xs) {
	if(xs == null) {
		throw new js._Boot.HaxeError("Error: Cannot merge with null list");
	}
	xs.zpp_inner.valmod();
	var _g = BodyIterator.get(xs);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = BodyIterator.zpp_pool;
			BodyIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) {
				this.push(x);
			} else {
				this.unshift(x);
			}
		}
	}
};
BodyList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	this.zpp_inner.valmod();
	var _g = BodyIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = BodyIterator.zpp_pool;
			BodyIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) {
			ret += ",";
		}
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
};
BodyList.prototype.foreach = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot execute null on list elements");
	}
	this.zpp_inner.valmod();
	var it = BodyIterator.get(this);
	while(true) {
		it.zpp_inner.zpp_inner.valmod();
		var _this = it.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		it.zpp_critical = true;
		var tmp;
		if(it.zpp_i < length) {
			tmp = true;
		} else {
			it.zpp_next = BodyIterator.zpp_pool;
			BodyIterator.zpp_pool = it;
			it.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		try {
			it.zpp_critical = false;
			lambda(it.zpp_inner.at(it.zpp_i++));
		} catch( e ) {
			it.zpp_next = BodyIterator.zpp_pool;
			BodyIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
	}
	return this;
};
BodyList.prototype.filter = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot select elements of list with null");
	}
	var i = 0;
	while(true) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(!(i < this.zpp_inner.user_length)) {
			break;
		}
		var x = this.at(i);
		try {
			if(lambda(x)) {
				++i;
			} else {
				this.remove(x);
			}
		} catch( e ) {
			break;
		}
	}
	return this;
};
BodyList.prototype.__class__ = BodyList;
var BodyType = nape.phys.BodyType = function() {
	if(!ZPP_Flags.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "BodyType" + " derp!");
	}
};
BodyType.__name__ = ["nape","phys","BodyType"];
BodyType.STATIC = null;
BodyType.get_STATIC = function() {
	if(ZPP_Flags.BodyType_STATIC == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.BodyType_STATIC = new BodyType();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.BodyType_STATIC;
};
BodyType.DYNAMIC = null;
BodyType.get_DYNAMIC = function() {
	if(ZPP_Flags.BodyType_DYNAMIC == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.BodyType_DYNAMIC = new BodyType();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.BodyType_DYNAMIC;
};
BodyType.KINEMATIC = null;
BodyType.get_KINEMATIC = function() {
	if(ZPP_Flags.BodyType_KINEMATIC == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.BodyType_KINEMATIC = new BodyType();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.BodyType_KINEMATIC;
};
BodyType.prototype.toString = function() {
	if(ZPP_Flags.BodyType_STATIC == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.BodyType_STATIC = new BodyType();
		ZPP_Flags.internal = false;
	}
	if(this == ZPP_Flags.BodyType_STATIC) {
		return "STATIC";
	} else {
		if(ZPP_Flags.BodyType_DYNAMIC == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.BodyType_DYNAMIC = new BodyType();
			ZPP_Flags.internal = false;
		}
		if(this == ZPP_Flags.BodyType_DYNAMIC) {
			return "DYNAMIC";
		} else {
			if(ZPP_Flags.BodyType_KINEMATIC == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.BodyType_KINEMATIC = new BodyType();
				ZPP_Flags.internal = false;
			}
			if(this == ZPP_Flags.BodyType_KINEMATIC) {
				return "KINEMATIC";
			} else {
				return "";
			}
		}
	}
};
BodyType.prototype.__class__ = BodyType;
var Compound = nape.phys.Compound = function() {
	this.zpp_inner = null;
	Interactor.zpp_internalAlloc = true;
	Interactor.call(this);
	Interactor.zpp_internalAlloc = false;
	this.zpp_inner = new ZPP_Compound();
	this.zpp_inner.outer = this;
	this.zpp_inner.outer_i = this;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner.insert_cbtype(ZPP_CbType.ANY_COMPOUND.zpp_inner);
};
Compound.__name__ = ["nape","phys","Compound"];
Compound.__super__ = Interactor;
// for(var k in Interactor.prototype ) Compound.prototype[k] = Interactor.prototype[k];
Compound.prototype = Object.create(Interactor.prototype);
Compound.prototype.zpp_inner = null;
Compound.prototype.get_bodies = function() {
	return this.zpp_inner.wrap_bodies;
};
Compound.prototype.get_constraints = function() {
	return this.zpp_inner.wrap_constraints;
};
Compound.prototype.get_compounds = function() {
	return this.zpp_inner.wrap_compounds;
};
Compound.prototype.get_compound = function() {
	if(this.zpp_inner.compound == null) {
		return null;
	} else {
		return this.zpp_inner.compound.outer;
	}
};
Compound.prototype.set_compound = function(compound) {
	this.zpp_inner.immutable_midstep("Compound::compound");
	if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != compound) {
		if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != null) {
			(this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer).zpp_inner.wrap_compounds.remove(this);
		}
		if(compound != null) {
			var _this = compound.zpp_inner.wrap_compounds;
			if(_this.zpp_inner.reverse_flag) {
				_this.push(this);
			} else {
				_this.unshift(this);
			}
		}
	}
	if(this.zpp_inner.compound == null) {
		return null;
	} else {
		return this.zpp_inner.compound.outer;
	}
};
Compound.prototype.get_space = function() {
	if(this.zpp_inner.space == null) {
		return null;
	} else {
		return this.zpp_inner.space.outer;
	}
};
Compound.prototype.set_space = function(space) {
	if(this.zpp_inner.compound != null) {
		throw new js._Boot.HaxeError("Error: Cannot set the space of an inner Compound, only the root Compound space can be set");
	}
	this.zpp_inner.immutable_midstep("Compound::space");
	if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
			(this.zpp_inner.space == null?null:this.zpp_inner.space.outer).zpp_inner.wrap_compounds.remove(this);
		}
		if(space != null) {
			var _this = space.zpp_inner.wrap_compounds;
			if(_this.zpp_inner.reverse_flag) {
				_this.push(this);
			} else {
				_this.unshift(this);
			}
		}
	}
	if(this.zpp_inner.space == null) {
		return null;
	} else {
		return this.zpp_inner.space.outer;
	}
};
Compound.prototype.toString = function() {
	return "Compound" + this.zpp_inner_i.id;
};
Compound.prototype.copy = function() {
	return this.zpp_inner.copy();
};
Compound.prototype.breakApart = function() {
	this.zpp_inner.breakApart();
};
Compound.prototype.visitBodies = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: lambda cannot be null for Compound::visitBodies");
	}
	var _this = this.zpp_inner.wrap_bodies;
	_this.zpp_inner.valmod();
	var _g = BodyIterator.get(_this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this1 = _g.zpp_inner;
		_this1.zpp_inner.valmod();
		if(_this1.zpp_inner.zip_length) {
			_this1.zpp_inner.zip_length = false;
			_this1.zpp_inner.user_length = _this1.zpp_inner.inner.length;
		}
		var length = _this1.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = BodyIterator.zpp_pool;
			BodyIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		lambda(_g.zpp_inner.at(_g.zpp_i++));
	}
	var _this2 = this.zpp_inner.wrap_compounds;
	_this2.zpp_inner.valmod();
	var _g1 = CompoundIterator.get(_this2);
	while(true) {
		_g1.zpp_inner.zpp_inner.valmod();
		var _this3 = _g1.zpp_inner;
		_this3.zpp_inner.valmod();
		if(_this3.zpp_inner.zip_length) {
			_this3.zpp_inner.zip_length = false;
			_this3.zpp_inner.user_length = _this3.zpp_inner.inner.length;
		}
		var length1 = _this3.zpp_inner.user_length;
		_g1.zpp_critical = true;
		var tmp1;
		if(_g1.zpp_i < length1) {
			tmp1 = true;
		} else {
			_g1.zpp_next = CompoundIterator.zpp_pool;
			CompoundIterator.zpp_pool = _g1;
			_g1.zpp_inner = null;
			tmp1 = false;
		}
		if(!tmp1) {
			break;
		}
		_g1.zpp_critical = false;
		_g1.zpp_inner.at(_g1.zpp_i++).visitBodies(lambda);
	}
};
Compound.prototype.visitConstraints = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: lambda cannot be null for Compound::visitConstraints");
	}
	var _this = this.zpp_inner.wrap_constraints;
	_this.zpp_inner.valmod();
	var _g = ConstraintIterator.get(_this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this1 = _g.zpp_inner;
		_this1.zpp_inner.valmod();
		if(_this1.zpp_inner.zip_length) {
			_this1.zpp_inner.zip_length = false;
			_this1.zpp_inner.user_length = _this1.zpp_inner.inner.length;
		}
		var length = _this1.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ConstraintIterator.zpp_pool;
			ConstraintIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		lambda(_g.zpp_inner.at(_g.zpp_i++));
	}
	var _this2 = this.zpp_inner.wrap_compounds;
	_this2.zpp_inner.valmod();
	var _g1 = CompoundIterator.get(_this2);
	while(true) {
		_g1.zpp_inner.zpp_inner.valmod();
		var _this3 = _g1.zpp_inner;
		_this3.zpp_inner.valmod();
		if(_this3.zpp_inner.zip_length) {
			_this3.zpp_inner.zip_length = false;
			_this3.zpp_inner.user_length = _this3.zpp_inner.inner.length;
		}
		var length1 = _this3.zpp_inner.user_length;
		_g1.zpp_critical = true;
		var tmp1;
		if(_g1.zpp_i < length1) {
			tmp1 = true;
		} else {
			_g1.zpp_next = CompoundIterator.zpp_pool;
			CompoundIterator.zpp_pool = _g1;
			_g1.zpp_inner = null;
			tmp1 = false;
		}
		if(!tmp1) {
			break;
		}
		_g1.zpp_critical = false;
		_g1.zpp_inner.at(_g1.zpp_i++).visitConstraints(lambda);
	}
};
Compound.prototype.visitCompounds = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: lambda cannot be null for Compound::visitConstraints");
	}
	var _this = this.zpp_inner.wrap_compounds;
	_this.zpp_inner.valmod();
	var _g = CompoundIterator.get(_this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this1 = _g.zpp_inner;
		_this1.zpp_inner.valmod();
		if(_this1.zpp_inner.zip_length) {
			_this1.zpp_inner.zip_length = false;
			_this1.zpp_inner.user_length = _this1.zpp_inner.inner.length;
		}
		var length = _this1.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = CompoundIterator.zpp_pool;
			CompoundIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var c = _g.zpp_inner.at(_g.zpp_i++);
		lambda(c);
		c.visitCompounds(lambda);
	}
};
Compound.prototype.COM = function(weak) {
	if(weak == null) {
		weak = false;
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = 0;
		ret1.y = 0;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == 0) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == 0;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = 0;
			ret.zpp_inner.y = 0;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	var ret2 = ret;
	var total = 0.0;
	this.visitBodies(function(b) {
		if(b.zpp_inner.wrap_shapes.zpp_inner.inner.head != null) {
			if(b.zpp_inner.world) {
				throw new js._Boot.HaxeError("Error: Space::world has no " + "worldCOM");
			}
			if(b.zpp_inner.wrap_worldCOM == null) {
				var x = b.zpp_inner.worldCOMx;
				var y = b.zpp_inner.worldCOMy;
				if(x != x || y != y) {
					throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
				}
				var ret3;
				if(ZPP_PubPool.poolVec2 == null) {
					ret3 = new Vec2();
				} else {
					ret3 = ZPP_PubPool.poolVec2;
					ZPP_PubPool.poolVec2 = ret3.zpp_pool;
					ret3.zpp_pool = null;
					ret3.zpp_disp = false;
					if(ret3 == ZPP_PubPool.nextVec2) {
						ZPP_PubPool.nextVec2 = null;
					}
				}
				if(ret3.zpp_inner == null) {
					var ret4;
					if(ZPP_Vec2.zpp_pool == null) {
						ret4 = new ZPP_Vec2();
					} else {
						ret4 = ZPP_Vec2.zpp_pool;
						ZPP_Vec2.zpp_pool = ret4.next;
						ret4.next = null;
					}
					ret4.weak = false;
					ret4._immutable = false;
					ret4.x = x;
					ret4.y = y;
					ret3.zpp_inner = ret4;
					ret3.zpp_inner.outer = ret3;
				} else {
					if(ret3 != null && ret3.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this4 = ret3.zpp_inner;
					if(_this4._immutable) {
						throw new js._Boot.HaxeError("Error: Vec2 is immutable");
					}
					if(_this4._isimmutable != null) {
						_this4._isimmutable();
					}
					if(x != x || y != y) {
						throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
					}
					var tmp1;
					if(ret3 != null && ret3.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this5 = ret3.zpp_inner;
					if(_this5._validate != null) {
						_this5._validate();
					}
					if(ret3.zpp_inner.x == x) {
						if(ret3 != null && ret3.zpp_disp) {
							throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this6 = ret3.zpp_inner;
						if(_this6._validate != null) {
							_this6._validate();
						}
						tmp1 = ret3.zpp_inner.y == y;
					} else {
						tmp1 = false;
					}
					if(!tmp1) {
						ret3.zpp_inner.x = x;
						ret3.zpp_inner.y = y;
						var _this7 = ret3.zpp_inner;
						if(_this7._invalidate != null) {
							_this7._invalidate(_this7);
						}
					}
				}
				ret3.zpp_inner.weak = false;
				b.zpp_inner.wrap_worldCOM = ret3;
				b.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
				b.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
				b.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=b.zpp_inner,$bind($_,$_.getworldCOM));
			}
			var tmp2 = b.zpp_inner.wrap_worldCOM;
			if(b.zpp_inner.world) {
				throw new js._Boot.HaxeError("Error: Space::world has no mass");
			}
			b.zpp_inner.validate_mass();
			if(b.zpp_inner.massMode == 0 && b.zpp_inner.shapes.head == null) {
				throw new js._Boot.HaxeError("Error: Given current mass mode, Body::mass only makes sense if it contains shapes");
			}
			ret2.addeq(tmp2.mul(b.zpp_inner.cmass,true));
			if(b.zpp_inner.world) {
				throw new js._Boot.HaxeError("Error: Space::world has no mass");
			}
			b.zpp_inner.validate_mass();
			if(b.zpp_inner.massMode == 0 && b.zpp_inner.shapes.head == null) {
				throw new js._Boot.HaxeError("Error: Given current mass mode, Body::mass only makes sense if it contains shapes");
			}
			total += b.zpp_inner.cmass;
		}
	});
	if(total == 0.0) {
		throw new js._Boot.HaxeError("Error: COM of an empty Compound is undefined silly");
	}
	ret2.muleq(1 / total);
	return ret2;
};
Compound.prototype.translate = function(translation) {
	if(translation != null && translation.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(translation == null) {
		throw new js._Boot.HaxeError("Error: Cannot translate by null Vec2");
	}
	var weak = translation.zpp_inner.weak;
	translation.zpp_inner.weak = false;
	this.visitBodies(function(b) {
		if(b.zpp_inner.wrap_pos == null) {
			b.zpp_inner.setupPosition();
		}
		b.zpp_inner.wrap_pos.addeq(translation);
	});
	translation.zpp_inner.weak = weak;
	if(translation.zpp_inner.weak) {
		if(translation != null && translation.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = translation.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(translation.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = translation.zpp_inner;
		translation.zpp_inner.outer = null;
		translation.zpp_inner = null;
		var o = translation;
		o.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = o;
		} else {
			ZPP_PubPool.poolVec2 = o;
		}
		ZPP_PubPool.nextVec2 = o;
		o.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return this;
};
Compound.prototype.rotate = function(centre,angle) {
	if(centre != null && centre.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(centre == null) {
		throw new js._Boot.HaxeError("Error: Cannot rotate about a null Vec2");
	}
	if(angle != angle) {
		throw new js._Boot.HaxeError("Error: Cannot rotate by NaN radians");
	}
	var weak = centre.zpp_inner.weak;
	centre.zpp_inner.weak = false;
	this.visitBodies(function(b) {
		b.rotate(centre,angle);
	});
	centre.zpp_inner.weak = weak;
	if(centre.zpp_inner.weak) {
		if(centre != null && centre.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = centre.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(centre.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = centre.zpp_inner;
		centre.zpp_inner.outer = null;
		centre.zpp_inner = null;
		var o = centre;
		o.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = o;
		} else {
			ZPP_PubPool.poolVec2 = o;
		}
		ZPP_PubPool.nextVec2 = o;
		o.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return this;
};
Compound.prototype.__class__ = Compound;
var CompoundIterator = nape.phys.CompoundIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!ZPP_CompoundList.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "Compound" + "Iterator derp!");
	}
};
CompoundIterator.__name__ = ["nape","phys","CompoundIterator"];
CompoundIterator.get = function(list) {
	var ret;
	if(CompoundIterator.zpp_pool == null) {
		ZPP_CompoundList.internal = true;
		var ret1 = new CompoundIterator();
		ZPP_CompoundList.internal = false;
		ret = ret1;
	} else {
		var r = CompoundIterator.zpp_pool;
		CompoundIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
CompoundIterator.prototype.zpp_inner = null;
CompoundIterator.prototype.zpp_i = null;
CompoundIterator.prototype.zpp_critical = null;
CompoundIterator.prototype.zpp_next = null;
CompoundIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var _this = this.zpp_inner;
	_this.zpp_inner.valmod();
	if(_this.zpp_inner.zip_length) {
		_this.zpp_inner.zip_length = false;
		_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
	}
	var length = _this.zpp_inner.user_length;
	this.zpp_critical = true;
	if(this.zpp_i < length) {
		return true;
	} else {
		this.zpp_next = CompoundIterator.zpp_pool;
		CompoundIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
CompoundIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
CompoundIterator.prototype.__class__ = CompoundIterator;
var CompoundList = nape.phys.CompoundList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new ZPP_CompoundList();
	this.zpp_inner.outer = this;
};
CompoundList.__name__ = ["nape","phys","CompoundList"];
CompoundList.fromArray = function(array) {
	if(array == null) {
		throw new js._Boot.HaxeError("Error: Cannot convert null Array to Nape list");
	}
	var ret = new CompoundList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
CompoundList.prototype.zpp_inner = null;
CompoundList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
CompoundList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
CompoundList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	var tmp;
	if(index >= 0) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		tmp = index >= this.zpp_inner.user_length;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Index out of bounds");
	}
	if(this.zpp_inner.reverse_flag) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		index = this.zpp_inner.user_length - 1 - index;
	}
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else {
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	return this.zpp_inner.at_ite.elt.outer;
};
CompoundList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Compound" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.inner.add(obj.zpp_inner);
		} else {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
CompoundList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Compound" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else {
			this.zpp_inner.inner.add(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
CompoundList.prototype.pop = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Compound" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	}
	this.zpp_inner.invalidate();
	return ret.outer;
};
CompoundList.prototype.shift = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Compound" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	}
	this.zpp_inner.invalidate();
	return ret.outer;
};
CompoundList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) {
		return this.push(obj);
	} else {
		return this.unshift(obj);
	}
};
CompoundList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Compound" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(obj);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.remove(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
	}
	return ret;
};
CompoundList.prototype.clear = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Compound" + "List is immutable");
	}
	if(this.zpp_inner.reverse_flag) {
		while(this.zpp_inner.inner.head != null) this.pop();
	} else {
		while(this.zpp_inner.inner.head != null) this.shift();
	}
};
CompoundList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
CompoundList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return CompoundIterator.get(this);
};
CompoundList.prototype.copy = function(deep) {
	if(deep == null) {
		deep = false;
	}
	var ret = new CompoundList();
	this.zpp_inner.valmod();
	var _g = CompoundIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = CompoundIterator.zpp_pool;
			CompoundIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(deep) {
			throw new js._Boot.HaxeError("Error: " + "Compound" + " is not a copyable type");
		}
		ret.push(i);
	}
	return ret;
};
CompoundList.prototype.merge = function(xs) {
	if(xs == null) {
		throw new js._Boot.HaxeError("Error: Cannot merge with null list");
	}
	xs.zpp_inner.valmod();
	var _g = CompoundIterator.get(xs);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = CompoundIterator.zpp_pool;
			CompoundIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) {
				this.push(x);
			} else {
				this.unshift(x);
			}
		}
	}
};
CompoundList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	this.zpp_inner.valmod();
	var _g = CompoundIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = CompoundIterator.zpp_pool;
			CompoundIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) {
			ret += ",";
		}
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
};
CompoundList.prototype.foreach = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot execute null on list elements");
	}
	this.zpp_inner.valmod();
	var it = CompoundIterator.get(this);
	while(true) {
		it.zpp_inner.zpp_inner.valmod();
		var _this = it.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		it.zpp_critical = true;
		var tmp;
		if(it.zpp_i < length) {
			tmp = true;
		} else {
			it.zpp_next = CompoundIterator.zpp_pool;
			CompoundIterator.zpp_pool = it;
			it.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		try {
			it.zpp_critical = false;
			lambda(it.zpp_inner.at(it.zpp_i++));
		} catch( e ) {
			it.zpp_next = CompoundIterator.zpp_pool;
			CompoundIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
	}
	return this;
};
CompoundList.prototype.filter = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot select elements of list with null");
	}
	var i = 0;
	while(true) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(!(i < this.zpp_inner.user_length)) {
			break;
		}
		var x = this.at(i);
		try {
			if(lambda(x)) {
				++i;
			} else {
				this.remove(x);
			}
		} catch( e ) {
			break;
		}
	}
	return this;
};
CompoundList.prototype.__class__ = CompoundList;
var FluidProperties = nape.phys.FluidProperties = function(density,viscosity) {
	if(viscosity == null) {
		viscosity = 1;
	}
	if(density == null) {
		density = 1;
	}
	this.zpp_inner = null;
	if(ZPP_FluidProperties.zpp_pool == null) {
		this.zpp_inner = new ZPP_FluidProperties();
	} else {
		this.zpp_inner = ZPP_FluidProperties.zpp_pool;
		ZPP_FluidProperties.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	this.zpp_inner.outer = this;
	if(density != this.zpp_inner.density * 1000) {
		if(density != density) {
			throw new js._Boot.HaxeError("Error: FluidProperties::" + "density" + " cannot be NaN");
		}
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate();
	}
	if(viscosity != this.zpp_inner.viscosity) {
		if(viscosity != viscosity) {
			throw new js._Boot.HaxeError("Error: FluidProperties::" + "viscosity" + " cannot be NaN");
		}
		if(viscosity < 0) {
			throw new js._Boot.HaxeError("Error: FluidProperties::" + "viscosity" + " (" + viscosity + ") must be >= 0");
		}
		this.zpp_inner.viscosity = viscosity / 1;
		this.zpp_inner.invalidate();
	}
};
FluidProperties.__name__ = ["nape","phys","FluidProperties"];
FluidProperties.prototype.zpp_inner = null;
FluidProperties.prototype.get_userData = function() {
	if(this.zpp_inner.userData == null) {
		this.zpp_inner.userData = { };
	}
	return this.zpp_inner.userData;
};
FluidProperties.prototype.get_shapes = function() {
	if(this.zpp_inner.wrap_shapes == null) {
		this.zpp_inner.wrap_shapes = ZPP_ShapeList.get(this.zpp_inner.shapes,true);
	}
	return this.zpp_inner.wrap_shapes;
};
FluidProperties.prototype.copy = function() {
	var ret = new FluidProperties(this.zpp_inner.density * 1000,this.zpp_inner.viscosity);
	if(this.zpp_inner.userData != null) {
		ret.zpp_inner.userData = Reflect.copy(this.zpp_inner.userData);
	}
	var gravity = this.zpp_inner.wrap_gravity;
	if(gravity == null) {
		if(ret.zpp_inner.wrap_gravity != null) {
			ret.zpp_inner.wrap_gravity.zpp_inner._inuse = false;
			var _this = ret.zpp_inner.wrap_gravity;
			if(_this != null && _this.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this1._isimmutable != null) {
				_this1._isimmutable();
			}
			if(_this.zpp_inner._inuse) {
				throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
			}
			var inner = _this.zpp_inner;
			_this.zpp_inner.outer = null;
			_this.zpp_inner = null;
			_this.zpp_pool = null;
			if(ZPP_PubPool.nextVec2 != null) {
				ZPP_PubPool.nextVec2.zpp_pool = _this;
			} else {
				ZPP_PubPool.poolVec2 = _this;
			}
			ZPP_PubPool.nextVec2 = _this;
			_this.zpp_disp = true;
			if(inner.outer != null) {
				inner.outer.zpp_inner = null;
				inner.outer = null;
			}
			inner._isimmutable = null;
			inner._validate = null;
			inner._invalidate = null;
			inner.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = inner;
			ret.zpp_inner.wrap_gravity = null;
		}
	} else {
		if(gravity != null && gravity.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		if(ret.zpp_inner.wrap_gravity == null) {
			ret.zpp_inner.getgravity();
		}
		var _this2 = ret.zpp_inner.wrap_gravity;
		if(_this2 != null && _this2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		if(gravity != null && gravity.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this3 = _this2.zpp_inner;
		if(_this3._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this3._isimmutable != null) {
			_this3._isimmutable();
		}
		if(gravity == null) {
			throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
		}
		if(gravity != null && gravity.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = gravity.zpp_inner;
		if(_this4._validate != null) {
			_this4._validate();
		}
		var x = gravity.zpp_inner.x;
		if(gravity != null && gravity.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = gravity.zpp_inner;
		if(_this5._validate != null) {
			_this5._validate();
		}
		var y = gravity.zpp_inner.y;
		if(_this2 != null && _this2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this2.zpp_inner;
		if(_this6._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this6._isimmutable != null) {
			_this6._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(_this2 != null && _this2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this7 = _this2.zpp_inner;
		if(_this7._validate != null) {
			_this7._validate();
		}
		if(_this2.zpp_inner.x == x) {
			if(_this2 != null && _this2.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this8 = _this2.zpp_inner;
			if(_this8._validate != null) {
				_this8._validate();
			}
			tmp = _this2.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			_this2.zpp_inner.x = x;
			_this2.zpp_inner.y = y;
			var _this9 = _this2.zpp_inner;
			if(_this9._invalidate != null) {
				_this9._invalidate(_this9);
			}
		}
		if(gravity.zpp_inner.weak) {
			if(gravity != null && gravity.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this10 = gravity.zpp_inner;
			if(_this10._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this10._isimmutable != null) {
				_this10._isimmutable();
			}
			if(gravity.zpp_inner._inuse) {
				throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
			}
			var inner1 = gravity.zpp_inner;
			gravity.zpp_inner.outer = null;
			gravity.zpp_inner = null;
			gravity.zpp_pool = null;
			if(ZPP_PubPool.nextVec2 != null) {
				ZPP_PubPool.nextVec2.zpp_pool = gravity;
			} else {
				ZPP_PubPool.poolVec2 = gravity;
			}
			ZPP_PubPool.nextVec2 = gravity;
			gravity.zpp_disp = true;
			if(inner1.outer != null) {
				inner1.outer.zpp_inner = null;
				inner1.outer = null;
			}
			inner1._isimmutable = null;
			inner1._validate = null;
			inner1._invalidate = null;
			inner1.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = inner1;
		}
	}
	return ret;
};
FluidProperties.prototype.get_density = function() {
	return this.zpp_inner.density * 1000;
};
FluidProperties.prototype.set_density = function(density) {
	if(density != this.zpp_inner.density * 1000) {
		if(density != density) {
			throw new js._Boot.HaxeError("Error: FluidProperties::" + "density" + " cannot be NaN");
		}
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.density * 1000;
};
FluidProperties.prototype.get_viscosity = function() {
	return this.zpp_inner.viscosity;
};
FluidProperties.prototype.set_viscosity = function(viscosity) {
	if(viscosity != this.zpp_inner.viscosity) {
		if(viscosity != viscosity) {
			throw new js._Boot.HaxeError("Error: FluidProperties::" + "viscosity" + " cannot be NaN");
		}
		if(viscosity < 0) {
			throw new js._Boot.HaxeError("Error: FluidProperties::" + "viscosity" + " (" + viscosity + ") must be >= 0");
		}
		this.zpp_inner.viscosity = viscosity / 1;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.viscosity;
};
FluidProperties.prototype.get_gravity = function() {
	return this.zpp_inner.wrap_gravity;
};
FluidProperties.prototype.set_gravity = function(gravity) {
	if(gravity == null) {
		if(this.zpp_inner.wrap_gravity != null) {
			this.zpp_inner.wrap_gravity.zpp_inner._inuse = false;
			var _this = this.zpp_inner.wrap_gravity;
			if(_this != null && _this.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this1._isimmutable != null) {
				_this1._isimmutable();
			}
			if(_this.zpp_inner._inuse) {
				throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
			}
			var inner = _this.zpp_inner;
			_this.zpp_inner.outer = null;
			_this.zpp_inner = null;
			_this.zpp_pool = null;
			if(ZPP_PubPool.nextVec2 != null) {
				ZPP_PubPool.nextVec2.zpp_pool = _this;
			} else {
				ZPP_PubPool.poolVec2 = _this;
			}
			ZPP_PubPool.nextVec2 = _this;
			_this.zpp_disp = true;
			if(inner.outer != null) {
				inner.outer.zpp_inner = null;
				inner.outer = null;
			}
			inner._isimmutable = null;
			inner._validate = null;
			inner._invalidate = null;
			inner.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = inner;
			this.zpp_inner.wrap_gravity = null;
		}
	} else {
		if(gravity != null && gravity.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		if(this.zpp_inner.wrap_gravity == null) {
			this.zpp_inner.getgravity();
		}
		var _this2 = this.zpp_inner.wrap_gravity;
		if(_this2 != null && _this2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		if(gravity != null && gravity.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this3 = _this2.zpp_inner;
		if(_this3._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this3._isimmutable != null) {
			_this3._isimmutable();
		}
		if(gravity == null) {
			throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
		}
		if(gravity != null && gravity.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = gravity.zpp_inner;
		if(_this4._validate != null) {
			_this4._validate();
		}
		var x = gravity.zpp_inner.x;
		if(gravity != null && gravity.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = gravity.zpp_inner;
		if(_this5._validate != null) {
			_this5._validate();
		}
		var y = gravity.zpp_inner.y;
		if(_this2 != null && _this2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this2.zpp_inner;
		if(_this6._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this6._isimmutable != null) {
			_this6._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(_this2 != null && _this2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this7 = _this2.zpp_inner;
		if(_this7._validate != null) {
			_this7._validate();
		}
		if(_this2.zpp_inner.x == x) {
			if(_this2 != null && _this2.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this8 = _this2.zpp_inner;
			if(_this8._validate != null) {
				_this8._validate();
			}
			tmp = _this2.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			_this2.zpp_inner.x = x;
			_this2.zpp_inner.y = y;
			var _this9 = _this2.zpp_inner;
			if(_this9._invalidate != null) {
				_this9._invalidate(_this9);
			}
		}
		if(gravity.zpp_inner.weak) {
			if(gravity != null && gravity.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this10 = gravity.zpp_inner;
			if(_this10._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this10._isimmutable != null) {
				_this10._isimmutable();
			}
			if(gravity.zpp_inner._inuse) {
				throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
			}
			var inner1 = gravity.zpp_inner;
			gravity.zpp_inner.outer = null;
			gravity.zpp_inner = null;
			gravity.zpp_pool = null;
			if(ZPP_PubPool.nextVec2 != null) {
				ZPP_PubPool.nextVec2.zpp_pool = gravity;
			} else {
				ZPP_PubPool.poolVec2 = gravity;
			}
			ZPP_PubPool.nextVec2 = gravity;
			gravity.zpp_disp = true;
			if(inner1.outer != null) {
				inner1.outer.zpp_inner = null;
				inner1.outer = null;
			}
			inner1._isimmutable = null;
			inner1._validate = null;
			inner1._invalidate = null;
			inner1.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = inner1;
		}
	}
	return this.zpp_inner.wrap_gravity;
};
FluidProperties.prototype.toString = function() {
	return "{ density: " + this.zpp_inner.density * 1000 + " viscosity: " + this.zpp_inner.viscosity + " gravity: " + Std.string(this.zpp_inner.wrap_gravity) + " }";
};
FluidProperties.prototype.__class__ = FluidProperties;
var GravMassMode = nape.phys.GravMassMode = function() {
	if(!ZPP_Flags.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "GravMassMode" + " derp!");
	}
};
GravMassMode.__name__ = ["nape","phys","GravMassMode"];
GravMassMode.DEFAULT = null;
GravMassMode.get_DEFAULT = function() {
	if(ZPP_Flags.GravMassMode_DEFAULT == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.GravMassMode_DEFAULT = new GravMassMode();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.GravMassMode_DEFAULT;
};
GravMassMode.FIXED = null;
GravMassMode.get_FIXED = function() {
	if(ZPP_Flags.GravMassMode_FIXED == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.GravMassMode_FIXED = new GravMassMode();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.GravMassMode_FIXED;
};
GravMassMode.SCALED = null;
GravMassMode.get_SCALED = function() {
	if(ZPP_Flags.GravMassMode_SCALED == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.GravMassMode_SCALED = new GravMassMode();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.GravMassMode_SCALED;
};
GravMassMode.prototype.toString = function() {
	if(ZPP_Flags.GravMassMode_DEFAULT == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.GravMassMode_DEFAULT = new GravMassMode();
		ZPP_Flags.internal = false;
	}
	if(this == ZPP_Flags.GravMassMode_DEFAULT) {
		return "DEFAULT";
	} else {
		if(ZPP_Flags.GravMassMode_FIXED == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.GravMassMode_FIXED = new GravMassMode();
			ZPP_Flags.internal = false;
		}
		if(this == ZPP_Flags.GravMassMode_FIXED) {
			return "FIXED";
		} else {
			if(ZPP_Flags.GravMassMode_SCALED == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.GravMassMode_SCALED = new GravMassMode();
				ZPP_Flags.internal = false;
			}
			if(this == ZPP_Flags.GravMassMode_SCALED) {
				return "SCALED";
			} else {
				return "";
			}
		}
	}
};
GravMassMode.prototype.__class__ = GravMassMode;
var InertiaMode = nape.phys.InertiaMode = function() {
	if(!ZPP_Flags.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "InertiaMode" + " derp!");
	}
};
InertiaMode.__name__ = ["nape","phys","InertiaMode"];
InertiaMode.DEFAULT = null;
InertiaMode.get_DEFAULT = function() {
	if(ZPP_Flags.InertiaMode_DEFAULT == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.InertiaMode_DEFAULT = new InertiaMode();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.InertiaMode_DEFAULT;
};
InertiaMode.FIXED = null;
InertiaMode.get_FIXED = function() {
	if(ZPP_Flags.InertiaMode_FIXED == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.InertiaMode_FIXED = new InertiaMode();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.InertiaMode_FIXED;
};
InertiaMode.prototype.toString = function() {
	if(ZPP_Flags.InertiaMode_DEFAULT == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.InertiaMode_DEFAULT = new InertiaMode();
		ZPP_Flags.internal = false;
	}
	if(this == ZPP_Flags.InertiaMode_DEFAULT) {
		return "DEFAULT";
	} else {
		if(ZPP_Flags.InertiaMode_FIXED == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InertiaMode_FIXED = new InertiaMode();
			ZPP_Flags.internal = false;
		}
		if(this == ZPP_Flags.InertiaMode_FIXED) {
			return "FIXED";
		} else {
			return "";
		}
	}
};
InertiaMode.prototype.__class__ = InertiaMode;
var InteractorIterator = nape.phys.InteractorIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!ZPP_InteractorList.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "Interactor" + "Iterator derp!");
	}
};
InteractorIterator.__name__ = ["nape","phys","InteractorIterator"];
InteractorIterator.get = function(list) {
	var ret;
	if(InteractorIterator.zpp_pool == null) {
		ZPP_InteractorList.internal = true;
		var ret1 = new InteractorIterator();
		ZPP_InteractorList.internal = false;
		ret = ret1;
	} else {
		var r = InteractorIterator.zpp_pool;
		InteractorIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
InteractorIterator.prototype.zpp_inner = null;
InteractorIterator.prototype.zpp_i = null;
InteractorIterator.prototype.zpp_critical = null;
InteractorIterator.prototype.zpp_next = null;
InteractorIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var _this = this.zpp_inner;
	_this.zpp_inner.valmod();
	if(_this.zpp_inner.zip_length) {
		_this.zpp_inner.zip_length = false;
		_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
	}
	var length = _this.zpp_inner.user_length;
	this.zpp_critical = true;
	if(this.zpp_i < length) {
		return true;
	} else {
		this.zpp_next = InteractorIterator.zpp_pool;
		InteractorIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
InteractorIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
InteractorIterator.prototype.__class__ = InteractorIterator;
var InteractorList = nape.phys.InteractorList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new ZPP_InteractorList();
	this.zpp_inner.outer = this;
};
InteractorList.__name__ = ["nape","phys","InteractorList"];
InteractorList.fromArray = function(array) {
	if(array == null) {
		throw new js._Boot.HaxeError("Error: Cannot convert null Array to Nape list");
	}
	var ret = new InteractorList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
InteractorList.prototype.zpp_inner = null;
InteractorList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
InteractorList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner_i);
};
InteractorList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	var tmp;
	if(index >= 0) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		tmp = index >= this.zpp_inner.user_length;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Index out of bounds");
	}
	if(this.zpp_inner.reverse_flag) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		index = this.zpp_inner.user_length - 1 - index;
	}
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else {
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	return this.zpp_inner.at_ite.elt.outer_i;
};
InteractorList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Interactor" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.inner.add(obj.zpp_inner_i);
		} else {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner_i);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
InteractorList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Interactor" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner_i);
		} else {
			this.zpp_inner.inner.add(obj.zpp_inner_i);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
InteractorList.prototype.pop = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Interactor" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer_i;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx1 = ret.outer_i;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	}
	this.zpp_inner.invalidate();
	return ret.outer_i;
};
InteractorList.prototype.shift = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Interactor" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx = ret.outer_i;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.outer_i;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	}
	this.zpp_inner.invalidate();
	return ret.outer_i;
};
InteractorList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) {
		return this.push(obj);
	} else {
		return this.unshift(obj);
	}
};
InteractorList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Interactor" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj.zpp_inner_i) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(obj);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.remove(obj.zpp_inner_i);
		}
		this.zpp_inner.invalidate();
	}
	return ret;
};
InteractorList.prototype.clear = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Interactor" + "List is immutable");
	}
	if(this.zpp_inner.reverse_flag) {
		while(this.zpp_inner.inner.head != null) this.pop();
	} else {
		while(this.zpp_inner.inner.head != null) this.shift();
	}
};
InteractorList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
InteractorList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return InteractorIterator.get(this);
};
InteractorList.prototype.copy = function(deep) {
	if(deep == null) {
		deep = false;
	}
	var ret = new InteractorList();
	this.zpp_inner.valmod();
	var _g = InteractorIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = InteractorIterator.zpp_pool;
			InteractorIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(deep) {
			throw new js._Boot.HaxeError("Error: " + "Interactor" + " is not a copyable type");
		}
		ret.push(i);
	}
	return ret;
};
InteractorList.prototype.merge = function(xs) {
	if(xs == null) {
		throw new js._Boot.HaxeError("Error: Cannot merge with null list");
	}
	xs.zpp_inner.valmod();
	var _g = InteractorIterator.get(xs);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = InteractorIterator.zpp_pool;
			InteractorIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) {
				this.push(x);
			} else {
				this.unshift(x);
			}
		}
	}
};
InteractorList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	this.zpp_inner.valmod();
	var _g = InteractorIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = InteractorIterator.zpp_pool;
			InteractorIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) {
			ret += ",";
		}
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
};
InteractorList.prototype.foreach = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot execute null on list elements");
	}
	this.zpp_inner.valmod();
	var it = InteractorIterator.get(this);
	while(true) {
		it.zpp_inner.zpp_inner.valmod();
		var _this = it.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		it.zpp_critical = true;
		var tmp;
		if(it.zpp_i < length) {
			tmp = true;
		} else {
			it.zpp_next = InteractorIterator.zpp_pool;
			InteractorIterator.zpp_pool = it;
			it.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		try {
			it.zpp_critical = false;
			lambda(it.zpp_inner.at(it.zpp_i++));
		} catch( e ) {
			it.zpp_next = InteractorIterator.zpp_pool;
			InteractorIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
	}
	return this;
};
InteractorList.prototype.filter = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot select elements of list with null");
	}
	var i = 0;
	while(true) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(!(i < this.zpp_inner.user_length)) {
			break;
		}
		var x = this.at(i);
		try {
			if(lambda(x)) {
				++i;
			} else {
				this.remove(x);
			}
		} catch( e ) {
			break;
		}
	}
	return this;
};
InteractorList.prototype.__class__ = InteractorList;
var MassMode = nape.phys.MassMode = function() {
	if(!ZPP_Flags.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "MassMode" + " derp!");
	}
};
MassMode.__name__ = ["nape","phys","MassMode"];
MassMode.DEFAULT = null;
MassMode.get_DEFAULT = function() {
	if(ZPP_Flags.MassMode_DEFAULT == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.MassMode_DEFAULT = new MassMode();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.MassMode_DEFAULT;
};
MassMode.FIXED = null;
MassMode.get_FIXED = function() {
	if(ZPP_Flags.MassMode_FIXED == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.MassMode_FIXED = new MassMode();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.MassMode_FIXED;
};
MassMode.prototype.toString = function() {
	if(ZPP_Flags.MassMode_DEFAULT == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.MassMode_DEFAULT = new MassMode();
		ZPP_Flags.internal = false;
	}
	if(this == ZPP_Flags.MassMode_DEFAULT) {
		return "DEFAULT";
	} else {
		if(ZPP_Flags.MassMode_FIXED == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.MassMode_FIXED = new MassMode();
			ZPP_Flags.internal = false;
		}
		if(this == ZPP_Flags.MassMode_FIXED) {
			return "FIXED";
		} else {
			return "";
		}
	}
};
MassMode.prototype.__class__ = MassMode;
var Material = nape.phys.Material = function(elasticity,dynamicFriction,staticFriction,density,rollingFriction) {
	if(rollingFriction == null) {
		rollingFriction = 0.001;
	}
	if(density == null) {
		density = 1;
	}
	if(staticFriction == null) {
		staticFriction = 2.0;
	}
	if(dynamicFriction == null) {
		dynamicFriction = 1.0;
	}
	if(elasticity == null) {
		elasticity = 0.0;
	}
	this.zpp_inner = null;
	if(ZPP_Material.zpp_pool == null) {
		this.zpp_inner = new ZPP_Material();
	} else {
		this.zpp_inner = ZPP_Material.zpp_pool;
		ZPP_Material.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	this.zpp_inner.outer = this;
	if(elasticity != this.zpp_inner.elasticity) {
		if(elasticity != elasticity) {
			throw new js._Boot.HaxeError("Error: Material::" + "elasticity" + " cannot be NaN");
		}
		this.zpp_inner.elasticity = elasticity / 1;
		this.zpp_inner.invalidate(ZPP_Material.WAKE | ZPP_Material.ARBITERS);
	}
	if(dynamicFriction != this.zpp_inner.dynamicFriction) {
		if(dynamicFriction != dynamicFriction) {
			throw new js._Boot.HaxeError("Error: Material::" + "dynamicFriction" + " cannot be NaN");
		}
		if(dynamicFriction < 0) {
			throw new js._Boot.HaxeError("Error: Material::" + "dynamicFriction" + " cannot be negative");
		}
		this.zpp_inner.dynamicFriction = dynamicFriction / 1;
		this.zpp_inner.invalidate(ZPP_Material.WAKE | ZPP_Material.ANGDRAG | ZPP_Material.ARBITERS);
	}
	if(staticFriction != this.zpp_inner.staticFriction) {
		if(staticFriction != staticFriction) {
			throw new js._Boot.HaxeError("Error: Material::" + "staticFriction" + " cannot be NaN");
		}
		if(staticFriction < 0) {
			throw new js._Boot.HaxeError("Error: Material::" + "staticFriction" + " cannot be negative");
		}
		this.zpp_inner.staticFriction = staticFriction / 1;
		this.zpp_inner.invalidate(ZPP_Material.WAKE | ZPP_Material.ARBITERS);
	}
	if(density != this.zpp_inner.density * 1000) {
		if(density != density) {
			throw new js._Boot.HaxeError("Error: Material::" + "density" + " cannot be NaN");
		}
		if(density < 0) {
			throw new js._Boot.HaxeError("Error: Material::density must be positive");
		}
		if(density < 0) {
			throw new js._Boot.HaxeError("Error: Material::" + "density" + " cannot be negative");
		}
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate(ZPP_Material.WAKE | ZPP_Material.PROPS);
	}
	if(rollingFriction != this.zpp_inner.rollingFriction) {
		if(rollingFriction != rollingFriction) {
			throw new js._Boot.HaxeError("Error: Material::" + "rollingFriction" + " cannot be NaN");
		}
		if(rollingFriction < 0) {
			throw new js._Boot.HaxeError("Error: Material::" + "rollingFriction" + " cannot be negative");
		}
		this.zpp_inner.rollingFriction = rollingFriction / 1;
		this.zpp_inner.invalidate(ZPP_Material.WAKE | ZPP_Material.ARBITERS);
	}
};
Material.__name__ = ["nape","phys","Material"];
Material.wood = function() {
	return new Material(0.4,0.2,0.38,0.7,0.005);
};
Material.steel = function() {
	return new Material(0.2,0.57,0.74,7.8,0.001);
};
Material.ice = function() {
	return new Material(0.3,0.03,0.1,0.9,0.0001);
};
Material.rubber = function() {
	return new Material(0.8,1.0,1.4,1.5,0.01);
};
Material.glass = function() {
	return new Material(0.4,0.4,0.94,2.6,0.002);
};
Material.sand = function() {
	return new Material(-1.0,0.45,0.6,1.6,16.0);
};
Material.prototype.zpp_inner = null;
Material.prototype.get_userData = function() {
	if(this.zpp_inner.userData == null) {
		this.zpp_inner.userData = { };
	}
	return this.zpp_inner.userData;
};
Material.prototype.get_shapes = function() {
	if(this.zpp_inner.wrap_shapes == null) {
		this.zpp_inner.wrap_shapes = ZPP_ShapeList.get(this.zpp_inner.shapes,true);
	}
	return this.zpp_inner.wrap_shapes;
};
Material.prototype.copy = function() {
	var ret = new Material(this.zpp_inner.elasticity,this.zpp_inner.dynamicFriction,this.zpp_inner.staticFriction,this.zpp_inner.density * 1000,this.zpp_inner.rollingFriction);
	if(this.zpp_inner.userData != null) {
		ret.zpp_inner.userData = Reflect.copy(this.zpp_inner.userData);
	}
	return ret;
};
Material.prototype.get_elasticity = function() {
	return this.zpp_inner.elasticity;
};
Material.prototype.set_elasticity = function(elasticity) {
	if(elasticity != this.zpp_inner.elasticity) {
		if(elasticity != elasticity) {
			throw new js._Boot.HaxeError("Error: Material::" + "elasticity" + " cannot be NaN");
		}
		this.zpp_inner.elasticity = elasticity / 1;
		this.zpp_inner.invalidate(ZPP_Material.WAKE | ZPP_Material.ARBITERS);
	}
	return this.zpp_inner.elasticity;
};
Material.prototype.get_dynamicFriction = function() {
	return this.zpp_inner.dynamicFriction;
};
Material.prototype.set_dynamicFriction = function(dynamicFriction) {
	if(dynamicFriction != this.zpp_inner.dynamicFriction) {
		if(dynamicFriction != dynamicFriction) {
			throw new js._Boot.HaxeError("Error: Material::" + "dynamicFriction" + " cannot be NaN");
		}
		if(dynamicFriction < 0) {
			throw new js._Boot.HaxeError("Error: Material::" + "dynamicFriction" + " cannot be negative");
		}
		this.zpp_inner.dynamicFriction = dynamicFriction / 1;
		this.zpp_inner.invalidate(ZPP_Material.WAKE | ZPP_Material.ANGDRAG | ZPP_Material.ARBITERS);
	}
	return this.zpp_inner.dynamicFriction;
};
Material.prototype.get_staticFriction = function() {
	return this.zpp_inner.staticFriction;
};
Material.prototype.set_staticFriction = function(staticFriction) {
	if(staticFriction != this.zpp_inner.staticFriction) {
		if(staticFriction != staticFriction) {
			throw new js._Boot.HaxeError("Error: Material::" + "staticFriction" + " cannot be NaN");
		}
		if(staticFriction < 0) {
			throw new js._Boot.HaxeError("Error: Material::" + "staticFriction" + " cannot be negative");
		}
		this.zpp_inner.staticFriction = staticFriction / 1;
		this.zpp_inner.invalidate(ZPP_Material.WAKE | ZPP_Material.ARBITERS);
	}
	return this.zpp_inner.staticFriction;
};
Material.prototype.get_density = function() {
	return this.zpp_inner.density * 1000;
};
Material.prototype.set_density = function(density) {
	if(density != this.zpp_inner.density * 1000) {
		if(density != density) {
			throw new js._Boot.HaxeError("Error: Material::" + "density" + " cannot be NaN");
		}
		if(density < 0) {
			throw new js._Boot.HaxeError("Error: Material::density must be positive");
		}
		if(density < 0) {
			throw new js._Boot.HaxeError("Error: Material::" + "density" + " cannot be negative");
		}
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate(ZPP_Material.WAKE | ZPP_Material.PROPS);
	}
	return this.zpp_inner.density * 1000;
};
Material.prototype.get_rollingFriction = function() {
	return this.zpp_inner.rollingFriction;
};
Material.prototype.set_rollingFriction = function(rollingFriction) {
	if(rollingFriction != this.zpp_inner.rollingFriction) {
		if(rollingFriction != rollingFriction) {
			throw new js._Boot.HaxeError("Error: Material::" + "rollingFriction" + " cannot be NaN");
		}
		if(rollingFriction < 0) {
			throw new js._Boot.HaxeError("Error: Material::" + "rollingFriction" + " cannot be negative");
		}
		this.zpp_inner.rollingFriction = rollingFriction / 1;
		this.zpp_inner.invalidate(ZPP_Material.WAKE | ZPP_Material.ARBITERS);
	}
	return this.zpp_inner.rollingFriction;
};
Material.prototype.toString = function() {
	return "{ elasticity: " + this.zpp_inner.elasticity + " dynamicFriction: " + this.zpp_inner.dynamicFriction + " staticFriction: " + this.zpp_inner.staticFriction + " density: " + this.zpp_inner.density * 1000 + " rollingFriction: " + this.zpp_inner.rollingFriction + " }";
};
Material.prototype.__class__ = Material;
var Shape = nape.shape.Shape = function() {
	this.zpp_inner = null;
	Interactor.zpp_internalAlloc = true;
	Interactor.call(this);
	Interactor.zpp_internalAlloc = false;
	if(!Shape.zpp_internalAlloc) {
		throw new js._Boot.HaxeError("Error: Shape cannot be instantiated derp!");
	}
};
Shape.__name__ = ["nape","shape","Shape"];
Shape.__super__ = Interactor;
// for(var k in Interactor.prototype ) Shape.prototype[k] = Interactor.prototype[k];
Shape.prototype = Object.create(Interactor.prototype);
Shape.prototype.zpp_inner = null;
Shape.prototype.get_type = function() {
	return ZPP_Shape.types[this.zpp_inner.type];
};
Shape.prototype.isCircle = function() {
	return this.zpp_inner.type == 0;
};
Shape.prototype.isPolygon = function() {
	return this.zpp_inner.type == 1;
};
Shape.prototype.get_body = function() {
	if(this.zpp_inner.body != null) {
		return this.zpp_inner.body.outer;
	} else {
		return null;
	}
};
Shape.prototype.set_body = function(body) {
	this.zpp_inner.immutable_midstep("Shape::body");
	if((this.zpp_inner.body != null?this.zpp_inner.body.outer:null) != body) {
		if(this.zpp_inner.body != null) {
			(this.zpp_inner.body != null?this.zpp_inner.body.outer:null).zpp_inner.wrap_shapes.remove(this);
		}
		if(body != null) {
			var _this = body.zpp_inner.wrap_shapes;
			if(_this.zpp_inner.reverse_flag) {
				_this.push(this);
			} else {
				_this.unshift(this);
			}
		}
	}
	if(this.zpp_inner.body != null) {
		return this.zpp_inner.body.outer;
	} else {
		return null;
	}
};
Shape.prototype.get_castCircle = function() {
	if(this.zpp_inner.type == 0) {
		return this.zpp_inner.circle.outer_zn;
	} else {
		return null;
	}
};
Shape.prototype.get_castPolygon = function() {
	if(this.zpp_inner.type == 1) {
		return this.zpp_inner.polygon.outer_zn;
	} else {
		return null;
	}
};
Shape.prototype.get_worldCOM = function() {
	if(this.zpp_inner.wrap_worldCOM == null) {
		var x = this.zpp_inner.worldCOMx;
		var y = this.zpp_inner.worldCOMy;
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(ZPP_PubPool.poolVec2 == null) {
			ret = new Vec2();
		} else {
			ret = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(ZPP_Vec2.zpp_pool == null) {
				ret1 = new ZPP_Vec2();
			} else {
				ret1 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.zpp_inner.wrap_worldCOM = ret;
		this.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
		this.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
		this.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getworldCOM));
	}
	return this.zpp_inner.wrap_worldCOM;
};
Shape.prototype.get_localCOM = function() {
	if(this.zpp_inner.wrap_localCOM == null) {
		if(this.zpp_inner.type == 0) {
			this.zpp_inner.circle.setupLocalCOM();
		} else {
			this.zpp_inner.polygon.setupLocalCOM();
		}
	}
	return this.zpp_inner.wrap_localCOM;
};
Shape.prototype.set_localCOM = function(localCOM) {
	this.zpp_inner.immutable_midstep("Body::localCOM");
	if(localCOM != null && localCOM.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == 1) {
		throw new js._Boot.HaxeError("Error: Cannot modify Shape belonging to a static Object once inside a Space");
	}
	if(localCOM == null) {
		throw new js._Boot.HaxeError("Error: Shape::localCOM cannot be null");
	}
	if(this.zpp_inner.wrap_localCOM == null) {
		if(this.zpp_inner.type == 0) {
			this.zpp_inner.circle.setupLocalCOM();
		} else {
			this.zpp_inner.polygon.setupLocalCOM();
		}
	}
	var _this = this.zpp_inner.wrap_localCOM;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(localCOM != null && localCOM.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(localCOM == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(localCOM != null && localCOM.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = localCOM.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = localCOM.zpp_inner.x;
	if(localCOM != null && localCOM.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = localCOM.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = localCOM.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(localCOM.zpp_inner.weak) {
		if(localCOM != null && localCOM.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = localCOM.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(localCOM.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = localCOM.zpp_inner;
		localCOM.zpp_inner.outer = null;
		localCOM.zpp_inner = null;
		localCOM.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = localCOM;
		} else {
			ZPP_PubPool.poolVec2 = localCOM;
		}
		ZPP_PubPool.nextVec2 = localCOM;
		localCOM.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner.wrap_localCOM == null) {
		if(this.zpp_inner.type == 0) {
			this.zpp_inner.circle.setupLocalCOM();
		} else {
			this.zpp_inner.polygon.setupLocalCOM();
		}
	}
	return this.zpp_inner.wrap_localCOM;
};
Shape.prototype.get_area = function() {
	this.zpp_inner.validate_area_inertia();
	return this.zpp_inner.area;
};
Shape.prototype.get_inertia = function() {
	this.zpp_inner.validate_area_inertia();
	return this.zpp_inner.inertia;
};
Shape.prototype.get_angDrag = function() {
	this.zpp_inner.validate_angDrag();
	return this.zpp_inner.angDrag;
};
Shape.prototype.get_material = function() {
	return this.zpp_inner.material.wrapper();
};
Shape.prototype.set_material = function(material) {
	this.zpp_inner.immutable_midstep("Shape::material");
	if(material == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null as Shape material");
	}
	this.zpp_inner.setMaterial(material.zpp_inner);
	return this.zpp_inner.material.wrapper();
};
Shape.prototype.get_filter = function() {
	return this.zpp_inner.filter.wrapper();
};
Shape.prototype.set_filter = function(filter) {
	this.zpp_inner.immutable_midstep("Shape::filter");
	if(filter == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null as Shape filter");
	}
	this.zpp_inner.setFilter(filter.zpp_inner);
	return this.zpp_inner.filter.wrapper();
};
Shape.prototype.get_fluidProperties = function() {
	this.zpp_inner.immutable_midstep("Shape::fluidProperties");
	if(this.zpp_inner.fluidProperties == null) {
		this.zpp_inner.setFluid(new FluidProperties().zpp_inner);
	}
	return this.zpp_inner.fluidProperties.wrapper();
};
Shape.prototype.set_fluidProperties = function(fluidProperties) {
	if(fluidProperties == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false");
	}
	this.zpp_inner.setFluid(fluidProperties.zpp_inner);
	this.zpp_inner.immutable_midstep("Shape::fluidProperties");
	if(this.zpp_inner.fluidProperties == null) {
		this.zpp_inner.setFluid(new FluidProperties().zpp_inner);
	}
	return this.zpp_inner.fluidProperties.wrapper();
};
Shape.prototype.get_fluidEnabled = function() {
	return this.zpp_inner.fluidEnabled;
};
Shape.prototype.set_fluidEnabled = function(fluidEnabled) {
	this.zpp_inner.immutable_midstep("Shape::fluidEnabled");
	this.zpp_inner.fluidEnabled = fluidEnabled;
	if(fluidEnabled && this.zpp_inner.fluidProperties == null) {
		var fluidProperties = new FluidProperties();
		if(fluidProperties == null) {
			throw new js._Boot.HaxeError("Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false");
		}
		this.zpp_inner.setFluid(fluidProperties.zpp_inner);
		this.zpp_inner.immutable_midstep("Shape::fluidProperties");
		if(this.zpp_inner.fluidProperties == null) {
			this.zpp_inner.setFluid(new FluidProperties().zpp_inner);
		}
		this.zpp_inner.fluidProperties.wrapper();
	}
	this.zpp_inner.wake();
	return this.zpp_inner.fluidEnabled;
};
Shape.prototype.get_sensorEnabled = function() {
	return this.zpp_inner.sensorEnabled;
};
Shape.prototype.set_sensorEnabled = function(sensorEnabled) {
	this.zpp_inner.immutable_midstep("Shape::sensorEnabled");
	this.zpp_inner.sensorEnabled = sensorEnabled;
	this.zpp_inner.wake();
	return this.zpp_inner.sensorEnabled;
};
Shape.prototype.get_bounds = function() {
	return this.zpp_inner.aabb.wrapper();
};
Shape.prototype.translate = function(translation) {
	this.zpp_inner.immutable_midstep("Shape::translate()");
	if(translation != null && translation.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == 1) {
		throw new js._Boot.HaxeError("Error: Cannot modify Shape belonging to a static Object once inside a Space");
	}
	if(translation == null) {
		throw new js._Boot.HaxeError("Error: Cannot displace Shape by null Vec2");
	}
	if(translation.lsq() > 0) {
		if(this.zpp_inner.type == 0) {
			if(translation != null && translation.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = translation.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			var tmp = translation.zpp_inner.x;
			if(translation != null && translation.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = translation.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			this.zpp_inner.circle.__translate(tmp,translation.zpp_inner.y);
		} else {
			if(translation != null && translation.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = translation.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			var tmp1 = translation.zpp_inner.x;
			if(translation != null && translation.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this3 = translation.zpp_inner;
			if(_this3._validate != null) {
				_this3._validate();
			}
			this.zpp_inner.polygon.__translate(tmp1,translation.zpp_inner.y);
		}
	}
	if(translation.zpp_inner.weak) {
		if(translation != null && translation.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = translation.zpp_inner;
		if(_this4._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this4._isimmutable != null) {
			_this4._isimmutable();
		}
		if(translation.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = translation.zpp_inner;
		translation.zpp_inner.outer = null;
		translation.zpp_inner = null;
		translation.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = translation;
		} else {
			ZPP_PubPool.poolVec2 = translation;
		}
		ZPP_PubPool.nextVec2 = translation;
		translation.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return this;
};
Shape.prototype.scale = function(scalex,scaley) {
	this.zpp_inner.immutable_midstep("Shape::scale()");
	if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == 1) {
		throw new js._Boot.HaxeError("Error: Cannot modify Shape belonging to a static Object once inside a Space");
	}
	if(scalex != scalex || scaley != scaley) {
		throw new js._Boot.HaxeError("Error: Cannot scale Shape by NaN");
	}
	if(scalex == 0 || scaley == 0) {
		throw new js._Boot.HaxeError("Error: Cannot Scale shape by a factor of 0");
	}
	if(this.zpp_inner.type == 0) {
		var d = scalex * scalex - scaley * scaley;
		if(d * d < Config.epsilon * Config.epsilon) {
			this.zpp_inner.circle.__scale(scalex,scaley);
		} else {
			throw new js._Boot.HaxeError("Error: Cannot perform a non equal scaling on a Circle");
		}
	} else {
		this.zpp_inner.polygon.__scale(scalex,scaley);
	}
	return this;
};
Shape.prototype.rotate = function(angle) {
	this.zpp_inner.immutable_midstep("Shape::rotate()");
	if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == 1) {
		throw new js._Boot.HaxeError("Error: Cannot modify Shape belonging to a static Object once inside a Space");
	}
	if(angle != angle) {
		throw new js._Boot.HaxeError("Error: Cannot rotate Shape by NaN");
	}
	if(angle % (2 * Math.PI) != 0.0) {
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		if(this.zpp_inner.type == 0) {
			this.zpp_inner.circle.__rotate(sin,cos);
		} else {
			this.zpp_inner.polygon.__rotate(sin,cos);
		}
	}
	return this;
};
Shape.prototype.transform = function(matrix) {
	this.zpp_inner.immutable_midstep("Shape::transform()");
	if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == 1) {
		throw new js._Boot.HaxeError("Error: Cannot modify Shape belonging to a static Object once inside a Space");
	}
	if(matrix == null) {
		throw new js._Boot.HaxeError("Error: Cannot transform Shape by null matrix");
	}
	if(matrix.singular()) {
		throw new js._Boot.HaxeError("Error: Cannot transform Shape by a singular matrix");
	}
	if(this.zpp_inner.type == 0) {
		if(matrix.equiorthogonal()) {
			this.zpp_inner.circle.__transform(matrix);
		} else {
			throw new js._Boot.HaxeError("Error: Cannot transform Circle by a non equiorthogonal matrix");
		}
	} else {
		this.zpp_inner.polygon.__transform(matrix);
	}
	return this;
};
Shape.prototype.contains = function(point) {
	if(point != null && point.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(point == null) {
		throw new js._Boot.HaxeError("Cannot check null point for containment");
	}
	if((this.zpp_inner.body != null?this.zpp_inner.body.outer:null) == null) {
		throw new js._Boot.HaxeError("Error: Shape is not well defined without a Body");
	}
	ZPP_Geom.validateShape(this.zpp_inner);
	var _this = point.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var ret = ZPP_Collide.shapeContains(this.zpp_inner,point.zpp_inner);
	if(point.zpp_inner.weak) {
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = point.zpp_inner;
		if(_this1._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this1._isimmutable != null) {
			_this1._isimmutable();
		}
		if(point.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = point.zpp_inner;
		point.zpp_inner.outer = null;
		point.zpp_inner = null;
		point.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = point;
		} else {
			ZPP_PubPool.poolVec2 = point;
		}
		ZPP_PubPool.nextVec2 = point;
		point.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return ret;
};
Shape.prototype.copy = function() {
	return this.zpp_inner.copy();
};
Shape.prototype.toString = function() {
	return (this.zpp_inner.type == 0?"Circle":"Polygon") + "#" + this.zpp_inner_i.id;
};
Shape.prototype.__class__ = Shape;
var Circle = nape.shape.Circle = function(radius,localCOM,material,filter) {
	this.zpp_inner_zn = null;
	Shape.zpp_internalAlloc = true;
	Shape.call(this);
	Shape.zpp_internalAlloc = false;
	this.zpp_inner_zn = new ZPP_Circle();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner_i.outer_i = this;
	this.zpp_inner.immutable_midstep("Circle::radius");
	if(this.zpp_inner.body != null && this.zpp_inner.body.type == 1 && this.zpp_inner.body.space != null) {
		throw new js._Boot.HaxeError("Error: Cannot modifiy radius of Circle contained in static object once added to space");
	}
	if(radius != this.zpp_inner_zn.radius) {
		if(radius != radius) {
			throw new js._Boot.HaxeError("Error: Circle::radius cannot be NaN");
		}
		if(radius < Config.epsilon) {
			throw new js._Boot.HaxeError("Error: Circle::radius (" + radius + ") must be > Config.epsilon");
		}
		if(radius > 1e100) {
			throw new js._Boot.HaxeError("Error: Circle::radius (" + radius + ") must be < PR(Const).FMAX");
		}
		this.zpp_inner_zn.radius = radius;
		this.zpp_inner_zn.invalidate_radius();
	}
	if(localCOM == null) {
		this.zpp_inner.localCOMx = 0;
		this.zpp_inner.localCOMy = 0;
	} else {
		if(localCOM != null && localCOM.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		if(localCOM != null && localCOM.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = localCOM.zpp_inner;
		if(_this._validate != null) {
			_this._validate();
		}
		this.zpp_inner.localCOMx = localCOM.zpp_inner.x;
		if(localCOM != null && localCOM.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = localCOM.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		this.zpp_inner.localCOMy = localCOM.zpp_inner.y;
		if(localCOM.zpp_inner.weak) {
			if(localCOM != null && localCOM.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = localCOM.zpp_inner;
			if(_this2._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this2._isimmutable != null) {
				_this2._isimmutable();
			}
			if(localCOM.zpp_inner._inuse) {
				throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
			}
			var inner = localCOM.zpp_inner;
			localCOM.zpp_inner.outer = null;
			localCOM.zpp_inner = null;
			localCOM.zpp_pool = null;
			if(ZPP_PubPool.nextVec2 != null) {
				ZPP_PubPool.nextVec2.zpp_pool = localCOM;
			} else {
				ZPP_PubPool.poolVec2 = localCOM;
			}
			ZPP_PubPool.nextVec2 = localCOM;
			localCOM.zpp_disp = true;
			if(inner.outer != null) {
				inner.outer.zpp_inner = null;
				inner.outer = null;
			}
			inner._isimmutable = null;
			inner._validate = null;
			inner._invalidate = null;
			inner.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = inner;
		}
	}
	if(material == null) {
		if(ZPP_Material.zpp_pool == null) {
			this.zpp_inner.material = new ZPP_Material();
		} else {
			this.zpp_inner.material = ZPP_Material.zpp_pool;
			ZPP_Material.zpp_pool = this.zpp_inner.material.next;
			this.zpp_inner.material.next = null;
		}
	} else {
		this.zpp_inner.immutable_midstep("Shape::material");
		if(material == null) {
			throw new js._Boot.HaxeError("Error: Cannot assign null as Shape material");
		}
		this.zpp_inner.setMaterial(material.zpp_inner);
		this.zpp_inner.material.wrapper();
	}
	if(filter == null) {
		if(ZPP_InteractionFilter.zpp_pool == null) {
			this.zpp_inner.filter = new ZPP_InteractionFilter();
		} else {
			this.zpp_inner.filter = ZPP_InteractionFilter.zpp_pool;
			ZPP_InteractionFilter.zpp_pool = this.zpp_inner.filter.next;
			this.zpp_inner.filter.next = null;
		}
	} else {
		this.zpp_inner.immutable_midstep("Shape::filter");
		if(filter == null) {
			throw new js._Boot.HaxeError("Error: Cannot assign null as Shape filter");
		}
		this.zpp_inner.setFilter(filter.zpp_inner);
		this.zpp_inner.filter.wrapper();
	}
	this.zpp_inner_i.insert_cbtype(ZPP_CbType.ANY_SHAPE.zpp_inner);
};
Circle.__name__ = ["nape","shape","Circle"];
Circle.__super__ = Shape;
// for(var k in Shape.prototype ) Circle.prototype[k] = Shape.prototype[k];
Circle.prototype = Object.create(Shape.prototype);
Circle.prototype.zpp_inner_zn = null;
Circle.prototype.get_radius = function() {
	return this.zpp_inner_zn.radius;
};
Circle.prototype.set_radius = function(radius) {
	this.zpp_inner.immutable_midstep("Circle::radius");
	if(this.zpp_inner.body != null && this.zpp_inner.body.type == 1 && this.zpp_inner.body.space != null) {
		throw new js._Boot.HaxeError("Error: Cannot modifiy radius of Circle contained in static object once added to space");
	}
	if(radius != this.zpp_inner_zn.radius) {
		if(radius != radius) {
			throw new js._Boot.HaxeError("Error: Circle::radius cannot be NaN");
		}
		if(radius < Config.epsilon) {
			throw new js._Boot.HaxeError("Error: Circle::radius (" + radius + ") must be > Config.epsilon");
		}
		if(radius > 1e100) {
			throw new js._Boot.HaxeError("Error: Circle::radius (" + radius + ") must be < PR(Const).FMAX");
		}
		this.zpp_inner_zn.radius = radius;
		this.zpp_inner_zn.invalidate_radius();
	}
	return this.zpp_inner_zn.radius;
};
Circle.prototype.__class__ = Circle;
var Edge = nape.shape.Edge = function() {
	this.zpp_inner = null;
	if(!ZPP_Edge.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate an Edge derp!");
	}
};
Edge.__name__ = ["nape","shape","Edge"];
Edge.prototype.zpp_inner = null;
Edge.prototype.get_polygon = function() {
	if(this.zpp_inner.polygon == null) {
		throw new js._Boot.HaxeError("Error: Edge not current in use");
	}
	return this.zpp_inner.polygon.outer_zn;
};
Edge.prototype.get_localNormal = function() {
	if(this.zpp_inner.polygon == null) {
		throw new js._Boot.HaxeError("Error: Edge not current in use");
	}
	if(this.zpp_inner.wrap_lnorm == null) {
		this.zpp_inner.getlnorm();
	}
	return this.zpp_inner.wrap_lnorm;
};
Edge.prototype.get_worldNormal = function() {
	if(this.zpp_inner.polygon == null) {
		throw new js._Boot.HaxeError("Error: Edge not current in use");
	}
	if(this.zpp_inner.wrap_gnorm == null) {
		this.zpp_inner.getgnorm();
	}
	return this.zpp_inner.wrap_gnorm;
};
Edge.prototype.get_length = function() {
	if(this.zpp_inner.polygon == null) {
		throw new js._Boot.HaxeError("Error: Edge not current in use");
	}
	this.zpp_inner.polygon.validate_laxi();
	return this.zpp_inner.length;
};
Edge.prototype.get_localProjection = function() {
	if(this.zpp_inner.polygon == null) {
		throw new js._Boot.HaxeError("Error: Edge not current in use");
	}
	this.zpp_inner.polygon.validate_laxi();
	return this.zpp_inner.lprojection;
};
Edge.prototype.get_worldProjection = function() {
	if(this.zpp_inner.polygon == null) {
		throw new js._Boot.HaxeError("Error: Edge not current in use");
	}
	if(this.zpp_inner.polygon.body == null) {
		throw new js._Boot.HaxeError("Error: Edge world projection only makes sense for Polygons contained within a rigid body");
	}
	var _this = this.zpp_inner.polygon;
	if(_this.zip_gaxi) {
		if(_this.body != null) {
			_this.zip_gaxi = false;
			_this.validate_laxi();
			var _this1 = _this.body;
			if(_this1.zip_axis) {
				_this1.zip_axis = false;
				_this1.axisx = Math.sin(_this1.rot);
				_this1.axisy = Math.cos(_this1.rot);
			}
			if(_this.zip_gverts) {
				if(_this.body != null) {
					_this.zip_gverts = false;
					_this.validate_lverts();
					var _this2 = _this.body;
					if(_this2.zip_axis) {
						_this2.zip_axis = false;
						_this2.axisx = Math.sin(_this2.rot);
						_this2.axisy = Math.cos(_this2.rot);
					}
					var li = _this.lverts.next;
					var cx_ite = _this.gverts.next;
					while(cx_ite != null) {
						var g = cx_ite;
						var l = li;
						li = li.next;
						g.x = _this.body.posx + (_this.body.axisy * l.x - _this.body.axisx * l.y);
						g.y = _this.body.posy + (l.x * _this.body.axisx + l.y * _this.body.axisy);
						cx_ite = cx_ite.next;
					}
				}
			}
			var ite = _this.edges.head;
			var cx_ite1 = _this.gverts.next;
			var u = cx_ite1;
			cx_ite1 = cx_ite1.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var e = ite.elt;
				ite = ite.next;
				e.gp0 = u;
				e.gp1 = v;
				e.gnormx = _this.body.axisy * e.lnormx - _this.body.axisx * e.lnormy;
				e.gnormy = e.lnormx * _this.body.axisx + e.lnormy * _this.body.axisy;
				e.gprojection = _this.body.posx * e.gnormx + _this.body.posy * e.gnormy + e.lprojection;
				if(e.wrap_gnorm != null) {
					e.wrap_gnorm.zpp_inner.x = e.gnormx;
					e.wrap_gnorm.zpp_inner.y = e.gnormy;
				}
				e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
				e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
				u = v;
				cx_ite1 = cx_ite1.next;
			}
			var e1 = ite.elt;
			e1.gp0 = u;
			e1.gp1 = _this.gverts.next;
			e1.gnormx = _this.body.axisy * e1.lnormx - _this.body.axisx * e1.lnormy;
			e1.gnormy = e1.lnormx * _this.body.axisx + e1.lnormy * _this.body.axisy;
			e1.gprojection = _this.body.posx * e1.gnormx + _this.body.posy * e1.gnormy + e1.lprojection;
			if(e1.wrap_gnorm != null) {
				e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
				e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
			}
			e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
			e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
		}
	}
	return this.zpp_inner.gprojection;
};
Edge.prototype.get_localVertex1 = function() {
	if(this.zpp_inner.polygon == null) {
		throw new js._Boot.HaxeError("Error: Edge not current in use");
	}
	this.zpp_inner.polygon.validate_laxi();
	var _this = this.zpp_inner.lp0;
	if(_this.outer == null) {
		_this.outer = new Vec2();
		var o = _this.outer.zpp_inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = o;
		_this.outer.zpp_inner = _this;
	}
	return _this.outer;
};
Edge.prototype.get_localVertex2 = function() {
	if(this.zpp_inner.polygon == null) {
		throw new js._Boot.HaxeError("Error: Edge not current in use");
	}
	this.zpp_inner.polygon.validate_laxi();
	var _this = this.zpp_inner.lp1;
	if(_this.outer == null) {
		_this.outer = new Vec2();
		var o = _this.outer.zpp_inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = o;
		_this.outer.zpp_inner = _this;
	}
	return _this.outer;
};
Edge.prototype.get_worldVertex1 = function() {
	if(this.zpp_inner.polygon == null) {
		throw new js._Boot.HaxeError("Error: Edge not current in use");
	}
	var _this = this.zpp_inner.polygon;
	if(_this.zip_gaxi) {
		if(_this.body != null) {
			_this.zip_gaxi = false;
			_this.validate_laxi();
			var _this1 = _this.body;
			if(_this1.zip_axis) {
				_this1.zip_axis = false;
				_this1.axisx = Math.sin(_this1.rot);
				_this1.axisy = Math.cos(_this1.rot);
			}
			if(_this.zip_gverts) {
				if(_this.body != null) {
					_this.zip_gverts = false;
					_this.validate_lverts();
					var _this2 = _this.body;
					if(_this2.zip_axis) {
						_this2.zip_axis = false;
						_this2.axisx = Math.sin(_this2.rot);
						_this2.axisy = Math.cos(_this2.rot);
					}
					var li = _this.lverts.next;
					var cx_ite = _this.gverts.next;
					while(cx_ite != null) {
						var g = cx_ite;
						var l = li;
						li = li.next;
						g.x = _this.body.posx + (_this.body.axisy * l.x - _this.body.axisx * l.y);
						g.y = _this.body.posy + (l.x * _this.body.axisx + l.y * _this.body.axisy);
						cx_ite = cx_ite.next;
					}
				}
			}
			var ite = _this.edges.head;
			var cx_ite1 = _this.gverts.next;
			var u = cx_ite1;
			cx_ite1 = cx_ite1.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var e = ite.elt;
				ite = ite.next;
				e.gp0 = u;
				e.gp1 = v;
				e.gnormx = _this.body.axisy * e.lnormx - _this.body.axisx * e.lnormy;
				e.gnormy = e.lnormx * _this.body.axisx + e.lnormy * _this.body.axisy;
				e.gprojection = _this.body.posx * e.gnormx + _this.body.posy * e.gnormy + e.lprojection;
				if(e.wrap_gnorm != null) {
					e.wrap_gnorm.zpp_inner.x = e.gnormx;
					e.wrap_gnorm.zpp_inner.y = e.gnormy;
				}
				e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
				e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
				u = v;
				cx_ite1 = cx_ite1.next;
			}
			var e1 = ite.elt;
			e1.gp0 = u;
			e1.gp1 = _this.gverts.next;
			e1.gnormx = _this.body.axisy * e1.lnormx - _this.body.axisx * e1.lnormy;
			e1.gnormy = e1.lnormx * _this.body.axisx + e1.lnormy * _this.body.axisy;
			e1.gprojection = _this.body.posx * e1.gnormx + _this.body.posy * e1.gnormy + e1.lprojection;
			if(e1.wrap_gnorm != null) {
				e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
				e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
			}
			e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
			e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
		}
	}
	var _this3 = this.zpp_inner.gp0;
	if(_this3.outer == null) {
		_this3.outer = new Vec2();
		var o = _this3.outer.zpp_inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = o;
		_this3.outer.zpp_inner = _this3;
	}
	return _this3.outer;
};
Edge.prototype.get_worldVertex2 = function() {
	if(this.zpp_inner.polygon == null) {
		throw new js._Boot.HaxeError("Error: Edge not current in use");
	}
	var _this = this.zpp_inner.polygon;
	if(_this.zip_gaxi) {
		if(_this.body != null) {
			_this.zip_gaxi = false;
			_this.validate_laxi();
			var _this1 = _this.body;
			if(_this1.zip_axis) {
				_this1.zip_axis = false;
				_this1.axisx = Math.sin(_this1.rot);
				_this1.axisy = Math.cos(_this1.rot);
			}
			if(_this.zip_gverts) {
				if(_this.body != null) {
					_this.zip_gverts = false;
					_this.validate_lverts();
					var _this2 = _this.body;
					if(_this2.zip_axis) {
						_this2.zip_axis = false;
						_this2.axisx = Math.sin(_this2.rot);
						_this2.axisy = Math.cos(_this2.rot);
					}
					var li = _this.lverts.next;
					var cx_ite = _this.gverts.next;
					while(cx_ite != null) {
						var g = cx_ite;
						var l = li;
						li = li.next;
						g.x = _this.body.posx + (_this.body.axisy * l.x - _this.body.axisx * l.y);
						g.y = _this.body.posy + (l.x * _this.body.axisx + l.y * _this.body.axisy);
						cx_ite = cx_ite.next;
					}
				}
			}
			var ite = _this.edges.head;
			var cx_ite1 = _this.gverts.next;
			var u = cx_ite1;
			cx_ite1 = cx_ite1.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var e = ite.elt;
				ite = ite.next;
				e.gp0 = u;
				e.gp1 = v;
				e.gnormx = _this.body.axisy * e.lnormx - _this.body.axisx * e.lnormy;
				e.gnormy = e.lnormx * _this.body.axisx + e.lnormy * _this.body.axisy;
				e.gprojection = _this.body.posx * e.gnormx + _this.body.posy * e.gnormy + e.lprojection;
				if(e.wrap_gnorm != null) {
					e.wrap_gnorm.zpp_inner.x = e.gnormx;
					e.wrap_gnorm.zpp_inner.y = e.gnormy;
				}
				e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
				e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
				u = v;
				cx_ite1 = cx_ite1.next;
			}
			var e1 = ite.elt;
			e1.gp0 = u;
			e1.gp1 = _this.gverts.next;
			e1.gnormx = _this.body.axisy * e1.lnormx - _this.body.axisx * e1.lnormy;
			e1.gnormy = e1.lnormx * _this.body.axisx + e1.lnormy * _this.body.axisy;
			e1.gprojection = _this.body.posx * e1.gnormx + _this.body.posy * e1.gnormy + e1.lprojection;
			if(e1.wrap_gnorm != null) {
				e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
				e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
			}
			e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
			e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
		}
	}
	var _this3 = this.zpp_inner.gp1;
	if(_this3.outer == null) {
		_this3.outer = new Vec2();
		var o = _this3.outer.zpp_inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = o;
		_this3.outer.zpp_inner = _this3;
	}
	return _this3.outer;
};
Edge.prototype.toString = function() {
	if(this.zpp_inner.polygon == null) {
		return "Edge(object-pooled)";
	} else if(this.zpp_inner.polygon.body == null) {
		this.zpp_inner.polygon.validate_laxi();
		return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " }";
	} else {
		var _this = this.zpp_inner.polygon;
		if(_this.zip_gaxi) {
			if(_this.body != null) {
				_this.zip_gaxi = false;
				_this.validate_laxi();
				var _this1 = _this.body;
				if(_this1.zip_axis) {
					_this1.zip_axis = false;
					_this1.axisx = Math.sin(_this1.rot);
					_this1.axisy = Math.cos(_this1.rot);
				}
				if(_this.zip_gverts) {
					if(_this.body != null) {
						_this.zip_gverts = false;
						_this.validate_lverts();
						var _this2 = _this.body;
						if(_this2.zip_axis) {
							_this2.zip_axis = false;
							_this2.axisx = Math.sin(_this2.rot);
							_this2.axisy = Math.cos(_this2.rot);
						}
						var li = _this.lverts.next;
						var cx_ite = _this.gverts.next;
						while(cx_ite != null) {
							var g = cx_ite;
							var l = li;
							li = li.next;
							g.x = _this.body.posx + (_this.body.axisy * l.x - _this.body.axisx * l.y);
							g.y = _this.body.posy + (l.x * _this.body.axisx + l.y * _this.body.axisy);
							cx_ite = cx_ite.next;
						}
					}
				}
				var ite = _this.edges.head;
				var cx_ite1 = _this.gverts.next;
				var u = cx_ite1;
				cx_ite1 = cx_ite1.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var e = ite.elt;
					ite = ite.next;
					e.gp0 = u;
					e.gp1 = v;
					e.gnormx = _this.body.axisy * e.lnormx - _this.body.axisx * e.lnormy;
					e.gnormy = e.lnormx * _this.body.axisx + e.lnormy * _this.body.axisy;
					e.gprojection = _this.body.posx * e.gnormx + _this.body.posy * e.gnormy + e.lprojection;
					if(e.wrap_gnorm != null) {
						e.wrap_gnorm.zpp_inner.x = e.gnormx;
						e.wrap_gnorm.zpp_inner.y = e.gnormy;
					}
					e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
					e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
					u = v;
					cx_ite1 = cx_ite1.next;
				}
				var e1 = ite.elt;
				e1.gp0 = u;
				e1.gp1 = _this.gverts.next;
				e1.gnormx = _this.body.axisy * e1.lnormx - _this.body.axisx * e1.lnormy;
				e1.gnormy = e1.lnormx * _this.body.axisx + e1.lnormy * _this.body.axisy;
				e1.gprojection = _this.body.posx * e1.gnormx + _this.body.posy * e1.gnormy + e1.lprojection;
				if(e1.wrap_gnorm != null) {
					e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
					e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
				}
				e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
				e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
			}
		}
		return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " worldNormal : " + ("{ x: " + this.zpp_inner.gnormx + " y: " + this.zpp_inner.gnormy + " }") + " }";
	}
};
Edge.prototype.__class__ = Edge;
var EdgeIterator = nape.shape.EdgeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!ZPP_EdgeList.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "Edge" + "Iterator derp!");
	}
};
EdgeIterator.__name__ = ["nape","shape","EdgeIterator"];
EdgeIterator.get = function(list) {
	var ret;
	if(EdgeIterator.zpp_pool == null) {
		ZPP_EdgeList.internal = true;
		var ret1 = new EdgeIterator();
		ZPP_EdgeList.internal = false;
		ret = ret1;
	} else {
		var r = EdgeIterator.zpp_pool;
		EdgeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
EdgeIterator.prototype.zpp_inner = null;
EdgeIterator.prototype.zpp_i = null;
EdgeIterator.prototype.zpp_critical = null;
EdgeIterator.prototype.zpp_next = null;
EdgeIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var _this = this.zpp_inner;
	_this.zpp_inner.valmod();
	if(_this.zpp_inner.zip_length) {
		_this.zpp_inner.zip_length = false;
		_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
	}
	var length = _this.zpp_inner.user_length;
	this.zpp_critical = true;
	if(this.zpp_i < length) {
		return true;
	} else {
		this.zpp_next = EdgeIterator.zpp_pool;
		EdgeIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
EdgeIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
EdgeIterator.prototype.__class__ = EdgeIterator;
var EdgeList = nape.shape.EdgeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new ZPP_EdgeList();
	this.zpp_inner.outer = this;
};
EdgeList.__name__ = ["nape","shape","EdgeList"];
EdgeList.fromArray = function(array) {
	if(array == null) {
		throw new js._Boot.HaxeError("Error: Cannot convert null Array to Nape list");
	}
	var ret = new EdgeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
EdgeList.prototype.zpp_inner = null;
EdgeList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
EdgeList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
EdgeList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	var tmp;
	if(index >= 0) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		tmp = index >= this.zpp_inner.user_length;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Index out of bounds");
	}
	if(this.zpp_inner.reverse_flag) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(index == this.zpp_inner.user_length - 1) {
			index = index;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			index = this.zpp_inner.user_length - 2 - index;
		}
	}
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else {
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	return this.zpp_inner.at_ite.elt.wrapper();
};
EdgeList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Edge" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.inner.add(obj.zpp_inner);
		} else {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
EdgeList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Edge" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else {
			this.zpp_inner.inner.add(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
EdgeList.prototype.pop = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Edge" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx1 = ret.wrapper();
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	}
	this.zpp_inner.invalidate();
	return ret.wrapper();
};
EdgeList.prototype.shift = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Edge" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.wrapper();
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	}
	this.zpp_inner.invalidate();
	return ret.wrapper();
};
EdgeList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) {
		return this.push(obj);
	} else {
		return this.unshift(obj);
	}
};
EdgeList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Edge" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(obj);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.remove(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
	}
	return ret;
};
EdgeList.prototype.clear = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Edge" + "List is immutable");
	}
	if(this.zpp_inner.reverse_flag) {
		while(this.zpp_inner.inner.head != null) this.pop();
	} else {
		while(this.zpp_inner.inner.head != null) this.shift();
	}
};
EdgeList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
EdgeList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return EdgeIterator.get(this);
};
EdgeList.prototype.copy = function(deep) {
	if(deep == null) {
		deep = false;
	}
	var ret = new EdgeList();
	this.zpp_inner.valmod();
	var _g = EdgeIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = EdgeIterator.zpp_pool;
			EdgeIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(deep) {
			throw new js._Boot.HaxeError("Error: " + "Edge" + " is not a copyable type");
		}
		ret.push(i);
	}
	return ret;
};
EdgeList.prototype.merge = function(xs) {
	if(xs == null) {
		throw new js._Boot.HaxeError("Error: Cannot merge with null list");
	}
	xs.zpp_inner.valmod();
	var _g = EdgeIterator.get(xs);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = EdgeIterator.zpp_pool;
			EdgeIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) {
				this.push(x);
			} else {
				this.unshift(x);
			}
		}
	}
};
EdgeList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	this.zpp_inner.valmod();
	var _g = EdgeIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = EdgeIterator.zpp_pool;
			EdgeIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) {
			ret += ",";
		}
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
};
EdgeList.prototype.foreach = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot execute null on list elements");
	}
	this.zpp_inner.valmod();
	var it = EdgeIterator.get(this);
	while(true) {
		it.zpp_inner.zpp_inner.valmod();
		var _this = it.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		it.zpp_critical = true;
		var tmp;
		if(it.zpp_i < length) {
			tmp = true;
		} else {
			it.zpp_next = EdgeIterator.zpp_pool;
			EdgeIterator.zpp_pool = it;
			it.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		try {
			it.zpp_critical = false;
			lambda(it.zpp_inner.at(it.zpp_i++));
		} catch( e ) {
			it.zpp_next = EdgeIterator.zpp_pool;
			EdgeIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
	}
	return this;
};
EdgeList.prototype.filter = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot select elements of list with null");
	}
	var i = 0;
	while(true) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(!(i < this.zpp_inner.user_length)) {
			break;
		}
		var x = this.at(i);
		try {
			if(lambda(x)) {
				++i;
			} else {
				this.remove(x);
			}
		} catch( e ) {
			break;
		}
	}
	return this;
};
EdgeList.prototype.__class__ = EdgeList;
var Polygon = nape.shape.Polygon = function(localVerts,material,filter) {
	this.zpp_inner_zn = null;
	Shape.zpp_internalAlloc = true;
	Shape.call(this);
	Shape.zpp_internalAlloc = false;
	if(localVerts == null) {
		throw new js._Boot.HaxeError("Error: localVerts cannot be null");
	}
	this.zpp_inner_zn = new ZPP_Polygon();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner_i.outer_i = this;
	if((localVerts instanceof Array) && localVerts.__enum__ == null) {
		var lv = localVerts;
		var _g = 0;
		while(_g < lv.length) {
			var vite = lv[_g];
			++_g;
			if(vite == null) {
				throw new js._Boot.HaxeError("Error: Array<Vec2> contains null objects");
			}
			if(!js.Boot.__instanceof(vite,Vec2)) {
				throw new js._Boot.HaxeError("Error: Array<Vec2> contains non Vec2 objects");
			}
			var x = vite;
			if(x != null && x.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			if(this.zpp_inner_zn.wrap_lverts == null) {
				this.zpp_inner_zn.getlverts();
			}
			var tmp = this.zpp_inner_zn.wrap_lverts;
			if(x != null && x.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			if(x.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = x.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			var x1 = x.zpp_inner.x;
			if(x.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = x.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			var y = x.zpp_inner.y;
			if(x1 != x1 || y != y) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var ret;
			if(ZPP_PubPool.poolVec2 == null) {
				ret = new Vec2();
			} else {
				ret = ZPP_PubPool.poolVec2;
				ZPP_PubPool.poolVec2 = ret.zpp_pool;
				ret.zpp_pool = null;
				ret.zpp_disp = false;
				if(ret == ZPP_PubPool.nextVec2) {
					ZPP_PubPool.nextVec2 = null;
				}
			}
			if(ret.zpp_inner == null) {
				var ret1;
				if(ZPP_Vec2.zpp_pool == null) {
					ret1 = new ZPP_Vec2();
				} else {
					ret1 = ZPP_Vec2.zpp_pool;
					ZPP_Vec2.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.weak = false;
				ret1._immutable = false;
				ret1.x = x1;
				ret1.y = y;
				ret.zpp_inner = ret1;
				ret.zpp_inner.outer = ret;
			} else {
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._immutable) {
					throw new js._Boot.HaxeError("Error: Vec2 is immutable");
				}
				if(_this2._isimmutable != null) {
					_this2._isimmutable();
				}
				if(x1 != x1 || y != y) {
					throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
				}
				var tmp1;
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this3 = ret.zpp_inner;
				if(_this3._validate != null) {
					_this3._validate();
				}
				if(ret.zpp_inner.x == x1) {
					if(ret != null && ret.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this4 = ret.zpp_inner;
					if(_this4._validate != null) {
						_this4._validate();
					}
					tmp1 = ret.zpp_inner.y == y;
				} else {
					tmp1 = false;
				}
				if(!tmp1) {
					ret.zpp_inner.x = x1;
					ret.zpp_inner.y = y;
					var _this5 = ret.zpp_inner;
					if(_this5._invalidate != null) {
						_this5._invalidate(_this5);
					}
				}
			}
			ret.zpp_inner.weak = false;
			tmp.push(ret);
		}
	} else if(js.Boot.__instanceof(localVerts,Vec2List)) {
		var lv1 = localVerts;
		var _g1 = lv1.iterator();
		while(true) {
			_g1.zpp_inner.zpp_inner.valmod();
			var length = _g1.zpp_inner.zpp_gl();
			_g1.zpp_critical = true;
			var tmp2;
			if(_g1.zpp_i < length) {
				tmp2 = true;
			} else {
				_g1.zpp_next = Vec2Iterator.zpp_pool;
				Vec2Iterator.zpp_pool = _g1;
				_g1.zpp_inner = null;
				tmp2 = false;
			}
			if(!tmp2) {
				break;
			}
			_g1.zpp_critical = false;
			var x2 = _g1.zpp_inner.at(_g1.zpp_i++);
			if(x2 == null) {
				throw new js._Boot.HaxeError("Error: Vec2List contains null objects");
			}
			if(x2 != null && x2.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			if(this.zpp_inner_zn.wrap_lverts == null) {
				this.zpp_inner_zn.getlverts();
			}
			var tmp3 = this.zpp_inner_zn.wrap_lverts;
			if(x2 != null && x2.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			if(x2.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this6 = x2.zpp_inner;
			if(_this6._validate != null) {
				_this6._validate();
			}
			var x3 = x2.zpp_inner.x;
			if(x2.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this7 = x2.zpp_inner;
			if(_this7._validate != null) {
				_this7._validate();
			}
			var y1 = x2.zpp_inner.y;
			if(x3 != x3 || y1 != y1) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var ret2;
			if(ZPP_PubPool.poolVec2 == null) {
				ret2 = new Vec2();
			} else {
				ret2 = ZPP_PubPool.poolVec2;
				ZPP_PubPool.poolVec2 = ret2.zpp_pool;
				ret2.zpp_pool = null;
				ret2.zpp_disp = false;
				if(ret2 == ZPP_PubPool.nextVec2) {
					ZPP_PubPool.nextVec2 = null;
				}
			}
			if(ret2.zpp_inner == null) {
				var ret3;
				if(ZPP_Vec2.zpp_pool == null) {
					ret3 = new ZPP_Vec2();
				} else {
					ret3 = ZPP_Vec2.zpp_pool;
					ZPP_Vec2.zpp_pool = ret3.next;
					ret3.next = null;
				}
				ret3.weak = false;
				ret3._immutable = false;
				ret3.x = x3;
				ret3.y = y1;
				ret2.zpp_inner = ret3;
				ret2.zpp_inner.outer = ret2;
			} else {
				if(ret2 != null && ret2.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this8 = ret2.zpp_inner;
				if(_this8._immutable) {
					throw new js._Boot.HaxeError("Error: Vec2 is immutable");
				}
				if(_this8._isimmutable != null) {
					_this8._isimmutable();
				}
				if(x3 != x3 || y1 != y1) {
					throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
				}
				var tmp4;
				if(ret2 != null && ret2.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this9 = ret2.zpp_inner;
				if(_this9._validate != null) {
					_this9._validate();
				}
				if(ret2.zpp_inner.x == x3) {
					if(ret2 != null && ret2.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this10 = ret2.zpp_inner;
					if(_this10._validate != null) {
						_this10._validate();
					}
					tmp4 = ret2.zpp_inner.y == y1;
				} else {
					tmp4 = false;
				}
				if(!tmp4) {
					ret2.zpp_inner.x = x3;
					ret2.zpp_inner.y = y1;
					var _this11 = ret2.zpp_inner;
					if(_this11._invalidate != null) {
						_this11._invalidate(_this11);
					}
				}
			}
			ret2.zpp_inner.weak = false;
			tmp3.push(ret2);
		}
	} else if(js.Boot.__instanceof(localVerts,GeomPoly)) {
		var lv2 = localVerts;
		if(lv2 != null && lv2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "GeomPoly" + " has been disposed and cannot be used!");
		}
		var verts = lv2.zpp_inner.vertices;
		if(verts != null) {
			var vite1 = verts;
			while(true) {
				var x4 = vite1.x;
				var y2 = vite1.y;
				if(x4 != x4 || y2 != y2) {
					throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
				}
				var ret4;
				if(ZPP_PubPool.poolVec2 == null) {
					ret4 = new Vec2();
				} else {
					ret4 = ZPP_PubPool.poolVec2;
					ZPP_PubPool.poolVec2 = ret4.zpp_pool;
					ret4.zpp_pool = null;
					ret4.zpp_disp = false;
					if(ret4 == ZPP_PubPool.nextVec2) {
						ZPP_PubPool.nextVec2 = null;
					}
				}
				if(ret4.zpp_inner == null) {
					var ret5;
					if(ZPP_Vec2.zpp_pool == null) {
						ret5 = new ZPP_Vec2();
					} else {
						ret5 = ZPP_Vec2.zpp_pool;
						ZPP_Vec2.zpp_pool = ret5.next;
						ret5.next = null;
					}
					ret5.weak = false;
					ret5._immutable = false;
					ret5.x = x4;
					ret5.y = y2;
					ret4.zpp_inner = ret5;
					ret4.zpp_inner.outer = ret4;
				} else {
					if(ret4 != null && ret4.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this12 = ret4.zpp_inner;
					if(_this12._immutable) {
						throw new js._Boot.HaxeError("Error: Vec2 is immutable");
					}
					if(_this12._isimmutable != null) {
						_this12._isimmutable();
					}
					if(x4 != x4 || y2 != y2) {
						throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
					}
					var tmp5;
					if(ret4 != null && ret4.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this13 = ret4.zpp_inner;
					if(_this13._validate != null) {
						_this13._validate();
					}
					if(ret4.zpp_inner.x == x4) {
						if(ret4 != null && ret4.zpp_disp) {
							throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this14 = ret4.zpp_inner;
						if(_this14._validate != null) {
							_this14._validate();
						}
						tmp5 = ret4.zpp_inner.y == y2;
					} else {
						tmp5 = false;
					}
					if(!tmp5) {
						ret4.zpp_inner.x = x4;
						ret4.zpp_inner.y = y2;
						var _this15 = ret4.zpp_inner;
						if(_this15._invalidate != null) {
							_this15._invalidate(_this15);
						}
					}
				}
				ret4.zpp_inner.weak = false;
				var x5 = ret4;
				vite1 = vite1.next;
				if(this.zpp_inner_zn.wrap_lverts == null) {
					this.zpp_inner_zn.getlverts();
				}
				var tmp6 = this.zpp_inner_zn.wrap_lverts;
				if(x5 != null && x5.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				if(x5.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this16 = x5.zpp_inner;
				if(_this16._validate != null) {
					_this16._validate();
				}
				var x6 = x5.zpp_inner.x;
				if(x5.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this17 = x5.zpp_inner;
				if(_this17._validate != null) {
					_this17._validate();
				}
				var y3 = x5.zpp_inner.y;
				if(x6 != x6 || y3 != y3) {
					throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
				}
				var ret6;
				if(ZPP_PubPool.poolVec2 == null) {
					ret6 = new Vec2();
				} else {
					ret6 = ZPP_PubPool.poolVec2;
					ZPP_PubPool.poolVec2 = ret6.zpp_pool;
					ret6.zpp_pool = null;
					ret6.zpp_disp = false;
					if(ret6 == ZPP_PubPool.nextVec2) {
						ZPP_PubPool.nextVec2 = null;
					}
				}
				if(ret6.zpp_inner == null) {
					var ret7;
					if(ZPP_Vec2.zpp_pool == null) {
						ret7 = new ZPP_Vec2();
					} else {
						ret7 = ZPP_Vec2.zpp_pool;
						ZPP_Vec2.zpp_pool = ret7.next;
						ret7.next = null;
					}
					ret7.weak = false;
					ret7._immutable = false;
					ret7.x = x6;
					ret7.y = y3;
					ret6.zpp_inner = ret7;
					ret6.zpp_inner.outer = ret6;
				} else {
					if(ret6 != null && ret6.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this18 = ret6.zpp_inner;
					if(_this18._immutable) {
						throw new js._Boot.HaxeError("Error: Vec2 is immutable");
					}
					if(_this18._isimmutable != null) {
						_this18._isimmutable();
					}
					if(x6 != x6 || y3 != y3) {
						throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
					}
					var tmp7;
					if(ret6 != null && ret6.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this19 = ret6.zpp_inner;
					if(_this19._validate != null) {
						_this19._validate();
					}
					if(ret6.zpp_inner.x == x6) {
						if(ret6 != null && ret6.zpp_disp) {
							throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this20 = ret6.zpp_inner;
						if(_this20._validate != null) {
							_this20._validate();
						}
						tmp7 = ret6.zpp_inner.y == y3;
					} else {
						tmp7 = false;
					}
					if(!tmp7) {
						ret6.zpp_inner.x = x6;
						ret6.zpp_inner.y = y3;
						var _this21 = ret6.zpp_inner;
						if(_this21._invalidate != null) {
							_this21._invalidate(_this21);
						}
					}
				}
				ret6.zpp_inner.weak = false;
				tmp6.push(ret6);
				if(x5 != null && x5.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this22 = x5.zpp_inner;
				if(_this22._immutable) {
					throw new js._Boot.HaxeError("Error: Vec2 is immutable");
				}
				if(_this22._isimmutable != null) {
					_this22._isimmutable();
				}
				if(x5.zpp_inner._inuse) {
					throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
				}
				var inner = x5.zpp_inner;
				x5.zpp_inner.outer = null;
				x5.zpp_inner = null;
				var o = x5;
				o.zpp_pool = null;
				if(ZPP_PubPool.nextVec2 != null) {
					ZPP_PubPool.nextVec2.zpp_pool = o;
				} else {
					ZPP_PubPool.poolVec2 = o;
				}
				ZPP_PubPool.nextVec2 = o;
				o.zpp_disp = true;
				var o1 = inner;
				if(o1.outer != null) {
					o1.outer.zpp_inner = null;
					o1.outer = null;
				}
				o1._isimmutable = null;
				o1._validate = null;
				o1._invalidate = null;
				o1.next = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = o1;
				if(vite1 == verts) {
					break;
				}
			}
		}
	} else {
		throw new js._Boot.HaxeError("Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>");
	}
	if((localVerts instanceof Array) && localVerts.__enum__ == null) {
		var lv3 = localVerts;
		var i = 0;
		while(i < lv3.length) {
			var cur = lv3[i];
			var tmp8;
			if(cur.zpp_inner.weak) {
				if(cur != null && cur.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this23 = cur.zpp_inner;
				if(_this23._immutable) {
					throw new js._Boot.HaxeError("Error: Vec2 is immutable");
				}
				if(_this23._isimmutable != null) {
					_this23._isimmutable();
				}
				if(cur.zpp_inner._inuse) {
					throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
				}
				var inner1 = cur.zpp_inner;
				cur.zpp_inner.outer = null;
				cur.zpp_inner = null;
				var o2 = cur;
				o2.zpp_pool = null;
				if(ZPP_PubPool.nextVec2 != null) {
					ZPP_PubPool.nextVec2.zpp_pool = o2;
				} else {
					ZPP_PubPool.poolVec2 = o2;
				}
				ZPP_PubPool.nextVec2 = o2;
				o2.zpp_disp = true;
				var o3 = inner1;
				if(o3.outer != null) {
					o3.outer.zpp_inner = null;
					o3.outer = null;
				}
				o3._isimmutable = null;
				o3._validate = null;
				o3._invalidate = null;
				o3.next = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = o3;
				tmp8 = true;
			} else {
				tmp8 = false;
			}
			if(tmp8) {
				lv3.splice(i,1);
				continue;
			}
			++i;
		}
	} else if(js.Boot.__instanceof(localVerts,Vec2List)) {
		var lv4 = localVerts;
		if(lv4.zpp_inner._validate != null) {
			lv4.zpp_inner._validate();
		}
		var ins = lv4.zpp_inner.inner;
		var pre = null;
		var cur1 = ins.head;
		while(cur1 != null) {
			var x7 = cur1.elt;
			if(x7.outer.zpp_inner.weak) {
				cur1 = ins.erase(pre);
				if(x7.outer.zpp_inner.weak) {
					var _this24 = x7.outer;
					if(_this24 != null && _this24.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this25 = _this24.zpp_inner;
					if(_this25._immutable) {
						throw new js._Boot.HaxeError("Error: Vec2 is immutable");
					}
					if(_this25._isimmutable != null) {
						_this25._isimmutable();
					}
					if(_this24.zpp_inner._inuse) {
						throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
					}
					var inner2 = _this24.zpp_inner;
					_this24.zpp_inner.outer = null;
					_this24.zpp_inner = null;
					var o4 = _this24;
					o4.zpp_pool = null;
					if(ZPP_PubPool.nextVec2 != null) {
						ZPP_PubPool.nextVec2.zpp_pool = o4;
					} else {
						ZPP_PubPool.poolVec2 = o4;
					}
					ZPP_PubPool.nextVec2 = o4;
					o4.zpp_disp = true;
					var o5 = inner2;
					if(o5.outer != null) {
						o5.outer.zpp_inner = null;
						o5.outer = null;
					}
					o5._isimmutable = null;
					o5._validate = null;
					o5._invalidate = null;
					o5.next = ZPP_Vec2.zpp_pool;
					ZPP_Vec2.zpp_pool = o5;
				}
			} else {
				pre = cur1;
				cur1 = cur1.next;
			}
		}
	}
	if(material == null) {
		if(ZPP_Material.zpp_pool == null) {
			this.zpp_inner.material = new ZPP_Material();
		} else {
			this.zpp_inner.material = ZPP_Material.zpp_pool;
			ZPP_Material.zpp_pool = this.zpp_inner.material.next;
			this.zpp_inner.material.next = null;
		}
	} else {
		this.zpp_inner.immutable_midstep("Shape::material");
		if(material == null) {
			throw new js._Boot.HaxeError("Error: Cannot assign null as Shape material");
		}
		this.zpp_inner.setMaterial(material.zpp_inner);
		this.zpp_inner.material.wrapper();
	}
	if(filter == null) {
		if(ZPP_InteractionFilter.zpp_pool == null) {
			this.zpp_inner.filter = new ZPP_InteractionFilter();
		} else {
			this.zpp_inner.filter = ZPP_InteractionFilter.zpp_pool;
			ZPP_InteractionFilter.zpp_pool = this.zpp_inner.filter.next;
			this.zpp_inner.filter.next = null;
		}
	} else {
		this.zpp_inner.immutable_midstep("Shape::filter");
		if(filter == null) {
			throw new js._Boot.HaxeError("Error: Cannot assign null as Shape filter");
		}
		this.zpp_inner.setFilter(filter.zpp_inner);
		this.zpp_inner.filter.wrapper();
	}
	this.zpp_inner_i.insert_cbtype(ZPP_CbType.ANY_SHAPE.zpp_inner);
};
Polygon.__name__ = ["nape","shape","Polygon"];
Polygon.__super__ = Shape;
// for(var k in Shape.prototype ) Polygon.prototype[k] = Shape.prototype[k];
Polygon.prototype = Object.create(Shape.prototype);
Polygon.rect = function(x,y,width,height,weak) {
	if(weak == null) {
		weak = false;
	}
	if(x != x || y != y || width != width || height != height) {
		throw new js._Boot.HaxeError("Error: Polygon.rect cannot accept NaN arguments");
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = weak;
	var tmp1 = ret;
	var x1 = x + width;
	if(x1 != x1 || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret2;
	if(ZPP_PubPool.poolVec2 == null) {
		ret2 = new Vec2();
	} else {
		ret2 = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret2.zpp_pool;
		ret2.zpp_pool = null;
		ret2.zpp_disp = false;
		if(ret2 == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret2.zpp_inner == null) {
		var ret3;
		if(ZPP_Vec2.zpp_pool == null) {
			ret3 = new ZPP_Vec2();
		} else {
			ret3 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret3.next;
			ret3.next = null;
		}
		ret3.weak = false;
		ret3._immutable = false;
		ret3.x = x1;
		ret3.y = y;
		ret2.zpp_inner = ret3;
		ret2.zpp_inner.outer = ret2;
	} else {
		if(ret2 != null && ret2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = ret2.zpp_inner;
		if(_this4._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this4._isimmutable != null) {
			_this4._isimmutable();
		}
		if(x1 != x1 || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp2;
		if(ret2 != null && ret2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = ret2.zpp_inner;
		if(_this5._validate != null) {
			_this5._validate();
		}
		if(ret2.zpp_inner.x == x1) {
			if(ret2 != null && ret2.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this6 = ret2.zpp_inner;
			if(_this6._validate != null) {
				_this6._validate();
			}
			tmp2 = ret2.zpp_inner.y == y;
		} else {
			tmp2 = false;
		}
		if(!tmp2) {
			ret2.zpp_inner.x = x1;
			ret2.zpp_inner.y = y;
			var _this7 = ret2.zpp_inner;
			if(_this7._invalidate != null) {
				_this7._invalidate(_this7);
			}
		}
	}
	ret2.zpp_inner.weak = weak;
	var tmp3 = ret2;
	var x2 = x + width;
	var y1 = y + height;
	if(x2 != x2 || y1 != y1) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret4;
	if(ZPP_PubPool.poolVec2 == null) {
		ret4 = new Vec2();
	} else {
		ret4 = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret4.zpp_pool;
		ret4.zpp_pool = null;
		ret4.zpp_disp = false;
		if(ret4 == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret4.zpp_inner == null) {
		var ret5;
		if(ZPP_Vec2.zpp_pool == null) {
			ret5 = new ZPP_Vec2();
		} else {
			ret5 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret5.next;
			ret5.next = null;
		}
		ret5.weak = false;
		ret5._immutable = false;
		ret5.x = x2;
		ret5.y = y1;
		ret4.zpp_inner = ret5;
		ret4.zpp_inner.outer = ret4;
	} else {
		if(ret4 != null && ret4.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = ret4.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(x2 != x2 || y1 != y1) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp4;
		if(ret4 != null && ret4.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this9 = ret4.zpp_inner;
		if(_this9._validate != null) {
			_this9._validate();
		}
		if(ret4.zpp_inner.x == x2) {
			if(ret4 != null && ret4.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this10 = ret4.zpp_inner;
			if(_this10._validate != null) {
				_this10._validate();
			}
			tmp4 = ret4.zpp_inner.y == y1;
		} else {
			tmp4 = false;
		}
		if(!tmp4) {
			ret4.zpp_inner.x = x2;
			ret4.zpp_inner.y = y1;
			var _this11 = ret4.zpp_inner;
			if(_this11._invalidate != null) {
				_this11._invalidate(_this11);
			}
		}
	}
	ret4.zpp_inner.weak = weak;
	var tmp5 = ret4;
	var y2 = y + height;
	if(x != x || y2 != y2) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret6;
	if(ZPP_PubPool.poolVec2 == null) {
		ret6 = new Vec2();
	} else {
		ret6 = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret6.zpp_pool;
		ret6.zpp_pool = null;
		ret6.zpp_disp = false;
		if(ret6 == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret6.zpp_inner == null) {
		var ret7;
		if(ZPP_Vec2.zpp_pool == null) {
			ret7 = new ZPP_Vec2();
		} else {
			ret7 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret7.next;
			ret7.next = null;
		}
		ret7.weak = false;
		ret7._immutable = false;
		ret7.x = x;
		ret7.y = y2;
		ret6.zpp_inner = ret7;
		ret6.zpp_inner.outer = ret6;
	} else {
		if(ret6 != null && ret6.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this12 = ret6.zpp_inner;
		if(_this12._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this12._isimmutable != null) {
			_this12._isimmutable();
		}
		if(x != x || y2 != y2) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp6;
		if(ret6 != null && ret6.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this13 = ret6.zpp_inner;
		if(_this13._validate != null) {
			_this13._validate();
		}
		if(ret6.zpp_inner.x == x) {
			if(ret6 != null && ret6.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this14 = ret6.zpp_inner;
			if(_this14._validate != null) {
				_this14._validate();
			}
			tmp6 = ret6.zpp_inner.y == y2;
		} else {
			tmp6 = false;
		}
		if(!tmp6) {
			ret6.zpp_inner.x = x;
			ret6.zpp_inner.y = y2;
			var _this15 = ret6.zpp_inner;
			if(_this15._invalidate != null) {
				_this15._invalidate(_this15);
			}
		}
	}
	ret6.zpp_inner.weak = weak;
	return [tmp1,tmp3,tmp5,ret6];
};
Polygon.box = function(width,height,weak) {
	if(weak == null) {
		weak = false;
	}
	if(width != width || height != height) {
		throw new js._Boot.HaxeError("Error: Polygon.box cannot accept NaN arguments");
	}
	return Polygon.rect(-width / 2,-height / 2,width,height,weak);
};
Polygon.regular = function(xRadius,yRadius,edgeCount,angleOffset,weak) {
	if(weak == null) {
		weak = false;
	}
	if(angleOffset == null) {
		angleOffset = 0.0;
	}
	if(xRadius != xRadius || yRadius != yRadius || angleOffset != angleOffset) {
		throw new js._Boot.HaxeError("Error: Polygon.regular cannot accept NaN arguments");
	}
	var ret = [];
	var dangle = Math.PI * 2 / edgeCount;
	var _g1 = 0;
	while(_g1 < edgeCount) {
		var ang = _g1++ * dangle + angleOffset;
		var x = Math.cos(ang) * xRadius;
		var y = Math.sin(ang) * yRadius;
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret1;
		if(ZPP_PubPool.poolVec2 == null) {
			ret1 = new Vec2();
		} else {
			ret1 = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret1.zpp_pool;
			ret1.zpp_pool = null;
			ret1.zpp_disp = false;
			if(ret1 == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret1.zpp_inner == null) {
			var ret2;
			if(ZPP_Vec2.zpp_pool == null) {
				ret2 = new ZPP_Vec2();
			} else {
				ret2 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret2.next;
				ret2.next = null;
			}
			ret2.weak = false;
			ret2._immutable = false;
			ret2.x = x;
			ret2.y = y;
			ret1.zpp_inner = ret2;
			ret1.zpp_inner.outer = ret1;
		} else {
			if(ret1 != null && ret1.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret1.zpp_inner;
			if(_this._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret1 != null && ret1.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret1.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret1.zpp_inner.x == x) {
				if(ret1 != null && ret1.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret1.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret1.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret1.zpp_inner.x = x;
				ret1.zpp_inner.y = y;
				var _this3 = ret1.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret1.zpp_inner.weak = weak;
		ret.push(ret1);
	}
	return ret;
};
Polygon.prototype.zpp_inner_zn = null;
Polygon.prototype.get_localVerts = function() {
	if(this.zpp_inner_zn.wrap_lverts == null) {
		this.zpp_inner_zn.getlverts();
	}
	return this.zpp_inner_zn.wrap_lverts;
};
Polygon.prototype.get_worldVerts = function() {
	if(this.zpp_inner_zn.wrap_gverts == null) {
		this.zpp_inner_zn.getgverts();
	}
	return this.zpp_inner_zn.wrap_gverts;
};
Polygon.prototype.get_edges = function() {
	if(this.zpp_inner_zn.wrap_edges == null) {
		this.zpp_inner_zn.getedges();
	}
	return this.zpp_inner_zn.wrap_edges;
};
Polygon.prototype.validity = function() {
	return this.zpp_inner_zn.valid();
};
Polygon.prototype.__class__ = Polygon;
var ShapeIterator = nape.shape.ShapeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!ZPP_ShapeList.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "Shape" + "Iterator derp!");
	}
};
ShapeIterator.__name__ = ["nape","shape","ShapeIterator"];
ShapeIterator.get = function(list) {
	var ret;
	if(ShapeIterator.zpp_pool == null) {
		ZPP_ShapeList.internal = true;
		var ret1 = new ShapeIterator();
		ZPP_ShapeList.internal = false;
		ret = ret1;
	} else {
		var r = ShapeIterator.zpp_pool;
		ShapeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
ShapeIterator.prototype.zpp_inner = null;
ShapeIterator.prototype.zpp_i = null;
ShapeIterator.prototype.zpp_critical = null;
ShapeIterator.prototype.zpp_next = null;
ShapeIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var _this = this.zpp_inner;
	_this.zpp_inner.valmod();
	if(_this.zpp_inner.zip_length) {
		_this.zpp_inner.zip_length = false;
		_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
	}
	var length = _this.zpp_inner.user_length;
	this.zpp_critical = true;
	if(this.zpp_i < length) {
		return true;
	} else {
		this.zpp_next = ShapeIterator.zpp_pool;
		ShapeIterator.zpp_pool = this;
		this.zpp_inner = null;
		return false;
	}
};
ShapeIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
};
ShapeIterator.prototype.__class__ = ShapeIterator;
var ShapeList = nape.shape.ShapeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new ZPP_ShapeList();
	this.zpp_inner.outer = this;
};
ShapeList.__name__ = ["nape","shape","ShapeList"];
ShapeList.fromArray = function(array) {
	if(array == null) {
		throw new js._Boot.HaxeError("Error: Cannot convert null Array to Nape list");
	}
	var ret = new ShapeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
ShapeList.prototype.zpp_inner = null;
ShapeList.prototype.get_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.inner.length;
	}
	return this.zpp_inner.user_length;
};
ShapeList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
};
ShapeList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	var tmp;
	if(index >= 0) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		tmp = index >= this.zpp_inner.user_length;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Index out of bounds");
	}
	if(this.zpp_inner.reverse_flag) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		index = this.zpp_inner.user_length - 1 - index;
	}
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else {
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	return this.zpp_inner.at_ite.elt.outer;
};
ShapeList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Shape" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			this.zpp_inner.inner.add(obj.zpp_inner);
		} else {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
ShapeList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Shape" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) {
				var tmp;
				if(this.zpp_inner.inner.head == null) {
					tmp = null;
				} else {
					this.zpp_inner.valmod();
					if(this.zpp_inner.zip_length) {
						this.zpp_inner.zip_length = false;
						this.zpp_inner.user_length = this.zpp_inner.inner.length;
					}
					tmp = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 1);
				}
				this.zpp_inner.push_ite = tmp;
			}
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else {
			this.zpp_inner.inner.add(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
ShapeList.prototype.pop = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Shape" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	}
	this.zpp_inner.invalidate();
	return ret.outer;
};
ShapeList.prototype.shift = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Shape" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
			this.zpp_inner.at_ite = null;
		}
		var ite;
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(this.zpp_inner.user_length == 1) {
			ite = null;
		} else {
			this.zpp_inner.valmod();
			if(this.zpp_inner.zip_length) {
				this.zpp_inner.zip_length = false;
				this.zpp_inner.user_length = this.zpp_inner.inner.length;
			}
			ite = this.zpp_inner.inner.iterator_at(this.zpp_inner.user_length - 2);
		}
		if(ite == null) {
			ret = this.zpp_inner.inner.head.elt;
		} else {
			ret = ite.next.elt;
		}
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.erase(ite);
		}
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.pop();
		}
	}
	this.zpp_inner.invalidate();
	return ret.outer;
};
ShapeList.prototype.add = function(obj) {
	if(this.zpp_inner.reverse_flag) {
		return this.push(obj);
	} else {
		return this.unshift(obj);
	}
};
ShapeList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Shape" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret;
	ret = false;
	var cx_ite = this.zpp_inner.inner.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj.zpp_inner) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(obj);
		}
		if(!this.zpp_inner.dontremove) {
			this.zpp_inner.inner.remove(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
	}
	return ret;
};
ShapeList.prototype.clear = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Shape" + "List is immutable");
	}
	if(this.zpp_inner.reverse_flag) {
		while(this.zpp_inner.inner.head != null) this.pop();
	} else {
		while(this.zpp_inner.inner.head != null) this.shift();
	}
};
ShapeList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
};
ShapeList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	return ShapeIterator.get(this);
};
ShapeList.prototype.copy = function(deep) {
	if(deep == null) {
		deep = false;
	}
	var ret = new ShapeList();
	this.zpp_inner.valmod();
	var _g = ShapeIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ShapeIterator.zpp_pool;
			ShapeIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(deep) {
			throw new js._Boot.HaxeError("Error: " + "Shape" + " is not a copyable type");
		}
		ret.push(i);
	}
	return ret;
};
ShapeList.prototype.merge = function(xs) {
	if(xs == null) {
		throw new js._Boot.HaxeError("Error: Cannot merge with null list");
	}
	xs.zpp_inner.valmod();
	var _g = ShapeIterator.get(xs);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ShapeIterator.zpp_pool;
			ShapeIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var x = _g.zpp_inner.at(_g.zpp_i++);
		if(!this.has(x)) {
			if(this.zpp_inner.reverse_flag) {
				this.push(x);
			} else {
				this.unshift(x);
			}
		}
	}
};
ShapeList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	this.zpp_inner.valmod();
	var _g = ShapeIterator.get(this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this = _g.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ShapeIterator.zpp_pool;
			ShapeIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var i = _g.zpp_inner.at(_g.zpp_i++);
		if(!fst) {
			ret += ",";
		}
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
};
ShapeList.prototype.foreach = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot execute null on list elements");
	}
	this.zpp_inner.valmod();
	var it = ShapeIterator.get(this);
	while(true) {
		it.zpp_inner.zpp_inner.valmod();
		var _this = it.zpp_inner;
		_this.zpp_inner.valmod();
		if(_this.zpp_inner.zip_length) {
			_this.zpp_inner.zip_length = false;
			_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
		}
		var length = _this.zpp_inner.user_length;
		it.zpp_critical = true;
		var tmp;
		if(it.zpp_i < length) {
			tmp = true;
		} else {
			it.zpp_next = ShapeIterator.zpp_pool;
			ShapeIterator.zpp_pool = it;
			it.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		try {
			it.zpp_critical = false;
			lambda(it.zpp_inner.at(it.zpp_i++));
		} catch( e ) {
			it.zpp_next = ShapeIterator.zpp_pool;
			ShapeIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
	}
	return this;
};
ShapeList.prototype.filter = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: Cannot select elements of list with null");
	}
	var i = 0;
	while(true) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		if(!(i < this.zpp_inner.user_length)) {
			break;
		}
		var x = this.at(i);
		try {
			if(lambda(x)) {
				++i;
			} else {
				this.remove(x);
			}
		} catch( e ) {
			break;
		}
	}
	return this;
};
ShapeList.prototype.__class__ = ShapeList;
var ShapeType = nape.shape.ShapeType = function() {
	if(!ZPP_Flags.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "ShapeType" + " derp!");
	}
};
ShapeType.__name__ = ["nape","shape","ShapeType"];
ShapeType.CIRCLE = null;
ShapeType.get_CIRCLE = function() {
	if(ZPP_Flags.ShapeType_CIRCLE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ShapeType_CIRCLE = new ShapeType();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.ShapeType_CIRCLE;
};
ShapeType.POLYGON = null;
ShapeType.get_POLYGON = function() {
	if(ZPP_Flags.ShapeType_POLYGON == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ShapeType_POLYGON = new ShapeType();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.ShapeType_POLYGON;
};
ShapeType.prototype.toString = function() {
	if(ZPP_Flags.ShapeType_CIRCLE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ShapeType_CIRCLE = new ShapeType();
		ZPP_Flags.internal = false;
	}
	if(this == ZPP_Flags.ShapeType_CIRCLE) {
		return "CIRCLE";
	} else {
		if(ZPP_Flags.ShapeType_POLYGON == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.ShapeType_POLYGON = new ShapeType();
			ZPP_Flags.internal = false;
		}
		if(this == ZPP_Flags.ShapeType_POLYGON) {
			return "POLYGON";
		} else {
			return "";
		}
	}
};
ShapeType.prototype.__class__ = ShapeType;
var ValidationResult = nape.shape.ValidationResult = function() {
	if(!ZPP_Flags.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "ValidationResult" + " derp!");
	}
};
ValidationResult.__name__ = ["nape","shape","ValidationResult"];
ValidationResult.VALID = null;
ValidationResult.get_VALID = function() {
	if(ZPP_Flags.ValidationResult_VALID == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ValidationResult_VALID = new ValidationResult();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.ValidationResult_VALID;
};
ValidationResult.DEGENERATE = null;
ValidationResult.get_DEGENERATE = function() {
	if(ZPP_Flags.ValidationResult_DEGENERATE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ValidationResult_DEGENERATE = new ValidationResult();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.ValidationResult_DEGENERATE;
};
ValidationResult.CONCAVE = null;
ValidationResult.get_CONCAVE = function() {
	if(ZPP_Flags.ValidationResult_CONCAVE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ValidationResult_CONCAVE = new ValidationResult();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.ValidationResult_CONCAVE;
};
ValidationResult.SELF_INTERSECTING = null;
ValidationResult.get_SELF_INTERSECTING = function() {
	if(ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ValidationResult_SELF_INTERSECTING = new ValidationResult();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.ValidationResult_SELF_INTERSECTING;
};
ValidationResult.prototype.toString = function() {
	if(ZPP_Flags.ValidationResult_VALID == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ValidationResult_VALID = new ValidationResult();
		ZPP_Flags.internal = false;
	}
	if(this == ZPP_Flags.ValidationResult_VALID) {
		return "VALID";
	} else {
		if(ZPP_Flags.ValidationResult_DEGENERATE == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.ValidationResult_DEGENERATE = new ValidationResult();
			ZPP_Flags.internal = false;
		}
		if(this == ZPP_Flags.ValidationResult_DEGENERATE) {
			return "DEGENERATE";
		} else {
			if(ZPP_Flags.ValidationResult_CONCAVE == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.ValidationResult_CONCAVE = new ValidationResult();
				ZPP_Flags.internal = false;
			}
			if(this == ZPP_Flags.ValidationResult_CONCAVE) {
				return "CONCAVE";
			} else {
				if(ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
					ZPP_Flags.internal = true;
					ZPP_Flags.ValidationResult_SELF_INTERSECTING = new ValidationResult();
					ZPP_Flags.internal = false;
				}
				if(this == ZPP_Flags.ValidationResult_SELF_INTERSECTING) {
					return "SELF_INTERSECTING";
				} else {
					return "";
				}
			}
		}
	}
};
ValidationResult.prototype.__class__ = ValidationResult;
var Broadphase = nape.space.Broadphase = function() {
	if(!ZPP_Flags.internal) {
		throw new js._Boot.HaxeError("Error: Cannot instantiate " + "Broadphase" + " derp!");
	}
};
Broadphase.__name__ = ["nape","space","Broadphase"];
Broadphase.DYNAMIC_AABB_TREE = null;
Broadphase.get_DYNAMIC_AABB_TREE = function() {
	if(ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new Broadphase();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
};
Broadphase.SWEEP_AND_PRUNE = null;
Broadphase.get_SWEEP_AND_PRUNE = function() {
	if(ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new Broadphase();
		ZPP_Flags.internal = false;
	}
	return ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
};
Broadphase.prototype.toString = function() {
	if(ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new Broadphase();
		ZPP_Flags.internal = false;
	}
	if(this == ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE) {
		return "DYNAMIC_AABB_TREE";
	} else {
		if(ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new Broadphase();
			ZPP_Flags.internal = false;
		}
		if(this == ZPP_Flags.Broadphase_SWEEP_AND_PRUNE) {
			return "SWEEP_AND_PRUNE";
		} else {
			return "";
		}
	}
};
Broadphase.prototype.__class__ = Broadphase;
var Space = nape.space.Space = function(gravity,broadphase) {
	this.zpp_inner = null;
	if(gravity != null && gravity.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	this.zpp_inner = new ZPP_Space(gravity == null?null:gravity.zpp_inner,broadphase);
	this.zpp_inner.outer = this;
	if(gravity != null) {
		if(gravity.zpp_inner.weak) {
			if(gravity != null && gravity.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = gravity.zpp_inner;
			if(_this._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(gravity.zpp_inner._inuse) {
				throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
			}
			var inner = gravity.zpp_inner;
			gravity.zpp_inner.outer = null;
			gravity.zpp_inner = null;
			gravity.zpp_pool = null;
			if(ZPP_PubPool.nextVec2 != null) {
				ZPP_PubPool.nextVec2.zpp_pool = gravity;
			} else {
				ZPP_PubPool.poolVec2 = gravity;
			}
			ZPP_PubPool.nextVec2 = gravity;
			gravity.zpp_disp = true;
			if(inner.outer != null) {
				inner.outer.zpp_inner = null;
				inner.outer = null;
			}
			inner._isimmutable = null;
			inner._validate = null;
			inner._invalidate = null;
			inner.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = inner;
		}
	}
};
Space.__name__ = ["nape","space","Space"];
Space.prototype.zpp_inner = null;
Space.prototype.get_userData = function() {
	if(this.zpp_inner.userData == null) {
		this.zpp_inner.userData = { };
	}
	return this.zpp_inner.userData;
};
Space.prototype.get_gravity = function() {
	if(this.zpp_inner.wrap_gravity == null) {
		this.zpp_inner.getgravity();
	}
	return this.zpp_inner.wrap_gravity;
};
Space.prototype.set_gravity = function(gravity) {
	if(gravity != null && gravity.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(gravity == null) {
		throw new js._Boot.HaxeError("Error: Space::gravity cannot be null");
	}
	if(this.zpp_inner.wrap_gravity == null) {
		this.zpp_inner.getgravity();
	}
	var _this = this.zpp_inner.wrap_gravity;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(gravity != null && gravity.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(gravity == null) {
		throw new js._Boot.HaxeError("Error: Cannot assign null Vec2");
	}
	if(gravity != null && gravity.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = gravity.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	var x = gravity.zpp_inner.x;
	if(gravity != null && gravity.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = gravity.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	var y = gravity.zpp_inner.y;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this4 = _this.zpp_inner;
	if(_this4._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this4._isimmutable != null) {
		_this4._isimmutable();
	}
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var tmp;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this5 = _this.zpp_inner;
	if(_this5._validate != null) {
		_this5._validate();
	}
	if(_this.zpp_inner.x == x) {
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this6 = _this.zpp_inner;
		if(_this6._validate != null) {
			_this6._validate();
		}
		tmp = _this.zpp_inner.y == y;
	} else {
		tmp = false;
	}
	if(!tmp) {
		_this.zpp_inner.x = x;
		_this.zpp_inner.y = y;
		var _this7 = _this.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate(_this7);
		}
	}
	if(gravity.zpp_inner.weak) {
		if(gravity != null && gravity.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this8 = gravity.zpp_inner;
		if(_this8._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this8._isimmutable != null) {
			_this8._isimmutable();
		}
		if(gravity.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = gravity.zpp_inner;
		gravity.zpp_inner.outer = null;
		gravity.zpp_inner = null;
		gravity.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = gravity;
		} else {
			ZPP_PubPool.poolVec2 = gravity;
		}
		ZPP_PubPool.nextVec2 = gravity;
		gravity.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	if(this.zpp_inner.wrap_gravity == null) {
		this.zpp_inner.getgravity();
	}
	return this.zpp_inner.wrap_gravity;
};
Space.prototype.get_broadphase = function() {
	if(this.zpp_inner.bphase.is_sweep) {
		if(ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new Broadphase();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
	} else {
		if(ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new Broadphase();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
	}
};
Space.prototype.get_sortContacts = function() {
	return this.zpp_inner.sortcontacts;
};
Space.prototype.set_sortContacts = function(sortContacts) {
	this.zpp_inner.sortcontacts = sortContacts;
	return this.zpp_inner.sortcontacts;
};
Space.prototype.get_worldAngularDrag = function() {
	return this.zpp_inner.global_ang_drag;
};
Space.prototype.set_worldAngularDrag = function(worldAngularDrag) {
	if(worldAngularDrag != worldAngularDrag) {
		throw new js._Boot.HaxeError("Error: Space::worldAngularDrag cannot be NaN");
	}
	this.zpp_inner.global_ang_drag = worldAngularDrag;
	return this.zpp_inner.global_ang_drag;
};
Space.prototype.get_worldLinearDrag = function() {
	return this.zpp_inner.global_lin_drag;
};
Space.prototype.set_worldLinearDrag = function(worldLinearDrag) {
	if(worldLinearDrag != worldLinearDrag) {
		throw new js._Boot.HaxeError("Error: Space::worldLinearDrag cannot be NaN");
	}
	this.zpp_inner.global_lin_drag = worldLinearDrag;
	return this.zpp_inner.global_lin_drag;
};
Space.prototype.get_compounds = function() {
	return this.zpp_inner.wrap_compounds;
};
Space.prototype.get_bodies = function() {
	return this.zpp_inner.wrap_bodies;
};
Space.prototype.get_liveBodies = function() {
	return this.zpp_inner.wrap_live;
};
Space.prototype.get_constraints = function() {
	return this.zpp_inner.wrap_constraints;
};
Space.prototype.get_liveConstraints = function() {
	return this.zpp_inner.wrap_livecon;
};
Space.prototype.visitBodies = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: lambda cannot be null for Space::visitBodies");
	}
	var _this = this.zpp_inner.wrap_bodies;
	_this.zpp_inner.valmod();
	var _g = BodyIterator.get(_this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this1 = _g.zpp_inner;
		_this1.zpp_inner.valmod();
		if(_this1.zpp_inner.zip_length) {
			_this1.zpp_inner.zip_length = false;
			_this1.zpp_inner.user_length = _this1.zpp_inner.inner.length;
		}
		var length = _this1.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = BodyIterator.zpp_pool;
			BodyIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		lambda(_g.zpp_inner.at(_g.zpp_i++));
	}
	var _this2 = this.zpp_inner.wrap_compounds;
	_this2.zpp_inner.valmod();
	var _g1 = CompoundIterator.get(_this2);
	while(true) {
		_g1.zpp_inner.zpp_inner.valmod();
		var _this3 = _g1.zpp_inner;
		_this3.zpp_inner.valmod();
		if(_this3.zpp_inner.zip_length) {
			_this3.zpp_inner.zip_length = false;
			_this3.zpp_inner.user_length = _this3.zpp_inner.inner.length;
		}
		var length1 = _this3.zpp_inner.user_length;
		_g1.zpp_critical = true;
		var tmp1;
		if(_g1.zpp_i < length1) {
			tmp1 = true;
		} else {
			_g1.zpp_next = CompoundIterator.zpp_pool;
			CompoundIterator.zpp_pool = _g1;
			_g1.zpp_inner = null;
			tmp1 = false;
		}
		if(!tmp1) {
			break;
		}
		_g1.zpp_critical = false;
		_g1.zpp_inner.at(_g1.zpp_i++).visitBodies(lambda);
	}
};
Space.prototype.visitConstraints = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: lambda cannot be null for Space::visitConstraints");
	}
	var _this = this.zpp_inner.wrap_constraints;
	_this.zpp_inner.valmod();
	var _g = ConstraintIterator.get(_this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this1 = _g.zpp_inner;
		_this1.zpp_inner.valmod();
		if(_this1.zpp_inner.zip_length) {
			_this1.zpp_inner.zip_length = false;
			_this1.zpp_inner.user_length = _this1.zpp_inner.inner.length;
		}
		var length = _this1.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ConstraintIterator.zpp_pool;
			ConstraintIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		lambda(_g.zpp_inner.at(_g.zpp_i++));
	}
	var _this2 = this.zpp_inner.wrap_compounds;
	_this2.zpp_inner.valmod();
	var _g1 = CompoundIterator.get(_this2);
	while(true) {
		_g1.zpp_inner.zpp_inner.valmod();
		var _this3 = _g1.zpp_inner;
		_this3.zpp_inner.valmod();
		if(_this3.zpp_inner.zip_length) {
			_this3.zpp_inner.zip_length = false;
			_this3.zpp_inner.user_length = _this3.zpp_inner.inner.length;
		}
		var length1 = _this3.zpp_inner.user_length;
		_g1.zpp_critical = true;
		var tmp1;
		if(_g1.zpp_i < length1) {
			tmp1 = true;
		} else {
			_g1.zpp_next = CompoundIterator.zpp_pool;
			CompoundIterator.zpp_pool = _g1;
			_g1.zpp_inner = null;
			tmp1 = false;
		}
		if(!tmp1) {
			break;
		}
		_g1.zpp_critical = false;
		_g1.zpp_inner.at(_g1.zpp_i++).visitConstraints(lambda);
	}
};
Space.prototype.visitCompounds = function(lambda) {
	if(lambda == null) {
		throw new js._Boot.HaxeError("Error: lambda cannot be null for Space::visitCompounds");
	}
	var _this = this.zpp_inner.wrap_compounds;
	_this.zpp_inner.valmod();
	var _g = CompoundIterator.get(_this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this1 = _g.zpp_inner;
		_this1.zpp_inner.valmod();
		if(_this1.zpp_inner.zip_length) {
			_this1.zpp_inner.zip_length = false;
			_this1.zpp_inner.user_length = _this1.zpp_inner.inner.length;
		}
		var length = _this1.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = CompoundIterator.zpp_pool;
			CompoundIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var c = _g.zpp_inner.at(_g.zpp_i++);
		lambda(c);
		c.visitCompounds(lambda);
	}
};
Space.prototype.get_world = function() {
	return this.zpp_inner.__static;
};
Space.prototype.get_arbiters = function() {
	if(this.zpp_inner.wrap_arbiters == null) {
		var ret = new ZPP_SpaceArbiterList();
		ret.space = this.zpp_inner;
		this.zpp_inner.wrap_arbiters = ret;
	}
	return this.zpp_inner.wrap_arbiters;
};
Space.prototype.get_listeners = function() {
	return this.zpp_inner.wrap_listeners;
};
Space.prototype.clear = function() {
	if(this.zpp_inner.midstep) {
		throw new js._Boot.HaxeError("Error: Space::clear() cannot be called during space step()");
	}
	this.zpp_inner.clear();
};
Space.prototype.step = function(deltaTime,velocityIterations,positionIterations) {
	if(positionIterations == null) {
		positionIterations = 10;
	}
	if(velocityIterations == null) {
		velocityIterations = 10;
	}
	if(deltaTime != deltaTime) {
		throw new js._Boot.HaxeError("Error: deltaTime cannot be NaN");
	}
	if(deltaTime <= 0) {
		throw new js._Boot.HaxeError("Error: deltaTime must be strictly positive");
	}
	if(velocityIterations <= 0) {
		throw new js._Boot.HaxeError("Error: must use atleast one velocity iteration");
	}
	if(positionIterations <= 0) {
		throw new js._Boot.HaxeError("Error: must use atleast one position iteration");
	}
	this.zpp_inner.step(deltaTime,velocityIterations,positionIterations);
};
Space.prototype.get_timeStamp = function() {
	return this.zpp_inner.stamp;
};
Space.prototype.get_elapsedTime = function() {
	return this.zpp_inner.time;
};
Space.prototype.interactionType = function(shape1,shape2) {
	if(shape1 == null || shape2 == null) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate interaction type for null shapes");
	}
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate interaction type for shapes not part of a Body");
	}
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null).zpp_inner.type == 1 && (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null).zpp_inner.type == 1) {
		return null;
	}
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null)) {
		return null;
	}
	var s1 = shape1.zpp_inner;
	var s2 = shape2.zpp_inner;
	var b1 = s1.body;
	var b2 = s2.body;
	var con_ignore;
	con_ignore = false;
	var cx_ite = b1.constraints.head;
	while(cx_ite != null) {
		var con = cx_ite.elt;
		if(con.ignore && con.pair_exists(b1.id,b2.id)) {
			con_ignore = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	var _g;
	var tmp;
	if(!con_ignore) {
		var cur = s1;
		while(cur != null && cur.group == null) if(cur.ishape != null) {
			cur = cur.ishape.body;
		} else if(cur.icompound != null) {
			cur = cur.icompound.compound;
		} else {
			cur = cur.ibody.compound;
		}
		var g1 = cur == null?null:cur.group;
		var tmp1;
		if(g1 == null) {
			tmp1 = false;
		} else {
			var cur1 = s2;
			while(cur1 != null && cur1.group == null) if(cur1.ishape != null) {
				cur1 = cur1.ishape.body;
			} else if(cur1.icompound != null) {
				cur1 = cur1.icompound.compound;
			} else {
				cur1 = cur1.ibody.compound;
			}
			var g2 = cur1 == null?null:cur1.group;
			if(g2 == null) {
				tmp1 = false;
			} else {
				var ret = false;
				while(g1 != null && g2 != null) {
					if(g1 == g2) {
						ret = g1.ignore;
						break;
					}
					if(g1.depth < g2.depth) {
						g2 = g2.group;
					} else {
						g1 = g1.group;
					}
				}
				tmp1 = ret;
			}
		}
		tmp = !tmp1;
	} else {
		tmp = false;
	}
	if(tmp) {
		var tmp2;
		if(s1.sensorEnabled || s2.sensorEnabled) {
			var _this = s1.filter;
			var x = s2.filter;
			if((_this.sensorMask & x.sensorGroup) != 0) {
				tmp2 = (x.sensorMask & _this.sensorGroup) != 0;
			} else {
				tmp2 = false;
			}
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			_g = 2;
		} else {
			var tmp3;
			var tmp4;
			if(s1.fluidEnabled || s2.fluidEnabled) {
				var _this1 = s1.filter;
				var x1 = s2.filter;
				if((_this1.fluidMask & x1.fluidGroup) != 0) {
					tmp4 = (x1.fluidMask & _this1.fluidGroup) != 0;
				} else {
					tmp4 = false;
				}
			} else {
				tmp4 = false;
			}
			if(tmp4) {
				tmp3 = !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0);
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				_g = 0;
			} else {
				var tmp5;
				var _this2 = s1.filter;
				var x2 = s2.filter;
				if((_this2.collisionMask & x2.collisionGroup) != 0 && (x2.collisionMask & _this2.collisionGroup) != 0) {
					tmp5 = !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0);
				} else {
					tmp5 = false;
				}
				if(tmp5) {
					_g = 1;
				} else {
					_g = -1;
				}
			}
		}
	} else {
		_g = -1;
	}
	switch(_g) {
	case 0:
		if(ZPP_Flags.InteractionType_FLUID == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_FLUID = new InteractionType();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.InteractionType_FLUID;
	case 1:
		if(ZPP_Flags.InteractionType_COLLISION == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_COLLISION = new InteractionType();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.InteractionType_COLLISION;
	case 2:
		if(ZPP_Flags.InteractionType_SENSOR == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.InteractionType_SENSOR = new InteractionType();
			ZPP_Flags.internal = false;
		}
		return ZPP_Flags.InteractionType_SENSOR;
	default:
		return null;
	}
};
Space.prototype.shapesUnderPoint = function(point,filter,output) {
	if(point != null && point.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(point == null) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate shapes under a null point :)");
	}
	if(point != null && point.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = point.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp = point.zpp_inner.x;
	if(point != null && point.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = point.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var ret = this.zpp_inner.shapesUnderPoint(tmp,point.zpp_inner.y,filter == null?null:filter.zpp_inner,output);
	if(point.zpp_inner.weak) {
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this2 = point.zpp_inner;
		if(_this2._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this2._isimmutable != null) {
			_this2._isimmutable();
		}
		if(point.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = point.zpp_inner;
		point.zpp_inner.outer = null;
		point.zpp_inner = null;
		point.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = point;
		} else {
			ZPP_PubPool.poolVec2 = point;
		}
		ZPP_PubPool.nextVec2 = point;
		point.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return ret;
};
Space.prototype.bodiesUnderPoint = function(point,filter,output) {
	if(point != null && point.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(point == null) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate objects under a null point :)");
	}
	if(point != null && point.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = point.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp = point.zpp_inner.x;
	if(point != null && point.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = point.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var ret = this.zpp_inner.bodiesUnderPoint(tmp,point.zpp_inner.y,filter == null?null:filter.zpp_inner,output);
	if(point.zpp_inner.weak) {
		if(point != null && point.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this2 = point.zpp_inner;
		if(_this2._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this2._isimmutable != null) {
			_this2._isimmutable();
		}
		if(point.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = point.zpp_inner;
		point.zpp_inner.outer = null;
		point.zpp_inner = null;
		point.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = point;
		} else {
			ZPP_PubPool.poolVec2 = point;
		}
		ZPP_PubPool.nextVec2 = point;
		point.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return ret;
};
Space.prototype.shapesInAABB = function(aabb,containment,strict,filter,output) {
	if(strict == null) {
		strict = true;
	}
	if(containment == null) {
		containment = false;
	}
	if(aabb == null) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate shapes in a null AABB :)");
	}
	var tmp;
	var _this = aabb.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var _this1 = aabb.zpp_inner;
	if(_this1.maxx - _this1.minx != 0) {
		var _this2 = aabb.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		var _this3 = aabb.zpp_inner;
		tmp = _this3.maxy - _this3.miny == 0;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate shapes in degenerate AABB :/");
	}
	return this.zpp_inner.shapesInAABB(aabb,strict,containment,filter == null?null:filter.zpp_inner,output);
};
Space.prototype.bodiesInAABB = function(aabb,containment,strict,filter,output) {
	if(strict == null) {
		strict = true;
	}
	if(containment == null) {
		containment = false;
	}
	if(aabb == null) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate objects in a null AABB :)");
	}
	var tmp;
	var _this = aabb.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var _this1 = aabb.zpp_inner;
	if(_this1.maxx - _this1.minx != 0) {
		var _this2 = aabb.zpp_inner;
		if(_this2._validate != null) {
			_this2._validate();
		}
		var _this3 = aabb.zpp_inner;
		tmp = _this3.maxy - _this3.miny == 0;
	} else {
		tmp = true;
	}
	if(tmp) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate objects in degenerate AABB :/");
	}
	return this.zpp_inner.bodiesInAABB(aabb,strict,containment,filter == null?null:filter.zpp_inner,output);
};
Space.prototype.shapesInCircle = function(position,radius,containment,filter,output) {
	if(containment == null) {
		containment = false;
	}
	if(position != null && position.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(position == null) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate shapes at null circle :)");
	}
	if(radius != radius) {
		throw new js._Boot.HaxeError("Error: Circle radius cannot be NaN");
	}
	if(radius <= 0) {
		throw new js._Boot.HaxeError("Error: Circle radius must be strictly positive");
	}
	var ret = this.zpp_inner.shapesInCircle(position,radius,containment,filter == null?null:filter.zpp_inner,output);
	if(position.zpp_inner.weak) {
		if(position != null && position.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = position.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(position.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = position.zpp_inner;
		position.zpp_inner.outer = null;
		position.zpp_inner = null;
		position.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = position;
		} else {
			ZPP_PubPool.poolVec2 = position;
		}
		ZPP_PubPool.nextVec2 = position;
		position.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return ret;
};
Space.prototype.bodiesInCircle = function(position,radius,containment,filter,output) {
	if(containment == null) {
		containment = false;
	}
	if(position != null && position.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	if(position == null) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate objects at null circle :)");
	}
	if(radius != radius) {
		throw new js._Boot.HaxeError("Error: Circle radius cannot be NaN");
	}
	if(radius <= 0) {
		throw new js._Boot.HaxeError("Error: Circle radius must be strictly positive");
	}
	var ret = this.zpp_inner.bodiesInCircle(position,radius,containment,filter == null?null:filter.zpp_inner,output);
	if(position.zpp_inner.weak) {
		if(position != null && position.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = position.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(position.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = position.zpp_inner;
		position.zpp_inner.outer = null;
		position.zpp_inner = null;
		position.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = position;
		} else {
			ZPP_PubPool.poolVec2 = position;
		}
		ZPP_PubPool.nextVec2 = position;
		position.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
	}
	return ret;
};
Space.prototype.shapesInShape = function(shape,containment,filter,output) {
	if(containment == null) {
		containment = false;
	}
	if(shape == null) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate shapes in a null shapes :)");
	}
	if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) {
		throw new js._Boot.HaxeError("Error: Query shape needs to be inside a Body to be well defined :)");
	}
	if(shape.zpp_inner.type == 1) {
		var res = shape.zpp_inner.polygon.valid();
		if(ZPP_Flags.ValidationResult_VALID == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.ValidationResult_VALID = new ValidationResult();
			ZPP_Flags.internal = false;
		}
		if(res != ZPP_Flags.ValidationResult_VALID) {
			throw new js._Boot.HaxeError("Error: Polygon query shape is invalid : " + res.toString());
		}
	}
	return this.zpp_inner.shapesInShape(shape.zpp_inner,containment,filter == null?null:filter.zpp_inner,output);
};
Space.prototype.bodiesInShape = function(shape,containment,filter,output) {
	if(containment == null) {
		containment = false;
	}
	if(shape == null) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate bodies in a null shapes :)");
	}
	if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) {
		throw new js._Boot.HaxeError("Error: Query shape needs to be inside a Body to be well defined :)");
	}
	if(shape.zpp_inner.type == 1) {
		var res = shape.zpp_inner.polygon.valid();
		if(ZPP_Flags.ValidationResult_VALID == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.ValidationResult_VALID = new ValidationResult();
			ZPP_Flags.internal = false;
		}
		if(res != ZPP_Flags.ValidationResult_VALID) {
			throw new js._Boot.HaxeError("Error: Polygon query shape is invalid : " + res.toString());
		}
	}
	return this.zpp_inner.bodiesInShape(shape.zpp_inner,containment,filter == null?null:filter.zpp_inner,output);
};
Space.prototype.shapesInBody = function(body,filter,output) {
	if(body == null) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate shapes in null body");
	}
	var ret = output == null?new ShapeList():output;
	var _this = body.zpp_inner.wrap_shapes;
	_this.zpp_inner.valmod();
	var _g = ShapeIterator.get(_this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this1 = _g.zpp_inner;
		_this1.zpp_inner.valmod();
		if(_this1.zpp_inner.zip_length) {
			_this1.zpp_inner.zip_length = false;
			_this1.zpp_inner.user_length = _this1.zpp_inner.inner.length;
		}
		var length = _this1.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ShapeIterator.zpp_pool;
			ShapeIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		this.shapesInShape(_g.zpp_inner.at(_g.zpp_i++),false,filter,ret);
	}
	return ret;
};
Space.prototype.bodiesInBody = function(body,filter,output) {
	if(body == null) {
		throw new js._Boot.HaxeError("Error: Cannot evaluate shapes in null body");
	}
	var ret = output == null?new BodyList():output;
	var _this = body.zpp_inner.wrap_shapes;
	_this.zpp_inner.valmod();
	var _g = ShapeIterator.get(_this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this1 = _g.zpp_inner;
		_this1.zpp_inner.valmod();
		if(_this1.zpp_inner.zip_length) {
			_this1.zpp_inner.zip_length = false;
			_this1.zpp_inner.user_length = _this1.zpp_inner.inner.length;
		}
		var length = _this1.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ShapeIterator.zpp_pool;
			ShapeIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		this.bodiesInShape(_g.zpp_inner.at(_g.zpp_i++),false,filter,ret);
	}
	return ret;
};
Space.prototype.convexCast = function(shape,deltaTime,liveSweep,filter) {
	if(liveSweep == null) {
		liveSweep = false;
	}
	if(shape == null) {
		throw new js._Boot.HaxeError("Error: Cannot cast null shape :)");
	}
	if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) {
		throw new js._Boot.HaxeError("Error: Shape must belong to a body to be cast.");
	}
	if(deltaTime < 0 || deltaTime != deltaTime) {
		throw new js._Boot.HaxeError("Error: deltaTime must be positive");
	}
	return this.zpp_inner.convexCast(shape.zpp_inner,deltaTime,filter,liveSweep);
};
Space.prototype.convexMultiCast = function(shape,deltaTime,liveSweep,filter,output) {
	if(liveSweep == null) {
		liveSweep = false;
	}
	if(shape == null) {
		throw new js._Boot.HaxeError("Error: Cannot cast null shape :)");
	}
	if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) {
		throw new js._Boot.HaxeError("Error: Shape must belong to a body to be cast.");
	}
	if(deltaTime < 0 || deltaTime != deltaTime) {
		throw new js._Boot.HaxeError("Error: deltaTime must be positive");
	}
	return this.zpp_inner.convexMultiCast(shape.zpp_inner,deltaTime,filter,liveSweep,output);
};
Space.prototype.rayCast = function(ray,inner,filter) {
	if(inner == null) {
		inner = false;
	}
	if(ray == null) {
		throw new js._Boot.HaxeError("Error: Cannot cast null ray :)");
	}
	return this.zpp_inner.rayCast(ray,inner,filter);
};
Space.prototype.rayMultiCast = function(ray,inner,filter,output) {
	if(inner == null) {
		inner = false;
	}
	if(ray == null) {
		throw new js._Boot.HaxeError("Error: Cannot cast null ray :)");
	}
	return this.zpp_inner.rayMultiCast(ray,inner,filter,output);
};
Space.prototype.__class__ = Space;
var Debug = nape.util.Debug = function() { };
Debug.__name__ = ["nape","util","Debug"];
Debug.version = function() {
	return "Nape 2.0.19";
};
Debug.clearObjectPools = function() {
	while(ConstraintIterator.zpp_pool != null) {
		var nxt = ConstraintIterator.zpp_pool.zpp_next;
		ConstraintIterator.zpp_pool.zpp_next = null;
		ConstraintIterator.zpp_pool = nxt;
	}
	while(InteractorIterator.zpp_pool != null) {
		var nxt1 = InteractorIterator.zpp_pool.zpp_next;
		InteractorIterator.zpp_pool.zpp_next = null;
		InteractorIterator.zpp_pool = nxt1;
	}
	while(BodyIterator.zpp_pool != null) {
		var nxt2 = BodyIterator.zpp_pool.zpp_next;
		BodyIterator.zpp_pool.zpp_next = null;
		BodyIterator.zpp_pool = nxt2;
	}
	while(CompoundIterator.zpp_pool != null) {
		var nxt3 = CompoundIterator.zpp_pool.zpp_next;
		CompoundIterator.zpp_pool.zpp_next = null;
		CompoundIterator.zpp_pool = nxt3;
	}
	while(ListenerIterator.zpp_pool != null) {
		var nxt4 = ListenerIterator.zpp_pool.zpp_next;
		ListenerIterator.zpp_pool.zpp_next = null;
		ListenerIterator.zpp_pool = nxt4;
	}
	while(CbTypeIterator.zpp_pool != null) {
		var nxt5 = CbTypeIterator.zpp_pool.zpp_next;
		CbTypeIterator.zpp_pool.zpp_next = null;
		CbTypeIterator.zpp_pool = nxt5;
	}
	while(ConvexResultIterator.zpp_pool != null) {
		var nxt6 = ConvexResultIterator.zpp_pool.zpp_next;
		ConvexResultIterator.zpp_pool.zpp_next = null;
		ConvexResultIterator.zpp_pool = nxt6;
	}
	while(GeomPolyIterator.zpp_pool != null) {
		var nxt7 = GeomPolyIterator.zpp_pool.zpp_next;
		GeomPolyIterator.zpp_pool.zpp_next = null;
		GeomPolyIterator.zpp_pool = nxt7;
	}
	while(Vec2Iterator.zpp_pool != null) {
		var nxt8 = Vec2Iterator.zpp_pool.zpp_next;
		Vec2Iterator.zpp_pool.zpp_next = null;
		Vec2Iterator.zpp_pool = nxt8;
	}
	while(RayResultIterator.zpp_pool != null) {
		var nxt9 = RayResultIterator.zpp_pool.zpp_next;
		RayResultIterator.zpp_pool.zpp_next = null;
		RayResultIterator.zpp_pool = nxt9;
	}
	while(ShapeIterator.zpp_pool != null) {
		var nxt10 = ShapeIterator.zpp_pool.zpp_next;
		ShapeIterator.zpp_pool.zpp_next = null;
		ShapeIterator.zpp_pool = nxt10;
	}
	while(EdgeIterator.zpp_pool != null) {
		var nxt11 = EdgeIterator.zpp_pool.zpp_next;
		EdgeIterator.zpp_pool.zpp_next = null;
		EdgeIterator.zpp_pool = nxt11;
	}
	while(ContactIterator.zpp_pool != null) {
		var nxt12 = ContactIterator.zpp_pool.zpp_next;
		ContactIterator.zpp_pool.zpp_next = null;
		ContactIterator.zpp_pool = nxt12;
	}
	while(ArbiterIterator.zpp_pool != null) {
		var nxt13 = ArbiterIterator.zpp_pool.zpp_next;
		ArbiterIterator.zpp_pool.zpp_next = null;
		ArbiterIterator.zpp_pool = nxt13;
	}
	while(InteractionGroupIterator.zpp_pool != null) {
		var nxt14 = InteractionGroupIterator.zpp_pool.zpp_next;
		InteractionGroupIterator.zpp_pool.zpp_next = null;
		InteractionGroupIterator.zpp_pool = nxt14;
	}
	while(ZNPNode_ZPP_CbType.zpp_pool != null) {
		var nxt15 = ZNPNode_ZPP_CbType.zpp_pool.next;
		ZNPNode_ZPP_CbType.zpp_pool.next = null;
		ZNPNode_ZPP_CbType.zpp_pool = nxt15;
	}
	while(ZNPNode_ZPP_CallbackSet.zpp_pool != null) {
		var nxt16 = ZNPNode_ZPP_CallbackSet.zpp_pool.next;
		ZNPNode_ZPP_CallbackSet.zpp_pool.next = null;
		ZNPNode_ZPP_CallbackSet.zpp_pool = nxt16;
	}
	while(ZPP_Material.zpp_pool != null) {
		var nxt17 = ZPP_Material.zpp_pool.next;
		ZPP_Material.zpp_pool.next = null;
		ZPP_Material.zpp_pool = nxt17;
	}
	while(ZNPNode_ZPP_Shape.zpp_pool != null) {
		var nxt18 = ZNPNode_ZPP_Shape.zpp_pool.next;
		ZNPNode_ZPP_Shape.zpp_pool.next = null;
		ZNPNode_ZPP_Shape.zpp_pool = nxt18;
	}
	while(ZPP_FluidProperties.zpp_pool != null) {
		var nxt19 = ZPP_FluidProperties.zpp_pool.next;
		ZPP_FluidProperties.zpp_pool.next = null;
		ZPP_FluidProperties.zpp_pool = nxt19;
	}
	while(ZNPNode_ZPP_Body.zpp_pool != null) {
		var nxt20 = ZNPNode_ZPP_Body.zpp_pool.next;
		ZNPNode_ZPP_Body.zpp_pool.next = null;
		ZNPNode_ZPP_Body.zpp_pool = nxt20;
	}
	while(ZNPNode_ZPP_Constraint.zpp_pool != null) {
		var nxt21 = ZNPNode_ZPP_Constraint.zpp_pool.next;
		ZNPNode_ZPP_Constraint.zpp_pool.next = null;
		ZNPNode_ZPP_Constraint.zpp_pool = nxt21;
	}
	while(ZNPNode_ZPP_Compound.zpp_pool != null) {
		var nxt22 = ZNPNode_ZPP_Compound.zpp_pool.next;
		ZNPNode_ZPP_Compound.zpp_pool.next = null;
		ZNPNode_ZPP_Compound.zpp_pool = nxt22;
	}
	while(ZNPNode_ZPP_Arbiter.zpp_pool != null) {
		var nxt23 = ZNPNode_ZPP_Arbiter.zpp_pool.next;
		ZNPNode_ZPP_Arbiter.zpp_pool.next = null;
		ZNPNode_ZPP_Arbiter.zpp_pool = nxt23;
	}
	while(ZPP_Set_ZPP_Body.zpp_pool != null) {
		var nxt24 = ZPP_Set_ZPP_Body.zpp_pool.next;
		ZPP_Set_ZPP_Body.zpp_pool.next = null;
		ZPP_Set_ZPP_Body.zpp_pool = nxt24;
	}
	while(ZPP_CbSetPair.zpp_pool != null) {
		var nxt25 = ZPP_CbSetPair.zpp_pool.next;
		ZPP_CbSetPair.zpp_pool.next = null;
		ZPP_CbSetPair.zpp_pool = nxt25;
	}
	while(ZNPNode_ZPP_InteractionListener.zpp_pool != null) {
		var nxt26 = ZNPNode_ZPP_InteractionListener.zpp_pool.next;
		ZNPNode_ZPP_InteractionListener.zpp_pool.next = null;
		ZNPNode_ZPP_InteractionListener.zpp_pool = nxt26;
	}
	while(ZNPNode_ZPP_CbSet.zpp_pool != null) {
		var nxt27 = ZNPNode_ZPP_CbSet.zpp_pool.next;
		ZNPNode_ZPP_CbSet.zpp_pool.next = null;
		ZNPNode_ZPP_CbSet.zpp_pool = nxt27;
	}
	while(ZNPNode_ZPP_Interactor.zpp_pool != null) {
		var nxt28 = ZNPNode_ZPP_Interactor.zpp_pool.next;
		ZNPNode_ZPP_Interactor.zpp_pool.next = null;
		ZNPNode_ZPP_Interactor.zpp_pool = nxt28;
	}
	while(ZNPNode_ZPP_BodyListener.zpp_pool != null) {
		var nxt29 = ZNPNode_ZPP_BodyListener.zpp_pool.next;
		ZNPNode_ZPP_BodyListener.zpp_pool.next = null;
		ZNPNode_ZPP_BodyListener.zpp_pool = nxt29;
	}
	while(ZPP_Callback.zpp_pool != null) {
		var nxt30 = ZPP_Callback.zpp_pool.next;
		ZPP_Callback.zpp_pool.next = null;
		ZPP_Callback.zpp_pool = nxt30;
	}
	while(ZPP_CbSet.zpp_pool != null) {
		var nxt31 = ZPP_CbSet.zpp_pool.next;
		ZPP_CbSet.zpp_pool.next = null;
		ZPP_CbSet.zpp_pool = nxt31;
	}
	while(ZNPNode_ZPP_CbSetPair.zpp_pool != null) {
		var nxt32 = ZNPNode_ZPP_CbSetPair.zpp_pool.next;
		ZNPNode_ZPP_CbSetPair.zpp_pool.next = null;
		ZNPNode_ZPP_CbSetPair.zpp_pool = nxt32;
	}
	while(ZNPNode_ZPP_ConstraintListener.zpp_pool != null) {
		var nxt33 = ZNPNode_ZPP_ConstraintListener.zpp_pool.next;
		ZNPNode_ZPP_ConstraintListener.zpp_pool.next = null;
		ZNPNode_ZPP_ConstraintListener.zpp_pool = nxt33;
	}
	while(ZPP_GeomVert.zpp_pool != null) {
		var nxt34 = ZPP_GeomVert.zpp_pool.next;
		ZPP_GeomVert.zpp_pool.next = null;
		ZPP_GeomVert.zpp_pool = nxt34;
	}
	while(ZPP_GeomVertexIterator.zpp_pool != null) {
		var nxt35 = ZPP_GeomVertexIterator.zpp_pool.next;
		ZPP_GeomVertexIterator.zpp_pool.next = null;
		ZPP_GeomVertexIterator.zpp_pool = nxt35;
	}
	while(ZPP_Mat23.zpp_pool != null) {
		var nxt36 = ZPP_Mat23.zpp_pool.next;
		ZPP_Mat23.zpp_pool.next = null;
		ZPP_Mat23.zpp_pool = nxt36;
	}
	while(ZPP_Set_ZPP_CbSetPair.zpp_pool != null) {
		var nxt37 = ZPP_Set_ZPP_CbSetPair.zpp_pool.next;
		ZPP_Set_ZPP_CbSetPair.zpp_pool.next = null;
		ZPP_Set_ZPP_CbSetPair.zpp_pool = nxt37;
	}
	while(ZPP_CutVert.zpp_pool != null) {
		var nxt38 = ZPP_CutVert.zpp_pool.next;
		ZPP_CutVert.zpp_pool.next = null;
		ZPP_CutVert.zpp_pool = nxt38;
	}
	while(ZPP_CutInt.zpp_pool != null) {
		var nxt39 = ZPP_CutInt.zpp_pool.next;
		ZPP_CutInt.zpp_pool.next = null;
		ZPP_CutInt.zpp_pool = nxt39;
	}
	while(ZNPNode_ZPP_CutInt.zpp_pool != null) {
		var nxt40 = ZNPNode_ZPP_CutInt.zpp_pool.next;
		ZNPNode_ZPP_CutInt.zpp_pool.next = null;
		ZNPNode_ZPP_CutInt.zpp_pool = nxt40;
	}
	while(ZNPNode_ZPP_CutVert.zpp_pool != null) {
		var nxt41 = ZNPNode_ZPP_CutVert.zpp_pool.next;
		ZNPNode_ZPP_CutVert.zpp_pool.next = null;
		ZNPNode_ZPP_CutVert.zpp_pool = nxt41;
	}
	while(ZPP_Vec2.zpp_pool != null) {
		var nxt42 = ZPP_Vec2.zpp_pool.next;
		ZPP_Vec2.zpp_pool.next = null;
		ZPP_Vec2.zpp_pool = nxt42;
	}
	while(ZNPNode_ZPP_PartitionVertex.zpp_pool != null) {
		var nxt43 = ZNPNode_ZPP_PartitionVertex.zpp_pool.next;
		ZNPNode_ZPP_PartitionVertex.zpp_pool.next = null;
		ZNPNode_ZPP_PartitionVertex.zpp_pool = nxt43;
	}
	while(ZPP_PartitionVertex.zpp_pool != null) {
		var nxt44 = ZPP_PartitionVertex.zpp_pool.next;
		ZPP_PartitionVertex.zpp_pool.next = null;
		ZPP_PartitionVertex.zpp_pool = nxt44;
	}
	while(ZPP_Set_ZPP_PartitionVertex.zpp_pool != null) {
		var nxt45 = ZPP_Set_ZPP_PartitionVertex.zpp_pool.next;
		ZPP_Set_ZPP_PartitionVertex.zpp_pool.next = null;
		ZPP_Set_ZPP_PartitionVertex.zpp_pool = nxt45;
	}
	while(ZPP_SimplifyV.zpp_pool != null) {
		var nxt46 = ZPP_SimplifyV.zpp_pool.next;
		ZPP_SimplifyV.zpp_pool.next = null;
		ZPP_SimplifyV.zpp_pool = nxt46;
	}
	while(ZPP_SimplifyP.zpp_pool != null) {
		var nxt47 = ZPP_SimplifyP.zpp_pool.next;
		ZPP_SimplifyP.zpp_pool.next = null;
		ZPP_SimplifyP.zpp_pool = nxt47;
	}
	while(ZPP_PartitionedPoly.zpp_pool != null) {
		var nxt48 = ZPP_PartitionedPoly.zpp_pool.next;
		ZPP_PartitionedPoly.zpp_pool.next = null;
		ZPP_PartitionedPoly.zpp_pool = nxt48;
	}
	while(ZNPNode_ZPP_SimplifyP.zpp_pool != null) {
		var nxt49 = ZNPNode_ZPP_SimplifyP.zpp_pool.next;
		ZNPNode_ZPP_SimplifyP.zpp_pool.next = null;
		ZNPNode_ZPP_SimplifyP.zpp_pool = nxt49;
	}
	while(ZNPNode_ZPP_PartitionedPoly.zpp_pool != null) {
		var nxt50 = ZNPNode_ZPP_PartitionedPoly.zpp_pool.next;
		ZNPNode_ZPP_PartitionedPoly.zpp_pool.next = null;
		ZNPNode_ZPP_PartitionedPoly.zpp_pool = nxt50;
	}
	while(ZPP_PartitionPair.zpp_pool != null) {
		var nxt51 = ZPP_PartitionPair.zpp_pool.next;
		ZPP_PartitionPair.zpp_pool.next = null;
		ZPP_PartitionPair.zpp_pool = nxt51;
	}
	while(ZPP_Set_ZPP_PartitionPair.zpp_pool != null) {
		var nxt52 = ZPP_Set_ZPP_PartitionPair.zpp_pool.next;
		ZPP_Set_ZPP_PartitionPair.zpp_pool.next = null;
		ZPP_Set_ZPP_PartitionPair.zpp_pool = nxt52;
	}
	while(ZNPNode_ZPP_GeomVert.zpp_pool != null) {
		var nxt53 = ZNPNode_ZPP_GeomVert.zpp_pool.next;
		ZNPNode_ZPP_GeomVert.zpp_pool.next = null;
		ZNPNode_ZPP_GeomVert.zpp_pool = nxt53;
	}
	while(ZPP_AABB.zpp_pool != null) {
		var nxt54 = ZPP_AABB.zpp_pool.next;
		ZPP_AABB.zpp_pool.next = null;
		ZPP_AABB.zpp_pool = nxt54;
	}
	while(ZPP_Set_ZPP_SimpleVert.zpp_pool != null) {
		var nxt55 = ZPP_Set_ZPP_SimpleVert.zpp_pool.next;
		ZPP_Set_ZPP_SimpleVert.zpp_pool.next = null;
		ZPP_Set_ZPP_SimpleVert.zpp_pool = nxt55;
	}
	while(ZPP_SimpleVert.zpp_pool != null) {
		var nxt56 = ZPP_SimpleVert.zpp_pool.next;
		ZPP_SimpleVert.zpp_pool.next = null;
		ZPP_SimpleVert.zpp_pool = nxt56;
	}
	while(ZPP_SimpleSeg.zpp_pool != null) {
		var nxt57 = ZPP_SimpleSeg.zpp_pool.next;
		ZPP_SimpleSeg.zpp_pool.next = null;
		ZPP_SimpleSeg.zpp_pool = nxt57;
	}
	while(ZPP_Set_ZPP_SimpleSeg.zpp_pool != null) {
		var nxt58 = ZPP_Set_ZPP_SimpleSeg.zpp_pool.next;
		ZPP_Set_ZPP_SimpleSeg.zpp_pool.next = null;
		ZPP_Set_ZPP_SimpleSeg.zpp_pool = nxt58;
	}
	while(ZPP_Set_ZPP_SimpleEvent.zpp_pool != null) {
		var nxt59 = ZPP_Set_ZPP_SimpleEvent.zpp_pool.next;
		ZPP_Set_ZPP_SimpleEvent.zpp_pool.next = null;
		ZPP_Set_ZPP_SimpleEvent.zpp_pool = nxt59;
	}
	while(ZPP_SimpleEvent.zpp_pool != null) {
		var nxt60 = ZPP_SimpleEvent.zpp_pool.next;
		ZPP_SimpleEvent.zpp_pool.next = null;
		ZPP_SimpleEvent.zpp_pool = nxt60;
	}
	while(Hashable2_Boolfalse.zpp_pool != null) {
		var nxt61 = Hashable2_Boolfalse.zpp_pool.next;
		Hashable2_Boolfalse.zpp_pool.next = null;
		Hashable2_Boolfalse.zpp_pool = nxt61;
	}
	while(ZPP_ToiEvent.zpp_pool != null) {
		var nxt62 = ZPP_ToiEvent.zpp_pool.next;
		ZPP_ToiEvent.zpp_pool.next = null;
		ZPP_ToiEvent.zpp_pool = nxt62;
	}
	while(ZNPNode_ZPP_SimpleVert.zpp_pool != null) {
		var nxt63 = ZNPNode_ZPP_SimpleVert.zpp_pool.next;
		ZNPNode_ZPP_SimpleVert.zpp_pool.next = null;
		ZNPNode_ZPP_SimpleVert.zpp_pool = nxt63;
	}
	while(ZNPNode_ZPP_SimpleEvent.zpp_pool != null) {
		var nxt64 = ZNPNode_ZPP_SimpleEvent.zpp_pool.next;
		ZNPNode_ZPP_SimpleEvent.zpp_pool.next = null;
		ZNPNode_ZPP_SimpleEvent.zpp_pool = nxt64;
	}
	while(ZPP_MarchSpan.zpp_pool != null) {
		var nxt65 = ZPP_MarchSpan.zpp_pool.next;
		ZPP_MarchSpan.zpp_pool.next = null;
		ZPP_MarchSpan.zpp_pool = nxt65;
	}
	while(ZPP_MarchPair.zpp_pool != null) {
		var nxt66 = ZPP_MarchPair.zpp_pool.next;
		ZPP_MarchPair.zpp_pool.next = null;
		ZPP_MarchPair.zpp_pool = nxt66;
	}
	while(ZNPNode_ZPP_Vec2.zpp_pool != null) {
		var nxt67 = ZNPNode_ZPP_Vec2.zpp_pool.next;
		ZNPNode_ZPP_Vec2.zpp_pool.next = null;
		ZNPNode_ZPP_Vec2.zpp_pool = nxt67;
	}
	while(ZPP_Edge.zpp_pool != null) {
		var nxt68 = ZPP_Edge.zpp_pool.next;
		ZPP_Edge.zpp_pool.next = null;
		ZPP_Edge.zpp_pool = nxt68;
	}
	while(ZNPNode_ZPP_AABBPair.zpp_pool != null) {
		var nxt69 = ZNPNode_ZPP_AABBPair.zpp_pool.next;
		ZNPNode_ZPP_AABBPair.zpp_pool.next = null;
		ZNPNode_ZPP_AABBPair.zpp_pool = nxt69;
	}
	while(ZNPNode_ZPP_Edge.zpp_pool != null) {
		var nxt70 = ZNPNode_ZPP_Edge.zpp_pool.next;
		ZNPNode_ZPP_Edge.zpp_pool.next = null;
		ZNPNode_ZPP_Edge.zpp_pool = nxt70;
	}
	while(ZPP_SweepData.zpp_pool != null) {
		var nxt71 = ZPP_SweepData.zpp_pool.next;
		ZPP_SweepData.zpp_pool.next = null;
		ZPP_SweepData.zpp_pool = nxt71;
	}
	while(ZPP_AABBNode.zpp_pool != null) {
		var nxt72 = ZPP_AABBNode.zpp_pool.next;
		ZPP_AABBNode.zpp_pool.next = null;
		ZPP_AABBNode.zpp_pool = nxt72;
	}
	while(ZPP_AABBPair.zpp_pool != null) {
		var nxt73 = ZPP_AABBPair.zpp_pool.next;
		ZPP_AABBPair.zpp_pool.next = null;
		ZPP_AABBPair.zpp_pool = nxt73;
	}
	while(ZNPNode_ZPP_AABBNode.zpp_pool != null) {
		var nxt74 = ZNPNode_ZPP_AABBNode.zpp_pool.next;
		ZNPNode_ZPP_AABBNode.zpp_pool.next = null;
		ZNPNode_ZPP_AABBNode.zpp_pool = nxt74;
	}
	while(ZPP_Contact.zpp_pool != null) {
		var nxt75 = ZPP_Contact.zpp_pool.next;
		ZPP_Contact.zpp_pool.next = null;
		ZPP_Contact.zpp_pool = nxt75;
	}
	while(ZNPNode_ZPP_Component.zpp_pool != null) {
		var nxt76 = ZNPNode_ZPP_Component.zpp_pool.next;
		ZNPNode_ZPP_Component.zpp_pool.next = null;
		ZNPNode_ZPP_Component.zpp_pool = nxt76;
	}
	while(ZPP_Island.zpp_pool != null) {
		var nxt77 = ZPP_Island.zpp_pool.next;
		ZPP_Island.zpp_pool.next = null;
		ZPP_Island.zpp_pool = nxt77;
	}
	while(ZPP_Component.zpp_pool != null) {
		var nxt78 = ZPP_Component.zpp_pool.next;
		ZPP_Component.zpp_pool.next = null;
		ZPP_Component.zpp_pool = nxt78;
	}
	while(ZPP_CallbackSet.zpp_pool != null) {
		var nxt79 = ZPP_CallbackSet.zpp_pool.next;
		ZPP_CallbackSet.zpp_pool.next = null;
		ZPP_CallbackSet.zpp_pool = nxt79;
	}
	while(ZPP_SensorArbiter.zpp_pool != null) {
		var nxt80 = ZPP_SensorArbiter.zpp_pool.next;
		ZPP_SensorArbiter.zpp_pool.next = null;
		ZPP_SensorArbiter.zpp_pool = nxt80;
	}
	while(ZPP_FluidArbiter.zpp_pool != null) {
		var nxt81 = ZPP_FluidArbiter.zpp_pool.next;
		ZPP_FluidArbiter.zpp_pool.next = null;
		ZPP_FluidArbiter.zpp_pool = nxt81;
	}
	while(ZPP_Set_ZPP_CbSet.zpp_pool != null) {
		var nxt82 = ZPP_Set_ZPP_CbSet.zpp_pool.next;
		ZPP_Set_ZPP_CbSet.zpp_pool.next = null;
		ZPP_Set_ZPP_CbSet.zpp_pool = nxt82;
	}
	while(ZNPNode_ZPP_FluidArbiter.zpp_pool != null) {
		var nxt83 = ZNPNode_ZPP_FluidArbiter.zpp_pool.next;
		ZNPNode_ZPP_FluidArbiter.zpp_pool.next = null;
		ZNPNode_ZPP_FluidArbiter.zpp_pool = nxt83;
	}
	while(ZPP_ColArbiter.zpp_pool != null) {
		var nxt84 = ZPP_ColArbiter.zpp_pool.next;
		ZPP_ColArbiter.zpp_pool.next = null;
		ZPP_ColArbiter.zpp_pool = nxt84;
	}
	while(ZNPNode_ZPP_SensorArbiter.zpp_pool != null) {
		var nxt85 = ZNPNode_ZPP_SensorArbiter.zpp_pool.next;
		ZNPNode_ZPP_SensorArbiter.zpp_pool.next = null;
		ZNPNode_ZPP_SensorArbiter.zpp_pool = nxt85;
	}
	while(ZNPNode_ZPP_Listener.zpp_pool != null) {
		var nxt86 = ZNPNode_ZPP_Listener.zpp_pool.next;
		ZNPNode_ZPP_Listener.zpp_pool.next = null;
		ZNPNode_ZPP_Listener.zpp_pool = nxt86;
	}
	while(ZNPNode_ZPP_ColArbiter.zpp_pool != null) {
		var nxt87 = ZNPNode_ZPP_ColArbiter.zpp_pool.next;
		ZNPNode_ZPP_ColArbiter.zpp_pool.next = null;
		ZNPNode_ZPP_ColArbiter.zpp_pool = nxt87;
	}
	while(ZNPNode_ZPP_InteractionGroup.zpp_pool != null) {
		var nxt88 = ZNPNode_ZPP_InteractionGroup.zpp_pool.next;
		ZNPNode_ZPP_InteractionGroup.zpp_pool.next = null;
		ZNPNode_ZPP_InteractionGroup.zpp_pool = nxt88;
	}
	while(ZNPNode_ZPP_ToiEvent.zpp_pool != null) {
		var nxt89 = ZNPNode_ZPP_ToiEvent.zpp_pool.next;
		ZNPNode_ZPP_ToiEvent.zpp_pool.next = null;
		ZNPNode_ZPP_ToiEvent.zpp_pool = nxt89;
	}
	while(ZPP_InteractionFilter.zpp_pool != null) {
		var nxt90 = ZPP_InteractionFilter.zpp_pool.next;
		ZPP_InteractionFilter.zpp_pool.next = null;
		ZPP_InteractionFilter.zpp_pool = nxt90;
	}
	while(ZNPNode_ConvexResult.zpp_pool != null) {
		var nxt91 = ZNPNode_ConvexResult.zpp_pool.next;
		ZNPNode_ConvexResult.zpp_pool.next = null;
		ZNPNode_ConvexResult.zpp_pool = nxt91;
	}
	while(ZNPNode_ZPP_GeomPoly.zpp_pool != null) {
		var nxt92 = ZNPNode_ZPP_GeomPoly.zpp_pool.next;
		ZNPNode_ZPP_GeomPoly.zpp_pool.next = null;
		ZNPNode_ZPP_GeomPoly.zpp_pool = nxt92;
	}
	while(ZNPNode_RayResult.zpp_pool != null) {
		var nxt93 = ZNPNode_RayResult.zpp_pool.next;
		ZNPNode_RayResult.zpp_pool.next = null;
		ZNPNode_RayResult.zpp_pool = nxt93;
	}
	while(ZPP_PubPool.poolGeomPoly != null) {
		var nxt94 = ZPP_PubPool.poolGeomPoly.zpp_pool;
		ZPP_PubPool.poolGeomPoly.zpp_pool = null;
		ZPP_PubPool.poolGeomPoly = nxt94;
	}
	while(ZPP_PubPool.poolVec2 != null) {
		var nxt95 = ZPP_PubPool.poolVec2.zpp_pool;
		ZPP_PubPool.poolVec2.zpp_pool = null;
		ZPP_PubPool.poolVec2 = nxt95;
	}
	while(ZPP_PubPool.poolVec3 != null) {
		var nxt96 = ZPP_PubPool.poolVec3.zpp_pool;
		ZPP_PubPool.poolVec3.zpp_pool = null;
		ZPP_PubPool.poolVec3 = nxt96;
	}
};
Debug.prototype.__class__ = Debug;
zpp_nape.ZPP_Const = function() { };
zpp_nape.ZPP_Const.__name__ = ["zpp_nape","ZPP_Const"];
zpp_nape.ZPP_Const.POSINF = function() {
	return Infinity;
};
zpp_nape.ZPP_Const.NEGINF = function() {
	return -Infinity;
};
zpp_nape.ZPP_Const.prototype.__class__ = zpp_nape.ZPP_Const;
zpp_nape.ZPP_ID = function() { };
zpp_nape.ZPP_ID.__name__ = ["zpp_nape","ZPP_ID"];
zpp_nape.ZPP_ID.Constraint = function() {
	return zpp_nape.ZPP_ID._Constraint++;
};
zpp_nape.ZPP_ID.Interactor = function() {
	return zpp_nape.ZPP_ID._Interactor++;
};
zpp_nape.ZPP_ID.CbType = function() {
	return zpp_nape.ZPP_ID._CbType++;
};
zpp_nape.ZPP_ID.CbSet = function() {
	return zpp_nape.ZPP_ID._CbSet++;
};
zpp_nape.ZPP_ID.Listener = function() {
	return zpp_nape.ZPP_ID._Listener++;
};
zpp_nape.ZPP_ID.ZPP_SimpleVert = function() {
	return zpp_nape.ZPP_ID._ZPP_SimpleVert++;
};
zpp_nape.ZPP_ID.ZPP_SimpleSeg = function() {
	return zpp_nape.ZPP_ID._ZPP_SimpleSeg++;
};
zpp_nape.ZPP_ID.Space = function() {
	return zpp_nape.ZPP_ID._Space++;
};
zpp_nape.ZPP_ID.InteractionGroup = function() {
	return zpp_nape.ZPP_ID._InteractionGroup++;
};
zpp_nape.ZPP_ID.prototype.__class__ = zpp_nape.ZPP_ID;
var ZPP_Callback = zpp_nape.callbacks.ZPP_Callback = function() {
	this.constraint = null;
	this.body = null;
	this.pre_swapped = false;
	this.pre_arbiter = null;
	this.wrap_arbiters = null;
	this.set = null;
	this.int2 = null;
	this.int1 = null;
	this.length = 0;
	this.prev = null;
	this.next = null;
	this.index = 0;
	this.space = null;
	this.listener = null;
	this.event = 0;
	this.outer_int = null;
	this.outer_con = null;
	this.outer_body = null;
	this.length = 0;
};
ZPP_Callback.__name__ = ["zpp_nape","callbacks","ZPP_Callback"];
ZPP_Callback.prototype.outer_body = null;
ZPP_Callback.prototype.outer_con = null;
ZPP_Callback.prototype.outer_int = null;
ZPP_Callback.prototype.wrapper_body = function() {
	if(this.outer_body == null) {
		ZPP_Callback.internal = true;
		this.outer_body = new BodyCallback();
		ZPP_Callback.internal = false;
		this.outer_body.zpp_inner = this;
	}
	return this.outer_body;
};
ZPP_Callback.prototype.wrapper_con = function() {
	if(this.outer_con == null) {
		ZPP_Callback.internal = true;
		this.outer_con = new ConstraintCallback();
		ZPP_Callback.internal = false;
		this.outer_con.zpp_inner = this;
	}
	return this.outer_con;
};
ZPP_Callback.prototype.wrapper_int = function() {
	if(this.outer_int == null) {
		ZPP_Callback.internal = true;
		this.outer_int = new InteractionCallback();
		ZPP_Callback.internal = false;
		this.outer_int.zpp_inner = this;
	}
	if(this.wrap_arbiters == null) {
		this.wrap_arbiters = ZPP_ArbiterList.get(this.set.arbiters,true);
	} else {
		this.wrap_arbiters.zpp_inner.inner = this.set.arbiters;
	}
	this.wrap_arbiters.zpp_inner.zip_length = true;
	this.wrap_arbiters.zpp_inner.at_ite = null;
	return this.outer_int;
};
ZPP_Callback.prototype.event = null;
ZPP_Callback.prototype.listener = null;
ZPP_Callback.prototype.space = null;
ZPP_Callback.prototype.index = null;
ZPP_Callback.prototype.next = null;
ZPP_Callback.prototype.prev = null;
ZPP_Callback.prototype.length = null;
ZPP_Callback.prototype.push = function(obj) {
	if(this.prev != null) {
		this.prev.next = obj;
	} else {
		this.next = obj;
	}
	obj.prev = this.prev;
	obj.next = null;
	this.prev = obj;
	this.length++;
};
ZPP_Callback.prototype.push_rev = function(obj) {
	if(this.next != null) {
		this.next.prev = obj;
	} else {
		this.prev = obj;
	}
	obj.next = this.next;
	obj.prev = null;
	this.next = obj;
	this.length++;
};
ZPP_Callback.prototype.pop = function() {
	var ret = this.next;
	this.next = ret.next;
	if(this.next == null) {
		this.prev = null;
	} else {
		this.next.prev = null;
	}
	this.length--;
	return ret;
};
ZPP_Callback.prototype.pop_rev = function() {
	var ret = this.prev;
	this.prev = ret.prev;
	if(this.prev == null) {
		this.next = null;
	} else {
		this.prev.next = null;
	}
	this.length--;
	return ret;
};
ZPP_Callback.prototype.empty = function() {
	return this.next == null;
};
ZPP_Callback.prototype.clear = function() {
	while(!this.empty()) this.pop();
};
ZPP_Callback.prototype.splice = function(o) {
	var ret = o.next;
	if(o.prev == null) {
		this.next = o.next;
		if(this.next != null) {
			this.next.prev = null;
		} else {
			this.prev = null;
		}
	} else {
		o.prev.next = o.next;
		if(o.next != null) {
			o.next.prev = o.prev;
		} else {
			this.prev = o.prev;
		}
	}
	this.length--;
	return ret;
};
ZPP_Callback.prototype.rotateL = function() {
	this.push(this.pop());
};
ZPP_Callback.prototype.rotateR = function() {
	this.push_rev(this.pop_rev());
};
ZPP_Callback.prototype.cycleNext = function(o) {
	if(o.next == null) {
		return this.next;
	} else {
		return o.next;
	}
};
ZPP_Callback.prototype.cyclePrev = function(o) {
	if(o.prev == null) {
		return this.prev;
	} else {
		return o.prev;
	}
};
ZPP_Callback.prototype.at = function(i) {
	var ret = this.next;
	while(i-- != 0) ret = ret.next;
	return ret;
};
ZPP_Callback.prototype.rev_at = function(i) {
	var ret = this.prev;
	while(i-- != 0) ret = ret.prev;
	return ret;
};
ZPP_Callback.prototype.free = function() {
	this.int1 = this.int2 = null;
	this.body = null;
	this.constraint = null;
	this.listener = null;
	if(this.wrap_arbiters != null) {
		this.wrap_arbiters.zpp_inner.inner = null;
	}
	this.set = null;
};
ZPP_Callback.prototype.alloc = function() {
};
ZPP_Callback.prototype.int1 = null;
ZPP_Callback.prototype.int2 = null;
ZPP_Callback.prototype.set = null;
ZPP_Callback.prototype.wrap_arbiters = null;
ZPP_Callback.prototype.pre_arbiter = null;
ZPP_Callback.prototype.pre_swapped = null;
ZPP_Callback.prototype.genarbs = function() {
	if(this.wrap_arbiters == null) {
		this.wrap_arbiters = ZPP_ArbiterList.get(this.set.arbiters,true);
	} else {
		this.wrap_arbiters.zpp_inner.inner = this.set.arbiters;
	}
	this.wrap_arbiters.zpp_inner.zip_length = true;
	this.wrap_arbiters.zpp_inner.at_ite = null;
};
ZPP_Callback.prototype.body = null;
ZPP_Callback.prototype.constraint = null;
ZPP_Callback.prototype.__class__ = ZPP_Callback;
var ZPP_CbSet = zpp_nape.callbacks.ZPP_CbSet = function() {
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_interactors = null;
	this.interactors = null;
	this.zip_conlisteners = false;
	this.conlisteners = null;
	this.zip_bodylisteners = false;
	this.bodylisteners = null;
	this.zip_listeners = false;
	this.listeners = null;
	this.cbpairs = null;
	this.manager = null;
	this.id = 0;
	this.next = null;
	this.count = 0;
	this.cbTypes = null;
	this.cbTypes = new ZNPList_ZPP_CbType();
	this.listeners = new ZNPList_ZPP_InteractionListener();
	this.zip_listeners = true;
	this.bodylisteners = new ZNPList_ZPP_BodyListener();
	this.zip_bodylisteners = true;
	this.conlisteners = new ZNPList_ZPP_ConstraintListener();
	this.zip_conlisteners = true;
	this.constraints = new ZNPList_ZPP_Constraint();
	this.interactors = new ZNPList_ZPP_Interactor();
	this.id = zpp_nape.ZPP_ID.CbSet();
	this.cbpairs = new ZNPList_ZPP_CbSetPair();
};
ZPP_CbSet.__name__ = ["zpp_nape","callbacks","ZPP_CbSet"];
ZPP_CbSet.setlt = function(a,b) {
	var i = a.cbTypes.head;
	var j = b.cbTypes.head;
	while(i != null && j != null) {
		var ca = i.elt;
		var cb = j.elt;
		if(ca.id < cb.id) {
			return true;
		}
		if(cb.id < ca.id) {
			return false;
		} else {
			i = i.next;
			j = j.next;
		}
	}
	if(j != null) {
		return i == null;
	} else {
		return false;
	}
};
ZPP_CbSet.get = function(cbTypes) {
	var ret;
	if(ZPP_CbSet.zpp_pool == null) {
		ret = new ZPP_CbSet();
	} else {
		ret = ZPP_CbSet.zpp_pool;
		ZPP_CbSet.zpp_pool = ret.next;
		ret.next = null;
	}
	var ite = null;
	var cx_ite = cbTypes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		ite = ret.cbTypes.insert(ite,cb);
		cb.cbsets.add(ret);
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZPP_CbSet.compatible = function(i,a,b) {
	var tmp;
	var _this = i.options1;
	var xs = a.cbTypes;
	if(_this.nonemptyintersection(xs,_this.includes) && !_this.nonemptyintersection(xs,_this.excludes)) {
		var _this1 = i.options2;
		var xs1 = b.cbTypes;
		if(_this1.nonemptyintersection(xs1,_this1.includes)) {
			tmp = !_this1.nonemptyintersection(xs1,_this1.excludes);
		} else {
			tmp = false;
		}
	} else {
		tmp = false;
	}
	if(!tmp) {
		var _this2 = i.options2;
		var xs2 = a.cbTypes;
		if(_this2.nonemptyintersection(xs2,_this2.includes) && !_this2.nonemptyintersection(xs2,_this2.excludes)) {
			var _this3 = i.options1;
			var xs3 = b.cbTypes;
			if(_this3.nonemptyintersection(xs3,_this3.includes)) {
				return !_this3.nonemptyintersection(xs3,_this3.excludes);
			} else {
				return false;
			}
		} else {
			return false;
		}
	} else {
		return true;
	}
};
ZPP_CbSet.empty_intersection = function(a,b) {
	var ret = null;
	var cx_ite = (a.cbpairs.length < b.cbpairs.length?a.cbpairs:b.cbpairs).head;
	while(cx_ite != null) {
		var p = cx_ite.elt;
		if(p.a == a && p.b == b || p.a == b && p.b == a) {
			ret = p;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret == null) {
		var ret1;
		if(ZPP_CbSetPair.zpp_pool == null) {
			ret1 = new ZPP_CbSetPair();
		} else {
			ret1 = ZPP_CbSetPair.zpp_pool;
			ZPP_CbSetPair.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.zip_listeners = true;
		if(ZPP_CbSet.setlt(a,b)) {
			ret1.a = a;
			ret1.b = b;
		} else {
			ret1.a = b;
			ret1.b = a;
		}
		ret = ret1;
		a.cbpairs.add(ret);
		if(b != a) {
			b.cbpairs.add(ret);
		}
	}
	if(ret.zip_listeners) {
		ret.zip_listeners = false;
		ret.__validate();
	}
	return ret.listeners.head == null;
};
ZPP_CbSet.single_intersection = function(a,b,i) {
	var ret = null;
	var cx_ite = (a.cbpairs.length < b.cbpairs.length?a.cbpairs:b.cbpairs).head;
	while(cx_ite != null) {
		var p = cx_ite.elt;
		if(p.a == a && p.b == b || p.a == b && p.b == a) {
			ret = p;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret == null) {
		var ret1;
		if(ZPP_CbSetPair.zpp_pool == null) {
			ret1 = new ZPP_CbSetPair();
		} else {
			ret1 = ZPP_CbSetPair.zpp_pool;
			ZPP_CbSetPair.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.zip_listeners = true;
		if(ZPP_CbSet.setlt(a,b)) {
			ret1.a = a;
			ret1.b = b;
		} else {
			ret1.a = b;
			ret1.b = a;
		}
		ret = ret1;
		a.cbpairs.add(ret);
		if(b != a) {
			b.cbpairs.add(ret);
		}
	}
	if(ret.zip_listeners) {
		ret.zip_listeners = false;
		ret.__validate();
	}
	var ite = ret.listeners.head;
	if(ite != null && ite.elt == i) {
		return ite.next == null;
	} else {
		return false;
	}
};
ZPP_CbSet.find_all = function(a,b,event,cb) {
	var ret = null;
	var cx_ite = (a.cbpairs.length < b.cbpairs.length?a.cbpairs:b.cbpairs).head;
	while(cx_ite != null) {
		var p = cx_ite.elt;
		if(p.a == a && p.b == b || p.a == b && p.b == a) {
			ret = p;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret == null) {
		var ret1;
		if(ZPP_CbSetPair.zpp_pool == null) {
			ret1 = new ZPP_CbSetPair();
		} else {
			ret1 = ZPP_CbSetPair.zpp_pool;
			ZPP_CbSetPair.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.zip_listeners = true;
		if(ZPP_CbSet.setlt(a,b)) {
			ret1.a = a;
			ret1.b = b;
		} else {
			ret1.a = b;
			ret1.b = a;
		}
		ret = ret1;
		a.cbpairs.add(ret);
		if(b != a) {
			b.cbpairs.add(ret);
		}
	}
	if(ret.zip_listeners) {
		ret.zip_listeners = false;
		ret.__validate();
	}
	var cx_ite1 = ret.listeners.head;
	while(cx_ite1 != null) {
		var x = cx_ite1.elt;
		if(x.event == event) {
			cb(x);
		}
		cx_ite1 = cx_ite1.next;
	}
};
ZPP_CbSet.prototype.cbTypes = null;
ZPP_CbSet.prototype.count = null;
ZPP_CbSet.prototype.next = null;
ZPP_CbSet.prototype.id = null;
ZPP_CbSet.prototype.manager = null;
ZPP_CbSet.prototype.cbpairs = null;
ZPP_CbSet.prototype.increment = function() {
	this.count++;
};
ZPP_CbSet.prototype.decrement = function() {
	return --this.count == 0;
};
ZPP_CbSet.prototype.invalidate_pairs = function() {
	var cx_ite = this.cbpairs.head;
	while(cx_ite != null) {
		cx_ite.elt.zip_listeners = true;
		cx_ite = cx_ite.next;
	}
};
ZPP_CbSet.prototype.listeners = null;
ZPP_CbSet.prototype.zip_listeners = null;
ZPP_CbSet.prototype.invalidate_listeners = function() {
	this.zip_listeners = true;
	this.invalidate_pairs();
};
ZPP_CbSet.prototype.validate_listeners = function() {
	if(this.zip_listeners) {
		this.zip_listeners = false;
		this.realvalidate_listeners();
	}
};
ZPP_CbSet.prototype.realvalidate_listeners = function() {
	this.listeners.clear();
	var cx_ite = this.cbTypes.head;
	while(cx_ite != null) {
		var npre = null;
		var nite = this.listeners.head;
		var cite = cx_ite.elt.listeners.head;
		while(cite != null) {
			var cx = cite.elt;
			if(nite != null && nite.elt == cx) {
				cite = cite.next;
				npre = nite;
				nite = nite.next;
			} else {
				var tmp;
				if(nite != null) {
					var b = nite.elt;
					if(cx.precedence <= b.precedence) {
						if(cx.precedence == b.precedence) {
							tmp = cx.id > b.id;
						} else {
							tmp = false;
						}
					} else {
						tmp = true;
					}
				} else {
					tmp = true;
				}
				if(tmp) {
					if(cx.space == this.manager.space) {
						var _this = this.listeners;
						var ret;
						if(ZNPNode_ZPP_InteractionListener.zpp_pool == null) {
							ret = new ZNPNode_ZPP_InteractionListener();
						} else {
							ret = ZNPNode_ZPP_InteractionListener.zpp_pool;
							ZNPNode_ZPP_InteractionListener.zpp_pool = ret.next;
							ret.next = null;
						}
						ret.elt = cx;
						var temp = ret;
						if(npre == null) {
							temp.next = _this.head;
							_this.head = temp;
						} else {
							temp.next = npre.next;
							npre.next = temp;
						}
						_this.pushmod = _this.modified = true;
						_this.length++;
						npre = temp;
					}
					cite = cite.next;
				} else {
					npre = nite;
					nite = nite.next;
				}
			}
		}
		cx_ite = cx_ite.next;
	}
};
ZPP_CbSet.prototype.bodylisteners = null;
ZPP_CbSet.prototype.zip_bodylisteners = null;
ZPP_CbSet.prototype.invalidate_bodylisteners = function() {
	this.zip_bodylisteners = true;
};
ZPP_CbSet.prototype.validate_bodylisteners = function() {
	if(this.zip_bodylisteners) {
		this.zip_bodylisteners = false;
		this.realvalidate_bodylisteners();
	}
};
ZPP_CbSet.prototype.realvalidate_bodylisteners = function() {
	this.bodylisteners.clear();
	var cx_ite = this.cbTypes.head;
	while(cx_ite != null) {
		var npre = null;
		var nite = this.bodylisteners.head;
		var cite = cx_ite.elt.bodylisteners.head;
		while(cite != null) {
			var cx = cite.elt;
			if(nite != null && nite.elt == cx) {
				cite = cite.next;
				npre = nite;
				nite = nite.next;
			} else {
				var tmp;
				if(nite != null) {
					var b = nite.elt;
					if(cx.precedence <= b.precedence) {
						if(cx.precedence == b.precedence) {
							tmp = cx.id > b.id;
						} else {
							tmp = false;
						}
					} else {
						tmp = true;
					}
				} else {
					tmp = true;
				}
				if(tmp) {
					var tmp1;
					var _this = cx.options;
					if(!_this.nonemptyintersection(this.cbTypes,_this.excludes)) {
						tmp1 = cx.space == this.manager.space;
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						var _this1 = this.bodylisteners;
						var ret;
						if(ZNPNode_ZPP_BodyListener.zpp_pool == null) {
							ret = new ZNPNode_ZPP_BodyListener();
						} else {
							ret = ZNPNode_ZPP_BodyListener.zpp_pool;
							ZNPNode_ZPP_BodyListener.zpp_pool = ret.next;
							ret.next = null;
						}
						ret.elt = cx;
						var temp = ret;
						if(npre == null) {
							temp.next = _this1.head;
							_this1.head = temp;
						} else {
							temp.next = npre.next;
							npre.next = temp;
						}
						_this1.pushmod = _this1.modified = true;
						_this1.length++;
						npre = temp;
					}
					cite = cite.next;
				} else {
					npre = nite;
					nite = nite.next;
				}
			}
		}
		cx_ite = cx_ite.next;
	}
};
ZPP_CbSet.prototype.conlisteners = null;
ZPP_CbSet.prototype.zip_conlisteners = null;
ZPP_CbSet.prototype.invalidate_conlisteners = function() {
	this.zip_conlisteners = true;
};
ZPP_CbSet.prototype.validate_conlisteners = function() {
	if(this.zip_conlisteners) {
		this.zip_conlisteners = false;
		this.realvalidate_conlisteners();
	}
};
ZPP_CbSet.prototype.realvalidate_conlisteners = function() {
	this.conlisteners.clear();
	var cx_ite = this.cbTypes.head;
	while(cx_ite != null) {
		var npre = null;
		var nite = this.conlisteners.head;
		var cite = cx_ite.elt.conlisteners.head;
		while(cite != null) {
			var cx = cite.elt;
			if(nite != null && nite.elt == cx) {
				cite = cite.next;
				npre = nite;
				nite = nite.next;
			} else {
				var tmp;
				if(nite != null) {
					var b = nite.elt;
					if(cx.precedence <= b.precedence) {
						if(cx.precedence == b.precedence) {
							tmp = cx.id > b.id;
						} else {
							tmp = false;
						}
					} else {
						tmp = true;
					}
				} else {
					tmp = true;
				}
				if(tmp) {
					var tmp1;
					var _this = cx.options;
					if(!_this.nonemptyintersection(this.cbTypes,_this.excludes)) {
						tmp1 = cx.space == this.manager.space;
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						var _this1 = this.conlisteners;
						var ret;
						if(ZNPNode_ZPP_ConstraintListener.zpp_pool == null) {
							ret = new ZNPNode_ZPP_ConstraintListener();
						} else {
							ret = ZNPNode_ZPP_ConstraintListener.zpp_pool;
							ZNPNode_ZPP_ConstraintListener.zpp_pool = ret.next;
							ret.next = null;
						}
						ret.elt = cx;
						var temp = ret;
						if(npre == null) {
							temp.next = _this1.head;
							_this1.head = temp;
						} else {
							temp.next = npre.next;
							npre.next = temp;
						}
						_this1.pushmod = _this1.modified = true;
						_this1.length++;
						npre = temp;
					}
					cite = cite.next;
				} else {
					npre = nite;
					nite = nite.next;
				}
			}
		}
		cx_ite = cx_ite.next;
	}
};
ZPP_CbSet.prototype.validate = function() {
	if(this.zip_listeners) {
		this.zip_listeners = false;
		this.realvalidate_listeners();
	}
	if(this.zip_bodylisteners) {
		this.zip_bodylisteners = false;
		this.realvalidate_bodylisteners();
	}
	if(this.zip_conlisteners) {
		this.zip_conlisteners = false;
		this.realvalidate_conlisteners();
	}
};
ZPP_CbSet.prototype.interactors = null;
ZPP_CbSet.prototype.wrap_interactors = null;
ZPP_CbSet.prototype.constraints = null;
ZPP_CbSet.prototype.wrap_constraints = null;
ZPP_CbSet.prototype.addConstraint = function(con) {
	this.constraints.add(con);
};
ZPP_CbSet.prototype.addInteractor = function(intx) {
	this.interactors.add(intx);
};
ZPP_CbSet.prototype.remConstraint = function(con) {
	this.constraints.remove(con);
};
ZPP_CbSet.prototype.remInteractor = function(intx) {
	this.interactors.remove(intx);
};
ZPP_CbSet.prototype.free = function() {
	this.listeners.clear();
	this.zip_listeners = true;
	this.bodylisteners.clear();
	this.zip_bodylisteners = true;
	this.conlisteners.clear();
	this.zip_conlisteners = true;
	while(this.cbTypes.head != null) this.cbTypes.pop_unsafe().cbsets.remove(this);
};
ZPP_CbSet.prototype.alloc = function() {
};
ZPP_CbSet.prototype.__class__ = ZPP_CbSet;
var ZPP_CbSetPair = zpp_nape.callbacks.ZPP_CbSetPair = function() {
	this.listeners = null;
	this.zip_listeners = false;
	this.next = null;
	this.b = null;
	this.a = null;
	this.listeners = new ZNPList_ZPP_InteractionListener();
};
ZPP_CbSetPair.__name__ = ["zpp_nape","callbacks","ZPP_CbSetPair"];
ZPP_CbSetPair.get = function(a,b) {
	var ret;
	if(ZPP_CbSetPair.zpp_pool == null) {
		ret = new ZPP_CbSetPair();
	} else {
		ret = ZPP_CbSetPair.zpp_pool;
		ZPP_CbSetPair.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.zip_listeners = true;
	if(ZPP_CbSet.setlt(a,b)) {
		ret.a = a;
		ret.b = b;
	} else {
		ret.a = b;
		ret.b = a;
	}
	return ret;
};
ZPP_CbSetPair.setlt = function(x,y) {
	if(!ZPP_CbSet.setlt(x.a,y.a)) {
		if(x.a == y.a) {
			return ZPP_CbSet.setlt(x.b,y.b);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
ZPP_CbSetPair.prototype.a = null;
ZPP_CbSetPair.prototype.b = null;
ZPP_CbSetPair.prototype.next = null;
ZPP_CbSetPair.prototype.free = function() {
	this.a = this.b = null;
	this.listeners.clear();
};
ZPP_CbSetPair.prototype.alloc = function() {
	this.zip_listeners = true;
};
ZPP_CbSetPair.prototype.compatible = function(i) {
	var tmp;
	var _this = i.options1;
	var xs = this.a.cbTypes;
	if(_this.nonemptyintersection(xs,_this.includes) && !_this.nonemptyintersection(xs,_this.excludes)) {
		var _this1 = i.options2;
		var xs1 = this.b.cbTypes;
		if(_this1.nonemptyintersection(xs1,_this1.includes)) {
			tmp = !_this1.nonemptyintersection(xs1,_this1.excludes);
		} else {
			tmp = false;
		}
	} else {
		tmp = false;
	}
	if(!tmp) {
		var _this2 = i.options2;
		var xs2 = this.a.cbTypes;
		if(_this2.nonemptyintersection(xs2,_this2.includes) && !_this2.nonemptyintersection(xs2,_this2.excludes)) {
			var _this3 = i.options1;
			var xs3 = this.b.cbTypes;
			if(_this3.nonemptyintersection(xs3,_this3.includes)) {
				return !_this3.nonemptyintersection(xs3,_this3.excludes);
			} else {
				return false;
			}
		} else {
			return false;
		}
	} else {
		return true;
	}
};
ZPP_CbSetPair.prototype.zip_listeners = null;
ZPP_CbSetPair.prototype.listeners = null;
ZPP_CbSetPair.prototype.invalidate = function() {
	this.zip_listeners = true;
};
ZPP_CbSetPair.prototype.validate = function() {
	if(this.zip_listeners) {
		this.zip_listeners = false;
		this.__validate();
	}
};
ZPP_CbSetPair.prototype.__validate = function() {
	this.listeners.clear();
	var aite = this.a.listeners.head;
	var bite = this.b.listeners.head;
	while(aite != null && bite != null) {
		var ax = aite.elt;
		var bx = bite.elt;
		if(ax == bx) {
			var tmp;
			var tmp1;
			var _this = ax.options1;
			var xs = this.a.cbTypes;
			if(_this.nonemptyintersection(xs,_this.includes) && !_this.nonemptyintersection(xs,_this.excludes)) {
				var _this1 = ax.options2;
				var xs1 = this.b.cbTypes;
				if(_this1.nonemptyintersection(xs1,_this1.includes)) {
					tmp1 = !_this1.nonemptyintersection(xs1,_this1.excludes);
				} else {
					tmp1 = false;
				}
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				var _this2 = ax.options2;
				var xs2 = this.a.cbTypes;
				if(_this2.nonemptyintersection(xs2,_this2.includes) && !_this2.nonemptyintersection(xs2,_this2.excludes)) {
					var _this3 = ax.options1;
					var xs3 = this.b.cbTypes;
					if(_this3.nonemptyintersection(xs3,_this3.includes)) {
						tmp = !_this3.nonemptyintersection(xs3,_this3.excludes);
					} else {
						tmp = false;
					}
				} else {
					tmp = false;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				this.listeners.add(ax);
			}
			aite = aite.next;
			bite = bite.next;
		} else if(ax.precedence > bx.precedence || ax.precedence == bx.precedence && ax.id > bx.id) {
			aite = aite.next;
		} else {
			bite = bite.next;
		}
	}
};
ZPP_CbSetPair.prototype.empty_intersection = function() {
	return this.listeners.head == null;
};
ZPP_CbSetPair.prototype.single_intersection = function(i) {
	var ite = this.listeners.head;
	if(ite != null && ite.elt == i) {
		return ite.next == null;
	} else {
		return false;
	}
};
ZPP_CbSetPair.prototype.forall = function(event,cb) {
	var cx_ite = this.listeners.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x.event == event) {
			cb(x);
		}
		cx_ite = cx_ite.next;
	}
};
ZPP_CbSetPair.prototype.__class__ = ZPP_CbSetPair;
var ZNPList_ZPP_InteractionListener = zpp_nape.util.ZNPList_ZPP_InteractionListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_InteractionListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_InteractionListener"];
ZNPList_ZPP_InteractionListener.prototype.head = null;
ZNPList_ZPP_InteractionListener.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_InteractionListener.prototype.modified = null;
ZNPList_ZPP_InteractionListener.prototype.pushmod = null;
ZNPList_ZPP_InteractionListener.prototype.length = null;
ZNPList_ZPP_InteractionListener.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_InteractionListener.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_InteractionListener.zpp_pool == null) {
		ret = new ZNPNode_ZPP_InteractionListener();
	} else {
		ret = ZNPNode_ZPP_InteractionListener.zpp_pool;
		ZNPNode_ZPP_InteractionListener.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_InteractionListener.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_InteractionListener.zpp_pool == null) {
		ret = new ZNPNode_ZPP_InteractionListener();
	} else {
		ret = ZNPNode_ZPP_InteractionListener.zpp_pool;
		ZNPNode_ZPP_InteractionListener.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_InteractionListener.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_InteractionListener.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_InteractionListener.zpp_pool == null) {
		ret = new ZNPNode_ZPP_InteractionListener();
	} else {
		ret = ZNPNode_ZPP_InteractionListener.zpp_pool;
		ZNPNode_ZPP_InteractionListener.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_InteractionListener.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_InteractionListener.zpp_pool == null) {
		ret = new ZNPNode_ZPP_InteractionListener();
	} else {
		ret = ZNPNode_ZPP_InteractionListener.zpp_pool;
		ZNPNode_ZPP_InteractionListener.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_InteractionListener.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_InteractionListener.zpp_pool;
	ZNPNode_ZPP_InteractionListener.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_InteractionListener.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_InteractionListener.zpp_pool;
	ZNPNode_ZPP_InteractionListener.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_InteractionListener.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_InteractionListener.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_InteractionListener.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_InteractionListener.zpp_pool;
			ZNPNode_ZPP_InteractionListener.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_InteractionListener.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_InteractionListener.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_InteractionListener.zpp_pool;
			ZNPNode_ZPP_InteractionListener.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_InteractionListener.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_InteractionListener.zpp_pool;
			ZNPNode_ZPP_InteractionListener.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_InteractionListener.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_InteractionListener.zpp_pool;
	ZNPNode_ZPP_InteractionListener.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_InteractionListener.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_InteractionListener.zpp_pool;
	ZNPNode_ZPP_InteractionListener.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_InteractionListener.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_InteractionListener.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_InteractionListener.zpp_pool;
		ZNPNode_ZPP_InteractionListener.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_InteractionListener.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_InteractionListener.zpp_pool;
		ZNPNode_ZPP_InteractionListener.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_InteractionListener.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_InteractionListener.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_InteractionListener.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_InteractionListener.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_InteractionListener.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_InteractionListener.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_InteractionListener.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_InteractionListener.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_InteractionListener.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_InteractionListener.prototype.__class__ = ZNPList_ZPP_InteractionListener;
var ZNPList_ZPP_BodyListener = zpp_nape.util.ZNPList_ZPP_BodyListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_BodyListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_BodyListener"];
ZNPList_ZPP_BodyListener.prototype.head = null;
ZNPList_ZPP_BodyListener.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_BodyListener.prototype.modified = null;
ZNPList_ZPP_BodyListener.prototype.pushmod = null;
ZNPList_ZPP_BodyListener.prototype.length = null;
ZNPList_ZPP_BodyListener.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_BodyListener.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_BodyListener.zpp_pool == null) {
		ret = new ZNPNode_ZPP_BodyListener();
	} else {
		ret = ZNPNode_ZPP_BodyListener.zpp_pool;
		ZNPNode_ZPP_BodyListener.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_BodyListener.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_BodyListener.zpp_pool == null) {
		ret = new ZNPNode_ZPP_BodyListener();
	} else {
		ret = ZNPNode_ZPP_BodyListener.zpp_pool;
		ZNPNode_ZPP_BodyListener.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_BodyListener.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_BodyListener.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_BodyListener.zpp_pool == null) {
		ret = new ZNPNode_ZPP_BodyListener();
	} else {
		ret = ZNPNode_ZPP_BodyListener.zpp_pool;
		ZNPNode_ZPP_BodyListener.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_BodyListener.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_BodyListener.zpp_pool == null) {
		ret = new ZNPNode_ZPP_BodyListener();
	} else {
		ret = ZNPNode_ZPP_BodyListener.zpp_pool;
		ZNPNode_ZPP_BodyListener.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_BodyListener.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_BodyListener.zpp_pool;
	ZNPNode_ZPP_BodyListener.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_BodyListener.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_BodyListener.zpp_pool;
	ZNPNode_ZPP_BodyListener.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_BodyListener.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_BodyListener.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_BodyListener.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_BodyListener.zpp_pool;
			ZNPNode_ZPP_BodyListener.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_BodyListener.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_BodyListener.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_BodyListener.zpp_pool;
			ZNPNode_ZPP_BodyListener.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_BodyListener.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_BodyListener.zpp_pool;
			ZNPNode_ZPP_BodyListener.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_BodyListener.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_BodyListener.zpp_pool;
	ZNPNode_ZPP_BodyListener.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_BodyListener.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_BodyListener.zpp_pool;
	ZNPNode_ZPP_BodyListener.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_BodyListener.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_BodyListener.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_BodyListener.zpp_pool;
		ZNPNode_ZPP_BodyListener.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_BodyListener.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_BodyListener.zpp_pool;
		ZNPNode_ZPP_BodyListener.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_BodyListener.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_BodyListener.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_BodyListener.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_BodyListener.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_BodyListener.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_BodyListener.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_BodyListener.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_BodyListener.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_BodyListener.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_BodyListener.prototype.__class__ = ZNPList_ZPP_BodyListener;
var ZNPList_ZPP_ConstraintListener = zpp_nape.util.ZNPList_ZPP_ConstraintListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_ConstraintListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_ConstraintListener"];
ZNPList_ZPP_ConstraintListener.prototype.head = null;
ZNPList_ZPP_ConstraintListener.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_ConstraintListener.prototype.modified = null;
ZNPList_ZPP_ConstraintListener.prototype.pushmod = null;
ZNPList_ZPP_ConstraintListener.prototype.length = null;
ZNPList_ZPP_ConstraintListener.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_ConstraintListener.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_ConstraintListener.zpp_pool == null) {
		ret = new ZNPNode_ZPP_ConstraintListener();
	} else {
		ret = ZNPNode_ZPP_ConstraintListener.zpp_pool;
		ZNPNode_ZPP_ConstraintListener.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_ConstraintListener.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_ConstraintListener.zpp_pool == null) {
		ret = new ZNPNode_ZPP_ConstraintListener();
	} else {
		ret = ZNPNode_ZPP_ConstraintListener.zpp_pool;
		ZNPNode_ZPP_ConstraintListener.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_ConstraintListener.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_ConstraintListener.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_ConstraintListener.zpp_pool == null) {
		ret = new ZNPNode_ZPP_ConstraintListener();
	} else {
		ret = ZNPNode_ZPP_ConstraintListener.zpp_pool;
		ZNPNode_ZPP_ConstraintListener.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_ConstraintListener.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_ConstraintListener.zpp_pool == null) {
		ret = new ZNPNode_ZPP_ConstraintListener();
	} else {
		ret = ZNPNode_ZPP_ConstraintListener.zpp_pool;
		ZNPNode_ZPP_ConstraintListener.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_ConstraintListener.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_ConstraintListener.zpp_pool;
	ZNPNode_ZPP_ConstraintListener.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_ConstraintListener.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_ConstraintListener.zpp_pool;
	ZNPNode_ZPP_ConstraintListener.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_ConstraintListener.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_ConstraintListener.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_ConstraintListener.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_ConstraintListener.zpp_pool;
			ZNPNode_ZPP_ConstraintListener.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_ConstraintListener.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_ConstraintListener.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_ConstraintListener.zpp_pool;
			ZNPNode_ZPP_ConstraintListener.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_ConstraintListener.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_ConstraintListener.zpp_pool;
			ZNPNode_ZPP_ConstraintListener.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_ConstraintListener.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_ConstraintListener.zpp_pool;
	ZNPNode_ZPP_ConstraintListener.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_ConstraintListener.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_ConstraintListener.zpp_pool;
	ZNPNode_ZPP_ConstraintListener.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_ConstraintListener.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_ConstraintListener.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_ConstraintListener.zpp_pool;
		ZNPNode_ZPP_ConstraintListener.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_ConstraintListener.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_ConstraintListener.zpp_pool;
		ZNPNode_ZPP_ConstraintListener.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_ConstraintListener.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_ConstraintListener.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_ConstraintListener.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_ConstraintListener.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_ConstraintListener.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_ConstraintListener.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_ConstraintListener.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_ConstraintListener.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_ConstraintListener.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_ConstraintListener.prototype.__class__ = ZNPList_ZPP_ConstraintListener;
var ZNPList_ZPP_Constraint = zpp_nape.util.ZNPList_ZPP_Constraint = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_Constraint.__name__ = ["zpp_nape","util","ZNPList_ZPP_Constraint"];
ZNPList_ZPP_Constraint.prototype.head = null;
ZNPList_ZPP_Constraint.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_Constraint.prototype.modified = null;
ZNPList_ZPP_Constraint.prototype.pushmod = null;
ZNPList_ZPP_Constraint.prototype.length = null;
ZNPList_ZPP_Constraint.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_Constraint.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_Constraint.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Constraint();
	} else {
		ret = ZNPNode_ZPP_Constraint.zpp_pool;
		ZNPNode_ZPP_Constraint.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_Constraint.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_Constraint.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Constraint();
	} else {
		ret = ZNPNode_ZPP_Constraint.zpp_pool;
		ZNPNode_ZPP_Constraint.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_Constraint.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_Constraint.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_Constraint.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Constraint();
	} else {
		ret = ZNPNode_ZPP_Constraint.zpp_pool;
		ZNPNode_ZPP_Constraint.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_Constraint.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_Constraint.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Constraint();
	} else {
		ret = ZNPNode_ZPP_Constraint.zpp_pool;
		ZNPNode_ZPP_Constraint.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_Constraint.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_Constraint.zpp_pool;
	ZNPNode_ZPP_Constraint.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_Constraint.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_Constraint.zpp_pool;
	ZNPNode_ZPP_Constraint.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_Constraint.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_Constraint.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_Constraint.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Constraint.zpp_pool;
			ZNPNode_ZPP_Constraint.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_Constraint.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_Constraint.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Constraint.zpp_pool;
			ZNPNode_ZPP_Constraint.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_Constraint.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Constraint.zpp_pool;
			ZNPNode_ZPP_Constraint.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_Constraint.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_Constraint.zpp_pool;
	ZNPNode_ZPP_Constraint.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_Constraint.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_Constraint.zpp_pool;
	ZNPNode_ZPP_Constraint.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_Constraint.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_Constraint.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Constraint.zpp_pool;
		ZNPNode_ZPP_Constraint.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_Constraint.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Constraint.zpp_pool;
		ZNPNode_ZPP_Constraint.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_Constraint.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_Constraint.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_Constraint.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_Constraint.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_Constraint.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_Constraint.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_Constraint.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_Constraint.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_Constraint.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_Constraint.prototype.__class__ = ZNPList_ZPP_Constraint;
var ZNPList_ZPP_Interactor = zpp_nape.util.ZNPList_ZPP_Interactor = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_Interactor.__name__ = ["zpp_nape","util","ZNPList_ZPP_Interactor"];
ZNPList_ZPP_Interactor.prototype.head = null;
ZNPList_ZPP_Interactor.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_Interactor.prototype.modified = null;
ZNPList_ZPP_Interactor.prototype.pushmod = null;
ZNPList_ZPP_Interactor.prototype.length = null;
ZNPList_ZPP_Interactor.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_Interactor.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Interactor();
	} else {
		ret = ZNPNode_ZPP_Interactor.zpp_pool;
		ZNPNode_ZPP_Interactor.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_Interactor.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Interactor();
	} else {
		ret = ZNPNode_ZPP_Interactor.zpp_pool;
		ZNPNode_ZPP_Interactor.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_Interactor.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_Interactor.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Interactor();
	} else {
		ret = ZNPNode_ZPP_Interactor.zpp_pool;
		ZNPNode_ZPP_Interactor.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_Interactor.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Interactor();
	} else {
		ret = ZNPNode_ZPP_Interactor.zpp_pool;
		ZNPNode_ZPP_Interactor.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_Interactor.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_Interactor.zpp_pool;
	ZNPNode_ZPP_Interactor.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_Interactor.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_Interactor.zpp_pool;
	ZNPNode_ZPP_Interactor.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_Interactor.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_Interactor.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_Interactor.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Interactor.zpp_pool;
			ZNPNode_ZPP_Interactor.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_Interactor.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_Interactor.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Interactor.zpp_pool;
			ZNPNode_ZPP_Interactor.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_Interactor.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Interactor.zpp_pool;
			ZNPNode_ZPP_Interactor.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_Interactor.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_Interactor.zpp_pool;
	ZNPNode_ZPP_Interactor.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_Interactor.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_Interactor.zpp_pool;
	ZNPNode_ZPP_Interactor.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_Interactor.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_Interactor.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Interactor.zpp_pool;
		ZNPNode_ZPP_Interactor.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_Interactor.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Interactor.zpp_pool;
		ZNPNode_ZPP_Interactor.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_Interactor.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_Interactor.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_Interactor.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_Interactor.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_Interactor.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_Interactor.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_Interactor.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_Interactor.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_Interactor.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_Interactor.prototype.__class__ = ZNPList_ZPP_Interactor;
var ZNPList_ZPP_CbSet = zpp_nape.util.ZNPList_ZPP_CbSet = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_CbSet.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbSet"];
ZNPList_ZPP_CbSet.prototype.head = null;
ZNPList_ZPP_CbSet.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_CbSet.prototype.modified = null;
ZNPList_ZPP_CbSet.prototype.pushmod = null;
ZNPList_ZPP_CbSet.prototype.length = null;
ZNPList_ZPP_CbSet.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_CbSet.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CbSet();
	} else {
		ret = ZNPNode_ZPP_CbSet.zpp_pool;
		ZNPNode_ZPP_CbSet.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_CbSet.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CbSet();
	} else {
		ret = ZNPNode_ZPP_CbSet.zpp_pool;
		ZNPNode_ZPP_CbSet.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_CbSet.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_CbSet.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CbSet();
	} else {
		ret = ZNPNode_ZPP_CbSet.zpp_pool;
		ZNPNode_ZPP_CbSet.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_CbSet.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CbSet();
	} else {
		ret = ZNPNode_ZPP_CbSet.zpp_pool;
		ZNPNode_ZPP_CbSet.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_CbSet.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_CbSet.zpp_pool;
	ZNPNode_ZPP_CbSet.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_CbSet.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_CbSet.zpp_pool;
	ZNPNode_ZPP_CbSet.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_CbSet.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_CbSet.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_CbSet.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_CbSet.zpp_pool;
			ZNPNode_ZPP_CbSet.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_CbSet.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_CbSet.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_CbSet.zpp_pool;
			ZNPNode_ZPP_CbSet.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_CbSet.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_CbSet.zpp_pool;
			ZNPNode_ZPP_CbSet.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_CbSet.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_CbSet.zpp_pool;
	ZNPNode_ZPP_CbSet.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_CbSet.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_CbSet.zpp_pool;
	ZNPNode_ZPP_CbSet.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_CbSet.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_CbSet.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_CbSet.zpp_pool;
		ZNPNode_ZPP_CbSet.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_CbSet.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_CbSet.zpp_pool;
		ZNPNode_ZPP_CbSet.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_CbSet.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_CbSet.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_CbSet.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_CbSet.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_CbSet.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_CbSet.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_CbSet.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_CbSet.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_CbSet.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_CbSet.prototype.__class__ = ZNPList_ZPP_CbSet;
var ZPP_CbType = zpp_nape.callbacks.ZPP_CbType = function() {
	this.conlisteners = null;
	this.bodylisteners = null;
	this.listeners = null;
	this.cbsets = null;
	this.id = 0;
	this.userData = null;
	this.outer = null;
	this.id = zpp_nape.ZPP_ID.CbType();
	this.listeners = new ZNPList_ZPP_InteractionListener();
	this.bodylisteners = new ZNPList_ZPP_BodyListener();
	this.conlisteners = new ZNPList_ZPP_ConstraintListener();
	this.constraints = new ZNPList_ZPP_Constraint();
	this.interactors = new ZNPList_ZPP_Interactor();
	this.cbsets = new ZNPList_ZPP_CbSet();
};
ZPP_CbType.__name__ = ["zpp_nape","callbacks","ZPP_CbType"];
ZPP_CbType.setlt = function(a,b) {
	return a.id < b.id;
};
ZPP_CbType.prototype.outer = null;
ZPP_CbType.prototype.userData = null;
ZPP_CbType.prototype.id = null;
ZPP_CbType.prototype.cbsets = null;
ZPP_CbType.prototype.interactors = null;
ZPP_CbType.prototype.wrap_interactors = null;
ZPP_CbType.prototype.constraints = null;
ZPP_CbType.prototype.wrap_constraints = null;
ZPP_CbType.prototype.addConstraint = function(con) {
	this.constraints.add(con);
};
ZPP_CbType.prototype.addInteractor = function(intx) {
	this.interactors.add(intx);
};
ZPP_CbType.prototype.remConstraint = function(con) {
	this.constraints.remove(con);
};
ZPP_CbType.prototype.remInteractor = function(intx) {
	this.interactors.remove(intx);
};
ZPP_CbType.prototype.listeners = null;
ZPP_CbType.prototype.addint = function(x) {
	var pre = null;
	var cx_ite = this.listeners.head;
	while(cx_ite != null) {
		var j = cx_ite.elt;
		if(x.precedence > j.precedence || x.precedence == j.precedence && x.id > j.id) {
			break;
		}
		pre = cx_ite;
		cx_ite = cx_ite.next;
	}
	var _this = this.listeners;
	var ret;
	if(ZNPNode_ZPP_InteractionListener.zpp_pool == null) {
		ret = new ZNPNode_ZPP_InteractionListener();
	} else {
		ret = ZNPNode_ZPP_InteractionListener.zpp_pool;
		ZNPNode_ZPP_InteractionListener.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = x;
	var temp = ret;
	if(pre == null) {
		temp.next = _this.head;
		_this.head = temp;
	} else {
		temp.next = pre.next;
		pre.next = temp;
	}
	_this.pushmod = _this.modified = true;
	_this.length++;
	var cx_ite1 = this.cbsets.head;
	while(cx_ite1 != null) {
		var cb = cx_ite1.elt;
		cb.zip_listeners = true;
		cb.invalidate_pairs();
		cx_ite1 = cx_ite1.next;
	}
};
ZPP_CbType.prototype.removeint = function(x) {
	this.listeners.remove(x);
	var cx_ite = this.cbsets.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		cb.zip_listeners = true;
		cb.invalidate_pairs();
		cx_ite = cx_ite.next;
	}
};
ZPP_CbType.prototype.invalidateint = function() {
	var cx_ite = this.cbsets.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		cb.zip_listeners = true;
		cb.invalidate_pairs();
		cx_ite = cx_ite.next;
	}
};
ZPP_CbType.prototype.bodylisteners = null;
ZPP_CbType.prototype.addbody = function(x) {
	var pre = null;
	var cx_ite = this.bodylisteners.head;
	while(cx_ite != null) {
		var j = cx_ite.elt;
		if(x.precedence > j.precedence || x.precedence == j.precedence && x.id > j.id) {
			break;
		}
		pre = cx_ite;
		cx_ite = cx_ite.next;
	}
	var _this = this.bodylisteners;
	var ret;
	if(ZNPNode_ZPP_BodyListener.zpp_pool == null) {
		ret = new ZNPNode_ZPP_BodyListener();
	} else {
		ret = ZNPNode_ZPP_BodyListener.zpp_pool;
		ZNPNode_ZPP_BodyListener.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = x;
	var temp = ret;
	if(pre == null) {
		temp.next = _this.head;
		_this.head = temp;
	} else {
		temp.next = pre.next;
		pre.next = temp;
	}
	_this.pushmod = _this.modified = true;
	_this.length++;
	var cx_ite1 = this.cbsets.head;
	while(cx_ite1 != null) {
		cx_ite1.elt.zip_bodylisteners = true;
		cx_ite1 = cx_ite1.next;
	}
};
ZPP_CbType.prototype.removebody = function(x) {
	this.bodylisteners.remove(x);
	var cx_ite = this.cbsets.head;
	while(cx_ite != null) {
		cx_ite.elt.zip_bodylisteners = true;
		cx_ite = cx_ite.next;
	}
};
ZPP_CbType.prototype.invalidatebody = function() {
	var cx_ite = this.cbsets.head;
	while(cx_ite != null) {
		cx_ite.elt.zip_bodylisteners = true;
		cx_ite = cx_ite.next;
	}
};
ZPP_CbType.prototype.conlisteners = null;
ZPP_CbType.prototype.addconstraint = function(x) {
	var pre = null;
	var cx_ite = this.conlisteners.head;
	while(cx_ite != null) {
		var j = cx_ite.elt;
		if(x.precedence > j.precedence || x.precedence == j.precedence && x.id > j.id) {
			break;
		}
		pre = cx_ite;
		cx_ite = cx_ite.next;
	}
	var _this = this.conlisteners;
	var ret;
	if(ZNPNode_ZPP_ConstraintListener.zpp_pool == null) {
		ret = new ZNPNode_ZPP_ConstraintListener();
	} else {
		ret = ZNPNode_ZPP_ConstraintListener.zpp_pool;
		ZNPNode_ZPP_ConstraintListener.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = x;
	var temp = ret;
	if(pre == null) {
		temp.next = _this.head;
		_this.head = temp;
	} else {
		temp.next = pre.next;
		pre.next = temp;
	}
	_this.pushmod = _this.modified = true;
	_this.length++;
	var cx_ite1 = this.cbsets.head;
	while(cx_ite1 != null) {
		cx_ite1.elt.zip_conlisteners = true;
		cx_ite1 = cx_ite1.next;
	}
};
ZPP_CbType.prototype.removeconstraint = function(x) {
	this.conlisteners.remove(x);
	var cx_ite = this.cbsets.head;
	while(cx_ite != null) {
		cx_ite.elt.zip_conlisteners = true;
		cx_ite = cx_ite.next;
	}
};
ZPP_CbType.prototype.invalidateconstraint = function() {
	var cx_ite = this.cbsets.head;
	while(cx_ite != null) {
		cx_ite.elt.zip_conlisteners = true;
		cx_ite = cx_ite.next;
	}
};
ZPP_CbType.prototype.__class__ = ZPP_CbType;
var ZPP_Flags = zpp_nape.util.ZPP_Flags = function() { };
ZPP_Flags.__name__ = ["zpp_nape","util","ZPP_Flags"];
ZPP_Flags.GravMassMode_DEFAULT = null;
ZPP_Flags.GravMassMode_FIXED = null;
ZPP_Flags.GravMassMode_SCALED = null;
ZPP_Flags.InertiaMode_DEFAULT = null;
ZPP_Flags.InertiaMode_FIXED = null;
ZPP_Flags.MassMode_DEFAULT = null;
ZPP_Flags.MassMode_FIXED = null;
ZPP_Flags.BodyType_STATIC = null;
ZPP_Flags.BodyType_DYNAMIC = null;
ZPP_Flags.BodyType_KINEMATIC = null;
ZPP_Flags.ListenerType_BODY = null;
ZPP_Flags.PreFlag_ACCEPT = null;
ZPP_Flags.ListenerType_CONSTRAINT = null;
ZPP_Flags.PreFlag_IGNORE = null;
ZPP_Flags.ListenerType_INTERACTION = null;
ZPP_Flags.PreFlag_ACCEPT_ONCE = null;
ZPP_Flags.ListenerType_PRE = null;
ZPP_Flags.PreFlag_IGNORE_ONCE = null;
ZPP_Flags.CbEvent_BEGIN = null;
ZPP_Flags.InteractionType_COLLISION = null;
ZPP_Flags.CbEvent_ONGOING = null;
ZPP_Flags.InteractionType_SENSOR = null;
ZPP_Flags.CbEvent_END = null;
ZPP_Flags.InteractionType_FLUID = null;
ZPP_Flags.CbEvent_WAKE = null;
ZPP_Flags.InteractionType_ANY = null;
ZPP_Flags.CbEvent_SLEEP = null;
ZPP_Flags.CbEvent_BREAK = null;
ZPP_Flags.CbEvent_PRE = null;
ZPP_Flags.Winding_UNDEFINED = null;
ZPP_Flags.Winding_CLOCKWISE = null;
ZPP_Flags.Winding_ANTICLOCKWISE = null;
ZPP_Flags.ValidationResult_VALID = null;
ZPP_Flags.ValidationResult_DEGENERATE = null;
ZPP_Flags.ValidationResult_CONCAVE = null;
ZPP_Flags.ValidationResult_SELF_INTERSECTING = null;
ZPP_Flags.ShapeType_CIRCLE = null;
ZPP_Flags.ShapeType_POLYGON = null;
ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = null;
ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = null;
ZPP_Flags.ArbiterType_COLLISION = null;
ZPP_Flags.ArbiterType_SENSOR = null;
ZPP_Flags.ArbiterType_FLUID = null;
ZPP_Flags.prototype.__class__ = ZPP_Flags;
var ZPP_Listener = zpp_nape.callbacks.ZPP_Listener = function() {
	this.space = null;
	this.interaction = null;
	this.constraint = null;
	this.body = null;
	this.precedence = 0;
	this.event = 0;
	this.type = 0;
	this.id = 0;
	this.outer = null;
	this.id = zpp_nape.ZPP_ID.Listener();
};
ZPP_Listener.__name__ = ["zpp_nape","callbacks","ZPP_Listener"];
ZPP_Listener.setlt = function(a,b) {
	if(a.precedence <= b.precedence) {
		if(a.precedence == b.precedence) {
			return a.id > b.id;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
ZPP_Listener.prototype.outer = null;
ZPP_Listener.prototype.id = null;
ZPP_Listener.prototype.type = null;
ZPP_Listener.prototype.event = null;
ZPP_Listener.prototype.precedence = null;
ZPP_Listener.prototype.body = null;
ZPP_Listener.prototype.constraint = null;
ZPP_Listener.prototype.interaction = null;
ZPP_Listener.prototype.space = null;
ZPP_Listener.prototype.swapEvent = function(event) {
};
ZPP_Listener.prototype.invalidate_precedence = function() {
};
ZPP_Listener.prototype.addedToSpace = function() {
};
ZPP_Listener.prototype.removedFromSpace = function() {
};
ZPP_Listener.prototype.__class__ = ZPP_Listener;
var ZPP_BodyListener = zpp_nape.callbacks.ZPP_BodyListener = function(options,event,handler) {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
	ZPP_Listener.call(this);
	this.event = event;
	this.handler = handler;
	this.body = this;
	this.type = 0;
	this.options = options.zpp_inner;
};
ZPP_BodyListener.__name__ = ["zpp_nape","callbacks","ZPP_BodyListener"];
ZPP_BodyListener.__super__ = ZPP_Listener;
// for(var k in ZPP_Listener.prototype ) ZPP_BodyListener.prototype[k] = ZPP_Listener.prototype[k];
ZPP_BodyListener.prototype = Object.create(ZPP_Listener.prototype);
ZPP_BodyListener.prototype.outer_zn = null;
ZPP_BodyListener.prototype.options = null;
ZPP_BodyListener.prototype.handler = null;
ZPP_BodyListener.prototype.immutable_options = function() {
	if(this.space != null && this.space.midstep) {
		throw new js._Boot.HaxeError("Error: Cannot change listener type options during space.step()");
	}
};
ZPP_BodyListener.prototype.addedToSpace = function() {
	this.options.handler = $bind(this,this.cbtype_change);
	var cx_ite = this.options.includes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		var pre = null;
		var cx_ite1 = cb.bodylisteners.head;
		while(cx_ite1 != null) {
			var j = cx_ite1.elt;
			if(this.precedence > j.precedence || this.precedence == j.precedence && this.id > j.id) {
				break;
			}
			pre = cx_ite1;
			cx_ite1 = cx_ite1.next;
		}
		var _this = cb.bodylisteners;
		var ret;
		if(ZNPNode_ZPP_BodyListener.zpp_pool == null) {
			ret = new ZNPNode_ZPP_BodyListener();
		} else {
			ret = ZNPNode_ZPP_BodyListener.zpp_pool;
			ZNPNode_ZPP_BodyListener.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = this;
		var temp = ret;
		if(pre == null) {
			temp.next = _this.head;
			_this.head = temp;
		} else {
			temp.next = pre.next;
			pre.next = temp;
		}
		_this.pushmod = _this.modified = true;
		_this.length++;
		var cx_ite2 = cb.cbsets.head;
		while(cx_ite2 != null) {
			cx_ite2.elt.zip_bodylisteners = true;
			cx_ite2 = cx_ite2.next;
		}
		cx_ite = cx_ite.next;
	}
};
ZPP_BodyListener.prototype.removedFromSpace = function() {
	var cx_ite = this.options.includes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		cb.bodylisteners.remove(this);
		var cx_ite1 = cb.cbsets.head;
		while(cx_ite1 != null) {
			cx_ite1.elt.zip_bodylisteners = true;
			cx_ite1 = cx_ite1.next;
		}
		cx_ite = cx_ite.next;
	}
	this.options.handler = null;
};
ZPP_BodyListener.prototype.cbtype_change = function(cb,included,added) {
	this.removedFromSpace();
	var _this = this.options;
	if(included) {
		if(added) {
			var pre = null;
			var cx_ite = _this.includes.head;
			while(cx_ite != null) {
				if(cb.id < cx_ite.elt.id) {
					break;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var _this1 = _this.includes;
			var ret;
			if(ZNPNode_ZPP_CbType.zpp_pool == null) {
				ret = new ZNPNode_ZPP_CbType();
			} else {
				ret = ZNPNode_ZPP_CbType.zpp_pool;
				ZNPNode_ZPP_CbType.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = cb;
			var temp = ret;
			if(pre == null) {
				temp.next = _this1.head;
				_this1.head = temp;
			} else {
				temp.next = pre.next;
				pre.next = temp;
			}
			_this1.pushmod = _this1.modified = true;
			_this1.length++;
		} else {
			_this.includes.remove(cb);
		}
	} else if(added) {
		var pre1 = null;
		var cx_ite1 = _this.excludes.head;
		while(cx_ite1 != null) {
			if(cb.id < cx_ite1.elt.id) {
				break;
			}
			pre1 = cx_ite1;
			cx_ite1 = cx_ite1.next;
		}
		var _this2 = _this.excludes;
		var ret1;
		if(ZNPNode_ZPP_CbType.zpp_pool == null) {
			ret1 = new ZNPNode_ZPP_CbType();
		} else {
			ret1 = ZNPNode_ZPP_CbType.zpp_pool;
			ZNPNode_ZPP_CbType.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.elt = cb;
		var temp1 = ret1;
		if(pre1 == null) {
			temp1.next = _this2.head;
			_this2.head = temp1;
		} else {
			temp1.next = pre1.next;
			pre1.next = temp1;
		}
		_this2.pushmod = _this2.modified = true;
		_this2.length++;
	} else {
		_this.excludes.remove(cb);
	}
	this.addedToSpace();
};
ZPP_BodyListener.prototype.invalidate_precedence = function() {
	if(this.space != null) {
		this.removedFromSpace();
		this.addedToSpace();
	}
};
ZPP_BodyListener.prototype.swapEvent = function(newev) {
	if(newev != 2 && newev != 3) {
		throw new js._Boot.HaxeError("Error: BodyListener event must be either WAKE or SLEEP only");
	}
	this.removedFromSpace();
	this.event = newev;
	this.addedToSpace();
};
ZPP_BodyListener.prototype.__class__ = ZPP_BodyListener;
var ZPP_ConstraintListener = zpp_nape.callbacks.ZPP_ConstraintListener = function(options,event,handler) {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
	ZPP_Listener.call(this);
	this.event = event;
	this.handler = handler;
	this.constraint = this;
	this.type = 1;
	this.options = options.zpp_inner;
};
ZPP_ConstraintListener.__name__ = ["zpp_nape","callbacks","ZPP_ConstraintListener"];
ZPP_ConstraintListener.__super__ = ZPP_Listener;
// for(var k in ZPP_Listener.prototype ) ZPP_ConstraintListener.prototype[k] = ZPP_Listener.prototype[k];
ZPP_ConstraintListener.prototype = Object.create(ZPP_Listener.prototype);
ZPP_ConstraintListener.prototype.outer_zn = null;
ZPP_ConstraintListener.prototype.options = null;
ZPP_ConstraintListener.prototype.handler = null;
ZPP_ConstraintListener.prototype.immutable_options = function() {
	if(this.space != null && this.space.midstep) {
		throw new js._Boot.HaxeError("Error: Cannot change listener type options during space.step()");
	}
};
ZPP_ConstraintListener.prototype.addedToSpace = function() {
	this.options.handler = $bind(this,this.cbtype_change);
	var cx_ite = this.options.includes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		var pre = null;
		var cx_ite1 = cb.conlisteners.head;
		while(cx_ite1 != null) {
			var j = cx_ite1.elt;
			if(this.precedence > j.precedence || this.precedence == j.precedence && this.id > j.id) {
				break;
			}
			pre = cx_ite1;
			cx_ite1 = cx_ite1.next;
		}
		var _this = cb.conlisteners;
		var ret;
		if(ZNPNode_ZPP_ConstraintListener.zpp_pool == null) {
			ret = new ZNPNode_ZPP_ConstraintListener();
		} else {
			ret = ZNPNode_ZPP_ConstraintListener.zpp_pool;
			ZNPNode_ZPP_ConstraintListener.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = this;
		var temp = ret;
		if(pre == null) {
			temp.next = _this.head;
			_this.head = temp;
		} else {
			temp.next = pre.next;
			pre.next = temp;
		}
		_this.pushmod = _this.modified = true;
		_this.length++;
		var cx_ite2 = cb.cbsets.head;
		while(cx_ite2 != null) {
			cx_ite2.elt.zip_conlisteners = true;
			cx_ite2 = cx_ite2.next;
		}
		cx_ite = cx_ite.next;
	}
};
ZPP_ConstraintListener.prototype.removedFromSpace = function() {
	var cx_ite = this.options.includes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		cb.conlisteners.remove(this);
		var cx_ite1 = cb.cbsets.head;
		while(cx_ite1 != null) {
			cx_ite1.elt.zip_conlisteners = true;
			cx_ite1 = cx_ite1.next;
		}
		cx_ite = cx_ite.next;
	}
	this.options.handler = null;
};
ZPP_ConstraintListener.prototype.cbtype_change = function(cb,included,added) {
	this.removedFromSpace();
	var _this = this.options;
	if(included) {
		if(added) {
			var pre = null;
			var cx_ite = _this.includes.head;
			while(cx_ite != null) {
				if(cb.id < cx_ite.elt.id) {
					break;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var _this1 = _this.includes;
			var ret;
			if(ZNPNode_ZPP_CbType.zpp_pool == null) {
				ret = new ZNPNode_ZPP_CbType();
			} else {
				ret = ZNPNode_ZPP_CbType.zpp_pool;
				ZNPNode_ZPP_CbType.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = cb;
			var temp = ret;
			if(pre == null) {
				temp.next = _this1.head;
				_this1.head = temp;
			} else {
				temp.next = pre.next;
				pre.next = temp;
			}
			_this1.pushmod = _this1.modified = true;
			_this1.length++;
		} else {
			_this.includes.remove(cb);
		}
	} else if(added) {
		var pre1 = null;
		var cx_ite1 = _this.excludes.head;
		while(cx_ite1 != null) {
			if(cb.id < cx_ite1.elt.id) {
				break;
			}
			pre1 = cx_ite1;
			cx_ite1 = cx_ite1.next;
		}
		var _this2 = _this.excludes;
		var ret1;
		if(ZNPNode_ZPP_CbType.zpp_pool == null) {
			ret1 = new ZNPNode_ZPP_CbType();
		} else {
			ret1 = ZNPNode_ZPP_CbType.zpp_pool;
			ZNPNode_ZPP_CbType.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.elt = cb;
		var temp1 = ret1;
		if(pre1 == null) {
			temp1.next = _this2.head;
			_this2.head = temp1;
		} else {
			temp1.next = pre1.next;
			pre1.next = temp1;
		}
		_this2.pushmod = _this2.modified = true;
		_this2.length++;
	} else {
		_this.excludes.remove(cb);
	}
	this.addedToSpace();
};
ZPP_ConstraintListener.prototype.invalidate_precedence = function() {
	if(this.space != null) {
		this.removedFromSpace();
		this.addedToSpace();
	}
};
ZPP_ConstraintListener.prototype.swapEvent = function(newev) {
	if(newev != 2 && newev != 3 && newev != 4) {
		throw new js._Boot.HaxeError("Error: ConstraintListener event must be either WAKE or SLEEP only");
	}
	this.removedFromSpace();
	this.event = newev;
	this.addedToSpace();
};
ZPP_ConstraintListener.prototype.__class__ = ZPP_ConstraintListener;
var ZNPList_ZPP_CbType = zpp_nape.util.ZNPList_ZPP_CbType = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_CbType.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbType"];
ZNPList_ZPP_CbType.prototype.head = null;
ZNPList_ZPP_CbType.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_CbType.prototype.modified = null;
ZNPList_ZPP_CbType.prototype.pushmod = null;
ZNPList_ZPP_CbType.prototype.length = null;
ZNPList_ZPP_CbType.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_CbType.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_CbType.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CbType();
	} else {
		ret = ZNPNode_ZPP_CbType.zpp_pool;
		ZNPNode_ZPP_CbType.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_CbType.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_CbType.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CbType();
	} else {
		ret = ZNPNode_ZPP_CbType.zpp_pool;
		ZNPNode_ZPP_CbType.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_CbType.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_CbType.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_CbType.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CbType();
	} else {
		ret = ZNPNode_ZPP_CbType.zpp_pool;
		ZNPNode_ZPP_CbType.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_CbType.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_CbType.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CbType();
	} else {
		ret = ZNPNode_ZPP_CbType.zpp_pool;
		ZNPNode_ZPP_CbType.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_CbType.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_CbType.zpp_pool;
	ZNPNode_ZPP_CbType.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_CbType.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_CbType.zpp_pool;
	ZNPNode_ZPP_CbType.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_CbType.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_CbType.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_CbType.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_CbType.zpp_pool;
			ZNPNode_ZPP_CbType.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_CbType.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_CbType.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_CbType.zpp_pool;
			ZNPNode_ZPP_CbType.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_CbType.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_CbType.zpp_pool;
			ZNPNode_ZPP_CbType.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_CbType.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_CbType.zpp_pool;
	ZNPNode_ZPP_CbType.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_CbType.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_CbType.zpp_pool;
	ZNPNode_ZPP_CbType.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_CbType.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_CbType.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_CbType.zpp_pool;
		ZNPNode_ZPP_CbType.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_CbType.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_CbType.zpp_pool;
		ZNPNode_ZPP_CbType.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_CbType.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_CbType.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_CbType.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_CbType.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_CbType.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_CbType.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_CbType.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_CbType.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_CbType.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_CbType.prototype.__class__ = ZNPList_ZPP_CbType;
var ZPP_InteractionListener = zpp_nape.callbacks.ZPP_InteractionListener = function(options1,options2,event,type) {
	this.handlerp = null;
	this.pure = false;
	this.allowSleepingCallbacks = false;
	this.handleri = null;
	this.options2 = null;
	this.options1 = null;
	this.itype = 0;
	this.outer_znp = null;
	this.outer_zni = null;
	ZPP_Listener.call(this);
	this.type = type;
	this.interaction = this;
	this.event = event;
	this.options1 = options1.zpp_inner;
	this.options2 = options2.zpp_inner;
	this.allowSleepingCallbacks = false;
};
ZPP_InteractionListener.__name__ = ["zpp_nape","callbacks","ZPP_InteractionListener"];
ZPP_InteractionListener.__super__ = ZPP_Listener;
// for(var k in ZPP_Listener.prototype ) ZPP_InteractionListener.prototype[k] = ZPP_Listener.prototype[k];
ZPP_InteractionListener.prototype = Object.create(ZPP_Listener.prototype);
ZPP_InteractionListener.prototype.outer_zni = null;
ZPP_InteractionListener.prototype.outer_znp = null;
ZPP_InteractionListener.prototype.itype = null;
ZPP_InteractionListener.prototype.options1 = null;
ZPP_InteractionListener.prototype.options2 = null;
ZPP_InteractionListener.prototype.handleri = null;
ZPP_InteractionListener.prototype.allowSleepingCallbacks = null;
ZPP_InteractionListener.prototype.pure = null;
ZPP_InteractionListener.prototype.handlerp = null;
ZPP_InteractionListener.prototype.setInteractionType = function(itype) {
	this.itype = itype;
};
ZPP_InteractionListener.prototype.wake = function() {
	var ite1 = this.options1.includes.head;
	var ite2 = this.options2.includes.head;
	while(ite1 != null && ite2 != null) {
		var cb1 = ite1.elt;
		var cb2 = ite2.elt;
		if(cb1 == cb2) {
			var cx_ite = cb1.interactors.head;
			while(cx_ite != null) {
				cx_ite.elt.wake();
				cx_ite = cx_ite.next;
			}
			ite1 = ite1.next;
			ite2 = ite2.next;
		} else if(cb1.id < cb2.id) {
			var cx_ite1 = cb1.interactors.head;
			while(cx_ite1 != null) {
				cx_ite1.elt.wake();
				cx_ite1 = cx_ite1.next;
			}
			ite1 = ite1.next;
		} else {
			var cx_ite2 = cb2.interactors.head;
			while(cx_ite2 != null) {
				cx_ite2.elt.wake();
				cx_ite2 = cx_ite2.next;
			}
			ite2 = ite2.next;
		}
	}
	while(ite1 != null) {
		var cx_ite3 = ite1.elt.interactors.head;
		while(cx_ite3 != null) {
			cx_ite3.elt.wake();
			cx_ite3 = cx_ite3.next;
		}
		ite1 = ite1.next;
	}
	while(ite2 != null) {
		var cx_ite4 = ite2.elt.interactors.head;
		while(cx_ite4 != null) {
			cx_ite4.elt.wake();
			cx_ite4 = cx_ite4.next;
		}
		ite2 = ite2.next;
	}
};
ZPP_InteractionListener.prototype.CbSetset = function(A,B,lambda) {
	var U = ZPP_InteractionListener.UCbSet;
	var V = ZPP_InteractionListener.VCbSet;
	var W = ZPP_InteractionListener.WCbSet;
	var aite = A.head;
	var bite = B.head;
	while(aite != null && bite != null) {
		var a = aite.elt;
		var b = bite.elt;
		if(a == b) {
			var ret;
			if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
				ret = new ZNPNode_ZPP_CbSet();
			} else {
				ret = ZNPNode_ZPP_CbSet.zpp_pool;
				ZNPNode_ZPP_CbSet.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = a;
			var temp = ret;
			temp.next = W.head;
			W.head = temp;
			W.modified = true;
			W.length++;
			aite = aite.next;
			bite = bite.next;
		} else if(ZPP_CbSet.setlt(a,b)) {
			var ret1;
			if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
				ret1 = new ZNPNode_ZPP_CbSet();
			} else {
				ret1 = ZNPNode_ZPP_CbSet.zpp_pool;
				ZNPNode_ZPP_CbSet.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.elt = a;
			var temp1 = ret1;
			temp1.next = U.head;
			U.head = temp1;
			U.modified = true;
			U.length++;
			aite = aite.next;
		} else {
			var ret2;
			if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
				ret2 = new ZNPNode_ZPP_CbSet();
			} else {
				ret2 = ZNPNode_ZPP_CbSet.zpp_pool;
				ZNPNode_ZPP_CbSet.zpp_pool = ret2.next;
				ret2.next = null;
			}
			ret2.elt = b;
			var temp2 = ret2;
			temp2.next = V.head;
			V.head = temp2;
			V.modified = true;
			V.length++;
			bite = bite.next;
		}
	}
	while(aite != null) {
		var o = aite.elt;
		var ret3;
		if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
			ret3 = new ZNPNode_ZPP_CbSet();
		} else {
			ret3 = ZNPNode_ZPP_CbSet.zpp_pool;
			ZNPNode_ZPP_CbSet.zpp_pool = ret3.next;
			ret3.next = null;
		}
		ret3.elt = o;
		var temp3 = ret3;
		temp3.next = U.head;
		U.head = temp3;
		U.modified = true;
		U.length++;
		aite = aite.next;
	}
	while(bite != null) {
		var o1 = bite.elt;
		var ret4;
		if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
			ret4 = new ZNPNode_ZPP_CbSet();
		} else {
			ret4 = ZNPNode_ZPP_CbSet.zpp_pool;
			ZNPNode_ZPP_CbSet.zpp_pool = ret4.next;
			ret4.next = null;
		}
		ret4.elt = o1;
		var temp4 = ret4;
		temp4.next = V.head;
		V.head = temp4;
		V.modified = true;
		V.length++;
		bite = bite.next;
	}
	while(U.head != null) {
		var x = U.pop_unsafe();
		var cx_ite = B.head;
		while(cx_ite != null) {
			lambda(x,cx_ite.elt);
			cx_ite = cx_ite.next;
		}
	}
	while(V.head != null) {
		var x1 = V.pop_unsafe();
		var cx_ite1 = W.head;
		while(cx_ite1 != null) {
			lambda(x1,cx_ite1.elt);
			cx_ite1 = cx_ite1.next;
		}
	}
	while(W.head != null) {
		var x2 = W.pop_unsafe();
		lambda(x2,x2);
		var cx_ite2 = W.head;
		while(cx_ite2 != null) {
			lambda(x2,cx_ite2.elt);
			cx_ite2 = cx_ite2.next;
		}
	}
};
ZPP_InteractionListener.prototype.CbTypeset = function(A,B,lambda) {
	var U = ZPP_InteractionListener.UCbType;
	var V = ZPP_InteractionListener.VCbType;
	var W = ZPP_InteractionListener.WCbType;
	var aite = A.head;
	var bite = B.head;
	while(aite != null && bite != null) {
		var a = aite.elt;
		var b = bite.elt;
		if(a == b) {
			var ret;
			if(ZNPNode_ZPP_CbType.zpp_pool == null) {
				ret = new ZNPNode_ZPP_CbType();
			} else {
				ret = ZNPNode_ZPP_CbType.zpp_pool;
				ZNPNode_ZPP_CbType.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = a;
			var temp = ret;
			temp.next = W.head;
			W.head = temp;
			W.modified = true;
			W.length++;
			aite = aite.next;
			bite = bite.next;
		} else if(a.id < b.id) {
			var ret1;
			if(ZNPNode_ZPP_CbType.zpp_pool == null) {
				ret1 = new ZNPNode_ZPP_CbType();
			} else {
				ret1 = ZNPNode_ZPP_CbType.zpp_pool;
				ZNPNode_ZPP_CbType.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.elt = a;
			var temp1 = ret1;
			temp1.next = U.head;
			U.head = temp1;
			U.modified = true;
			U.length++;
			aite = aite.next;
		} else {
			var ret2;
			if(ZNPNode_ZPP_CbType.zpp_pool == null) {
				ret2 = new ZNPNode_ZPP_CbType();
			} else {
				ret2 = ZNPNode_ZPP_CbType.zpp_pool;
				ZNPNode_ZPP_CbType.zpp_pool = ret2.next;
				ret2.next = null;
			}
			ret2.elt = b;
			var temp2 = ret2;
			temp2.next = V.head;
			V.head = temp2;
			V.modified = true;
			V.length++;
			bite = bite.next;
		}
	}
	while(aite != null) {
		var o = aite.elt;
		var ret3;
		if(ZNPNode_ZPP_CbType.zpp_pool == null) {
			ret3 = new ZNPNode_ZPP_CbType();
		} else {
			ret3 = ZNPNode_ZPP_CbType.zpp_pool;
			ZNPNode_ZPP_CbType.zpp_pool = ret3.next;
			ret3.next = null;
		}
		ret3.elt = o;
		var temp3 = ret3;
		temp3.next = U.head;
		U.head = temp3;
		U.modified = true;
		U.length++;
		aite = aite.next;
	}
	while(bite != null) {
		var o1 = bite.elt;
		var ret4;
		if(ZNPNode_ZPP_CbType.zpp_pool == null) {
			ret4 = new ZNPNode_ZPP_CbType();
		} else {
			ret4 = ZNPNode_ZPP_CbType.zpp_pool;
			ZNPNode_ZPP_CbType.zpp_pool = ret4.next;
			ret4.next = null;
		}
		ret4.elt = o1;
		var temp4 = ret4;
		temp4.next = V.head;
		V.head = temp4;
		V.modified = true;
		V.length++;
		bite = bite.next;
	}
	while(U.head != null) {
		var x = U.pop_unsafe();
		var cx_ite = B.head;
		while(cx_ite != null) {
			lambda(x,cx_ite.elt);
			cx_ite = cx_ite.next;
		}
	}
	while(V.head != null) {
		var x1 = V.pop_unsafe();
		var cx_ite1 = W.head;
		while(cx_ite1 != null) {
			lambda(x1,cx_ite1.elt);
			cx_ite1 = cx_ite1.next;
		}
	}
	while(W.head != null) {
		var x2 = W.pop_unsafe();
		lambda(x2,x2);
		var cx_ite2 = W.head;
		while(cx_ite2 != null) {
			lambda(x2,cx_ite2.elt);
			cx_ite2 = cx_ite2.next;
		}
	}
};
ZPP_InteractionListener.prototype.with_uniquesets = function(fresh) {
	var _gthis = this;
	var set;
	if(ZPP_Set_ZPP_CbSetPair.zpp_pool == null) {
		set = new ZPP_Set_ZPP_CbSetPair();
	} else {
		set = ZPP_Set_ZPP_CbSetPair.zpp_pool;
		ZPP_Set_ZPP_CbSetPair.zpp_pool = set.next;
		set.next = null;
	}
	set.lt = ZPP_CbSetPair.setlt;
	var B = this.options2.includes;
	var U = ZPP_InteractionListener.UCbType;
	var V = ZPP_InteractionListener.VCbType;
	var W = ZPP_InteractionListener.WCbType;
	var aite = this.options1.includes.head;
	var bite = B.head;
	while(aite != null && bite != null) {
		var a = aite.elt;
		var b = bite.elt;
		if(a == b) {
			var ret;
			if(ZNPNode_ZPP_CbType.zpp_pool == null) {
				ret = new ZNPNode_ZPP_CbType();
			} else {
				ret = ZNPNode_ZPP_CbType.zpp_pool;
				ZNPNode_ZPP_CbType.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = a;
			var temp = ret;
			temp.next = W.head;
			W.head = temp;
			W.modified = true;
			W.length++;
			aite = aite.next;
			bite = bite.next;
		} else if(a.id < b.id) {
			var ret1;
			if(ZNPNode_ZPP_CbType.zpp_pool == null) {
				ret1 = new ZNPNode_ZPP_CbType();
			} else {
				ret1 = ZNPNode_ZPP_CbType.zpp_pool;
				ZNPNode_ZPP_CbType.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.elt = a;
			var temp1 = ret1;
			temp1.next = U.head;
			U.head = temp1;
			U.modified = true;
			U.length++;
			aite = aite.next;
		} else {
			var ret2;
			if(ZNPNode_ZPP_CbType.zpp_pool == null) {
				ret2 = new ZNPNode_ZPP_CbType();
			} else {
				ret2 = ZNPNode_ZPP_CbType.zpp_pool;
				ZNPNode_ZPP_CbType.zpp_pool = ret2.next;
				ret2.next = null;
			}
			ret2.elt = b;
			var temp2 = ret2;
			temp2.next = V.head;
			V.head = temp2;
			V.modified = true;
			V.length++;
			bite = bite.next;
		}
	}
	while(aite != null) {
		var o = aite.elt;
		var ret3;
		if(ZNPNode_ZPP_CbType.zpp_pool == null) {
			ret3 = new ZNPNode_ZPP_CbType();
		} else {
			ret3 = ZNPNode_ZPP_CbType.zpp_pool;
			ZNPNode_ZPP_CbType.zpp_pool = ret3.next;
			ret3.next = null;
		}
		ret3.elt = o;
		var temp3 = ret3;
		temp3.next = U.head;
		U.head = temp3;
		U.modified = true;
		U.length++;
		aite = aite.next;
	}
	while(bite != null) {
		var o1 = bite.elt;
		var ret4;
		if(ZNPNode_ZPP_CbType.zpp_pool == null) {
			ret4 = new ZNPNode_ZPP_CbType();
		} else {
			ret4 = ZNPNode_ZPP_CbType.zpp_pool;
			ZNPNode_ZPP_CbType.zpp_pool = ret4.next;
			ret4.next = null;
		}
		ret4.elt = o1;
		var temp4 = ret4;
		temp4.next = V.head;
		V.head = temp4;
		V.modified = true;
		V.length++;
		bite = bite.next;
	}
	while(U.head != null) {
		var x = U.pop_unsafe();
		var cx_ite = B.head;
		while(cx_ite != null) {
			var B1 = cx_ite.elt.cbsets;
			var U1 = ZPP_InteractionListener.UCbSet;
			var V1 = ZPP_InteractionListener.VCbSet;
			var W1 = ZPP_InteractionListener.WCbSet;
			var aite1 = x.cbsets.head;
			var bite1 = B1.head;
			while(aite1 != null && bite1 != null) {
				var a1 = aite1.elt;
				var b1 = bite1.elt;
				if(a1 == b1) {
					var ret5;
					if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
						ret5 = new ZNPNode_ZPP_CbSet();
					} else {
						ret5 = ZNPNode_ZPP_CbSet.zpp_pool;
						ZNPNode_ZPP_CbSet.zpp_pool = ret5.next;
						ret5.next = null;
					}
					ret5.elt = a1;
					var temp5 = ret5;
					temp5.next = W1.head;
					W1.head = temp5;
					W1.modified = true;
					W1.length++;
					aite1 = aite1.next;
					bite1 = bite1.next;
				} else if(ZPP_CbSet.setlt(a1,b1)) {
					var ret6;
					if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
						ret6 = new ZNPNode_ZPP_CbSet();
					} else {
						ret6 = ZNPNode_ZPP_CbSet.zpp_pool;
						ZNPNode_ZPP_CbSet.zpp_pool = ret6.next;
						ret6.next = null;
					}
					ret6.elt = a1;
					var temp6 = ret6;
					temp6.next = U1.head;
					U1.head = temp6;
					U1.modified = true;
					U1.length++;
					aite1 = aite1.next;
				} else {
					var ret7;
					if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
						ret7 = new ZNPNode_ZPP_CbSet();
					} else {
						ret7 = ZNPNode_ZPP_CbSet.zpp_pool;
						ZNPNode_ZPP_CbSet.zpp_pool = ret7.next;
						ret7.next = null;
					}
					ret7.elt = b1;
					var temp7 = ret7;
					temp7.next = V1.head;
					V1.head = temp7;
					V1.modified = true;
					V1.length++;
					bite1 = bite1.next;
				}
			}
			while(aite1 != null) {
				var o2 = aite1.elt;
				var ret8;
				if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
					ret8 = new ZNPNode_ZPP_CbSet();
				} else {
					ret8 = ZNPNode_ZPP_CbSet.zpp_pool;
					ZNPNode_ZPP_CbSet.zpp_pool = ret8.next;
					ret8.next = null;
				}
				ret8.elt = o2;
				var temp8 = ret8;
				temp8.next = U1.head;
				U1.head = temp8;
				U1.modified = true;
				U1.length++;
				aite1 = aite1.next;
			}
			while(bite1 != null) {
				var o3 = bite1.elt;
				var ret9;
				if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
					ret9 = new ZNPNode_ZPP_CbSet();
				} else {
					ret9 = ZNPNode_ZPP_CbSet.zpp_pool;
					ZNPNode_ZPP_CbSet.zpp_pool = ret9.next;
					ret9.next = null;
				}
				ret9.elt = o3;
				var temp9 = ret9;
				temp9.next = V1.head;
				V1.head = temp9;
				V1.modified = true;
				V1.length++;
				bite1 = bite1.next;
			}
			while(U1.head != null) {
				var x1 = U1.pop_unsafe();
				var cx_ite1 = B1.head;
				while(cx_ite1 != null) {
					var y = cx_ite1.elt;
					x1.validate();
					y.validate();
					if(ZPP_CbSet.single_intersection(x1,y,_gthis)) {
						var ret10;
						if(ZPP_CbSetPair.zpp_pool == null) {
							ret10 = new ZPP_CbSetPair();
						} else {
							ret10 = ZPP_CbSetPair.zpp_pool;
							ZPP_CbSetPair.zpp_pool = ret10.next;
							ret10.next = null;
						}
						ret10.zip_listeners = true;
						if(ZPP_CbSet.setlt(x1,y)) {
							ret10.a = x1;
							ret10.b = y;
						} else {
							ret10.a = y;
							ret10.b = x1;
						}
						set.try_insert(ret10);
					}
					cx_ite1 = cx_ite1.next;
				}
			}
			while(V1.head != null) {
				var x2 = V1.pop_unsafe();
				var cx_ite2 = W1.head;
				while(cx_ite2 != null) {
					var y1 = cx_ite2.elt;
					x2.validate();
					y1.validate();
					if(ZPP_CbSet.single_intersection(x2,y1,_gthis)) {
						var ret11;
						if(ZPP_CbSetPair.zpp_pool == null) {
							ret11 = new ZPP_CbSetPair();
						} else {
							ret11 = ZPP_CbSetPair.zpp_pool;
							ZPP_CbSetPair.zpp_pool = ret11.next;
							ret11.next = null;
						}
						ret11.zip_listeners = true;
						if(ZPP_CbSet.setlt(x2,y1)) {
							ret11.a = x2;
							ret11.b = y1;
						} else {
							ret11.a = y1;
							ret11.b = x2;
						}
						set.try_insert(ret11);
					}
					cx_ite2 = cx_ite2.next;
				}
			}
			while(W1.head != null) {
				var x3 = W1.pop_unsafe();
				x3.validate();
				x3.validate();
				if(ZPP_CbSet.single_intersection(x3,x3,_gthis)) {
					var ret12;
					if(ZPP_CbSetPair.zpp_pool == null) {
						ret12 = new ZPP_CbSetPair();
					} else {
						ret12 = ZPP_CbSetPair.zpp_pool;
						ZPP_CbSetPair.zpp_pool = ret12.next;
						ret12.next = null;
					}
					ret12.zip_listeners = true;
					if(ZPP_CbSet.setlt(x3,x3)) {
						ret12.a = x3;
						ret12.b = x3;
					} else {
						ret12.a = x3;
						ret12.b = x3;
					}
					set.try_insert(ret12);
				}
				var cx_ite3 = W1.head;
				while(cx_ite3 != null) {
					var y2 = cx_ite3.elt;
					x3.validate();
					y2.validate();
					if(ZPP_CbSet.single_intersection(x3,y2,_gthis)) {
						var ret13;
						if(ZPP_CbSetPair.zpp_pool == null) {
							ret13 = new ZPP_CbSetPair();
						} else {
							ret13 = ZPP_CbSetPair.zpp_pool;
							ZPP_CbSetPair.zpp_pool = ret13.next;
							ret13.next = null;
						}
						ret13.zip_listeners = true;
						if(ZPP_CbSet.setlt(x3,y2)) {
							ret13.a = x3;
							ret13.b = y2;
						} else {
							ret13.a = y2;
							ret13.b = x3;
						}
						set.try_insert(ret13);
					}
					cx_ite3 = cx_ite3.next;
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	while(V.head != null) {
		var x4 = V.pop_unsafe();
		var cx_ite4 = W.head;
		while(cx_ite4 != null) {
			var B2 = cx_ite4.elt.cbsets;
			var U2 = ZPP_InteractionListener.UCbSet;
			var V2 = ZPP_InteractionListener.VCbSet;
			var W2 = ZPP_InteractionListener.WCbSet;
			var aite2 = x4.cbsets.head;
			var bite2 = B2.head;
			while(aite2 != null && bite2 != null) {
				var a2 = aite2.elt;
				var b2 = bite2.elt;
				if(a2 == b2) {
					var ret14;
					if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
						ret14 = new ZNPNode_ZPP_CbSet();
					} else {
						ret14 = ZNPNode_ZPP_CbSet.zpp_pool;
						ZNPNode_ZPP_CbSet.zpp_pool = ret14.next;
						ret14.next = null;
					}
					ret14.elt = a2;
					var temp10 = ret14;
					temp10.next = W2.head;
					W2.head = temp10;
					W2.modified = true;
					W2.length++;
					aite2 = aite2.next;
					bite2 = bite2.next;
				} else if(ZPP_CbSet.setlt(a2,b2)) {
					var ret15;
					if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
						ret15 = new ZNPNode_ZPP_CbSet();
					} else {
						ret15 = ZNPNode_ZPP_CbSet.zpp_pool;
						ZNPNode_ZPP_CbSet.zpp_pool = ret15.next;
						ret15.next = null;
					}
					ret15.elt = a2;
					var temp11 = ret15;
					temp11.next = U2.head;
					U2.head = temp11;
					U2.modified = true;
					U2.length++;
					aite2 = aite2.next;
				} else {
					var ret16;
					if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
						ret16 = new ZNPNode_ZPP_CbSet();
					} else {
						ret16 = ZNPNode_ZPP_CbSet.zpp_pool;
						ZNPNode_ZPP_CbSet.zpp_pool = ret16.next;
						ret16.next = null;
					}
					ret16.elt = b2;
					var temp12 = ret16;
					temp12.next = V2.head;
					V2.head = temp12;
					V2.modified = true;
					V2.length++;
					bite2 = bite2.next;
				}
			}
			while(aite2 != null) {
				var o4 = aite2.elt;
				var ret17;
				if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
					ret17 = new ZNPNode_ZPP_CbSet();
				} else {
					ret17 = ZNPNode_ZPP_CbSet.zpp_pool;
					ZNPNode_ZPP_CbSet.zpp_pool = ret17.next;
					ret17.next = null;
				}
				ret17.elt = o4;
				var temp13 = ret17;
				temp13.next = U2.head;
				U2.head = temp13;
				U2.modified = true;
				U2.length++;
				aite2 = aite2.next;
			}
			while(bite2 != null) {
				var o5 = bite2.elt;
				var ret18;
				if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
					ret18 = new ZNPNode_ZPP_CbSet();
				} else {
					ret18 = ZNPNode_ZPP_CbSet.zpp_pool;
					ZNPNode_ZPP_CbSet.zpp_pool = ret18.next;
					ret18.next = null;
				}
				ret18.elt = o5;
				var temp14 = ret18;
				temp14.next = V2.head;
				V2.head = temp14;
				V2.modified = true;
				V2.length++;
				bite2 = bite2.next;
			}
			while(U2.head != null) {
				var x5 = U2.pop_unsafe();
				var cx_ite5 = B2.head;
				while(cx_ite5 != null) {
					var y3 = cx_ite5.elt;
					x5.validate();
					y3.validate();
					if(ZPP_CbSet.single_intersection(x5,y3,_gthis)) {
						var ret19;
						if(ZPP_CbSetPair.zpp_pool == null) {
							ret19 = new ZPP_CbSetPair();
						} else {
							ret19 = ZPP_CbSetPair.zpp_pool;
							ZPP_CbSetPair.zpp_pool = ret19.next;
							ret19.next = null;
						}
						ret19.zip_listeners = true;
						if(ZPP_CbSet.setlt(x5,y3)) {
							ret19.a = x5;
							ret19.b = y3;
						} else {
							ret19.a = y3;
							ret19.b = x5;
						}
						set.try_insert(ret19);
					}
					cx_ite5 = cx_ite5.next;
				}
			}
			while(V2.head != null) {
				var x6 = V2.pop_unsafe();
				var cx_ite6 = W2.head;
				while(cx_ite6 != null) {
					var y4 = cx_ite6.elt;
					x6.validate();
					y4.validate();
					if(ZPP_CbSet.single_intersection(x6,y4,_gthis)) {
						var ret20;
						if(ZPP_CbSetPair.zpp_pool == null) {
							ret20 = new ZPP_CbSetPair();
						} else {
							ret20 = ZPP_CbSetPair.zpp_pool;
							ZPP_CbSetPair.zpp_pool = ret20.next;
							ret20.next = null;
						}
						ret20.zip_listeners = true;
						if(ZPP_CbSet.setlt(x6,y4)) {
							ret20.a = x6;
							ret20.b = y4;
						} else {
							ret20.a = y4;
							ret20.b = x6;
						}
						set.try_insert(ret20);
					}
					cx_ite6 = cx_ite6.next;
				}
			}
			while(W2.head != null) {
				var x7 = W2.pop_unsafe();
				x7.validate();
				x7.validate();
				if(ZPP_CbSet.single_intersection(x7,x7,_gthis)) {
					var ret21;
					if(ZPP_CbSetPair.zpp_pool == null) {
						ret21 = new ZPP_CbSetPair();
					} else {
						ret21 = ZPP_CbSetPair.zpp_pool;
						ZPP_CbSetPair.zpp_pool = ret21.next;
						ret21.next = null;
					}
					ret21.zip_listeners = true;
					if(ZPP_CbSet.setlt(x7,x7)) {
						ret21.a = x7;
						ret21.b = x7;
					} else {
						ret21.a = x7;
						ret21.b = x7;
					}
					set.try_insert(ret21);
				}
				var cx_ite7 = W2.head;
				while(cx_ite7 != null) {
					var y5 = cx_ite7.elt;
					x7.validate();
					y5.validate();
					if(ZPP_CbSet.single_intersection(x7,y5,_gthis)) {
						var ret22;
						if(ZPP_CbSetPair.zpp_pool == null) {
							ret22 = new ZPP_CbSetPair();
						} else {
							ret22 = ZPP_CbSetPair.zpp_pool;
							ZPP_CbSetPair.zpp_pool = ret22.next;
							ret22.next = null;
						}
						ret22.zip_listeners = true;
						if(ZPP_CbSet.setlt(x7,y5)) {
							ret22.a = x7;
							ret22.b = y5;
						} else {
							ret22.a = y5;
							ret22.b = x7;
						}
						set.try_insert(ret22);
					}
					cx_ite7 = cx_ite7.next;
				}
			}
			cx_ite4 = cx_ite4.next;
		}
	}
	while(W.head != null) {
		var x8 = W.pop_unsafe();
		var B3 = x8.cbsets;
		var U3 = ZPP_InteractionListener.UCbSet;
		var V3 = ZPP_InteractionListener.VCbSet;
		var W3 = ZPP_InteractionListener.WCbSet;
		var aite3 = x8.cbsets.head;
		var bite3 = B3.head;
		while(aite3 != null && bite3 != null) {
			var a3 = aite3.elt;
			var b3 = bite3.elt;
			if(a3 == b3) {
				var ret23;
				if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
					ret23 = new ZNPNode_ZPP_CbSet();
				} else {
					ret23 = ZNPNode_ZPP_CbSet.zpp_pool;
					ZNPNode_ZPP_CbSet.zpp_pool = ret23.next;
					ret23.next = null;
				}
				ret23.elt = a3;
				var temp15 = ret23;
				temp15.next = W3.head;
				W3.head = temp15;
				W3.modified = true;
				W3.length++;
				aite3 = aite3.next;
				bite3 = bite3.next;
			} else if(ZPP_CbSet.setlt(a3,b3)) {
				var ret24;
				if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
					ret24 = new ZNPNode_ZPP_CbSet();
				} else {
					ret24 = ZNPNode_ZPP_CbSet.zpp_pool;
					ZNPNode_ZPP_CbSet.zpp_pool = ret24.next;
					ret24.next = null;
				}
				ret24.elt = a3;
				var temp16 = ret24;
				temp16.next = U3.head;
				U3.head = temp16;
				U3.modified = true;
				U3.length++;
				aite3 = aite3.next;
			} else {
				var ret25;
				if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
					ret25 = new ZNPNode_ZPP_CbSet();
				} else {
					ret25 = ZNPNode_ZPP_CbSet.zpp_pool;
					ZNPNode_ZPP_CbSet.zpp_pool = ret25.next;
					ret25.next = null;
				}
				ret25.elt = b3;
				var temp17 = ret25;
				temp17.next = V3.head;
				V3.head = temp17;
				V3.modified = true;
				V3.length++;
				bite3 = bite3.next;
			}
		}
		while(aite3 != null) {
			var o6 = aite3.elt;
			var ret26;
			if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
				ret26 = new ZNPNode_ZPP_CbSet();
			} else {
				ret26 = ZNPNode_ZPP_CbSet.zpp_pool;
				ZNPNode_ZPP_CbSet.zpp_pool = ret26.next;
				ret26.next = null;
			}
			ret26.elt = o6;
			var temp18 = ret26;
			temp18.next = U3.head;
			U3.head = temp18;
			U3.modified = true;
			U3.length++;
			aite3 = aite3.next;
		}
		while(bite3 != null) {
			var o7 = bite3.elt;
			var ret27;
			if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
				ret27 = new ZNPNode_ZPP_CbSet();
			} else {
				ret27 = ZNPNode_ZPP_CbSet.zpp_pool;
				ZNPNode_ZPP_CbSet.zpp_pool = ret27.next;
				ret27.next = null;
			}
			ret27.elt = o7;
			var temp19 = ret27;
			temp19.next = V3.head;
			V3.head = temp19;
			V3.modified = true;
			V3.length++;
			bite3 = bite3.next;
		}
		while(U3.head != null) {
			var x9 = U3.pop_unsafe();
			var cx_ite8 = B3.head;
			while(cx_ite8 != null) {
				var y6 = cx_ite8.elt;
				x9.validate();
				y6.validate();
				if(ZPP_CbSet.single_intersection(x9,y6,_gthis)) {
					var ret28;
					if(ZPP_CbSetPair.zpp_pool == null) {
						ret28 = new ZPP_CbSetPair();
					} else {
						ret28 = ZPP_CbSetPair.zpp_pool;
						ZPP_CbSetPair.zpp_pool = ret28.next;
						ret28.next = null;
					}
					ret28.zip_listeners = true;
					if(ZPP_CbSet.setlt(x9,y6)) {
						ret28.a = x9;
						ret28.b = y6;
					} else {
						ret28.a = y6;
						ret28.b = x9;
					}
					set.try_insert(ret28);
				}
				cx_ite8 = cx_ite8.next;
			}
		}
		while(V3.head != null) {
			var x10 = V3.pop_unsafe();
			var cx_ite9 = W3.head;
			while(cx_ite9 != null) {
				var y7 = cx_ite9.elt;
				x10.validate();
				y7.validate();
				if(ZPP_CbSet.single_intersection(x10,y7,_gthis)) {
					var ret29;
					if(ZPP_CbSetPair.zpp_pool == null) {
						ret29 = new ZPP_CbSetPair();
					} else {
						ret29 = ZPP_CbSetPair.zpp_pool;
						ZPP_CbSetPair.zpp_pool = ret29.next;
						ret29.next = null;
					}
					ret29.zip_listeners = true;
					if(ZPP_CbSet.setlt(x10,y7)) {
						ret29.a = x10;
						ret29.b = y7;
					} else {
						ret29.a = y7;
						ret29.b = x10;
					}
					set.try_insert(ret29);
				}
				cx_ite9 = cx_ite9.next;
			}
		}
		while(W3.head != null) {
			var x11 = W3.pop_unsafe();
			x11.validate();
			x11.validate();
			if(ZPP_CbSet.single_intersection(x11,x11,_gthis)) {
				var ret30;
				if(ZPP_CbSetPair.zpp_pool == null) {
					ret30 = new ZPP_CbSetPair();
				} else {
					ret30 = ZPP_CbSetPair.zpp_pool;
					ZPP_CbSetPair.zpp_pool = ret30.next;
					ret30.next = null;
				}
				ret30.zip_listeners = true;
				if(ZPP_CbSet.setlt(x11,x11)) {
					ret30.a = x11;
					ret30.b = x11;
				} else {
					ret30.a = x11;
					ret30.b = x11;
				}
				set.try_insert(ret30);
			}
			var cx_ite10 = W3.head;
			while(cx_ite10 != null) {
				var y8 = cx_ite10.elt;
				x11.validate();
				y8.validate();
				if(ZPP_CbSet.single_intersection(x11,y8,_gthis)) {
					var ret31;
					if(ZPP_CbSetPair.zpp_pool == null) {
						ret31 = new ZPP_CbSetPair();
					} else {
						ret31 = ZPP_CbSetPair.zpp_pool;
						ZPP_CbSetPair.zpp_pool = ret31.next;
						ret31.next = null;
					}
					ret31.zip_listeners = true;
					if(ZPP_CbSet.setlt(x11,y8)) {
						ret31.a = x11;
						ret31.b = y8;
					} else {
						ret31.a = y8;
						ret31.b = x11;
					}
					set.try_insert(ret31);
				}
				cx_ite10 = cx_ite10.next;
			}
		}
		var cx_ite11 = W.head;
		while(cx_ite11 != null) {
			var B4 = cx_ite11.elt.cbsets;
			var U4 = ZPP_InteractionListener.UCbSet;
			var V4 = ZPP_InteractionListener.VCbSet;
			var W4 = ZPP_InteractionListener.WCbSet;
			var aite4 = x8.cbsets.head;
			var bite4 = B4.head;
			while(aite4 != null && bite4 != null) {
				var a4 = aite4.elt;
				var b4 = bite4.elt;
				if(a4 == b4) {
					var ret32;
					if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
						ret32 = new ZNPNode_ZPP_CbSet();
					} else {
						ret32 = ZNPNode_ZPP_CbSet.zpp_pool;
						ZNPNode_ZPP_CbSet.zpp_pool = ret32.next;
						ret32.next = null;
					}
					ret32.elt = a4;
					var temp20 = ret32;
					temp20.next = W4.head;
					W4.head = temp20;
					W4.modified = true;
					W4.length++;
					aite4 = aite4.next;
					bite4 = bite4.next;
				} else if(ZPP_CbSet.setlt(a4,b4)) {
					var ret33;
					if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
						ret33 = new ZNPNode_ZPP_CbSet();
					} else {
						ret33 = ZNPNode_ZPP_CbSet.zpp_pool;
						ZNPNode_ZPP_CbSet.zpp_pool = ret33.next;
						ret33.next = null;
					}
					ret33.elt = a4;
					var temp21 = ret33;
					temp21.next = U4.head;
					U4.head = temp21;
					U4.modified = true;
					U4.length++;
					aite4 = aite4.next;
				} else {
					var ret34;
					if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
						ret34 = new ZNPNode_ZPP_CbSet();
					} else {
						ret34 = ZNPNode_ZPP_CbSet.zpp_pool;
						ZNPNode_ZPP_CbSet.zpp_pool = ret34.next;
						ret34.next = null;
					}
					ret34.elt = b4;
					var temp22 = ret34;
					temp22.next = V4.head;
					V4.head = temp22;
					V4.modified = true;
					V4.length++;
					bite4 = bite4.next;
				}
			}
			while(aite4 != null) {
				var o8 = aite4.elt;
				var ret35;
				if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
					ret35 = new ZNPNode_ZPP_CbSet();
				} else {
					ret35 = ZNPNode_ZPP_CbSet.zpp_pool;
					ZNPNode_ZPP_CbSet.zpp_pool = ret35.next;
					ret35.next = null;
				}
				ret35.elt = o8;
				var temp23 = ret35;
				temp23.next = U4.head;
				U4.head = temp23;
				U4.modified = true;
				U4.length++;
				aite4 = aite4.next;
			}
			while(bite4 != null) {
				var o9 = bite4.elt;
				var ret36;
				if(ZNPNode_ZPP_CbSet.zpp_pool == null) {
					ret36 = new ZNPNode_ZPP_CbSet();
				} else {
					ret36 = ZNPNode_ZPP_CbSet.zpp_pool;
					ZNPNode_ZPP_CbSet.zpp_pool = ret36.next;
					ret36.next = null;
				}
				ret36.elt = o9;
				var temp24 = ret36;
				temp24.next = V4.head;
				V4.head = temp24;
				V4.modified = true;
				V4.length++;
				bite4 = bite4.next;
			}
			while(U4.head != null) {
				var x12 = U4.pop_unsafe();
				var cx_ite12 = B4.head;
				while(cx_ite12 != null) {
					var y9 = cx_ite12.elt;
					x12.validate();
					y9.validate();
					if(ZPP_CbSet.single_intersection(x12,y9,_gthis)) {
						var ret37;
						if(ZPP_CbSetPair.zpp_pool == null) {
							ret37 = new ZPP_CbSetPair();
						} else {
							ret37 = ZPP_CbSetPair.zpp_pool;
							ZPP_CbSetPair.zpp_pool = ret37.next;
							ret37.next = null;
						}
						ret37.zip_listeners = true;
						if(ZPP_CbSet.setlt(x12,y9)) {
							ret37.a = x12;
							ret37.b = y9;
						} else {
							ret37.a = y9;
							ret37.b = x12;
						}
						set.try_insert(ret37);
					}
					cx_ite12 = cx_ite12.next;
				}
			}
			while(V4.head != null) {
				var x13 = V4.pop_unsafe();
				var cx_ite13 = W4.head;
				while(cx_ite13 != null) {
					var y10 = cx_ite13.elt;
					x13.validate();
					y10.validate();
					if(ZPP_CbSet.single_intersection(x13,y10,_gthis)) {
						var ret38;
						if(ZPP_CbSetPair.zpp_pool == null) {
							ret38 = new ZPP_CbSetPair();
						} else {
							ret38 = ZPP_CbSetPair.zpp_pool;
							ZPP_CbSetPair.zpp_pool = ret38.next;
							ret38.next = null;
						}
						ret38.zip_listeners = true;
						if(ZPP_CbSet.setlt(x13,y10)) {
							ret38.a = x13;
							ret38.b = y10;
						} else {
							ret38.a = y10;
							ret38.b = x13;
						}
						set.try_insert(ret38);
					}
					cx_ite13 = cx_ite13.next;
				}
			}
			while(W4.head != null) {
				var x14 = W4.pop_unsafe();
				x14.validate();
				x14.validate();
				if(ZPP_CbSet.single_intersection(x14,x14,_gthis)) {
					var ret39;
					if(ZPP_CbSetPair.zpp_pool == null) {
						ret39 = new ZPP_CbSetPair();
					} else {
						ret39 = ZPP_CbSetPair.zpp_pool;
						ZPP_CbSetPair.zpp_pool = ret39.next;
						ret39.next = null;
					}
					ret39.zip_listeners = true;
					if(ZPP_CbSet.setlt(x14,x14)) {
						ret39.a = x14;
						ret39.b = x14;
					} else {
						ret39.a = x14;
						ret39.b = x14;
					}
					set.try_insert(ret39);
				}
				var cx_ite14 = W4.head;
				while(cx_ite14 != null) {
					var y11 = cx_ite14.elt;
					x14.validate();
					y11.validate();
					if(ZPP_CbSet.single_intersection(x14,y11,_gthis)) {
						var ret40;
						if(ZPP_CbSetPair.zpp_pool == null) {
							ret40 = new ZPP_CbSetPair();
						} else {
							ret40 = ZPP_CbSetPair.zpp_pool;
							ZPP_CbSetPair.zpp_pool = ret40.next;
							ret40.next = null;
						}
						ret40.zip_listeners = true;
						if(ZPP_CbSet.setlt(x14,y11)) {
							ret40.a = x14;
							ret40.b = y11;
						} else {
							ret40.a = y11;
							ret40.b = x14;
						}
						set.try_insert(ret40);
					}
					cx_ite14 = cx_ite14.next;
				}
			}
			cx_ite11 = cx_ite11.next;
		}
	}
	if(set.parent != null) {
		var cur = set.parent;
		while(cur != null) if(cur.prev != null) {
			cur = cur.prev;
		} else if(cur.next != null) {
			cur = cur.next;
		} else {
			var pair = cur.data;
			if(fresh) {
				_gthis.space.freshListenerType(pair.a,pair.b);
			} else {
				_gthis.space.nullListenerType(pair.a,pair.b);
			}
			pair.a = pair.b = null;
			pair.listeners.clear();
			pair.next = ZPP_CbSetPair.zpp_pool;
			ZPP_CbSetPair.zpp_pool = pair;
			var ret41 = cur.parent;
			if(ret41 != null) {
				if(cur == ret41.prev) {
					ret41.prev = null;
				} else {
					ret41.next = null;
				}
				cur.parent = null;
			}
			var o10 = cur;
			o10.data = null;
			o10.lt = null;
			o10.swapped = null;
			o10.next = ZPP_Set_ZPP_CbSetPair.zpp_pool;
			ZPP_Set_ZPP_CbSetPair.zpp_pool = o10;
			cur = ret41;
		}
		set.parent = null;
	}
	var o11 = set;
	o11.data = null;
	o11.lt = null;
	o11.swapped = null;
	o11.next = ZPP_Set_ZPP_CbSetPair.zpp_pool;
	ZPP_Set_ZPP_CbSetPair.zpp_pool = o11;
};
ZPP_InteractionListener.prototype.with_union = function(lambda) {
	var ite1 = this.options1.includes.head;
	var ite2 = this.options2.includes.head;
	while(ite1 != null && ite2 != null) {
		var cb1 = ite1.elt;
		var cb2 = ite2.elt;
		if(cb1 == cb2) {
			lambda(cb1);
			ite1 = ite1.next;
			ite2 = ite2.next;
		} else if(cb1.id < cb2.id) {
			lambda(cb1);
			ite1 = ite1.next;
		} else {
			lambda(cb2);
			ite2 = ite2.next;
		}
	}
	while(ite1 != null) {
		lambda(ite1.elt);
		ite1 = ite1.next;
	}
	while(ite2 != null) {
		lambda(ite2.elt);
		ite2 = ite2.next;
	}
};
ZPP_InteractionListener.prototype.addedToSpace = function() {
	var _gthis = this;
	var pre = this.type == 3;
	var ite1 = this.options1.includes.head;
	var ite2 = this.options2.includes.head;
	while(ite1 != null && ite2 != null) {
		var cb1 = ite1.elt;
		var cb2 = ite2.elt;
		if(cb1 == cb2) {
			var pre1 = null;
			var cx_ite = cb1.listeners.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(_gthis.precedence > j.precedence || _gthis.precedence == j.precedence && _gthis.id > j.id) {
					break;
				}
				pre1 = cx_ite;
				cx_ite = cx_ite.next;
			}
			var _this = cb1.listeners;
			var ret;
			if(ZNPNode_ZPP_InteractionListener.zpp_pool == null) {
				ret = new ZNPNode_ZPP_InteractionListener();
			} else {
				ret = ZNPNode_ZPP_InteractionListener.zpp_pool;
				ZNPNode_ZPP_InteractionListener.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = _gthis;
			var temp = ret;
			if(pre1 == null) {
				temp.next = _this.head;
				_this.head = temp;
			} else {
				temp.next = pre1.next;
				pre1.next = temp;
			}
			_this.pushmod = _this.modified = true;
			_this.length++;
			var cx_ite1 = cb1.cbsets.head;
			while(cx_ite1 != null) {
				var cb = cx_ite1.elt;
				cb.zip_listeners = true;
				cb.invalidate_pairs();
				cx_ite1 = cx_ite1.next;
			}
			if(pre) {
				var cx_ite2 = cb1.interactors.head;
				while(cx_ite2 != null) {
					cx_ite2.elt.wake();
					cx_ite2 = cx_ite2.next;
				}
			}
			ite1 = ite1.next;
			ite2 = ite2.next;
		} else if(cb1.id < cb2.id) {
			var pre2 = null;
			var cx_ite3 = cb1.listeners.head;
			while(cx_ite3 != null) {
				var j1 = cx_ite3.elt;
				if(_gthis.precedence > j1.precedence || _gthis.precedence == j1.precedence && _gthis.id > j1.id) {
					break;
				}
				pre2 = cx_ite3;
				cx_ite3 = cx_ite3.next;
			}
			var _this1 = cb1.listeners;
			var ret1;
			if(ZNPNode_ZPP_InteractionListener.zpp_pool == null) {
				ret1 = new ZNPNode_ZPP_InteractionListener();
			} else {
				ret1 = ZNPNode_ZPP_InteractionListener.zpp_pool;
				ZNPNode_ZPP_InteractionListener.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.elt = _gthis;
			var temp1 = ret1;
			if(pre2 == null) {
				temp1.next = _this1.head;
				_this1.head = temp1;
			} else {
				temp1.next = pre2.next;
				pre2.next = temp1;
			}
			_this1.pushmod = _this1.modified = true;
			_this1.length++;
			var cx_ite4 = cb1.cbsets.head;
			while(cx_ite4 != null) {
				var cb3 = cx_ite4.elt;
				cb3.zip_listeners = true;
				cb3.invalidate_pairs();
				cx_ite4 = cx_ite4.next;
			}
			if(pre) {
				var cx_ite5 = cb1.interactors.head;
				while(cx_ite5 != null) {
					cx_ite5.elt.wake();
					cx_ite5 = cx_ite5.next;
				}
			}
			ite1 = ite1.next;
		} else {
			var pre3 = null;
			var cx_ite6 = cb2.listeners.head;
			while(cx_ite6 != null) {
				var j2 = cx_ite6.elt;
				if(_gthis.precedence > j2.precedence || _gthis.precedence == j2.precedence && _gthis.id > j2.id) {
					break;
				}
				pre3 = cx_ite6;
				cx_ite6 = cx_ite6.next;
			}
			var _this2 = cb2.listeners;
			var ret2;
			if(ZNPNode_ZPP_InteractionListener.zpp_pool == null) {
				ret2 = new ZNPNode_ZPP_InteractionListener();
			} else {
				ret2 = ZNPNode_ZPP_InteractionListener.zpp_pool;
				ZNPNode_ZPP_InteractionListener.zpp_pool = ret2.next;
				ret2.next = null;
			}
			ret2.elt = _gthis;
			var temp2 = ret2;
			if(pre3 == null) {
				temp2.next = _this2.head;
				_this2.head = temp2;
			} else {
				temp2.next = pre3.next;
				pre3.next = temp2;
			}
			_this2.pushmod = _this2.modified = true;
			_this2.length++;
			var cx_ite7 = cb2.cbsets.head;
			while(cx_ite7 != null) {
				var cb4 = cx_ite7.elt;
				cb4.zip_listeners = true;
				cb4.invalidate_pairs();
				cx_ite7 = cx_ite7.next;
			}
			if(pre) {
				var cx_ite8 = cb2.interactors.head;
				while(cx_ite8 != null) {
					cx_ite8.elt.wake();
					cx_ite8 = cx_ite8.next;
				}
			}
			ite2 = ite2.next;
		}
	}
	while(ite1 != null) {
		var cb5 = ite1.elt;
		var pre4 = null;
		var cx_ite9 = cb5.listeners.head;
		while(cx_ite9 != null) {
			var j3 = cx_ite9.elt;
			if(_gthis.precedence > j3.precedence || _gthis.precedence == j3.precedence && _gthis.id > j3.id) {
				break;
			}
			pre4 = cx_ite9;
			cx_ite9 = cx_ite9.next;
		}
		var _this3 = cb5.listeners;
		var ret3;
		if(ZNPNode_ZPP_InteractionListener.zpp_pool == null) {
			ret3 = new ZNPNode_ZPP_InteractionListener();
		} else {
			ret3 = ZNPNode_ZPP_InteractionListener.zpp_pool;
			ZNPNode_ZPP_InteractionListener.zpp_pool = ret3.next;
			ret3.next = null;
		}
		ret3.elt = _gthis;
		var temp3 = ret3;
		if(pre4 == null) {
			temp3.next = _this3.head;
			_this3.head = temp3;
		} else {
			temp3.next = pre4.next;
			pre4.next = temp3;
		}
		_this3.pushmod = _this3.modified = true;
		_this3.length++;
		var cx_ite10 = cb5.cbsets.head;
		while(cx_ite10 != null) {
			var cb6 = cx_ite10.elt;
			cb6.zip_listeners = true;
			cb6.invalidate_pairs();
			cx_ite10 = cx_ite10.next;
		}
		if(pre) {
			var cx_ite11 = cb5.interactors.head;
			while(cx_ite11 != null) {
				cx_ite11.elt.wake();
				cx_ite11 = cx_ite11.next;
			}
		}
		ite1 = ite1.next;
	}
	while(ite2 != null) {
		var cb7 = ite2.elt;
		var pre5 = null;
		var cx_ite12 = cb7.listeners.head;
		while(cx_ite12 != null) {
			var j4 = cx_ite12.elt;
			if(_gthis.precedence > j4.precedence || _gthis.precedence == j4.precedence && _gthis.id > j4.id) {
				break;
			}
			pre5 = cx_ite12;
			cx_ite12 = cx_ite12.next;
		}
		var _this4 = cb7.listeners;
		var ret4;
		if(ZNPNode_ZPP_InteractionListener.zpp_pool == null) {
			ret4 = new ZNPNode_ZPP_InteractionListener();
		} else {
			ret4 = ZNPNode_ZPP_InteractionListener.zpp_pool;
			ZNPNode_ZPP_InteractionListener.zpp_pool = ret4.next;
			ret4.next = null;
		}
		ret4.elt = _gthis;
		var temp4 = ret4;
		if(pre5 == null) {
			temp4.next = _this4.head;
			_this4.head = temp4;
		} else {
			temp4.next = pre5.next;
			pre5.next = temp4;
		}
		_this4.pushmod = _this4.modified = true;
		_this4.length++;
		var cx_ite13 = cb7.cbsets.head;
		while(cx_ite13 != null) {
			var cb8 = cx_ite13.elt;
			cb8.zip_listeners = true;
			cb8.invalidate_pairs();
			cx_ite13 = cx_ite13.next;
		}
		if(pre) {
			var cx_ite14 = cb7.interactors.head;
			while(cx_ite14 != null) {
				cx_ite14.elt.wake();
				cx_ite14 = cx_ite14.next;
			}
		}
		ite2 = ite2.next;
	}
	this.options1.handler = $bind(this,this.cbtype_change1);
	this.options2.handler = $bind(this,this.cbtype_change2);
	this.with_uniquesets(true);
};
ZPP_InteractionListener.prototype.removedFromSpace = function() {
	var _gthis = this;
	this.with_uniquesets(false);
	var pre = this.type == 3;
	var ite1 = this.options1.includes.head;
	var ite2 = this.options2.includes.head;
	while(ite1 != null && ite2 != null) {
		var cb1 = ite1.elt;
		var cb2 = ite2.elt;
		if(cb1 == cb2) {
			cb1.listeners.remove(_gthis);
			var cx_ite = cb1.cbsets.head;
			while(cx_ite != null) {
				var cb = cx_ite.elt;
				cb.zip_listeners = true;
				cb.invalidate_pairs();
				cx_ite = cx_ite.next;
			}
			if(pre) {
				var cx_ite1 = cb1.interactors.head;
				while(cx_ite1 != null) {
					cx_ite1.elt.wake();
					cx_ite1 = cx_ite1.next;
				}
			}
			ite1 = ite1.next;
			ite2 = ite2.next;
		} else if(cb1.id < cb2.id) {
			cb1.listeners.remove(_gthis);
			var cx_ite2 = cb1.cbsets.head;
			while(cx_ite2 != null) {
				var cb3 = cx_ite2.elt;
				cb3.zip_listeners = true;
				cb3.invalidate_pairs();
				cx_ite2 = cx_ite2.next;
			}
			if(pre) {
				var cx_ite3 = cb1.interactors.head;
				while(cx_ite3 != null) {
					cx_ite3.elt.wake();
					cx_ite3 = cx_ite3.next;
				}
			}
			ite1 = ite1.next;
		} else {
			cb2.listeners.remove(_gthis);
			var cx_ite4 = cb2.cbsets.head;
			while(cx_ite4 != null) {
				var cb4 = cx_ite4.elt;
				cb4.zip_listeners = true;
				cb4.invalidate_pairs();
				cx_ite4 = cx_ite4.next;
			}
			if(pre) {
				var cx_ite5 = cb2.interactors.head;
				while(cx_ite5 != null) {
					cx_ite5.elt.wake();
					cx_ite5 = cx_ite5.next;
				}
			}
			ite2 = ite2.next;
		}
	}
	while(ite1 != null) {
		var cb5 = ite1.elt;
		cb5.listeners.remove(_gthis);
		var cx_ite6 = cb5.cbsets.head;
		while(cx_ite6 != null) {
			var cb6 = cx_ite6.elt;
			cb6.zip_listeners = true;
			cb6.invalidate_pairs();
			cx_ite6 = cx_ite6.next;
		}
		if(pre) {
			var cx_ite7 = cb5.interactors.head;
			while(cx_ite7 != null) {
				cx_ite7.elt.wake();
				cx_ite7 = cx_ite7.next;
			}
		}
		ite1 = ite1.next;
	}
	while(ite2 != null) {
		var cb7 = ite2.elt;
		cb7.listeners.remove(_gthis);
		var cx_ite8 = cb7.cbsets.head;
		while(cx_ite8 != null) {
			var cb8 = cx_ite8.elt;
			cb8.zip_listeners = true;
			cb8.invalidate_pairs();
			cx_ite8 = cx_ite8.next;
		}
		if(pre) {
			var cx_ite9 = cb7.interactors.head;
			while(cx_ite9 != null) {
				cx_ite9.elt.wake();
				cx_ite9 = cx_ite9.next;
			}
		}
		ite2 = ite2.next;
	}
	this.options1.handler = null;
	this.options2.handler = null;
};
ZPP_InteractionListener.prototype.invalidate_precedence = function() {
	var _gthis = this;
	if(this.space != null) {
		var pre = this.type == 3;
		var ite1 = this.options1.includes.head;
		var ite2 = this.options2.includes.head;
		while(ite1 != null && ite2 != null) {
			var cb1 = ite1.elt;
			var cb2 = ite2.elt;
			if(cb1 == cb2) {
				cb1.listeners.remove(_gthis);
				var cx_ite = cb1.cbsets.head;
				while(cx_ite != null) {
					var cb = cx_ite.elt;
					cb.zip_listeners = true;
					cb.invalidate_pairs();
					cx_ite = cx_ite.next;
				}
				var pre1 = null;
				var cx_ite1 = cb1.listeners.head;
				while(cx_ite1 != null) {
					var j = cx_ite1.elt;
					if(_gthis.precedence > j.precedence || _gthis.precedence == j.precedence && _gthis.id > j.id) {
						break;
					}
					pre1 = cx_ite1;
					cx_ite1 = cx_ite1.next;
				}
				var _this = cb1.listeners;
				var ret;
				if(ZNPNode_ZPP_InteractionListener.zpp_pool == null) {
					ret = new ZNPNode_ZPP_InteractionListener();
				} else {
					ret = ZNPNode_ZPP_InteractionListener.zpp_pool;
					ZNPNode_ZPP_InteractionListener.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = _gthis;
				var temp = ret;
				if(pre1 == null) {
					temp.next = _this.head;
					_this.head = temp;
				} else {
					temp.next = pre1.next;
					pre1.next = temp;
				}
				_this.pushmod = _this.modified = true;
				_this.length++;
				var cx_ite2 = cb1.cbsets.head;
				while(cx_ite2 != null) {
					var cb3 = cx_ite2.elt;
					cb3.zip_listeners = true;
					cb3.invalidate_pairs();
					cx_ite2 = cx_ite2.next;
				}
				if(pre) {
					var cx_ite3 = cb1.interactors.head;
					while(cx_ite3 != null) {
						cx_ite3.elt.wake();
						cx_ite3 = cx_ite3.next;
					}
				}
				ite1 = ite1.next;
				ite2 = ite2.next;
			} else if(cb1.id < cb2.id) {
				cb1.listeners.remove(_gthis);
				var cx_ite4 = cb1.cbsets.head;
				while(cx_ite4 != null) {
					var cb4 = cx_ite4.elt;
					cb4.zip_listeners = true;
					cb4.invalidate_pairs();
					cx_ite4 = cx_ite4.next;
				}
				var pre2 = null;
				var cx_ite5 = cb1.listeners.head;
				while(cx_ite5 != null) {
					var j1 = cx_ite5.elt;
					if(_gthis.precedence > j1.precedence || _gthis.precedence == j1.precedence && _gthis.id > j1.id) {
						break;
					}
					pre2 = cx_ite5;
					cx_ite5 = cx_ite5.next;
				}
				var _this1 = cb1.listeners;
				var ret1;
				if(ZNPNode_ZPP_InteractionListener.zpp_pool == null) {
					ret1 = new ZNPNode_ZPP_InteractionListener();
				} else {
					ret1 = ZNPNode_ZPP_InteractionListener.zpp_pool;
					ZNPNode_ZPP_InteractionListener.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.elt = _gthis;
				var temp1 = ret1;
				if(pre2 == null) {
					temp1.next = _this1.head;
					_this1.head = temp1;
				} else {
					temp1.next = pre2.next;
					pre2.next = temp1;
				}
				_this1.pushmod = _this1.modified = true;
				_this1.length++;
				var cx_ite6 = cb1.cbsets.head;
				while(cx_ite6 != null) {
					var cb5 = cx_ite6.elt;
					cb5.zip_listeners = true;
					cb5.invalidate_pairs();
					cx_ite6 = cx_ite6.next;
				}
				if(pre) {
					var cx_ite7 = cb1.interactors.head;
					while(cx_ite7 != null) {
						cx_ite7.elt.wake();
						cx_ite7 = cx_ite7.next;
					}
				}
				ite1 = ite1.next;
			} else {
				cb2.listeners.remove(_gthis);
				var cx_ite8 = cb2.cbsets.head;
				while(cx_ite8 != null) {
					var cb6 = cx_ite8.elt;
					cb6.zip_listeners = true;
					cb6.invalidate_pairs();
					cx_ite8 = cx_ite8.next;
				}
				var pre3 = null;
				var cx_ite9 = cb2.listeners.head;
				while(cx_ite9 != null) {
					var j2 = cx_ite9.elt;
					if(_gthis.precedence > j2.precedence || _gthis.precedence == j2.precedence && _gthis.id > j2.id) {
						break;
					}
					pre3 = cx_ite9;
					cx_ite9 = cx_ite9.next;
				}
				var _this2 = cb2.listeners;
				var ret2;
				if(ZNPNode_ZPP_InteractionListener.zpp_pool == null) {
					ret2 = new ZNPNode_ZPP_InteractionListener();
				} else {
					ret2 = ZNPNode_ZPP_InteractionListener.zpp_pool;
					ZNPNode_ZPP_InteractionListener.zpp_pool = ret2.next;
					ret2.next = null;
				}
				ret2.elt = _gthis;
				var temp2 = ret2;
				if(pre3 == null) {
					temp2.next = _this2.head;
					_this2.head = temp2;
				} else {
					temp2.next = pre3.next;
					pre3.next = temp2;
				}
				_this2.pushmod = _this2.modified = true;
				_this2.length++;
				var cx_ite10 = cb2.cbsets.head;
				while(cx_ite10 != null) {
					var cb7 = cx_ite10.elt;
					cb7.zip_listeners = true;
					cb7.invalidate_pairs();
					cx_ite10 = cx_ite10.next;
				}
				if(pre) {
					var cx_ite11 = cb2.interactors.head;
					while(cx_ite11 != null) {
						cx_ite11.elt.wake();
						cx_ite11 = cx_ite11.next;
					}
				}
				ite2 = ite2.next;
			}
		}
		while(ite1 != null) {
			var cb8 = ite1.elt;
			cb8.listeners.remove(_gthis);
			var cx_ite12 = cb8.cbsets.head;
			while(cx_ite12 != null) {
				var cb9 = cx_ite12.elt;
				cb9.zip_listeners = true;
				cb9.invalidate_pairs();
				cx_ite12 = cx_ite12.next;
			}
			var pre4 = null;
			var cx_ite13 = cb8.listeners.head;
			while(cx_ite13 != null) {
				var j3 = cx_ite13.elt;
				if(_gthis.precedence > j3.precedence || _gthis.precedence == j3.precedence && _gthis.id > j3.id) {
					break;
				}
				pre4 = cx_ite13;
				cx_ite13 = cx_ite13.next;
			}
			var _this3 = cb8.listeners;
			var ret3;
			if(ZNPNode_ZPP_InteractionListener.zpp_pool == null) {
				ret3 = new ZNPNode_ZPP_InteractionListener();
			} else {
				ret3 = ZNPNode_ZPP_InteractionListener.zpp_pool;
				ZNPNode_ZPP_InteractionListener.zpp_pool = ret3.next;
				ret3.next = null;
			}
			ret3.elt = _gthis;
			var temp3 = ret3;
			if(pre4 == null) {
				temp3.next = _this3.head;
				_this3.head = temp3;
			} else {
				temp3.next = pre4.next;
				pre4.next = temp3;
			}
			_this3.pushmod = _this3.modified = true;
			_this3.length++;
			var cx_ite14 = cb8.cbsets.head;
			while(cx_ite14 != null) {
				var cb10 = cx_ite14.elt;
				cb10.zip_listeners = true;
				cb10.invalidate_pairs();
				cx_ite14 = cx_ite14.next;
			}
			if(pre) {
				var cx_ite15 = cb8.interactors.head;
				while(cx_ite15 != null) {
					cx_ite15.elt.wake();
					cx_ite15 = cx_ite15.next;
				}
			}
			ite1 = ite1.next;
		}
		while(ite2 != null) {
			var cb11 = ite2.elt;
			cb11.listeners.remove(_gthis);
			var cx_ite16 = cb11.cbsets.head;
			while(cx_ite16 != null) {
				var cb12 = cx_ite16.elt;
				cb12.zip_listeners = true;
				cb12.invalidate_pairs();
				cx_ite16 = cx_ite16.next;
			}
			var pre5 = null;
			var cx_ite17 = cb11.listeners.head;
			while(cx_ite17 != null) {
				var j4 = cx_ite17.elt;
				if(_gthis.precedence > j4.precedence || _gthis.precedence == j4.precedence && _gthis.id > j4.id) {
					break;
				}
				pre5 = cx_ite17;
				cx_ite17 = cx_ite17.next;
			}
			var _this4 = cb11.listeners;
			var ret4;
			if(ZNPNode_ZPP_InteractionListener.zpp_pool == null) {
				ret4 = new ZNPNode_ZPP_InteractionListener();
			} else {
				ret4 = ZNPNode_ZPP_InteractionListener.zpp_pool;
				ZNPNode_ZPP_InteractionListener.zpp_pool = ret4.next;
				ret4.next = null;
			}
			ret4.elt = _gthis;
			var temp4 = ret4;
			if(pre5 == null) {
				temp4.next = _this4.head;
				_this4.head = temp4;
			} else {
				temp4.next = pre5.next;
				pre5.next = temp4;
			}
			_this4.pushmod = _this4.modified = true;
			_this4.length++;
			var cx_ite18 = cb11.cbsets.head;
			while(cx_ite18 != null) {
				var cb13 = cx_ite18.elt;
				cb13.zip_listeners = true;
				cb13.invalidate_pairs();
				cx_ite18 = cx_ite18.next;
			}
			if(pre) {
				var cx_ite19 = cb11.interactors.head;
				while(cx_ite19 != null) {
					cx_ite19.elt.wake();
					cx_ite19 = cx_ite19.next;
				}
			}
			ite2 = ite2.next;
		}
	}
};
ZPP_InteractionListener.prototype.cbtype_change1 = function(cb,included,added) {
	this.cbtype_change(this.options1,cb,included,added);
};
ZPP_InteractionListener.prototype.cbtype_change2 = function(cb,included,added) {
	this.cbtype_change(this.options2,cb,included,added);
};
ZPP_InteractionListener.prototype.cbtype_change = function(options,cb,included,added) {
	this.removedFromSpace();
	if(included) {
		if(added) {
			var pre = null;
			var cx_ite = options.includes.head;
			while(cx_ite != null) {
				if(cb.id < cx_ite.elt.id) {
					break;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var _this = options.includes;
			var ret;
			if(ZNPNode_ZPP_CbType.zpp_pool == null) {
				ret = new ZNPNode_ZPP_CbType();
			} else {
				ret = ZNPNode_ZPP_CbType.zpp_pool;
				ZNPNode_ZPP_CbType.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = cb;
			var temp = ret;
			if(pre == null) {
				temp.next = _this.head;
				_this.head = temp;
			} else {
				temp.next = pre.next;
				pre.next = temp;
			}
			_this.pushmod = _this.modified = true;
			_this.length++;
		} else {
			options.includes.remove(cb);
		}
	} else if(added) {
		var pre1 = null;
		var cx_ite1 = options.excludes.head;
		while(cx_ite1 != null) {
			if(cb.id < cx_ite1.elt.id) {
				break;
			}
			pre1 = cx_ite1;
			cx_ite1 = cx_ite1.next;
		}
		var _this1 = options.excludes;
		var ret1;
		if(ZNPNode_ZPP_CbType.zpp_pool == null) {
			ret1 = new ZNPNode_ZPP_CbType();
		} else {
			ret1 = ZNPNode_ZPP_CbType.zpp_pool;
			ZNPNode_ZPP_CbType.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.elt = cb;
		var temp1 = ret1;
		if(pre1 == null) {
			temp1.next = _this1.head;
			_this1.head = temp1;
		} else {
			temp1.next = pre1.next;
			pre1.next = temp1;
		}
		_this1.pushmod = _this1.modified = true;
		_this1.length++;
	} else {
		options.excludes.remove(cb);
	}
	this.addedToSpace();
};
ZPP_InteractionListener.prototype.swapEvent = function(newev) {
	if(this.type == 3) {
		throw new js._Boot.HaxeError("Error: PreListener event can only be PRE");
	} else if(newev != 0 && newev != 1 && newev != 6) {
		throw new js._Boot.HaxeError("Error: InteractionListener event must be either BEGIN, END, ONGOING");
	}
	this.removedFromSpace();
	this.event = newev;
	this.addedToSpace();
};
ZPP_InteractionListener.prototype.__class__ = ZPP_InteractionListener;
var ZPP_OptionType = zpp_nape.callbacks.ZPP_OptionType = function() {
	this.wrap_excludes = null;
	this.wrap_includes = null;
	this.excludes = null;
	this.includes = null;
	this.handler = null;
	this.outer = null;
	this.includes = new ZNPList_ZPP_CbType();
	this.excludes = new ZNPList_ZPP_CbType();
};
ZPP_OptionType.__name__ = ["zpp_nape","callbacks","ZPP_OptionType"];
ZPP_OptionType.argument = function(val) {
	if(val == null) {
		return new OptionType();
	} else if(js.Boot.__instanceof(val,OptionType)) {
		return val;
	} else {
		return new OptionType().including(val);
	}
};
ZPP_OptionType.prototype.outer = null;
ZPP_OptionType.prototype.handler = null;
ZPP_OptionType.prototype.includes = null;
ZPP_OptionType.prototype.excludes = null;
ZPP_OptionType.prototype.wrap_includes = null;
ZPP_OptionType.prototype.wrap_excludes = null;
ZPP_OptionType.prototype.setup_includes = function() {
	this.wrap_includes = ZPP_CbTypeList.get(this.includes,true);
};
ZPP_OptionType.prototype.setup_excludes = function() {
	this.wrap_excludes = ZPP_CbTypeList.get(this.excludes,true);
};
ZPP_OptionType.prototype.excluded = function(xs) {
	return this.nonemptyintersection(xs,this.excludes);
};
ZPP_OptionType.prototype.included = function(xs) {
	return this.nonemptyintersection(xs,this.includes);
};
ZPP_OptionType.prototype.compatible = function(xs) {
	if(this.nonemptyintersection(xs,this.includes)) {
		return !this.nonemptyintersection(xs,this.excludes);
	} else {
		return false;
	}
};
ZPP_OptionType.prototype.nonemptyintersection = function(xs,ys) {
	var ret = false;
	var xite = xs.head;
	var eite = ys.head;
	while(eite != null && xite != null) {
		var ex = eite.elt;
		var xi = xite.elt;
		if(ex == xi) {
			ret = true;
			break;
		} else if(ex.id < xi.id) {
			eite = eite.next;
		} else {
			xite = xite.next;
		}
	}
	return ret;
};
ZPP_OptionType.prototype.effect_change = function(val,included,added) {
	if(included) {
		if(added) {
			var pre = null;
			var cx_ite = this.includes.head;
			while(cx_ite != null) {
				if(val.id < cx_ite.elt.id) {
					break;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var _this = this.includes;
			var ret;
			if(ZNPNode_ZPP_CbType.zpp_pool == null) {
				ret = new ZNPNode_ZPP_CbType();
			} else {
				ret = ZNPNode_ZPP_CbType.zpp_pool;
				ZNPNode_ZPP_CbType.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = val;
			var temp = ret;
			if(pre == null) {
				temp.next = _this.head;
				_this.head = temp;
			} else {
				temp.next = pre.next;
				pre.next = temp;
			}
			_this.pushmod = _this.modified = true;
			_this.length++;
		} else {
			this.includes.remove(val);
		}
	} else if(added) {
		var pre1 = null;
		var cx_ite1 = this.excludes.head;
		while(cx_ite1 != null) {
			if(val.id < cx_ite1.elt.id) {
				break;
			}
			pre1 = cx_ite1;
			cx_ite1 = cx_ite1.next;
		}
		var _this1 = this.excludes;
		var ret1;
		if(ZNPNode_ZPP_CbType.zpp_pool == null) {
			ret1 = new ZNPNode_ZPP_CbType();
		} else {
			ret1 = ZNPNode_ZPP_CbType.zpp_pool;
			ZNPNode_ZPP_CbType.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.elt = val;
		var temp1 = ret1;
		if(pre1 == null) {
			temp1.next = _this1.head;
			_this1.head = temp1;
		} else {
			temp1.next = pre1.next;
			pre1.next = temp1;
		}
		_this1.pushmod = _this1.modified = true;
		_this1.length++;
	} else {
		this.excludes.remove(val);
	}
};
ZPP_OptionType.prototype.append_type = function(list,val) {
	if(list == this.includes) {
		if(!this.includes.has(val)) {
			if(!this.excludes.has(val)) {
				if(this.handler != null) {
					this.handler(val,true,true);
				} else {
					var pre = null;
					var cx_ite = this.includes.head;
					while(cx_ite != null) {
						if(val.id < cx_ite.elt.id) {
							break;
						}
						pre = cx_ite;
						cx_ite = cx_ite.next;
					}
					var _this = this.includes;
					var ret;
					if(ZNPNode_ZPP_CbType.zpp_pool == null) {
						ret = new ZNPNode_ZPP_CbType();
					} else {
						ret = ZNPNode_ZPP_CbType.zpp_pool;
						ZNPNode_ZPP_CbType.zpp_pool = ret.next;
						ret.next = null;
					}
					ret.elt = val;
					var temp = ret;
					if(pre == null) {
						temp.next = _this.head;
						_this.head = temp;
					} else {
						temp.next = pre.next;
						pre.next = temp;
					}
					_this.pushmod = _this.modified = true;
					_this.length++;
				}
			} else if(this.handler != null) {
				this.handler(val,false,false);
			} else {
				this.excludes.remove(val);
			}
		}
	} else if(!this.excludes.has(val)) {
		if(!this.includes.has(val)) {
			if(this.handler != null) {
				this.handler(val,false,true);
			} else {
				var pre1 = null;
				var cx_ite1 = this.excludes.head;
				while(cx_ite1 != null) {
					if(val.id < cx_ite1.elt.id) {
						break;
					}
					pre1 = cx_ite1;
					cx_ite1 = cx_ite1.next;
				}
				var _this1 = this.excludes;
				var ret1;
				if(ZNPNode_ZPP_CbType.zpp_pool == null) {
					ret1 = new ZNPNode_ZPP_CbType();
				} else {
					ret1 = ZNPNode_ZPP_CbType.zpp_pool;
					ZNPNode_ZPP_CbType.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.elt = val;
				var temp1 = ret1;
				if(pre1 == null) {
					temp1.next = _this1.head;
					_this1.head = temp1;
				} else {
					temp1.next = pre1.next;
					pre1.next = temp1;
				}
				_this1.pushmod = _this1.modified = true;
				_this1.length++;
			}
		} else if(this.handler != null) {
			this.handler(val,true,false);
		} else {
			this.includes.remove(val);
		}
	}
};
ZPP_OptionType.prototype.set = function(options) {
	if(options != this) {
		while(this.includes.head != null) this.append_type(this.excludes,this.includes.head.elt);
		while(this.excludes.head != null) this.append_type(this.includes,this.excludes.head.elt);
		var cx_ite = options.excludes.head;
		while(cx_ite != null) {
			this.append_type(this.excludes,cx_ite.elt);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = options.includes.head;
		while(cx_ite1 != null) {
			this.append_type(this.includes,cx_ite1.elt);
			cx_ite1 = cx_ite1.next;
		}
	}
	return this;
};
ZPP_OptionType.prototype.append = function(list,val) {
	if(val == null) {
		throw new js._Boot.HaxeError("Error: Cannot append null, only CbType and CbType list values");
	}
	if(js.Boot.__instanceof(val,CbType)) {
		var cb = val;
		this.append_type(list,cb.zpp_inner);
	} else if(js.Boot.__instanceof(val,CbTypeList)) {
		var cbs = val;
		cbs.zpp_inner.valmod();
		var _g = CbTypeIterator.get(cbs);
		while(true) {
			_g.zpp_inner.zpp_inner.valmod();
			var _this = _g.zpp_inner;
			_this.zpp_inner.valmod();
			if(_this.zpp_inner.zip_length) {
				_this.zpp_inner.zip_length = false;
				_this.zpp_inner.user_length = _this.zpp_inner.inner.length;
			}
			var length = _this.zpp_inner.user_length;
			_g.zpp_critical = true;
			var tmp;
			if(_g.zpp_i < length) {
				tmp = true;
			} else {
				_g.zpp_next = CbTypeIterator.zpp_pool;
				CbTypeIterator.zpp_pool = _g;
				_g.zpp_inner = null;
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			_g.zpp_critical = false;
			this.append_type(list,_g.zpp_inner.at(_g.zpp_i++).zpp_inner);
		}
	} else if((val instanceof Array) && val.__enum__ == null) {
		var cbs1 = val;
		var _g1 = 0;
		while(_g1 < cbs1.length) {
			var cb1 = cbs1[_g1];
			++_g1;
			if(!js.Boot.__instanceof(cb1,CbType)) {
				throw new js._Boot.HaxeError("Error: Cannot append non-CbType or CbType list value");
			}
			var cbx = cb1;
			this.append_type(list,cbx.zpp_inner);
		}
	} else {
		throw new js._Boot.HaxeError("Error: Cannot append non-CbType or CbType list value");
	}
};
ZPP_OptionType.prototype.__class__ = ZPP_OptionType;
var ZPP_Constraint = zpp_nape.constraint.ZPP_Constraint = function() {
	this.pre_dt = 0.0;
	this.wrap_cbTypes = null;
	this.cbSet = null;
	this.cbTypes = null;
	this.__velocity = false;
	this.ignore = false;
	this.component = null;
	this.removeOnBreak = false;
	this.breakUnderError = false;
	this.breakUnderForce = false;
	this.maxError = 0.0;
	this.maxForce = 0.0;
	this.damping = 0.0;
	this.frequency = 0.0;
	this.stiff = false;
	this.active = false;
	this.space = null;
	this.compound = null;
	this.userData = null;
	this.id = 0;
	this.outer = null;
	this.__velocity = false;
	this.id = zpp_nape.ZPP_ID.Constraint();
	this.stiff = true;
	this.active = true;
	this.ignore = false;
	this.frequency = 10;
	this.damping = 1;
	this.maxForce = Infinity;
	this.maxError = Infinity;
	this.breakUnderForce = false;
	this.removeOnBreak = true;
	this.pre_dt = -1.0;
	this.cbTypes = new ZNPList_ZPP_CbType();
};
ZPP_Constraint.__name__ = ["zpp_nape","constraint","ZPP_Constraint"];
ZPP_Constraint.prototype.outer = null;
ZPP_Constraint.prototype.clear = function() {
};
ZPP_Constraint.prototype.id = null;
ZPP_Constraint.prototype.userData = null;
ZPP_Constraint.prototype.compound = null;
ZPP_Constraint.prototype.space = null;
ZPP_Constraint.prototype.active = null;
ZPP_Constraint.prototype.stiff = null;
ZPP_Constraint.prototype.frequency = null;
ZPP_Constraint.prototype.damping = null;
ZPP_Constraint.prototype.maxForce = null;
ZPP_Constraint.prototype.maxError = null;
ZPP_Constraint.prototype.breakUnderForce = null;
ZPP_Constraint.prototype.breakUnderError = null;
ZPP_Constraint.prototype.removeOnBreak = null;
ZPP_Constraint.prototype.component = null;
ZPP_Constraint.prototype.ignore = null;
ZPP_Constraint.prototype.__velocity = null;
ZPP_Constraint.prototype.immutable_midstep = function(name) {
	if(this.space != null && this.space.midstep) {
		throw new js._Boot.HaxeError("Error: Constraint::" + name + " cannot be set during space step()");
	}
};
ZPP_Constraint.prototype.cbTypes = null;
ZPP_Constraint.prototype.cbSet = null;
ZPP_Constraint.prototype.wrap_cbTypes = null;
ZPP_Constraint.prototype.setupcbTypes = function() {
	this.wrap_cbTypes = ZPP_CbTypeList.get(this.cbTypes);
	this.wrap_cbTypes.zpp_inner.adder = $bind(this,this.wrap_cbTypes_adder);
	this.wrap_cbTypes.zpp_inner.subber = $bind(this,this.wrap_cbTypes_subber);
	this.wrap_cbTypes.zpp_inner.dontremove = true;
	this.wrap_cbTypes.zpp_inner._modifiable = $bind(this,this.immutable_cbTypes);
};
ZPP_Constraint.prototype.immutable_cbTypes = function() {
	this.immutable_midstep("Constraint::cbTypes");
};
ZPP_Constraint.prototype.wrap_cbTypes_subber = function(pcb) {
	var cb = pcb.zpp_inner;
	if(this.cbTypes.has(cb)) {
		if(this.space != null) {
			this.dealloc_cbSet();
			cb.constraints.remove(this);
		}
		this.cbTypes.remove(cb);
		if(this.space != null) {
			this.alloc_cbSet();
			this.wake();
		}
	}
};
ZPP_Constraint.prototype.wrap_cbTypes_adder = function(cb) {
	this.insert_cbtype(cb.zpp_inner);
	return false;
};
ZPP_Constraint.prototype.insert_cbtype = function(cb) {
	if(!this.cbTypes.has(cb)) {
		if(this.space != null) {
			this.dealloc_cbSet();
			cb.constraints.add(this);
		}
		var pre = null;
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			if(cb.id < cx_ite.elt.id) {
				break;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		var _this = this.cbTypes;
		var ret;
		if(ZNPNode_ZPP_CbType.zpp_pool == null) {
			ret = new ZNPNode_ZPP_CbType();
		} else {
			ret = ZNPNode_ZPP_CbType.zpp_pool;
			ZNPNode_ZPP_CbType.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = cb;
		var temp = ret;
		if(pre == null) {
			temp.next = _this.head;
			_this.head = temp;
		} else {
			temp.next = pre.next;
			pre.next = temp;
		}
		_this.pushmod = _this.modified = true;
		_this.length++;
		if(this.space != null) {
			this.alloc_cbSet();
			this.wake();
		}
	}
};
ZPP_Constraint.prototype.alloc_cbSet = function() {
	if((this.cbSet = this.space.cbsets.get(this.cbTypes)) != null) {
		this.cbSet.count++;
		this.cbSet.constraints.add(this);
	}
};
ZPP_Constraint.prototype.dealloc_cbSet = function() {
	if(this.cbSet != null) {
		this.cbSet.constraints.remove(this);
		if(--this.cbSet.count == 0) {
			this.space.cbsets.remove(this.cbSet);
			var o = this.cbSet;
			o.listeners.clear();
			o.zip_listeners = true;
			o.bodylisteners.clear();
			o.zip_bodylisteners = true;
			o.conlisteners.clear();
			o.zip_conlisteners = true;
			while(o.cbTypes.head != null) o.cbTypes.pop_unsafe().cbsets.remove(o);
			o.next = ZPP_CbSet.zpp_pool;
			ZPP_CbSet.zpp_pool = o;
		}
		this.cbSet = null;
	}
};
ZPP_Constraint.prototype.activate = function() {
	if(this.space != null) {
		this.activeInSpace();
	}
};
ZPP_Constraint.prototype.deactivate = function() {
	if(this.space != null) {
		this.inactiveOrOutSpace();
	}
};
ZPP_Constraint.prototype.addedToSpace = function() {
	if(this.active) {
		this.activeInSpace();
	}
	this.activeBodies();
	var cx_ite = this.cbTypes.head;
	while(cx_ite != null) {
		cx_ite.elt.constraints.add(this);
		cx_ite = cx_ite.next;
	}
};
ZPP_Constraint.prototype.removedFromSpace = function() {
	if(this.active) {
		this.inactiveOrOutSpace();
	}
	this.inactiveBodies();
	var cx_ite = this.cbTypes.head;
	while(cx_ite != null) {
		cx_ite.elt.constraints.remove(this);
		cx_ite = cx_ite.next;
	}
};
ZPP_Constraint.prototype.activeInSpace = function() {
	this.alloc_cbSet();
	if(ZPP_Component.zpp_pool == null) {
		this.component = new ZPP_Component();
	} else {
		this.component = ZPP_Component.zpp_pool;
		ZPP_Component.zpp_pool = this.component.next;
		this.component.next = null;
	}
	this.component.isBody = false;
	this.component.constraint = this;
};
ZPP_Constraint.prototype.inactiveOrOutSpace = function() {
	this.dealloc_cbSet();
	var o = this.component;
	o.body = null;
	o.constraint = null;
	o.next = ZPP_Component.zpp_pool;
	ZPP_Component.zpp_pool = o;
	this.component = null;
};
ZPP_Constraint.prototype.activeBodies = function() {
};
ZPP_Constraint.prototype.inactiveBodies = function() {
};
ZPP_Constraint.prototype.clearcache = function() {
};
ZPP_Constraint.prototype.validate = function() {
};
ZPP_Constraint.prototype.wake_connected = function() {
};
ZPP_Constraint.prototype.forest = function() {
};
ZPP_Constraint.prototype.pair_exists = function(id,di) {
	return false;
};
ZPP_Constraint.prototype.broken = function() {
};
ZPP_Constraint.prototype.warmStart = function() {
};
ZPP_Constraint.prototype.pre_dt = null;
ZPP_Constraint.prototype.preStep = function(dt) {
	return false;
};
ZPP_Constraint.prototype.applyImpulseVel = function() {
	return false;
};
ZPP_Constraint.prototype.applyImpulsePos = function() {
	return false;
};
ZPP_Constraint.prototype.wake = function() {
	if(this.space != null) {
		this.space.wake_constraint(this);
	}
};
ZPP_Constraint.prototype.draw = function(g) {
};
ZPP_Constraint.prototype.copy = function(dict,todo) {
	return null;
};
ZPP_Constraint.prototype.copyto = function(ret) {
	var me = this.outer;
	if(me.zpp_inner.wrap_cbTypes == null) {
		me.zpp_inner.setupcbTypes();
	}
	var _this = me.zpp_inner.wrap_cbTypes;
	_this.zpp_inner.valmod();
	var _g = CbTypeIterator.get(_this);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this1 = _g.zpp_inner;
		_this1.zpp_inner.valmod();
		if(_this1.zpp_inner.zip_length) {
			_this1.zpp_inner.zip_length = false;
			_this1.zpp_inner.user_length = _this1.zpp_inner.inner.length;
		}
		var length = _this1.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = CbTypeIterator.zpp_pool;
			CbTypeIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var cb = _g.zpp_inner.at(_g.zpp_i++);
		if(ret.zpp_inner.wrap_cbTypes == null) {
			ret.zpp_inner.setupcbTypes();
		}
		var _this2 = ret.zpp_inner.wrap_cbTypes;
		if(_this2.zpp_inner.reverse_flag) {
			_this2.push(cb);
		} else {
			_this2.unshift(cb);
		}
	}
	ret.zpp_inner.removeOnBreak = me.zpp_inner.removeOnBreak;
	var breakUnderError = me.zpp_inner.breakUnderError;
	if(ret.zpp_inner.breakUnderError != breakUnderError) {
		ret.zpp_inner.breakUnderError = breakUnderError;
		ret.zpp_inner.wake();
	}
	var breakUnderForce = me.zpp_inner.breakUnderForce;
	if(ret.zpp_inner.breakUnderForce != breakUnderForce) {
		ret.zpp_inner.breakUnderForce = breakUnderForce;
		ret.zpp_inner.wake();
	}
	var maxError = me.zpp_inner.maxError;
	if(maxError != maxError) {
		throw new js._Boot.HaxeError("Error: Constraint::maxError cannot be NaN");
	}
	if(maxError < 0) {
		throw new js._Boot.HaxeError("Error: Constraint::maxError must be >=0");
	}
	if(ret.zpp_inner.maxError != maxError) {
		ret.zpp_inner.maxError = maxError;
		ret.zpp_inner.wake();
	}
	var maxForce = me.zpp_inner.maxForce;
	if(maxForce != maxForce) {
		throw new js._Boot.HaxeError("Error: Constraint::maxForce cannot be NaN");
	}
	if(maxForce < 0) {
		throw new js._Boot.HaxeError("Error: Constraint::maxForce must be >=0");
	}
	if(ret.zpp_inner.maxForce != maxForce) {
		ret.zpp_inner.maxForce = maxForce;
		ret.zpp_inner.wake();
	}
	var damping = me.zpp_inner.damping;
	if(damping != damping) {
		throw new js._Boot.HaxeError("Error: Constraint::Damping cannot be Nan");
	}
	if(damping < 0) {
		throw new js._Boot.HaxeError("Error: Constraint::Damping must be >=0");
	}
	if(ret.zpp_inner.damping != damping) {
		ret.zpp_inner.damping = damping;
		if(!ret.zpp_inner.stiff) {
			ret.zpp_inner.wake();
		}
	}
	var frequency = me.zpp_inner.frequency;
	if(frequency != frequency) {
		throw new js._Boot.HaxeError("Error: Constraint::Frequency cannot be NaN");
	}
	if(frequency <= 0) {
		throw new js._Boot.HaxeError("Error: Constraint::Frequency must be >0");
	}
	if(ret.zpp_inner.frequency != frequency) {
		ret.zpp_inner.frequency = frequency;
		if(!ret.zpp_inner.stiff) {
			ret.zpp_inner.wake();
		}
	}
	var stiff = me.zpp_inner.stiff;
	if(ret.zpp_inner.stiff != stiff) {
		ret.zpp_inner.stiff = stiff;
		ret.zpp_inner.wake();
	}
	var ignore = me.zpp_inner.ignore;
	if(ret.zpp_inner.ignore != ignore) {
		ret.zpp_inner.ignore = ignore;
		ret.zpp_inner.wake();
	}
	var active = me.zpp_inner.active;
	if(ret.zpp_inner.active != active) {
		if(ret.zpp_inner.component != null) {
			ret.zpp_inner.component.woken = false;
		}
		ret.zpp_inner.clearcache();
		if(active) {
			ret.zpp_inner.active = active;
			ret.zpp_inner.activate();
			if(ret.zpp_inner.space != null) {
				if(ret.zpp_inner.component != null) {
					ret.zpp_inner.component.sleeping = true;
				}
				ret.zpp_inner.space.wake_constraint(ret.zpp_inner,true);
			}
		} else {
			if(ret.zpp_inner.space != null) {
				ret.zpp_inner.wake();
				ret.zpp_inner.space.live_constraints.remove(ret.zpp_inner);
			}
			ret.zpp_inner.active = active;
			ret.zpp_inner.deactivate();
		}
	}
};
ZPP_Constraint.prototype.__class__ = ZPP_Constraint;
var ZPP_AngleJoint = zpp_nape.constraint.ZPP_AngleJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.b2 = null;
	this.b1 = null;
	this.scale = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.ratio = 0.0;
	this.outer_zn = null;
	ZPP_Constraint.call(this);
	this.ratio = 1;
	this.jAcc = 0;
	this.slack = false;
	this.jMax = Infinity;
	this.stepped = false;
};
ZPP_AngleJoint.__name__ = ["zpp_nape","constraint","ZPP_AngleJoint"];
ZPP_AngleJoint.__super__ = ZPP_Constraint;
// for(var k in ZPP_Constraint.prototype ) ZPP_AngleJoint.prototype[k] = ZPP_Constraint.prototype[k];
ZPP_AngleJoint.prototype = Object.create(ZPP_Constraint.prototype);
ZPP_AngleJoint.prototype.outer_zn = null;
ZPP_AngleJoint.prototype.ratio = null;
ZPP_AngleJoint.prototype.jointMin = null;
ZPP_AngleJoint.prototype.jointMax = null;
ZPP_AngleJoint.prototype.slack = null;
ZPP_AngleJoint.prototype.equal = null;
ZPP_AngleJoint.prototype.scale = null;
ZPP_AngleJoint.prototype.is_slack = function() {
	var slack;
	var C = this.ratio * this.b2.rot - this.b1.rot;
	if(this.equal) {
		slack = false;
		this.scale = 1.0;
	} else if(C < this.jointMin) {
		this.scale = -1.0;
		slack = false;
	} else if(C > this.jointMax) {
		C -= this.jointMax;
		this.scale = 1.0;
		slack = false;
	} else {
		this.scale = 0.0;
		C = 0;
		slack = true;
	}
	return slack;
};
ZPP_AngleJoint.prototype.bodyImpulse = function(b) {
	if(this.stepped) {
		if(b == this.b1) {
			return Vec3.get(0,0,-this.scale * this.jAcc);
		} else {
			return Vec3.get(0,0,this.ratio * this.scale * this.jAcc);
		}
	} else {
		return Vec3.get(0,0,0);
	}
};
ZPP_AngleJoint.prototype.activeBodies = function() {
	if(this.b1 != null) {
		this.b1.constraints.add(this);
	}
	if(this.b2 != this.b1) {
		if(this.b2 != null) {
			this.b2.constraints.add(this);
		}
	}
};
ZPP_AngleJoint.prototype.inactiveBodies = function() {
	if(this.b1 != null) {
		this.b1.constraints.remove(this);
	}
	if(this.b2 != this.b1) {
		if(this.b2 != null) {
			this.b2.constraints.remove(this);
		}
	}
};
ZPP_AngleJoint.prototype.b1 = null;
ZPP_AngleJoint.prototype.b2 = null;
ZPP_AngleJoint.prototype.kMass = null;
ZPP_AngleJoint.prototype.jAcc = null;
ZPP_AngleJoint.prototype.jMax = null;
ZPP_AngleJoint.prototype.gamma = null;
ZPP_AngleJoint.prototype.bias = null;
ZPP_AngleJoint.prototype.stepped = null;
ZPP_AngleJoint.prototype.copy = function(dict,todo) {
	var ret = new AngleJoint(null,null,this.jointMin,this.jointMax,this.ratio);
	this.copyto(ret);
	if(dict != null && this.b1 != null) {
		var b = null;
		var _g = 0;
		while(_g < dict.length) {
			var idc = dict[_g];
			++_g;
			if(idc.id == this.b1.id) {
				b = idc.bc;
				break;
			}
		}
		if(b != null) {
			ret.zpp_inner_zn.b1 = b.zpp_inner;
		} else {
			todo.push(ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
	}
	if(dict != null && this.b2 != null) {
		var b2 = null;
		var _g1 = 0;
		while(_g1 < dict.length) {
			var idc1 = dict[_g1];
			++_g1;
			if(idc1.id == this.b2.id) {
				b2 = idc1.bc;
				break;
			}
		}
		if(b2 != null) {
			ret.zpp_inner_zn.b2 = b2.zpp_inner;
		} else {
			todo.push(ZPP_CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
	}
	return ret;
};
ZPP_AngleJoint.prototype.validate = function() {
	if(this.b1 == null || this.b2 == null) {
		throw new js._Boot.HaxeError("Error: AngleJoint cannot be simulated null bodies");
	}
	if(this.b1 == this.b2) {
		throw new js._Boot.HaxeError("Error: AngleJoint cannot be simulated with body1 == body2");
	}
	if(this.b1.space != this.space || this.b2.space != this.space) {
		throw new js._Boot.HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
	}
	if(this.jointMin > this.jointMax) {
		throw new js._Boot.HaxeError("Error: AngleJoint must have jointMin <= jointMax");
	}
	if(this.b1.type != 2 && this.b2.type != 2) {
		throw new js._Boot.HaxeError("Error: Constraints cannot have both bodies non-dynamic");
	}
};
ZPP_AngleJoint.prototype.wake_connected = function() {
	if(this.b1 != null && this.b1.type == 2) {
		this.b1.wake();
	}
	if(this.b2 != null && this.b2.type == 2) {
		this.b2.wake();
	}
};
ZPP_AngleJoint.prototype.forest = function() {
	if(this.b1.type == 2) {
		var xr;
		if(this.b1.component == this.b1.component.parent) {
			xr = this.b1.component;
		} else {
			var obj = this.b1.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt1 = stack.parent;
				stack.parent = obj;
				stack = nxt1;
			}
			xr = obj;
		}
		var yr;
		if(this.component == this.component.parent) {
			yr = this.component;
		} else {
			var obj1 = this.component;
			var stack1 = null;
			while(obj1 != obj1.parent) {
				var nxt2 = obj1.parent;
				obj1.parent = stack1;
				stack1 = obj1;
				obj1 = nxt2;
			}
			while(stack1 != null) {
				var nxt3 = stack1.parent;
				stack1.parent = obj1;
				stack1 = nxt3;
			}
			yr = obj1;
		}
		if(xr != yr) {
			if(xr.rank < yr.rank) {
				xr.parent = yr;
			} else if(xr.rank > yr.rank) {
				yr.parent = xr;
			} else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
	if(this.b2.type == 2) {
		var xr1;
		if(this.b2.component == this.b2.component.parent) {
			xr1 = this.b2.component;
		} else {
			var obj2 = this.b2.component;
			var stack2 = null;
			while(obj2 != obj2.parent) {
				var nxt4 = obj2.parent;
				obj2.parent = stack2;
				stack2 = obj2;
				obj2 = nxt4;
			}
			while(stack2 != null) {
				var nxt5 = stack2.parent;
				stack2.parent = obj2;
				stack2 = nxt5;
			}
			xr1 = obj2;
		}
		var yr1;
		if(this.component == this.component.parent) {
			yr1 = this.component;
		} else {
			var obj3 = this.component;
			var stack3 = null;
			while(obj3 != obj3.parent) {
				var nxt6 = obj3.parent;
				obj3.parent = stack3;
				stack3 = obj3;
				obj3 = nxt6;
			}
			while(stack3 != null) {
				var nxt7 = stack3.parent;
				stack3.parent = obj3;
				stack3 = nxt7;
			}
			yr1 = obj3;
		}
		if(xr1 != yr1) {
			if(xr1.rank < yr1.rank) {
				xr1.parent = yr1;
			} else if(xr1.rank > yr1.rank) {
				yr1.parent = xr1;
			} else {
				yr1.parent = xr1;
				xr1.rank++;
			}
		}
	}
};
ZPP_AngleJoint.prototype.pair_exists = function(id,di) {
	if(!(this.b1.id == id && this.b2.id == di)) {
		if(this.b1.id == di) {
			return this.b2.id == id;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
ZPP_AngleJoint.prototype.clearcache = function() {
	this.jAcc = 0;
	this.pre_dt = -1.0;
	this.slack = false;
};
ZPP_AngleJoint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) {
		this.pre_dt = dt;
	}
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.stepped = true;
	this.equal = this.jointMin == this.jointMax;
	var C = this.ratio * this.b2.rot - this.b1.rot;
	if(this.equal) {
		C -= this.jointMax;
		this.slack = false;
		this.scale = 1.0;
	} else if(C < this.jointMin) {
		C = this.jointMin - C;
		this.scale = -1.0;
		this.slack = false;
	} else if(C > this.jointMax) {
		C -= this.jointMax;
		this.scale = 1.0;
		this.slack = false;
	} else {
		this.scale = 0.0;
		C = 0;
		this.slack = true;
	}
	var C1 = C;
	if(!this.slack) {
		this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
		if(this.kMass != 0) {
			this.kMass = 1 / this.kMass;
		} else {
			this.jAcc = 0;
		}
		if(!this.stiff) {
			if(this.breakUnderError && C1 * C1 > this.maxError * this.maxError) {
				return true;
			}
			var biasCoef;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			this.kMass *= ig;
			this.bias = -C1 * biasCoef;
			if(this.bias < -this.maxError) {
				this.bias = -this.maxError;
			} else if(this.bias > this.maxError) {
				this.bias = this.maxError;
			}
		} else {
			this.bias = 0;
			this.gamma = 0;
		}
		this.jAcc *= dtratio;
		this.jMax = this.maxForce * dt;
	}
	return false;
};
ZPP_AngleJoint.prototype.warmStart = function() {
	if(!this.slack) {
		this.b1.angvel -= this.scale * this.b1.iinertia * this.jAcc;
		this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * this.jAcc;
	}
};
ZPP_AngleJoint.prototype.applyImpulseVel = function() {
	if(this.slack) {
		return false;
	}
	var j = this.kMass * (this.bias - this.scale * (this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel)) - this.jAcc * this.gamma;
	var jOld = this.jAcc;
	this.jAcc += j;
	if(!this.equal && this.jAcc > 0) {
		this.jAcc = 0;
	}
	if(this.breakUnderForce && (this.jAcc > this.jMax || this.jAcc < -this.jMax)) {
		return true;
	}
	if(!this.stiff) {
		if(this.jAcc > this.jMax) {
			this.jAcc = this.jMax;
		} else if(this.jAcc < -this.jMax) {
			this.jAcc = -this.jMax;
		}
	}
	j = this.jAcc - jOld;
	this.b1.angvel -= this.scale * this.b1.iinertia * j;
	this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * j;
	return false;
};
ZPP_AngleJoint.prototype.applyImpulsePos = function() {
	var E;
	var j;
	var slack;
	var C = this.ratio * this.b2.rot - this.b1.rot;
	if(this.equal) {
		C -= this.jointMax;
		slack = false;
		this.scale = 1.0;
	} else if(C < this.jointMin) {
		C = this.jointMin - C;
		this.scale = -1.0;
		slack = false;
	} else if(C > this.jointMax) {
		C -= this.jointMax;
		this.scale = 1.0;
		slack = false;
	} else {
		this.scale = 0.0;
		C = 0;
		slack = true;
	}
	E = C;
	if(!slack) {
		if(this.breakUnderError && E * E > this.maxError * this.maxError) {
			return true;
		}
		E *= 0.5;
		j = -E * this.kMass;
		if(this.equal || j < 0) {
			var _this = this.b1;
			var dr = -this.scale * j * this.b1.iinertia;
			_this.rot += dr;
			if(dr * dr > 0.0001) {
				_this.axisx = Math.sin(_this.rot);
				_this.axisy = Math.cos(_this.rot);
			} else {
				var d2 = dr * dr;
				var p = 1 - 0.5 * d2;
				var m = 1 - d2 * d2 / 8;
				var nx = (p * _this.axisx + dr * _this.axisy) * m;
				_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
				_this.axisx = nx;
			}
			var _this1 = this.b2;
			var dr1 = this.ratio * this.scale * j * this.b2.iinertia;
			_this1.rot += dr1;
			if(dr1 * dr1 > 0.0001) {
				_this1.axisx = Math.sin(_this1.rot);
				_this1.axisy = Math.cos(_this1.rot);
			} else {
				var d21 = dr1 * dr1;
				var p1 = 1 - 0.5 * d21;
				var m1 = 1 - d21 * d21 / 8;
				var nx1 = (p1 * _this1.axisx + dr1 * _this1.axisy) * m1;
				_this1.axisy = (p1 * _this1.axisy - dr1 * _this1.axisx) * m1;
				_this1.axisx = nx1;
			}
		}
	}
	return false;
};
ZPP_AngleJoint.prototype.draw = function(g) {
};
ZPP_AngleJoint.prototype.__class__ = ZPP_AngleJoint;
var ZPP_CopyHelper = zpp_nape.constraint.ZPP_CopyHelper = function() {
	this.cb = null;
	this.bc = null;
	this.id = 0;
};
ZPP_CopyHelper.__name__ = ["zpp_nape","constraint","ZPP_CopyHelper"];
ZPP_CopyHelper.dict = function(id,bc) {
	var ret = new ZPP_CopyHelper();
	ret.id = id;
	ret.bc = bc;
	return ret;
};
ZPP_CopyHelper.todo = function(id,cb) {
	var ret = new ZPP_CopyHelper();
	ret.id = id;
	ret.cb = cb;
	return ret;
};
ZPP_CopyHelper.prototype.id = null;
ZPP_CopyHelper.prototype.bc = null;
ZPP_CopyHelper.prototype.cb = null;
ZPP_CopyHelper.prototype.__class__ = ZPP_CopyHelper;
var ZPP_DistanceJoint = zpp_nape.constraint.ZPP_DistanceJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.outer_zn = null;
	ZPP_Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.jAcc = 0;
	this.jMax = Infinity;
	this.stepped = false;
	this.cx1 = this.cx2 = 0;
};
ZPP_DistanceJoint.__name__ = ["zpp_nape","constraint","ZPP_DistanceJoint"];
ZPP_DistanceJoint.__super__ = ZPP_Constraint;
// for(var k in ZPP_Constraint.prototype ) ZPP_DistanceJoint.prototype[k] = ZPP_Constraint.prototype[k];
ZPP_DistanceJoint.prototype = Object.create(ZPP_Constraint.prototype);
ZPP_DistanceJoint.prototype.outer_zn = null;
ZPP_DistanceJoint.prototype.jointMin = null;
ZPP_DistanceJoint.prototype.jointMax = null;
ZPP_DistanceJoint.prototype.slack = null;
ZPP_DistanceJoint.prototype.equal = null;
ZPP_DistanceJoint.prototype.is_slack = function() {
	var slack;
	this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var nx = 0.0;
	var ny = 0.0;
	nx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
	ny = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
	var C = nx * nx + ny * ny;
	if(C < Config.epsilon) {
		slack = true;
	} else {
		C = Math.sqrt(C);
		var t = 1.0 / C;
		nx *= t;
		ny *= t;
		if(this.equal) {
			slack = false;
		} else if(C < this.jointMin) {
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			slack = false;
		} else {
			nx = 0;
			ny = 0;
			C = 0;
			slack = true;
		}
	}
	return slack;
};
ZPP_DistanceJoint.prototype.nx = null;
ZPP_DistanceJoint.prototype.ny = null;
ZPP_DistanceJoint.prototype.cx1 = null;
ZPP_DistanceJoint.prototype.cx2 = null;
ZPP_DistanceJoint.prototype.bodyImpulse = function(b) {
	if(this.stepped) {
		if(b == this.b1) {
			return Vec3.get(-this.jAcc * this.nx,-this.jAcc * this.ny,-this.cx1 * this.jAcc);
		} else {
			return Vec3.get(this.jAcc * this.nx,this.jAcc * this.ny,this.cx2 * this.jAcc);
		}
	} else {
		return Vec3.get(0,0,0);
	}
};
ZPP_DistanceJoint.prototype.activeBodies = function() {
	if(this.b1 != null) {
		this.b1.constraints.add(this);
	}
	if(this.b2 != this.b1) {
		if(this.b2 != null) {
			this.b2.constraints.add(this);
		}
	}
};
ZPP_DistanceJoint.prototype.inactiveBodies = function() {
	if(this.b1 != null) {
		this.b1.constraints.remove(this);
	}
	if(this.b2 != this.b1) {
		if(this.b2 != null) {
			this.b2.constraints.remove(this);
		}
	}
};
ZPP_DistanceJoint.prototype.b1 = null;
ZPP_DistanceJoint.prototype.a1localx = null;
ZPP_DistanceJoint.prototype.a1localy = null;
ZPP_DistanceJoint.prototype.a1relx = null;
ZPP_DistanceJoint.prototype.a1rely = null;
ZPP_DistanceJoint.prototype.validate_a1 = function() {
	this.wrap_a1.zpp_inner.x = this.a1localx;
	this.wrap_a1.zpp_inner.y = this.a1localy;
};
ZPP_DistanceJoint.prototype.invalidate_a1 = function(x) {
	this.immutable_midstep("Constraint::" + "a1");
	this.a1localx = x.x;
	this.a1localy = x.y;
	this.wake();
};
ZPP_DistanceJoint.prototype.setup_a1 = function() {
	var x = this.a1localx;
	var y = this.a1localy;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_a1 = ret;
	this.wrap_a1.zpp_inner._inuse = true;
	this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
	this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
};
ZPP_DistanceJoint.prototype.wrap_a1 = null;
ZPP_DistanceJoint.prototype.b2 = null;
ZPP_DistanceJoint.prototype.a2localx = null;
ZPP_DistanceJoint.prototype.a2localy = null;
ZPP_DistanceJoint.prototype.a2relx = null;
ZPP_DistanceJoint.prototype.a2rely = null;
ZPP_DistanceJoint.prototype.validate_a2 = function() {
	this.wrap_a2.zpp_inner.x = this.a2localx;
	this.wrap_a2.zpp_inner.y = this.a2localy;
};
ZPP_DistanceJoint.prototype.invalidate_a2 = function(x) {
	this.immutable_midstep("Constraint::" + "a2");
	this.a2localx = x.x;
	this.a2localy = x.y;
	this.wake();
};
ZPP_DistanceJoint.prototype.setup_a2 = function() {
	var x = this.a2localx;
	var y = this.a2localy;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_a2 = ret;
	this.wrap_a2.zpp_inner._inuse = true;
	this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
	this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
};
ZPP_DistanceJoint.prototype.wrap_a2 = null;
ZPP_DistanceJoint.prototype.kMass = null;
ZPP_DistanceJoint.prototype.jAcc = null;
ZPP_DistanceJoint.prototype.jMax = null;
ZPP_DistanceJoint.prototype.gamma = null;
ZPP_DistanceJoint.prototype.bias = null;
ZPP_DistanceJoint.prototype.stepped = null;
ZPP_DistanceJoint.prototype.copy = function(dict,todo) {
	var _this = this.outer_zn;
	if(_this.zpp_inner_zn.wrap_a1 == null) {
		_this.zpp_inner_zn.setup_a1();
	}
	var tmp = _this.zpp_inner_zn.wrap_a1;
	var _this1 = this.outer_zn;
	if(_this1.zpp_inner_zn.wrap_a2 == null) {
		_this1.zpp_inner_zn.setup_a2();
	}
	var ret = new DistanceJoint(null,null,tmp,_this1.zpp_inner_zn.wrap_a2,this.jointMin,this.jointMax);
	this.copyto(ret);
	if(dict != null && this.b1 != null) {
		var b = null;
		var _g = 0;
		while(_g < dict.length) {
			var idc = dict[_g];
			++_g;
			if(idc.id == this.b1.id) {
				b = idc.bc;
				break;
			}
		}
		if(b != null) {
			ret.zpp_inner_zn.b1 = b.zpp_inner;
		} else {
			todo.push(ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
	}
	if(dict != null && this.b2 != null) {
		var b2 = null;
		var _g1 = 0;
		while(_g1 < dict.length) {
			var idc1 = dict[_g1];
			++_g1;
			if(idc1.id == this.b2.id) {
				b2 = idc1.bc;
				break;
			}
		}
		if(b2 != null) {
			ret.zpp_inner_zn.b2 = b2.zpp_inner;
		} else {
			todo.push(ZPP_CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
	}
	return ret;
};
ZPP_DistanceJoint.prototype.validate = function() {
	if(this.b1 == null || this.b2 == null) {
		throw new js._Boot.HaxeError("Error: DistanceJoint cannot be simulated null bodies");
	}
	if(this.b1 == this.b2) {
		throw new js._Boot.HaxeError("Error: DistanceJoint cannot be simulated with body1 == body2");
	}
	if(this.b1.space != this.space || this.b2.space != this.space) {
		throw new js._Boot.HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
	}
	if(this.jointMin > this.jointMax) {
		throw new js._Boot.HaxeError("Error: DistanceJoint must have jointMin <= jointMax");
	}
	if(this.b1.type != 2 && this.b2.type != 2) {
		throw new js._Boot.HaxeError("Error: Constraints cannot have both bodies non-dynamic");
	}
};
ZPP_DistanceJoint.prototype.wake_connected = function() {
	if(this.b1 != null && this.b1.type == 2) {
		this.b1.wake();
	}
	if(this.b2 != null && this.b2.type == 2) {
		this.b2.wake();
	}
};
ZPP_DistanceJoint.prototype.forest = function() {
	if(this.b1.type == 2) {
		var xr;
		if(this.b1.component == this.b1.component.parent) {
			xr = this.b1.component;
		} else {
			var obj = this.b1.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt1 = stack.parent;
				stack.parent = obj;
				stack = nxt1;
			}
			xr = obj;
		}
		var yr;
		if(this.component == this.component.parent) {
			yr = this.component;
		} else {
			var obj1 = this.component;
			var stack1 = null;
			while(obj1 != obj1.parent) {
				var nxt2 = obj1.parent;
				obj1.parent = stack1;
				stack1 = obj1;
				obj1 = nxt2;
			}
			while(stack1 != null) {
				var nxt3 = stack1.parent;
				stack1.parent = obj1;
				stack1 = nxt3;
			}
			yr = obj1;
		}
		if(xr != yr) {
			if(xr.rank < yr.rank) {
				xr.parent = yr;
			} else if(xr.rank > yr.rank) {
				yr.parent = xr;
			} else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
	if(this.b2.type == 2) {
		var xr1;
		if(this.b2.component == this.b2.component.parent) {
			xr1 = this.b2.component;
		} else {
			var obj2 = this.b2.component;
			var stack2 = null;
			while(obj2 != obj2.parent) {
				var nxt4 = obj2.parent;
				obj2.parent = stack2;
				stack2 = obj2;
				obj2 = nxt4;
			}
			while(stack2 != null) {
				var nxt5 = stack2.parent;
				stack2.parent = obj2;
				stack2 = nxt5;
			}
			xr1 = obj2;
		}
		var yr1;
		if(this.component == this.component.parent) {
			yr1 = this.component;
		} else {
			var obj3 = this.component;
			var stack3 = null;
			while(obj3 != obj3.parent) {
				var nxt6 = obj3.parent;
				obj3.parent = stack3;
				stack3 = obj3;
				obj3 = nxt6;
			}
			while(stack3 != null) {
				var nxt7 = stack3.parent;
				stack3.parent = obj3;
				stack3 = nxt7;
			}
			yr1 = obj3;
		}
		if(xr1 != yr1) {
			if(xr1.rank < yr1.rank) {
				xr1.parent = yr1;
			} else if(xr1.rank > yr1.rank) {
				yr1.parent = xr1;
			} else {
				yr1.parent = xr1;
				xr1.rank++;
			}
		}
	}
};
ZPP_DistanceJoint.prototype.pair_exists = function(id,di) {
	if(!(this.b1.id == id && this.b2.id == di)) {
		if(this.b1.id == di) {
			return this.b2.id == id;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
ZPP_DistanceJoint.prototype.clearcache = function() {
	this.jAcc = 0;
	this.pre_dt = -1.0;
};
ZPP_DistanceJoint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) {
		this.pre_dt = dt;
	}
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.stepped = true;
	this.equal = this.jointMin == this.jointMax;
	this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	this.nx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
	this.ny = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
	var C = this.nx * this.nx + this.ny * this.ny;
	if(C < Config.epsilon) {
		this.nx = 0;
		this.ny = 0;
		C = 0;
		this.slack = true;
	} else {
		C = Math.sqrt(C);
		var t = 1.0 / C;
		this.nx *= t;
		this.ny *= t;
		if(this.equal) {
			C -= this.jointMax;
			this.slack = false;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			this.nx = -this.nx;
			this.ny = -this.ny;
			this.slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			this.slack = false;
		} else {
			this.nx = 0;
			this.ny = 0;
			C = 0;
			this.slack = true;
		}
	}
	var C1 = C;
	if(!this.slack) {
		this.cx1 = this.ny * this.a1relx - this.nx * this.a1rely;
		this.cx2 = this.ny * this.a2relx - this.nx * this.a2rely;
		this.kMass = this.b1.smass + this.b2.smass + this.cx1 * this.cx1 * this.b1.sinertia + this.cx2 * this.cx2 * this.b2.sinertia;
		if(this.kMass != 0) {
			this.kMass = 1 / this.kMass;
		} else {
			this.jAcc = 0;
		}
		if(!this.stiff) {
			if(this.breakUnderError && C1 * C1 > this.maxError * this.maxError) {
				return true;
			}
			var biasCoef;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			this.kMass *= ig;
			this.bias = -C1 * biasCoef;
			if(this.bias < -this.maxError) {
				this.bias = -this.maxError;
			} else if(this.bias > this.maxError) {
				this.bias = this.maxError;
			}
		} else {
			this.bias = 0;
			this.gamma = 0;
		}
		this.jAcc *= dtratio;
		this.jMax = this.maxForce * dt;
	}
	return false;
};
ZPP_DistanceJoint.prototype.warmStart = function() {
	if(!this.slack) {
		var t = this.b1.imass * this.jAcc;
		this.b1.velx -= this.nx * t;
		this.b1.vely -= this.ny * t;
		var t1 = this.b2.imass * this.jAcc;
		this.b2.velx += this.nx * t1;
		this.b2.vely += this.ny * t1;
		this.b1.angvel -= this.cx1 * this.b1.iinertia * this.jAcc;
		this.b2.angvel += this.cx2 * this.b2.iinertia * this.jAcc;
	}
};
ZPP_DistanceJoint.prototype.applyImpulseVel = function() {
	if(this.slack) {
		return false;
	}
	var j = this.kMass * (this.bias - (this.nx * (this.b2.velx + this.b2.kinvelx - this.b1.velx - this.b1.kinvelx) + this.ny * (this.b2.vely + this.b2.kinvely - this.b1.vely - this.b1.kinvely) + (this.b2.angvel + this.b2.kinangvel) * this.cx2 - (this.b1.angvel + this.b1.kinangvel) * this.cx1)) - this.jAcc * this.gamma;
	var jOld = this.jAcc;
	this.jAcc += j;
	if(!this.equal && this.jAcc > 0) {
		this.jAcc = 0;
	}
	if(this.breakUnderForce && this.jAcc < -this.jMax) {
		return true;
	}
	if(!this.stiff) {
		if(this.jAcc < -this.jMax) {
			this.jAcc = -this.jMax;
		}
	}
	j = this.jAcc - jOld;
	var t = this.b1.imass * j;
	this.b1.velx -= this.nx * t;
	this.b1.vely -= this.ny * t;
	var t1 = this.b2.imass * j;
	this.b2.velx += this.nx * t1;
	this.b2.vely += this.ny * t1;
	this.b1.angvel -= this.cx1 * this.b1.iinertia * j;
	this.b2.angvel += this.cx2 * this.b2.iinertia * j;
	return false;
};
ZPP_DistanceJoint.prototype.applyImpulsePos = function() {
	var E;
	var j;
	var r1x = 0.0;
	var r1y = 0.0;
	r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	var r2x = 0.0;
	var r2y = 0.0;
	r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var slack;
	var nx = 0.0;
	var ny = 0.0;
	nx = this.b2.posx + r2x - (this.b1.posx + r1x);
	ny = this.b2.posy + r2y - (this.b1.posy + r1y);
	var C = nx * nx + ny * ny;
	if(C < Config.epsilon) {
		nx = 0;
		ny = 0;
		C = 0;
		slack = true;
	} else {
		C = Math.sqrt(C);
		var t = 1.0 / C;
		nx *= t;
		ny *= t;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			nx = -nx;
			ny = -ny;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			slack = false;
		} else {
			nx = 0;
			ny = 0;
			C = 0;
			slack = true;
		}
	}
	E = C;
	if(!slack) {
		if(this.breakUnderError && E * E > this.maxError * this.maxError) {
			return true;
		}
		if(E * E < Config.constraintLinearSlop * Config.constraintLinearSlop) {
			return false;
		}
		E *= 0.5;
		if(E * E > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > Config.epsilon) {
				k = 0.75 / k;
				j = -E * k;
				if(this.equal || j < 0) {
					var t1 = j * this.b1.imass;
					this.b1.posx -= nx * t1;
					this.b1.posy -= ny * t1;
					var t2 = j * this.b2.imass;
					this.b2.posx += nx * t2;
					this.b2.posy += ny * t2;
					nx = this.b2.posx + r2x - (this.b1.posx + r1x);
					ny = this.b2.posy + r2y - (this.b1.posy + r1y);
					var C1 = nx * nx + ny * ny;
					if(C1 < Config.epsilon) {
						nx = 0;
						ny = 0;
						C1 = 0;
					} else {
						C1 = Math.sqrt(C1);
						var t3 = 1.0 / C1;
						nx *= t3;
						ny *= t3;
						if(this.equal) {
							C1 -= this.jointMax;
						} else if(C1 < this.jointMin) {
							C1 = this.jointMin - C1;
							nx = -nx;
							ny = -ny;
						} else if(C1 > this.jointMax) {
							C1 -= this.jointMax;
						} else {
							nx = 0;
							ny = 0;
							C1 = 0;
						}
					}
					E = C1;
					E *= 0.5;
				}
			}
		}
		var cx1;
		var cx2;
		cx1 = ny * r1x - nx * r1y;
		cx2 = ny * r2x - nx * r2y;
		var k1 = this.b1.smass + this.b2.smass + cx1 * cx1 * this.b1.sinertia + cx2 * cx2 * this.b2.sinertia;
		if(k1 != 0) {
			k1 = 1 / k1;
		}
		j = -E * k1;
		if(this.equal || j < 0) {
			var t4 = this.b1.imass * j;
			this.b1.posx -= nx * t4;
			this.b1.posy -= ny * t4;
			var t5 = this.b2.imass * j;
			this.b2.posx += nx * t5;
			this.b2.posy += ny * t5;
			var _this = this.b1;
			var dr = -cx1 * this.b1.iinertia * j;
			_this.rot += dr;
			if(dr * dr > 0.0001) {
				_this.axisx = Math.sin(_this.rot);
				_this.axisy = Math.cos(_this.rot);
			} else {
				var d2 = dr * dr;
				var p = 1 - 0.5 * d2;
				var m = 1 - d2 * d2 / 8;
				var nx1 = (p * _this.axisx + dr * _this.axisy) * m;
				_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
				_this.axisx = nx1;
			}
			var _this1 = this.b2;
			var dr1 = cx2 * this.b2.iinertia * j;
			_this1.rot += dr1;
			if(dr1 * dr1 > 0.0001) {
				_this1.axisx = Math.sin(_this1.rot);
				_this1.axisy = Math.cos(_this1.rot);
			} else {
				var d21 = dr1 * dr1;
				var p1 = 1 - 0.5 * d21;
				var m1 = 1 - d21 * d21 / 8;
				var nx2 = (p1 * _this1.axisx + dr1 * _this1.axisy) * m1;
				_this1.axisy = (p1 * _this1.axisy - dr1 * _this1.axisx) * m1;
				_this1.axisx = nx2;
			}
		}
	}
	return false;
};
ZPP_DistanceJoint.prototype.draw = function(g) {
};
ZPP_DistanceJoint.prototype.__class__ = ZPP_DistanceJoint;
var ZPP_LineJoint = zpp_nape.constraint.ZPP_LineJoint = function() {
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_n = null;
	this.nrely = 0.0;
	this.nrelx = 0.0;
	this.nlocaly = 0.0;
	this.nlocalx = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.dot2 = 0.0;
	this.dot1 = 0.0;
	this.equal = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.scale = 0.0;
	this.outer_zn = null;
	ZPP_Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.nlocalx = 0;
	this.nlocaly = 0;
	this.nrelx = 0;
	this.nrely = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = Infinity;
	this.jointMin = -Infinity;
	this.jointMax = Infinity;
	this.stepped = false;
};
ZPP_LineJoint.__name__ = ["zpp_nape","constraint","ZPP_LineJoint"];
ZPP_LineJoint.__super__ = ZPP_Constraint;
// for(var k in ZPP_Constraint.prototype ) ZPP_LineJoint.prototype[k] = ZPP_Constraint.prototype[k];
ZPP_LineJoint.prototype = Object.create(ZPP_Constraint.prototype);
ZPP_LineJoint.prototype.outer_zn = null;
ZPP_LineJoint.prototype.scale = null;
ZPP_LineJoint.prototype.jointMin = null;
ZPP_LineJoint.prototype.jointMax = null;
ZPP_LineJoint.prototype.equal = null;
ZPP_LineJoint.prototype.dot1 = null;
ZPP_LineJoint.prototype.dot2 = null;
ZPP_LineJoint.prototype.cx1 = null;
ZPP_LineJoint.prototype.cx2 = null;
ZPP_LineJoint.prototype.bodyImpulse = function(b) {
	if(this.stepped) {
		var jx = this.scale * this.nrelx * this.jAccy - this.nrely * this.jAccx;
		var jy = this.nrelx * this.jAccx + this.scale * this.nrely * this.jAccy;
		if(b == this.b1) {
			return Vec3.get(-jx,-jy,this.scale * this.cx1 * jy - this.dot1 * jx);
		} else {
			return Vec3.get(jx,jy,this.scale * this.cx1 * jy - this.dot1 * jx);
		}
	} else {
		return Vec3.get(0,0,0);
	}
};
ZPP_LineJoint.prototype.activeBodies = function() {
	if(this.b1 != null) {
		this.b1.constraints.add(this);
	}
	if(this.b2 != this.b1) {
		if(this.b2 != null) {
			this.b2.constraints.add(this);
		}
	}
};
ZPP_LineJoint.prototype.inactiveBodies = function() {
	if(this.b1 != null) {
		this.b1.constraints.remove(this);
	}
	if(this.b2 != this.b1) {
		if(this.b2 != null) {
			this.b2.constraints.remove(this);
		}
	}
};
ZPP_LineJoint.prototype.b1 = null;
ZPP_LineJoint.prototype.a1localx = null;
ZPP_LineJoint.prototype.a1localy = null;
ZPP_LineJoint.prototype.a1relx = null;
ZPP_LineJoint.prototype.a1rely = null;
ZPP_LineJoint.prototype.validate_a1 = function() {
	this.wrap_a1.zpp_inner.x = this.a1localx;
	this.wrap_a1.zpp_inner.y = this.a1localy;
};
ZPP_LineJoint.prototype.invalidate_a1 = function(x) {
	this.immutable_midstep("Constraint::" + "a1");
	this.a1localx = x.x;
	this.a1localy = x.y;
	this.wake();
};
ZPP_LineJoint.prototype.setup_a1 = function() {
	var x = this.a1localx;
	var y = this.a1localy;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_a1 = ret;
	this.wrap_a1.zpp_inner._inuse = true;
	this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
	this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
};
ZPP_LineJoint.prototype.wrap_a1 = null;
ZPP_LineJoint.prototype.b2 = null;
ZPP_LineJoint.prototype.a2localx = null;
ZPP_LineJoint.prototype.a2localy = null;
ZPP_LineJoint.prototype.a2relx = null;
ZPP_LineJoint.prototype.a2rely = null;
ZPP_LineJoint.prototype.validate_a2 = function() {
	this.wrap_a2.zpp_inner.x = this.a2localx;
	this.wrap_a2.zpp_inner.y = this.a2localy;
};
ZPP_LineJoint.prototype.invalidate_a2 = function(x) {
	this.immutable_midstep("Constraint::" + "a2");
	this.a2localx = x.x;
	this.a2localy = x.y;
	this.wake();
};
ZPP_LineJoint.prototype.setup_a2 = function() {
	var x = this.a2localx;
	var y = this.a2localy;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_a2 = ret;
	this.wrap_a2.zpp_inner._inuse = true;
	this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
	this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
};
ZPP_LineJoint.prototype.wrap_a2 = null;
ZPP_LineJoint.prototype.zip_n = null;
ZPP_LineJoint.prototype.nlocalx = null;
ZPP_LineJoint.prototype.nlocaly = null;
ZPP_LineJoint.prototype.nrelx = null;
ZPP_LineJoint.prototype.nrely = null;
ZPP_LineJoint.prototype.validate_n = function() {
	this.wrap_n.zpp_inner.x = this.nlocalx;
	this.wrap_n.zpp_inner.y = this.nlocaly;
};
ZPP_LineJoint.prototype.invalidate_n = function(x) {
	this.immutable_midstep("Constraint::" + "n");
	this.nlocalx = x.x;
	this.nlocaly = x.y;
	this.zip_n = true;
	this.wake();
};
ZPP_LineJoint.prototype.setup_n = function() {
	var x = this.nlocalx;
	var y = this.nlocaly;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_n = ret;
	this.wrap_n.zpp_inner._inuse = true;
	this.wrap_n.zpp_inner._validate = $bind(this,this.validate_n);
	this.wrap_n.zpp_inner._invalidate = $bind(this,this.invalidate_n);
};
ZPP_LineJoint.prototype.wrap_n = null;
ZPP_LineJoint.prototype.validate_norm = function() {
	if(this.zip_n) {
		this.zip_n = false;
		var imag = 1.0 / Math.sqrt(this.nlocalx * this.nlocalx + this.nlocaly * this.nlocaly);
		this.nlocalx *= imag;
		this.nlocaly *= imag;
	}
};
ZPP_LineJoint.prototype.kMassa = null;
ZPP_LineJoint.prototype.kMassb = null;
ZPP_LineJoint.prototype.kMassc = null;
ZPP_LineJoint.prototype.jAccx = null;
ZPP_LineJoint.prototype.jAccy = null;
ZPP_LineJoint.prototype.jMax = null;
ZPP_LineJoint.prototype.gamma = null;
ZPP_LineJoint.prototype.biasx = null;
ZPP_LineJoint.prototype.biasy = null;
ZPP_LineJoint.prototype.stepped = null;
ZPP_LineJoint.prototype.copy = function(dict,todo) {
	var _this = this.outer_zn;
	if(_this.zpp_inner_zn.wrap_a1 == null) {
		_this.zpp_inner_zn.setup_a1();
	}
	var tmp = _this.zpp_inner_zn.wrap_a1;
	var _this1 = this.outer_zn;
	if(_this1.zpp_inner_zn.wrap_a2 == null) {
		_this1.zpp_inner_zn.setup_a2();
	}
	var tmp1 = _this1.zpp_inner_zn.wrap_a2;
	var _this2 = this.outer_zn;
	if(_this2.zpp_inner_zn.wrap_n == null) {
		_this2.zpp_inner_zn.setup_n();
	}
	var ret = new LineJoint(null,null,tmp,tmp1,_this2.zpp_inner_zn.wrap_n,this.jointMin,this.jointMax);
	this.copyto(ret);
	if(dict != null && this.b1 != null) {
		var b = null;
		var _g = 0;
		while(_g < dict.length) {
			var idc = dict[_g];
			++_g;
			if(idc.id == this.b1.id) {
				b = idc.bc;
				break;
			}
		}
		if(b != null) {
			ret.zpp_inner_zn.b1 = b.zpp_inner;
		} else {
			todo.push(ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
	}
	if(dict != null && this.b2 != null) {
		var b2 = null;
		var _g1 = 0;
		while(_g1 < dict.length) {
			var idc1 = dict[_g1];
			++_g1;
			if(idc1.id == this.b2.id) {
				b2 = idc1.bc;
				break;
			}
		}
		if(b2 != null) {
			ret.zpp_inner_zn.b2 = b2.zpp_inner;
		} else {
			todo.push(ZPP_CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
	}
	return ret;
};
ZPP_LineJoint.prototype.validate = function() {
	if(this.b1 == null || this.b2 == null) {
		throw new js._Boot.HaxeError("Error: AngleJoint cannot be simulated null bodies");
	}
	if(this.b1 == this.b2) {
		throw new js._Boot.HaxeError("Error: DistanceJoint cannot be simulated with body1 == body2");
	}
	if(this.b1.space != this.space || this.b2.space != this.space) {
		throw new js._Boot.HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
	}
	if(this.jointMin > this.jointMax) {
		throw new js._Boot.HaxeError("Error: DistanceJoint must have jointMin <= jointMax");
	}
	if(this.nlocalx * this.nlocalx + this.nlocaly * this.nlocaly < Config.epsilon) {
		throw new js._Boot.HaxeError("Error: DistanceJoint direction must be non-degenerate");
	}
	if(this.b1.type != 2 && this.b2.type != 2) {
		throw new js._Boot.HaxeError("Error: Constraints cannot have both bodies non-dynamic");
	}
};
ZPP_LineJoint.prototype.wake_connected = function() {
	if(this.b1 != null && this.b1.type == 2) {
		this.b1.wake();
	}
	if(this.b2 != null && this.b2.type == 2) {
		this.b2.wake();
	}
};
ZPP_LineJoint.prototype.forest = function() {
	if(this.b1.type == 2) {
		var xr;
		if(this.b1.component == this.b1.component.parent) {
			xr = this.b1.component;
		} else {
			var obj = this.b1.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt1 = stack.parent;
				stack.parent = obj;
				stack = nxt1;
			}
			xr = obj;
		}
		var yr;
		if(this.component == this.component.parent) {
			yr = this.component;
		} else {
			var obj1 = this.component;
			var stack1 = null;
			while(obj1 != obj1.parent) {
				var nxt2 = obj1.parent;
				obj1.parent = stack1;
				stack1 = obj1;
				obj1 = nxt2;
			}
			while(stack1 != null) {
				var nxt3 = stack1.parent;
				stack1.parent = obj1;
				stack1 = nxt3;
			}
			yr = obj1;
		}
		if(xr != yr) {
			if(xr.rank < yr.rank) {
				xr.parent = yr;
			} else if(xr.rank > yr.rank) {
				yr.parent = xr;
			} else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
	if(this.b2.type == 2) {
		var xr1;
		if(this.b2.component == this.b2.component.parent) {
			xr1 = this.b2.component;
		} else {
			var obj2 = this.b2.component;
			var stack2 = null;
			while(obj2 != obj2.parent) {
				var nxt4 = obj2.parent;
				obj2.parent = stack2;
				stack2 = obj2;
				obj2 = nxt4;
			}
			while(stack2 != null) {
				var nxt5 = stack2.parent;
				stack2.parent = obj2;
				stack2 = nxt5;
			}
			xr1 = obj2;
		}
		var yr1;
		if(this.component == this.component.parent) {
			yr1 = this.component;
		} else {
			var obj3 = this.component;
			var stack3 = null;
			while(obj3 != obj3.parent) {
				var nxt6 = obj3.parent;
				obj3.parent = stack3;
				stack3 = obj3;
				obj3 = nxt6;
			}
			while(stack3 != null) {
				var nxt7 = stack3.parent;
				stack3.parent = obj3;
				stack3 = nxt7;
			}
			yr1 = obj3;
		}
		if(xr1 != yr1) {
			if(xr1.rank < yr1.rank) {
				xr1.parent = yr1;
			} else if(xr1.rank > yr1.rank) {
				yr1.parent = xr1;
			} else {
				yr1.parent = xr1;
				xr1.rank++;
			}
		}
	}
};
ZPP_LineJoint.prototype.pair_exists = function(id,di) {
	if(!(this.b1.id == id && this.b2.id == di)) {
		if(this.b1.id == di) {
			return this.b2.id == id;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
ZPP_LineJoint.prototype.clearcache = function() {
	this.jAccx = 0;
	this.jAccy = 0;
	this.pre_dt = -1.0;
};
ZPP_LineJoint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) {
		this.pre_dt = dt;
	}
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.equal = this.jointMin == this.jointMax;
	this.stepped = true;
	this.validate_norm();
	this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	this.nrelx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
	this.nrely = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
	this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var dx = 0.0;
	var dy = 0.0;
	var Cx = 0.0;
	var Cy = 0.0;
	dx = this.b2.posx + this.a2relx - this.b1.posx - this.a1relx;
	dy = this.b2.posy + this.a2rely - this.b1.posy - this.a1rely;
	Cx = dy * this.nrelx - dx * this.nrely;
	Cy = this.nrelx * dx + this.nrely * dy;
	if(this.equal) {
		Cy -= this.jointMin;
		this.scale = 1.0;
	} else if(Cy > this.jointMax) {
		Cy -= this.jointMax;
		this.scale = 1.0;
	} else if(Cy < this.jointMin) {
		Cy = this.jointMin - Cy;
		this.scale = -1.0;
	} else {
		Cy = 0;
		this.scale = 0;
	}
	var drx = 0.0;
	var dry = 0.0;
	drx = dx + this.a1relx;
	dry = dy + this.a1rely;
	this.dot1 = this.nrelx * drx + this.nrely * dry;
	this.cx1 = dry * this.nrelx - drx * this.nrely;
	this.dot2 = this.nrelx * this.a2relx + this.nrely * this.a2rely;
	this.cx2 = this.a2rely * this.nrelx - this.a2relx * this.nrely;
	this.kMassa = this.b1.smass + this.b2.smass + this.dot1 * this.dot1 * this.b1.sinertia + this.dot2 * this.dot2 * this.b2.sinertia;
	this.kMassb = -this.scale * (this.dot1 * this.cx1 * this.b1.sinertia + this.dot2 * this.cx2 * this.b2.sinertia);
	this.kMassc = this.scale * this.scale * (this.b1.smass + this.b2.smass + this.cx1 * this.cx1 * this.b1.sinertia + this.cx2 * this.cx2 * this.b2.sinertia);
	var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
	var flag;
	if(det != det) {
		this.kMassa = this.kMassb = this.kMassc = 0;
		flag = 3;
	} else if(det == 0) {
		var flag1 = 0;
		if(this.kMassa != 0) {
			this.kMassa = 1 / this.kMassa;
		} else {
			this.kMassa = 0;
			flag1 = 1;
		}
		if(this.kMassc != 0) {
			this.kMassc = 1 / this.kMassc;
		} else {
			this.kMassc = 0;
			flag1 |= 2;
		}
		this.kMassb = 0;
		flag = flag1;
	} else {
		det = 1 / det;
		var t = this.kMassc * det;
		this.kMassc = this.kMassa * det;
		this.kMassa = t;
		this.kMassb *= -det;
		flag = 0;
	}
	if((flag & 1) != 0) {
		this.jAccx = 0;
	}
	if((flag & 2) != 0) {
		this.jAccy = 0;
	}
	if(!this.stiff) {
		if(this.breakUnderError && Cx * Cx + Cy * Cy > this.maxError * this.maxError) {
			return true;
		}
		var biasCoef;
		var omega = 2 * Math.PI * this.frequency;
		this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
		var ig = 1 / (1 + this.gamma);
		biasCoef = dt * omega * omega * this.gamma;
		this.gamma *= ig;
		this.kMassa *= ig;
		this.kMassb *= ig;
		this.kMassc *= ig;
		this.biasx = Cx;
		this.biasy = Cy;
		var t1 = -biasCoef;
		this.biasx *= t1;
		this.biasy *= t1;
		var t2 = this.maxError;
		var ls = this.biasx * this.biasx + this.biasy * this.biasy;
		if(ls > t2 * t2) {
			var t3 = t2 * (1.0 / Math.sqrt(ls));
			this.biasx *= t3;
			this.biasy *= t3;
		}
	} else {
		this.gamma = 0;
		this.biasx = 0;
		this.biasy = 0;
	}
	this.jAccx *= dtratio;
	this.jAccy *= dtratio;
	this.jMax = this.maxForce * dt;
	return false;
};
ZPP_LineJoint.prototype.warmStart = function() {
	var J2x = this.scale * this.nrelx * this.jAccy - this.nrely * this.jAccx;
	var J2y = this.nrelx * this.jAccx + this.scale * this.nrely * this.jAccy;
	var t = this.b1.imass;
	this.b1.velx -= J2x * t;
	this.b1.vely -= J2y * t;
	var t1 = this.b2.imass;
	this.b2.velx += J2x * t1;
	this.b2.vely += J2y * t1;
	this.b1.angvel += (this.scale * this.cx1 * this.jAccy - this.dot1 * this.jAccx) * this.b1.iinertia;
	this.b2.angvel += (this.dot2 * this.jAccx - this.scale * this.cx2 * this.jAccy) * this.b2.iinertia;
};
ZPP_LineJoint.prototype.applyImpulseVel = function() {
	var Ex = 0.0;
	var Ey = 0.0;
	var dvx = 0.0;
	var dvy = 0.0;
	dvx = this.b2.velx - this.b1.velx;
	dvy = this.b2.vely - this.b1.vely;
	dvx += this.b2.kinvelx - this.b1.kinvelx;
	dvy += this.b2.kinvely - this.b1.kinvely;
	Ex = dvy * this.nrelx - dvx * this.nrely + (this.b2.angvel + this.b2.kinangvel) * this.dot2 - (this.b1.angvel + this.b1.kinangvel) * this.dot1;
	Ey = this.scale * (this.nrelx * dvx + this.nrely * dvy - (this.b2.angvel + this.b2.kinangvel) * this.cx2 + (this.b1.angvel + this.b1.kinangvel) * this.cx1);
	var Jx = 0.0;
	var Jy = 0.0;
	Jx = this.biasx - Ex;
	Jy = this.biasy - Ey;
	var t = this.kMassa * Jx + this.kMassb * Jy;
	Jy = this.kMassb * Jx + this.kMassc * Jy;
	Jx = t;
	var t1 = this.gamma;
	Jx -= this.jAccx * t1;
	Jy -= this.jAccy * t1;
	var jOldx = 0.0;
	var jOldy = 0.0;
	jOldx = this.jAccx;
	jOldy = this.jAccy;
	this.jAccx += Jx;
	this.jAccy += Jy;
	if(this.jAccy > 0) {
		this.jAccy = 0;
	}
	if(this.breakUnderForce) {
		if(this.jAccx * this.jAccx + this.jAccy * this.jAccy > this.jMax * this.jMax) {
			return true;
		}
	} else if(!this.stiff) {
		var t2 = this.jMax;
		var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
		if(ls > t2 * t2) {
			var t3 = t2 * (1.0 / Math.sqrt(ls));
			this.jAccx *= t3;
			this.jAccy *= t3;
		}
	}
	Jx = this.jAccx - jOldx;
	Jy = this.jAccy - jOldy;
	var J2x = this.scale * this.nrelx * Jy - this.nrely * Jx;
	var J2y = this.nrelx * Jx + this.scale * this.nrely * Jy;
	var t4 = this.b1.imass;
	this.b1.velx -= J2x * t4;
	this.b1.vely -= J2y * t4;
	var t5 = this.b2.imass;
	this.b2.velx += J2x * t5;
	this.b2.vely += J2y * t5;
	this.b1.angvel += (this.scale * this.cx1 * Jy - this.dot1 * Jx) * this.b1.iinertia;
	this.b2.angvel += (this.dot2 * Jx - this.scale * this.cx2 * Jy) * this.b2.iinertia;
	return false;
};
ZPP_LineJoint.prototype.applyImpulsePos = function() {
	var nx = 0.0;
	var ny = 0.0;
	nx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
	ny = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
	var r1x = 0.0;
	var r1y = 0.0;
	r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	var r2x = 0.0;
	var r2y = 0.0;
	r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var dx = 0.0;
	var dy = 0.0;
	var scale;
	var Ex = 0.0;
	var Ey = 0.0;
	dx = this.b2.posx + r2x - this.b1.posx - r1x;
	dy = this.b2.posy + r2y - this.b1.posy - r1y;
	Ex = dy * nx - dx * ny;
	Ey = nx * dx + ny * dy;
	if(this.equal) {
		Ey -= this.jointMin;
		scale = 1.0;
	} else if(Ey > this.jointMax) {
		Ey -= this.jointMax;
		scale = 1.0;
	} else if(Ey < this.jointMin) {
		Ey = this.jointMin - Ey;
		scale = -1.0;
	} else {
		Ey = 0;
		scale = 0;
	}
	if(this.breakUnderError && Ex * Ex + Ey * Ey > this.maxError * this.maxError) {
		return true;
	}
	if(Ex * Ex + Ey * Ey < Config.constraintLinearSlop * Config.constraintLinearSlop) {
		return false;
	}
	var Jx = 0.0;
	var Jy = 0.0;
	Ex *= 0.5;
	Ey *= 0.5;
	if(Ex * Ex + Ey * Ey > 6) {
		var k = this.b1.smass + this.b2.smass;
		if(k > Config.epsilon) {
			k = 0.8 / k;
			var Jx1 = k * (ny * Ex - scale * nx * Ey);
			var Jy1 = k * (nx * Ex * scale - ny * Ex);
			var t = this.b1.imass;
			this.b1.posx -= Jx1 * t;
			this.b1.posy -= Jy1 * t;
			var t1 = this.b2.imass;
			this.b2.posx += Jx1 * t1;
			this.b2.posy += Jy1 * t1;
			dx = this.b2.posx + r2x - this.b1.posx - r1x;
			dy = this.b2.posy + r2y - this.b1.posy - r1y;
			Ex = dy * nx - dx * ny;
			Ey = nx * dx + ny * dy;
			if(this.equal) {
				Ey -= this.jointMin;
				scale = 1.0;
			} else if(Ey > this.jointMax) {
				Ey -= this.jointMax;
				scale = 1.0;
			} else if(Ey < this.jointMin) {
				Ey = this.jointMin - Ey;
				scale = -1.0;
			} else {
				Ey = 0;
				scale = 0;
			}
			Ex *= 0.5;
			Ey *= 0.5;
		}
	}
	var dot1;
	var dot2;
	var cx1;
	var cx2;
	var Ka = 0.0;
	var Kb = 0.0;
	var Kc = 0.0;
	var drx = 0.0;
	var dry = 0.0;
	drx = dx + r1x;
	dry = dy + r1y;
	dot1 = nx * drx + ny * dry;
	cx1 = dry * nx - drx * ny;
	dot2 = nx * r2x + ny * r2y;
	cx2 = r2y * nx - r2x * ny;
	Ka = this.b1.smass + this.b2.smass + dot1 * dot1 * this.b1.sinertia + dot2 * dot2 * this.b2.sinertia;
	Kb = -scale * (dot1 * cx1 * this.b1.sinertia + dot2 * cx2 * this.b2.sinertia);
	Kc = scale * scale * (this.b1.smass + this.b2.smass + cx1 * cx1 * this.b1.sinertia + cx2 * cx2 * this.b2.sinertia);
	Jx = -Ex;
	Jy = -Ey;
	var det = Ka * Kc - Kb * Kb;
	if(det != det) {
		Jy = 0;
		Jx = Jy;
	} else if(det == 0) {
		if(Ka != 0) {
			Jx /= Ka;
		} else {
			Jx = 0;
		}
		if(Kc != 0) {
			Jy /= Kc;
		} else {
			Jy = 0;
		}
	} else {
		det = 1 / det;
		var t2 = det * (Kc * Jx - Kb * Jy);
		Jy = det * (Ka * Jy - Kb * Jx);
		Jx = t2;
	}
	if(Jy > 0) {
		Jy = 0;
	}
	var J2x = scale * nx * Jy - ny * Jx;
	var J2y = nx * Jx + scale * ny * Jy;
	var t3 = this.b1.imass;
	this.b1.posx -= J2x * t3;
	this.b1.posy -= J2y * t3;
	var t4 = this.b2.imass;
	this.b2.posx += J2x * t4;
	this.b2.posy += J2y * t4;
	var _this = this.b1;
	var dr = (scale * cx1 * Jy - dot1 * Jx) * this.b1.iinertia;
	_this.rot += dr;
	if(dr * dr > 0.0001) {
		_this.axisx = Math.sin(_this.rot);
		_this.axisy = Math.cos(_this.rot);
	} else {
		var d2 = dr * dr;
		var p = 1 - 0.5 * d2;
		var m = 1 - d2 * d2 / 8;
		var nx1 = (p * _this.axisx + dr * _this.axisy) * m;
		_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
		_this.axisx = nx1;
	}
	var _this1 = this.b2;
	var dr1 = (dot2 * Jx - scale * cx2 * Jy) * this.b2.iinertia;
	_this1.rot += dr1;
	if(dr1 * dr1 > 0.0001) {
		_this1.axisx = Math.sin(_this1.rot);
		_this1.axisy = Math.cos(_this1.rot);
	} else {
		var d21 = dr1 * dr1;
		var p1 = 1 - 0.5 * d21;
		var m1 = 1 - d21 * d21 / 8;
		var nx2 = (p1 * _this1.axisx + dr1 * _this1.axisy) * m1;
		_this1.axisy = (p1 * _this1.axisy - dr1 * _this1.axisx) * m1;
		_this1.axisx = nx2;
	}
	return false;
};
ZPP_LineJoint.prototype.draw = function(g) {
};
ZPP_LineJoint.prototype.__class__ = ZPP_LineJoint;
var ZPP_MotorJoint = zpp_nape.constraint.ZPP_MotorJoint = function() {
	this.stepped = false;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.b2 = null;
	this.b1 = null;
	this.rate = 0.0;
	this.ratio = 0.0;
	this.outer_zn = null;
	ZPP_Constraint.call(this);
	this.jAcc = 0;
	this.stepped = false;
	this.__velocity = true;
};
ZPP_MotorJoint.__name__ = ["zpp_nape","constraint","ZPP_MotorJoint"];
ZPP_MotorJoint.__super__ = ZPP_Constraint;
// for(var k in ZPP_Constraint.prototype ) ZPP_MotorJoint.prototype[k] = ZPP_Constraint.prototype[k];
ZPP_MotorJoint.prototype = Object.create(ZPP_Constraint.prototype);
ZPP_MotorJoint.prototype.outer_zn = null;
ZPP_MotorJoint.prototype.ratio = null;
ZPP_MotorJoint.prototype.rate = null;
ZPP_MotorJoint.prototype.bodyImpulse = function(b) {
	if(this.stepped) {
		if(b == this.b1) {
			return Vec3.get(0,0,-this.jAcc);
		} else {
			return Vec3.get(0,0,this.ratio * this.jAcc);
		}
	} else {
		return Vec3.get(0,0,0);
	}
};
ZPP_MotorJoint.prototype.activeBodies = function() {
	if(this.b1 != null) {
		this.b1.constraints.add(this);
	}
	if(this.b2 != this.b1) {
		if(this.b2 != null) {
			this.b2.constraints.add(this);
		}
	}
};
ZPP_MotorJoint.prototype.inactiveBodies = function() {
	if(this.b1 != null) {
		this.b1.constraints.remove(this);
	}
	if(this.b2 != this.b1) {
		if(this.b2 != null) {
			this.b2.constraints.remove(this);
		}
	}
};
ZPP_MotorJoint.prototype.b1 = null;
ZPP_MotorJoint.prototype.b2 = null;
ZPP_MotorJoint.prototype.kMass = null;
ZPP_MotorJoint.prototype.jAcc = null;
ZPP_MotorJoint.prototype.jMax = null;
ZPP_MotorJoint.prototype.stepped = null;
ZPP_MotorJoint.prototype.copy = function(dict,todo) {
	var ret = new MotorJoint(null,null,this.rate,this.ratio);
	this.copyto(ret);
	if(dict != null && this.b1 != null) {
		var b = null;
		var _g = 0;
		while(_g < dict.length) {
			var idc = dict[_g];
			++_g;
			if(idc.id == this.b1.id) {
				b = idc.bc;
				break;
			}
		}
		if(b != null) {
			ret.zpp_inner_zn.b1 = b.zpp_inner;
		} else {
			todo.push(ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
	}
	if(dict != null && this.b2 != null) {
		var b2 = null;
		var _g1 = 0;
		while(_g1 < dict.length) {
			var idc1 = dict[_g1];
			++_g1;
			if(idc1.id == this.b2.id) {
				b2 = idc1.bc;
				break;
			}
		}
		if(b2 != null) {
			ret.zpp_inner_zn.b2 = b2.zpp_inner;
		} else {
			todo.push(ZPP_CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
	}
	return ret;
};
ZPP_MotorJoint.prototype.validate = function() {
	if(this.b1 == null || this.b2 == null) {
		throw new js._Boot.HaxeError("Error: AngleJoint cannot be simulated null bodies");
	}
	if(this.b1 == this.b2) {
		throw new js._Boot.HaxeError("Error: MotorJoint cannot be simulated with body1 == body2");
	}
	if(this.b1.space != this.space || this.b2.space != this.space) {
		throw new js._Boot.HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
	}
	if(this.b1.type != 2 && this.b2.type != 2) {
		throw new js._Boot.HaxeError("Error: Constraints cannot have both bodies non-dynamic");
	}
};
ZPP_MotorJoint.prototype.wake_connected = function() {
	if(this.b1 != null && this.b1.type == 2) {
		this.b1.wake();
	}
	if(this.b2 != null && this.b2.type == 2) {
		this.b2.wake();
	}
};
ZPP_MotorJoint.prototype.forest = function() {
	if(this.b1.type == 2) {
		var xr;
		if(this.b1.component == this.b1.component.parent) {
			xr = this.b1.component;
		} else {
			var obj = this.b1.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt1 = stack.parent;
				stack.parent = obj;
				stack = nxt1;
			}
			xr = obj;
		}
		var yr;
		if(this.component == this.component.parent) {
			yr = this.component;
		} else {
			var obj1 = this.component;
			var stack1 = null;
			while(obj1 != obj1.parent) {
				var nxt2 = obj1.parent;
				obj1.parent = stack1;
				stack1 = obj1;
				obj1 = nxt2;
			}
			while(stack1 != null) {
				var nxt3 = stack1.parent;
				stack1.parent = obj1;
				stack1 = nxt3;
			}
			yr = obj1;
		}
		if(xr != yr) {
			if(xr.rank < yr.rank) {
				xr.parent = yr;
			} else if(xr.rank > yr.rank) {
				yr.parent = xr;
			} else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
	if(this.b2.type == 2) {
		var xr1;
		if(this.b2.component == this.b2.component.parent) {
			xr1 = this.b2.component;
		} else {
			var obj2 = this.b2.component;
			var stack2 = null;
			while(obj2 != obj2.parent) {
				var nxt4 = obj2.parent;
				obj2.parent = stack2;
				stack2 = obj2;
				obj2 = nxt4;
			}
			while(stack2 != null) {
				var nxt5 = stack2.parent;
				stack2.parent = obj2;
				stack2 = nxt5;
			}
			xr1 = obj2;
		}
		var yr1;
		if(this.component == this.component.parent) {
			yr1 = this.component;
		} else {
			var obj3 = this.component;
			var stack3 = null;
			while(obj3 != obj3.parent) {
				var nxt6 = obj3.parent;
				obj3.parent = stack3;
				stack3 = obj3;
				obj3 = nxt6;
			}
			while(stack3 != null) {
				var nxt7 = stack3.parent;
				stack3.parent = obj3;
				stack3 = nxt7;
			}
			yr1 = obj3;
		}
		if(xr1 != yr1) {
			if(xr1.rank < yr1.rank) {
				xr1.parent = yr1;
			} else if(xr1.rank > yr1.rank) {
				yr1.parent = xr1;
			} else {
				yr1.parent = xr1;
				xr1.rank++;
			}
		}
	}
};
ZPP_MotorJoint.prototype.pair_exists = function(id,di) {
	if(!(this.b1.id == id && this.b2.id == di)) {
		if(this.b1.id == di) {
			return this.b2.id == id;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
ZPP_MotorJoint.prototype.clearcache = function() {
	this.jAcc = 0;
	this.pre_dt = -1.0;
};
ZPP_MotorJoint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) {
		this.pre_dt = dt;
	}
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.stepped = true;
	this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
	this.kMass = 1.0 / this.kMass;
	this.jAcc *= dtratio;
	this.jMax = this.maxForce * dt;
	return false;
};
ZPP_MotorJoint.prototype.warmStart = function() {
	this.b1.angvel -= this.b1.iinertia * this.jAcc;
	this.b2.angvel += this.ratio * this.b2.iinertia * this.jAcc;
};
ZPP_MotorJoint.prototype.applyImpulseVel = function() {
	var j = -this.kMass * (this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel - this.rate);
	var jOld = this.jAcc;
	this.jAcc += j;
	if(this.breakUnderForce) {
		if(this.jAcc > this.jMax || this.jAcc < -this.jMax) {
			return true;
		}
	} else if(this.jAcc < -this.jMax) {
		this.jAcc = -this.jMax;
	} else if(this.jAcc > this.jMax) {
		this.jAcc = this.jMax;
	}
	j = this.jAcc - jOld;
	this.b1.angvel -= this.b1.iinertia * j;
	this.b2.angvel += this.ratio * this.b2.iinertia * j;
	return false;
};
ZPP_MotorJoint.prototype.applyImpulsePos = function() {
	return false;
};
ZPP_MotorJoint.prototype.__class__ = ZPP_MotorJoint;
var ZPP_PivotJoint = zpp_nape.constraint.ZPP_PivotJoint = function() {
	this.stepped = false;
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.outer_zn = null;
	ZPP_Constraint.call(this);
	this.stepped = false;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = Infinity;
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
};
ZPP_PivotJoint.__name__ = ["zpp_nape","constraint","ZPP_PivotJoint"];
ZPP_PivotJoint.__super__ = ZPP_Constraint;
// for(var k in ZPP_Constraint.prototype ) ZPP_PivotJoint.prototype[k] = ZPP_Constraint.prototype[k];
ZPP_PivotJoint.prototype = Object.create(ZPP_Constraint.prototype);
ZPP_PivotJoint.prototype.outer_zn = null;
ZPP_PivotJoint.prototype.bodyImpulse = function(b) {
	if(this.stepped) {
		if(b == this.b1) {
			return Vec3.get(-this.jAccx,-this.jAccy,-(this.jAccy * this.a1relx - this.jAccx * this.a1rely));
		} else {
			return Vec3.get(this.jAccx,this.jAccy,this.jAccy * this.a2relx - this.jAccx * this.a2rely);
		}
	} else {
		return Vec3.get(0,0,0);
	}
};
ZPP_PivotJoint.prototype.activeBodies = function() {
	if(this.b1 != null) {
		this.b1.constraints.add(this);
	}
	if(this.b2 != this.b1) {
		if(this.b2 != null) {
			this.b2.constraints.add(this);
		}
	}
};
ZPP_PivotJoint.prototype.inactiveBodies = function() {
	if(this.b1 != null) {
		this.b1.constraints.remove(this);
	}
	if(this.b2 != this.b1) {
		if(this.b2 != null) {
			this.b2.constraints.remove(this);
		}
	}
};
ZPP_PivotJoint.prototype.b1 = null;
ZPP_PivotJoint.prototype.a1localx = null;
ZPP_PivotJoint.prototype.a1localy = null;
ZPP_PivotJoint.prototype.a1relx = null;
ZPP_PivotJoint.prototype.a1rely = null;
ZPP_PivotJoint.prototype.validate_a1 = function() {
	this.wrap_a1.zpp_inner.x = this.a1localx;
	this.wrap_a1.zpp_inner.y = this.a1localy;
};
ZPP_PivotJoint.prototype.invalidate_a1 = function(x) {
	this.immutable_midstep("Constraint::" + "a1");
	this.a1localx = x.x;
	this.a1localy = x.y;
	this.wake();
};
ZPP_PivotJoint.prototype.setup_a1 = function() {
	var x = this.a1localx;
	var y = this.a1localy;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_a1 = ret;
	this.wrap_a1.zpp_inner._inuse = true;
	this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
	this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
};
ZPP_PivotJoint.prototype.wrap_a1 = null;
ZPP_PivotJoint.prototype.b2 = null;
ZPP_PivotJoint.prototype.a2localx = null;
ZPP_PivotJoint.prototype.a2localy = null;
ZPP_PivotJoint.prototype.a2relx = null;
ZPP_PivotJoint.prototype.a2rely = null;
ZPP_PivotJoint.prototype.validate_a2 = function() {
	this.wrap_a2.zpp_inner.x = this.a2localx;
	this.wrap_a2.zpp_inner.y = this.a2localy;
};
ZPP_PivotJoint.prototype.invalidate_a2 = function(x) {
	this.immutable_midstep("Constraint::" + "a2");
	this.a2localx = x.x;
	this.a2localy = x.y;
	this.wake();
};
ZPP_PivotJoint.prototype.setup_a2 = function() {
	var x = this.a2localx;
	var y = this.a2localy;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_a2 = ret;
	this.wrap_a2.zpp_inner._inuse = true;
	this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
	this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
};
ZPP_PivotJoint.prototype.wrap_a2 = null;
ZPP_PivotJoint.prototype.kMassa = null;
ZPP_PivotJoint.prototype.kMassb = null;
ZPP_PivotJoint.prototype.kMassc = null;
ZPP_PivotJoint.prototype.jAccx = null;
ZPP_PivotJoint.prototype.jAccy = null;
ZPP_PivotJoint.prototype.jMax = null;
ZPP_PivotJoint.prototype.gamma = null;
ZPP_PivotJoint.prototype.biasx = null;
ZPP_PivotJoint.prototype.biasy = null;
ZPP_PivotJoint.prototype.stepped = null;
ZPP_PivotJoint.prototype.copy = function(dict,todo) {
	var _this = this.outer_zn;
	if(_this.zpp_inner_zn.wrap_a1 == null) {
		_this.zpp_inner_zn.setup_a1();
	}
	var tmp = _this.zpp_inner_zn.wrap_a1;
	var _this1 = this.outer_zn;
	if(_this1.zpp_inner_zn.wrap_a2 == null) {
		_this1.zpp_inner_zn.setup_a2();
	}
	var ret = new PivotJoint(null,null,tmp,_this1.zpp_inner_zn.wrap_a2);
	this.copyto(ret);
	if(dict != null && this.b1 != null) {
		var b = null;
		var _g = 0;
		while(_g < dict.length) {
			var idc = dict[_g];
			++_g;
			if(idc.id == this.b1.id) {
				b = idc.bc;
				break;
			}
		}
		if(b != null) {
			ret.zpp_inner_zn.b1 = b.zpp_inner;
		} else {
			todo.push(ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
	}
	if(dict != null && this.b2 != null) {
		var b2 = null;
		var _g1 = 0;
		while(_g1 < dict.length) {
			var idc1 = dict[_g1];
			++_g1;
			if(idc1.id == this.b2.id) {
				b2 = idc1.bc;
				break;
			}
		}
		if(b2 != null) {
			ret.zpp_inner_zn.b2 = b2.zpp_inner;
		} else {
			todo.push(ZPP_CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
	}
	return ret;
};
ZPP_PivotJoint.prototype.validate = function() {
	if(this.b1 == null || this.b2 == null) {
		throw new js._Boot.HaxeError("Error: PivotJoint cannot be simulated null bodies");
	}
	if(this.b1 == this.b2) {
		throw new js._Boot.HaxeError("Error: PivotJoint cannot be simulated with body1 == body2 (body1=body2=" + this.b1.outer.toString() + ")");
	}
	if(this.b1.space != this.space || this.b2.space != this.space) {
		throw new js._Boot.HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned (body1=" + this.b1.outer.toString() + ", body2=" + this.b2.outer.toString() + ")");
	}
	if(this.b1.type != 2 && this.b2.type != 2) {
		throw new js._Boot.HaxeError("Error: Constraints cannot have both bodies non-dynamic (body1=" + this.b1.outer.toString() + ", body2=" + this.b2.outer.toString() + ")");
	}
};
ZPP_PivotJoint.prototype.wake_connected = function() {
	if(this.b1 != null && this.b1.type == 2) {
		this.b1.wake();
	}
	if(this.b2 != null && this.b2.type == 2) {
		this.b2.wake();
	}
};
ZPP_PivotJoint.prototype.forest = function() {
	if(this.b1.type == 2) {
		var xr;
		if(this.b1.component == this.b1.component.parent) {
			xr = this.b1.component;
		} else {
			var obj = this.b1.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt1 = stack.parent;
				stack.parent = obj;
				stack = nxt1;
			}
			xr = obj;
		}
		var yr;
		if(this.component == this.component.parent) {
			yr = this.component;
		} else {
			var obj1 = this.component;
			var stack1 = null;
			while(obj1 != obj1.parent) {
				var nxt2 = obj1.parent;
				obj1.parent = stack1;
				stack1 = obj1;
				obj1 = nxt2;
			}
			while(stack1 != null) {
				var nxt3 = stack1.parent;
				stack1.parent = obj1;
				stack1 = nxt3;
			}
			yr = obj1;
		}
		if(xr != yr) {
			if(xr.rank < yr.rank) {
				xr.parent = yr;
			} else if(xr.rank > yr.rank) {
				yr.parent = xr;
			} else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
	if(this.b2.type == 2) {
		var xr1;
		if(this.b2.component == this.b2.component.parent) {
			xr1 = this.b2.component;
		} else {
			var obj2 = this.b2.component;
			var stack2 = null;
			while(obj2 != obj2.parent) {
				var nxt4 = obj2.parent;
				obj2.parent = stack2;
				stack2 = obj2;
				obj2 = nxt4;
			}
			while(stack2 != null) {
				var nxt5 = stack2.parent;
				stack2.parent = obj2;
				stack2 = nxt5;
			}
			xr1 = obj2;
		}
		var yr1;
		if(this.component == this.component.parent) {
			yr1 = this.component;
		} else {
			var obj3 = this.component;
			var stack3 = null;
			while(obj3 != obj3.parent) {
				var nxt6 = obj3.parent;
				obj3.parent = stack3;
				stack3 = obj3;
				obj3 = nxt6;
			}
			while(stack3 != null) {
				var nxt7 = stack3.parent;
				stack3.parent = obj3;
				stack3 = nxt7;
			}
			yr1 = obj3;
		}
		if(xr1 != yr1) {
			if(xr1.rank < yr1.rank) {
				xr1.parent = yr1;
			} else if(xr1.rank > yr1.rank) {
				yr1.parent = xr1;
			} else {
				yr1.parent = xr1;
				xr1.rank++;
			}
		}
	}
};
ZPP_PivotJoint.prototype.pair_exists = function(id,di) {
	if(!(this.b1.id == id && this.b2.id == di)) {
		if(this.b1.id == di) {
			return this.b2.id == id;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
ZPP_PivotJoint.prototype.clearcache = function() {
	this.jAccx = 0;
	this.jAccy = 0;
	this.pre_dt = -1.0;
};
ZPP_PivotJoint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) {
		this.pre_dt = dt;
	}
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.stepped = true;
	this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var m = this.b1.smass + this.b2.smass;
	this.kMassa = m;
	this.kMassb = 0;
	this.kMassc = m;
	if(this.b1.sinertia != 0) {
		var X = this.a1relx * this.b1.sinertia;
		var Y = this.a1rely * this.b1.sinertia;
		this.kMassa += Y * this.a1rely;
		this.kMassb += -Y * this.a1relx;
		this.kMassc += X * this.a1relx;
	}
	if(this.b2.sinertia != 0) {
		var X1 = this.a2relx * this.b2.sinertia;
		var Y1 = this.a2rely * this.b2.sinertia;
		this.kMassa += Y1 * this.a2rely;
		this.kMassb += -Y1 * this.a2relx;
		this.kMassc += X1 * this.a2relx;
	}
	var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
	var flag;
	if(det != det) {
		this.kMassa = this.kMassb = this.kMassc = 0;
		flag = 3;
	} else if(det == 0) {
		var flag1 = 0;
		if(this.kMassa != 0) {
			this.kMassa = 1 / this.kMassa;
		} else {
			this.kMassa = 0;
			flag1 = 1;
		}
		if(this.kMassc != 0) {
			this.kMassc = 1 / this.kMassc;
		} else {
			this.kMassc = 0;
			flag1 |= 2;
		}
		this.kMassb = 0;
		flag = flag1;
	} else {
		det = 1 / det;
		var t = this.kMassc * det;
		this.kMassc = this.kMassa * det;
		this.kMassa = t;
		this.kMassb *= -det;
		flag = 0;
	}
	if((flag & 1) != 0) {
		this.jAccx = 0;
	}
	if((flag & 2) != 0) {
		this.jAccy = 0;
	}
	if(!this.stiff) {
		var biasCoef;
		var omega = 2 * Math.PI * this.frequency;
		this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
		var ig = 1 / (1 + this.gamma);
		biasCoef = dt * omega * omega * this.gamma;
		this.gamma *= ig;
		this.kMassa *= ig;
		this.kMassb *= ig;
		this.kMassc *= ig;
		this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy > this.maxError * this.maxError) {
			return true;
		}
		var t1 = -biasCoef;
		this.biasx *= t1;
		this.biasy *= t1;
		var t2 = this.maxError;
		var ls = this.biasx * this.biasx + this.biasy * this.biasy;
		if(ls > t2 * t2) {
			var t3 = t2 * (1.0 / Math.sqrt(ls));
			this.biasx *= t3;
			this.biasy *= t3;
		}
	} else {
		this.biasx = 0;
		this.biasy = 0;
		this.gamma = 0;
	}
	this.jAccx *= dtratio;
	this.jAccy *= dtratio;
	this.jMax = this.maxForce * dt;
	return false;
};
ZPP_PivotJoint.prototype.warmStart = function() {
	var t = this.b1.imass;
	this.b1.velx -= this.jAccx * t;
	this.b1.vely -= this.jAccy * t;
	var t1 = this.b2.imass;
	this.b2.velx += this.jAccx * t1;
	this.b2.vely += this.jAccy * t1;
	this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely) * this.b1.iinertia;
	this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely) * this.b2.iinertia;
};
ZPP_PivotJoint.prototype.applyImpulseVel = function() {
	var Ex = 0.0;
	var Ey = 0.0;
	Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
	Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
	var Jx = 0.0;
	var Jy = 0.0;
	Jx = this.biasx - Ex;
	Jy = this.biasy - Ey;
	var t = this.kMassa * Jx + this.kMassb * Jy;
	Jy = this.kMassb * Jx + this.kMassc * Jy;
	Jx = t;
	var t1 = this.gamma;
	Jx -= this.jAccx * t1;
	Jy -= this.jAccy * t1;
	var jOldx = 0.0;
	var jOldy = 0.0;
	jOldx = this.jAccx;
	jOldy = this.jAccy;
	this.jAccx += Jx;
	this.jAccy += Jy;
	if(this.breakUnderForce) {
		if(this.jAccx * this.jAccx + this.jAccy * this.jAccy > this.jMax * this.jMax) {
			return true;
		}
	} else if(!this.stiff) {
		var t2 = this.jMax;
		var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
		if(ls > t2 * t2) {
			var t3 = t2 * (1.0 / Math.sqrt(ls));
			this.jAccx *= t3;
			this.jAccy *= t3;
		}
	}
	Jx = this.jAccx - jOldx;
	Jy = this.jAccy - jOldy;
	var t4 = this.b1.imass;
	this.b1.velx -= Jx * t4;
	this.b1.vely -= Jy * t4;
	var t5 = this.b2.imass;
	this.b2.velx += Jx * t5;
	this.b2.vely += Jy * t5;
	this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely) * this.b1.iinertia;
	this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely) * this.b2.iinertia;
	return false;
};
ZPP_PivotJoint.prototype.applyImpulsePos = function() {
	var r1x = 0.0;
	var r1y = 0.0;
	r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	var r2x = 0.0;
	var r2y = 0.0;
	r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var Ex = 0.0;
	var Ey = 0.0;
	Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
	Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
	if(this.breakUnderError && Ex * Ex + Ey * Ey > this.maxError * this.maxError) {
		return true;
	}
	if(Ex * Ex + Ey * Ey < Config.constraintLinearSlop * Config.constraintLinearSlop) {
		return false;
	}
	Ex *= 0.5;
	Ey *= 0.5;
	var Jx = 0.0;
	var Jy = 0.0;
	if(Ex * Ex + Ey * Ey > 6) {
		var k = this.b1.smass + this.b2.smass;
		if(k > Config.epsilon) {
			k = 0.75 / k;
			Jx = -Ex * k;
			Jy = -Ey * k;
			var ls = Jx * Jx + Jy * Jy;
			if(ls > 400) {
				var t = 20 * (1.0 / Math.sqrt(ls));
				Jx *= t;
				Jy *= t;
			}
			var t1 = this.b1.imass;
			this.b1.posx -= Jx * t1;
			this.b1.posy -= Jy * t1;
			var t2 = this.b2.imass;
			this.b2.posx += Jx * t2;
			this.b2.posy += Jy * t2;
			Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
			Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
			Ex *= 0.5;
			Ey *= 0.5;
		}
	}
	var Ka = 0.0;
	var Kb = 0.0;
	var Kc = 0.0;
	var m = this.b1.smass + this.b2.smass;
	Ka = m;
	Kb = 0;
	Kc = m;
	if(this.b1.sinertia != 0) {
		var X = r1x * this.b1.sinertia;
		var Y = r1y * this.b1.sinertia;
		Ka = m + Y * r1y;
		Kb += -Y * r1x;
		Kc = m + X * r1x;
	}
	if(this.b2.sinertia != 0) {
		var X1 = r2x * this.b2.sinertia;
		var Y1 = r2y * this.b2.sinertia;
		Ka += Y1 * r2y;
		Kb += -Y1 * r2x;
		Kc += X1 * r2x;
	}
	Jx = -Ex;
	Jy = -Ey;
	var ls1 = Jx * Jx + Jy * Jy;
	if(ls1 > 36) {
		var t3 = 6 * (1.0 / Math.sqrt(ls1));
		Jx *= t3;
		Jy *= t3;
	}
	var det = Ka * Kc - Kb * Kb;
	if(det != det) {
		Jy = 0;
		Jx = Jy;
	} else if(det == 0) {
		if(Ka != 0) {
			Jx /= Ka;
		} else {
			Jx = 0;
		}
		if(Kc != 0) {
			Jy /= Kc;
		} else {
			Jy = 0;
		}
	} else {
		det = 1 / det;
		var t4 = det * (Kc * Jx - Kb * Jy);
		Jy = det * (Ka * Jy - Kb * Jx);
		Jx = t4;
	}
	var t5 = this.b1.imass;
	this.b1.posx -= Jx * t5;
	this.b1.posy -= Jy * t5;
	var t6 = this.b2.imass;
	this.b2.posx += Jx * t6;
	this.b2.posy += Jy * t6;
	var _this = this.b1;
	var dr = -(Jy * r1x - Jx * r1y) * this.b1.iinertia;
	_this.rot += dr;
	if(dr * dr > 0.0001) {
		_this.axisx = Math.sin(_this.rot);
		_this.axisy = Math.cos(_this.rot);
	} else {
		var d2 = dr * dr;
		var p = 1 - 0.5 * d2;
		var m1 = 1 - d2 * d2 / 8;
		var nx = (p * _this.axisx + dr * _this.axisy) * m1;
		_this.axisy = (p * _this.axisy - dr * _this.axisx) * m1;
		_this.axisx = nx;
	}
	var _this1 = this.b2;
	var dr1 = (Jy * r2x - Jx * r2y) * this.b2.iinertia;
	_this1.rot += dr1;
	if(dr1 * dr1 > 0.0001) {
		_this1.axisx = Math.sin(_this1.rot);
		_this1.axisy = Math.cos(_this1.rot);
	} else {
		var d21 = dr1 * dr1;
		var p1 = 1 - 0.5 * d21;
		var m2 = 1 - d21 * d21 / 8;
		var nx1 = (p1 * _this1.axisx + dr1 * _this1.axisy) * m2;
		_this1.axisy = (p1 * _this1.axisy - dr1 * _this1.axisx) * m2;
		_this1.axisx = nx1;
	}
	return false;
};
ZPP_PivotJoint.prototype.draw = function(g) {
};
ZPP_PivotJoint.prototype.__class__ = ZPP_PivotJoint;
var ZPP_PulleyJoint = zpp_nape.constraint.ZPP_PulleyJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.wrap_a4 = null;
	this.a4rely = 0.0;
	this.a4relx = 0.0;
	this.a4localy = 0.0;
	this.a4localx = 0.0;
	this.b4 = null;
	this.wrap_a3 = null;
	this.a3rely = 0.0;
	this.a3relx = 0.0;
	this.a3localy = 0.0;
	this.a3localx = 0.0;
	this.b3 = null;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.cx4 = 0.0;
	this.cx3 = 0.0;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.n34y = 0.0;
	this.n34x = 0.0;
	this.n12y = 0.0;
	this.n12x = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.ratio = 1.0;
	this.outer_zn = null;
	ZPP_Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.a3localx = 0;
	this.a3localy = 0;
	this.a3relx = 0;
	this.a3rely = 0;
	this.a4localx = 0;
	this.a4localy = 0;
	this.a4relx = 0;
	this.a4rely = 0;
	this.n12x = 1;
	this.n12y = 0;
	this.n34x = 1;
	this.n34y = 0;
	this.jAcc = 0;
	this.jMax = Infinity;
	this.stepped = false;
	this.cx1 = this.cx2 = this.cx3 = this.cx4 = 0;
};
ZPP_PulleyJoint.__name__ = ["zpp_nape","constraint","ZPP_PulleyJoint"];
ZPP_PulleyJoint.__super__ = ZPP_Constraint;
// for(var k in ZPP_Constraint.prototype ) ZPP_PulleyJoint.prototype[k] = ZPP_Constraint.prototype[k];
ZPP_PulleyJoint.prototype = Object.create(ZPP_Constraint.prototype);
ZPP_PulleyJoint.prototype.outer_zn = null;
ZPP_PulleyJoint.prototype.ratio = null;
ZPP_PulleyJoint.prototype.jointMin = null;
ZPP_PulleyJoint.prototype.jointMax = null;
ZPP_PulleyJoint.prototype.slack = null;
ZPP_PulleyJoint.prototype.equal = null;
ZPP_PulleyJoint.prototype.is_slack = function() {
	var slack;
	this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	this.a3relx = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
	this.a3rely = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
	this.a4relx = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
	this.a4rely = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
	var t12x = 0.0;
	var t12y = 0.0;
	var t34x = 0.0;
	var t34y = 0.0;
	t12x = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
	t12y = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
	t34x = this.b4.posx + this.a4relx - (this.b3.posx + this.a3relx);
	t34y = this.b4.posy + this.a4rely - (this.b3.posy + this.a3rely);
	var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
	var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
	if(C34 == 0) {
		Math.sqrt(0.);
	}
	var C = C12 + this.ratio * C34;
	if(this.equal) {
		slack = false;
	} else if(C < this.jointMin) {
		slack = false;
	} else if(C > this.jointMax) {
		C -= this.jointMax;
		slack = false;
	} else {
		C = 0;
		slack = true;
	}
	return slack;
};
ZPP_PulleyJoint.prototype.n12x = null;
ZPP_PulleyJoint.prototype.n12y = null;
ZPP_PulleyJoint.prototype.n34x = null;
ZPP_PulleyJoint.prototype.n34y = null;
ZPP_PulleyJoint.prototype.cx1 = null;
ZPP_PulleyJoint.prototype.cx2 = null;
ZPP_PulleyJoint.prototype.cx3 = null;
ZPP_PulleyJoint.prototype.cx4 = null;
ZPP_PulleyJoint.prototype.bodyImpulse = function(b) {
	if(this.stepped) {
		var ret = Vec3.get();
		if(b == this.b1) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._validate != null) {
				_this._validate();
			}
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			if(ret.zpp_inner.immutable) {
				throw new js._Boot.HaxeError("Error: Vec3 is immutable");
			}
			ret.zpp_inner.x = ret.zpp_inner.x - this.jAcc * this.n12x;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			if(ret.zpp_inner.immutable) {
				throw new js._Boot.HaxeError("Error: Vec3 is immutable");
			}
			ret.zpp_inner.y = ret.zpp_inner.y - this.jAcc * this.n12y;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this3 = ret.zpp_inner;
			if(_this3._validate != null) {
				_this3._validate();
			}
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this4 = ret.zpp_inner;
			if(_this4._validate != null) {
				_this4._validate();
			}
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			if(ret.zpp_inner.immutable) {
				throw new js._Boot.HaxeError("Error: Vec3 is immutable");
			}
			ret.zpp_inner.z = ret.zpp_inner.z - this.cx1 * this.jAcc;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this5 = ret.zpp_inner;
			if(_this5._validate != null) {
				_this5._validate();
			}
		}
		if(b == this.b2) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this6 = ret.zpp_inner;
			if(_this6._validate != null) {
				_this6._validate();
			}
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			if(ret.zpp_inner.immutable) {
				throw new js._Boot.HaxeError("Error: Vec3 is immutable");
			}
			ret.zpp_inner.x = ret.zpp_inner.x + this.jAcc * this.n12x;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this7 = ret.zpp_inner;
			if(_this7._validate != null) {
				_this7._validate();
			}
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this8 = ret.zpp_inner;
			if(_this8._validate != null) {
				_this8._validate();
			}
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			if(ret.zpp_inner.immutable) {
				throw new js._Boot.HaxeError("Error: Vec3 is immutable");
			}
			ret.zpp_inner.y = ret.zpp_inner.y + this.jAcc * this.n12y;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this9 = ret.zpp_inner;
			if(_this9._validate != null) {
				_this9._validate();
			}
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this10 = ret.zpp_inner;
			if(_this10._validate != null) {
				_this10._validate();
			}
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			if(ret.zpp_inner.immutable) {
				throw new js._Boot.HaxeError("Error: Vec3 is immutable");
			}
			ret.zpp_inner.z = ret.zpp_inner.z + this.cx2 * this.jAcc;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this11 = ret.zpp_inner;
			if(_this11._validate != null) {
				_this11._validate();
			}
		}
		if(b == this.b3) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this12 = ret.zpp_inner;
			if(_this12._validate != null) {
				_this12._validate();
			}
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			if(ret.zpp_inner.immutable) {
				throw new js._Boot.HaxeError("Error: Vec3 is immutable");
			}
			ret.zpp_inner.x = ret.zpp_inner.x - this.jAcc * this.n34x;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this13 = ret.zpp_inner;
			if(_this13._validate != null) {
				_this13._validate();
			}
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this14 = ret.zpp_inner;
			if(_this14._validate != null) {
				_this14._validate();
			}
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			if(ret.zpp_inner.immutable) {
				throw new js._Boot.HaxeError("Error: Vec3 is immutable");
			}
			ret.zpp_inner.y = ret.zpp_inner.y - this.jAcc * this.n34y;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this15 = ret.zpp_inner;
			if(_this15._validate != null) {
				_this15._validate();
			}
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this16 = ret.zpp_inner;
			if(_this16._validate != null) {
				_this16._validate();
			}
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			if(ret.zpp_inner.immutable) {
				throw new js._Boot.HaxeError("Error: Vec3 is immutable");
			}
			ret.zpp_inner.z = ret.zpp_inner.z - this.cx3 * this.jAcc;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this17 = ret.zpp_inner;
			if(_this17._validate != null) {
				_this17._validate();
			}
		}
		if(b == this.b4) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this18 = ret.zpp_inner;
			if(_this18._validate != null) {
				_this18._validate();
			}
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			if(ret.zpp_inner.immutable) {
				throw new js._Boot.HaxeError("Error: Vec3 is immutable");
			}
			ret.zpp_inner.x = ret.zpp_inner.x + this.jAcc * this.n34x;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this19 = ret.zpp_inner;
			if(_this19._validate != null) {
				_this19._validate();
			}
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this20 = ret.zpp_inner;
			if(_this20._validate != null) {
				_this20._validate();
			}
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			if(ret.zpp_inner.immutable) {
				throw new js._Boot.HaxeError("Error: Vec3 is immutable");
			}
			ret.zpp_inner.y = ret.zpp_inner.y + this.jAcc * this.n34y;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this21 = ret.zpp_inner;
			if(_this21._validate != null) {
				_this21._validate();
			}
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this22 = ret.zpp_inner;
			if(_this22._validate != null) {
				_this22._validate();
			}
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			if(ret.zpp_inner.immutable) {
				throw new js._Boot.HaxeError("Error: Vec3 is immutable");
			}
			ret.zpp_inner.z = ret.zpp_inner.z + this.cx4 * this.jAcc;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
			}
			var _this23 = ret.zpp_inner;
			if(_this23._validate != null) {
				_this23._validate();
			}
		}
		return ret;
	} else {
		return Vec3.get(0,0,0);
	}
};
ZPP_PulleyJoint.prototype.activeBodies = function() {
	if(this.b1 != null) {
		this.b1.constraints.add(this);
	}
	if(this.b2 != this.b1) {
		if(this.b2 != null) {
			this.b2.constraints.add(this);
		}
	}
	if(this.b3 != this.b1 && this.b3 != this.b2) {
		if(this.b3 != null) {
			this.b3.constraints.add(this);
		}
	}
	if(this.b4 != this.b1 && this.b4 != this.b2 && this.b4 != this.b3) {
		if(this.b4 != null) {
			this.b4.constraints.add(this);
		}
	}
};
ZPP_PulleyJoint.prototype.inactiveBodies = function() {
	if(this.b1 != null) {
		this.b1.constraints.remove(this);
	}
	if(this.b2 != this.b1) {
		if(this.b2 != null) {
			this.b2.constraints.remove(this);
		}
	}
	if(this.b3 != this.b1 && this.b3 != this.b2) {
		if(this.b3 != null) {
			this.b3.constraints.remove(this);
		}
	}
	if(this.b4 != this.b1 && this.b4 != this.b2 && this.b4 != this.b3) {
		if(this.b4 != null) {
			this.b4.constraints.remove(this);
		}
	}
};
ZPP_PulleyJoint.prototype.b1 = null;
ZPP_PulleyJoint.prototype.a1localx = null;
ZPP_PulleyJoint.prototype.a1localy = null;
ZPP_PulleyJoint.prototype.a1relx = null;
ZPP_PulleyJoint.prototype.a1rely = null;
ZPP_PulleyJoint.prototype.validate_a1 = function() {
	this.wrap_a1.zpp_inner.x = this.a1localx;
	this.wrap_a1.zpp_inner.y = this.a1localy;
};
ZPP_PulleyJoint.prototype.invalidate_a1 = function(x) {
	this.immutable_midstep("Constraint::" + "a1");
	this.a1localx = x.x;
	this.a1localy = x.y;
	this.wake();
};
ZPP_PulleyJoint.prototype.setup_a1 = function() {
	var x = this.a1localx;
	var y = this.a1localy;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_a1 = ret;
	this.wrap_a1.zpp_inner._inuse = true;
	this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
	this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
};
ZPP_PulleyJoint.prototype.wrap_a1 = null;
ZPP_PulleyJoint.prototype.b2 = null;
ZPP_PulleyJoint.prototype.a2localx = null;
ZPP_PulleyJoint.prototype.a2localy = null;
ZPP_PulleyJoint.prototype.a2relx = null;
ZPP_PulleyJoint.prototype.a2rely = null;
ZPP_PulleyJoint.prototype.validate_a2 = function() {
	this.wrap_a2.zpp_inner.x = this.a2localx;
	this.wrap_a2.zpp_inner.y = this.a2localy;
};
ZPP_PulleyJoint.prototype.invalidate_a2 = function(x) {
	this.immutable_midstep("Constraint::" + "a2");
	this.a2localx = x.x;
	this.a2localy = x.y;
	this.wake();
};
ZPP_PulleyJoint.prototype.setup_a2 = function() {
	var x = this.a2localx;
	var y = this.a2localy;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_a2 = ret;
	this.wrap_a2.zpp_inner._inuse = true;
	this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
	this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
};
ZPP_PulleyJoint.prototype.wrap_a2 = null;
ZPP_PulleyJoint.prototype.b3 = null;
ZPP_PulleyJoint.prototype.a3localx = null;
ZPP_PulleyJoint.prototype.a3localy = null;
ZPP_PulleyJoint.prototype.a3relx = null;
ZPP_PulleyJoint.prototype.a3rely = null;
ZPP_PulleyJoint.prototype.validate_a3 = function() {
	this.wrap_a3.zpp_inner.x = this.a3localx;
	this.wrap_a3.zpp_inner.y = this.a3localy;
};
ZPP_PulleyJoint.prototype.invalidate_a3 = function(x) {
	this.immutable_midstep("Constraint::" + "a3");
	this.a3localx = x.x;
	this.a3localy = x.y;
	this.wake();
};
ZPP_PulleyJoint.prototype.setup_a3 = function() {
	var x = this.a3localx;
	var y = this.a3localy;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_a3 = ret;
	this.wrap_a3.zpp_inner._inuse = true;
	this.wrap_a3.zpp_inner._validate = $bind(this,this.validate_a3);
	this.wrap_a3.zpp_inner._invalidate = $bind(this,this.invalidate_a3);
};
ZPP_PulleyJoint.prototype.wrap_a3 = null;
ZPP_PulleyJoint.prototype.b4 = null;
ZPP_PulleyJoint.prototype.a4localx = null;
ZPP_PulleyJoint.prototype.a4localy = null;
ZPP_PulleyJoint.prototype.a4relx = null;
ZPP_PulleyJoint.prototype.a4rely = null;
ZPP_PulleyJoint.prototype.validate_a4 = function() {
	this.wrap_a4.zpp_inner.x = this.a4localx;
	this.wrap_a4.zpp_inner.y = this.a4localy;
};
ZPP_PulleyJoint.prototype.invalidate_a4 = function(x) {
	this.immutable_midstep("Constraint::" + "a4");
	this.a4localx = x.x;
	this.a4localy = x.y;
	this.wake();
};
ZPP_PulleyJoint.prototype.setup_a4 = function() {
	var x = this.a4localx;
	var y = this.a4localy;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_a4 = ret;
	this.wrap_a4.zpp_inner._inuse = true;
	this.wrap_a4.zpp_inner._validate = $bind(this,this.validate_a4);
	this.wrap_a4.zpp_inner._invalidate = $bind(this,this.invalidate_a4);
};
ZPP_PulleyJoint.prototype.wrap_a4 = null;
ZPP_PulleyJoint.prototype.kMass = null;
ZPP_PulleyJoint.prototype.jAcc = null;
ZPP_PulleyJoint.prototype.jMax = null;
ZPP_PulleyJoint.prototype.gamma = null;
ZPP_PulleyJoint.prototype.bias = null;
ZPP_PulleyJoint.prototype.stepped = null;
ZPP_PulleyJoint.prototype.copy = function(dict,todo) {
	var _this = this.outer_zn;
	if(_this.zpp_inner_zn.wrap_a1 == null) {
		_this.zpp_inner_zn.setup_a1();
	}
	var tmp = _this.zpp_inner_zn.wrap_a1;
	var _this1 = this.outer_zn;
	if(_this1.zpp_inner_zn.wrap_a2 == null) {
		_this1.zpp_inner_zn.setup_a2();
	}
	var tmp1 = _this1.zpp_inner_zn.wrap_a2;
	var _this2 = this.outer_zn;
	if(_this2.zpp_inner_zn.wrap_a3 == null) {
		_this2.zpp_inner_zn.setup_a3();
	}
	var tmp2 = _this2.zpp_inner_zn.wrap_a3;
	var _this3 = this.outer_zn;
	if(_this3.zpp_inner_zn.wrap_a4 == null) {
		_this3.zpp_inner_zn.setup_a4();
	}
	var ret = new PulleyJoint(null,null,null,null,tmp,tmp1,tmp2,_this3.zpp_inner_zn.wrap_a4,this.jointMin,this.jointMax,this.ratio);
	this.copyto(ret);
	if(dict != null && this.b1 != null) {
		var b = null;
		var _g = 0;
		while(_g < dict.length) {
			var idc = dict[_g];
			++_g;
			if(idc.id == this.b1.id) {
				b = idc.bc;
				break;
			}
		}
		if(b != null) {
			ret.zpp_inner_zn.b1 = b.zpp_inner;
		} else {
			todo.push(ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
	}
	if(dict != null && this.b2 != null) {
		var b2 = null;
		var _g1 = 0;
		while(_g1 < dict.length) {
			var idc1 = dict[_g1];
			++_g1;
			if(idc1.id == this.b2.id) {
				b2 = idc1.bc;
				break;
			}
		}
		if(b2 != null) {
			ret.zpp_inner_zn.b2 = b2.zpp_inner;
		} else {
			todo.push(ZPP_CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
	}
	if(dict != null && this.b3 != null) {
		var b4 = null;
		var _g2 = 0;
		while(_g2 < dict.length) {
			var idc2 = dict[_g2];
			++_g2;
			if(idc2.id == this.b3.id) {
				b4 = idc2.bc;
				break;
			}
		}
		if(b4 != null) {
			ret.zpp_inner_zn.b3 = b4.zpp_inner;
		} else {
			todo.push(ZPP_CopyHelper.todo(this.b3.id,function(b5) {
				ret.zpp_inner_zn.b3 = b5.zpp_inner;
			}));
		}
	}
	if(dict != null && this.b4 != null) {
		var b6 = null;
		var _g3 = 0;
		while(_g3 < dict.length) {
			var idc3 = dict[_g3];
			++_g3;
			if(idc3.id == this.b4.id) {
				b6 = idc3.bc;
				break;
			}
		}
		if(b6 != null) {
			ret.zpp_inner_zn.b4 = b6.zpp_inner;
		} else {
			todo.push(ZPP_CopyHelper.todo(this.b4.id,function(b7) {
				ret.zpp_inner_zn.b4 = b7.zpp_inner;
			}));
		}
	}
	return ret;
};
ZPP_PulleyJoint.prototype.validate = function() {
	if(this.b1 == null || this.b2 == null || this.b3 == null || this.b4 == null) {
		throw new js._Boot.HaxeError("Error: PulleyJoint cannot be simulated with null bodies");
	}
	if(this.b1 == this.b2 || this.b3 == this.b4) {
		throw new js._Boot.HaxeError("Error: PulleyJoint cannot have body1==body2 or body3==body4");
	}
	if(this.b1.space != this.space || this.b2.space != this.space || this.b3.space != this.space || this.b4.space != this.space) {
		throw new js._Boot.HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
	}
	if(this.jointMin > this.jointMax) {
		throw new js._Boot.HaxeError("Error: PulleyJoint must have jointMin <= jointMax");
	}
	if(this.b1.type != 2 && this.b2.type != 2) {
		throw new js._Boot.HaxeError("Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic");
	}
	if(this.b3.type != 2 && this.b4.type != 2) {
		throw new js._Boot.HaxeError("Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic");
	}
};
ZPP_PulleyJoint.prototype.wake_connected = function() {
	if(this.b1 != null && this.b1.type == 2) {
		this.b1.wake();
	}
	if(this.b2 != null && this.b2.type == 2) {
		this.b2.wake();
	}
	if(this.b3 != null && this.b3.type == 2) {
		this.b3.wake();
	}
	if(this.b4 != null && this.b4.type == 2) {
		this.b4.wake();
	}
};
ZPP_PulleyJoint.prototype.forest = function() {
	if(this.b1.type == 2) {
		var xr;
		if(this.b1.component == this.b1.component.parent) {
			xr = this.b1.component;
		} else {
			var obj = this.b1.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt1 = stack.parent;
				stack.parent = obj;
				stack = nxt1;
			}
			xr = obj;
		}
		var yr;
		if(this.component == this.component.parent) {
			yr = this.component;
		} else {
			var obj1 = this.component;
			var stack1 = null;
			while(obj1 != obj1.parent) {
				var nxt2 = obj1.parent;
				obj1.parent = stack1;
				stack1 = obj1;
				obj1 = nxt2;
			}
			while(stack1 != null) {
				var nxt3 = stack1.parent;
				stack1.parent = obj1;
				stack1 = nxt3;
			}
			yr = obj1;
		}
		if(xr != yr) {
			if(xr.rank < yr.rank) {
				xr.parent = yr;
			} else if(xr.rank > yr.rank) {
				yr.parent = xr;
			} else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
	if(this.b2.type == 2) {
		var xr1;
		if(this.b2.component == this.b2.component.parent) {
			xr1 = this.b2.component;
		} else {
			var obj2 = this.b2.component;
			var stack2 = null;
			while(obj2 != obj2.parent) {
				var nxt4 = obj2.parent;
				obj2.parent = stack2;
				stack2 = obj2;
				obj2 = nxt4;
			}
			while(stack2 != null) {
				var nxt5 = stack2.parent;
				stack2.parent = obj2;
				stack2 = nxt5;
			}
			xr1 = obj2;
		}
		var yr1;
		if(this.component == this.component.parent) {
			yr1 = this.component;
		} else {
			var obj3 = this.component;
			var stack3 = null;
			while(obj3 != obj3.parent) {
				var nxt6 = obj3.parent;
				obj3.parent = stack3;
				stack3 = obj3;
				obj3 = nxt6;
			}
			while(stack3 != null) {
				var nxt7 = stack3.parent;
				stack3.parent = obj3;
				stack3 = nxt7;
			}
			yr1 = obj3;
		}
		if(xr1 != yr1) {
			if(xr1.rank < yr1.rank) {
				xr1.parent = yr1;
			} else if(xr1.rank > yr1.rank) {
				yr1.parent = xr1;
			} else {
				yr1.parent = xr1;
				xr1.rank++;
			}
		}
	}
	if(this.b3.type == 2) {
		var xr2;
		if(this.b3.component == this.b3.component.parent) {
			xr2 = this.b3.component;
		} else {
			var obj4 = this.b3.component;
			var stack4 = null;
			while(obj4 != obj4.parent) {
				var nxt8 = obj4.parent;
				obj4.parent = stack4;
				stack4 = obj4;
				obj4 = nxt8;
			}
			while(stack4 != null) {
				var nxt9 = stack4.parent;
				stack4.parent = obj4;
				stack4 = nxt9;
			}
			xr2 = obj4;
		}
		var yr2;
		if(this.component == this.component.parent) {
			yr2 = this.component;
		} else {
			var obj5 = this.component;
			var stack5 = null;
			while(obj5 != obj5.parent) {
				var nxt10 = obj5.parent;
				obj5.parent = stack5;
				stack5 = obj5;
				obj5 = nxt10;
			}
			while(stack5 != null) {
				var nxt11 = stack5.parent;
				stack5.parent = obj5;
				stack5 = nxt11;
			}
			yr2 = obj5;
		}
		if(xr2 != yr2) {
			if(xr2.rank < yr2.rank) {
				xr2.parent = yr2;
			} else if(xr2.rank > yr2.rank) {
				yr2.parent = xr2;
			} else {
				yr2.parent = xr2;
				xr2.rank++;
			}
		}
	}
	if(this.b4.type == 2) {
		var xr3;
		if(this.b4.component == this.b4.component.parent) {
			xr3 = this.b4.component;
		} else {
			var obj6 = this.b4.component;
			var stack6 = null;
			while(obj6 != obj6.parent) {
				var nxt12 = obj6.parent;
				obj6.parent = stack6;
				stack6 = obj6;
				obj6 = nxt12;
			}
			while(stack6 != null) {
				var nxt13 = stack6.parent;
				stack6.parent = obj6;
				stack6 = nxt13;
			}
			xr3 = obj6;
		}
		var yr3;
		if(this.component == this.component.parent) {
			yr3 = this.component;
		} else {
			var obj7 = this.component;
			var stack7 = null;
			while(obj7 != obj7.parent) {
				var nxt14 = obj7.parent;
				obj7.parent = stack7;
				stack7 = obj7;
				obj7 = nxt14;
			}
			while(stack7 != null) {
				var nxt15 = stack7.parent;
				stack7.parent = obj7;
				stack7 = nxt15;
			}
			yr3 = obj7;
		}
		if(xr3 != yr3) {
			if(xr3.rank < yr3.rank) {
				xr3.parent = yr3;
			} else if(xr3.rank > yr3.rank) {
				yr3.parent = xr3;
			} else {
				yr3.parent = xr3;
				xr3.rank++;
			}
		}
	}
};
ZPP_PulleyJoint.prototype.pair_exists = function(id,di) {
	if(!(this.b1.id == id && (this.b2.id == di || this.b3.id == di || this.b4.id == di) || this.b2.id == id && (this.b3.id == di || this.b4.id == di || this.b1.id == di) || this.b3.id == id && (this.b4.id == di || this.b1.id == di || this.b2.id == di))) {
		if(this.b4.id == id) {
			if(!(this.b1.id == di || this.b2.id == di)) {
				return this.b3.id == di;
			} else {
				return true;
			}
		} else {
			return false;
		}
	} else {
		return true;
	}
};
ZPP_PulleyJoint.prototype.clearcache = function() {
	this.jAcc = 0;
	this.pre_dt = -1.0;
};
ZPP_PulleyJoint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) {
		this.pre_dt = dt;
	}
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.stepped = true;
	this.equal = this.jointMin == this.jointMax;
	this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	this.a3relx = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
	this.a3rely = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
	this.a4relx = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
	this.a4rely = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
	var t12x = 0.0;
	var t12y = 0.0;
	var t34x = 0.0;
	var t34y = 0.0;
	t12x = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
	t12y = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
	t34x = this.b4.posx + this.a4relx - (this.b3.posx + this.a3relx);
	t34y = this.b4.posy + this.a4rely - (this.b3.posy + this.a3rely);
	var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
	var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
	if(C12 != 0) {
		var t = 1.0 / C12;
		this.n12x = t12x * t;
		this.n12y = t12y * t;
	}
	if(C34 != 0) {
		var t1 = 1.0 / C34;
		this.n34x = t34x * t1;
		this.n34y = t34y * t1;
		var t2 = this.ratio;
		this.n34x *= t2;
		this.n34y *= t2;
	} else {
		var t3 = this.ratio / Math.sqrt(this.n34x * this.n34x + this.n34y * this.n34y);
		this.n34x *= t3;
		this.n34y *= t3;
	}
	var C = C12 + this.ratio * C34;
	if(this.equal) {
		C -= this.jointMax;
		this.slack = false;
	} else if(C < this.jointMin) {
		C = this.jointMin - C;
		this.n12x = -this.n12x;
		this.n12y = -this.n12y;
		this.n34x = -this.n34x;
		this.n34y = -this.n34y;
		this.slack = false;
	} else if(C > this.jointMax) {
		C -= this.jointMax;
		this.slack = false;
	} else {
		this.n12x = 0;
		this.n12y = 0;
		this.n34x = 0;
		this.n34y = 0;
		C = 0;
		this.slack = true;
	}
	var C1 = C;
	if(!this.slack) {
		this.cx1 = this.n12y * this.a1relx - this.n12x * this.a1rely;
		this.cx2 = this.n12y * this.a2relx - this.n12x * this.a2rely;
		this.cx3 = this.n34y * this.a3relx - this.n34x * this.a3rely;
		this.cx4 = this.n34y * this.a4relx - this.n34x * this.a4rely;
		var K = this.b1.smass + this.b2.smass + this.ratio * this.ratio * (this.b3.smass + this.b4.smass) + this.b1.sinertia * this.cx1 * this.cx1 + this.b2.sinertia * this.cx2 * this.cx2 + this.b3.sinertia * this.cx3 * this.cx3 + this.b4.sinertia * this.cx4 * this.cx4;
		if(this.b1 == this.b4) {
			K -= 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b1.smass + this.cx1 * this.cx4 * this.b1.sinertia);
		}
		if(this.b1 == this.b3) {
			K += 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b1.smass + this.cx1 * this.cx3 * this.b1.sinertia);
		}
		if(this.b2 == this.b3) {
			K -= 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b2.smass + this.cx2 * this.cx3 * this.b2.sinertia);
		}
		if(this.b2 == this.b4) {
			K += 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b2.smass + this.cx2 * this.cx4 * this.b2.sinertia);
		}
		this.kMass = K;
		if(this.kMass != 0) {
			this.kMass = 1 / this.kMass;
		} else {
			this.jAcc = 0;
		}
		if(!this.stiff) {
			if(this.breakUnderError && C1 * C1 > this.maxError * this.maxError) {
				return true;
			}
			var biasCoef;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			this.kMass *= ig;
			this.bias = -C1 * biasCoef;
			if(this.bias < -this.maxError) {
				this.bias = -this.maxError;
			} else if(this.bias > this.maxError) {
				this.bias = this.maxError;
			}
		} else {
			this.bias = 0;
			this.gamma = 0;
		}
		this.jAcc *= dtratio;
		this.jMax = this.maxForce * dt;
	}
	return false;
};
ZPP_PulleyJoint.prototype.warmStart = function() {
	if(!this.slack) {
		var t = this.b1.imass * this.jAcc;
		this.b1.velx -= this.n12x * t;
		this.b1.vely -= this.n12y * t;
		var t1 = this.b2.imass * this.jAcc;
		this.b2.velx += this.n12x * t1;
		this.b2.vely += this.n12y * t1;
		var t2 = this.b3.imass * this.jAcc;
		this.b3.velx -= this.n34x * t2;
		this.b3.vely -= this.n34y * t2;
		var t3 = this.b4.imass * this.jAcc;
		this.b4.velx += this.n34x * t3;
		this.b4.vely += this.n34y * t3;
		this.b1.angvel -= this.cx1 * this.b1.iinertia * this.jAcc;
		this.b2.angvel += this.cx2 * this.b2.iinertia * this.jAcc;
		this.b3.angvel -= this.cx3 * this.b3.iinertia * this.jAcc;
		this.b4.angvel += this.cx4 * this.b4.iinertia * this.jAcc;
	}
};
ZPP_PulleyJoint.prototype.applyImpulseVel = function() {
	if(this.slack) {
		return false;
	}
	var j = this.kMass * (this.bias - (this.n12x * (this.b2.velx + this.b2.kinvelx - this.b1.velx - this.b1.kinvelx) + this.n12y * (this.b2.vely + this.b2.kinvely - this.b1.vely - this.b1.kinvely) + this.n34x * (this.b4.velx + this.b4.kinvelx - this.b3.velx - this.b3.kinvelx) + this.n34y * (this.b4.vely + this.b4.kinvely - this.b3.vely - this.b3.kinvely) + (this.b2.angvel + this.b2.kinangvel) * this.cx2 - (this.b1.angvel + this.b1.kinangvel) * this.cx1 + (this.b4.angvel + this.b4.kinangvel) * this.cx4 - (this.b3.angvel + this.b3.kinangvel) * this.cx3)) - this.jAcc * this.gamma;
	var jOld = this.jAcc;
	this.jAcc += j;
	if(!this.equal && this.jAcc > 0) {
		this.jAcc = 0;
	}
	if(this.breakUnderForce && this.jAcc < -this.jMax) {
		return true;
	}
	if(!this.stiff) {
		if(this.jAcc < -this.jMax) {
			this.jAcc = -this.jMax;
		}
	}
	j = this.jAcc - jOld;
	var t = this.b1.imass * j;
	this.b1.velx -= this.n12x * t;
	this.b1.vely -= this.n12y * t;
	var t1 = this.b2.imass * j;
	this.b2.velx += this.n12x * t1;
	this.b2.vely += this.n12y * t1;
	var t2 = this.b3.imass * j;
	this.b3.velx -= this.n34x * t2;
	this.b3.vely -= this.n34y * t2;
	var t3 = this.b4.imass * j;
	this.b4.velx += this.n34x * t3;
	this.b4.vely += this.n34y * t3;
	this.b1.angvel -= this.cx1 * this.b1.iinertia * j;
	this.b2.angvel += this.cx2 * this.b2.iinertia * j;
	this.b3.angvel -= this.cx3 * this.b3.iinertia * j;
	this.b4.angvel += this.cx4 * this.b4.iinertia * j;
	return false;
};
ZPP_PulleyJoint.prototype.applyImpulsePos = function() {
	var E;
	var j;
	var r1x = 0.0;
	var r1y = 0.0;
	r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	var r2x = 0.0;
	var r2y = 0.0;
	r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var r3x = 0.0;
	var r3y = 0.0;
	r3x = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
	r3y = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
	var r4x = 0.0;
	var r4y = 0.0;
	r4x = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
	r4y = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
	var slack;
	var n12x = 0.0;
	var n12y = 0.0;
	var n34x = 0.0;
	var n34y = 0.0;
	n12x = this.n12x;
	n12y = this.n12y;
	n34x = this.n34x;
	n34y = this.n34y;
	var t12x = 0.0;
	var t12y = 0.0;
	var t34x = 0.0;
	var t34y = 0.0;
	t12x = this.b2.posx + r2x - (this.b1.posx + r1x);
	t12y = this.b2.posy + r2y - (this.b1.posy + r1y);
	t34x = this.b4.posx + r4x - (this.b3.posx + r3x);
	t34y = this.b4.posy + r4y - (this.b3.posy + r3y);
	var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
	var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
	if(C12 != 0) {
		var t = 1.0 / C12;
		n12x = t12x * t;
		n12y = t12y * t;
	}
	if(C34 != 0) {
		var t1 = 1.0 / C34;
		n34x = t34x * t1;
		n34y = t34y * t1;
		var t2 = this.ratio;
		n34x *= t2;
		n34y *= t2;
	} else {
		var t3 = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
		n34x *= t3;
		n34y *= t3;
	}
	var C = C12 + this.ratio * C34;
	if(this.equal) {
		C -= this.jointMax;
		slack = false;
	} else if(C < this.jointMin) {
		C = this.jointMin - C;
		n12x = -n12x;
		n12y = -n12y;
		n34x = -n34x;
		n34y = -n34y;
		slack = false;
	} else if(C > this.jointMax) {
		C -= this.jointMax;
		slack = false;
	} else {
		n12x = 0;
		n12y = 0;
		n34x = 0;
		n34y = 0;
		C = 0;
		slack = true;
	}
	E = C;
	if(!slack) {
		if(this.breakUnderError && E * E > this.maxError * this.maxError) {
			return true;
		}
		if(E * E < Config.constraintLinearSlop * Config.constraintLinearSlop) {
			return false;
		}
		E *= 0.5;
		if(E * E > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > Config.epsilon) {
				k = 0.75 / k;
				j = -E * k;
				if(this.equal || j < 0) {
					var t4 = j * this.b1.imass;
					this.b1.posx -= n12x * t4;
					this.b1.posy -= n12y * t4;
					var t5 = j * this.b2.imass;
					this.b2.posx += n12x * t5;
					this.b2.posy += n12y * t5;
					var t6 = j * this.b3.imass;
					this.b3.posx -= n34x * t6;
					this.b3.posy -= n34y * t6;
					var t7 = j * this.b4.imass;
					this.b4.posx += n34x * t7;
					this.b4.posy += n34y * t7;
					var t12x1 = 0.0;
					var t12y1 = 0.0;
					var t34x1 = 0.0;
					var t34y1 = 0.0;
					t12x1 = this.b2.posx + r2x - (this.b1.posx + r1x);
					t12y1 = this.b2.posy + r2y - (this.b1.posy + r1y);
					t34x1 = this.b4.posx + r4x - (this.b3.posx + r3x);
					t34y1 = this.b4.posy + r4y - (this.b3.posy + r3y);
					var C121 = Math.sqrt(t12x1 * t12x1 + t12y1 * t12y1);
					var C341 = Math.sqrt(t34x1 * t34x1 + t34y1 * t34y1);
					if(C121 != 0) {
						var t8 = 1.0 / C121;
						n12x = t12x1 * t8;
						n12y = t12y1 * t8;
					}
					if(C341 != 0) {
						var t9 = 1.0 / C341;
						n34x = t34x1 * t9;
						n34y = t34y1 * t9;
						var t10 = this.ratio;
						n34x *= t10;
						n34y *= t10;
					} else {
						var t11 = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
						n34x *= t11;
						n34y *= t11;
					}
					var C1 = C121 + this.ratio * C341;
					if(this.equal) {
						C1 -= this.jointMax;
					} else if(C1 < this.jointMin) {
						C1 = this.jointMin - C1;
						n12x = -n12x;
						n12y = -n12y;
						n34x = -n34x;
						n34y = -n34y;
					} else if(C1 > this.jointMax) {
						C1 -= this.jointMax;
					} else {
						n12x = 0;
						n12y = 0;
						n34x = 0;
						n34y = 0;
						C1 = 0;
					}
					E = C1;
					E *= 0.5;
				}
			}
		}
		var cx1;
		var cx2;
		var cx3;
		var cx4;
		cx1 = n12y * r1x - n12x * r1y;
		cx2 = n12y * r2x - n12x * r2y;
		cx3 = n34y * r3x - n34x * r3y;
		cx4 = n34y * r4x - n34x * r4y;
		var K = this.b1.smass + this.b2.smass + this.ratio * this.ratio * (this.b3.smass + this.b4.smass) + this.b1.sinertia * cx1 * cx1 + this.b2.sinertia * cx2 * cx2 + this.b3.sinertia * cx3 * cx3 + this.b4.sinertia * cx4 * cx4;
		if(this.b1 == this.b4) {
			K -= 2 * ((n12x * n34x + n12y * n34y) * this.b1.smass + cx1 * cx4 * this.b1.sinertia);
		}
		if(this.b1 == this.b3) {
			K += 2 * ((n12x * n34x + n12y * n34y) * this.b1.smass + cx1 * cx3 * this.b1.sinertia);
		}
		if(this.b2 == this.b3) {
			K -= 2 * ((n12x * n34x + n12y * n34y) * this.b2.smass + cx2 * cx3 * this.b2.sinertia);
		}
		if(this.b2 == this.b4) {
			K += 2 * ((n12x * n34x + n12y * n34y) * this.b2.smass + cx2 * cx4 * this.b2.sinertia);
		}
		var k1 = K;
		if(k1 != 0) {
			k1 = 1 / k1;
		}
		j = -E * k1;
		if(this.equal || j < 0) {
			var t12 = this.b1.imass * j;
			this.b1.posx -= n12x * t12;
			this.b1.posy -= n12y * t12;
			var t13 = this.b2.imass * j;
			this.b2.posx += n12x * t13;
			this.b2.posy += n12y * t13;
			var t14 = this.b3.imass * j;
			this.b3.posx -= n34x * t14;
			this.b3.posy -= n34y * t14;
			var t15 = this.b4.imass * j;
			this.b4.posx += n34x * t15;
			this.b4.posy += n34y * t15;
			var _this = this.b1;
			var dr = -cx1 * this.b1.iinertia * j;
			_this.rot += dr;
			if(dr * dr > 0.0001) {
				_this.axisx = Math.sin(_this.rot);
				_this.axisy = Math.cos(_this.rot);
			} else {
				var d2 = dr * dr;
				var p = 1 - 0.5 * d2;
				var m = 1 - d2 * d2 / 8;
				var nx = (p * _this.axisx + dr * _this.axisy) * m;
				_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
				_this.axisx = nx;
			}
			var _this1 = this.b2;
			var dr1 = cx2 * this.b2.iinertia * j;
			_this1.rot += dr1;
			if(dr1 * dr1 > 0.0001) {
				_this1.axisx = Math.sin(_this1.rot);
				_this1.axisy = Math.cos(_this1.rot);
			} else {
				var d21 = dr1 * dr1;
				var p1 = 1 - 0.5 * d21;
				var m1 = 1 - d21 * d21 / 8;
				var nx1 = (p1 * _this1.axisx + dr1 * _this1.axisy) * m1;
				_this1.axisy = (p1 * _this1.axisy - dr1 * _this1.axisx) * m1;
				_this1.axisx = nx1;
			}
			var _this2 = this.b3;
			var dr2 = -cx3 * this.b3.iinertia * j;
			_this2.rot += dr2;
			if(dr2 * dr2 > 0.0001) {
				_this2.axisx = Math.sin(_this2.rot);
				_this2.axisy = Math.cos(_this2.rot);
			} else {
				var d22 = dr2 * dr2;
				var p2 = 1 - 0.5 * d22;
				var m2 = 1 - d22 * d22 / 8;
				var nx2 = (p2 * _this2.axisx + dr2 * _this2.axisy) * m2;
				_this2.axisy = (p2 * _this2.axisy - dr2 * _this2.axisx) * m2;
				_this2.axisx = nx2;
			}
			var _this3 = this.b4;
			var dr3 = cx4 * this.b4.iinertia * j;
			_this3.rot += dr3;
			if(dr3 * dr3 > 0.0001) {
				_this3.axisx = Math.sin(_this3.rot);
				_this3.axisy = Math.cos(_this3.rot);
			} else {
				var d23 = dr3 * dr3;
				var p3 = 1 - 0.5 * d23;
				var m3 = 1 - d23 * d23 / 8;
				var nx3 = (p3 * _this3.axisx + dr3 * _this3.axisy) * m3;
				_this3.axisy = (p3 * _this3.axisy - dr3 * _this3.axisx) * m3;
				_this3.axisx = nx3;
			}
		}
	}
	return false;
};
ZPP_PulleyJoint.prototype.draw = function(g) {
};
ZPP_PulleyJoint.prototype.__class__ = ZPP_PulleyJoint;
var ZPP_UserConstraint = zpp_nape.constraint.ZPP_UserConstraint = function(dim,velonly) {
	this.jOld = null;
	this.J = null;
	this.vec3 = null;
	this.Keff = null;
	this.jMax = 0.0;
	this.velonly = false;
	this.gamma = 0.0;
	this.soft = 0.0;
	this.y = null;
	this.L = null;
	this.stepped = false;
	this.bias = null;
	this.jAcc = null;
	this.dim = 0;
	this.bodies = null;
	this.outer_zn = null;
	ZPP_Constraint.call(this);
	this.bodies = [];
	this.dim = dim;
	this.velonly = velonly;
	this.jAcc = [];
	this.bias = [];
	this.L = [];
	this.J = [];
	this.jOld = [];
	this.y = [];
	this.Keff = [];
	this.vec3 = Vec3.get(0,0,0);
	var _g1 = 0;
	while(_g1 < dim) {
		var i = _g1++;
		this.J[i] = this.jOld[i] = this.y[i] = 0.0;
		this.bias[i] = 0.0;
		this.jAcc[i] = 0.0;
		var _g3 = 0;
		while(_g3 < dim) this.L[i * dim + _g3++] = 0.0;
	}
	this.stepped = false;
};
ZPP_UserConstraint.__name__ = ["zpp_nape","constraint","ZPP_UserConstraint"];
ZPP_UserConstraint.__super__ = ZPP_Constraint;
// for(var k in ZPP_Constraint.prototype ) ZPP_UserConstraint.prototype[k] = ZPP_Constraint.prototype[k];
ZPP_UserConstraint.prototype = Object.create(ZPP_Constraint.prototype);
ZPP_UserConstraint.prototype.outer_zn = null;
ZPP_UserConstraint.prototype.bindVec2_invalidate = function(_) {
	this.outer_zn.__invalidate();
};
ZPP_UserConstraint.prototype.bodies = null;
ZPP_UserConstraint.prototype.dim = null;
ZPP_UserConstraint.prototype.jAcc = null;
ZPP_UserConstraint.prototype.bias = null;
ZPP_UserConstraint.prototype.addBody = function(b) {
	var match = null;
	var _g = 0;
	var _g1 = this.bodies;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.body == b) {
			match = x;
			break;
		}
	}
	if(match == null) {
		this.bodies.push(new ZPP_UserBody(1,b));
		if(this.active && this.space != null) {
			if(b != null) {
				b.constraints.add(this);
			}
		}
	} else {
		match.cnt++;
	}
};
ZPP_UserConstraint.prototype.remBody = function(b) {
	var match = null;
	var bl = this.bodies.length | 0;
	var i = 0;
	while(i < bl) {
		var x = this.bodies[i];
		if(x.body == b) {
			x.cnt--;
			if(x.cnt == 0) {
				if(bl > 0) {
					this.bodies[i] = this.bodies[bl - 1];
				}
				this.bodies.pop();
				if(this.active && this.space != null) {
					if(b != null) {
						b.constraints.remove(this);
					}
				}
			}
			match = x;
			break;
		}
		++i;
	}
	return match != null;
};
ZPP_UserConstraint.prototype.bodyImpulse = function(b) {
	var _g1 = 0;
	var _g = this.dim;
	while(_g1 < _g) {
		var i = _g1++;
		this.J[i] = this.jAcc[i];
	}
	var ret = Vec3.get(0,0,0);
	if(this.stepped) {
		this.outer_zn.__impulse(this.J,b.outer,ret);
	}
	return ret;
};
ZPP_UserConstraint.prototype.activeBodies = function() {
	var _g = 0;
	var _g1 = this.bodies;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.body != null) {
			b.body.constraints.add(this);
		}
	}
};
ZPP_UserConstraint.prototype.inactiveBodies = function() {
	var _g = 0;
	var _g1 = this.bodies;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.body != null) {
			b.body.constraints.remove(this);
		}
	}
};
ZPP_UserConstraint.prototype.stepped = null;
ZPP_UserConstraint.prototype.copy = function(dict,todo) {
	this.copyto(this.outer_zn.__copy());
	throw new js._Boot.HaxeError("not done yet");
};
ZPP_UserConstraint.prototype.validate = function() {
	var _g = 0;
	var _g1 = this.bodies;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.body.space != this.space) {
			throw new js._Boot.HaxeError("Error: Constraints must have each body within the same sapce to which the constraint has been assigned");
		}
	}
	this.outer_zn.__validate();
};
ZPP_UserConstraint.prototype.wake_connected = function() {
	var _g = 0;
	var _g1 = this.bodies;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.body.type == 2) {
			b.body.wake();
		}
	}
};
ZPP_UserConstraint.prototype.forest = function() {
	var _g = 0;
	var _g1 = this.bodies;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.body.type == 2) {
			var xr;
			if(b.body.component == b.body.component.parent) {
				xr = b.body.component;
			} else {
				var obj = b.body.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
	}
};
ZPP_UserConstraint.prototype.pair_exists = function(id,di) {
	var ret = false;
	var bl = this.bodies.length | 0;
	var _g1 = 0;
	while(_g1 < bl) {
		var bi = _g1++;
		var b = this.bodies[bi].body;
		var _g3 = bi + 1;
		while(_g3 < bl) {
			var c = this.bodies[_g3++].body;
			if(b.id == id && c.id == di || b.id == di && c.id == id) {
				ret = true;
				break;
			}
		}
		if(ret) {
			break;
		}
	}
	return ret;
};
ZPP_UserConstraint.prototype.broken = function() {
	this.outer_zn.__broken();
};
ZPP_UserConstraint.prototype.clearcache = function() {
	var _g1 = 0;
	var _g = this.dim;
	while(_g1 < _g) this.jAcc[_g1++] = 0.0;
	this.pre_dt = -1.0;
};
ZPP_UserConstraint.prototype.lsq = function(v) {
	var sum = 0.0;
	var _g1 = 0;
	var _g = this.dim;
	while(_g1 < _g) {
		var i = _g1++;
		sum += v[i] * v[i];
	}
	return sum;
};
ZPP_UserConstraint.prototype._clamp = function(v,max) {
	var x = this.lsq(v);
	if(x > max * max) {
		var scale = max / Math.sqrt(x);
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) v[_g1++] *= scale;
	}
};
ZPP_UserConstraint.prototype.L = null;
ZPP_UserConstraint.prototype.solve = function(m) {
	var ind = 0;
	var _g1 = 0;
	var _g = this.dim;
	while(_g1 < _g) {
		var j = _g1++;
		var sum = 0.0;
		var _g3 = 0;
		var _g2 = j - 1;
		while(_g3 < _g2) {
			var k = _g3++;
			sum += this.L[j * this.dim + k] * this.L[j * this.dim + k];
		}
		var rec = Math.sqrt(m[ind++] - sum);
		this.L[j * this.dim + j] = rec;
		if(rec != 0) {
			rec = 1.0 / rec;
			var _g31 = j + 1;
			var _g21 = this.dim;
			while(_g31 < _g21) {
				var i = _g31++;
				var sum1 = 0.0;
				var _g5 = 0;
				var _g4 = j - 1;
				while(_g5 < _g4) {
					var k1 = _g5++;
					sum1 += this.L[i * this.dim + k1] * this.L[j * this.dim + k1];
				}
				this.L[i * this.dim + j] = rec * (m[ind++] - sum1);
			}
		} else {
			var _g32 = j + 1;
			var _g22 = this.dim;
			while(_g32 < _g22) this.L[_g32++ * this.dim + j] = 0.0;
			ind += this.dim - j - 1;
		}
	}
	return this.L;
};
ZPP_UserConstraint.prototype.y = null;
ZPP_UserConstraint.prototype.transform = function(L,x) {
	var _g1 = 0;
	var _g = this.dim;
	while(_g1 < _g) {
		var i = _g1++;
		var sum = x[i];
		var lii = L[i * this.dim + i];
		if(lii != 0) {
			var _g3 = 0;
			while(_g3 < i) {
				var k = _g3++;
				sum -= L[i * this.dim + k] * this.y[k];
			}
			this.y[i] = sum / lii;
		} else {
			this.y[i] = 0.0;
		}
	}
	var _g11 = 0;
	var _g2 = this.dim;
	while(_g11 < _g2) {
		var i1 = this.dim - 1 - _g11++;
		var lii1 = L[i1 * this.dim + i1];
		if(lii1 != 0) {
			var sum1 = this.y[i1];
			var _g31 = i1 + 1;
			var _g21 = this.dim;
			while(_g31 < _g21) {
				var k1 = _g31++;
				sum1 -= L[k1 * this.dim + i1] * x[k1];
			}
			x[i1] = sum1 / lii1;
		} else {
			x[i1] = 0.0;
		}
	}
};
ZPP_UserConstraint.prototype.soft = null;
ZPP_UserConstraint.prototype.gamma = null;
ZPP_UserConstraint.prototype.velonly = null;
ZPP_UserConstraint.prototype.jMax = null;
ZPP_UserConstraint.prototype.Keff = null;
ZPP_UserConstraint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) {
		this.pre_dt = dt;
	}
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.stepped = true;
	this.outer_zn.__prepare();
	this.outer_zn.__eff_mass(this.Keff);
	this.L = this.solve(this.Keff);
	if(!this.stiff && !this.velonly) {
		var biasCoef;
		var omega = 2 * Math.PI * this.frequency;
		this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
		var ig = 1 / (1 + this.gamma);
		biasCoef = dt * omega * omega * this.gamma;
		this.gamma *= ig;
		this.soft = ig;
		this.outer_zn.__position(this.bias);
		if(this.breakUnderError && this.lsq(this.bias) > this.maxError * this.maxError) {
			return true;
		}
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) this.bias[_g1++] *= -biasCoef;
		this._clamp(this.bias,this.maxError);
	} else {
		var _g11 = 0;
		var _g2 = this.dim;
		while(_g11 < _g2) this.bias[_g11++] = 0.0;
		this.gamma = 0.0;
		this.soft = 1.0;
	}
	var _g12 = 0;
	var _g3 = this.dim;
	while(_g12 < _g3) this.jAcc[_g12++] *= dtratio;
	this.jMax = this.maxForce * dt;
	return false;
};
ZPP_UserConstraint.prototype.vec3 = null;
ZPP_UserConstraint.prototype.warmStart = function() {
	var _g = 0;
	var _g1 = this.bodies;
	while(_g < _g1.length) {
		var bs = _g1[_g];
		++_g;
		var b = bs.body;
		this.outer_zn.__impulse(this.jAcc,b.outer,this.vec3);
		var t = b.imass;
		var _this = this.vec3;
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		b.velx += _this.zpp_inner.x * t;
		var _this2 = this.vec3;
		if(_this2 != null && _this2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this3 = _this2.zpp_inner;
		if(_this3._validate != null) {
			_this3._validate();
		}
		b.vely += _this2.zpp_inner.y * t;
		var _this4 = this.vec3;
		if(_this4 != null && _this4.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this5 = _this4.zpp_inner;
		if(_this5._validate != null) {
			_this5._validate();
		}
		b.angvel += _this4.zpp_inner.z * b.iinertia;
	}
};
ZPP_UserConstraint.prototype.J = null;
ZPP_UserConstraint.prototype.jOld = null;
ZPP_UserConstraint.prototype.applyImpulseVel = function() {
	this.outer_zn.__velocity(this.J);
	var _g1 = 0;
	var _g = this.dim;
	while(_g1 < _g) {
		var i = _g1++;
		this.J[i] = this.bias[i] - this.J[i];
	}
	this.transform(this.L,this.J);
	var _g11 = 0;
	var _g2 = this.dim;
	while(_g11 < _g2) {
		var i1 = _g11++;
		this.jOld[i1] = this.jAcc[i1];
		this.jAcc[i1] += this.J[i1] = this.J[i1] * this.soft - this.jAcc[i1] * this.gamma;
	}
	this.outer_zn.__clamp(this.jAcc);
	if((this.breakUnderForce || !this.stiff) && this.lsq(this.jAcc) > this.jMax * this.jMax) {
		if(this.breakUnderForce) {
			return true;
		} else if(!this.stiff) {
			this._clamp(this.jAcc,this.jMax);
		}
	}
	var _g12 = 0;
	var _g3 = this.dim;
	while(_g12 < _g3) {
		var i2 = _g12++;
		this.J[i2] = this.jAcc[i2] - this.jOld[i2];
	}
	var _g4 = 0;
	var _g13 = this.bodies;
	while(_g4 < _g13.length) {
		var bs = _g13[_g4];
		++_g4;
		var b = bs.body;
		this.outer_zn.__impulse(this.J,b.outer,this.vec3);
		var t = b.imass;
		var _this = this.vec3;
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		b.velx += _this.zpp_inner.x * t;
		var _this2 = this.vec3;
		if(_this2 != null && _this2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this3 = _this2.zpp_inner;
		if(_this3._validate != null) {
			_this3._validate();
		}
		b.vely += _this2.zpp_inner.y * t;
		var _this4 = this.vec3;
		if(_this4 != null && _this4.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this5 = _this4.zpp_inner;
		if(_this5._validate != null) {
			_this5._validate();
		}
		b.angvel += _this4.zpp_inner.z * b.iinertia;
	}
	return false;
};
ZPP_UserConstraint.prototype.applyImpulsePos = function() {
	if(this.velonly) {
		return false;
	}
	this.outer_zn.__prepare();
	this.outer_zn.__position(this.J);
	var lj = this.lsq(this.J);
	if(this.breakUnderError && lj > this.maxError * this.maxError) {
		return true;
	} else if(lj < Config.constraintLinearSlop * Config.constraintLinearSlop) {
		return false;
	}
	var _g1 = 0;
	var _g = this.dim;
	while(_g1 < _g) this.J[_g1++] *= -1;
	this.outer_zn.__eff_mass(this.Keff);
	this.transform(this.solve(this.Keff),this.J);
	this.outer_zn.__clamp(this.J);
	var _g2 = 0;
	var _g11 = this.bodies;
	while(_g2 < _g11.length) {
		var bs = _g11[_g2];
		++_g2;
		var b = bs.body;
		this.outer_zn.__impulse(this.J,b.outer,this.vec3);
		var t = b.imass;
		var _this = this.vec3;
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		b.posx += _this.zpp_inner.x * t;
		var _this2 = this.vec3;
		if(_this2 != null && _this2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this3 = _this2.zpp_inner;
		if(_this3._validate != null) {
			_this3._validate();
		}
		b.posy += _this2.zpp_inner.y * t;
		var _this4 = this.vec3;
		if(_this4 != null && _this4.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec3" + " has been disposed and cannot be used!");
		}
		var _this5 = _this4.zpp_inner;
		if(_this5._validate != null) {
			_this5._validate();
		}
		var dr = _this4.zpp_inner.z * b.iinertia;
		b.rot += dr;
		if(dr * dr > 0.0001) {
			b.axisx = Math.sin(b.rot);
			b.axisy = Math.cos(b.rot);
		} else {
			var d2 = dr * dr;
			var p = 1 - 0.5 * d2;
			var m = 1 - d2 * d2 / 8;
			var nx = (p * b.axisx + dr * b.axisy) * m;
			b.axisy = (p * b.axisy - dr * b.axisx) * m;
			b.axisx = nx;
		}
	}
	return false;
};
ZPP_UserConstraint.prototype.draw = function(g) {
	this.outer_zn.__draw(g);
};
ZPP_UserConstraint.prototype.__class__ = ZPP_UserConstraint;
var ZPP_UserBody = zpp_nape.constraint.ZPP_UserBody = function(cnt,body) {
	this.body = null;
	this.cnt = 0;
	this.cnt = cnt;
	this.body = body;
};
ZPP_UserBody.__name__ = ["zpp_nape","constraint","ZPP_UserBody"];
ZPP_UserBody.prototype.cnt = null;
ZPP_UserBody.prototype.body = null;
ZPP_UserBody.prototype.__class__ = ZPP_UserBody;
var ZPP_WeldJoint = zpp_nape.constraint.ZPP_WeldJoint = function() {
	this.stepped = false;
	this.biasz = 0.0;
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAccz = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassf = 0.0;
	this.kMasse = 0.0;
	this.kMassc = 0.0;
	this.kMassd = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.phase = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.outer_zn = null;
	ZPP_Constraint.call(this);
	this.phase = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jAccz = 0;
	this.jMax = Infinity;
	this.stepped = false;
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
};
ZPP_WeldJoint.__name__ = ["zpp_nape","constraint","ZPP_WeldJoint"];
ZPP_WeldJoint.__super__ = ZPP_Constraint;
// for(var k in ZPP_Constraint.prototype ) ZPP_WeldJoint.prototype[k] = ZPP_Constraint.prototype[k];
ZPP_WeldJoint.prototype = Object.create(ZPP_Constraint.prototype);
ZPP_WeldJoint.prototype.outer_zn = null;
ZPP_WeldJoint.prototype.bodyImpulse = function(b) {
	if(this.stepped) {
		if(b == this.b1) {
			return Vec3.get(-this.jAccx,-this.jAccy,-(this.jAccy * this.a1relx - this.jAccx * this.a1rely + this.jAccz));
		} else {
			return Vec3.get(this.jAccx,this.jAccy,this.jAccy * this.a2relx - this.jAccx * this.a2rely + this.jAccz);
		}
	} else {
		return Vec3.get(0,0,0);
	}
};
ZPP_WeldJoint.prototype.activeBodies = function() {
	if(this.b1 != null) {
		this.b1.constraints.add(this);
	}
	if(this.b2 != this.b1) {
		if(this.b2 != null) {
			this.b2.constraints.add(this);
		}
	}
};
ZPP_WeldJoint.prototype.inactiveBodies = function() {
	if(this.b1 != null) {
		this.b1.constraints.remove(this);
	}
	if(this.b2 != this.b1) {
		if(this.b2 != null) {
			this.b2.constraints.remove(this);
		}
	}
};
ZPP_WeldJoint.prototype.b1 = null;
ZPP_WeldJoint.prototype.a1localx = null;
ZPP_WeldJoint.prototype.a1localy = null;
ZPP_WeldJoint.prototype.a1relx = null;
ZPP_WeldJoint.prototype.a1rely = null;
ZPP_WeldJoint.prototype.validate_a1 = function() {
	this.wrap_a1.zpp_inner.x = this.a1localx;
	this.wrap_a1.zpp_inner.y = this.a1localy;
};
ZPP_WeldJoint.prototype.invalidate_a1 = function(x) {
	this.immutable_midstep("Constraint::" + "a1");
	this.a1localx = x.x;
	this.a1localy = x.y;
	this.wake();
};
ZPP_WeldJoint.prototype.setup_a1 = function() {
	var x = this.a1localx;
	var y = this.a1localy;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_a1 = ret;
	this.wrap_a1.zpp_inner._inuse = true;
	this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
	this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
};
ZPP_WeldJoint.prototype.wrap_a1 = null;
ZPP_WeldJoint.prototype.b2 = null;
ZPP_WeldJoint.prototype.a2localx = null;
ZPP_WeldJoint.prototype.a2localy = null;
ZPP_WeldJoint.prototype.a2relx = null;
ZPP_WeldJoint.prototype.a2rely = null;
ZPP_WeldJoint.prototype.validate_a2 = function() {
	this.wrap_a2.zpp_inner.x = this.a2localx;
	this.wrap_a2.zpp_inner.y = this.a2localy;
};
ZPP_WeldJoint.prototype.invalidate_a2 = function(x) {
	this.immutable_midstep("Constraint::" + "a2");
	this.a2localx = x.x;
	this.a2localy = x.y;
	this.wake();
};
ZPP_WeldJoint.prototype.setup_a2 = function() {
	var x = this.a2localx;
	var y = this.a2localy;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_a2 = ret;
	this.wrap_a2.zpp_inner._inuse = true;
	this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
	this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
};
ZPP_WeldJoint.prototype.wrap_a2 = null;
ZPP_WeldJoint.prototype.phase = null;
ZPP_WeldJoint.prototype.kMassa = null;
ZPP_WeldJoint.prototype.kMassb = null;
ZPP_WeldJoint.prototype.kMassd = null;
ZPP_WeldJoint.prototype.kMassc = null;
ZPP_WeldJoint.prototype.kMasse = null;
ZPP_WeldJoint.prototype.kMassf = null;
ZPP_WeldJoint.prototype.jAccx = null;
ZPP_WeldJoint.prototype.jAccy = null;
ZPP_WeldJoint.prototype.jAccz = null;
ZPP_WeldJoint.prototype.jMax = null;
ZPP_WeldJoint.prototype.gamma = null;
ZPP_WeldJoint.prototype.biasx = null;
ZPP_WeldJoint.prototype.biasy = null;
ZPP_WeldJoint.prototype.biasz = null;
ZPP_WeldJoint.prototype.stepped = null;
ZPP_WeldJoint.prototype.copy = function(dict,todo) {
	var _this = this.outer_zn;
	if(_this.zpp_inner_zn.wrap_a1 == null) {
		_this.zpp_inner_zn.setup_a1();
	}
	var tmp = _this.zpp_inner_zn.wrap_a1;
	var _this1 = this.outer_zn;
	if(_this1.zpp_inner_zn.wrap_a2 == null) {
		_this1.zpp_inner_zn.setup_a2();
	}
	var ret = new WeldJoint(null,null,tmp,_this1.zpp_inner_zn.wrap_a2);
	this.copyto(ret);
	if(dict != null && this.b1 != null) {
		var b = null;
		var _g = 0;
		while(_g < dict.length) {
			var idc = dict[_g];
			++_g;
			if(idc.id == this.b1.id) {
				b = idc.bc;
				break;
			}
		}
		if(b != null) {
			ret.zpp_inner_zn.b1 = b.zpp_inner;
		} else {
			todo.push(ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
	}
	if(dict != null && this.b2 != null) {
		var b2 = null;
		var _g1 = 0;
		while(_g1 < dict.length) {
			var idc1 = dict[_g1];
			++_g1;
			if(idc1.id == this.b2.id) {
				b2 = idc1.bc;
				break;
			}
		}
		if(b2 != null) {
			ret.zpp_inner_zn.b2 = b2.zpp_inner;
		} else {
			todo.push(ZPP_CopyHelper.todo(this.b2.id,function(b3) {
				ret.zpp_inner_zn.b2 = b3.zpp_inner;
			}));
		}
	}
	return ret;
};
ZPP_WeldJoint.prototype.validate = function() {
	if(this.b1 == null || this.b2 == null) {
		throw new js._Boot.HaxeError("Error: AngleJoint cannot be simulated null bodies");
	}
	if(this.b1 == this.b2) {
		throw new js._Boot.HaxeError("Error: WeldJoint cannot be simulated with body1 == body2");
	}
	if(this.b1.space != this.space || this.b2.space != this.space) {
		throw new js._Boot.HaxeError("Error: Constraints must have each body within the same space to which the constraint has been assigned");
	}
	if(this.b1.type != 2 && this.b2.type != 2) {
		throw new js._Boot.HaxeError("Error: Constraints cannot have both bodies non-dynamic");
	}
};
ZPP_WeldJoint.prototype.wake_connected = function() {
	if(this.b1 != null && this.b1.type == 2) {
		this.b1.wake();
	}
	if(this.b2 != null && this.b2.type == 2) {
		this.b2.wake();
	}
};
ZPP_WeldJoint.prototype.forest = function() {
	if(this.b1.type == 2) {
		var xr;
		if(this.b1.component == this.b1.component.parent) {
			xr = this.b1.component;
		} else {
			var obj = this.b1.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt1 = stack.parent;
				stack.parent = obj;
				stack = nxt1;
			}
			xr = obj;
		}
		var yr;
		if(this.component == this.component.parent) {
			yr = this.component;
		} else {
			var obj1 = this.component;
			var stack1 = null;
			while(obj1 != obj1.parent) {
				var nxt2 = obj1.parent;
				obj1.parent = stack1;
				stack1 = obj1;
				obj1 = nxt2;
			}
			while(stack1 != null) {
				var nxt3 = stack1.parent;
				stack1.parent = obj1;
				stack1 = nxt3;
			}
			yr = obj1;
		}
		if(xr != yr) {
			if(xr.rank < yr.rank) {
				xr.parent = yr;
			} else if(xr.rank > yr.rank) {
				yr.parent = xr;
			} else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
	if(this.b2.type == 2) {
		var xr1;
		if(this.b2.component == this.b2.component.parent) {
			xr1 = this.b2.component;
		} else {
			var obj2 = this.b2.component;
			var stack2 = null;
			while(obj2 != obj2.parent) {
				var nxt4 = obj2.parent;
				obj2.parent = stack2;
				stack2 = obj2;
				obj2 = nxt4;
			}
			while(stack2 != null) {
				var nxt5 = stack2.parent;
				stack2.parent = obj2;
				stack2 = nxt5;
			}
			xr1 = obj2;
		}
		var yr1;
		if(this.component == this.component.parent) {
			yr1 = this.component;
		} else {
			var obj3 = this.component;
			var stack3 = null;
			while(obj3 != obj3.parent) {
				var nxt6 = obj3.parent;
				obj3.parent = stack3;
				stack3 = obj3;
				obj3 = nxt6;
			}
			while(stack3 != null) {
				var nxt7 = stack3.parent;
				stack3.parent = obj3;
				stack3 = nxt7;
			}
			yr1 = obj3;
		}
		if(xr1 != yr1) {
			if(xr1.rank < yr1.rank) {
				xr1.parent = yr1;
			} else if(xr1.rank > yr1.rank) {
				yr1.parent = xr1;
			} else {
				yr1.parent = xr1;
				xr1.rank++;
			}
		}
	}
};
ZPP_WeldJoint.prototype.pair_exists = function(id,di) {
	if(!(this.b1.id == id && this.b2.id == di)) {
		if(this.b1.id == di) {
			return this.b2.id == id;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
ZPP_WeldJoint.prototype.clearcache = function() {
	this.jAccx = 0;
	this.jAccy = 0;
	this.jAccz = 0;
	this.pre_dt = -1.0;
};
ZPP_WeldJoint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) {
		this.pre_dt = dt;
	}
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.stepped = true;
	this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var m = this.b1.smass + this.b2.smass;
	this.kMassa = m;
	this.kMassb = 0;
	this.kMassd = m;
	this.kMassc = 0;
	this.kMasse = 0;
	this.kMassf = 0;
	if(this.b1.sinertia != 0) {
		var X = this.a1relx * this.b1.sinertia;
		var Y = this.a1rely * this.b1.sinertia;
		this.kMassa += Y * this.a1rely;
		this.kMassb += -Y * this.a1relx;
		this.kMassd += X * this.a1relx;
		this.kMassc += -Y;
		this.kMasse += X;
		this.kMassf += this.b1.sinertia;
	}
	if(this.b2.sinertia != 0) {
		var X1 = this.a2relx * this.b2.sinertia;
		var Y1 = this.a2rely * this.b2.sinertia;
		this.kMassa += Y1 * this.a2rely;
		this.kMassb += -Y1 * this.a2relx;
		this.kMassd += X1 * this.a2relx;
		this.kMassc += -Y1;
		this.kMasse += X1;
		this.kMassf += this.b2.sinertia;
	}
	var det = this.kMassa * (this.kMassd * this.kMassf - this.kMasse * this.kMasse) + this.kMassb * (this.kMassc * this.kMasse - this.kMassb * this.kMassf) + this.kMassc * (this.kMassb * this.kMasse - this.kMassc * this.kMassd);
	var flag;
	if(det != det) {
		this.kMassa = 0;
		this.kMassb = 0;
		this.kMassd = 0;
		this.kMassc = 0;
		this.kMasse = 0;
		this.kMassf = 0;
		flag = 7;
	} else if(det == 0) {
		var flag1 = 0;
		if(this.kMassa != 0) {
			this.kMassa = 1 / this.kMassa;
		} else {
			this.kMassa = 0;
			flag1 = 1;
		}
		if(this.kMassd != 0) {
			this.kMassd = 1 / this.kMassd;
		} else {
			this.kMassd = 0;
			flag1 |= 2;
		}
		if(this.kMassf != 0) {
			this.kMassf = 1 / this.kMassf;
		} else {
			this.kMassf = 0;
			flag1 |= 4;
		}
		this.kMassb = this.kMassc = this.kMasse = 0.0;
		flag = flag1;
	} else {
		det = 1 / det;
		var A = det * (this.kMassd * this.kMassf - this.kMasse * this.kMasse);
		var B = det * (this.kMasse * this.kMassc - this.kMassb * this.kMassf);
		var D = det * (this.kMassa * this.kMassf - this.kMassc * this.kMassc);
		var C = det * (this.kMassb * this.kMasse - this.kMassc * this.kMassd);
		var E = det * (this.kMassb * this.kMassc - this.kMassa * this.kMasse);
		var tmp = this.kMassa * this.kMassd - this.kMassb * this.kMassb;
		this.kMassa = A;
		this.kMassb = B;
		this.kMassd = D;
		this.kMassc = C;
		this.kMasse = E;
		this.kMassf = det * tmp;
		flag = 0;
	}
	if((flag & 1) != 0) {
		this.jAccx = 0;
	}
	if((flag & 2) != 0) {
		this.jAccy = 0;
	}
	if((flag & 4) != 0) {
		this.jAccz = 0;
	}
	if(!this.stiff) {
		var biasCoef;
		var omega = 2 * Math.PI * this.frequency;
		this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
		var ig = 1 / (1 + this.gamma);
		biasCoef = dt * omega * omega * this.gamma;
		this.gamma *= ig;
		this.kMassa *= ig;
		this.kMassb *= ig;
		this.kMassd *= ig;
		this.kMassc *= ig;
		this.kMasse *= ig;
		this.kMassf *= ig;
		this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		this.biasz = this.b2.rot - this.b1.rot - this.phase;
		if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz > this.maxError * this.maxError) {
			return true;
		}
		var t = -biasCoef;
		this.biasx *= t;
		this.biasy *= t;
		this.biasz *= t;
		var t1 = this.maxError;
		var ls = this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz;
		if(ls > t1 * t1) {
			var t2 = t1 * (1.0 / Math.sqrt(ls));
			this.biasx *= t2;
			this.biasy *= t2;
			this.biasz *= t2;
		}
	} else {
		this.biasx = 0;
		this.biasy = 0;
		this.biasz = 0;
		this.gamma = 0;
	}
	this.jAccx *= dtratio;
	this.jAccy *= dtratio;
	this.jAccz *= dtratio;
	this.jMax = this.maxForce * dt;
	return false;
};
ZPP_WeldJoint.prototype.warmStart = function() {
	var t = this.b1.imass;
	this.b1.velx -= this.jAccx * t;
	this.b1.vely -= this.jAccy * t;
	var t1 = this.b2.imass;
	this.b2.velx += this.jAccx * t1;
	this.b2.vely += this.jAccy * t1;
	this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely + this.jAccz) * this.b1.iinertia;
	this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely + this.jAccz) * this.b2.iinertia;
};
ZPP_WeldJoint.prototype.applyImpulseVel = function() {
	var Ex = 0.0;
	var Ey = 0.0;
	var Ez = 0.0;
	Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
	Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
	Ez = this.b2.angvel + this.b2.kinangvel - this.b1.angvel - this.b1.kinangvel;
	var Jx = 0.0;
	var Jy = 0.0;
	var Jz = 0.0;
	Jx = this.biasx - Ex;
	Jy = this.biasy - Ey;
	Jz = this.biasz - Ez;
	var X = this.kMassa * Jx + this.kMassb * Jy + this.kMassc * Jz;
	var Y = this.kMassb * Jx + this.kMassd * Jy + this.kMasse * Jz;
	Jz = this.kMassc * Jx + this.kMasse * Jy + this.kMassf * Jz;
	Jx = X;
	Jy = Y;
	var t = this.gamma;
	Jx -= this.jAccx * t;
	Jy -= this.jAccy * t;
	Jz -= this.jAccz * t;
	var jOldx = 0.0;
	var jOldy = 0.0;
	var jOldz = 0.0;
	jOldx = this.jAccx;
	jOldy = this.jAccy;
	jOldz = this.jAccz;
	this.jAccx += Jx;
	this.jAccy += Jy;
	this.jAccz += Jz;
	if(this.breakUnderForce) {
		if(this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz > this.jMax * this.jMax) {
			return true;
		}
	} else if(!this.stiff) {
		var t1 = this.jMax;
		var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz;
		if(ls > t1 * t1) {
			var t2 = t1 * (1.0 / Math.sqrt(ls));
			this.jAccx *= t2;
			this.jAccy *= t2;
			this.jAccz *= t2;
		}
	}
	Jx = this.jAccx - jOldx;
	Jy = this.jAccy - jOldy;
	Jz = this.jAccz - jOldz;
	var t3 = this.b1.imass;
	this.b1.velx -= Jx * t3;
	this.b1.vely -= Jy * t3;
	var t4 = this.b2.imass;
	this.b2.velx += Jx * t4;
	this.b2.vely += Jy * t4;
	this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely + Jz) * this.b1.iinertia;
	this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely + Jz) * this.b2.iinertia;
	return false;
};
ZPP_WeldJoint.prototype.applyImpulsePos = function() {
	var r1x = 0.0;
	var r1y = 0.0;
	r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	var r2x = 0.0;
	var r2y = 0.0;
	r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var Ex = 0.0;
	var Ey = 0.0;
	var Ez = 0.0;
	Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
	Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
	Ez = this.b2.rot - this.b1.rot - this.phase;
	var Jx = 0.0;
	var Jy = 0.0;
	var Jz = 0.0;
	if(this.breakUnderError && Ex * Ex + Ey * Ey + Ez * Ez > this.maxError * this.maxError) {
		return true;
	}
	var cont = true;
	if(Ex * Ex + Ey * Ey < Config.constraintLinearSlop * Config.constraintLinearSlop) {
		cont = false;
		Ex = 0;
		Ey = 0;
	}
	var tmp = Ez * Ez;
	var x = Config.constraintAngularSlop;
	if(tmp < x * x) {
		if(!cont) {
			return false;
		} else {
			Ez = 0;
		}
	}
	Ex *= 0.5;
	Ey *= 0.5;
	Ez *= 0.5;
	if(Ex * Ex + Ey * Ey > 6) {
		var k = this.b1.smass + this.b2.smass;
		if(k > Config.epsilon) {
			k = 0.75 / k;
			Jx = -Ex * k;
			Jy = -Ey * k;
			var ls = Jx * Jx + Jy * Jy;
			if(ls > 400) {
				var t = 20 * (1.0 / Math.sqrt(ls));
				Jx *= t;
				Jy *= t;
			}
			var t1 = this.b1.imass;
			this.b1.posx -= Jx * t1;
			this.b1.posy -= Jy * t1;
			var t2 = this.b2.imass;
			this.b2.posx += Jx * t2;
			this.b2.posy += Jy * t2;
			Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
			Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
			Ez = this.b2.rot - this.b1.rot - this.phase;
			Ex *= 0.5;
			Ey *= 0.5;
			Ez *= 0.5;
		}
	}
	var Ka = 0.0;
	var Kb = 0.0;
	var Kd = 0.0;
	var Kc = 0.0;
	var Ke = 0.0;
	var Kf = 0.0;
	var m = this.b1.smass + this.b2.smass;
	Ka = m;
	Kb = 0;
	Kd = m;
	Kc = 0;
	Ke = 0;
	Kf = 0;
	if(this.b1.sinertia != 0) {
		var X = r1x * this.b1.sinertia;
		var Y = r1y * this.b1.sinertia;
		Ka = m + Y * r1y;
		Kb += -Y * r1x;
		Kd = m + X * r1x;
		Kc += -Y;
		Ke += X;
		Kf += this.b1.sinertia;
	}
	if(this.b2.sinertia != 0) {
		var X1 = r2x * this.b2.sinertia;
		var Y1 = r2y * this.b2.sinertia;
		Ka += Y1 * r2y;
		Kb += -Y1 * r2x;
		Kd += X1 * r2x;
		Kc += -Y1;
		Ke += X1;
		Kf += this.b2.sinertia;
	}
	Jx = -Ex;
	Jy = -Ey;
	Jz = -Ez;
	var ls1 = Jx * Jx + Jy * Jy;
	if(ls1 > 36) {
		var t3 = 6 * (1.0 / Math.sqrt(ls1));
		Jx *= t3;
		Jy *= t3;
	}
	var det = Ka * (Kd * Kf - Ke * Ke) + Kb * (Kc * Ke - Kb * Kf) + Kc * (Kb * Ke - Kc * Kd);
	if(det != det) {
		Jz = 0;
		Jy = Jz;
		Jx = Jy;
	} else if(det == 0) {
		if(Ka != 0) {
			Jx /= Ka;
		} else {
			Jx = 0;
		}
		if(Kd != 0) {
			Jy /= Kd;
		} else {
			Jy = 0;
		}
		if(Kf != 0) {
			Jz /= Kf;
		} else {
			Jz = 0;
		}
	} else {
		det = 1 / det;
		var B = Ke * Kc - Kb * Kf;
		var C = Kb * Ke - Kc * Kd;
		var E = Kb * Kc - Ka * Ke;
		var X2 = det * (Jx * (Kd * Kf - Ke * Ke) + Jy * B + Jz * C);
		var Y2 = det * (Jx * B + Jy * (Ka * Kf - Kc * Kc) + Jz * E);
		Jz = det * (Jx * C + Jy * E + Jz * (Ka * Kd - Kb * Kb));
		Jx = X2;
		Jy = Y2;
	}
	var t4 = this.b1.imass;
	this.b1.posx -= Jx * t4;
	this.b1.posy -= Jy * t4;
	var t5 = this.b2.imass;
	this.b2.posx += Jx * t5;
	this.b2.posy += Jy * t5;
	var _this = this.b1;
	var dr = -(Jy * r1x - Jx * r1y + Jz) * this.b1.iinertia;
	_this.rot += dr;
	if(dr * dr > 0.0001) {
		_this.axisx = Math.sin(_this.rot);
		_this.axisy = Math.cos(_this.rot);
	} else {
		var d2 = dr * dr;
		var p = 1 - 0.5 * d2;
		var m1 = 1 - d2 * d2 / 8;
		var nx = (p * _this.axisx + dr * _this.axisy) * m1;
		_this.axisy = (p * _this.axisy - dr * _this.axisx) * m1;
		_this.axisx = nx;
	}
	var _this1 = this.b2;
	var dr1 = (Jy * r2x - Jx * r2y + Jz) * this.b2.iinertia;
	_this1.rot += dr1;
	if(dr1 * dr1 > 0.0001) {
		_this1.axisx = Math.sin(_this1.rot);
		_this1.axisy = Math.cos(_this1.rot);
	} else {
		var d21 = dr1 * dr1;
		var p1 = 1 - 0.5 * d21;
		var m2 = 1 - d21 * d21 / 8;
		var nx1 = (p1 * _this1.axisx + dr1 * _this1.axisy) * m2;
		_this1.axisy = (p1 * _this1.axisy - dr1 * _this1.axisx) * m2;
		_this1.axisx = nx1;
	}
	return false;
};
ZPP_WeldJoint.prototype.draw = function(g) {
};
ZPP_WeldJoint.prototype.__class__ = ZPP_WeldJoint;
var ZPP_Arbiter = zpp_nape.dynamics.ZPP_Arbiter = function() {
	this.sensorarb = null;
	this.fluidarb = null;
	this.colarb = null;
	this.type = 0;
	this.pair = null;
	this.ws2 = null;
	this.ws1 = null;
	this.b2 = null;
	this.b1 = null;
	this.invalidated = false;
	this.immState = 0;
	this.fresh = false;
	this.continuous = false;
	this.presentable = false;
	this.intchange = false;
	this.present = 0;
	this.sleeping = false;
	this.cleared = false;
	this.active = false;
	this.endGenerated = 0;
	this.sleep_stamp = 0;
	this.up_stamp = 0;
	this.stamp = 0;
	this.di = 0;
	this.id = 0;
	this.hnext = null;
	this.outer = null;
};
ZPP_Arbiter.__name__ = ["zpp_nape","dynamics","ZPP_Arbiter"];
ZPP_Arbiter.prototype.outer = null;
ZPP_Arbiter.prototype.wrapper = function() {
	if(this.outer == null) {
		ZPP_Arbiter.internal = true;
		if(this.type == ZPP_Arbiter.COL) {
			this.colarb.outer_zn = new CollisionArbiter();
			this.outer = this.colarb.outer_zn;
		} else if(this.type == ZPP_Arbiter.FLUID) {
			this.fluidarb.outer_zn = new FluidArbiter();
			this.outer = this.fluidarb.outer_zn;
		} else {
			this.outer = new Arbiter();
		}
		this.outer.zpp_inner = this;
		ZPP_Arbiter.internal = false;
	}
	return this.outer;
};
ZPP_Arbiter.prototype.inactiveme = function() {
	return !this.active;
};
ZPP_Arbiter.prototype.hnext = null;
ZPP_Arbiter.prototype.id = null;
ZPP_Arbiter.prototype.di = null;
ZPP_Arbiter.prototype.stamp = null;
ZPP_Arbiter.prototype.up_stamp = null;
ZPP_Arbiter.prototype.sleep_stamp = null;
ZPP_Arbiter.prototype.endGenerated = null;
ZPP_Arbiter.prototype.active = null;
ZPP_Arbiter.prototype.cleared = null;
ZPP_Arbiter.prototype.sleeping = null;
ZPP_Arbiter.prototype.present = null;
ZPP_Arbiter.prototype.intchange = null;
ZPP_Arbiter.prototype.presentable = null;
ZPP_Arbiter.prototype.continuous = null;
ZPP_Arbiter.prototype.fresh = null;
ZPP_Arbiter.prototype.immState = null;
ZPP_Arbiter.prototype.acting = function() {
	if(this.active) {
		return (this.immState & 1) != 0;
	} else {
		return false;
	}
};
ZPP_Arbiter.prototype.invalidated = null;
ZPP_Arbiter.prototype.b1 = null;
ZPP_Arbiter.prototype.b2 = null;
ZPP_Arbiter.prototype.ws1 = null;
ZPP_Arbiter.prototype.ws2 = null;
ZPP_Arbiter.prototype.pair = null;
ZPP_Arbiter.prototype.swap_features = function() {
	var t = this.b1;
	this.b1 = this.b2;
	this.b2 = t;
	var t1 = this.ws1;
	this.ws1 = this.ws2;
	this.ws2 = t1;
	var t2 = this.colarb.s1;
	this.colarb.s1 = this.colarb.s2;
	this.colarb.s2 = t2;
};
ZPP_Arbiter.prototype.type = null;
ZPP_Arbiter.prototype.colarb = null;
ZPP_Arbiter.prototype.fluidarb = null;
ZPP_Arbiter.prototype.sensorarb = null;
ZPP_Arbiter.prototype.lazyRetire = function(s,b) {
	this.cleared = true;
	if(b == null || this.b2 == b) {
		var _this = this.b1.arbiters;
		var pre = null;
		var cur = _this.head;
		while(cur != null) {
			if(cur.elt == this) {
				var old;
				var ret;
				if(pre == null) {
					old = _this.head;
					ret = old.next;
					_this.head = ret;
					if(_this.head == null) {
						_this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						_this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = ZNPNode_ZPP_Arbiter.zpp_pool;
				ZNPNode_ZPP_Arbiter.zpp_pool = o;
				_this.modified = true;
				_this.length--;
				_this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	if(b == null || this.b1 == b) {
		var _this1 = this.b2.arbiters;
		var pre1 = null;
		var cur1 = _this1.head;
		while(cur1 != null) {
			if(cur1.elt == this) {
				var old1;
				var ret1;
				if(pre1 == null) {
					old1 = _this1.head;
					ret1 = old1.next;
					_this1.head = ret1;
					if(_this1.head == null) {
						_this1.pushmod = true;
					}
				} else {
					old1 = pre1.next;
					ret1 = old1.next;
					pre1.next = ret1;
					if(ret1 == null) {
						_this1.pushmod = true;
					}
				}
				var o1 = old1;
				o1.elt = null;
				o1.next = ZNPNode_ZPP_Arbiter.zpp_pool;
				ZNPNode_ZPP_Arbiter.zpp_pool = o1;
				_this1.modified = true;
				_this1.length--;
				_this1.pushmod = true;
				break;
			}
			pre1 = cur1;
			cur1 = cur1.next;
		}
	}
	if(this.pair != null) {
		this.pair.arb = null;
		this.pair = null;
	}
	this.active = false;
	s.f_arbiters.modified = true;
};
ZPP_Arbiter.prototype.sup_assign = function(s1,s2,id,di) {
	this.b1 = s1.body;
	this.ws1 = s1;
	this.b2 = s2.body;
	this.ws2 = s2;
	this.id = id;
	this.di = di;
	var _this = this.b1.arbiters;
	var ret;
	if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Arbiter();
	} else {
		ret = ZNPNode_ZPP_Arbiter.zpp_pool;
		ZNPNode_ZPP_Arbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = this;
	var temp = ret;
	temp.next = _this.head;
	_this.head = temp;
	_this.modified = true;
	_this.length++;
	var _this1 = this.b2.arbiters;
	var ret1;
	if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
		ret1 = new ZNPNode_ZPP_Arbiter();
	} else {
		ret1 = ZNPNode_ZPP_Arbiter.zpp_pool;
		ZNPNode_ZPP_Arbiter.zpp_pool = ret1.next;
		ret1.next = null;
	}
	ret1.elt = this;
	var temp1 = ret1;
	temp1.next = _this1.head;
	_this1.head = temp1;
	_this1.modified = true;
	_this1.length++;
	this.active = true;
	this.present = 0;
	this.cleared = false;
	this.sleeping = false;
	this.fresh = false;
	this.presentable = false;
};
ZPP_Arbiter.prototype.sup_retire = function() {
	if(!this.cleared) {
		var _this = this.b1.arbiters;
		var pre = null;
		var cur = _this.head;
		while(cur != null) {
			if(cur.elt == this) {
				var old;
				var ret;
				if(pre == null) {
					old = _this.head;
					ret = old.next;
					_this.head = ret;
					if(_this.head == null) {
						_this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						_this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = ZNPNode_ZPP_Arbiter.zpp_pool;
				ZNPNode_ZPP_Arbiter.zpp_pool = o;
				_this.modified = true;
				_this.length--;
				_this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		var _this1 = this.b2.arbiters;
		var pre1 = null;
		var cur1 = _this1.head;
		while(cur1 != null) {
			if(cur1.elt == this) {
				var old1;
				var ret1;
				if(pre1 == null) {
					old1 = _this1.head;
					ret1 = old1.next;
					_this1.head = ret1;
					if(_this1.head == null) {
						_this1.pushmod = true;
					}
				} else {
					old1 = pre1.next;
					ret1 = old1.next;
					pre1.next = ret1;
					if(ret1 == null) {
						_this1.pushmod = true;
					}
				}
				var o1 = old1;
				o1.elt = null;
				o1.next = ZNPNode_ZPP_Arbiter.zpp_pool;
				ZNPNode_ZPP_Arbiter.zpp_pool = o1;
				_this1.modified = true;
				_this1.length--;
				_this1.pushmod = true;
				break;
			}
			pre1 = cur1;
			cur1 = cur1.next;
		}
		if(this.pair != null) {
			this.pair.arb = null;
			this.pair = null;
		}
	}
	this.b1 = this.b2 = null;
	this.active = false;
	this.intchange = false;
};
ZPP_Arbiter.prototype.__class__ = ZPP_Arbiter;
var ZPP_SensorArbiter = zpp_nape.dynamics.ZPP_SensorArbiter = function() {
	this.next = null;
	ZPP_Arbiter.call(this);
	this.type = ZPP_Arbiter.SENSOR;
	this.sensorarb = this;
};
ZPP_SensorArbiter.__name__ = ["zpp_nape","dynamics","ZPP_SensorArbiter"];
ZPP_SensorArbiter.__super__ = ZPP_Arbiter;
// for(var k in ZPP_Arbiter.prototype ) ZPP_SensorArbiter.prototype[k] = ZPP_Arbiter.prototype[k];
ZPP_SensorArbiter.prototype = Object.create(ZPP_Arbiter.prototype);
ZPP_SensorArbiter.prototype.next = null;
ZPP_SensorArbiter.prototype.alloc = function() {
};
ZPP_SensorArbiter.prototype.free = function() {
};
ZPP_SensorArbiter.prototype.assign = function(s1,s2,id,di) {
	this.b1 = s1.body;
	this.ws1 = s1;
	this.b2 = s2.body;
	this.ws2 = s2;
	this.id = id;
	this.di = di;
	var _this = this.b1.arbiters;
	var ret;
	if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Arbiter();
	} else {
		ret = ZNPNode_ZPP_Arbiter.zpp_pool;
		ZNPNode_ZPP_Arbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = this;
	var temp = ret;
	temp.next = _this.head;
	_this.head = temp;
	_this.modified = true;
	_this.length++;
	var _this1 = this.b2.arbiters;
	var ret1;
	if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
		ret1 = new ZNPNode_ZPP_Arbiter();
	} else {
		ret1 = ZNPNode_ZPP_Arbiter.zpp_pool;
		ZNPNode_ZPP_Arbiter.zpp_pool = ret1.next;
		ret1.next = null;
	}
	ret1.elt = this;
	var temp1 = ret1;
	temp1.next = _this1.head;
	_this1.head = temp1;
	_this1.modified = true;
	_this1.length++;
	this.active = true;
	this.present = 0;
	this.cleared = false;
	this.sleeping = false;
	this.fresh = false;
	this.presentable = false;
};
ZPP_SensorArbiter.prototype.retire = function() {
	if(!this.cleared) {
		var _this = this.b1.arbiters;
		var pre = null;
		var cur = _this.head;
		while(cur != null) {
			if(cur.elt == this) {
				var old;
				var ret;
				if(pre == null) {
					old = _this.head;
					ret = old.next;
					_this.head = ret;
					if(_this.head == null) {
						_this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						_this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = ZNPNode_ZPP_Arbiter.zpp_pool;
				ZNPNode_ZPP_Arbiter.zpp_pool = o;
				_this.modified = true;
				_this.length--;
				_this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		var _this1 = this.b2.arbiters;
		var pre1 = null;
		var cur1 = _this1.head;
		while(cur1 != null) {
			if(cur1.elt == this) {
				var old1;
				var ret1;
				if(pre1 == null) {
					old1 = _this1.head;
					ret1 = old1.next;
					_this1.head = ret1;
					if(_this1.head == null) {
						_this1.pushmod = true;
					}
				} else {
					old1 = pre1.next;
					ret1 = old1.next;
					pre1.next = ret1;
					if(ret1 == null) {
						_this1.pushmod = true;
					}
				}
				var o1 = old1;
				o1.elt = null;
				o1.next = ZNPNode_ZPP_Arbiter.zpp_pool;
				ZNPNode_ZPP_Arbiter.zpp_pool = o1;
				_this1.modified = true;
				_this1.length--;
				_this1.pushmod = true;
				break;
			}
			pre1 = cur1;
			cur1 = cur1.next;
		}
		if(this.pair != null) {
			this.pair.arb = null;
			this.pair = null;
		}
	}
	this.b1 = this.b2 = null;
	this.active = false;
	this.intchange = false;
	var o2 = this;
	o2.next = ZPP_SensorArbiter.zpp_pool;
	ZPP_SensorArbiter.zpp_pool = o2;
};
ZPP_SensorArbiter.prototype.makemutable = function() {
};
ZPP_SensorArbiter.prototype.makeimmutable = function() {
};
ZPP_SensorArbiter.prototype.__class__ = ZPP_SensorArbiter;
var ZPP_FluidArbiter = zpp_nape.dynamics.ZPP_FluidArbiter = function() {
	this.pre_dt = 0.0;
	this.mutable = false;
	this.wrap_position = null;
	this.buoyy = 0.0;
	this.buoyx = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.lgamma = 0.0;
	this.dampy = 0.0;
	this.dampx = 0.0;
	this.vMassc = 0.0;
	this.vMassb = 0.0;
	this.vMassa = 0.0;
	this.agamma = 0.0;
	this.adamp = 0.0;
	this.wMass = 0.0;
	this.nodrag = false;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
	this.overlap = 0.0;
	this.centroidy = 0.0;
	this.centroidx = 0.0;
	this.next = null;
	this.outer_zn = null;
	ZPP_Arbiter.call(this);
	this.type = ZPP_Arbiter.FLUID;
	this.fluidarb = this;
	this.buoyx = 0;
	this.buoyy = 0;
	this.pre_dt = -1.0;
};
ZPP_FluidArbiter.__name__ = ["zpp_nape","dynamics","ZPP_FluidArbiter"];
ZPP_FluidArbiter.__super__ = ZPP_Arbiter;
// for(var k in ZPP_Arbiter.prototype ) ZPP_FluidArbiter.prototype[k] = ZPP_Arbiter.prototype[k];
ZPP_FluidArbiter.prototype = Object.create(ZPP_Arbiter.prototype);
ZPP_FluidArbiter.prototype.outer_zn = null;
ZPP_FluidArbiter.prototype.next = null;
ZPP_FluidArbiter.prototype.alloc = function() {
};
ZPP_FluidArbiter.prototype.free = function() {
};
ZPP_FluidArbiter.prototype.centroidx = null;
ZPP_FluidArbiter.prototype.centroidy = null;
ZPP_FluidArbiter.prototype.overlap = null;
ZPP_FluidArbiter.prototype.r1x = null;
ZPP_FluidArbiter.prototype.r1y = null;
ZPP_FluidArbiter.prototype.r2x = null;
ZPP_FluidArbiter.prototype.r2y = null;
ZPP_FluidArbiter.prototype.nodrag = null;
ZPP_FluidArbiter.prototype.wMass = null;
ZPP_FluidArbiter.prototype.adamp = null;
ZPP_FluidArbiter.prototype.agamma = null;
ZPP_FluidArbiter.prototype.vMassa = null;
ZPP_FluidArbiter.prototype.vMassb = null;
ZPP_FluidArbiter.prototype.vMassc = null;
ZPP_FluidArbiter.prototype.dampx = null;
ZPP_FluidArbiter.prototype.dampy = null;
ZPP_FluidArbiter.prototype.lgamma = null;
ZPP_FluidArbiter.prototype.nx = null;
ZPP_FluidArbiter.prototype.ny = null;
ZPP_FluidArbiter.prototype.buoyx = null;
ZPP_FluidArbiter.prototype.buoyy = null;
ZPP_FluidArbiter.prototype.position_validate = function() {
	if(!this.active) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	this.wrap_position.zpp_inner.x = this.centroidx;
	this.wrap_position.zpp_inner.y = this.centroidy;
};
ZPP_FluidArbiter.prototype.position_invalidate = function(x) {
	this.centroidx = x.x;
	this.centroidy = x.y;
};
ZPP_FluidArbiter.prototype.wrap_position = null;
ZPP_FluidArbiter.prototype.getposition = function() {
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = 0;
		ret1.y = 0;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == 0) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == 0;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = 0;
			ret.zpp_inner.y = 0;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_position = ret;
	this.wrap_position.zpp_inner._inuse = true;
	this.wrap_position.zpp_inner._immutable = !this.mutable;
	this.wrap_position.zpp_inner._validate = $bind(this,this.position_validate);
	this.wrap_position.zpp_inner._invalidate = $bind(this,this.position_invalidate);
};
ZPP_FluidArbiter.prototype.assign = function(s1,s2,id,di) {
	this.b1 = s1.body;
	this.ws1 = s1;
	this.b2 = s2.body;
	this.ws2 = s2;
	this.id = id;
	this.di = di;
	var _this = this.b1.arbiters;
	var ret;
	if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Arbiter();
	} else {
		ret = ZNPNode_ZPP_Arbiter.zpp_pool;
		ZNPNode_ZPP_Arbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = this;
	var temp = ret;
	temp.next = _this.head;
	_this.head = temp;
	_this.modified = true;
	_this.length++;
	var _this1 = this.b2.arbiters;
	var ret1;
	if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
		ret1 = new ZNPNode_ZPP_Arbiter();
	} else {
		ret1 = ZNPNode_ZPP_Arbiter.zpp_pool;
		ZNPNode_ZPP_Arbiter.zpp_pool = ret1.next;
		ret1.next = null;
	}
	ret1.elt = this;
	var temp1 = ret1;
	temp1.next = _this1.head;
	_this1.head = temp1;
	_this1.modified = true;
	_this1.length++;
	this.active = true;
	this.present = 0;
	this.cleared = false;
	this.sleeping = false;
	this.fresh = false;
	this.presentable = false;
	this.nx = 0;
	this.ny = 1;
	this.dampx = 0;
	this.dampy = 0;
	this.adamp = 0.0;
};
ZPP_FluidArbiter.prototype.retire = function() {
	if(!this.cleared) {
		var _this = this.b1.arbiters;
		var pre = null;
		var cur = _this.head;
		while(cur != null) {
			if(cur.elt == this) {
				var old;
				var ret;
				if(pre == null) {
					old = _this.head;
					ret = old.next;
					_this.head = ret;
					if(_this.head == null) {
						_this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						_this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = ZNPNode_ZPP_Arbiter.zpp_pool;
				ZNPNode_ZPP_Arbiter.zpp_pool = o;
				_this.modified = true;
				_this.length--;
				_this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		var _this1 = this.b2.arbiters;
		var pre1 = null;
		var cur1 = _this1.head;
		while(cur1 != null) {
			if(cur1.elt == this) {
				var old1;
				var ret1;
				if(pre1 == null) {
					old1 = _this1.head;
					ret1 = old1.next;
					_this1.head = ret1;
					if(_this1.head == null) {
						_this1.pushmod = true;
					}
				} else {
					old1 = pre1.next;
					ret1 = old1.next;
					pre1.next = ret1;
					if(ret1 == null) {
						_this1.pushmod = true;
					}
				}
				var o1 = old1;
				o1.elt = null;
				o1.next = ZNPNode_ZPP_Arbiter.zpp_pool;
				ZNPNode_ZPP_Arbiter.zpp_pool = o1;
				_this1.modified = true;
				_this1.length--;
				_this1.pushmod = true;
				break;
			}
			pre1 = cur1;
			cur1 = cur1.next;
		}
		if(this.pair != null) {
			this.pair.arb = null;
			this.pair = null;
		}
	}
	this.b1 = this.b2 = null;
	this.active = false;
	this.intchange = false;
	var o2 = this;
	o2.next = ZPP_FluidArbiter.zpp_pool;
	ZPP_FluidArbiter.zpp_pool = o2;
	this.pre_dt = -1.0;
};
ZPP_FluidArbiter.prototype.mutable = null;
ZPP_FluidArbiter.prototype.makemutable = function() {
	this.mutable = true;
	if(this.wrap_position != null) {
		this.wrap_position.zpp_inner._immutable = false;
	}
};
ZPP_FluidArbiter.prototype.makeimmutable = function() {
	this.mutable = false;
	if(this.wrap_position != null) {
		this.wrap_position.zpp_inner._immutable = true;
	}
};
ZPP_FluidArbiter.prototype.inject = function(area,cx,cy) {
	this.overlap = area;
	this.centroidx = cx;
	this.centroidy = cy;
};
ZPP_FluidArbiter.prototype.pre_dt = null;
ZPP_FluidArbiter.prototype.preStep = function(s,dt) {
	if(this.pre_dt == -1.0) {
		this.pre_dt = dt;
	}
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.r1x = this.centroidx - this.b1.posx;
	this.r1y = this.centroidy - this.b1.posy;
	this.r2x = this.centroidx - this.b2.posx;
	this.r2y = this.centroidy - this.b2.posy;
	var g1x = 0.0;
	var g1y = 0.0;
	if(this.ws1.fluidEnabled && this.ws1.fluidProperties.wrap_gravity != null) {
		g1x = this.ws1.fluidProperties.gravityx;
		g1y = this.ws1.fluidProperties.gravityy;
	} else {
		g1x = s.gravityx;
		g1y = s.gravityy;
	}
	var g2x = 0.0;
	var g2y = 0.0;
	if(this.ws2.fluidEnabled && this.ws2.fluidProperties.wrap_gravity != null) {
		g2x = this.ws2.fluidProperties.gravityx;
		g2y = this.ws2.fluidProperties.gravityy;
	} else {
		g2x = s.gravityx;
		g2y = s.gravityy;
	}
	var buoyx = 0;
	var buoyy = 0;
	if(this.ws1.fluidEnabled && this.ws2.fluidEnabled) {
		var mass1 = this.overlap * this.ws1.fluidProperties.density;
		var mass2 = this.overlap * this.ws2.fluidProperties.density;
		if(mass1 > mass2) {
			var t = mass1 + mass2;
			buoyx -= g1x * t;
			buoyy -= g1y * t;
		} else if(mass1 < mass2) {
			var t1 = mass1 + mass2;
			buoyx += g2x * t1;
			buoyy += g2y * t1;
		} else {
			var gx = 0.0;
			var gy = 0.0;
			gx = g1x + g2x;
			gy = g1y + g2y;
			gx *= 0.5;
			gy *= 0.5;
			if(this.ws1.worldCOMx * gx + this.ws1.worldCOMy * gy > this.ws2.worldCOMx * gx + this.ws2.worldCOMy * gy) {
				var t2 = mass1 + mass2;
				buoyx -= gx * t2;
				buoyy -= gy * t2;
			} else {
				var t3 = mass1 + mass2;
				buoyx += gx * t3;
				buoyy += gy * t3;
			}
		}
	} else if(this.ws1.fluidEnabled) {
		var mass = this.overlap * this.ws1.fluidProperties.density;
		buoyx -= g1x * mass;
		buoyy -= g1y * mass;
	} else if(this.ws2.fluidEnabled) {
		var mass3 = this.overlap * this.ws2.fluidProperties.density;
		buoyx += g2x * mass3;
		buoyy += g2y * mass3;
	}
	buoyx *= dt;
	buoyy *= dt;
	this.buoyx = buoyx;
	this.buoyy = buoyy;
	if(this.b1.type == 2) {
		var t4 = this.b1.imass;
		this.b1.velx -= buoyx * t4;
		this.b1.vely -= buoyy * t4;
		this.b1.angvel -= (buoyy * this.r1x - buoyx * this.r1y) * this.b1.iinertia;
	}
	if(this.b2.type == 2) {
		var t5 = this.b2.imass;
		this.b2.velx += buoyx * t5;
		this.b2.vely += buoyy * t5;
		this.b2.angvel += (buoyy * this.r2x - buoyx * this.r2y) * this.b2.iinertia;
	}
	if((!this.ws1.fluidEnabled || this.ws1.fluidProperties.viscosity == 0) && (!this.ws2.fluidEnabled || this.ws2.fluidProperties.viscosity == 0)) {
		this.nodrag = true;
		this.dampx = 0;
		this.dampy = 0;
		this.adamp = 0;
	} else {
		this.nodrag = false;
		var tViscosity = 0.0;
		if(this.ws1.fluidEnabled) {
			this.ws2.validate_angDrag();
			tViscosity = this.ws1.fluidProperties.viscosity * this.ws2.angDrag * this.overlap / this.ws2.area;
		}
		if(this.ws2.fluidEnabled) {
			this.ws1.validate_angDrag();
			tViscosity += this.ws2.fluidProperties.viscosity * this.ws1.angDrag * this.overlap / this.ws1.area;
		}
		if(tViscosity != 0) {
			var iSum = this.b1.sinertia + this.b2.sinertia;
			if(iSum != 0) {
				this.wMass = 1 / iSum;
			} else {
				this.wMass = 0.0;
			}
			tViscosity *= 0.0004;
			var omega = 2 * Math.PI * tViscosity;
			this.agamma = 1 / (dt * omega * (2 + omega * dt));
			var ig = 1 / (1 + this.agamma);
			this.agamma *= ig;
			this.wMass *= ig;
		} else {
			this.wMass = 0.0;
			this.agamma = 0.0;
		}
		var vrnx = this.b2.velx + this.b2.kinvelx - this.r2y * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.r1y * (this.b2.angvel + this.b2.kinangvel));
		var vrny = this.b2.vely + this.b2.kinvely + this.r2x * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.r1x * (this.b1.angvel + this.b1.kinangvel));
		if(!(vrnx * vrnx + vrny * vrny < Config.epsilon * Config.epsilon)) {
			var imag = 1.0 / Math.sqrt(vrnx * vrnx + vrny * vrny);
			vrnx *= imag;
			vrny *= imag;
			this.nx = vrnx;
			this.ny = vrny;
		}
		var tViscosity1 = 0.0;
		if(this.ws1.fluidEnabled) {
			var f = -this.ws1.fluidProperties.viscosity * this.overlap / this.ws2.area;
			if(this.ws2.type == 0) {
				tViscosity1 = 0.0 - f * this.ws2.circle.radius * Config.fluidLinearDrag / (2 * this.ws2.circle.radius * Math.PI);
			} else {
				var poly = this.ws2.polygon;
				var bord = 0.0;
				var acc = 0.0;
				var cx_ite = poly.edges.head;
				while(cx_ite != null) {
					var ex = cx_ite.elt;
					bord += ex.length;
					var fact = f * ex.length * (ex.gnormx * this.nx + ex.gnormy * this.ny);
					if(fact > 0) {
						fact *= -Config.fluidVacuumDrag;
						fact = fact;
					}
					acc -= fact * 0.5 * Config.fluidLinearDrag;
					cx_ite = cx_ite.next;
				}
				tViscosity1 = acc / bord;
			}
		}
		if(this.ws2.fluidEnabled) {
			var f1 = -this.ws2.fluidProperties.viscosity * this.overlap / this.ws1.area;
			if(this.ws1.type == 0) {
				tViscosity1 -= f1 * this.ws1.circle.radius * Config.fluidLinearDrag / (2 * this.ws1.circle.radius * Math.PI);
			} else {
				var poly1 = this.ws1.polygon;
				var bord1 = 0.0;
				var acc1 = 0.0;
				var cx_ite1 = poly1.edges.head;
				while(cx_ite1 != null) {
					var ex1 = cx_ite1.elt;
					bord1 += ex1.length;
					var fact1 = f1 * ex1.length * (ex1.gnormx * this.nx + ex1.gnormy * this.ny);
					if(fact1 > 0) {
						fact1 *= -Config.fluidVacuumDrag;
						fact1 = fact1;
					}
					acc1 -= fact1 * 0.5 * Config.fluidLinearDrag;
					cx_ite1 = cx_ite1.next;
				}
				tViscosity1 += acc1 / bord1;
			}
		}
		if(tViscosity1 != 0) {
			var m = this.b1.smass + this.b2.smass;
			var Ka = 0.0;
			var Kb = 0.0;
			var Kc = 0.0;
			Ka = m;
			Kb = 0;
			Kc = m;
			if(this.b1.sinertia != 0) {
				var X = this.r1x * this.b1.sinertia;
				var Y = this.r1y * this.b1.sinertia;
				Ka = m + Y * this.r1y;
				Kb += -Y * this.r1x;
				Kc = m + X * this.r1x;
			}
			if(this.b2.sinertia != 0) {
				var X1 = this.r2x * this.b2.sinertia;
				var Y1 = this.r2y * this.b2.sinertia;
				Ka += Y1 * this.r2y;
				Kb += -Y1 * this.r2x;
				Kc += X1 * this.r2x;
			}
			var det = Ka * Kc - Kb * Kb;
			if(det != det) {
				Kc = 0;
				Kb = Kc;
				Ka = Kb;
			} else if(det == 0) {
				if(Ka != 0) {
					Ka = 1 / Ka;
				} else {
					Ka = 0;
				}
				if(Kc != 0) {
					Kc = 1 / Kc;
				} else {
					Kc = 0;
				}
				Kb = 0;
			} else {
				det = 1 / det;
				var t6 = Kc * det;
				Kc = Ka * det;
				Ka = t6;
				Kb *= -det;
			}
			this.vMassa = Ka;
			this.vMassb = Kb;
			this.vMassc = Kc;
			var omega1 = 2 * Math.PI * tViscosity1;
			this.lgamma = 1 / (dt * omega1 * (2 + omega1 * dt));
			var ig1 = 1 / (1 + this.lgamma);
			this.lgamma *= ig1;
			this.vMassa *= ig1;
			this.vMassb *= ig1;
			this.vMassc *= ig1;
		} else {
			this.vMassa = 0;
			this.vMassb = 0;
			this.vMassc = 0;
			this.lgamma = 0.0;
		}
	}
	this.dampx *= dtratio;
	this.dampy *= dtratio;
	this.adamp *= dtratio;
};
ZPP_FluidArbiter.prototype.warmStart = function() {
	var t = this.b1.imass;
	this.b1.velx -= this.dampx * t;
	this.b1.vely -= this.dampy * t;
	var t1 = this.b2.imass;
	this.b2.velx += this.dampx * t1;
	this.b2.vely += this.dampy * t1;
	this.b1.angvel -= this.b1.iinertia * (this.dampy * this.r1x - this.dampx * this.r1y);
	this.b2.angvel += this.b2.iinertia * (this.dampy * this.r2x - this.dampx * this.r2y);
	this.b1.angvel -= this.adamp * this.b1.iinertia;
	this.b2.angvel += this.adamp * this.b2.iinertia;
};
ZPP_FluidArbiter.prototype.applyImpulseVel = function() {
	if(!this.nodrag) {
		var w1 = this.b1.angvel + this.b1.kinangvel;
		var w2 = this.b2.angvel + this.b2.kinangvel;
		var jx = this.b1.velx + this.b1.kinvelx - this.r1y * w1 - (this.b2.velx + this.b2.kinvelx - this.r2y * w2);
		var jy = this.b1.vely + this.b1.kinvely + this.r1x * w1 - (this.b2.vely + this.b2.kinvely + this.r2x * w2);
		var t = this.vMassa * jx + this.vMassb * jy;
		jy = this.vMassb * jx + this.vMassc * jy;
		jx = t;
		var t1 = this.lgamma;
		jx -= this.dampx * t1;
		jy -= this.dampy * t1;
		this.dampx += jx;
		this.dampy += jy;
		var t2 = this.b1.imass;
		this.b1.velx -= jx * t2;
		this.b1.vely -= jy * t2;
		var t3 = this.b2.imass;
		this.b2.velx += jx * t3;
		this.b2.vely += jy * t3;
		this.b1.angvel -= this.b1.iinertia * (jy * this.r1x - jx * this.r1y);
		this.b2.angvel += this.b2.iinertia * (jy * this.r2x - jx * this.r2y);
		var j_damp = (w1 - w2) * this.wMass - this.adamp * this.agamma;
		this.adamp += j_damp;
		this.b1.angvel -= j_damp * this.b1.iinertia;
		this.b2.angvel += j_damp * this.b2.iinertia;
	}
};
ZPP_FluidArbiter.prototype.__class__ = ZPP_FluidArbiter;
var ZPP_ColArbiter = zpp_nape.dynamics.ZPP_ColArbiter = function() {
	this.pre_dt = 0.0;
	this.mutable = false;
	this.stat = false;
	this.next = null;
	this.hpc2 = false;
	this.hc2 = false;
	this.oc2 = null;
	this.c2 = null;
	this.oc1 = null;
	this.c1 = null;
	this.__ref_vertex = 0;
	this.__ref_edge2 = null;
	this.__ref_edge1 = null;
	this.biasCoef = 0.0;
	this.rev = false;
	this.radius = 0.0;
	this.lproj = 0.0;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.surfacey = 0.0;
	this.surfacex = 0.0;
	this.k2y = 0.0;
	this.k2x = 0.0;
	this.k1y = 0.0;
	this.k1x = 0.0;
	this.rt2b = 0.0;
	this.rn2b = 0.0;
	this.rt2a = 0.0;
	this.rn2a = 0.0;
	this.rt1b = 0.0;
	this.rn1b = 0.0;
	this.rt1a = 0.0;
	this.rn1a = 0.0;
	this.jrAcc = 0.0;
	this.rMass = 0.0;
	this.Kc = 0.0;
	this.Kb = 0.0;
	this.Ka = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_normal = null;
	this.ny = 0.0;
	this.nx = 0.0;
	this.innards = null;
	this.wrap_contacts = null;
	this.contacts = null;
	this.s2 = null;
	this.s1 = null;
	this.userdef_rfric = false;
	this.userdef_restitution = false;
	this.userdef_stat_fric = false;
	this.userdef_dyn_fric = false;
	this.rfric = 0.0;
	this.restitution = 0.0;
	this.stat_fric = 0.0;
	this.dyn_fric = 0.0;
	this.outer_zn = null;
	ZPP_Arbiter.call(this);
	this.pre_dt = -1.0;
	this.contacts = new ZPP_Contact();
	this.innards = new ZPP_IContact();
	this.type = ZPP_Arbiter.COL;
	this.colarb = this;
};
ZPP_ColArbiter.__name__ = ["zpp_nape","dynamics","ZPP_ColArbiter"];
ZPP_ColArbiter.__super__ = ZPP_Arbiter;
// for(var k in ZPP_Arbiter.prototype ) ZPP_ColArbiter.prototype[k] = ZPP_Arbiter.prototype[k];
ZPP_ColArbiter.prototype = Object.create(ZPP_Arbiter.prototype);
ZPP_ColArbiter.prototype.outer_zn = null;
ZPP_ColArbiter.prototype.dyn_fric = null;
ZPP_ColArbiter.prototype.stat_fric = null;
ZPP_ColArbiter.prototype.restitution = null;
ZPP_ColArbiter.prototype.rfric = null;
ZPP_ColArbiter.prototype.userdef_dyn_fric = null;
ZPP_ColArbiter.prototype.userdef_stat_fric = null;
ZPP_ColArbiter.prototype.userdef_restitution = null;
ZPP_ColArbiter.prototype.userdef_rfric = null;
ZPP_ColArbiter.prototype.s1 = null;
ZPP_ColArbiter.prototype.s2 = null;
ZPP_ColArbiter.prototype.contacts = null;
ZPP_ColArbiter.prototype.wrap_contacts = null;
ZPP_ColArbiter.prototype.innards = null;
ZPP_ColArbiter.prototype.nx = null;
ZPP_ColArbiter.prototype.ny = null;
ZPP_ColArbiter.prototype.normal_validate = function() {
	if(this.cleared) {
		throw new js._Boot.HaxeError("Error: Arbiter not currently in use");
	}
	this.wrap_normal.zpp_inner.x = this.nx;
	this.wrap_normal.zpp_inner.y = this.ny;
	if(this.ws1.id > this.ws2.id) {
		this.wrap_normal.zpp_inner.x = -this.wrap_normal.zpp_inner.x;
		this.wrap_normal.zpp_inner.y = -this.wrap_normal.zpp_inner.y;
	}
};
ZPP_ColArbiter.prototype.wrap_normal = null;
ZPP_ColArbiter.prototype.getnormal = function() {
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = 0;
		ret1.y = 0;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == 0) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == 0;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = 0;
			ret.zpp_inner.y = 0;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_normal = ret;
	this.wrap_normal.zpp_inner._immutable = true;
	this.wrap_normal.zpp_inner._inuse = true;
	this.wrap_normal.zpp_inner._validate = $bind(this,this.normal_validate);
};
ZPP_ColArbiter.prototype.kMassa = null;
ZPP_ColArbiter.prototype.kMassb = null;
ZPP_ColArbiter.prototype.kMassc = null;
ZPP_ColArbiter.prototype.Ka = null;
ZPP_ColArbiter.prototype.Kb = null;
ZPP_ColArbiter.prototype.Kc = null;
ZPP_ColArbiter.prototype.rMass = null;
ZPP_ColArbiter.prototype.jrAcc = null;
ZPP_ColArbiter.prototype.rn1a = null;
ZPP_ColArbiter.prototype.rt1a = null;
ZPP_ColArbiter.prototype.rn1b = null;
ZPP_ColArbiter.prototype.rt1b = null;
ZPP_ColArbiter.prototype.rn2a = null;
ZPP_ColArbiter.prototype.rt2a = null;
ZPP_ColArbiter.prototype.rn2b = null;
ZPP_ColArbiter.prototype.rt2b = null;
ZPP_ColArbiter.prototype.k1x = null;
ZPP_ColArbiter.prototype.k1y = null;
ZPP_ColArbiter.prototype.k2x = null;
ZPP_ColArbiter.prototype.k2y = null;
ZPP_ColArbiter.prototype.surfacex = null;
ZPP_ColArbiter.prototype.surfacey = null;
ZPP_ColArbiter.prototype.ptype = null;
ZPP_ColArbiter.prototype.lnormx = null;
ZPP_ColArbiter.prototype.lnormy = null;
ZPP_ColArbiter.prototype.lproj = null;
ZPP_ColArbiter.prototype.radius = null;
ZPP_ColArbiter.prototype.rev = null;
ZPP_ColArbiter.prototype.biasCoef = null;
ZPP_ColArbiter.prototype.__ref_edge1 = null;
ZPP_ColArbiter.prototype.__ref_edge2 = null;
ZPP_ColArbiter.prototype.__ref_vertex = null;
ZPP_ColArbiter.prototype.c1 = null;
ZPP_ColArbiter.prototype.oc1 = null;
ZPP_ColArbiter.prototype.c2 = null;
ZPP_ColArbiter.prototype.oc2 = null;
ZPP_ColArbiter.prototype.hc2 = null;
ZPP_ColArbiter.prototype.hpc2 = null;
ZPP_ColArbiter.prototype.next = null;
ZPP_ColArbiter.prototype.alloc = function() {
};
ZPP_ColArbiter.prototype.free = function() {
	this.userdef_dyn_fric = false;
	this.userdef_stat_fric = false;
	this.userdef_restitution = false;
	this.userdef_rfric = false;
	this.__ref_edge1 = this.__ref_edge2 = null;
};
ZPP_ColArbiter.prototype.stat = null;
ZPP_ColArbiter.prototype.injectContact = function(px,py,nx,ny,dist,hash,posOnly) {
	if(posOnly == null) {
		posOnly = false;
	}
	var c = null;
	var cx_ite = this.contacts.next;
	while(cx_ite != null) {
		var cur = cx_ite;
		if(hash == cur.hash) {
			c = cur;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(c == null) {
		if(ZPP_Contact.zpp_pool == null) {
			c = new ZPP_Contact();
		} else {
			c = ZPP_Contact.zpp_pool;
			ZPP_Contact.zpp_pool = c.next;
			c.next = null;
		}
		var ci = c.inner;
		ci.jnAcc = ci.jtAcc = 0;
		c.hash = hash;
		c.fresh = true;
		c.arbiter = this;
		this.jrAcc = 0;
		var _this = this.contacts;
		c._inuse = true;
		var temp = c;
		temp.next = _this.next;
		_this.next = temp;
		_this.modified = true;
		_this.length++;
		this.innards.add(ci);
	} else {
		c.fresh = false;
	}
	c.px = px;
	c.py = py;
	this.nx = nx;
	this.ny = ny;
	c.dist = dist;
	c.stamp = this.stamp;
	c.posOnly = posOnly;
	return c;
};
ZPP_ColArbiter.prototype.assign = function(s1,s2,id,di) {
	this.b1 = s1.body;
	this.ws1 = s1;
	this.b2 = s2.body;
	this.ws2 = s2;
	this.id = id;
	this.di = di;
	var _this = this.b1.arbiters;
	var ret;
	if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Arbiter();
	} else {
		ret = ZNPNode_ZPP_Arbiter.zpp_pool;
		ZNPNode_ZPP_Arbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = this;
	var temp = ret;
	temp.next = _this.head;
	_this.head = temp;
	_this.modified = true;
	_this.length++;
	var _this1 = this.b2.arbiters;
	var ret1;
	if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
		ret1 = new ZNPNode_ZPP_Arbiter();
	} else {
		ret1 = ZNPNode_ZPP_Arbiter.zpp_pool;
		ZNPNode_ZPP_Arbiter.zpp_pool = ret1.next;
		ret1.next = null;
	}
	ret1.elt = this;
	var temp1 = ret1;
	temp1.next = _this1.head;
	_this1.head = temp1;
	_this1.modified = true;
	_this1.length++;
	this.active = true;
	this.present = 0;
	this.cleared = false;
	this.sleeping = false;
	this.fresh = false;
	this.presentable = false;
	this.s1 = s1;
	this.s2 = s2;
	if(!this.userdef_restitution) {
		if(this.s1.material.elasticity <= -Infinity || this.s2.material.elasticity <= -Infinity) {
			this.restitution = 0;
		} else if(this.s1.material.elasticity >= Infinity || this.s2.material.elasticity >= Infinity) {
			this.restitution = 1;
		} else {
			this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
		}
		if(this.restitution < 0) {
			this.restitution = 0;
		}
		if(this.restitution > 1) {
			this.restitution = 1;
		}
	}
	if(!this.userdef_dyn_fric) {
		this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
	}
	if(!this.userdef_stat_fric) {
		this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
	}
	if(!this.userdef_rfric) {
		this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
	}
};
ZPP_ColArbiter.prototype.calcProperties = function() {
	if(!this.userdef_restitution) {
		if(this.s1.material.elasticity <= -Infinity || this.s2.material.elasticity <= -Infinity) {
			this.restitution = 0;
		} else if(this.s1.material.elasticity >= Infinity || this.s2.material.elasticity >= Infinity) {
			this.restitution = 1;
		} else {
			this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
		}
		if(this.restitution < 0) {
			this.restitution = 0;
		}
		if(this.restitution > 1) {
			this.restitution = 1;
		}
	}
	if(!this.userdef_dyn_fric) {
		this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
	}
	if(!this.userdef_stat_fric) {
		this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
	}
	if(!this.userdef_rfric) {
		this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
	}
};
ZPP_ColArbiter.prototype.validate_props = function() {
	if(this.invalidated) {
		this.invalidated = false;
		if(!this.userdef_restitution) {
			if(this.s1.material.elasticity <= -Infinity || this.s2.material.elasticity <= -Infinity) {
				this.restitution = 0;
			} else if(this.s1.material.elasticity >= Infinity || this.s2.material.elasticity >= Infinity) {
				this.restitution = 1;
			} else {
				this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
			}
			if(this.restitution < 0) {
				this.restitution = 0;
			}
			if(this.restitution > 1) {
				this.restitution = 1;
			}
		}
		if(!this.userdef_dyn_fric) {
			this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
		}
		if(!this.userdef_stat_fric) {
			this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
		}
		if(!this.userdef_rfric) {
			this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
		}
	}
};
ZPP_ColArbiter.prototype.retire = function() {
	if(!this.cleared) {
		var _this = this.b1.arbiters;
		var pre = null;
		var cur = _this.head;
		while(cur != null) {
			if(cur.elt == this) {
				var old;
				var ret;
				if(pre == null) {
					old = _this.head;
					ret = old.next;
					_this.head = ret;
					if(_this.head == null) {
						_this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						_this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = ZNPNode_ZPP_Arbiter.zpp_pool;
				ZNPNode_ZPP_Arbiter.zpp_pool = o;
				_this.modified = true;
				_this.length--;
				_this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		var _this1 = this.b2.arbiters;
		var pre1 = null;
		var cur1 = _this1.head;
		while(cur1 != null) {
			if(cur1.elt == this) {
				var old1;
				var ret1;
				if(pre1 == null) {
					old1 = _this1.head;
					ret1 = old1.next;
					_this1.head = ret1;
					if(_this1.head == null) {
						_this1.pushmod = true;
					}
				} else {
					old1 = pre1.next;
					ret1 = old1.next;
					pre1.next = ret1;
					if(ret1 == null) {
						_this1.pushmod = true;
					}
				}
				var o1 = old1;
				o1.elt = null;
				o1.next = ZNPNode_ZPP_Arbiter.zpp_pool;
				ZNPNode_ZPP_Arbiter.zpp_pool = o1;
				_this1.modified = true;
				_this1.length--;
				_this1.pushmod = true;
				break;
			}
			pre1 = cur1;
			cur1 = cur1.next;
		}
		if(this.pair != null) {
			this.pair.arb = null;
			this.pair = null;
		}
	}
	this.b1 = this.b2 = null;
	this.active = false;
	this.intchange = false;
	while(this.contacts.next != null) {
		var _this2 = this.contacts;
		var ret2 = _this2.next;
		_this2.pop();
		ret2.arbiter = null;
		ret2.next = ZPP_Contact.zpp_pool;
		ZPP_Contact.zpp_pool = ret2;
		var _this3 = this.innards;
		var ret3 = _this3.next;
		_this3.next = ret3.next;
		ret3._inuse = false;
		if(_this3.next == null) {
			_this3.pushmod = true;
		}
		_this3.modified = true;
		_this3.length--;
	}
	var o2 = this;
	o2.userdef_dyn_fric = false;
	o2.userdef_stat_fric = false;
	o2.userdef_restitution = false;
	o2.userdef_rfric = false;
	o2.__ref_edge1 = o2.__ref_edge2 = null;
	o2.next = ZPP_ColArbiter.zpp_pool;
	ZPP_ColArbiter.zpp_pool = o2;
	this.pre_dt = -1.0;
};
ZPP_ColArbiter.prototype.mutable = null;
ZPP_ColArbiter.prototype.makemutable = function() {
	this.mutable = true;
	if(this.wrap_normal != null) {
		this.wrap_normal.zpp_inner._immutable = false;
	}
	if(this.wrap_contacts != null) {
		this.wrap_contacts.zpp_inner.immutable = false;
	}
};
ZPP_ColArbiter.prototype.makeimmutable = function() {
	this.mutable = false;
	if(this.wrap_normal != null) {
		this.wrap_normal.zpp_inner._immutable = true;
	}
	if(this.wrap_contacts != null) {
		this.wrap_contacts.zpp_inner.immutable = true;
	}
};
ZPP_ColArbiter.prototype.contacts_adder = function(x) {
	throw new js._Boot.HaxeError("Error: Cannot add new contacts, information required is far too specific and detailed :)");
};
ZPP_ColArbiter.prototype.contacts_subber = function(x) {
	var pre = null;
	var prei = null;
	var cx_itei = this.innards.next;
	var cx_ite = this.contacts.next;
	while(cx_ite != null) {
		var c = cx_ite;
		if(c == x.zpp_inner) {
			this.contacts.erase(pre);
			this.innards.erase(prei);
			c.arbiter = null;
			c.next = ZPP_Contact.zpp_pool;
			ZPP_Contact.zpp_pool = c;
			break;
		}
		pre = cx_ite;
		prei = cx_itei;
		cx_itei = cx_itei.next;
		cx_ite = cx_ite.next;
	}
};
ZPP_ColArbiter.prototype.setupcontacts = function() {
	this.wrap_contacts = ZPP_ContactList.get(this.contacts,true);
	this.wrap_contacts.zpp_inner.immutable = !this.mutable;
	this.wrap_contacts.zpp_inner.adder = $bind(this,this.contacts_adder);
	this.wrap_contacts.zpp_inner.dontremove = true;
	this.wrap_contacts.zpp_inner.subber = $bind(this,this.contacts_subber);
};
ZPP_ColArbiter.prototype.cleanupContacts = function() {
	var fst = true;
	var pre = null;
	var prei = null;
	var cx_itei = this.innards.next;
	this.hc2 = false;
	var cx_ite = this.contacts.next;
	while(cx_ite != null) {
		var c = cx_ite;
		if(c.stamp + Config.arbiterExpirationDelay < this.stamp) {
			var _this = this.contacts;
			var old;
			var ret;
			if(pre == null) {
				old = _this.next;
				ret = old.next;
				_this.next = ret;
				if(_this.next == null) {
					_this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					_this.pushmod = true;
				}
			}
			old._inuse = false;
			_this.modified = true;
			_this.length--;
			_this.pushmod = true;
			cx_ite = ret;
			var _this1 = this.innards;
			var old1;
			var ret1;
			if(prei == null) {
				old1 = _this1.next;
				ret1 = old1.next;
				_this1.next = ret1;
				if(_this1.next == null) {
					_this1.pushmod = true;
				}
			} else {
				old1 = prei.next;
				ret1 = old1.next;
				prei.next = ret1;
				if(ret1 == null) {
					_this1.pushmod = true;
				}
			}
			old1._inuse = false;
			_this1.modified = true;
			_this1.length--;
			_this1.pushmod = true;
			cx_itei = ret1;
			c.arbiter = null;
			c.next = ZPP_Contact.zpp_pool;
			ZPP_Contact.zpp_pool = c;
			continue;
		}
		var ci = c.inner;
		var pact = c.active;
		c.active = c.stamp == this.stamp;
		if(c.active) {
			if(fst) {
				fst = false;
				this.c1 = ci;
				this.oc1 = c;
			} else {
				this.hc2 = true;
				this.c2 = ci;
				this.oc2 = c;
			}
		}
		if(pact != c.active) {
			this.contacts.modified = true;
		}
		pre = cx_ite;
		prei = cx_itei;
		cx_itei = cx_itei.next;
		cx_ite = cx_ite.next;
	}
	if(this.hc2) {
		this.hpc2 = true;
		if(this.oc1.posOnly) {
			var tmp = this.c1;
			this.c1 = this.c2;
			this.c2 = tmp;
			var tmp2 = this.oc1;
			this.oc1 = this.oc2;
			this.oc2 = tmp2;
			this.hc2 = false;
		} else if(this.oc2.posOnly) {
			this.hc2 = false;
		}
		if(this.oc1.posOnly) {
			fst = true;
		}
	} else {
		this.hpc2 = false;
	}
	return fst;
};
ZPP_ColArbiter.prototype.pre_dt = null;
ZPP_ColArbiter.prototype.preStep = function(dt) {
	if(this.invalidated) {
		this.invalidated = false;
		if(!this.userdef_restitution) {
			if(this.s1.material.elasticity <= -Infinity || this.s2.material.elasticity <= -Infinity) {
				this.restitution = 0;
			} else if(this.s1.material.elasticity >= Infinity || this.s2.material.elasticity >= Infinity) {
				this.restitution = 1;
			} else {
				this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
			}
			if(this.restitution < 0) {
				this.restitution = 0;
			}
			if(this.restitution > 1) {
				this.restitution = 1;
			}
		}
		if(!this.userdef_dyn_fric) {
			this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
		}
		if(!this.userdef_stat_fric) {
			this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
		}
		if(!this.userdef_rfric) {
			this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
		}
	}
	if(this.pre_dt == -1.0) {
		this.pre_dt = dt;
	}
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	var mass_sum = this.b1.smass + this.b2.smass;
	this.hc2 = false;
	var fst = true;
	this.biasCoef = this.b1.type != 2 || this.b2.type != 2?this.continuous?Config.contactContinuousStaticBiasCoef:Config.contactStaticBiasCoef:this.continuous?Config.contactContinuousBiasCoef:Config.contactBiasCoef;
	this.continuous = false;
	var pre = null;
	var prei = null;
	var cx_itei = this.innards.next;
	var cx_ite = this.contacts.next;
	while(cx_ite != null) {
		var c = cx_ite;
		if(c.stamp + Config.arbiterExpirationDelay < this.stamp) {
			var _this = this.contacts;
			var old;
			var ret;
			if(pre == null) {
				old = _this.next;
				ret = old.next;
				_this.next = ret;
				if(_this.next == null) {
					_this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					_this.pushmod = true;
				}
			}
			old._inuse = false;
			_this.modified = true;
			_this.length--;
			_this.pushmod = true;
			cx_ite = ret;
			var _this1 = this.innards;
			var old1;
			var ret1;
			if(prei == null) {
				old1 = _this1.next;
				ret1 = old1.next;
				_this1.next = ret1;
				if(_this1.next == null) {
					_this1.pushmod = true;
				}
			} else {
				old1 = prei.next;
				ret1 = old1.next;
				prei.next = ret1;
				if(ret1 == null) {
					_this1.pushmod = true;
				}
			}
			old1._inuse = false;
			_this1.modified = true;
			_this1.length--;
			_this1.pushmod = true;
			cx_itei = ret1;
			c.arbiter = null;
			c.next = ZPP_Contact.zpp_pool;
			ZPP_Contact.zpp_pool = c;
			continue;
		}
		var ci = c.inner;
		var pact = c.active;
		c.active = c.stamp == this.stamp;
		if(c.active) {
			if(fst) {
				fst = false;
				this.c1 = ci;
				this.oc1 = c;
			} else {
				this.hc2 = true;
				this.c2 = ci;
				this.oc2 = c;
			}
			ci.r2x = c.px - this.b2.posx;
			ci.r2y = c.py - this.b2.posy;
			ci.r1x = c.px - this.b1.posx;
			ci.r1y = c.py - this.b1.posy;
			var x = ci.r2x * this.nx + ci.r2y * this.ny;
			var kt = mass_sum + this.b2.sinertia * (x * x);
			var x1 = ci.r1x * this.nx + ci.r1y * this.ny;
			kt += this.b1.sinertia * (x1 * x1);
			ci.tMass = kt < Config.epsilon * Config.epsilon?0:1.0 / kt;
			var x2 = this.ny * ci.r2x - this.nx * ci.r2y;
			var nt = mass_sum + this.b2.sinertia * (x2 * x2);
			var x3 = this.ny * ci.r1x - this.nx * ci.r1y;
			nt += this.b1.sinertia * (x3 * x3);
			ci.nMass = nt < Config.epsilon * Config.epsilon?0:1.0 / nt;
			var vrx = 0.0;
			var vry = 0.0;
			var ang = this.b2.angvel + this.b2.kinangvel;
			vrx = this.b2.velx + this.b2.kinvelx - ci.r2y * ang;
			vry = this.b2.vely + this.b2.kinvely + ci.r2x * ang;
			ang = this.b1.angvel + this.b1.kinangvel;
			vrx -= this.b1.velx + this.b1.kinvelx - ci.r1y * ang;
			vry -= this.b1.vely + this.b1.kinvely + ci.r1x * ang;
			var vdot = this.nx * vrx + this.ny * vry;
			c.elasticity = this.restitution;
			ci.bounce = vdot * c.elasticity;
			if(ci.bounce > -Config.elasticThreshold) {
				ci.bounce = 0;
			}
			vdot = vry * this.nx - vrx * this.ny;
			var thr = Config.staticFrictionThreshold;
			if(vdot * vdot > thr * thr) {
				ci.friction = this.dyn_fric;
			} else {
				ci.friction = this.stat_fric;
			}
			ci.jnAcc *= dtratio;
			ci.jtAcc *= dtratio;
		}
		if(pact != c.active) {
			this.contacts.modified = true;
		}
		pre = cx_ite;
		prei = cx_itei;
		cx_itei = cx_itei.next;
		cx_ite = cx_ite.next;
	}
	if(this.hc2) {
		this.hpc2 = true;
		if(this.oc1.posOnly) {
			var tmp = this.c1;
			this.c1 = this.c2;
			this.c2 = tmp;
			var tmp2 = this.oc1;
			this.oc1 = this.oc2;
			this.oc2 = tmp2;
			this.hc2 = false;
		} else if(this.oc2.posOnly) {
			this.hc2 = false;
		}
		if(this.oc1.posOnly) {
			fst = true;
		}
	} else {
		this.hpc2 = false;
	}
	this.jrAcc *= dtratio;
	if(!fst) {
		this.rn1a = this.ny * this.c1.r1x - this.nx * this.c1.r1y;
		this.rt1a = this.c1.r1x * this.nx + this.c1.r1y * this.ny;
		this.rn1b = this.ny * this.c1.r2x - this.nx * this.c1.r2y;
		this.rt1b = this.c1.r2x * this.nx + this.c1.r2y * this.ny;
		this.k1x = this.b2.kinvelx - this.c1.r2y * this.b2.kinangvel - (this.b1.kinvelx - this.c1.r1y * this.b1.kinangvel);
		this.k1y = this.b2.kinvely + this.c1.r2x * this.b2.kinangvel - (this.b1.kinvely + this.c1.r1x * this.b1.kinangvel);
	}
	if(this.hc2) {
		this.rn2a = this.ny * this.c2.r1x - this.nx * this.c2.r1y;
		this.rt2a = this.c2.r1x * this.nx + this.c2.r1y * this.ny;
		this.rn2b = this.ny * this.c2.r2x - this.nx * this.c2.r2y;
		this.rt2b = this.c2.r2x * this.nx + this.c2.r2y * this.ny;
		this.k2x = this.b2.kinvelx - this.c2.r2y * this.b2.kinangvel - (this.b1.kinvelx - this.c2.r1y * this.b1.kinangvel);
		this.k2y = this.b2.kinvely + this.c2.r2x * this.b2.kinangvel - (this.b1.kinvely + this.c2.r1x * this.b1.kinangvel);
		this.kMassa = mass_sum + this.b1.sinertia * this.rn1a * this.rn1a + this.b2.sinertia * this.rn1b * this.rn1b;
		this.kMassb = mass_sum + this.b1.sinertia * this.rn1a * this.rn2a + this.b2.sinertia * this.rn1b * this.rn2b;
		this.kMassc = mass_sum + this.b1.sinertia * this.rn2a * this.rn2a + this.b2.sinertia * this.rn2b * this.rn2b;
		if(this.kMassa * this.kMassa + 2 * this.kMassb * this.kMassb + this.kMassc * this.kMassc < Config.illConditionedThreshold * (this.kMassa * this.kMassc - this.kMassb * this.kMassb)) {
			this.Ka = this.kMassa;
			this.Kb = this.kMassb;
			this.Kc = this.kMassc;
			var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
			if(det != det) {
				this.kMassa = this.kMassb = this.kMassc = 0;
			} else if(det == 0) {
				if(this.kMassa != 0) {
					this.kMassa = 1 / this.kMassa;
				} else {
					this.kMassa = 0;
				}
				if(this.kMassc != 0) {
					this.kMassc = 1 / this.kMassc;
				} else {
					this.kMassc = 0;
				}
				this.kMassb = 0;
			} else {
				det = 1 / det;
				var t = this.kMassc * det;
				this.kMassc = this.kMassa * det;
				this.kMassa = t;
				this.kMassb *= -det;
			}
		} else {
			this.hc2 = false;
			if(this.oc2.dist < this.oc1.dist) {
				var t1 = this.c1;
				this.c1 = this.c2;
				this.c2 = t1;
			}
			this.oc2.active = false;
			this.contacts.modified = true;
		}
	}
	this.surfacex = this.b2.svelx;
	this.surfacey = this.b2.svely;
	this.surfacex += this.b1.svelx;
	this.surfacey += this.b1.svely;
	this.surfacex = -this.surfacex;
	this.surfacey = -this.surfacey;
	this.rMass = this.b1.sinertia + this.b2.sinertia;
	if(this.rMass != 0) {
		this.rMass = 1 / this.rMass;
	}
	return fst;
};
ZPP_ColArbiter.prototype.warmStart = function() {
	var jx = this.nx * this.c1.jnAcc - this.ny * this.c1.jtAcc;
	var jy = this.ny * this.c1.jnAcc + this.nx * this.c1.jtAcc;
	var t = this.b1.imass;
	this.b1.velx -= jx * t;
	this.b1.vely -= jy * t;
	this.b1.angvel -= this.b1.iinertia * (jy * this.c1.r1x - jx * this.c1.r1y);
	var t1 = this.b2.imass;
	this.b2.velx += jx * t1;
	this.b2.vely += jy * t1;
	this.b2.angvel += this.b2.iinertia * (jy * this.c1.r2x - jx * this.c1.r2y);
	if(this.hc2) {
		var jx1 = this.nx * this.c2.jnAcc - this.ny * this.c2.jtAcc;
		var jy1 = this.ny * this.c2.jnAcc + this.nx * this.c2.jtAcc;
		var t2 = this.b1.imass;
		this.b1.velx -= jx1 * t2;
		this.b1.vely -= jy1 * t2;
		this.b1.angvel -= this.b1.iinertia * (jy1 * this.c2.r1x - jx1 * this.c2.r1y);
		var t3 = this.b2.imass;
		this.b2.velx += jx1 * t3;
		this.b2.vely += jy1 * t3;
		this.b2.angvel += this.b2.iinertia * (jy1 * this.c2.r2x - jx1 * this.c2.r2y);
	}
	this.b2.angvel += this.jrAcc * this.b2.iinertia;
	this.b1.angvel -= this.jrAcc * this.b1.iinertia;
};
ZPP_ColArbiter.prototype.applyImpulseVel = function() {
	var jx;
	var jy;
	var j;
	var jMax;
	var jOld;
	var cjAcc;
	var v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
	var v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
	j = (v1y * this.nx - v1x * this.ny + this.surfacex) * this.c1.tMass;
	jMax = this.c1.friction * this.c1.jnAcc;
	jOld = this.c1.jtAcc;
	cjAcc = jOld - j;
	if(cjAcc > jMax) {
		cjAcc = jMax;
	} else if(cjAcc < -jMax) {
		cjAcc = -jMax;
	}
	j = cjAcc - jOld;
	this.c1.jtAcc = cjAcc;
	jx = -this.ny * j;
	jy = this.nx * j;
	this.b2.velx += jx * this.b2.imass;
	this.b2.vely += jy * this.b2.imass;
	this.b1.velx -= jx * this.b1.imass;
	this.b1.vely -= jy * this.b1.imass;
	this.b2.angvel += this.rt1b * j * this.b2.iinertia;
	this.b1.angvel -= this.rt1a * j * this.b1.iinertia;
	if(this.hc2) {
		var v2x = this.k2x + this.b2.velx - this.c2.r2y * this.b2.angvel - (this.b1.velx - this.c2.r1y * this.b1.angvel);
		var v2y = this.k2y + this.b2.vely + this.c2.r2x * this.b2.angvel - (this.b1.vely + this.c2.r1x * this.b1.angvel);
		j = (v2y * this.nx - v2x * this.ny + this.surfacex) * this.c2.tMass;
		jMax = this.c2.friction * this.c2.jnAcc;
		jOld = this.c2.jtAcc;
		cjAcc = jOld - j;
		if(cjAcc > jMax) {
			cjAcc = jMax;
		} else if(cjAcc < -jMax) {
			cjAcc = -jMax;
		}
		j = cjAcc - jOld;
		this.c2.jtAcc = cjAcc;
		jx = -this.ny * j;
		jy = this.nx * j;
		this.b2.velx += jx * this.b2.imass;
		this.b2.vely += jy * this.b2.imass;
		this.b1.velx -= jx * this.b1.imass;
		this.b1.vely -= jy * this.b1.imass;
		this.b2.angvel += this.rt2b * j * this.b2.iinertia;
		this.b1.angvel -= this.rt2a * j * this.b1.iinertia;
		v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
		v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
		v2x = this.k2x + this.b2.velx - this.c2.r2y * this.b2.angvel - (this.b1.velx - this.c2.r1y * this.b1.angvel);
		v2y = this.k2y + this.b2.vely + this.c2.r2x * this.b2.angvel - (this.b1.vely + this.c2.r1x * this.b1.angvel);
		var ax = this.c1.jnAcc;
		var ay = this.c2.jnAcc;
		var jnx = v1x * this.nx + v1y * this.ny + this.surfacey + this.c1.bounce - (this.Ka * ax + this.Kb * ay);
		var jny = v2x * this.nx + v2y * this.ny + this.surfacey + this.c2.bounce - (this.Kb * ax + this.Kc * ay);
		var xx = -(this.kMassa * jnx + this.kMassb * jny);
		var xy = -(this.kMassb * jnx + this.kMassc * jny);
		if(xx >= 0 && xy >= 0) {
			jnx = xx - ax;
			jny = xy - ay;
			this.c1.jnAcc = xx;
			this.c2.jnAcc = xy;
		} else {
			xx = -this.c1.nMass * jnx;
			if(xx >= 0 && this.Kb * xx + jny >= 0) {
				jnx = xx - ax;
				jny = -ay;
				this.c1.jnAcc = xx;
				this.c2.jnAcc = 0;
			} else {
				xy = -this.c2.nMass * jny;
				if(xy >= 0 && this.Kb * xy + jnx >= 0) {
					jnx = -ax;
					jny = xy - ay;
					this.c1.jnAcc = 0;
					this.c2.jnAcc = xy;
				} else if(jnx >= 0 && jny >= 0) {
					jnx = -ax;
					jny = -ay;
					this.c1.jnAcc = this.c2.jnAcc = 0;
				} else {
					jnx = 0;
					jny = 0;
				}
			}
		}
		j = jnx + jny;
		jx = this.nx * j;
		jy = this.ny * j;
		this.b2.velx += jx * this.b2.imass;
		this.b2.vely += jy * this.b2.imass;
		this.b1.velx -= jx * this.b1.imass;
		this.b1.vely -= jy * this.b1.imass;
		this.b2.angvel += (this.rn1b * jnx + this.rn2b * jny) * this.b2.iinertia;
		this.b1.angvel -= (this.rn1a * jnx + this.rn2a * jny) * this.b1.iinertia;
	} else {
		if(this.radius != 0.0) {
			j = (this.b2.angvel - this.b1.angvel) * this.rMass;
			jMax = this.rfric * this.c1.jnAcc;
			jOld = this.jrAcc;
			this.jrAcc -= j;
			if(this.jrAcc > jMax) {
				this.jrAcc = jMax;
			} else if(this.jrAcc < -jMax) {
				this.jrAcc = -jMax;
			}
			j = this.jrAcc - jOld;
			this.b2.angvel += j * this.b2.iinertia;
			this.b1.angvel -= j * this.b1.iinertia;
		}
		v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
		v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
		j = (this.c1.bounce + (this.nx * v1x + this.ny * v1y) + this.surfacey) * this.c1.nMass;
		jOld = this.c1.jnAcc;
		cjAcc = jOld - j;
		if(cjAcc < 0.0) {
			cjAcc = 0.0;
		}
		j = cjAcc - jOld;
		this.c1.jnAcc = cjAcc;
		jx = this.nx * j;
		jy = this.ny * j;
		this.b2.velx += jx * this.b2.imass;
		this.b2.vely += jy * this.b2.imass;
		this.b1.velx -= jx * this.b1.imass;
		this.b1.vely -= jy * this.b1.imass;
		this.b2.angvel += this.rn1b * j * this.b2.iinertia;
		this.b1.angvel -= this.rn1a * j * this.b1.iinertia;
	}
};
ZPP_ColArbiter.prototype.applyImpulsePos = function() {
	if(this.ptype == 2) {
		var c = this.c1;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * c.lr2x - this.b2.axisx * c.lr2y;
		r2y = c.lr2x * this.b2.axisx + c.lr2y * this.b2.axisy;
		r2x += this.b2.posx;
		r2y += this.b2.posy;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * c.lr1x - this.b1.axisx * c.lr1y;
		r1y = c.lr1x * this.b1.axisx + c.lr1y * this.b1.axisy;
		r1x += this.b1.posx;
		r1y += this.b1.posy;
		var dx = 0.0;
		var dy = 0.0;
		dx = r2x - r1x;
		dy = r2y - r1y;
		var dl = Math.sqrt(dx * dx + dy * dy);
		var r = this.radius - Config.collisionSlop;
		var err = dl - r;
		if(dx * this.nx + dy * this.ny < 0) {
			dx = -dx;
			dy = -dy;
			err -= this.radius;
		}
		if(err < 0) {
			if(dl < Config.epsilon) {
				if(this.b1.smass != 0.0) {
					this.b1.posx += Config.epsilon * 10;
				} else {
					this.b2.posx += Config.epsilon * 10;
				}
			} else {
				var t = 1.0 / dl;
				dx *= t;
				dy *= t;
				var px = 0.5 * (r1x + r2x);
				var py = 0.5 * (r1y + r2y);
				var pen = dl - r;
				r1x = px - this.b1.posx;
				r1y = py - this.b1.posy;
				r2x = px - this.b2.posx;
				r2y = py - this.b2.posy;
				var rn1 = dy * r1x - dx * r1y;
				var rn2 = dy * r2x - dx * r2y;
				var K = this.b2.smass + rn2 * rn2 * this.b2.sinertia + this.b1.smass + rn1 * rn1 * this.b1.sinertia;
				if(K != 0) {
					var jn = -this.biasCoef * pen / K;
					var Jx = 0.0;
					var Jy = 0.0;
					Jx = dx * jn;
					Jy = dy * jn;
					var t1 = this.b1.imass;
					this.b1.posx -= Jx * t1;
					this.b1.posy -= Jy * t1;
					var _this = this.b1;
					var dr = -rn1 * this.b1.iinertia * jn;
					_this.rot += dr;
					if(dr * dr > 0.0001) {
						_this.axisx = Math.sin(_this.rot);
						_this.axisy = Math.cos(_this.rot);
					} else {
						var d2 = dr * dr;
						var p = 1 - 0.5 * d2;
						var m = 1 - d2 * d2 / 8;
						var nx = (p * _this.axisx + dr * _this.axisy) * m;
						_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
						_this.axisx = nx;
					}
					var t2 = this.b2.imass;
					this.b2.posx += Jx * t2;
					this.b2.posy += Jy * t2;
					var _this1 = this.b2;
					var dr1 = rn2 * this.b2.iinertia * jn;
					_this1.rot += dr1;
					if(dr1 * dr1 > 0.0001) {
						_this1.axisx = Math.sin(_this1.rot);
						_this1.axisy = Math.cos(_this1.rot);
					} else {
						var d21 = dr1 * dr1;
						var p1 = 1 - 0.5 * d21;
						var m1 = 1 - d21 * d21 / 8;
						var nx1 = (p1 * _this1.axisx + dr1 * _this1.axisy) * m1;
						_this1.axisy = (p1 * _this1.axisy - dr1 * _this1.axisx) * m1;
						_this1.axisx = nx1;
					}
				}
			}
		}
	} else {
		var gnormx = 0.0;
		var gnormy = 0.0;
		var gproj;
		var clip1x = 0.0;
		var clip1y = 0.0;
		var clip2x = 0;
		var clip2y = 0;
		if(this.ptype == 0) {
			gnormx = this.b1.axisy * this.lnormx - this.b1.axisx * this.lnormy;
			gnormy = this.lnormx * this.b1.axisx + this.lnormy * this.b1.axisy;
			gproj = this.lproj + (gnormx * this.b1.posx + gnormy * this.b1.posy);
			clip1x = this.b2.axisy * this.c1.lr1x - this.b2.axisx * this.c1.lr1y;
			clip1y = this.c1.lr1x * this.b2.axisx + this.c1.lr1y * this.b2.axisy;
			clip1x += this.b2.posx;
			clip1y += this.b2.posy;
			if(this.hpc2) {
				clip2x = this.b2.axisy * this.c2.lr1x - this.b2.axisx * this.c2.lr1y;
				clip2y = this.c2.lr1x * this.b2.axisx + this.c2.lr1y * this.b2.axisy;
				clip2x += this.b2.posx;
				clip2y += this.b2.posy;
			}
		} else {
			gnormx = this.b2.axisy * this.lnormx - this.b2.axisx * this.lnormy;
			gnormy = this.lnormx * this.b2.axisx + this.lnormy * this.b2.axisy;
			gproj = this.lproj + (gnormx * this.b2.posx + gnormy * this.b2.posy);
			clip1x = this.b1.axisy * this.c1.lr1x - this.b1.axisx * this.c1.lr1y;
			clip1y = this.c1.lr1x * this.b1.axisx + this.c1.lr1y * this.b1.axisy;
			clip1x += this.b1.posx;
			clip1y += this.b1.posy;
			if(this.hpc2) {
				clip2x = this.b1.axisy * this.c2.lr1x - this.b1.axisx * this.c2.lr1y;
				clip2y = this.c2.lr1x * this.b1.axisx + this.c2.lr1y * this.b1.axisy;
				clip2x += this.b1.posx;
				clip2y += this.b1.posy;
			}
		}
		var err1 = clip1x * gnormx + clip1y * gnormy - gproj - this.radius;
		err1 += Config.collisionSlop;
		var err2 = 0.0;
		if(this.hpc2) {
			err2 = clip2x * gnormx + clip2y * gnormy - gproj - this.radius;
			err2 += Config.collisionSlop;
		}
		if(err1 < 0 || err2 < 0) {
			if(this.rev) {
				gnormx = -gnormx;
				gnormy = -gnormy;
			}
			var c1r1x = 0.0;
			var c1r1y = 0.0;
			c1r1x = clip1x - this.b1.posx;
			c1r1y = clip1y - this.b1.posy;
			var c1r2x = 0.0;
			var c1r2y = 0.0;
			c1r2x = clip1x - this.b2.posx;
			c1r2y = clip1y - this.b2.posy;
			var c2r1x = 0;
			var c2r1y = 0;
			var c2r2x = 0;
			var c2r2y = 0;
			if(this.hpc2) {
				c2r1x = clip2x - this.b1.posx;
				c2r1y = clip2y - this.b1.posy;
				c2r2x = clip2x - this.b2.posx;
				c2r2y = clip2y - this.b2.posy;
				var rn1a = gnormy * c1r1x - gnormx * c1r1y;
				var rn1b = gnormy * c1r2x - gnormx * c1r2y;
				var rn2a = gnormy * c2r1x - gnormx * c2r1y;
				var rn2b = gnormy * c2r2x - gnormx * c2r2y;
				var mass_sum = this.b1.smass + this.b2.smass;
				this.kMassa = mass_sum + this.b1.sinertia * rn1a * rn1a + this.b2.sinertia * rn1b * rn1b;
				this.kMassb = mass_sum + this.b1.sinertia * rn1a * rn2a + this.b2.sinertia * rn1b * rn2b;
				this.kMassc = mass_sum + this.b1.sinertia * rn2a * rn2a + this.b2.sinertia * rn2b * rn2b;
				var Ka = 0.0;
				var Kb = 0.0;
				var Kc = 0.0;
				Ka = this.kMassa;
				Kb = this.kMassb;
				Kc = this.kMassc;
				var bx = err1 * this.biasCoef;
				var by = err2 * this.biasCoef;
				while(true) {
					var xx = 0.0;
					var xy = 0.0;
					xx = bx;
					xy = by;
					xx = -bx;
					xy = -by;
					var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
					if(det != det) {
						xy = 0;
						xx = xy;
					} else if(det == 0) {
						if(this.kMassa != 0) {
							xx /= this.kMassa;
						} else {
							xx = 0;
						}
						if(this.kMassc != 0) {
							xy /= this.kMassc;
						} else {
							xy = 0;
						}
					} else {
						det = 1 / det;
						var t3 = det * (this.kMassc * xx - this.kMassb * xy);
						xy = det * (this.kMassa * xy - this.kMassb * xx);
						xx = t3;
					}
					if(xx >= 0 && xy >= 0) {
						var t4 = (xx + xy) * this.b1.imass;
						this.b1.posx -= gnormx * t4;
						this.b1.posy -= gnormy * t4;
						var _this2 = this.b1;
						var dr2 = -this.b1.iinertia * (rn1a * xx + rn2a * xy);
						_this2.rot += dr2;
						if(dr2 * dr2 > 0.0001) {
							_this2.axisx = Math.sin(_this2.rot);
							_this2.axisy = Math.cos(_this2.rot);
						} else {
							var d22 = dr2 * dr2;
							var p2 = 1 - 0.5 * d22;
							var m2 = 1 - d22 * d22 / 8;
							var nx2 = (p2 * _this2.axisx + dr2 * _this2.axisy) * m2;
							_this2.axisy = (p2 * _this2.axisy - dr2 * _this2.axisx) * m2;
							_this2.axisx = nx2;
						}
						var t5 = (xx + xy) * this.b2.imass;
						this.b2.posx += gnormx * t5;
						this.b2.posy += gnormy * t5;
						var _this3 = this.b2;
						var dr3 = this.b2.iinertia * (rn1b * xx + rn2b * xy);
						_this3.rot += dr3;
						if(dr3 * dr3 > 0.0001) {
							_this3.axisx = Math.sin(_this3.rot);
							_this3.axisy = Math.cos(_this3.rot);
						} else {
							var d23 = dr3 * dr3;
							var p3 = 1 - 0.5 * d23;
							var m3 = 1 - d23 * d23 / 8;
							var nx3 = (p3 * _this3.axisx + dr3 * _this3.axisy) * m3;
							_this3.axisy = (p3 * _this3.axisy - dr3 * _this3.axisx) * m3;
							_this3.axisx = nx3;
						}
						break;
					}
					xx = -bx / Ka;
					xy = 0;
					var vn2 = Kb * xx + by;
					if(xx >= 0 && vn2 >= 0) {
						var t6 = (xx + xy) * this.b1.imass;
						this.b1.posx -= gnormx * t6;
						this.b1.posy -= gnormy * t6;
						var _this4 = this.b1;
						var dr4 = -this.b1.iinertia * (rn1a * xx + rn2a * xy);
						_this4.rot += dr4;
						if(dr4 * dr4 > 0.0001) {
							_this4.axisx = Math.sin(_this4.rot);
							_this4.axisy = Math.cos(_this4.rot);
						} else {
							var d24 = dr4 * dr4;
							var p4 = 1 - 0.5 * d24;
							var m4 = 1 - d24 * d24 / 8;
							var nx4 = (p4 * _this4.axisx + dr4 * _this4.axisy) * m4;
							_this4.axisy = (p4 * _this4.axisy - dr4 * _this4.axisx) * m4;
							_this4.axisx = nx4;
						}
						var t7 = (xx + xy) * this.b2.imass;
						this.b2.posx += gnormx * t7;
						this.b2.posy += gnormy * t7;
						var _this5 = this.b2;
						var dr5 = this.b2.iinertia * (rn1b * xx + rn2b * xy);
						_this5.rot += dr5;
						if(dr5 * dr5 > 0.0001) {
							_this5.axisx = Math.sin(_this5.rot);
							_this5.axisy = Math.cos(_this5.rot);
						} else {
							var d25 = dr5 * dr5;
							var p5 = 1 - 0.5 * d25;
							var m5 = 1 - d25 * d25 / 8;
							var nx5 = (p5 * _this5.axisx + dr5 * _this5.axisy) * m5;
							_this5.axisy = (p5 * _this5.axisy - dr5 * _this5.axisx) * m5;
							_this5.axisx = nx5;
						}
						break;
					}
					xx = 0;
					xy = -by / Kc;
					var vn1 = Kb * xy + bx;
					if(xy >= 0 && vn1 >= 0) {
						var t8 = (xx + xy) * this.b1.imass;
						this.b1.posx -= gnormx * t8;
						this.b1.posy -= gnormy * t8;
						var _this6 = this.b1;
						var dr6 = -this.b1.iinertia * (rn1a * xx + rn2a * xy);
						_this6.rot += dr6;
						if(dr6 * dr6 > 0.0001) {
							_this6.axisx = Math.sin(_this6.rot);
							_this6.axisy = Math.cos(_this6.rot);
						} else {
							var d26 = dr6 * dr6;
							var p6 = 1 - 0.5 * d26;
							var m6 = 1 - d26 * d26 / 8;
							var nx6 = (p6 * _this6.axisx + dr6 * _this6.axisy) * m6;
							_this6.axisy = (p6 * _this6.axisy - dr6 * _this6.axisx) * m6;
							_this6.axisx = nx6;
						}
						var t9 = (xx + xy) * this.b2.imass;
						this.b2.posx += gnormx * t9;
						this.b2.posy += gnormy * t9;
						var _this7 = this.b2;
						var dr7 = this.b2.iinertia * (rn1b * xx + rn2b * xy);
						_this7.rot += dr7;
						if(dr7 * dr7 > 0.0001) {
							_this7.axisx = Math.sin(_this7.rot);
							_this7.axisy = Math.cos(_this7.rot);
						} else {
							var d27 = dr7 * dr7;
							var p7 = 1 - 0.5 * d27;
							var m7 = 1 - d27 * d27 / 8;
							var nx7 = (p7 * _this7.axisx + dr7 * _this7.axisy) * m7;
							_this7.axisy = (p7 * _this7.axisy - dr7 * _this7.axisx) * m7;
							_this7.axisx = nx7;
						}
						break;
					}
					break;
				}
			} else {
				var rn11 = gnormy * c1r1x - gnormx * c1r1y;
				var rn21 = gnormy * c1r2x - gnormx * c1r2y;
				var K1 = this.b2.smass + rn21 * rn21 * this.b2.sinertia + this.b1.smass + rn11 * rn11 * this.b1.sinertia;
				if(K1 != 0) {
					var jn1 = -this.biasCoef * err1 / K1;
					var Jx1 = 0.0;
					var Jy1 = 0.0;
					Jx1 = gnormx * jn1;
					Jy1 = gnormy * jn1;
					var t10 = this.b1.imass;
					this.b1.posx -= Jx1 * t10;
					this.b1.posy -= Jy1 * t10;
					var _this8 = this.b1;
					var dr8 = -rn11 * this.b1.iinertia * jn1;
					_this8.rot += dr8;
					if(dr8 * dr8 > 0.0001) {
						_this8.axisx = Math.sin(_this8.rot);
						_this8.axisy = Math.cos(_this8.rot);
					} else {
						var d28 = dr8 * dr8;
						var p8 = 1 - 0.5 * d28;
						var m8 = 1 - d28 * d28 / 8;
						var nx8 = (p8 * _this8.axisx + dr8 * _this8.axisy) * m8;
						_this8.axisy = (p8 * _this8.axisy - dr8 * _this8.axisx) * m8;
						_this8.axisx = nx8;
					}
					var t11 = this.b2.imass;
					this.b2.posx += Jx1 * t11;
					this.b2.posy += Jy1 * t11;
					var _this9 = this.b2;
					var dr9 = rn21 * this.b2.iinertia * jn1;
					_this9.rot += dr9;
					if(dr9 * dr9 > 0.0001) {
						_this9.axisx = Math.sin(_this9.rot);
						_this9.axisy = Math.cos(_this9.rot);
					} else {
						var d29 = dr9 * dr9;
						var p9 = 1 - 0.5 * d29;
						var m9 = 1 - d29 * d29 / 8;
						var nx9 = (p9 * _this9.axisx + dr9 * _this9.axisy) * m9;
						_this9.axisy = (p9 * _this9.axisy - dr9 * _this9.axisx) * m9;
						_this9.axisx = nx9;
					}
				}
			}
		}
	}
};
ZPP_ColArbiter.prototype.__class__ = ZPP_ColArbiter;
var ZPP_Contact = zpp_nape.dynamics.ZPP_Contact = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.elasticity = 0.0;
	this.dist = 0.0;
	this.fresh = false;
	this.hash = 0;
	this.stamp = 0;
	this.posOnly = false;
	this.active = false;
	this.inner = null;
	this.arbiter = null;
	this.wrap_position = null;
	this.py = 0.0;
	this.px = 0.0;
	this.outer = null;
	this.inner = new ZPP_IContact();
};
ZPP_Contact.__name__ = ["zpp_nape","dynamics","ZPP_Contact"];
ZPP_Contact.prototype.outer = null;
ZPP_Contact.prototype.wrapper = function() {
	if(this.outer == null) {
		ZPP_Contact.internal = true;
		this.outer = new Contact();
		ZPP_Contact.internal = false;
		this.outer.zpp_inner = this;
	}
	return this.outer;
};
ZPP_Contact.prototype.px = null;
ZPP_Contact.prototype.py = null;
ZPP_Contact.prototype.position_validate = function() {
	if(this.inactiveme()) {
		throw new js._Boot.HaxeError("Error: Contact not currently in use");
	}
	this.wrap_position.zpp_inner.x = this.px;
	this.wrap_position.zpp_inner.y = this.py;
};
ZPP_Contact.prototype.wrap_position = null;
ZPP_Contact.prototype.getposition = function() {
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = 0;
		ret1.y = 0;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == 0) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == 0;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = 0;
			ret.zpp_inner.y = 0;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_position = ret;
	this.wrap_position.zpp_inner._inuse = true;
	this.wrap_position.zpp_inner._immutable = true;
	this.wrap_position.zpp_inner._validate = $bind(this,this.position_validate);
};
ZPP_Contact.prototype.inactiveme = function() {
	return !(this.active && this.arbiter != null && !(!this.arbiter.active));
};
ZPP_Contact.prototype.arbiter = null;
ZPP_Contact.prototype.inner = null;
ZPP_Contact.prototype.active = null;
ZPP_Contact.prototype.posOnly = null;
ZPP_Contact.prototype.stamp = null;
ZPP_Contact.prototype.hash = null;
ZPP_Contact.prototype.fresh = null;
ZPP_Contact.prototype.dist = null;
ZPP_Contact.prototype.elasticity = null;
ZPP_Contact.prototype.free = function() {
	this.arbiter = null;
};
ZPP_Contact.prototype.alloc = function() {
};
ZPP_Contact.prototype.next = null;
ZPP_Contact.prototype.elem = function() {
	return this;
};
ZPP_Contact.prototype.begin = function() {
	return this.next;
};
ZPP_Contact.prototype._inuse = null;
ZPP_Contact.prototype.modified = null;
ZPP_Contact.prototype.pushmod = null;
ZPP_Contact.prototype.length = null;
ZPP_Contact.prototype.setbegin = function(i) {
	this.next = i;
	this.modified = true;
	this.pushmod = true;
};
ZPP_Contact.prototype.add = function(o) {
	o._inuse = true;
	o.next = this.next;
	this.next = o;
	this.modified = true;
	this.length++;
	return o;
};
ZPP_Contact.prototype.inlined_add = function(o) {
	o._inuse = true;
	o.next = this.next;
	this.next = o;
	this.modified = true;
	this.length++;
	return o;
};
ZPP_Contact.prototype.addAll = function(x) {
	var cx_ite = x.next;
	while(cx_ite != null) {
		this.add(cx_ite);
		cx_ite = cx_ite.next;
	}
};
ZPP_Contact.prototype.insert = function(cur,o) {
	o._inuse = true;
	if(cur == null) {
		o.next = this.next;
		this.next = o;
	} else {
		o.next = cur.next;
		cur.next = o;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return o;
};
ZPP_Contact.prototype.inlined_insert = function(cur,o) {
	o._inuse = true;
	if(cur == null) {
		o.next = this.next;
		this.next = o;
	} else {
		o.next = cur.next;
		cur.next = o;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return o;
};
ZPP_Contact.prototype.pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret._inuse = false;
	if(this.next == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZPP_Contact.prototype.inlined_pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret._inuse = false;
	if(this.next == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZPP_Contact.prototype.pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
};
ZPP_Contact.prototype.inlined_pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
};
ZPP_Contact.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.next;
	while(cur != null) {
		if(cur == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.next;
				ret = old.next;
				this.next = ret;
				if(this.next == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			old._inuse = false;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZPP_Contact.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZPP_Contact.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	while(cur != null) {
		if(cur == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.next;
				ret = old.next;
				this.next = ret;
				if(this.next == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			old._inuse = false;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZPP_Contact.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.next;
				ret1 = old.next;
				this.next = ret1;
				if(this.next == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			old._inuse = false;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZPP_Contact.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.next;
		ret = old.next;
		this.next = ret;
		if(this.next == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	old._inuse = false;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZPP_Contact.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.next;
		ret = old.next;
		this.next = ret;
		if(this.next == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	old._inuse = false;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZPP_Contact.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZPP_Contact.prototype.clear = function() {
};
ZPP_Contact.prototype.inlined_clear = function() {
};
ZPP_Contact.prototype.reverse = function() {
	var cur = this.next;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.next = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZPP_Contact.prototype.empty = function() {
	return this.next == null;
};
ZPP_Contact.prototype.size = function() {
	return this.length;
};
ZPP_Contact.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.next;
	while(cx_ite != null) {
		if(cx_ite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZPP_Contact.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.next;
	while(cx_ite != null) {
		if(cx_ite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZPP_Contact.prototype.front = function() {
	return this.next;
};
ZPP_Contact.prototype.back = function() {
	var ret = this.next;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret;
};
ZPP_Contact.prototype.iterator_at = function(ind) {
	var ret = this.next;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZPP_Contact.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it;
	} else {
		return null;
	}
};
ZPP_Contact.prototype.__class__ = ZPP_Contact;
var ZPP_IContact = zpp_nape.dynamics.ZPP_IContact = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.lr2y = 0.0;
	this.lr2x = 0.0;
	this.lr1y = 0.0;
	this.lr1x = 0.0;
	this.jtAcc = 0.0;
	this.jnAcc = 0.0;
	this.friction = 0.0;
	this.bounce = 0.0;
	this.tMass = 0.0;
	this.nMass = 0.0;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
};
ZPP_IContact.__name__ = ["zpp_nape","dynamics","ZPP_IContact"];
ZPP_IContact.prototype.r1x = null;
ZPP_IContact.prototype.r1y = null;
ZPP_IContact.prototype.r2x = null;
ZPP_IContact.prototype.r2y = null;
ZPP_IContact.prototype.nMass = null;
ZPP_IContact.prototype.tMass = null;
ZPP_IContact.prototype.bounce = null;
ZPP_IContact.prototype.friction = null;
ZPP_IContact.prototype.jnAcc = null;
ZPP_IContact.prototype.jtAcc = null;
ZPP_IContact.prototype.lr1x = null;
ZPP_IContact.prototype.lr1y = null;
ZPP_IContact.prototype.lr2x = null;
ZPP_IContact.prototype.lr2y = null;
ZPP_IContact.prototype.next = null;
ZPP_IContact.prototype.elem = function() {
	return this;
};
ZPP_IContact.prototype.begin = function() {
	return this.next;
};
ZPP_IContact.prototype._inuse = null;
ZPP_IContact.prototype.modified = null;
ZPP_IContact.prototype.pushmod = null;
ZPP_IContact.prototype.length = null;
ZPP_IContact.prototype.setbegin = function(i) {
	this.next = i;
	this.modified = true;
	this.pushmod = true;
};
ZPP_IContact.prototype.add = function(o) {
	o._inuse = true;
	o.next = this.next;
	this.next = o;
	this.modified = true;
	this.length++;
	return o;
};
ZPP_IContact.prototype.inlined_add = function(o) {
	o._inuse = true;
	o.next = this.next;
	this.next = o;
	this.modified = true;
	this.length++;
	return o;
};
ZPP_IContact.prototype.addAll = function(x) {
	var cx_ite = x.next;
	while(cx_ite != null) {
		this.add(cx_ite);
		cx_ite = cx_ite.next;
	}
};
ZPP_IContact.prototype.insert = function(cur,o) {
	o._inuse = true;
	if(cur == null) {
		o.next = this.next;
		this.next = o;
	} else {
		o.next = cur.next;
		cur.next = o;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return o;
};
ZPP_IContact.prototype.inlined_insert = function(cur,o) {
	o._inuse = true;
	if(cur == null) {
		o.next = this.next;
		this.next = o;
	} else {
		o.next = cur.next;
		cur.next = o;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return o;
};
ZPP_IContact.prototype.pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret._inuse = false;
	if(this.next == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZPP_IContact.prototype.inlined_pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret._inuse = false;
	if(this.next == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZPP_IContact.prototype.pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
};
ZPP_IContact.prototype.inlined_pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
};
ZPP_IContact.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.next;
	while(cur != null) {
		if(cur == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.next;
				ret = old.next;
				this.next = ret;
				if(this.next == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			old._inuse = false;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZPP_IContact.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZPP_IContact.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	while(cur != null) {
		if(cur == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.next;
				ret = old.next;
				this.next = ret;
				if(this.next == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			old._inuse = false;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZPP_IContact.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.next;
				ret1 = old.next;
				this.next = ret1;
				if(this.next == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			old._inuse = false;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZPP_IContact.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.next;
		ret = old.next;
		this.next = ret;
		if(this.next == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	old._inuse = false;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZPP_IContact.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.next;
		ret = old.next;
		this.next = ret;
		if(this.next == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	old._inuse = false;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZPP_IContact.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZPP_IContact.prototype.clear = function() {
};
ZPP_IContact.prototype.inlined_clear = function() {
};
ZPP_IContact.prototype.reverse = function() {
	var cur = this.next;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.next = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZPP_IContact.prototype.empty = function() {
	return this.next == null;
};
ZPP_IContact.prototype.size = function() {
	return this.length;
};
ZPP_IContact.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.next;
	while(cx_ite != null) {
		if(cx_ite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZPP_IContact.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.next;
	while(cx_ite != null) {
		if(cx_ite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZPP_IContact.prototype.front = function() {
	return this.next;
};
ZPP_IContact.prototype.back = function() {
	var ret = this.next;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret;
};
ZPP_IContact.prototype.iterator_at = function(ind) {
	var ret = this.next;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZPP_IContact.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it;
	} else {
		return null;
	}
};
ZPP_IContact.prototype.__class__ = ZPP_IContact;
var ZPP_InteractionFilter = zpp_nape.dynamics.ZPP_InteractionFilter = function() {
	this.fluidMask = 0;
	this.fluidGroup = 0;
	this.sensorMask = 0;
	this.sensorGroup = 0;
	this.collisionMask = 0;
	this.collisionGroup = 0;
	this.wrap_shapes = null;
	this.shapes = null;
	this.outer = null;
	this.userData = null;
	this.next = null;
	this.shapes = new ZNPList_ZPP_Shape();
	this.collisionGroup = this.sensorGroup = this.fluidGroup = 1;
	this.collisionMask = this.sensorMask = this.fluidMask = -1;
};
ZPP_InteractionFilter.__name__ = ["zpp_nape","dynamics","ZPP_InteractionFilter"];
ZPP_InteractionFilter.prototype.next = null;
ZPP_InteractionFilter.prototype.userData = null;
ZPP_InteractionFilter.prototype.outer = null;
ZPP_InteractionFilter.prototype.wrapper = function() {
	if(this.outer == null) {
		this.outer = new InteractionFilter();
		var o = this.outer.zpp_inner;
		o.outer = null;
		o.next = ZPP_InteractionFilter.zpp_pool;
		ZPP_InteractionFilter.zpp_pool = o;
		this.outer.zpp_inner = this;
	}
	return this.outer;
};
ZPP_InteractionFilter.prototype.free = function() {
	this.outer = null;
};
ZPP_InteractionFilter.prototype.alloc = function() {
};
ZPP_InteractionFilter.prototype.shapes = null;
ZPP_InteractionFilter.prototype.wrap_shapes = null;
ZPP_InteractionFilter.prototype.feature_cons = function() {
	this.shapes = new ZNPList_ZPP_Shape();
};
ZPP_InteractionFilter.prototype.addShape = function(shape) {
	this.shapes.add(shape);
};
ZPP_InteractionFilter.prototype.remShape = function(shape) {
	this.shapes.remove(shape);
};
ZPP_InteractionFilter.prototype.copy = function() {
	var ret;
	if(ZPP_InteractionFilter.zpp_pool == null) {
		ret = new ZPP_InteractionFilter();
	} else {
		ret = ZPP_InteractionFilter.zpp_pool;
		ZPP_InteractionFilter.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.collisionGroup = this.collisionGroup;
	ret.collisionMask = this.collisionMask;
	ret.sensorGroup = this.sensorGroup;
	ret.sensorMask = this.sensorMask;
	ret.fluidGroup = this.fluidGroup;
	ret.fluidMask = this.fluidMask;
	return ret;
};
ZPP_InteractionFilter.prototype.collisionGroup = null;
ZPP_InteractionFilter.prototype.collisionMask = null;
ZPP_InteractionFilter.prototype.shouldCollide = function(x) {
	if((this.collisionMask & x.collisionGroup) != 0) {
		return (x.collisionMask & this.collisionGroup) != 0;
	} else {
		return false;
	}
};
ZPP_InteractionFilter.prototype.sensorGroup = null;
ZPP_InteractionFilter.prototype.sensorMask = null;
ZPP_InteractionFilter.prototype.shouldSense = function(x) {
	if((this.sensorMask & x.sensorGroup) != 0) {
		return (x.sensorMask & this.sensorGroup) != 0;
	} else {
		return false;
	}
};
ZPP_InteractionFilter.prototype.fluidGroup = null;
ZPP_InteractionFilter.prototype.fluidMask = null;
ZPP_InteractionFilter.prototype.shouldFlow = function(x) {
	if((this.fluidMask & x.fluidGroup) != 0) {
		return (x.fluidMask & this.fluidGroup) != 0;
	} else {
		return false;
	}
};
ZPP_InteractionFilter.prototype.invalidate = function() {
	var cx_ite = this.shapes.head;
	while(cx_ite != null) {
		cx_ite.elt.invalidate_filter();
		cx_ite = cx_ite.next;
	}
};
ZPP_InteractionFilter.prototype.__class__ = ZPP_InteractionFilter;
var ZPP_InteractionGroup = zpp_nape.dynamics.ZPP_InteractionGroup = function() {
	this.depth = 0;
	this.wrap_interactors = null;
	this.interactors = null;
	this.wrap_groups = null;
	this.groups = null;
	this.group = null;
	this.ignore = false;
	this.outer = null;
	this.depth = 0;
	this.groups = new ZNPList_ZPP_InteractionGroup();
	this.interactors = new ZNPList_ZPP_Interactor();
};
ZPP_InteractionGroup.__name__ = ["zpp_nape","dynamics","ZPP_InteractionGroup"];
ZPP_InteractionGroup.prototype.outer = null;
ZPP_InteractionGroup.prototype.ignore = null;
ZPP_InteractionGroup.prototype.group = null;
ZPP_InteractionGroup.prototype.setGroup = function(group) {
	if(this.group != group) {
		if(this.group != null) {
			this.group.groups.remove(this);
			this.depth = 0;
			this.group.invalidate(true);
		}
		this.group = group;
		if(group != null) {
			group.groups.add(this);
			this.depth = group.depth + 1;
			group.invalidate(true);
		} else {
			this.invalidate(true);
		}
	}
};
ZPP_InteractionGroup.prototype.groups = null;
ZPP_InteractionGroup.prototype.wrap_groups = null;
ZPP_InteractionGroup.prototype.interactors = null;
ZPP_InteractionGroup.prototype.wrap_interactors = null;
ZPP_InteractionGroup.prototype.depth = null;
ZPP_InteractionGroup.prototype.invalidate = function(force) {
	if(force == null) {
		force = false;
	}
	if(!(force || this.ignore)) {
		return;
	}
	var cx_ite = this.interactors.head;
	while(cx_ite != null) {
		var b = cx_ite.elt;
		if(b.ibody != null) {
			b.ibody.wake();
		} else if(b.ishape != null) {
			b.ishape.body.wake();
		} else {
			b.icompound.wake();
		}
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = this.groups.head;
	while(cx_ite1 != null) {
		cx_ite1.elt.invalidate(force);
		cx_ite1 = cx_ite1.next;
	}
};
ZPP_InteractionGroup.prototype.addGroup = function(group) {
	this.groups.add(group);
	group.depth = this.depth + 1;
};
ZPP_InteractionGroup.prototype.remGroup = function(group) {
	this.groups.remove(group);
	group.depth = 0;
};
ZPP_InteractionGroup.prototype.addInteractor = function(intx) {
	this.interactors.add(intx);
};
ZPP_InteractionGroup.prototype.remInteractor = function(intx,flag) {
	if(flag == null) {
		flag = -1;
	}
	this.interactors.remove(intx);
};
ZPP_InteractionGroup.prototype.__class__ = ZPP_InteractionGroup;
var ZPP_SpaceArbiterList = zpp_nape.dynamics.ZPP_SpaceArbiterList = function() {
	this.at_index_3 = 0;
	this.at_index_2 = 0;
	this.at_index_1 = 0;
	this.at_index_0 = 0;
	this.ite_3 = null;
	this.ite_2 = null;
	this.ite_1 = null;
	this.ite_0 = null;
	this.lengths = null;
	this.zip_length = false;
	this._length = 0;
	this.space = null;
	ArbiterList.call(this);
	this.at_index_0 = 0;
	this.at_index_1 = 0;
	this.at_index_2 = 0;
	this.at_index_3 = 0;
	this.zip_length = true;
	this._length = 0;
	this.lengths = [];
	var _g = 0;
	while(_g < 4) {
		++_g;
		this.lengths.push(0);
	}
};
ZPP_SpaceArbiterList.__name__ = ["zpp_nape","dynamics","ZPP_SpaceArbiterList"];
ZPP_SpaceArbiterList.__super__ = ArbiterList;
// for(var k in ArbiterList.prototype ) ZPP_SpaceArbiterList.prototype[k] = ArbiterList.prototype[k];
ZPP_SpaceArbiterList.prototype = Object.create(ArbiterList.prototype);
ZPP_SpaceArbiterList.prototype.space = null;
ZPP_SpaceArbiterList.prototype._length = null;
ZPP_SpaceArbiterList.prototype.zip_length = null;
ZPP_SpaceArbiterList.prototype.zpp_gl = function() {
	this.zpp_vm();
	if(this.zip_length) {
		this._length = 0;
		var len = 0;
		var cx_ite = this.space.c_arbiters_true.head;
		while(cx_ite != null) {
			if(cx_ite.elt.active) {
				++len;
			}
			cx_ite = cx_ite.next;
		}
		this.lengths[0] = len;
		this._length += len;
		var len1 = 0;
		var cx_ite1 = this.space.c_arbiters_false.head;
		while(cx_ite1 != null) {
			if(cx_ite1.elt.active) {
				++len1;
			}
			cx_ite1 = cx_ite1.next;
		}
		this.lengths[1] = len1;
		this._length += len1;
		var len2 = 0;
		var cx_ite2 = this.space.f_arbiters.head;
		while(cx_ite2 != null) {
			if(cx_ite2.elt.active) {
				++len2;
			}
			cx_ite2 = cx_ite2.next;
		}
		this.lengths[2] = len2;
		this._length += len2;
		var len3 = 0;
		var cx_ite3 = this.space.s_arbiters.head;
		while(cx_ite3 != null) {
			if(cx_ite3.elt.active) {
				++len3;
			}
			cx_ite3 = cx_ite3.next;
		}
		this.lengths[3] = len3;
		this._length += len3;
		this.zip_length = false;
	}
	return this._length;
};
ZPP_SpaceArbiterList.prototype.lengths = null;
ZPP_SpaceArbiterList.prototype.ite_0 = null;
ZPP_SpaceArbiterList.prototype.ite_1 = null;
ZPP_SpaceArbiterList.prototype.ite_2 = null;
ZPP_SpaceArbiterList.prototype.ite_3 = null;
ZPP_SpaceArbiterList.prototype.at_index_0 = null;
ZPP_SpaceArbiterList.prototype.at_index_1 = null;
ZPP_SpaceArbiterList.prototype.at_index_2 = null;
ZPP_SpaceArbiterList.prototype.at_index_3 = null;
ZPP_SpaceArbiterList.prototype.zpp_vm = function() {
	var modified = false;
	if(this.space.c_arbiters_true.modified) {
		modified = true;
		this.space.c_arbiters_true.modified = false;
	}
	if(this.space.c_arbiters_false.modified) {
		modified = true;
		this.space.c_arbiters_false.modified = false;
	}
	if(this.space.f_arbiters.modified) {
		modified = true;
		this.space.f_arbiters.modified = false;
	}
	if(this.space.s_arbiters.modified) {
		modified = true;
		this.space.s_arbiters.modified = false;
	}
	if(modified) {
		this.zip_length = true;
		this._length = 0;
		this.ite_0 = null;
		this.ite_1 = null;
		this.ite_2 = null;
		this.ite_3 = null;
	}
};
ZPP_SpaceArbiterList.prototype.push = function(obj) {
	throw new js._Boot.HaxeError("Error: ArbiterList is immutable");
};
ZPP_SpaceArbiterList.prototype.pop = function() {
	throw new js._Boot.HaxeError("Error: ArbiterList is immutable");
};
ZPP_SpaceArbiterList.prototype.unshift = function(obj) {
	throw new js._Boot.HaxeError("Error: ArbiterList is immutable");
};
ZPP_SpaceArbiterList.prototype.shift = function() {
	throw new js._Boot.HaxeError("Error: ArbiterList is immutable");
};
ZPP_SpaceArbiterList.prototype.remove = function(obj) {
	throw new js._Boot.HaxeError("Error: ArbiterList is immutable");
};
ZPP_SpaceArbiterList.prototype.clear = function() {
	throw new js._Boot.HaxeError("Error: ArbiterList is immutable");
};
ZPP_SpaceArbiterList.prototype.at = function(index) {
	this.zpp_vm();
	if(index < 0 || index >= this.zpp_gl()) {
		throw new js._Boot.HaxeError("Error: Index out of bounds");
	}
	var ret = null;
	var accum_length = 0;
	if(ret == null) {
		if(index < this.lengths[0]) {
			var offset = index;
			if(offset < this.at_index_0 || this.ite_0 == null) {
				this.at_index_0 = 0;
				this.ite_0 = this.space.c_arbiters_true.head;
				while(!this.ite_0.elt.active) this.ite_0 = this.ite_0.next;
			}
			while(this.at_index_0 != offset) {
				this.at_index_0++;
				this.ite_0 = this.ite_0.next;
				while(!this.ite_0.elt.active) this.ite_0 = this.ite_0.next;
			}
			ret = this.ite_0.elt.wrapper();
		} else {
			accum_length = this.lengths[0];
		}
	}
	if(ret == null) {
		if(index < accum_length + this.lengths[1]) {
			var offset1 = index - accum_length;
			if(offset1 < this.at_index_1 || this.ite_1 == null) {
				this.at_index_1 = 0;
				this.ite_1 = this.space.c_arbiters_false.head;
				while(!this.ite_1.elt.active) this.ite_1 = this.ite_1.next;
			}
			while(this.at_index_1 != offset1) {
				this.at_index_1++;
				this.ite_1 = this.ite_1.next;
				while(!this.ite_1.elt.active) this.ite_1 = this.ite_1.next;
			}
			ret = this.ite_1.elt.wrapper();
		} else {
			accum_length += this.lengths[1];
		}
	}
	if(ret == null) {
		if(index < accum_length + this.lengths[2]) {
			var offset2 = index - accum_length;
			if(offset2 < this.at_index_2 || this.ite_2 == null) {
				this.at_index_2 = 0;
				this.ite_2 = this.space.f_arbiters.head;
				while(!this.ite_2.elt.active) this.ite_2 = this.ite_2.next;
			}
			while(this.at_index_2 != offset2) {
				this.at_index_2++;
				this.ite_2 = this.ite_2.next;
				while(!this.ite_2.elt.active) this.ite_2 = this.ite_2.next;
			}
			ret = this.ite_2.elt.wrapper();
		} else {
			accum_length += this.lengths[2];
		}
	}
	if(ret == null) {
		if(index < accum_length + this.lengths[3]) {
			var offset3 = index - accum_length;
			if(offset3 < this.at_index_3 || this.ite_3 == null) {
				this.at_index_3 = 0;
				this.ite_3 = this.space.s_arbiters.head;
				while(!this.ite_3.elt.active) this.ite_3 = this.ite_3.next;
			}
			while(this.at_index_3 != offset3) {
				this.at_index_3++;
				this.ite_3 = this.ite_3.next;
				while(!this.ite_3.elt.active) this.ite_3 = this.ite_3.next;
			}
			ret = this.ite_3.elt.wrapper();
		} else {
			accum_length += this.lengths[3];
		}
	}
	return ret;
};
ZPP_SpaceArbiterList.prototype.__class__ = ZPP_SpaceArbiterList;
var ZPP_AABB = zpp_nape.geom.ZPP_AABB = function() {
	this.wrap_max = null;
	this.maxy = 0.0;
	this.maxx = 0.0;
	this.wrap_min = null;
	this.miny = 0.0;
	this.minx = 0.0;
	this.next = null;
	this.outer = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
ZPP_AABB.__name__ = ["zpp_nape","geom","ZPP_AABB"];
ZPP_AABB.get = function(minx,miny,maxx,maxy) {
	var ret;
	if(ZPP_AABB.zpp_pool == null) {
		ret = new ZPP_AABB();
	} else {
		ret = ZPP_AABB.zpp_pool;
		ZPP_AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.minx = minx;
	ret.miny = miny;
	ret.maxx = maxx;
	ret.maxy = maxy;
	return ret;
};
ZPP_AABB.prototype._invalidate = null;
ZPP_AABB.prototype._validate = null;
ZPP_AABB.prototype._immutable = null;
ZPP_AABB.prototype.validate = function() {
	if(this._validate != null) {
		this._validate();
	}
};
ZPP_AABB.prototype.invalidate = function() {
	if(this._invalidate != null) {
		this._invalidate(this);
	}
};
ZPP_AABB.prototype.outer = null;
ZPP_AABB.prototype.wrapper = function() {
	if(this.outer == null) {
		this.outer = new AABB();
		var o = this.outer.zpp_inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = ZPP_AABB.zpp_pool;
		ZPP_AABB.zpp_pool = o;
		this.outer.zpp_inner = this;
	}
	return this.outer;
};
ZPP_AABB.prototype.next = null;
ZPP_AABB.prototype.alloc = function() {
};
ZPP_AABB.prototype.free = function() {
	if(this.outer != null) {
		this.outer.zpp_inner = null;
		this.outer = null;
	}
	this.wrap_min = this.wrap_max = null;
	this._invalidate = null;
	this._validate = null;
};
ZPP_AABB.prototype.copy = function() {
	var minx = this.minx;
	var miny = this.miny;
	var maxx = this.maxx;
	var maxy = this.maxy;
	var ret;
	if(ZPP_AABB.zpp_pool == null) {
		ret = new ZPP_AABB();
	} else {
		ret = ZPP_AABB.zpp_pool;
		ZPP_AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.minx = minx;
	ret.miny = miny;
	ret.maxx = maxx;
	ret.maxy = maxy;
	return ret;
};
ZPP_AABB.prototype.width = function() {
	return this.maxx - this.minx;
};
ZPP_AABB.prototype.height = function() {
	return this.maxy - this.miny;
};
ZPP_AABB.prototype.perimeter = function() {
	return (this.maxx - this.minx + (this.maxy - this.miny)) * 2;
};
ZPP_AABB.prototype.minx = null;
ZPP_AABB.prototype.miny = null;
ZPP_AABB.prototype.wrap_min = null;
ZPP_AABB.prototype.getmin = function() {
	if(this.wrap_min == null) {
		var x = this.minx;
		var y = this.miny;
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(ZPP_PubPool.poolVec2 == null) {
			ret = new Vec2();
		} else {
			ret = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(ZPP_Vec2.zpp_pool == null) {
				ret1 = new ZPP_Vec2();
			} else {
				ret1 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_min = ret;
		this.wrap_min.zpp_inner._inuse = true;
		if(this._immutable) {
			this.wrap_min.zpp_inner._immutable = true;
		} else {
			this.wrap_min.zpp_inner._invalidate = $bind(this,this.mod_min);
		}
		this.wrap_min.zpp_inner._validate = $bind(this,this.dom_min);
	}
	return this.wrap_min;
};
ZPP_AABB.prototype.dom_min = function() {
	if(this._validate != null) {
		this._validate();
	}
	this.wrap_min.zpp_inner.x = this.minx;
	this.wrap_min.zpp_inner.y = this.miny;
};
ZPP_AABB.prototype.mod_min = function(min) {
	if(min.x != this.minx || min.y != this.miny) {
		this.minx = min.x;
		this.miny = min.y;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
};
ZPP_AABB.prototype.maxx = null;
ZPP_AABB.prototype.maxy = null;
ZPP_AABB.prototype.wrap_max = null;
ZPP_AABB.prototype.getmax = function() {
	if(this.wrap_max == null) {
		var x = this.maxx;
		var y = this.maxy;
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(ZPP_PubPool.poolVec2 == null) {
			ret = new Vec2();
		} else {
			ret = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(ZPP_Vec2.zpp_pool == null) {
				ret1 = new ZPP_Vec2();
			} else {
				ret1 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap_max = ret;
		this.wrap_max.zpp_inner._inuse = true;
		if(this._immutable) {
			this.wrap_max.zpp_inner._immutable = true;
		} else {
			this.wrap_max.zpp_inner._invalidate = $bind(this,this.mod_max);
		}
		this.wrap_max.zpp_inner._validate = $bind(this,this.dom_max);
	}
	return this.wrap_max;
};
ZPP_AABB.prototype.dom_max = function() {
	if(this._validate != null) {
		this._validate();
	}
	this.wrap_max.zpp_inner.x = this.maxx;
	this.wrap_max.zpp_inner.y = this.maxy;
};
ZPP_AABB.prototype.mod_max = function(max) {
	if(max.x != this.maxx || max.y != this.maxy) {
		this.maxx = max.x;
		this.maxy = max.y;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
};
ZPP_AABB.prototype.intersectX = function(x) {
	return !(x.minx > this.maxx || this.minx > x.maxx);
};
ZPP_AABB.prototype.intersectY = function(x) {
	return !(x.miny > this.maxy || this.miny > x.maxy);
};
ZPP_AABB.prototype.intersect = function(x) {
	if(x.miny <= this.maxy && this.miny <= x.maxy && x.minx <= this.maxx) {
		return this.minx <= x.maxx;
	} else {
		return false;
	}
};
ZPP_AABB.prototype.combine = function(x) {
	if(x.minx < this.minx) {
		this.minx = x.minx;
	}
	if(x.maxx > this.maxx) {
		this.maxx = x.maxx;
	}
	if(x.miny < this.miny) {
		this.miny = x.miny;
	}
	if(x.maxy > this.maxy) {
		this.maxy = x.maxy;
	}
};
ZPP_AABB.prototype.contains = function(x) {
	if(x.minx >= this.minx && x.miny >= this.miny && x.maxx <= this.maxx) {
		return x.maxy <= this.maxy;
	} else {
		return false;
	}
};
ZPP_AABB.prototype.containsPoint = function(v) {
	if(v.x >= this.minx && v.x <= this.maxx && v.y >= this.miny) {
		return v.y <= this.maxy;
	} else {
		return false;
	}
};
ZPP_AABB.prototype.setCombine = function(a,b) {
	this.minx = a.minx < b.minx?a.minx:b.minx;
	this.miny = a.miny < b.miny?a.miny:b.miny;
	this.maxx = a.maxx > b.maxx?a.maxx:b.maxx;
	this.maxy = a.maxy > b.maxy?a.maxy:b.maxy;
};
ZPP_AABB.prototype.setExpand = function(a,fatten) {
	this.minx = a.minx - fatten;
	this.miny = a.miny - fatten;
	this.maxx = a.maxx + fatten;
	this.maxy = a.maxy + fatten;
};
ZPP_AABB.prototype.setExpandPoint = function(x,y) {
	if(x < this.minx) {
		this.minx = x;
	}
	if(x > this.maxx) {
		this.maxx = x;
	}
	if(y < this.miny) {
		this.miny = y;
	}
	if(y > this.maxy) {
		this.maxy = y;
	}
};
ZPP_AABB.prototype.toString = function() {
	return "{ x: " + this.minx + " y: " + this.miny + " w: " + (this.maxx - this.minx) + " h: " + (this.maxy - this.miny) + " }";
};
ZPP_AABB.prototype.__class__ = ZPP_AABB;
var ZNPList_ZPP_Vec2 = zpp_nape.util.ZNPList_ZPP_Vec2 = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_Vec2.__name__ = ["zpp_nape","util","ZNPList_ZPP_Vec2"];
ZNPList_ZPP_Vec2.prototype.head = null;
ZNPList_ZPP_Vec2.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_Vec2.prototype.modified = null;
ZNPList_ZPP_Vec2.prototype.pushmod = null;
ZNPList_ZPP_Vec2.prototype.length = null;
ZNPList_ZPP_Vec2.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_Vec2.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_Vec2.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Vec2();
	} else {
		ret = ZNPNode_ZPP_Vec2.zpp_pool;
		ZNPNode_ZPP_Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_Vec2.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_Vec2.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Vec2();
	} else {
		ret = ZNPNode_ZPP_Vec2.zpp_pool;
		ZNPNode_ZPP_Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_Vec2.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_Vec2.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_Vec2.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Vec2();
	} else {
		ret = ZNPNode_ZPP_Vec2.zpp_pool;
		ZNPNode_ZPP_Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_Vec2.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_Vec2.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Vec2();
	} else {
		ret = ZNPNode_ZPP_Vec2.zpp_pool;
		ZNPNode_ZPP_Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_Vec2.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_Vec2.zpp_pool;
	ZNPNode_ZPP_Vec2.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_Vec2.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_Vec2.zpp_pool;
	ZNPNode_ZPP_Vec2.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_Vec2.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_Vec2.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_Vec2.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Vec2.zpp_pool;
			ZNPNode_ZPP_Vec2.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_Vec2.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_Vec2.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Vec2.zpp_pool;
			ZNPNode_ZPP_Vec2.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_Vec2.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Vec2.zpp_pool;
			ZNPNode_ZPP_Vec2.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_Vec2.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_Vec2.zpp_pool;
	ZNPNode_ZPP_Vec2.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_Vec2.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_Vec2.zpp_pool;
	ZNPNode_ZPP_Vec2.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_Vec2.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_Vec2.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Vec2.zpp_pool;
		ZNPNode_ZPP_Vec2.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_Vec2.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Vec2.zpp_pool;
		ZNPNode_ZPP_Vec2.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_Vec2.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_Vec2.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_Vec2.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_Vec2.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_Vec2.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_Vec2.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_Vec2.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_Vec2.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_Vec2.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_Vec2.prototype.__class__ = ZNPList_ZPP_Vec2;
var ZPP_Collide = zpp_nape.geom.ZPP_Collide = function() { };
ZPP_Collide.__name__ = ["zpp_nape","geom","ZPP_Collide"];
ZPP_Collide.circleContains = function(c,p) {
	var dx = 0.0;
	var dy = 0.0;
	dx = p.x - c.worldCOMx;
	dy = p.y - c.worldCOMy;
	return dx * dx + dy * dy < c.radius * c.radius;
};
ZPP_Collide.polyContains = function(s,p) {
	var retvar;
	retvar = true;
	var cx_ite = s.edges.head;
	while(cx_ite != null) {
		var a = cx_ite.elt;
		if(a.gnormx * p.x + a.gnormy * p.y <= a.gprojection) {
			cx_ite = cx_ite.next;
			continue;
		} else {
			retvar = false;
			break;
		}
	}
	return retvar;
};
ZPP_Collide.shapeContains = function(s,p) {
	if(s.type == 0) {
		return ZPP_Collide.circleContains(s.circle,p);
	} else {
		return ZPP_Collide.polyContains(s.polygon,p);
	}
};
ZPP_Collide.bodyContains = function(b,p) {
	var retvar;
	retvar = false;
	var cx_ite = b.shapes.head;
	while(cx_ite != null) {
		if(ZPP_Collide.shapeContains(cx_ite.elt,p)) {
			retvar = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return retvar;
};
ZPP_Collide.containTest = function(s1,s2) {
	var _this = s1.aabb;
	var x = s2.aabb;
	if(x.minx >= _this.minx && x.miny >= _this.miny && x.maxx <= _this.maxx && x.maxy <= _this.maxy) {
		if(s1.type == 0) {
			if(s2.type == 0) {
				var minDist = s1.circle.radius + -s2.circle.radius;
				var px = 0.0;
				var py = 0.0;
				px = s2.circle.worldCOMx - s1.circle.worldCOMx;
				py = s2.circle.worldCOMy - s1.circle.worldCOMy;
				return px * px + py * py <= minDist * minDist;
			} else {
				var retvar;
				retvar = true;
				var cx_ite = s2.polygon.gverts.next;
				while(cx_ite != null) {
					var p = cx_ite;
					var minDist1 = s1.circle.radius;
					var px1 = 0.0;
					var py1 = 0.0;
					px1 = p.x - s1.circle.worldCOMx;
					py1 = p.y - s1.circle.worldCOMy;
					if(px1 * px1 + py1 * py1 <= minDist1 * minDist1) {
						cx_ite = cx_ite.next;
						continue;
					} else {
						retvar = false;
						break;
					}
				}
				return retvar;
			}
		} else if(s2.type == 0) {
			var retvar1;
			retvar1 = true;
			var cx_ite1 = s1.polygon.edges.head;
			while(cx_ite1 != null) {
				var a = cx_ite1.elt;
				if(a.gnormx * s2.circle.worldCOMx + a.gnormy * s2.circle.worldCOMy + s2.circle.radius <= a.gprojection) {
					cx_ite1 = cx_ite1.next;
					continue;
				} else {
					retvar1 = false;
					break;
				}
			}
			return retvar1;
		} else {
			var retvar2;
			retvar2 = true;
			var cx_ite2 = s1.polygon.edges.head;
			while(cx_ite2 != null) {
				var a1 = cx_ite2.elt;
				var max = -1e+100;
				var cx_ite3 = s2.polygon.gverts.next;
				while(cx_ite3 != null) {
					var v = cx_ite3;
					var k = a1.gnormx * v.x + a1.gnormy * v.y;
					if(k > max) {
						max = k;
					}
					cx_ite3 = cx_ite3.next;
				}
				if(max <= a1.gprojection) {
					cx_ite2 = cx_ite2.next;
					continue;
				} else {
					retvar2 = false;
					break;
				}
			}
			return retvar2;
		}
	} else {
		return false;
	}
};
ZPP_Collide.contactCollide = function(s1,s2,arb,rev) {
	if(s2.type == 1) {
		if(s1.type == 1) {
			var cont = true;
			var max = -1e+100;
			var maxi = -1;
			var axis1 = null;
			var axis2 = null;
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) {
						min = k;
					}
					if(min - ax.gprojection <= max) {
						break;
					}
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min >= 0) {
					cont = false;
					break;
				}
				if(min > max) {
					max = min;
					axis1 = ax;
					maxi = 1;
				}
				cx_ite = cx_ite.next;
			}
			if(cont) {
				var cx_ite2 = s2.polygon.edges.head;
				while(cx_ite2 != null) {
					var ax1 = cx_ite2.elt;
					var min1 = 1e100;
					var cx_ite3 = s1.polygon.gverts.next;
					while(cx_ite3 != null) {
						var v1 = cx_ite3;
						var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
						if(k1 < min1) {
							min1 = k1;
						}
						if(min1 - ax1.gprojection <= max) {
							break;
						}
						cx_ite3 = cx_ite3.next;
					}
					min1 -= ax1.gprojection;
					if(min1 >= 0) {
						cont = false;
						break;
					}
					if(min1 > max) {
						max = min1;
						axis2 = ax1;
						maxi = 2;
					}
					cx_ite2 = cx_ite2.next;
				}
				if(!cont) {
					return false;
				} else {
					var q2;
					var ax2;
					var scale;
					if(maxi == 1) {
						q2 = s2.polygon;
						ax2 = axis1;
						scale = 1.0;
					} else {
						q2 = s1.polygon;
						ax2 = axis2;
						scale = -1.0;
					}
					var ay = null;
					var min2 = 1e100;
					var cx_ite4 = q2.edges.head;
					while(cx_ite4 != null) {
						var axis = cx_ite4.elt;
						var k2 = ax2.gnormx * axis.gnormx + ax2.gnormy * axis.gnormy;
						if(k2 < min2) {
							min2 = k2;
							ay = axis;
						}
						cx_ite4 = cx_ite4.next;
					}
					var c0x = 0.0;
					var c0y = 0.0;
					c0x = ay.gp0.x;
					c0y = ay.gp0.y;
					var c1x = 0.0;
					var c1y = 0.0;
					c1x = ay.gp1.x;
					c1y = ay.gp1.y;
					var dvx = 0.0;
					var dvy = 0.0;
					dvx = c1x - c0x;
					dvy = c1y - c0y;
					var d0 = ax2.gnormy * c0x - ax2.gnormx * c0y;
					var d1 = ax2.gnormy * c1x - ax2.gnormx * c1y;
					var den = 1 / (d1 - d0);
					var t = (-ax2.tp1 - d0) * den;
					if(t > Config.epsilon) {
						c0x += dvx * t;
						c0y += dvy * t;
					}
					var t1 = (-ax2.tp0 - d1) * den;
					if(t1 < -Config.epsilon) {
						c1x += dvx * t1;
						c1y += dvy * t1;
					}
					var nx = 0.0;
					var ny = 0.0;
					var t2 = scale;
					nx = ax2.gnormx * t2;
					ny = ax2.gnormy * t2;
					arb.lnormx = ax2.lnormx;
					arb.lnormy = ax2.lnormy;
					arb.lproj = ax2.lprojection;
					arb.radius = 0;
					arb.rev = rev != (scale == -1);
					arb.ptype = arb.rev?1:0;
					var c0d = c0x * ax2.gnormx + c0y * ax2.gnormy - ax2.gprojection;
					var c1d = c1x * ax2.gnormx + c1y * ax2.gnormy - ax2.gprojection;
					if(c0d > 0 && c1d > 0) {
						return false;
					} else {
						if(rev) {
							nx = -nx;
							ny = -ny;
						}
						var px = c0x - ax2.gnormx * c0d * 0.5;
						var py = c0y - ax2.gnormy * c0d * 0.5;
						var hash = arb.rev?1:0;
						var c = null;
						var cx_ite5 = arb.contacts.next;
						while(cx_ite5 != null) {
							var cur = cx_ite5;
							if(hash == cur.hash) {
								c = cur;
								break;
							}
							cx_ite5 = cx_ite5.next;
						}
						if(c == null) {
							if(ZPP_Contact.zpp_pool == null) {
								c = new ZPP_Contact();
							} else {
								c = ZPP_Contact.zpp_pool;
								ZPP_Contact.zpp_pool = c.next;
								c.next = null;
							}
							var ci = c.inner;
							ci.jnAcc = ci.jtAcc = 0;
							c.hash = hash;
							c.fresh = true;
							c.arbiter = arb;
							arb.jrAcc = 0;
							var _this = arb.contacts;
							c._inuse = true;
							var temp = c;
							temp.next = _this.next;
							_this.next = temp;
							_this.modified = true;
							_this.length++;
							arb.innards.add(ci);
						} else {
							c.fresh = false;
						}
						c.px = px;
						c.py = py;
						arb.nx = nx;
						arb.ny = ny;
						c.dist = c0d;
						c.stamp = arb.stamp;
						c.posOnly = c0d > 0;
						var con = c;
						c0x -= q2.body.posx;
						c0y -= q2.body.posy;
						con.inner.lr1x = c0x * q2.body.axisy + c0y * q2.body.axisx;
						con.inner.lr1y = c0y * q2.body.axisy - c0x * q2.body.axisx;
						var px1 = c1x - ax2.gnormx * c1d * 0.5;
						var py1 = c1y - ax2.gnormy * c1d * 0.5;
						var hash1 = arb.rev?0:1;
						var c1 = null;
						var cx_ite6 = arb.contacts.next;
						while(cx_ite6 != null) {
							var cur1 = cx_ite6;
							if(hash1 == cur1.hash) {
								c1 = cur1;
								break;
							}
							cx_ite6 = cx_ite6.next;
						}
						if(c1 == null) {
							if(ZPP_Contact.zpp_pool == null) {
								c1 = new ZPP_Contact();
							} else {
								c1 = ZPP_Contact.zpp_pool;
								ZPP_Contact.zpp_pool = c1.next;
								c1.next = null;
							}
							var ci1 = c1.inner;
							ci1.jnAcc = ci1.jtAcc = 0;
							c1.hash = hash1;
							c1.fresh = true;
							c1.arbiter = arb;
							arb.jrAcc = 0;
							var _this1 = arb.contacts;
							c1._inuse = true;
							var temp1 = c1;
							temp1.next = _this1.next;
							_this1.next = temp1;
							_this1.modified = true;
							_this1.length++;
							arb.innards.add(ci1);
						} else {
							c1.fresh = false;
						}
						c1.px = px1;
						c1.py = py1;
						arb.nx = nx;
						arb.ny = ny;
						c1.dist = c1d;
						c1.stamp = arb.stamp;
						c1.posOnly = c1d > 0;
						con = c1;
						c1x -= q2.body.posx;
						c1y -= q2.body.posy;
						con.inner.lr1x = c1x * q2.body.axisy + c1y * q2.body.axisx;
						con.inner.lr1y = c1y * q2.body.axisy - c1x * q2.body.axisx;
						if(maxi == 1) {
							arb.__ref_edge1 = ax2;
							arb.__ref_edge2 = ay;
						} else {
							arb.__ref_edge2 = ax2;
							arb.__ref_edge1 = ay;
						}
						return true;
					}
				}
			} else {
				return false;
			}
		} else {
			var max1 = -1e+100;
			var cont1 = true;
			var a0 = null;
			var vi = null;
			var vite = s2.polygon.gverts.next;
			var cx_ite7 = s2.polygon.edges.head;
			while(cx_ite7 != null) {
				var a = cx_ite7.elt;
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
				if(dist > 0) {
					cont1 = false;
					break;
				}
				if(dist > max1) {
					max1 = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				cx_ite7 = cx_ite7.next;
			}
			if(cont1) {
				var v0 = vi;
				var v11 = vi.next == null?s2.polygon.gverts.next:vi.next;
				var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var minDist = s1.circle.radius;
					var px2 = 0.0;
					var py2 = 0.0;
					px2 = v0.x - s1.circle.worldCOMx;
					py2 = v0.y - s1.circle.worldCOMy;
					var distSqr = px2 * px2 + py2 * py2;
					var co;
					if(distSqr > minDist * minDist) {
						co = null;
					} else if(distSqr < Config.epsilon * Config.epsilon) {
						var px3 = s1.circle.worldCOMx;
						var py3 = s1.circle.worldCOMy;
						var c2 = null;
						var cx_ite8 = arb.contacts.next;
						while(cx_ite8 != null) {
							var cur2 = cx_ite8;
							if(0 == cur2.hash) {
								c2 = cur2;
								break;
							}
							cx_ite8 = cx_ite8.next;
						}
						if(c2 == null) {
							if(ZPP_Contact.zpp_pool == null) {
								c2 = new ZPP_Contact();
							} else {
								c2 = ZPP_Contact.zpp_pool;
								ZPP_Contact.zpp_pool = c2.next;
								c2.next = null;
							}
							var ci2 = c2.inner;
							ci2.jnAcc = ci2.jtAcc = 0;
							c2.hash = 0;
							c2.fresh = true;
							c2.arbiter = arb;
							arb.jrAcc = 0;
							var _this2 = arb.contacts;
							c2._inuse = true;
							var temp2 = c2;
							temp2.next = _this2.next;
							_this2.next = temp2;
							_this2.modified = true;
							_this2.length++;
							arb.innards.add(ci2);
						} else {
							c2.fresh = false;
						}
						c2.px = px3;
						c2.py = py3;
						arb.nx = 1;
						arb.ny = 0;
						c2.dist = -minDist;
						c2.stamp = arb.stamp;
						c2.posOnly = false;
						co = c2;
					} else {
						var invDist = 1.0 / Math.sqrt(distSqr);
						var dist1 = invDist < Config.epsilon?1e100:1.0 / invDist;
						var df = 0.5 + (s1.circle.radius - 0.5 * minDist) * invDist;
						if(rev) {
							var px4 = s1.circle.worldCOMx + px2 * df;
							var py4 = s1.circle.worldCOMy + py2 * df;
							var c3 = null;
							var cx_ite9 = arb.contacts.next;
							while(cx_ite9 != null) {
								var cur3 = cx_ite9;
								if(0 == cur3.hash) {
									c3 = cur3;
									break;
								}
								cx_ite9 = cx_ite9.next;
							}
							if(c3 == null) {
								if(ZPP_Contact.zpp_pool == null) {
									c3 = new ZPP_Contact();
								} else {
									c3 = ZPP_Contact.zpp_pool;
									ZPP_Contact.zpp_pool = c3.next;
									c3.next = null;
								}
								var ci3 = c3.inner;
								ci3.jnAcc = ci3.jtAcc = 0;
								c3.hash = 0;
								c3.fresh = true;
								c3.arbiter = arb;
								arb.jrAcc = 0;
								var _this3 = arb.contacts;
								c3._inuse = true;
								var temp3 = c3;
								temp3.next = _this3.next;
								_this3.next = temp3;
								_this3.modified = true;
								_this3.length++;
								arb.innards.add(ci3);
							} else {
								c3.fresh = false;
							}
							c3.px = px4;
							c3.py = py4;
							arb.nx = -px2 * invDist;
							arb.ny = -py2 * invDist;
							c3.dist = dist1 - minDist;
							c3.stamp = arb.stamp;
							c3.posOnly = false;
							co = c3;
						} else {
							var px5 = s1.circle.worldCOMx + px2 * df;
							var py5 = s1.circle.worldCOMy + py2 * df;
							var c4 = null;
							var cx_ite10 = arb.contacts.next;
							while(cx_ite10 != null) {
								var cur4 = cx_ite10;
								if(0 == cur4.hash) {
									c4 = cur4;
									break;
								}
								cx_ite10 = cx_ite10.next;
							}
							if(c4 == null) {
								if(ZPP_Contact.zpp_pool == null) {
									c4 = new ZPP_Contact();
								} else {
									c4 = ZPP_Contact.zpp_pool;
									ZPP_Contact.zpp_pool = c4.next;
									c4.next = null;
								}
								var ci4 = c4.inner;
								ci4.jnAcc = ci4.jtAcc = 0;
								c4.hash = 0;
								c4.fresh = true;
								c4.arbiter = arb;
								arb.jrAcc = 0;
								var _this4 = arb.contacts;
								c4._inuse = true;
								var temp4 = c4;
								temp4.next = _this4.next;
								_this4.next = temp4;
								_this4.modified = true;
								_this4.length++;
								arb.innards.add(ci4);
							} else {
								c4.fresh = false;
							}
							c4.px = px5;
							c4.py = py5;
							arb.nx = px2 * invDist;
							arb.ny = py2 * invDist;
							c4.dist = dist1 - minDist;
							c4.stamp = arb.stamp;
							c4.posOnly = false;
							co = c4;
						}
					}
					if(co != null) {
						var con1 = co.inner;
						arb.ptype = 2;
						var vx = 0.0;
						var vy = 0.0;
						vx = v0.x - s2.polygon.body.posx;
						vy = v0.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = -1;
						if(rev) {
							con1.lr1x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con1.lr1y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con1.lr2x = s1.circle.localCOMx;
							con1.lr2y = s1.circle.localCOMy;
						} else {
							con1.lr2x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con1.lr2y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con1.lr1x = s1.circle.localCOMx;
							con1.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co != null;
				} else if(dt >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
					var minDist1 = s1.circle.radius;
					var px6 = 0.0;
					var py6 = 0.0;
					px6 = v11.x - s1.circle.worldCOMx;
					py6 = v11.y - s1.circle.worldCOMy;
					var distSqr1 = px6 * px6 + py6 * py6;
					var co1;
					if(distSqr1 > minDist1 * minDist1) {
						co1 = null;
					} else if(distSqr1 < Config.epsilon * Config.epsilon) {
						var px7 = s1.circle.worldCOMx;
						var py7 = s1.circle.worldCOMy;
						var c5 = null;
						var cx_ite11 = arb.contacts.next;
						while(cx_ite11 != null) {
							var cur5 = cx_ite11;
							if(0 == cur5.hash) {
								c5 = cur5;
								break;
							}
							cx_ite11 = cx_ite11.next;
						}
						if(c5 == null) {
							if(ZPP_Contact.zpp_pool == null) {
								c5 = new ZPP_Contact();
							} else {
								c5 = ZPP_Contact.zpp_pool;
								ZPP_Contact.zpp_pool = c5.next;
								c5.next = null;
							}
							var ci5 = c5.inner;
							ci5.jnAcc = ci5.jtAcc = 0;
							c5.hash = 0;
							c5.fresh = true;
							c5.arbiter = arb;
							arb.jrAcc = 0;
							var _this5 = arb.contacts;
							c5._inuse = true;
							var temp5 = c5;
							temp5.next = _this5.next;
							_this5.next = temp5;
							_this5.modified = true;
							_this5.length++;
							arb.innards.add(ci5);
						} else {
							c5.fresh = false;
						}
						c5.px = px7;
						c5.py = py7;
						arb.nx = 1;
						arb.ny = 0;
						c5.dist = -minDist1;
						c5.stamp = arb.stamp;
						c5.posOnly = false;
						co1 = c5;
					} else {
						var invDist1 = 1.0 / Math.sqrt(distSqr1);
						var dist2 = invDist1 < Config.epsilon?1e100:1.0 / invDist1;
						var df1 = 0.5 + (s1.circle.radius - 0.5 * minDist1) * invDist1;
						if(rev) {
							var px8 = s1.circle.worldCOMx + px6 * df1;
							var py8 = s1.circle.worldCOMy + py6 * df1;
							var c6 = null;
							var cx_ite12 = arb.contacts.next;
							while(cx_ite12 != null) {
								var cur6 = cx_ite12;
								if(0 == cur6.hash) {
									c6 = cur6;
									break;
								}
								cx_ite12 = cx_ite12.next;
							}
							if(c6 == null) {
								if(ZPP_Contact.zpp_pool == null) {
									c6 = new ZPP_Contact();
								} else {
									c6 = ZPP_Contact.zpp_pool;
									ZPP_Contact.zpp_pool = c6.next;
									c6.next = null;
								}
								var ci6 = c6.inner;
								ci6.jnAcc = ci6.jtAcc = 0;
								c6.hash = 0;
								c6.fresh = true;
								c6.arbiter = arb;
								arb.jrAcc = 0;
								var _this6 = arb.contacts;
								c6._inuse = true;
								var temp6 = c6;
								temp6.next = _this6.next;
								_this6.next = temp6;
								_this6.modified = true;
								_this6.length++;
								arb.innards.add(ci6);
							} else {
								c6.fresh = false;
							}
							c6.px = px8;
							c6.py = py8;
							arb.nx = -px6 * invDist1;
							arb.ny = -py6 * invDist1;
							c6.dist = dist2 - minDist1;
							c6.stamp = arb.stamp;
							c6.posOnly = false;
							co1 = c6;
						} else {
							var px9 = s1.circle.worldCOMx + px6 * df1;
							var py9 = s1.circle.worldCOMy + py6 * df1;
							var c7 = null;
							var cx_ite13 = arb.contacts.next;
							while(cx_ite13 != null) {
								var cur7 = cx_ite13;
								if(0 == cur7.hash) {
									c7 = cur7;
									break;
								}
								cx_ite13 = cx_ite13.next;
							}
							if(c7 == null) {
								if(ZPP_Contact.zpp_pool == null) {
									c7 = new ZPP_Contact();
								} else {
									c7 = ZPP_Contact.zpp_pool;
									ZPP_Contact.zpp_pool = c7.next;
									c7.next = null;
								}
								var ci7 = c7.inner;
								ci7.jnAcc = ci7.jtAcc = 0;
								c7.hash = 0;
								c7.fresh = true;
								c7.arbiter = arb;
								arb.jrAcc = 0;
								var _this7 = arb.contacts;
								c7._inuse = true;
								var temp7 = c7;
								temp7.next = _this7.next;
								_this7.next = temp7;
								_this7.modified = true;
								_this7.length++;
								arb.innards.add(ci7);
							} else {
								c7.fresh = false;
							}
							c7.px = px9;
							c7.py = py9;
							arb.nx = px6 * invDist1;
							arb.ny = py6 * invDist1;
							c7.dist = dist2 - minDist1;
							c7.stamp = arb.stamp;
							c7.posOnly = false;
							co1 = c7;
						}
					}
					if(co1 != null) {
						var con2 = co1.inner;
						arb.ptype = 2;
						var vx1 = 0.0;
						var vy1 = 0.0;
						vx1 = v11.x - s2.polygon.body.posx;
						vy1 = v11.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = 1;
						if(rev) {
							con2.lr1x = vx1 * s2.polygon.body.axisy + vy1 * s2.polygon.body.axisx;
							con2.lr1y = vy1 * s2.polygon.body.axisy - vx1 * s2.polygon.body.axisx;
							con2.lr2x = s1.circle.localCOMx;
							con2.lr2y = s1.circle.localCOMy;
						} else {
							con2.lr2x = vx1 * s2.polygon.body.axisy + vy1 * s2.polygon.body.axisx;
							con2.lr2y = vy1 * s2.polygon.body.axisy - vx1 * s2.polygon.body.axisx;
							con2.lr1x = s1.circle.localCOMx;
							con2.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co1 != null;
				} else {
					var nx1 = 0.0;
					var ny1 = 0.0;
					var t3 = s1.circle.radius + max1 * 0.5;
					nx1 = a0.gnormx * t3;
					ny1 = a0.gnormy * t3;
					var px10 = 0.0;
					var py10 = 0.0;
					px10 = s1.circle.worldCOMx - nx1;
					py10 = s1.circle.worldCOMy - ny1;
					var con3;
					if(rev) {
						var nx2 = a0.gnormx;
						var ny2 = a0.gnormy;
						var c8 = null;
						var cx_ite14 = arb.contacts.next;
						while(cx_ite14 != null) {
							var cur8 = cx_ite14;
							if(0 == cur8.hash) {
								c8 = cur8;
								break;
							}
							cx_ite14 = cx_ite14.next;
						}
						if(c8 == null) {
							if(ZPP_Contact.zpp_pool == null) {
								c8 = new ZPP_Contact();
							} else {
								c8 = ZPP_Contact.zpp_pool;
								ZPP_Contact.zpp_pool = c8.next;
								c8.next = null;
							}
							var ci8 = c8.inner;
							ci8.jnAcc = ci8.jtAcc = 0;
							c8.hash = 0;
							c8.fresh = true;
							c8.arbiter = arb;
							arb.jrAcc = 0;
							var _this8 = arb.contacts;
							c8._inuse = true;
							var temp8 = c8;
							temp8.next = _this8.next;
							_this8.next = temp8;
							_this8.modified = true;
							_this8.length++;
							arb.innards.add(ci8);
						} else {
							c8.fresh = false;
						}
						c8.px = px10;
						c8.py = py10;
						arb.nx = nx2;
						arb.ny = ny2;
						c8.dist = max1;
						c8.stamp = arb.stamp;
						c8.posOnly = false;
						con3 = c8;
					} else {
						var nx3 = -a0.gnormx;
						var ny3 = -a0.gnormy;
						var c9 = null;
						var cx_ite15 = arb.contacts.next;
						while(cx_ite15 != null) {
							var cur9 = cx_ite15;
							if(0 == cur9.hash) {
								c9 = cur9;
								break;
							}
							cx_ite15 = cx_ite15.next;
						}
						if(c9 == null) {
							if(ZPP_Contact.zpp_pool == null) {
								c9 = new ZPP_Contact();
							} else {
								c9 = ZPP_Contact.zpp_pool;
								ZPP_Contact.zpp_pool = c9.next;
								c9.next = null;
							}
							var ci9 = c9.inner;
							ci9.jnAcc = ci9.jtAcc = 0;
							c9.hash = 0;
							c9.fresh = true;
							c9.arbiter = arb;
							arb.jrAcc = 0;
							var _this9 = arb.contacts;
							c9._inuse = true;
							var temp9 = c9;
							temp9.next = _this9.next;
							_this9.next = temp9;
							_this9.modified = true;
							_this9.length++;
							arb.innards.add(ci9);
						} else {
							c9.fresh = false;
						}
						c9.px = px10;
						c9.py = py10;
						arb.nx = nx3;
						arb.ny = ny3;
						c9.dist = max1;
						c9.stamp = arb.stamp;
						c9.posOnly = false;
						con3 = c9;
					}
					arb.ptype = rev?0:1;
					arb.lnormx = a0.lnormx;
					arb.lnormy = a0.lnormy;
					arb.rev = !rev;
					arb.lproj = a0.lprojection;
					arb.radius = s1.circle.radius;
					con3.inner.lr1x = s1.circle.localCOMx;
					con3.inner.lr1y = s1.circle.localCOMy;
					arb.__ref_edge1 = a0;
					arb.__ref_vertex = 0;
					return true;
				}
			} else {
				return false;
			}
		}
	} else {
		var minDist2 = s1.circle.radius + s2.circle.radius;
		var px11 = 0.0;
		var py11 = 0.0;
		px11 = s2.circle.worldCOMx - s1.circle.worldCOMx;
		py11 = s2.circle.worldCOMy - s1.circle.worldCOMy;
		var distSqr2 = px11 * px11 + py11 * py11;
		var co2;
		if(distSqr2 > minDist2 * minDist2) {
			co2 = null;
		} else if(distSqr2 < Config.epsilon * Config.epsilon) {
			var px12 = s1.circle.worldCOMx;
			var py12 = s1.circle.worldCOMy;
			var c10 = null;
			var cx_ite16 = arb.contacts.next;
			while(cx_ite16 != null) {
				var cur10 = cx_ite16;
				if(0 == cur10.hash) {
					c10 = cur10;
					break;
				}
				cx_ite16 = cx_ite16.next;
			}
			if(c10 == null) {
				if(ZPP_Contact.zpp_pool == null) {
					c10 = new ZPP_Contact();
				} else {
					c10 = ZPP_Contact.zpp_pool;
					ZPP_Contact.zpp_pool = c10.next;
					c10.next = null;
				}
				var ci10 = c10.inner;
				ci10.jnAcc = ci10.jtAcc = 0;
				c10.hash = 0;
				c10.fresh = true;
				c10.arbiter = arb;
				arb.jrAcc = 0;
				var _this10 = arb.contacts;
				c10._inuse = true;
				var temp10 = c10;
				temp10.next = _this10.next;
				_this10.next = temp10;
				_this10.modified = true;
				_this10.length++;
				arb.innards.add(ci10);
			} else {
				c10.fresh = false;
			}
			c10.px = px12;
			c10.py = py12;
			arb.nx = 1;
			arb.ny = 0;
			c10.dist = -minDist2;
			c10.stamp = arb.stamp;
			c10.posOnly = false;
			co2 = c10;
		} else {
			var invDist2 = 1.0 / Math.sqrt(distSqr2);
			var dist3 = invDist2 < Config.epsilon?1e100:1.0 / invDist2;
			var df2 = 0.5 + (s1.circle.radius - 0.5 * minDist2) * invDist2;
			if(rev) {
				var px13 = s1.circle.worldCOMx + px11 * df2;
				var py13 = s1.circle.worldCOMy + py11 * df2;
				var c11 = null;
				var cx_ite17 = arb.contacts.next;
				while(cx_ite17 != null) {
					var cur11 = cx_ite17;
					if(0 == cur11.hash) {
						c11 = cur11;
						break;
					}
					cx_ite17 = cx_ite17.next;
				}
				if(c11 == null) {
					if(ZPP_Contact.zpp_pool == null) {
						c11 = new ZPP_Contact();
					} else {
						c11 = ZPP_Contact.zpp_pool;
						ZPP_Contact.zpp_pool = c11.next;
						c11.next = null;
					}
					var ci11 = c11.inner;
					ci11.jnAcc = ci11.jtAcc = 0;
					c11.hash = 0;
					c11.fresh = true;
					c11.arbiter = arb;
					arb.jrAcc = 0;
					var _this11 = arb.contacts;
					c11._inuse = true;
					var temp11 = c11;
					temp11.next = _this11.next;
					_this11.next = temp11;
					_this11.modified = true;
					_this11.length++;
					arb.innards.add(ci11);
				} else {
					c11.fresh = false;
				}
				c11.px = px13;
				c11.py = py13;
				arb.nx = -px11 * invDist2;
				arb.ny = -py11 * invDist2;
				c11.dist = dist3 - minDist2;
				c11.stamp = arb.stamp;
				c11.posOnly = false;
				co2 = c11;
			} else {
				var px14 = s1.circle.worldCOMx + px11 * df2;
				var py14 = s1.circle.worldCOMy + py11 * df2;
				var c12 = null;
				var cx_ite18 = arb.contacts.next;
				while(cx_ite18 != null) {
					var cur12 = cx_ite18;
					if(0 == cur12.hash) {
						c12 = cur12;
						break;
					}
					cx_ite18 = cx_ite18.next;
				}
				if(c12 == null) {
					if(ZPP_Contact.zpp_pool == null) {
						c12 = new ZPP_Contact();
					} else {
						c12 = ZPP_Contact.zpp_pool;
						ZPP_Contact.zpp_pool = c12.next;
						c12.next = null;
					}
					var ci12 = c12.inner;
					ci12.jnAcc = ci12.jtAcc = 0;
					c12.hash = 0;
					c12.fresh = true;
					c12.arbiter = arb;
					arb.jrAcc = 0;
					var _this12 = arb.contacts;
					c12._inuse = true;
					var temp12 = c12;
					temp12.next = _this12.next;
					_this12.next = temp12;
					_this12.modified = true;
					_this12.length++;
					arb.innards.add(ci12);
				} else {
					c12.fresh = false;
				}
				c12.px = px14;
				c12.py = py14;
				arb.nx = px11 * invDist2;
				arb.ny = py11 * invDist2;
				c12.dist = dist3 - minDist2;
				c12.stamp = arb.stamp;
				c12.posOnly = false;
				co2 = c12;
			}
		}
		if(co2 != null) {
			var con4 = co2.inner;
			if(rev) {
				con4.lr1x = s2.circle.localCOMx;
				con4.lr1y = s2.circle.localCOMy;
				con4.lr2x = s1.circle.localCOMx;
				con4.lr2y = s1.circle.localCOMy;
			} else {
				con4.lr1x = s1.circle.localCOMx;
				con4.lr1y = s1.circle.localCOMy;
				con4.lr2x = s2.circle.localCOMx;
				con4.lr2y = s2.circle.localCOMy;
			}
			arb.radius = s1.circle.radius + s2.circle.radius;
			arb.ptype = 2;
			return true;
		} else {
			return false;
		}
	}
};
ZPP_Collide.testCollide_safe = function(s1,s2) {
	if(s2.type == 0) {
		var t = s1;
		s1 = s2;
		s2 = t;
	}
	return ZPP_Collide.testCollide(s1,s2);
};
ZPP_Collide.testCollide = function(s1,s2) {
	if(s2.type == 1) {
		if(s1.type == 1) {
			var cont = true;
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) {
						min = k;
					}
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min > 0) {
					cont = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
			if(cont) {
				var cx_ite2 = s2.polygon.edges.head;
				while(cx_ite2 != null) {
					var ax1 = cx_ite2.elt;
					var min1 = 1e100;
					var cx_ite3 = s1.polygon.gverts.next;
					while(cx_ite3 != null) {
						var v1 = cx_ite3;
						var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
						if(k1 < min1) {
							min1 = k1;
						}
						cx_ite3 = cx_ite3.next;
					}
					min1 -= ax1.gprojection;
					if(min1 > 0) {
						cont = false;
						break;
					}
					cx_ite2 = cx_ite2.next;
				}
				return cont;
			} else {
				return false;
			}
		} else {
			var a0 = null;
			var vi = null;
			var cont1 = true;
			var max = -1e+100;
			var vite = s2.polygon.gverts.next;
			var cx_ite4 = s2.polygon.edges.head;
			while(cx_ite4 != null) {
				var a = cx_ite4.elt;
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
				if(dist > 0) {
					cont1 = false;
					break;
				}
				if(dist > max) {
					max = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				cx_ite4 = cx_ite4.next;
			}
			if(cont1) {
				var v0 = vi;
				var v11 = vi.next == null?s2.polygon.gverts.next:vi.next;
				var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var minDist = s1.circle.radius;
					var px = 0.0;
					var py = 0.0;
					px = v0.x - s1.circle.worldCOMx;
					py = v0.y - s1.circle.worldCOMy;
					return px * px + py * py <= minDist * minDist;
				} else if(dt >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
					var minDist1 = s1.circle.radius;
					var px1 = 0.0;
					var py1 = 0.0;
					px1 = v11.x - s1.circle.worldCOMx;
					py1 = v11.y - s1.circle.worldCOMy;
					return px1 * px1 + py1 * py1 <= minDist1 * minDist1;
				} else {
					return true;
				}
			} else {
				return false;
			}
		}
	} else {
		var minDist2 = s1.circle.radius + s2.circle.radius;
		var px2 = 0.0;
		var py2 = 0.0;
		px2 = s2.circle.worldCOMx - s1.circle.worldCOMx;
		py2 = s2.circle.worldCOMy - s1.circle.worldCOMy;
		return px2 * px2 + py2 * py2 <= minDist2 * minDist2;
	}
};
ZPP_Collide.flowCollide = function(s1,s2,arb) {
	if(s2.type == 1) {
		if(s1.type == 1) {
			var out1 = [];
			var out2 = [];
			var cont = true;
			var total = true;
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var ind = 0;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) {
						min = k;
					}
					if(k >= ax.gprojection + Config.epsilon) {
						out2[ind] = true;
						total = false;
					}
					++ind;
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min > 0) {
					cont = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
			if(total) {
				var _this = s2.polygon;
				if(_this.zip_worldCOM) {
					if(_this.body != null) {
						_this.zip_worldCOM = false;
						if(_this.zip_localCOM) {
							_this.zip_localCOM = false;
							if(_this.type == 1) {
								var _this1 = _this.polygon;
								if(_this1.lverts.next == null) {
									throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
								}
								if(_this1.lverts.next.next == null) {
									_this1.localCOMx = _this1.lverts.next.x;
									_this1.localCOMy = _this1.lverts.next.y;
								} else if(_this1.lverts.next.next.next == null) {
									_this1.localCOMx = _this1.lverts.next.x;
									_this1.localCOMy = _this1.lverts.next.y;
									_this1.localCOMx += _this1.lverts.next.next.x;
									_this1.localCOMy += _this1.lverts.next.next.y;
									_this1.localCOMx *= 0.5;
									_this1.localCOMy *= 0.5;
								} else {
									_this1.localCOMx = 0;
									_this1.localCOMy = 0;
									var area = 0.0;
									var cx_ite2 = _this1.lverts.next;
									var u = cx_ite2;
									cx_ite2 = cx_ite2.next;
									var v1 = cx_ite2;
									cx_ite2 = cx_ite2.next;
									while(cx_ite2 != null) {
										var w = cx_ite2;
										area += v1.x * (w.y - u.y);
										var cf = w.y * v1.x - w.x * v1.y;
										_this1.localCOMx += (v1.x + w.x) * cf;
										_this1.localCOMy += (v1.y + w.y) * cf;
										u = v1;
										v1 = w;
										cx_ite2 = cx_ite2.next;
									}
									cx_ite2 = _this1.lverts.next;
									var w1 = cx_ite2;
									area += v1.x * (w1.y - u.y);
									var cf1 = w1.y * v1.x - w1.x * v1.y;
									_this1.localCOMx += (v1.x + w1.x) * cf1;
									_this1.localCOMy += (v1.y + w1.y) * cf1;
									u = v1;
									cx_ite2 = cx_ite2.next;
									var w2 = cx_ite2;
									area += w1.x * (w2.y - u.y);
									var cf2 = w2.y * w1.x - w2.x * w1.y;
									_this1.localCOMx += (w1.x + w2.x) * cf2;
									_this1.localCOMy += (w1.y + w2.y) * cf2;
									area = 1 / (3 * area);
									var t = area;
									_this1.localCOMx *= t;
									_this1.localCOMy *= t;
								}
							}
							if(_this.wrap_localCOM != null) {
								_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
								_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
							}
						}
						var _this2 = _this.body;
						if(_this2.zip_axis) {
							_this2.zip_axis = false;
							_this2.axisx = Math.sin(_this2.rot);
							_this2.axisy = Math.cos(_this2.rot);
						}
						_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
						_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
					}
				}
				var area1 = s2.polygon.area;
				var cx = s2.polygon.worldCOMx;
				var cy = s2.polygon.worldCOMy;
				arb.overlap = area1;
				arb.centroidx = cx;
				arb.centroidy = cy;
				return true;
			} else if(cont) {
				total = true;
				var cx_ite3 = s2.polygon.edges.head;
				while(cx_ite3 != null) {
					var ax1 = cx_ite3.elt;
					var min1 = 1e100;
					var ind1 = 0;
					var cx_ite4 = s1.polygon.gverts.next;
					while(cx_ite4 != null) {
						var v2 = cx_ite4;
						var k1 = ax1.gnormx * v2.x + ax1.gnormy * v2.y;
						if(k1 < min1) {
							min1 = k1;
						}
						if(k1 >= ax1.gprojection + Config.epsilon) {
							out1[ind1] = true;
							total = false;
						}
						++ind1;
						cx_ite4 = cx_ite4.next;
					}
					min1 -= ax1.gprojection;
					if(min1 > 0) {
						cont = false;
						break;
					}
					cx_ite3 = cx_ite3.next;
				}
				if(total) {
					var _this3 = s1.polygon;
					if(_this3.zip_worldCOM) {
						if(_this3.body != null) {
							_this3.zip_worldCOM = false;
							if(_this3.zip_localCOM) {
								_this3.zip_localCOM = false;
								if(_this3.type == 1) {
									var _this4 = _this3.polygon;
									if(_this4.lverts.next == null) {
										throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
									}
									if(_this4.lverts.next.next == null) {
										_this4.localCOMx = _this4.lverts.next.x;
										_this4.localCOMy = _this4.lverts.next.y;
									} else if(_this4.lverts.next.next.next == null) {
										_this4.localCOMx = _this4.lverts.next.x;
										_this4.localCOMy = _this4.lverts.next.y;
										_this4.localCOMx += _this4.lverts.next.next.x;
										_this4.localCOMy += _this4.lverts.next.next.y;
										_this4.localCOMx *= 0.5;
										_this4.localCOMy *= 0.5;
									} else {
										_this4.localCOMx = 0;
										_this4.localCOMy = 0;
										var area2 = 0.0;
										var cx_ite5 = _this4.lverts.next;
										var u1 = cx_ite5;
										cx_ite5 = cx_ite5.next;
										var v3 = cx_ite5;
										cx_ite5 = cx_ite5.next;
										while(cx_ite5 != null) {
											var w3 = cx_ite5;
											area2 += v3.x * (w3.y - u1.y);
											var cf3 = w3.y * v3.x - w3.x * v3.y;
											_this4.localCOMx += (v3.x + w3.x) * cf3;
											_this4.localCOMy += (v3.y + w3.y) * cf3;
											u1 = v3;
											v3 = w3;
											cx_ite5 = cx_ite5.next;
										}
										cx_ite5 = _this4.lverts.next;
										var w4 = cx_ite5;
										area2 += v3.x * (w4.y - u1.y);
										var cf4 = w4.y * v3.x - w4.x * v3.y;
										_this4.localCOMx += (v3.x + w4.x) * cf4;
										_this4.localCOMy += (v3.y + w4.y) * cf4;
										u1 = v3;
										cx_ite5 = cx_ite5.next;
										var w5 = cx_ite5;
										area2 += w4.x * (w5.y - u1.y);
										var cf5 = w5.y * w4.x - w5.x * w4.y;
										_this4.localCOMx += (w4.x + w5.x) * cf5;
										_this4.localCOMy += (w4.y + w5.y) * cf5;
										area2 = 1 / (3 * area2);
										var t1 = area2;
										_this4.localCOMx *= t1;
										_this4.localCOMy *= t1;
									}
								}
								if(_this3.wrap_localCOM != null) {
									_this3.wrap_localCOM.zpp_inner.x = _this3.localCOMx;
									_this3.wrap_localCOM.zpp_inner.y = _this3.localCOMy;
								}
							}
							var _this5 = _this3.body;
							if(_this5.zip_axis) {
								_this5.zip_axis = false;
								_this5.axisx = Math.sin(_this5.rot);
								_this5.axisy = Math.cos(_this5.rot);
							}
							_this3.worldCOMx = _this3.body.posx + (_this3.body.axisy * _this3.localCOMx - _this3.body.axisx * _this3.localCOMy);
							_this3.worldCOMy = _this3.body.posy + (_this3.localCOMx * _this3.body.axisx + _this3.localCOMy * _this3.body.axisy);
						}
					}
					var area3 = s1.polygon.area;
					var cx1 = s1.polygon.worldCOMx;
					var cy1 = s1.polygon.worldCOMy;
					arb.overlap = area3;
					arb.centroidx = cx1;
					arb.centroidy = cy1;
					return true;
				} else if(cont) {
					while(ZPP_Collide.flowpoly.head != null) {
						var p = ZPP_Collide.flowpoly.pop_unsafe();
						if(!p._inuse) {
							if(p.outer != null) {
								p.outer.zpp_inner = null;
								p.outer = null;
							}
							p._isimmutable = null;
							p._validate = null;
							p._invalidate = null;
							p.next = ZPP_Vec2.zpp_pool;
							ZPP_Vec2.zpp_pool = p;
						}
					}
					var fst_vert = null;
					var poly1 = false;
					var ite1 = s1.polygon.gverts.next;
					var ind11 = 0;
					var ite2 = s2.polygon.gverts.next;
					var ind2 = 0;
					var _g1 = 0;
					var _g = s2.polygon.edgeCnt;
					while(_g1 < _g) {
						var i = _g1++;
						if(!out2[i]) {
							ind2 = i;
							break;
						} else {
							ite2 = ite2.next;
						}
					}
					if(ite2 == null) {
						ite2 = s2.polygon.gverts.next;
						poly1 = true;
						var _g11 = 0;
						var _g2 = s1.polygon.edgeCnt;
						while(_g11 < _g2) {
							var i1 = _g11++;
							if(!out1[i1]) {
								ind11 = i1;
								break;
							} else {
								ite1 = ite1.next;
							}
						}
						if(ite1 == null) {
							ite1 = s1.polygon.gverts.next;
						} else {
							ZPP_Collide.flowpoly.add(ite1);
							fst_vert = ZPP_Collide.flowpoly.head.elt;
						}
					} else {
						ZPP_Collide.flowpoly.add(ite2);
						fst_vert = ZPP_Collide.flowpoly.head.elt;
					}
					var cnt = 1;
					if(ZPP_Collide.flowpoly.head == null) {
						var cx_cont = true;
						var cx_itei = s1.polygon.gverts.next;
						var u2 = cx_itei;
						var cx_itej = cx_itei.next;
						while(cx_itej != null) {
							var v4 = cx_itej;
							var min2 = 2.0;
							var cx_itei1 = s2.polygon.gverts.next;
							var a = cx_itei1;
							var cx_itej1 = cx_itei1.next;
							while(cx_itej1 != null) {
								var b = cx_itej1;
								var t2 = 0.0;
								var _sx = 0.0;
								var _sy = 0.0;
								_sx = u2.x - a.x;
								_sy = u2.y - a.y;
								var _vx = 0.0;
								var _vy = 0.0;
								_vx = v4.x - u2.x;
								_vy = v4.y - u2.y;
								var _qx = 0.0;
								var _qy = 0.0;
								_qx = b.x - a.x;
								_qy = b.y - a.y;
								var den = _vy * _qx - _vx * _qy;
								var tmp;
								if(den * den > Config.epsilon * Config.epsilon) {
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									if(txx > Config.epsilon && txx < 1 - Config.epsilon) {
										var sxx = (_vy * _sx - _vx * _sy) * den;
										if(sxx > Config.epsilon && sxx < 1 - Config.epsilon) {
											t2 = txx;
											tmp = true;
										} else {
											tmp = false;
										}
									} else {
										tmp = false;
									}
								} else {
									tmp = false;
								}
								if(tmp) {
									if(t2 < min2) {
										min2 = t2;
										ite2 = cx_itei1;
									}
								}
								cx_itei1 = cx_itej1;
								a = b;
								cx_itej1 = cx_itej1.next;
							}
							while(true) {
								cx_itej1 = s2.polygon.gverts.next;
								var b1 = cx_itej1;
								var t3 = 0.0;
								var _sx1 = 0.0;
								var _sy1 = 0.0;
								_sx1 = u2.x - a.x;
								_sy1 = u2.y - a.y;
								var _vx1 = 0.0;
								var _vy1 = 0.0;
								_vx1 = v4.x - u2.x;
								_vy1 = v4.y - u2.y;
								var _qx1 = 0.0;
								var _qy1 = 0.0;
								_qx1 = b1.x - a.x;
								_qy1 = b1.y - a.y;
								var den1 = _vy1 * _qx1 - _vx1 * _qy1;
								var tmp1;
								if(den1 * den1 > Config.epsilon * Config.epsilon) {
									den1 = 1 / den1;
									var txx1 = (_qy1 * _sx1 - _qx1 * _sy1) * den1;
									if(txx1 > Config.epsilon && txx1 < 1 - Config.epsilon) {
										var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
										if(sxx1 > Config.epsilon && sxx1 < 1 - Config.epsilon) {
											t3 = txx1;
											tmp1 = true;
										} else {
											tmp1 = false;
										}
									} else {
										tmp1 = false;
									}
								} else {
									tmp1 = false;
								}
								if(tmp1) {
									if(t3 < min2) {
										min2 = t3;
										ite2 = cx_itei1;
									}
								}
								break;
							}
							if(min2 != 2.0) {
								var cx2 = 0.0;
								var cy2 = 0.0;
								var T = min2;
								cx2 = u2.x + (v4.x - u2.x) * T;
								cy2 = u2.y + (v4.y - u2.y) * T;
								var ret;
								if(ZPP_Vec2.zpp_pool == null) {
									ret = new ZPP_Vec2();
								} else {
									ret = ZPP_Vec2.zpp_pool;
									ZPP_Vec2.zpp_pool = ret.next;
									ret.next = null;
								}
								ret.weak = false;
								ret._immutable = false;
								ret.x = cx2;
								ret.y = cy2;
								fst_vert = ret;
								ZPP_Collide.flowpoly.add(fst_vert);
								poly1 = true;
								ite1 = cx_itei;
								cx_cont = false;
								break;
							}
							cx_itei = cx_itej;
							u2 = v4;
							cx_itej = cx_itej.next;
						}
						if(cx_cont) {
							while(true) {
								cx_itej = s1.polygon.gverts.next;
								var v5 = cx_itej;
								var min3 = 2.0;
								var cx_itei2 = s2.polygon.gverts.next;
								var a1 = cx_itei2;
								var cx_itej2 = cx_itei2.next;
								while(cx_itej2 != null) {
									var b2 = cx_itej2;
									var t4 = 0.0;
									var _sx2 = 0.0;
									var _sy2 = 0.0;
									_sx2 = u2.x - a1.x;
									_sy2 = u2.y - a1.y;
									var _vx2 = 0.0;
									var _vy2 = 0.0;
									_vx2 = v5.x - u2.x;
									_vy2 = v5.y - u2.y;
									var _qx2 = 0.0;
									var _qy2 = 0.0;
									_qx2 = b2.x - a1.x;
									_qy2 = b2.y - a1.y;
									var den2 = _vy2 * _qx2 - _vx2 * _qy2;
									var tmp2;
									if(den2 * den2 > Config.epsilon * Config.epsilon) {
										den2 = 1 / den2;
										var txx2 = (_qy2 * _sx2 - _qx2 * _sy2) * den2;
										if(txx2 > Config.epsilon && txx2 < 1 - Config.epsilon) {
											var sxx2 = (_vy2 * _sx2 - _vx2 * _sy2) * den2;
											if(sxx2 > Config.epsilon && sxx2 < 1 - Config.epsilon) {
												t4 = txx2;
												tmp2 = true;
											} else {
												tmp2 = false;
											}
										} else {
											tmp2 = false;
										}
									} else {
										tmp2 = false;
									}
									if(tmp2) {
										if(t4 < min3) {
											min3 = t4;
											ite2 = cx_itei2;
										}
									}
									cx_itei2 = cx_itej2;
									a1 = b2;
									cx_itej2 = cx_itej2.next;
								}
								while(true) {
									cx_itej2 = s2.polygon.gverts.next;
									var b3 = cx_itej2;
									var t5 = 0.0;
									var _sx3 = 0.0;
									var _sy3 = 0.0;
									_sx3 = u2.x - a1.x;
									_sy3 = u2.y - a1.y;
									var _vx3 = 0.0;
									var _vy3 = 0.0;
									_vx3 = v5.x - u2.x;
									_vy3 = v5.y - u2.y;
									var _qx3 = 0.0;
									var _qy3 = 0.0;
									_qx3 = b3.x - a1.x;
									_qy3 = b3.y - a1.y;
									var den3 = _vy3 * _qx3 - _vx3 * _qy3;
									var tmp3;
									if(den3 * den3 > Config.epsilon * Config.epsilon) {
										den3 = 1 / den3;
										var txx3 = (_qy3 * _sx3 - _qx3 * _sy3) * den3;
										if(txx3 > Config.epsilon && txx3 < 1 - Config.epsilon) {
											var sxx3 = (_vy3 * _sx3 - _vx3 * _sy3) * den3;
											if(sxx3 > Config.epsilon && sxx3 < 1 - Config.epsilon) {
												t5 = txx3;
												tmp3 = true;
											} else {
												tmp3 = false;
											}
										} else {
											tmp3 = false;
										}
									} else {
										tmp3 = false;
									}
									if(tmp3) {
										if(t5 < min3) {
											min3 = t5;
											ite2 = cx_itei2;
										}
									}
									break;
								}
								if(min3 != 2.0) {
									var cx3 = 0.0;
									var cy3 = 0.0;
									var T1 = min3;
									cx3 = u2.x + (v5.x - u2.x) * T1;
									cy3 = u2.y + (v5.y - u2.y) * T1;
									var ret1;
									if(ZPP_Vec2.zpp_pool == null) {
										ret1 = new ZPP_Vec2();
									} else {
										ret1 = ZPP_Vec2.zpp_pool;
										ZPP_Vec2.zpp_pool = ret1.next;
										ret1.next = null;
									}
									ret1.weak = false;
									ret1._immutable = false;
									ret1.x = cx3;
									ret1.y = cy3;
									fst_vert = ret1;
									ZPP_Collide.flowpoly.add(fst_vert);
									poly1 = true;
									ite1 = cx_itei;
									break;
								}
								break;
							}
						}
						cnt = 2;
					}
					while(true) if(poly1) {
						ite1 = ite1.next;
						++ind11;
						if(ite1 == null) {
							ite1 = s1.polygon.gverts.next;
							ind11 = 0;
						}
						if(!out1[ind11]) {
							var ex = ite1;
							var tmp4;
							if(fst_vert != null) {
								var ax2 = ex.x;
								var ay = ex.y;
								var bx = fst_vert.x;
								var by = fst_vert.y;
								var dx = 0.0;
								var dy = 0.0;
								dx = ax2 - bx;
								dy = ay - by;
								tmp4 = dx * dx + dy * dy < Config.epsilon;
							} else {
								tmp4 = false;
							}
							if(tmp4) {
								break;
							}
							ZPP_Collide.flowpoly.add(ex);
							if(fst_vert == null) {
								fst_vert = ZPP_Collide.flowpoly.head.elt;
							}
							cnt = 1;
						} else {
							var a2 = ZPP_Collide.flowpoly.head.elt;
							var b4 = ite1;
							var u3 = ite2;
							var itm = ite2.next;
							if(itm == null) {
								itm = s2.polygon.gverts.next;
							}
							var max = -1.0;
							var itmo = null;
							var indo = 0;
							var icnt = 0;
							var beg_ite = itm;
							var cx_ite6 = itm;
							while(true) {
								var v6 = cx_ite6;
								var t6 = 0.0;
								var _sx4 = 0.0;
								var _sy4 = 0.0;
								_sx4 = u3.x - a2.x;
								_sy4 = u3.y - a2.y;
								var _vx4 = 0.0;
								var _vy4 = 0.0;
								_vx4 = v6.x - u3.x;
								_vy4 = v6.y - u3.y;
								var _qx4 = 0.0;
								var _qy4 = 0.0;
								_qx4 = b4.x - a2.x;
								_qy4 = b4.y - a2.y;
								var den4 = _vy4 * _qx4 - _vx4 * _qy4;
								var tmp5;
								if(den4 * den4 > Config.epsilon * Config.epsilon) {
									den4 = 1 / den4;
									var txx4 = (_qy4 * _sx4 - _qx4 * _sy4) * den4;
									if(txx4 > Config.epsilon && txx4 < 1 - Config.epsilon) {
										var sxx4 = (_vy4 * _sx4 - _vx4 * _sy4) * den4;
										if(sxx4 > Config.epsilon && sxx4 < 1 - Config.epsilon) {
											t6 = txx4;
											tmp5 = true;
										} else {
											tmp5 = false;
										}
									} else {
										tmp5 = false;
									}
								} else {
									tmp5 = false;
								}
								if(tmp5) {
									if(t6 >= -1.0) {
										itmo = ite2;
										indo = ind2;
										icnt = 1;
										if(1 == cnt) {
											max = t6;
											cx_ite6 = beg_ite;
											break;
										} else {
											max = t6;
										}
									}
								}
								u3 = v6;
								ite2 = cx_ite6;
								++ind2;
								if(ind2 >= s2.polygon.edgeCnt) {
									ind2 = 0;
								}
								cx_ite6 = cx_ite6.next;
								if(cx_ite6 == null) {
									cx_ite6 = s2.polygon.gverts.next;
								}
								break;
							}
							while(cx_ite6 != beg_ite) {
								var v7 = cx_ite6;
								var t7 = 0.0;
								var _sx5 = 0.0;
								var _sy5 = 0.0;
								_sx5 = u3.x - a2.x;
								_sy5 = u3.y - a2.y;
								var _vx5 = 0.0;
								var _vy5 = 0.0;
								_vx5 = v7.x - u3.x;
								_vy5 = v7.y - u3.y;
								var _qx5 = 0.0;
								var _qy5 = 0.0;
								_qx5 = b4.x - a2.x;
								_qy5 = b4.y - a2.y;
								var den5 = _vy5 * _qx5 - _vx5 * _qy5;
								var tmp6;
								if(den5 * den5 > Config.epsilon * Config.epsilon) {
									den5 = 1 / den5;
									var txx5 = (_qy5 * _sx5 - _qx5 * _sy5) * den5;
									if(txx5 > Config.epsilon && txx5 < 1 - Config.epsilon) {
										var sxx5 = (_vy5 * _sx5 - _vx5 * _sy5) * den5;
										if(sxx5 > Config.epsilon && sxx5 < 1 - Config.epsilon) {
											t7 = txx5;
											tmp6 = true;
										} else {
											tmp6 = false;
										}
									} else {
										tmp6 = false;
									}
								} else {
									tmp6 = false;
								}
								if(tmp6) {
									if(t7 >= max) {
										itmo = ite2;
										indo = ind2;
										if(++icnt == cnt) {
											max = t7;
											break;
										} else {
											max = t7;
										}
									}
								}
								u3 = v7;
								ite2 = cx_ite6;
								++ind2;
								if(ind2 >= s2.polygon.edgeCnt) {
									ind2 = 0;
								}
								cx_ite6 = cx_ite6.next;
								if(cx_ite6 == null) {
									cx_ite6 = s2.polygon.gverts.next;
								}
							}
							if(itmo == null) {
								break;
							}
							var u4 = itmo;
							var itm2 = itmo.next;
							if(itm2 == null) {
								itm2 = s2.polygon.gverts.next;
							}
							var v8 = itm2;
							var cx4 = 0.0;
							var cy4 = 0.0;
							var T2 = max;
							cx4 = u4.x + (v8.x - u4.x) * T2;
							cy4 = u4.y + (v8.y - u4.y) * T2;
							var tmp7;
							if(fst_vert != null) {
								var bx1 = fst_vert.x;
								var by1 = fst_vert.y;
								var dx1 = 0.0;
								var dy1 = 0.0;
								dx1 = cx4 - bx1;
								dy1 = cy4 - by1;
								tmp7 = dx1 * dx1 + dy1 * dy1 < Config.epsilon;
							} else {
								tmp7 = false;
							}
							if(tmp7) {
								break;
							}
							var ret2;
							if(ZPP_Vec2.zpp_pool == null) {
								ret2 = new ZPP_Vec2();
							} else {
								ret2 = ZPP_Vec2.zpp_pool;
								ZPP_Vec2.zpp_pool = ret2.next;
								ret2.next = null;
							}
							ret2.weak = false;
							ret2._immutable = false;
							ret2.x = cx4;
							ret2.y = cy4;
							ZPP_Collide.flowpoly.add(ret2);
							if(fst_vert == null) {
								fst_vert = ZPP_Collide.flowpoly.head.elt;
							}
							ite2 = itmo;
							ind2 = indo;
							poly1 = !poly1;
							cnt = 2;
						}
					} else {
						ite2 = ite2.next;
						++ind2;
						if(ite2 == null) {
							ite2 = s2.polygon.gverts.next;
							ind2 = 0;
						}
						if(!out2[ind2]) {
							var ex1 = ite2;
							var tmp8;
							if(fst_vert != null) {
								var ax3 = ex1.x;
								var ay1 = ex1.y;
								var bx2 = fst_vert.x;
								var by2 = fst_vert.y;
								var dx2 = 0.0;
								var dy2 = 0.0;
								dx2 = ax3 - bx2;
								dy2 = ay1 - by2;
								tmp8 = dx2 * dx2 + dy2 * dy2 < Config.epsilon;
							} else {
								tmp8 = false;
							}
							if(tmp8) {
								break;
							}
							ZPP_Collide.flowpoly.add(ex1);
							if(fst_vert == null) {
								fst_vert = ZPP_Collide.flowpoly.head.elt;
							}
							cnt = 1;
						} else {
							var a3 = ZPP_Collide.flowpoly.head.elt;
							var b5 = ite2;
							var u5 = ite1;
							var itm1 = ite1.next;
							if(itm1 == null) {
								itm1 = s1.polygon.gverts.next;
							}
							var max1 = -1.0;
							var itmo1 = null;
							var indo1 = 0;
							var icnt1 = 0;
							var beg_ite1 = itm1;
							var cx_ite7 = itm1;
							while(true) {
								var v9 = cx_ite7;
								var t8 = 0.0;
								var _sx6 = 0.0;
								var _sy6 = 0.0;
								_sx6 = u5.x - a3.x;
								_sy6 = u5.y - a3.y;
								var _vx6 = 0.0;
								var _vy6 = 0.0;
								_vx6 = v9.x - u5.x;
								_vy6 = v9.y - u5.y;
								var _qx6 = 0.0;
								var _qy6 = 0.0;
								_qx6 = b5.x - a3.x;
								_qy6 = b5.y - a3.y;
								var den6 = _vy6 * _qx6 - _vx6 * _qy6;
								var tmp9;
								if(den6 * den6 > Config.epsilon * Config.epsilon) {
									den6 = 1 / den6;
									var txx6 = (_qy6 * _sx6 - _qx6 * _sy6) * den6;
									if(txx6 > Config.epsilon && txx6 < 1 - Config.epsilon) {
										var sxx6 = (_vy6 * _sx6 - _vx6 * _sy6) * den6;
										if(sxx6 > Config.epsilon && sxx6 < 1 - Config.epsilon) {
											t8 = txx6;
											tmp9 = true;
										} else {
											tmp9 = false;
										}
									} else {
										tmp9 = false;
									}
								} else {
									tmp9 = false;
								}
								if(tmp9) {
									if(t8 >= -1.0) {
										itmo1 = ite1;
										indo1 = ind11;
										icnt1 = 1;
										if(1 == cnt) {
											max1 = t8;
											cx_ite7 = beg_ite1;
											break;
										} else {
											max1 = t8;
										}
									}
								}
								u5 = v9;
								ite1 = cx_ite7;
								++ind11;
								if(ind11 >= s1.polygon.edgeCnt) {
									ind11 = 0;
								}
								cx_ite7 = cx_ite7.next;
								if(cx_ite7 == null) {
									cx_ite7 = s1.polygon.gverts.next;
								}
								break;
							}
							while(cx_ite7 != beg_ite1) {
								var v10 = cx_ite7;
								var t9 = 0.0;
								var _sx7 = 0.0;
								var _sy7 = 0.0;
								_sx7 = u5.x - a3.x;
								_sy7 = u5.y - a3.y;
								var _vx7 = 0.0;
								var _vy7 = 0.0;
								_vx7 = v10.x - u5.x;
								_vy7 = v10.y - u5.y;
								var _qx7 = 0.0;
								var _qy7 = 0.0;
								_qx7 = b5.x - a3.x;
								_qy7 = b5.y - a3.y;
								var den7 = _vy7 * _qx7 - _vx7 * _qy7;
								var tmp10;
								if(den7 * den7 > Config.epsilon * Config.epsilon) {
									den7 = 1 / den7;
									var txx7 = (_qy7 * _sx7 - _qx7 * _sy7) * den7;
									if(txx7 > Config.epsilon && txx7 < 1 - Config.epsilon) {
										var sxx7 = (_vy7 * _sx7 - _vx7 * _sy7) * den7;
										if(sxx7 > Config.epsilon && sxx7 < 1 - Config.epsilon) {
											t9 = txx7;
											tmp10 = true;
										} else {
											tmp10 = false;
										}
									} else {
										tmp10 = false;
									}
								} else {
									tmp10 = false;
								}
								if(tmp10) {
									if(t9 >= max1) {
										itmo1 = ite1;
										indo1 = ind11;
										if(++icnt1 == cnt) {
											max1 = t9;
											break;
										} else {
											max1 = t9;
										}
									}
								}
								u5 = v10;
								ite1 = cx_ite7;
								++ind11;
								if(ind11 >= s1.polygon.edgeCnt) {
									ind11 = 0;
								}
								cx_ite7 = cx_ite7.next;
								if(cx_ite7 == null) {
									cx_ite7 = s1.polygon.gverts.next;
								}
							}
							if(itmo1 == null) {
								break;
							}
							var u6 = itmo1;
							var itm21 = itmo1.next;
							if(itm21 == null) {
								itm21 = s1.polygon.gverts.next;
							}
							var v11 = itm21;
							var cx5 = 0.0;
							var cy5 = 0.0;
							var T3 = max1;
							cx5 = u6.x + (v11.x - u6.x) * T3;
							cy5 = u6.y + (v11.y - u6.y) * T3;
							var tmp11;
							if(fst_vert != null) {
								var bx3 = fst_vert.x;
								var by3 = fst_vert.y;
								var dx3 = 0.0;
								var dy3 = 0.0;
								dx3 = cx5 - bx3;
								dy3 = cy5 - by3;
								tmp11 = dx3 * dx3 + dy3 * dy3 < Config.epsilon;
							} else {
								tmp11 = false;
							}
							if(tmp11) {
								break;
							}
							var ret3;
							if(ZPP_Vec2.zpp_pool == null) {
								ret3 = new ZPP_Vec2();
							} else {
								ret3 = ZPP_Vec2.zpp_pool;
								ZPP_Vec2.zpp_pool = ret3.next;
								ret3.next = null;
							}
							ret3.weak = false;
							ret3._immutable = false;
							ret3.x = cx5;
							ret3.y = cy5;
							ZPP_Collide.flowpoly.add(ret3);
							if(fst_vert == null) {
								fst_vert = ZPP_Collide.flowpoly.head.elt;
							}
							ite1 = itmo1;
							ind11 = indo1;
							poly1 = !poly1;
							cnt = 2;
						}
					}
					if(ZPP_Collide.flowpoly.head != null && ZPP_Collide.flowpoly.head.next != null && ZPP_Collide.flowpoly.head.next.next != null) {
						var area4 = 0.0;
						var COMx = 0.0;
						var COMy = 0.0;
						COMx = 0;
						COMy = 0;
						area4 = 0.0;
						var cx_ite8 = ZPP_Collide.flowpoly.head;
						var u7 = cx_ite8.elt;
						cx_ite8 = cx_ite8.next;
						var v12 = cx_ite8.elt;
						cx_ite8 = cx_ite8.next;
						while(cx_ite8 != null) {
							var w6 = cx_ite8.elt;
							area4 += v12.x * (w6.y - u7.y);
							var cf6 = w6.y * v12.x - w6.x * v12.y;
							COMx += (v12.x + w6.x) * cf6;
							COMy += (v12.y + w6.y) * cf6;
							u7 = v12;
							v12 = w6;
							cx_ite8 = cx_ite8.next;
						}
						cx_ite8 = ZPP_Collide.flowpoly.head;
						var w7 = cx_ite8.elt;
						area4 += v12.x * (w7.y - u7.y);
						var cf7 = w7.y * v12.x - w7.x * v12.y;
						COMx += (v12.x + w7.x) * cf7;
						COMy += (v12.y + w7.y) * cf7;
						u7 = v12;
						cx_ite8 = cx_ite8.next;
						var w8 = cx_ite8.elt;
						area4 += w7.x * (w8.y - u7.y);
						var cf8 = w8.y * w7.x - w8.x * w7.y;
						COMx += (w7.x + w8.x) * cf8;
						COMy += (w7.y + w8.y) * cf8;
						area4 *= 0.5;
						var ia = 1 / (6 * area4);
						COMx *= ia;
						COMy *= ia;
						arb.overlap = -area4;
						arb.centroidx = COMx;
						arb.centroidy = COMy;
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			} else {
				return false;
			}
		} else {
			var inte = [];
			var total1 = true;
			var a0 = null;
			var vi = null;
			var max2 = -1e+100;
			var cont1 = true;
			var vite = s2.polygon.gverts.next;
			var ind3 = 0;
			var cx_ite9 = s2.polygon.edges.head;
			while(cx_ite9 != null) {
				var a4 = cx_ite9.elt;
				var dist = a4.gnormx * s1.circle.worldCOMx + a4.gnormy * s1.circle.worldCOMy;
				if(dist > a4.gprojection + s1.circle.radius) {
					cont1 = false;
					break;
				} else if(dist + s1.circle.radius > a4.gprojection + Config.epsilon) {
					total1 = false;
					inte[ind3] = true;
				}
				dist -= a4.gprojection + s1.circle.radius;
				if(dist > max2) {
					max2 = dist;
					a0 = a4;
					vi = vite;
				}
				vite = vite.next;
				++ind3;
				cx_ite9 = cx_ite9.next;
			}
			if(cont1) {
				if(total1) {
					var area5 = s1.circle.area;
					var cx6 = s1.circle.worldCOMx;
					var cy6 = s1.circle.worldCOMy;
					arb.overlap = area5;
					arb.centroidx = cx6;
					arb.centroidy = cy6;
					return true;
				} else {
					var v0 = vi;
					var v13 = vi.next == null?s2.polygon.gverts.next:vi.next;
					var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
					var tmp12;
					if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
						var minDist = s1.circle.radius;
						var px = 0.0;
						var py = 0.0;
						px = v0.x - s1.circle.worldCOMx;
						py = v0.y - s1.circle.worldCOMy;
						tmp12 = px * px + py * py <= minDist * minDist;
					} else if(dt >= v13.y * a0.gnormx - v13.x * a0.gnormy) {
						var minDist1 = s1.circle.radius;
						var px1 = 0.0;
						var py1 = 0.0;
						px1 = v13.x - s1.circle.worldCOMx;
						py1 = v13.y - s1.circle.worldCOMy;
						tmp12 = px1 * px1 + py1 * py1 <= minDist1 * minDist1;
					} else {
						tmp12 = true;
					}
					if(tmp12) {
						var ins = [];
						var ind4 = 0;
						var total2 = true;
						var vi1 = null;
						var vind = 0;
						var cx_ite10 = s2.polygon.gverts.next;
						while(cx_ite10 != null) {
							var v14 = cx_ite10;
							var ax4 = v14.x;
							var ay2 = v14.y;
							var bx4 = s1.circle.worldCOMx;
							var by4 = s1.circle.worldCOMy;
							var dx4 = 0.0;
							var dy4 = 0.0;
							dx4 = ax4 - bx4;
							dy4 = ay2 - by4;
							if(!(ins[ind4] = dx4 * dx4 + dy4 * dy4 <= s1.circle.radius * s1.circle.radius)) {
								total2 = false;
							} else {
								vind = ind4;
								vi1 = cx_ite10;
							}
							++ind4;
							cx_ite10 = cx_ite10.next;
						}
						if(total2) {
							var _this6 = s2.polygon;
							if(_this6.zip_worldCOM) {
								if(_this6.body != null) {
									_this6.zip_worldCOM = false;
									if(_this6.zip_localCOM) {
										_this6.zip_localCOM = false;
										if(_this6.type == 1) {
											var _this7 = _this6.polygon;
											if(_this7.lverts.next == null) {
												throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
											}
											if(_this7.lverts.next.next == null) {
												_this7.localCOMx = _this7.lverts.next.x;
												_this7.localCOMy = _this7.lverts.next.y;
											} else if(_this7.lverts.next.next.next == null) {
												_this7.localCOMx = _this7.lverts.next.x;
												_this7.localCOMy = _this7.lverts.next.y;
												_this7.localCOMx += _this7.lverts.next.next.x;
												_this7.localCOMy += _this7.lverts.next.next.y;
												_this7.localCOMx *= 0.5;
												_this7.localCOMy *= 0.5;
											} else {
												_this7.localCOMx = 0;
												_this7.localCOMy = 0;
												var area6 = 0.0;
												var cx_ite11 = _this7.lverts.next;
												var u8 = cx_ite11;
												cx_ite11 = cx_ite11.next;
												var v15 = cx_ite11;
												cx_ite11 = cx_ite11.next;
												while(cx_ite11 != null) {
													var w9 = cx_ite11;
													area6 += v15.x * (w9.y - u8.y);
													var cf9 = w9.y * v15.x - w9.x * v15.y;
													_this7.localCOMx += (v15.x + w9.x) * cf9;
													_this7.localCOMy += (v15.y + w9.y) * cf9;
													u8 = v15;
													v15 = w9;
													cx_ite11 = cx_ite11.next;
												}
												cx_ite11 = _this7.lverts.next;
												var w10 = cx_ite11;
												area6 += v15.x * (w10.y - u8.y);
												var cf10 = w10.y * v15.x - w10.x * v15.y;
												_this7.localCOMx += (v15.x + w10.x) * cf10;
												_this7.localCOMy += (v15.y + w10.y) * cf10;
												u8 = v15;
												cx_ite11 = cx_ite11.next;
												var w11 = cx_ite11;
												area6 += w10.x * (w11.y - u8.y);
												var cf11 = w11.y * w10.x - w11.x * w10.y;
												_this7.localCOMx += (w10.x + w11.x) * cf11;
												_this7.localCOMy += (w10.y + w11.y) * cf11;
												area6 = 1 / (3 * area6);
												var t10 = area6;
												_this7.localCOMx *= t10;
												_this7.localCOMy *= t10;
											}
										}
										if(_this6.wrap_localCOM != null) {
											_this6.wrap_localCOM.zpp_inner.x = _this6.localCOMx;
											_this6.wrap_localCOM.zpp_inner.y = _this6.localCOMy;
										}
									}
									var _this8 = _this6.body;
									if(_this8.zip_axis) {
										_this8.zip_axis = false;
										_this8.axisx = Math.sin(_this8.rot);
										_this8.axisy = Math.cos(_this8.rot);
									}
									_this6.worldCOMx = _this6.body.posx + (_this6.body.axisy * _this6.localCOMx - _this6.body.axisx * _this6.localCOMy);
									_this6.worldCOMy = _this6.body.posy + (_this6.localCOMx * _this6.body.axisx + _this6.localCOMy * _this6.body.axisy);
								}
							}
							var area7 = s2.polygon.area;
							var cx7 = s2.polygon.worldCOMx;
							var cy7 = s2.polygon.worldCOMy;
							arb.overlap = area7;
							arb.centroidx = cx7;
							arb.centroidy = cy7;
							return true;
						} else {
							while(ZPP_Collide.flowpoly.head != null) {
								var p1 = ZPP_Collide.flowpoly.pop_unsafe();
								if(!p1._inuse) {
									if(p1.outer != null) {
										p1.outer.zpp_inner = null;
										p1.outer = null;
									}
									p1._isimmutable = null;
									p1._validate = null;
									p1._invalidate = null;
									p1.next = ZPP_Vec2.zpp_pool;
									ZPP_Vec2.zpp_pool = p1;
								}
							}
							ZPP_Collide.flowsegs.clear();
							var fst_vert1 = null;
							var state = 1;
							if(vi1 == null) {
								vi1 = s2.polygon.gverts.next;
								state = 2;
							} else {
								fst_vert1 = vi1;
								ZPP_Collide.flowpoly.add(fst_vert1);
							}
							while(state != 0) if(state == 1) {
								vi1 = vi1.next;
								if(vi1 == null) {
									vi1 = s2.polygon.gverts.next;
								}
								++vind;
								if(vind >= s2.polygon.edgeCnt) {
									vind = 0;
								}
								if(ins[vind]) {
									var ax5 = fst_vert1.x;
									var ay3 = fst_vert1.y;
									var bx5 = vi1.x;
									var by5 = vi1.y;
									var dx5 = 0.0;
									var dy5 = 0.0;
									dx5 = ax5 - bx5;
									dy5 = ay3 - by5;
									if(dx5 * dx5 + dy5 * dy5 < Config.epsilon) {
										break;
									}
									ZPP_Collide.flowpoly.add(vi1);
								} else {
									var u9 = ZPP_Collide.flowpoly.head.elt;
									var v16 = vi1;
									var vx = 0.0;
									var vy = 0.0;
									vx = v16.x - u9.x;
									vy = v16.y - u9.y;
									var qx = 0.0;
									var qy = 0.0;
									qx = u9.x - s1.circle.worldCOMx;
									qy = u9.y - s1.circle.worldCOMy;
									var A = vx * vx + vy * vy;
									var B = 2 * (qx * vx + qy * vy);
									var D = Math.sqrt(B * B - 4 * A * (qx * qx + qy * qy - s1.circle.radius * s1.circle.radius));
									A = 1 / (2 * A);
									var t11 = (-B - D) * A;
									var tval = t11 < Config.epsilon?(-B + D) * A:t11;
									var cx8 = 0.0;
									var cy8 = 0.0;
									var T4 = tval;
									cx8 = u9.x + (v16.x - u9.x) * T4;
									cy8 = u9.y + (v16.y - u9.y) * T4;
									var ax6 = fst_vert1.x;
									var ay4 = fst_vert1.y;
									var dx6 = 0.0;
									var dy6 = 0.0;
									dx6 = ax6 - cx8;
									dy6 = ay4 - cy8;
									if(dx6 * dx6 + dy6 * dy6 < Config.epsilon) {
										break;
									}
									var ret4;
									if(ZPP_Vec2.zpp_pool == null) {
										ret4 = new ZPP_Vec2();
									} else {
										ret4 = ZPP_Vec2.zpp_pool;
										ZPP_Vec2.zpp_pool = ret4.next;
										ret4.next = null;
									}
									ret4.weak = false;
									ret4._immutable = false;
									ret4.x = cx8;
									ret4.y = cy8;
									ZPP_Collide.flowpoly.add(ret4);
									state = 2;
								}
							} else if(state == 2) {
								var vi2 = vi1.next;
								if(vi2 == null) {
									vi2 = s2.polygon.gverts.next;
								}
								var u10 = vi1;
								state = 0;
								var beg_ite2 = vi2;
								var cx_ite12 = vi2;
								while(true) {
									var v17 = cx_ite12;
									var vind2 = vind + 1;
									if(vind2 == s2.polygon.edgeCnt) {
										vind2 = 0;
									}
									if(inte[vind]) {
										if(ins[vind2]) {
											var vx1 = 0.0;
											var vy1 = 0.0;
											vx1 = v17.x - u10.x;
											vy1 = v17.y - u10.y;
											var qx1 = 0.0;
											var qy1 = 0.0;
											qx1 = u10.x - s1.circle.worldCOMx;
											qy1 = u10.y - s1.circle.worldCOMy;
											var A1 = vx1 * vx1 + vy1 * vy1;
											var B1 = 2 * (qx1 * vx1 + qy1 * vy1);
											var D1 = Math.sqrt(B1 * B1 - 4 * A1 * (qx1 * qx1 + qy1 * qy1 - s1.circle.radius * s1.circle.radius));
											A1 = 1 / (2 * A1);
											var t12 = (-B1 - D1) * A1;
											var tval1 = t12 < Config.epsilon?(-B1 + D1) * A1:t12;
											var cx9 = 0.0;
											var cy9 = 0.0;
											var T5 = tval1;
											cx9 = u10.x + (v17.x - u10.x) * T5;
											cy9 = u10.y + (v17.y - u10.y) * T5;
											var ax7 = fst_vert1.x;
											var ay5 = fst_vert1.y;
											var dx7 = 0.0;
											var dy7 = 0.0;
											dx7 = ax7 - cx9;
											dy7 = ay5 - cy9;
											if(dx7 * dx7 + dy7 * dy7 < Config.epsilon) {
												state = 0;
												cx_ite12 = beg_ite2;
												break;
											}
											var ret5;
											if(ZPP_Vec2.zpp_pool == null) {
												ret5 = new ZPP_Vec2();
											} else {
												ret5 = ZPP_Vec2.zpp_pool;
												ZPP_Vec2.zpp_pool = ret5.next;
												ret5.next = null;
											}
											ret5.weak = false;
											ret5._immutable = false;
											ret5.x = cx9;
											ret5.y = cy9;
											var cp = ret5;
											ZPP_Collide.flowsegs.add(ZPP_Collide.flowpoly.head.elt);
											ZPP_Collide.flowsegs.add(cp);
											ZPP_Collide.flowpoly.add(cp);
											state = 1;
											cx_ite12 = beg_ite2;
											break;
										} else {
											var t0 = 0.0;
											var t13 = 0.0;
											var vx2 = 0.0;
											var vy2 = 0.0;
											vx2 = v17.x - u10.x;
											vy2 = v17.y - u10.y;
											var qx2 = 0.0;
											var qy2 = 0.0;
											qx2 = u10.x - s1.circle.worldCOMx;
											qy2 = u10.y - s1.circle.worldCOMy;
											var A2 = vx2 * vx2 + vy2 * vy2;
											var B2 = 2 * (qx2 * vx2 + qy2 * vy2);
											var D2 = B2 * B2 - 4 * A2 * (qx2 * qx2 + qy2 * qy2 - s1.circle.radius * s1.circle.radius);
											var two;
											if(D2 * D2 < Config.epsilon) {
												if(D2 < 0) {
													t0 = 10.0;
												} else {
													t13 = -B2 / (2 * A2);
													t0 = t13;
												}
												two = false;
											} else {
												D2 = Math.sqrt(D2);
												A2 = 1 / (2 * A2);
												t0 = (-B2 - D2) * A2;
												t13 = (-B2 + D2) * A2;
												two = true;
											}
											if(t0 < 1 - Config.epsilon && t13 > Config.epsilon) {
												var cx10 = 0.0;
												var cy10 = 0.0;
												var T6 = t0;
												cx10 = u10.x + (v17.x - u10.x) * T6;
												cy10 = u10.y + (v17.y - u10.y) * T6;
												var tmp13;
												if(fst_vert1 != null) {
													var ax8 = fst_vert1.x;
													var ay6 = fst_vert1.y;
													var dx8 = 0.0;
													var dy8 = 0.0;
													dx8 = ax8 - cx10;
													dy8 = ay6 - cy10;
													tmp13 = dx8 * dx8 + dy8 * dy8 < Config.epsilon;
												} else {
													tmp13 = false;
												}
												if(tmp13) {
													state = 0;
													cx_ite12 = beg_ite2;
													break;
												}
												var ret6;
												if(ZPP_Vec2.zpp_pool == null) {
													ret6 = new ZPP_Vec2();
												} else {
													ret6 = ZPP_Vec2.zpp_pool;
													ZPP_Vec2.zpp_pool = ret6.next;
													ret6.next = null;
												}
												ret6.weak = false;
												ret6._immutable = false;
												ret6.x = cx10;
												ret6.y = cy10;
												var cp1 = ret6;
												if(ZPP_Collide.flowpoly.head != null) {
													ZPP_Collide.flowsegs.add(ZPP_Collide.flowpoly.head.elt);
													ZPP_Collide.flowsegs.add(cp1);
												}
												ZPP_Collide.flowpoly.add(cp1);
												if(fst_vert1 == null) {
													fst_vert1 = ZPP_Collide.flowpoly.head.elt;
												}
												if(two) {
													var cx11 = 0.0;
													var cy11 = 0.0;
													var T7 = t13;
													cx11 = u10.x + (v17.x - u10.x) * T7;
													cy11 = u10.y + (v17.y - u10.y) * T7;
													var ret7;
													if(ZPP_Vec2.zpp_pool == null) {
														ret7 = new ZPP_Vec2();
													} else {
														ret7 = ZPP_Vec2.zpp_pool;
														ZPP_Vec2.zpp_pool = ret7.next;
														ret7.next = null;
													}
													ret7.weak = false;
													ret7._immutable = false;
													ret7.x = cx11;
													ret7.y = cy11;
													ZPP_Collide.flowpoly.add(ret7);
												}
											}
										}
									}
									u10 = v17;
									vi1 = cx_ite12;
									vind = vind2;
									cx_ite12 = cx_ite12.next;
									if(cx_ite12 == null) {
										cx_ite12 = s2.polygon.gverts.next;
									}
									break;
								}
								while(cx_ite12 != beg_ite2) {
									var v18 = cx_ite12;
									var vind21 = vind + 1;
									if(vind21 == s2.polygon.edgeCnt) {
										vind21 = 0;
									}
									if(inte[vind]) {
										if(ins[vind21]) {
											var vx3 = 0.0;
											var vy3 = 0.0;
											vx3 = v18.x - u10.x;
											vy3 = v18.y - u10.y;
											var qx3 = 0.0;
											var qy3 = 0.0;
											qx3 = u10.x - s1.circle.worldCOMx;
											qy3 = u10.y - s1.circle.worldCOMy;
											var A3 = vx3 * vx3 + vy3 * vy3;
											var B3 = 2 * (qx3 * vx3 + qy3 * vy3);
											var D3 = Math.sqrt(B3 * B3 - 4 * A3 * (qx3 * qx3 + qy3 * qy3 - s1.circle.radius * s1.circle.radius));
											A3 = 1 / (2 * A3);
											var t14 = (-B3 - D3) * A3;
											var tval2 = t14 < Config.epsilon?(-B3 + D3) * A3:t14;
											var cx12 = 0.0;
											var cy12 = 0.0;
											var T8 = tval2;
											cx12 = u10.x + (v18.x - u10.x) * T8;
											cy12 = u10.y + (v18.y - u10.y) * T8;
											var ax9 = fst_vert1.x;
											var ay7 = fst_vert1.y;
											var dx9 = 0.0;
											var dy9 = 0.0;
											dx9 = ax9 - cx12;
											dy9 = ay7 - cy12;
											if(dx9 * dx9 + dy9 * dy9 < Config.epsilon) {
												state = 0;
												break;
											}
											var ret8;
											if(ZPP_Vec2.zpp_pool == null) {
												ret8 = new ZPP_Vec2();
											} else {
												ret8 = ZPP_Vec2.zpp_pool;
												ZPP_Vec2.zpp_pool = ret8.next;
												ret8.next = null;
											}
											ret8.weak = false;
											ret8._immutable = false;
											ret8.x = cx12;
											ret8.y = cy12;
											var cp2 = ret8;
											ZPP_Collide.flowsegs.add(ZPP_Collide.flowpoly.head.elt);
											ZPP_Collide.flowsegs.add(cp2);
											ZPP_Collide.flowpoly.add(cp2);
											state = 1;
											break;
										} else {
											var t01 = 0.0;
											var t15 = 0.0;
											var vx4 = 0.0;
											var vy4 = 0.0;
											vx4 = v18.x - u10.x;
											vy4 = v18.y - u10.y;
											var qx4 = 0.0;
											var qy4 = 0.0;
											qx4 = u10.x - s1.circle.worldCOMx;
											qy4 = u10.y - s1.circle.worldCOMy;
											var A4 = vx4 * vx4 + vy4 * vy4;
											var B4 = 2 * (qx4 * vx4 + qy4 * vy4);
											var D4 = B4 * B4 - 4 * A4 * (qx4 * qx4 + qy4 * qy4 - s1.circle.radius * s1.circle.radius);
											var two1;
											if(D4 * D4 < Config.epsilon) {
												if(D4 < 0) {
													t01 = 10.0;
												} else {
													t15 = -B4 / (2 * A4);
													t01 = t15;
												}
												two1 = false;
											} else {
												D4 = Math.sqrt(D4);
												A4 = 1 / (2 * A4);
												t01 = (-B4 - D4) * A4;
												t15 = (-B4 + D4) * A4;
												two1 = true;
											}
											if(t01 < 1 - Config.epsilon && t15 > Config.epsilon) {
												var cx13 = 0.0;
												var cy13 = 0.0;
												var T9 = t01;
												cx13 = u10.x + (v18.x - u10.x) * T9;
												cy13 = u10.y + (v18.y - u10.y) * T9;
												var tmp14;
												if(fst_vert1 != null) {
													var ax10 = fst_vert1.x;
													var ay8 = fst_vert1.y;
													var dx10 = 0.0;
													var dy10 = 0.0;
													dx10 = ax10 - cx13;
													dy10 = ay8 - cy13;
													tmp14 = dx10 * dx10 + dy10 * dy10 < Config.epsilon;
												} else {
													tmp14 = false;
												}
												if(tmp14) {
													state = 0;
													break;
												}
												var ret9;
												if(ZPP_Vec2.zpp_pool == null) {
													ret9 = new ZPP_Vec2();
												} else {
													ret9 = ZPP_Vec2.zpp_pool;
													ZPP_Vec2.zpp_pool = ret9.next;
													ret9.next = null;
												}
												ret9.weak = false;
												ret9._immutable = false;
												ret9.x = cx13;
												ret9.y = cy13;
												var cp3 = ret9;
												if(ZPP_Collide.flowpoly.head != null) {
													ZPP_Collide.flowsegs.add(ZPP_Collide.flowpoly.head.elt);
													ZPP_Collide.flowsegs.add(cp3);
												}
												ZPP_Collide.flowpoly.add(cp3);
												if(fst_vert1 == null) {
													fst_vert1 = ZPP_Collide.flowpoly.head.elt;
												}
												if(two1) {
													var cx14 = 0.0;
													var cy14 = 0.0;
													var T10 = t15;
													cx14 = u10.x + (v18.x - u10.x) * T10;
													cy14 = u10.y + (v18.y - u10.y) * T10;
													var ret10;
													if(ZPP_Vec2.zpp_pool == null) {
														ret10 = new ZPP_Vec2();
													} else {
														ret10 = ZPP_Vec2.zpp_pool;
														ZPP_Vec2.zpp_pool = ret10.next;
														ret10.next = null;
													}
													ret10.weak = false;
													ret10._immutable = false;
													ret10.x = cx14;
													ret10.y = cy14;
													ZPP_Collide.flowpoly.add(ret10);
												}
											}
										}
									}
									u10 = v18;
									vi1 = cx_ite12;
									vind = vind21;
									cx_ite12 = cx_ite12.next;
									if(cx_ite12 == null) {
										cx_ite12 = s2.polygon.gverts.next;
									}
								}
							}
							if(ZPP_Collide.flowpoly.head == null) {
								return false;
							} else if(ZPP_Collide.flowpoly.head.next == null) {
								var all = true;
								var cx_ite13 = s2.polygon.edges.head;
								while(cx_ite13 != null) {
									var e = cx_ite13.elt;
									if(e.gnormx * s1.circle.worldCOMx + e.gnormy * s1.circle.worldCOMy > e.gprojection) {
										all = false;
										break;
									}
									cx_ite13 = cx_ite13.next;
								}
								if(all) {
									var area8 = s1.circle.area;
									var cx15 = s1.circle.worldCOMx;
									var cy15 = s1.circle.worldCOMy;
									arb.overlap = area8;
									arb.centroidx = cx15;
									arb.centroidy = cy15;
									return true;
								} else {
									return false;
								}
							} else {
								var COMx1 = 0;
								var COMy1 = 0;
								var area9 = 0.0;
								if(ZPP_Collide.flowpoly.head.next.next != null) {
									var parea = 0.0;
									var pCOMx = 0.0;
									var pCOMy = 0.0;
									pCOMx = 0;
									pCOMy = 0;
									parea = 0.0;
									var cx_ite14 = ZPP_Collide.flowpoly.head;
									var u11 = cx_ite14.elt;
									cx_ite14 = cx_ite14.next;
									var v19 = cx_ite14.elt;
									cx_ite14 = cx_ite14.next;
									while(cx_ite14 != null) {
										var w12 = cx_ite14.elt;
										parea += v19.x * (w12.y - u11.y);
										var cf12 = w12.y * v19.x - w12.x * v19.y;
										pCOMx += (v19.x + w12.x) * cf12;
										pCOMy += (v19.y + w12.y) * cf12;
										u11 = v19;
										v19 = w12;
										cx_ite14 = cx_ite14.next;
									}
									cx_ite14 = ZPP_Collide.flowpoly.head;
									var w13 = cx_ite14.elt;
									parea += v19.x * (w13.y - u11.y);
									var cf13 = w13.y * v19.x - w13.x * v19.y;
									pCOMx += (v19.x + w13.x) * cf13;
									pCOMy += (v19.y + w13.y) * cf13;
									u11 = v19;
									cx_ite14 = cx_ite14.next;
									var w14 = cx_ite14.elt;
									parea += w13.x * (w14.y - u11.y);
									var cf14 = w14.y * w13.x - w14.x * w13.y;
									pCOMx += (w13.x + w14.x) * cf14;
									pCOMy += (w13.y + w14.y) * cf14;
									parea *= 0.5;
									var ia1 = 1 / (6 * parea);
									pCOMx *= ia1;
									pCOMy *= ia1;
									var t16 = -parea;
									COMx1 += pCOMx * t16;
									COMy1 += pCOMy * t16;
									area9 = 0.0 - parea;
								} else {
									ZPP_Collide.flowsegs.add(ZPP_Collide.flowpoly.head.elt);
									ZPP_Collide.flowsegs.add(ZPP_Collide.flowpoly.head.next.elt);
								}
								while(ZPP_Collide.flowsegs.head != null) {
									var u12 = ZPP_Collide.flowsegs.pop_unsafe();
									var v20 = ZPP_Collide.flowsegs.pop_unsafe();
									var dx11 = 0.0;
									var dy11 = 0.0;
									dx11 = v20.x - u12.x;
									dy11 = v20.y - u12.y;
									var nx = 0.0;
									var ny = 0.0;
									nx = dx11;
									ny = dy11;
									var imag = 1.0 / Math.sqrt(nx * nx + ny * ny);
									nx *= imag;
									ny *= imag;
									var t17 = nx;
									nx = -ny;
									ny = t17;
									var cx16 = 0.0;
									var cy16 = 0.0;
									cx16 = u12.x + v20.x;
									cy16 = u12.y + v20.y;
									cx16 *= 0.5;
									cy16 *= 0.5;
									cx16 -= s1.circle.worldCOMx;
									cy16 -= s1.circle.worldCOMy;
									var xd = nx * cx16 + ny * cy16;
									var carea = 0.0;
									var ccom = 0.0;
									var cos = xd / s1.circle.radius;
									var sin = Math.sqrt(1 - cos * cos);
									var theta = Math.acos(cos);
									carea = s1.circle.radius * (s1.circle.radius * theta - xd * sin);
									ccom = 0.66666666666666663 * s1.circle.radius * sin * sin * sin / (theta - cos * sin);
									cx16 = s1.circle.worldCOMx;
									cy16 = s1.circle.worldCOMy;
									var t18 = ccom;
									cx16 += nx * t18;
									cy16 += ny * t18;
									var t19 = carea;
									COMx1 += cx16 * t19;
									COMy1 += cy16 * t19;
									area9 += carea;
								}
								var t20 = 1.0 / area9;
								COMx1 *= t20;
								COMy1 *= t20;
								arb.overlap = area9;
								arb.centroidx = COMx1;
								arb.centroidy = COMy1;
								return true;
							}
						}
					} else {
						return false;
					}
				}
			} else {
				return false;
			}
		}
	} else {
		var c1 = s1.circle;
		var c2 = s2.circle;
		var deltax = 0.0;
		var deltay = 0.0;
		deltax = c2.worldCOMx - c1.worldCOMx;
		deltay = c2.worldCOMy - c1.worldCOMy;
		var cr = c1.radius + c2.radius;
		var ds = deltax * deltax + deltay * deltay;
		if(ds > cr * cr) {
			return false;
		} else if(ds < Config.epsilon * Config.epsilon) {
			if(c1.radius < c2.radius) {
				var area10 = c1.area;
				var cx17 = c1.worldCOMx;
				var cy17 = c1.worldCOMy;
				arb.overlap = area10;
				arb.centroidx = cx17;
				arb.centroidy = cy17;
			} else {
				var area11 = c2.area;
				var cx18 = c2.worldCOMx;
				var cy18 = c2.worldCOMy;
				arb.overlap = area11;
				arb.centroidx = cx18;
				arb.centroidy = cy18;
			}
			return true;
		} else {
			var d = Math.sqrt(ds);
			var id = 1 / d;
			var x1 = 0.5 * (d - (c2.radius * c2.radius - c1.radius * c1.radius) * id);
			if(x1 <= -c1.radius) {
				var area12 = c1.area;
				var cx19 = c1.worldCOMx;
				var cy19 = c1.worldCOMy;
				arb.overlap = area12;
				arb.centroidx = cx19;
				arb.centroidy = cy19;
			} else {
				var x2 = d - x1;
				if(x2 <= -c2.radius) {
					var area13 = c2.area;
					var cx20 = c2.worldCOMx;
					var cy20 = c2.worldCOMy;
					arb.overlap = area13;
					arb.centroidx = cx20;
					arb.centroidy = cy20;
				} else {
					var area14 = 0.0;
					var y1 = 0.0;
					var area21 = 0.0;
					var y2 = 0.0;
					var cos1 = x1 / c1.radius;
					var sin1 = Math.sqrt(1 - cos1 * cos1);
					var theta1 = Math.acos(cos1);
					area14 = c1.radius * (c1.radius * theta1 - x1 * sin1);
					y1 = 0.66666666666666663 * c1.radius * sin1 * sin1 * sin1 / (theta1 - cos1 * sin1);
					var cos2 = x2 / c2.radius;
					var sin2 = Math.sqrt(1 - cos2 * cos2);
					var theta2 = Math.acos(cos2);
					area21 = c2.radius * (c2.radius * theta2 - x2 * sin2);
					y2 = 0.66666666666666663 * c2.radius * sin2 * sin2 * sin2 / (theta2 - cos2 * sin2);
					var tarea = area14 + area21;
					var ya = (y1 * area14 + (d - y2) * area21) / tarea * id;
					var cx21 = c1.worldCOMx + deltax * ya;
					var cy21 = c1.worldCOMy + deltay * ya;
					arb.overlap = tarea;
					arb.centroidx = cx21;
					arb.centroidy = cy21;
				}
			}
			return true;
		}
	}
};
ZPP_Collide.prototype.__class__ = ZPP_Collide;
var ZPP_Convex = zpp_nape.geom.ZPP_Convex = function() { };
ZPP_Convex.__name__ = ["zpp_nape","geom","ZPP_Convex"];
ZPP_Convex.isinner = function(a,b,c) {
	var ux = 0.0;
	var uy = 0.0;
	ux = a.x - b.x;
	uy = a.y - b.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = c.x - b.x;
	vy = c.y - b.y;
	return vy * ux - vx * uy >= 0;
};
ZPP_Convex.optimise = function(P) {
	var F = P.vertices;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		while(true) {
			nite.sort();
			nite = nite.next;
			if(!(nite != L)) {
				break;
			}
		}
	}
	var F1 = P.vertices;
	var L1 = P.vertices;
	if(F1 != null) {
		var nite1 = F1;
		while(true) {
			var p = nite1;
			var pright = p.prev;
			var ppre = null;
			var cx_ite = p.diagonals.head;
			while(cx_ite != null) {
				var pdiag = cx_ite.elt;
				if(!ZPP_Convex.isinner(cx_ite.next == null?p.next:cx_ite.next.elt,p,pright)) {
					ppre = cx_ite;
					pright = pdiag;
					cx_ite = cx_ite.next;
					continue;
				}
				var removable = true;
				var qright = pdiag.prev;
				var qpre = null;
				var cx_ite1 = pdiag.diagonals.head;
				while(cx_ite1 != null) {
					var qdiag = cx_ite1.elt;
					if(qdiag == p) {
						removable = ZPP_Convex.isinner(cx_ite1.next == null?pdiag.next:cx_ite1.next.elt,pdiag,qright);
						break;
					}
					qright = qdiag;
					qpre = cx_ite1;
					cx_ite1 = cx_ite1.next;
				}
				if(removable) {
					cx_ite = p.diagonals.erase(ppre);
					pdiag.diagonals.erase(qpre);
					continue;
				}
				pright = pdiag;
				ppre = cx_ite;
				cx_ite = cx_ite.next;
			}
			nite1 = nite1.next;
			if(!(nite1 != L1)) {
				break;
			}
		}
	}
};
ZPP_Convex.prototype.__class__ = ZPP_Convex;
var ZPP_ConvexRayResult = zpp_nape.geom.ZPP_ConvexRayResult = function() {
	this.toiDistance = 0.0;
	this.next = null;
	this.inner = false;
	this.ray = null;
	this.position = null;
	this.convex = null;
	this.shape = null;
	this.normal = null;
};
ZPP_ConvexRayResult.__name__ = ["zpp_nape","geom","ZPP_ConvexRayResult"];
ZPP_ConvexRayResult.getRay = function(normal,time,inner,shape) {
	var ret;
	if(ZPP_ConvexRayResult.rayPool == null) {
		ZPP_ConvexRayResult.internal = true;
		ret = new RayResult();
		ret.zpp_inner = new ZPP_ConvexRayResult();
		ret.zpp_inner.ray = ret;
		ZPP_ConvexRayResult.internal = false;
	} else {
		ret = ZPP_ConvexRayResult.rayPool.ray;
		ZPP_ConvexRayResult.rayPool = ZPP_ConvexRayResult.rayPool.next;
		ret.zpp_inner.next = null;
	}
	var zinner = ret.zpp_inner;
	zinner.normal = normal;
	normal.zpp_inner._immutable = true;
	zinner.toiDistance = time;
	zinner.inner = inner;
	zinner.shape = shape;
	return ret;
};
ZPP_ConvexRayResult.getConvex = function(normal,position,toiDistance,shape) {
	var ret;
	if(ZPP_ConvexRayResult.convexPool == null) {
		ZPP_ConvexRayResult.internal = true;
		ret = new ConvexResult();
		ret.zpp_inner = new ZPP_ConvexRayResult();
		ret.zpp_inner.convex = ret;
		ZPP_ConvexRayResult.internal = false;
	} else {
		ret = ZPP_ConvexRayResult.convexPool.convex;
		ZPP_ConvexRayResult.convexPool = ZPP_ConvexRayResult.convexPool.next;
		ret.zpp_inner.next = null;
	}
	var inner = ret.zpp_inner;
	inner.normal = normal;
	inner.position = position;
	normal.zpp_inner._immutable = true;
	position.zpp_inner._immutable = true;
	inner.toiDistance = toiDistance;
	inner.shape = shape;
	return ret;
};
ZPP_ConvexRayResult.prototype.normal = null;
ZPP_ConvexRayResult.prototype.shape = null;
ZPP_ConvexRayResult.prototype.convex = null;
ZPP_ConvexRayResult.prototype.position = null;
ZPP_ConvexRayResult.prototype.ray = null;
ZPP_ConvexRayResult.prototype.inner = null;
ZPP_ConvexRayResult.prototype.next = null;
ZPP_ConvexRayResult.prototype.toiDistance = null;
ZPP_ConvexRayResult.prototype.disposed = function() {
	if(this.next != null) {
		throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
	}
};
ZPP_ConvexRayResult.prototype.free = function() {
	this.normal.zpp_inner._immutable = false;
	var _this = this.normal;
	if(_this != null && _this.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _this.zpp_inner;
	if(_this1._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(_this1._isimmutable != null) {
		_this1._isimmutable();
	}
	if(_this.zpp_inner._inuse) {
		throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
	}
	var inner = _this.zpp_inner;
	_this.zpp_inner.outer = null;
	_this.zpp_inner = null;
	_this.zpp_pool = null;
	if(ZPP_PubPool.nextVec2 != null) {
		ZPP_PubPool.nextVec2.zpp_pool = _this;
	} else {
		ZPP_PubPool.poolVec2 = _this;
	}
	ZPP_PubPool.nextVec2 = _this;
	_this.zpp_disp = true;
	if(inner.outer != null) {
		inner.outer.zpp_inner = null;
		inner.outer = null;
	}
	inner._isimmutable = null;
	inner._validate = null;
	inner._invalidate = null;
	inner.next = ZPP_Vec2.zpp_pool;
	ZPP_Vec2.zpp_pool = inner;
	if(this.position != null) {
		this.position.zpp_inner._immutable = false;
		var _this2 = this.position;
		if(_this2 != null && _this2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this3 = _this2.zpp_inner;
		if(_this3._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this3._isimmutable != null) {
			_this3._isimmutable();
		}
		if(_this2.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = _this2.zpp_inner;
		_this2.zpp_inner.outer = null;
		_this2.zpp_inner = null;
		_this2.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = _this2;
		} else {
			ZPP_PubPool.poolVec2 = _this2;
		}
		ZPP_PubPool.nextVec2 = _this2;
		_this2.zpp_disp = true;
		if(inner1.outer != null) {
			inner1.outer.zpp_inner = null;
			inner1.outer = null;
		}
		inner1._isimmutable = null;
		inner1._validate = null;
		inner1._invalidate = null;
		inner1.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner1;
	}
	this.shape = null;
	this.toiDistance = 0.0;
	if(this.convex != null) {
		this.next = ZPP_ConvexRayResult.convexPool;
		ZPP_ConvexRayResult.convexPool = this;
	} else {
		this.next = ZPP_ConvexRayResult.rayPool;
		ZPP_ConvexRayResult.rayPool = this;
	}
};
ZPP_ConvexRayResult.prototype.__class__ = ZPP_ConvexRayResult;
var ZPP_CutVert = zpp_nape.geom.ZPP_CutVert = function() {
	this.used = false;
	this.rank = 0;
	this.parent = null;
	this.positive = false;
	this.value = 0.0;
	this.vert = null;
	this.posy = 0.0;
	this.posx = 0.0;
	this.next = null;
	this.prev = null;
};
ZPP_CutVert.__name__ = ["zpp_nape","geom","ZPP_CutVert"];
ZPP_CutVert.path = function(poly) {
	var ret;
	if(ZPP_CutVert.zpp_pool == null) {
		ret = new ZPP_CutVert();
	} else {
		ret = ZPP_CutVert.zpp_pool;
		ZPP_CutVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.vert = poly;
	ret.parent = ret;
	ret.rank = 0;
	ret.used = false;
	return ret;
};
ZPP_CutVert.prototype.prev = null;
ZPP_CutVert.prototype.next = null;
ZPP_CutVert.prototype.posx = null;
ZPP_CutVert.prototype.posy = null;
ZPP_CutVert.prototype.vert = null;
ZPP_CutVert.prototype.value = null;
ZPP_CutVert.prototype.positive = null;
ZPP_CutVert.prototype.parent = null;
ZPP_CutVert.prototype.rank = null;
ZPP_CutVert.prototype.used = null;
ZPP_CutVert.prototype.alloc = function() {
};
ZPP_CutVert.prototype.free = function() {
	this.vert = null;
	this.parent = null;
};
ZPP_CutVert.prototype.__class__ = ZPP_CutVert;
var ZPP_CutInt = zpp_nape.geom.ZPP_CutInt = function() {
	this.path1 = null;
	this.start = null;
	this.end = null;
	this.path0 = null;
	this.vertex = false;
	this.virtualint = false;
	this.time = 0.0;
	this.next = null;
};
ZPP_CutInt.__name__ = ["zpp_nape","geom","ZPP_CutInt"];
ZPP_CutInt.get = function(time,end,start,path0,path1,virtualint,vertex) {
	if(vertex == null) {
		vertex = false;
	}
	if(virtualint == null) {
		virtualint = false;
	}
	var ret;
	if(ZPP_CutInt.zpp_pool == null) {
		ret = new ZPP_CutInt();
	} else {
		ret = ZPP_CutInt.zpp_pool;
		ZPP_CutInt.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.virtualint = virtualint;
	ret.end = end;
	ret.start = start;
	ret.path0 = path0;
	ret.path1 = path1;
	ret.time = time;
	ret.vertex = vertex;
	return ret;
};
ZPP_CutInt.prototype.next = null;
ZPP_CutInt.prototype.time = null;
ZPP_CutInt.prototype.virtualint = null;
ZPP_CutInt.prototype.vertex = null;
ZPP_CutInt.prototype.path0 = null;
ZPP_CutInt.prototype.end = null;
ZPP_CutInt.prototype.start = null;
ZPP_CutInt.prototype.path1 = null;
ZPP_CutInt.prototype.alloc = function() {
};
ZPP_CutInt.prototype.free = function() {
	this.end = this.start = null;
	this.path0 = this.path1 = null;
};
ZPP_CutInt.prototype.__class__ = ZPP_CutInt;
var ZPP_Cutter = zpp_nape.geom.ZPP_Cutter = function() { };
ZPP_Cutter.__name__ = ["zpp_nape","geom","ZPP_Cutter"];
ZPP_Cutter.run = function(P,_start,_end,bstart,bend,output) {
	var px = 0.0;
	var py = 0.0;
	if(_start != null && _start.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = _start.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	px = _start.zpp_inner.x;
	if(_start != null && _start.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = _start.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	py = _start.zpp_inner.y;
	var dx = 0.0;
	var dy = 0.0;
	if(_end != null && _end.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this2 = _end.zpp_inner;
	if(_this2._validate != null) {
		_this2._validate();
	}
	dx = _end.zpp_inner.x - px;
	if(_end != null && _end.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this3 = _end.zpp_inner;
	if(_this3._validate != null) {
		_this3._validate();
	}
	dy = _end.zpp_inner.y - py;
	var min = bstart?0:-Infinity;
	var max = bend?1:Infinity;
	var crx = -(py * dx - px * dy);
	var verts = null;
	var clashes = false;
	var p = P;
	while(true) {
		var c;
		if(ZPP_CutVert.zpp_pool == null) {
			c = new ZPP_CutVert();
		} else {
			c = ZPP_CutVert.zpp_pool;
			ZPP_CutVert.zpp_pool = c.next;
			c.next = null;
		}
		c.vert = p;
		c.posx = c.vert.x;
		c.posy = c.vert.y;
		c.value = c.posy * dx - c.posx * dy + crx;
		c.positive = c.value > 0;
		if(c.value == 0) {
			clashes = true;
		}
		var obj = c;
		if(verts == null) {
			verts = obj.prev = obj.next = obj;
		} else {
			obj.prev = verts;
			obj.next = verts.next;
			verts.next.prev = obj;
			verts.next = obj;
		}
		verts = obj;
		p = p.next;
		if(!(p != P)) {
			break;
		}
	}
	if(clashes) {
		var start = null;
		var F = verts;
		var L = verts;
		if(F != null) {
			var nite = F;
			while(true) {
				var p1 = nite;
				if(p1.value != 0.0) {
					start = p1;
					break;
				}
				nite = nite.next;
				if(!(nite != L)) {
					break;
				}
			}
		}
		var nx = 0.0;
		var ny = 0.0;
		nx = dx;
		ny = dy;
		var imag = 1.0 / Math.sqrt(nx * nx + ny * ny);
		nx *= imag;
		ny *= imag;
		var t = nx;
		nx = -ny;
		ny = t;
		var pre = null;
		var p2 = start;
		while(true) {
			if(p2.value != 0.0 && (pre == null || p2 == pre.next)) {
				pre = p2;
				p2 = p2.next;
				if(!(p2 != start)) {
					break;
				} else {
					continue;
				}
			}
			var prod = pre.value * p2.value;
			if(prod == 0) {
				p2 = p2.next;
				if(!(p2 != start)) {
					break;
				} else {
					continue;
				}
			}
			var a = pre.next;
			var positive;
			if(prod > 0) {
				positive = pre.positive;
			} else {
				var b = a.next;
				var midx = 0.0;
				var midy = 0.0;
				midx = a.posx + b.posx;
				midy = a.posy + b.posy;
				midx *= 0.5;
				midy *= 0.5;
				var x = midx + nx * 1e-8;
				var y = midy + ny * 1e-8;
				var ret = false;
				if(P != null) {
					var nite1 = P;
					while(true) {
						var p3 = nite1;
						var q = p3.prev;
						if((p3.y < y && q.y >= y || q.y < y && p3.y >= y) && (p3.x <= x || q.x <= x)) {
							if(p3.x + (y - p3.y) / (q.y - p3.y) * (q.x - p3.x) < x) {
								ret = !ret;
							}
						}
						nite1 = nite1.next;
						if(!(nite1 != P)) {
							break;
						}
					}
				}
				positive = ret;
			}
			var L1 = p2;
			if(a != null) {
				var nite2 = a;
				while(true) {
					nite2.positive = positive;
					nite2 = nite2.next;
					if(!(nite2 != L1)) {
						break;
					}
				}
			}
			pre = p2;
			p2 = p2.next;
			if(!(p2 != start)) {
				break;
			}
		}
		while(true) {
			if(p2.value != 0.0 && (pre == null || p2 == pre.next)) {
				pre = p2;
				p2 = p2.next;
				break;
			}
			var prod1 = pre.value * p2.value;
			if(prod1 == 0) {
				p2 = p2.next;
				break;
			}
			var a1 = pre.next;
			var positive1;
			if(prod1 > 0) {
				positive1 = pre.positive;
			} else {
				var b1 = a1.next;
				var midx1 = 0.0;
				var midy1 = 0.0;
				midx1 = a1.posx + b1.posx;
				midy1 = a1.posy + b1.posy;
				midx1 *= 0.5;
				midy1 *= 0.5;
				var x1 = midx1 + nx * 1e-8;
				var y1 = midy1 + ny * 1e-8;
				var ret1 = false;
				if(P != null) {
					var nite3 = P;
					while(true) {
						var p4 = nite3;
						var q1 = p4.prev;
						if((p4.y < y1 && q1.y >= y1 || q1.y < y1 && p4.y >= y1) && (p4.x <= x1 || q1.x <= x1)) {
							if(p4.x + (y1 - p4.y) / (q1.y - p4.y) * (q1.x - p4.x) < x1) {
								ret1 = !ret1;
							}
						}
						nite3 = nite3.next;
						if(!(nite3 != P)) {
							break;
						}
					}
				}
				positive1 = ret1;
			}
			var L2 = p2;
			if(a1 != null) {
				var nite4 = a1;
				while(true) {
					nite4.positive = positive1;
					nite4 = nite4.next;
					if(!(nite4 != L2)) {
						break;
					}
				}
			}
			pre = p2;
			p2 = p2.next;
			break;
		}
	}
	if(ZPP_Cutter.ints == null) {
		ZPP_Cutter.ints = new ZNPList_ZPP_CutInt();
	}
	if(ZPP_Cutter.paths == null) {
		ZPP_Cutter.paths = new ZNPList_ZPP_CutVert();
	}
	var start1 = null;
	var x2 = verts.posx;
	var y2 = verts.posy;
	var ret2;
	if(ZPP_GeomVert.zpp_pool == null) {
		ret2 = new ZPP_GeomVert();
	} else {
		ret2 = ZPP_GeomVert.zpp_pool;
		ZPP_GeomVert.zpp_pool = ret2.next;
		ret2.next = null;
	}
	ret2.forced = false;
	ret2.x = x2;
	ret2.y = y2;
	var obj1 = ret2;
	if(start1 == null) {
		start1 = obj1.prev = obj1.next = obj1;
	} else {
		obj1.next = start1;
		obj1.prev = start1.prev;
		start1.prev.next = obj1;
		start1.prev = obj1;
	}
	var origin = start1;
	var ret3;
	if(ZPP_CutVert.zpp_pool == null) {
		ret3 = new ZPP_CutVert();
	} else {
		ret3 = ZPP_CutVert.zpp_pool;
		ZPP_CutVert.zpp_pool = ret3.next;
		ret3.next = null;
	}
	ret3.vert = start1;
	ret3.parent = ret3;
	ret3.rank = 0;
	ret3.used = false;
	var firstpath = ret3;
	ZPP_Cutter.paths.add(firstpath);
	var i = verts;
	while(true) {
		var j = i.next;
		var x3 = j.posx;
		var y3 = j.posy;
		var ret4;
		if(ZPP_GeomVert.zpp_pool == null) {
			ret4 = new ZPP_GeomVert();
		} else {
			ret4 = ZPP_GeomVert.zpp_pool;
			ZPP_GeomVert.zpp_pool = ret4.next;
			ret4.next = null;
		}
		ret4.forced = false;
		ret4.x = x3;
		ret4.y = y3;
		var pj = ret4;
		if(i.positive == j.positive) {
			if(start1 == null) {
				start1 = pj.prev = pj.next = pj;
			} else {
				pj.next = start1;
				pj.prev = start1.prev;
				start1.prev.next = pj;
				start1.prev = pj;
			}
		} else {
			var ux = 0.0;
			var uy = 0.0;
			ux = j.posx - i.posx;
			uy = j.posy - i.posy;
			var denom = dy * ux - dx * uy;
			denom = 1 / denom;
			var pax = 0.0;
			var pay = 0.0;
			pax = px - i.posx;
			pay = py - i.posy;
			var s = (uy * pax - ux * pay) * denom;
			if(s < min || s > max) {
				var ret5;
				if(ZPP_CutInt.zpp_pool == null) {
					ret5 = new ZPP_CutInt();
				} else {
					ret5 = ZPP_CutInt.zpp_pool;
					ZPP_CutInt.zpp_pool = ret5.next;
					ret5.next = null;
				}
				ret5.virtualint = true;
				ret5.end = null;
				ret5.start = null;
				ret5.path0 = null;
				ret5.path1 = null;
				ret5.time = s;
				ret5.vertex = false;
				ZPP_Cutter.ints.add(ret5);
				if(start1 == null) {
					start1 = pj.prev = pj.next = pj;
				} else {
					pj.next = start1;
					pj.prev = start1.prev;
					start1.prev.next = pj;
					start1.prev = pj;
				}
			} else if(i.value == 0) {
				var endof = start1.prev;
				start1 = null;
				var x4 = endof.x;
				var y4 = endof.y;
				var ret6;
				if(ZPP_GeomVert.zpp_pool == null) {
					ret6 = new ZPP_GeomVert();
				} else {
					ret6 = ZPP_GeomVert.zpp_pool;
					ZPP_GeomVert.zpp_pool = ret6.next;
					ret6.next = null;
				}
				ret6.forced = false;
				ret6.x = x4;
				ret6.y = y4;
				var obj2 = ret6;
				if(start1 == null) {
					start1 = obj2.prev = obj2.next = obj2;
				} else {
					obj2.next = start1;
					obj2.prev = start1.prev;
					start1.prev.next = obj2;
					start1.prev = obj2;
				}
				if(start1 == null) {
					start1 = pj.prev = pj.next = pj;
				} else {
					pj.next = start1;
					pj.prev = start1.prev;
					start1.prev.next = pj;
					start1.prev = pj;
				}
				var prepath = ZPP_Cutter.paths.head.elt;
				var ret7;
				if(ZPP_CutVert.zpp_pool == null) {
					ret7 = new ZPP_CutVert();
				} else {
					ret7 = ZPP_CutVert.zpp_pool;
					ZPP_CutVert.zpp_pool = ret7.next;
					ret7.next = null;
				}
				ret7.vert = start1;
				ret7.parent = ret7;
				ret7.rank = 0;
				ret7.used = false;
				ZPP_Cutter.paths.add(ret7);
				var postpath = ZPP_Cutter.paths.head.elt;
				var ret8;
				if(ZPP_CutInt.zpp_pool == null) {
					ret8 = new ZPP_CutInt();
				} else {
					ret8 = ZPP_CutInt.zpp_pool;
					ZPP_CutInt.zpp_pool = ret8.next;
					ret8.next = null;
				}
				ret8.virtualint = true;
				ret8.end = endof;
				ret8.start = start1;
				ret8.path0 = prepath;
				ret8.path1 = postpath;
				ret8.time = s;
				ret8.vertex = false;
				ZPP_Cutter.ints.add(ret8);
			} else if(j.value == 0) {
				if(start1 == null) {
					start1 = pj.prev = pj.next = pj;
				} else {
					pj.next = start1;
					pj.prev = start1.prev;
					start1.prev.next = pj;
					start1.prev = pj;
				}
				var endof1 = start1.prev;
				start1 = null;
				var x5 = j.posx;
				var y5 = j.posy;
				var ret9;
				if(ZPP_GeomVert.zpp_pool == null) {
					ret9 = new ZPP_GeomVert();
				} else {
					ret9 = ZPP_GeomVert.zpp_pool;
					ZPP_GeomVert.zpp_pool = ret9.next;
					ret9.next = null;
				}
				ret9.forced = false;
				ret9.x = x5;
				ret9.y = y5;
				var obj3 = ret9;
				if(start1 == null) {
					start1 = obj3.prev = obj3.next = obj3;
				} else {
					obj3.next = start1;
					obj3.prev = start1.prev;
					start1.prev.next = obj3;
					start1.prev = obj3;
				}
				var prepath1 = ZPP_Cutter.paths.head.elt;
				var ret10;
				if(ZPP_CutVert.zpp_pool == null) {
					ret10 = new ZPP_CutVert();
				} else {
					ret10 = ZPP_CutVert.zpp_pool;
					ZPP_CutVert.zpp_pool = ret10.next;
					ret10.next = null;
				}
				ret10.vert = start1;
				ret10.parent = ret10;
				ret10.rank = 0;
				ret10.used = false;
				ZPP_Cutter.paths.add(ret10);
				var postpath1 = ZPP_Cutter.paths.head.elt;
				var ret11;
				if(ZPP_CutInt.zpp_pool == null) {
					ret11 = new ZPP_CutInt();
				} else {
					ret11 = ZPP_CutInt.zpp_pool;
					ZPP_CutInt.zpp_pool = ret11.next;
					ret11.next = null;
				}
				ret11.virtualint = true;
				ret11.end = endof1;
				ret11.start = start1;
				ret11.path0 = prepath1;
				ret11.path1 = postpath1;
				ret11.time = s;
				ret11.vertex = false;
				ZPP_Cutter.ints.add(ret11);
			} else {
				var t1 = (dy * pax - dx * pay) * denom;
				var qx = 0.0;
				var qy = 0.0;
				qx = i.posx;
				qy = i.posy;
				qx += ux * t1;
				qy += uy * t1;
				var ret12;
				if(ZPP_GeomVert.zpp_pool == null) {
					ret12 = new ZPP_GeomVert();
				} else {
					ret12 = ZPP_GeomVert.zpp_pool;
					ZPP_GeomVert.zpp_pool = ret12.next;
					ret12.next = null;
				}
				ret12.forced = false;
				ret12.x = qx;
				ret12.y = qy;
				var obj4 = ret12;
				if(start1 == null) {
					start1 = obj4.prev = obj4.next = obj4;
				} else {
					obj4.next = start1;
					obj4.prev = start1.prev;
					start1.prev.next = obj4;
					start1.prev = obj4;
				}
				var endof2 = start1.prev;
				start1 = null;
				var ret13;
				if(ZPP_GeomVert.zpp_pool == null) {
					ret13 = new ZPP_GeomVert();
				} else {
					ret13 = ZPP_GeomVert.zpp_pool;
					ZPP_GeomVert.zpp_pool = ret13.next;
					ret13.next = null;
				}
				ret13.forced = false;
				ret13.x = qx;
				ret13.y = qy;
				var obj5 = ret13;
				if(start1 == null) {
					start1 = obj5.prev = obj5.next = obj5;
				} else {
					obj5.next = start1;
					obj5.prev = start1.prev;
					start1.prev.next = obj5;
					start1.prev = obj5;
				}
				if(start1 == null) {
					start1 = pj.prev = pj.next = pj;
				} else {
					pj.next = start1;
					pj.prev = start1.prev;
					start1.prev.next = pj;
					start1.prev = pj;
				}
				var prepath2 = ZPP_Cutter.paths.head.elt;
				var ret14;
				if(ZPP_CutVert.zpp_pool == null) {
					ret14 = new ZPP_CutVert();
				} else {
					ret14 = ZPP_CutVert.zpp_pool;
					ZPP_CutVert.zpp_pool = ret14.next;
					ret14.next = null;
				}
				ret14.vert = start1;
				ret14.parent = ret14;
				ret14.rank = 0;
				ret14.used = false;
				ZPP_Cutter.paths.add(ret14);
				var postpath2 = ZPP_Cutter.paths.head.elt;
				var ret15;
				if(ZPP_CutInt.zpp_pool == null) {
					ret15 = new ZPP_CutInt();
				} else {
					ret15 = ZPP_CutInt.zpp_pool;
					ZPP_CutInt.zpp_pool = ret15.next;
					ret15.next = null;
				}
				ret15.virtualint = false;
				ret15.end = endof2;
				ret15.start = start1;
				ret15.path0 = prepath2;
				ret15.path1 = postpath2;
				ret15.time = s;
				ret15.vertex = false;
				ZPP_Cutter.ints.add(ret15);
			}
		}
		i = i.next;
		if(!(i != verts)) {
			break;
		}
	}
	var endof3 = start1.prev;
	endof3.next.prev = origin.prev;
	origin.prev.next = endof3.next;
	endof3.next = origin;
	origin.prev = endof3;
	var lastpath = ZPP_Cutter.paths.head.elt;
	var xr;
	if(firstpath == firstpath.parent) {
		xr = firstpath;
	} else {
		var obj6 = firstpath;
		var stack = null;
		while(obj6 != obj6.parent) {
			var nxt = obj6.parent;
			obj6.parent = stack;
			stack = obj6;
			obj6 = nxt;
		}
		while(stack != null) {
			var nxt1 = stack.parent;
			stack.parent = obj6;
			stack = nxt1;
		}
		xr = obj6;
	}
	var yr;
	if(lastpath == lastpath.parent) {
		yr = lastpath;
	} else {
		var obj7 = lastpath;
		var stack1 = null;
		while(obj7 != obj7.parent) {
			var nxt2 = obj7.parent;
			obj7.parent = stack1;
			stack1 = obj7;
			obj7 = nxt2;
		}
		while(stack1 != null) {
			var nxt3 = stack1.parent;
			stack1.parent = obj7;
			stack1 = nxt3;
		}
		yr = obj7;
	}
	if(xr != yr) {
		if(xr.rank < yr.rank) {
			xr.parent = yr;
		} else if(xr.rank > yr.rank) {
			yr.parent = xr;
		} else {
			yr.parent = xr;
			xr.rank++;
		}
	}
	var xxlist = ZPP_Cutter.ints;
	if(xxlist.head != null && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt4 = null;
		var listSize = 1;
		var numMerges;
		var leftSize;
		var rightSize;
		while(true) {
			numMerges = 0;
			left = head;
			head = null;
			tail = head;
			while(left != null) {
				++numMerges;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					++leftSize;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt4 = right;
						right = right.next;
						--rightSize;
					} else if(rightSize == 0 || right == null) {
						nxt4 = left;
						left = left.next;
						--leftSize;
					} else if(left.elt.time < right.elt.time) {
						nxt4 = left;
						left = left.next;
						--leftSize;
					} else {
						nxt4 = right;
						right = right.next;
						--rightSize;
					}
					if(tail != null) {
						tail.next = nxt4;
					} else {
						head = nxt4;
					}
					tail = nxt4;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
			if(!(numMerges > 1)) {
				break;
			}
		}
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
	while(ZPP_Cutter.ints.head != null) {
		var i1 = ZPP_Cutter.ints.pop_unsafe();
		var j1 = ZPP_Cutter.ints.pop_unsafe();
		if(!i1.virtualint && !j1.virtualint) {
			i1.end.next.prev = j1.start.prev;
			j1.start.prev.next = i1.end.next;
			i1.end.next = j1.start;
			j1.start.prev = i1.end;
			j1.end.next.prev = i1.start.prev;
			i1.start.prev.next = j1.end.next;
			j1.end.next = i1.start;
			i1.start.prev = j1.end;
			var xr1;
			if(i1.path0 == i1.path0.parent) {
				xr1 = i1.path0;
			} else {
				var obj8 = i1.path0;
				var stack2 = null;
				while(obj8 != obj8.parent) {
					var nxt5 = obj8.parent;
					obj8.parent = stack2;
					stack2 = obj8;
					obj8 = nxt5;
				}
				while(stack2 != null) {
					var nxt6 = stack2.parent;
					stack2.parent = obj8;
					stack2 = nxt6;
				}
				xr1 = obj8;
			}
			var yr1;
			if(j1.path1 == j1.path1.parent) {
				yr1 = j1.path1;
			} else {
				var obj9 = j1.path1;
				var stack3 = null;
				while(obj9 != obj9.parent) {
					var nxt7 = obj9.parent;
					obj9.parent = stack3;
					stack3 = obj9;
					obj9 = nxt7;
				}
				while(stack3 != null) {
					var nxt8 = stack3.parent;
					stack3.parent = obj9;
					stack3 = nxt8;
				}
				yr1 = obj9;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) {
					xr1.parent = yr1;
				} else if(xr1.rank > yr1.rank) {
					yr1.parent = xr1;
				} else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
			var xr2;
			if(i1.path1 == i1.path1.parent) {
				xr2 = i1.path1;
			} else {
				var obj10 = i1.path1;
				var stack4 = null;
				while(obj10 != obj10.parent) {
					var nxt9 = obj10.parent;
					obj10.parent = stack4;
					stack4 = obj10;
					obj10 = nxt9;
				}
				while(stack4 != null) {
					var nxt10 = stack4.parent;
					stack4.parent = obj10;
					stack4 = nxt10;
				}
				xr2 = obj10;
			}
			var yr2;
			if(j1.path0 == j1.path0.parent) {
				yr2 = j1.path0;
			} else {
				var obj11 = j1.path0;
				var stack5 = null;
				while(obj11 != obj11.parent) {
					var nxt11 = obj11.parent;
					obj11.parent = stack5;
					stack5 = obj11;
					obj11 = nxt11;
				}
				while(stack5 != null) {
					var nxt12 = stack5.parent;
					stack5.parent = obj11;
					stack5 = nxt12;
				}
				yr2 = obj11;
			}
			if(xr2 != yr2) {
				if(xr2.rank < yr2.rank) {
					xr2.parent = yr2;
				} else if(xr2.rank > yr2.rank) {
					yr2.parent = xr2;
				} else {
					yr2.parent = xr2;
					xr2.rank++;
				}
			}
		} else if(i1.virtualint && !j1.virtualint) {
			var tmp;
			if(j1.end != null && j1.end.prev == j1.end) {
				j1.end.next = j1.end.prev = null;
				var o = j1.end;
				if(o.wrap != null) {
					o.wrap.zpp_inner._inuse = false;
					var _this4 = o.wrap;
					if(_this4 != null && _this4.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this5 = _this4.zpp_inner;
					if(_this5._immutable) {
						throw new js._Boot.HaxeError("Error: Vec2 is immutable");
					}
					if(_this5._isimmutable != null) {
						_this5._isimmutable();
					}
					if(_this4.zpp_inner._inuse) {
						throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
					}
					var inner = _this4.zpp_inner;
					_this4.zpp_inner.outer = null;
					_this4.zpp_inner = null;
					_this4.zpp_pool = null;
					if(ZPP_PubPool.nextVec2 != null) {
						ZPP_PubPool.nextVec2.zpp_pool = _this4;
					} else {
						ZPP_PubPool.poolVec2 = _this4;
					}
					ZPP_PubPool.nextVec2 = _this4;
					_this4.zpp_disp = true;
					if(inner.outer != null) {
						inner.outer.zpp_inner = null;
						inner.outer = null;
					}
					inner._isimmutable = null;
					inner._validate = null;
					inner._invalidate = null;
					inner.next = ZPP_Vec2.zpp_pool;
					ZPP_Vec2.zpp_pool = inner;
					o.wrap = null;
				}
				o.prev = o.next = null;
				o.next = ZPP_GeomVert.zpp_pool;
				ZPP_GeomVert.zpp_pool = o;
				tmp = null;
			} else {
				var retnodes = j1.end.prev;
				j1.end.prev.next = j1.end.next;
				j1.end.next.prev = j1.end.prev;
				j1.end.next = j1.end.prev = null;
				var o1 = j1.end;
				if(o1.wrap != null) {
					o1.wrap.zpp_inner._inuse = false;
					var _this6 = o1.wrap;
					if(_this6 != null && _this6.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this7 = _this6.zpp_inner;
					if(_this7._immutable) {
						throw new js._Boot.HaxeError("Error: Vec2 is immutable");
					}
					if(_this7._isimmutable != null) {
						_this7._isimmutable();
					}
					if(_this6.zpp_inner._inuse) {
						throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
					}
					var inner1 = _this6.zpp_inner;
					_this6.zpp_inner.outer = null;
					_this6.zpp_inner = null;
					_this6.zpp_pool = null;
					if(ZPP_PubPool.nextVec2 != null) {
						ZPP_PubPool.nextVec2.zpp_pool = _this6;
					} else {
						ZPP_PubPool.poolVec2 = _this6;
					}
					ZPP_PubPool.nextVec2 = _this6;
					_this6.zpp_disp = true;
					if(inner1.outer != null) {
						inner1.outer.zpp_inner = null;
						inner1.outer = null;
					}
					inner1._isimmutable = null;
					inner1._validate = null;
					inner1._invalidate = null;
					inner1.next = ZPP_Vec2.zpp_pool;
					ZPP_Vec2.zpp_pool = inner1;
					o1.wrap = null;
				}
				o1.prev = o1.next = null;
				o1.next = ZPP_GeomVert.zpp_pool;
				ZPP_GeomVert.zpp_pool = o1;
				j1.end = null;
				tmp = retnodes;
			}
			j1.end = tmp;
			if(!j1.vertex) {
				if(j1.end != j1.path0.vert) {
					j1.start.x = j1.end.x;
					j1.start.y = j1.end.y;
					var tmp1;
					if(j1.end != null && j1.end.prev == j1.end) {
						j1.end.next = j1.end.prev = null;
						var o2 = j1.end;
						if(o2.wrap != null) {
							o2.wrap.zpp_inner._inuse = false;
							var _this8 = o2.wrap;
							if(_this8 != null && _this8.zpp_disp) {
								throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
							}
							var _this9 = _this8.zpp_inner;
							if(_this9._immutable) {
								throw new js._Boot.HaxeError("Error: Vec2 is immutable");
							}
							if(_this9._isimmutable != null) {
								_this9._isimmutable();
							}
							if(_this8.zpp_inner._inuse) {
								throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
							}
							var inner2 = _this8.zpp_inner;
							_this8.zpp_inner.outer = null;
							_this8.zpp_inner = null;
							_this8.zpp_pool = null;
							if(ZPP_PubPool.nextVec2 != null) {
								ZPP_PubPool.nextVec2.zpp_pool = _this8;
							} else {
								ZPP_PubPool.poolVec2 = _this8;
							}
							ZPP_PubPool.nextVec2 = _this8;
							_this8.zpp_disp = true;
							if(inner2.outer != null) {
								inner2.outer.zpp_inner = null;
								inner2.outer = null;
							}
							inner2._isimmutable = null;
							inner2._validate = null;
							inner2._invalidate = null;
							inner2.next = ZPP_Vec2.zpp_pool;
							ZPP_Vec2.zpp_pool = inner2;
							o2.wrap = null;
						}
						o2.prev = o2.next = null;
						o2.next = ZPP_GeomVert.zpp_pool;
						ZPP_GeomVert.zpp_pool = o2;
						tmp1 = null;
					} else {
						var retnodes1 = j1.end.prev;
						j1.end.prev.next = j1.end.next;
						j1.end.next.prev = j1.end.prev;
						j1.end.next = j1.end.prev = null;
						var o3 = j1.end;
						if(o3.wrap != null) {
							o3.wrap.zpp_inner._inuse = false;
							var _this10 = o3.wrap;
							if(_this10 != null && _this10.zpp_disp) {
								throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
							}
							var _this11 = _this10.zpp_inner;
							if(_this11._immutable) {
								throw new js._Boot.HaxeError("Error: Vec2 is immutable");
							}
							if(_this11._isimmutable != null) {
								_this11._isimmutable();
							}
							if(_this10.zpp_inner._inuse) {
								throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
							}
							var inner3 = _this10.zpp_inner;
							_this10.zpp_inner.outer = null;
							_this10.zpp_inner = null;
							_this10.zpp_pool = null;
							if(ZPP_PubPool.nextVec2 != null) {
								ZPP_PubPool.nextVec2.zpp_pool = _this10;
							} else {
								ZPP_PubPool.poolVec2 = _this10;
							}
							ZPP_PubPool.nextVec2 = _this10;
							_this10.zpp_disp = true;
							if(inner3.outer != null) {
								inner3.outer.zpp_inner = null;
								inner3.outer = null;
							}
							inner3._isimmutable = null;
							inner3._validate = null;
							inner3._invalidate = null;
							inner3.next = ZPP_Vec2.zpp_pool;
							ZPP_Vec2.zpp_pool = inner3;
							o3.wrap = null;
						}
						o3.prev = o3.next = null;
						o3.next = ZPP_GeomVert.zpp_pool;
						ZPP_GeomVert.zpp_pool = o3;
						j1.end = null;
						tmp1 = retnodes1;
					}
					j1.end = tmp1;
				} else {
					var n = j1.start.next;
					j1.start.x = n.x;
					j1.start.y = n.y;
					if(n != null && n.prev == n) {
						n.next = n.prev = null;
						var o4 = n;
						if(o4.wrap != null) {
							o4.wrap.zpp_inner._inuse = false;
							var _this12 = o4.wrap;
							if(_this12 != null && _this12.zpp_disp) {
								throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
							}
							var _this13 = _this12.zpp_inner;
							if(_this13._immutable) {
								throw new js._Boot.HaxeError("Error: Vec2 is immutable");
							}
							if(_this13._isimmutable != null) {
								_this13._isimmutable();
							}
							if(_this12.zpp_inner._inuse) {
								throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
							}
							var inner4 = _this12.zpp_inner;
							_this12.zpp_inner.outer = null;
							_this12.zpp_inner = null;
							_this12.zpp_pool = null;
							if(ZPP_PubPool.nextVec2 != null) {
								ZPP_PubPool.nextVec2.zpp_pool = _this12;
							} else {
								ZPP_PubPool.poolVec2 = _this12;
							}
							ZPP_PubPool.nextVec2 = _this12;
							_this12.zpp_disp = true;
							if(inner4.outer != null) {
								inner4.outer.zpp_inner = null;
								inner4.outer = null;
							}
							inner4._isimmutable = null;
							inner4._validate = null;
							inner4._invalidate = null;
							inner4.next = ZPP_Vec2.zpp_pool;
							ZPP_Vec2.zpp_pool = inner4;
							o4.wrap = null;
						}
						o4.prev = o4.next = null;
						o4.next = ZPP_GeomVert.zpp_pool;
						ZPP_GeomVert.zpp_pool = o4;
						n = null;
					} else {
						n.prev.next = n.next;
						n.next.prev = n.prev;
						n.next = n.prev = null;
						var o5 = n;
						if(o5.wrap != null) {
							o5.wrap.zpp_inner._inuse = false;
							var _this14 = o5.wrap;
							if(_this14 != null && _this14.zpp_disp) {
								throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
							}
							var _this15 = _this14.zpp_inner;
							if(_this15._immutable) {
								throw new js._Boot.HaxeError("Error: Vec2 is immutable");
							}
							if(_this15._isimmutable != null) {
								_this15._isimmutable();
							}
							if(_this14.zpp_inner._inuse) {
								throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
							}
							var inner5 = _this14.zpp_inner;
							_this14.zpp_inner.outer = null;
							_this14.zpp_inner = null;
							_this14.zpp_pool = null;
							if(ZPP_PubPool.nextVec2 != null) {
								ZPP_PubPool.nextVec2.zpp_pool = _this14;
							} else {
								ZPP_PubPool.poolVec2 = _this14;
							}
							ZPP_PubPool.nextVec2 = _this14;
							_this14.zpp_disp = true;
							if(inner5.outer != null) {
								inner5.outer.zpp_inner = null;
								inner5.outer = null;
							}
							inner5._isimmutable = null;
							inner5._validate = null;
							inner5._invalidate = null;
							inner5.next = ZPP_Vec2.zpp_pool;
							ZPP_Vec2.zpp_pool = inner5;
							o5.wrap = null;
						}
						o5.prev = o5.next = null;
						o5.next = ZPP_GeomVert.zpp_pool;
						ZPP_GeomVert.zpp_pool = o5;
					}
				}
			}
			j1.end.next.prev = j1.start.prev;
			j1.start.prev.next = j1.end.next;
			j1.end.next = j1.start;
			j1.start.prev = j1.end;
			var xr3;
			if(j1.path0 == j1.path0.parent) {
				xr3 = j1.path0;
			} else {
				var obj12 = j1.path0;
				var stack6 = null;
				while(obj12 != obj12.parent) {
					var nxt13 = obj12.parent;
					obj12.parent = stack6;
					stack6 = obj12;
					obj12 = nxt13;
				}
				while(stack6 != null) {
					var nxt14 = stack6.parent;
					stack6.parent = obj12;
					stack6 = nxt14;
				}
				xr3 = obj12;
			}
			var yr3;
			if(j1.path1 == j1.path1.parent) {
				yr3 = j1.path1;
			} else {
				var obj13 = j1.path1;
				var stack7 = null;
				while(obj13 != obj13.parent) {
					var nxt15 = obj13.parent;
					obj13.parent = stack7;
					stack7 = obj13;
					obj13 = nxt15;
				}
				while(stack7 != null) {
					var nxt16 = stack7.parent;
					stack7.parent = obj13;
					stack7 = nxt16;
				}
				yr3 = obj13;
			}
			if(xr3 != yr3) {
				if(xr3.rank < yr3.rank) {
					xr3.parent = yr3;
				} else if(xr3.rank > yr3.rank) {
					yr3.parent = xr3;
				} else {
					yr3.parent = xr3;
					xr3.rank++;
				}
			}
		} else if(j1.virtualint && !i1.virtualint) {
			var tmp2;
			if(i1.end != null && i1.end.prev == i1.end) {
				i1.end.next = i1.end.prev = null;
				var o6 = i1.end;
				if(o6.wrap != null) {
					o6.wrap.zpp_inner._inuse = false;
					var _this16 = o6.wrap;
					if(_this16 != null && _this16.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this17 = _this16.zpp_inner;
					if(_this17._immutable) {
						throw new js._Boot.HaxeError("Error: Vec2 is immutable");
					}
					if(_this17._isimmutable != null) {
						_this17._isimmutable();
					}
					if(_this16.zpp_inner._inuse) {
						throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
					}
					var inner6 = _this16.zpp_inner;
					_this16.zpp_inner.outer = null;
					_this16.zpp_inner = null;
					_this16.zpp_pool = null;
					if(ZPP_PubPool.nextVec2 != null) {
						ZPP_PubPool.nextVec2.zpp_pool = _this16;
					} else {
						ZPP_PubPool.poolVec2 = _this16;
					}
					ZPP_PubPool.nextVec2 = _this16;
					_this16.zpp_disp = true;
					if(inner6.outer != null) {
						inner6.outer.zpp_inner = null;
						inner6.outer = null;
					}
					inner6._isimmutable = null;
					inner6._validate = null;
					inner6._invalidate = null;
					inner6.next = ZPP_Vec2.zpp_pool;
					ZPP_Vec2.zpp_pool = inner6;
					o6.wrap = null;
				}
				o6.prev = o6.next = null;
				o6.next = ZPP_GeomVert.zpp_pool;
				ZPP_GeomVert.zpp_pool = o6;
				tmp2 = null;
			} else {
				var retnodes2 = i1.end.prev;
				i1.end.prev.next = i1.end.next;
				i1.end.next.prev = i1.end.prev;
				i1.end.next = i1.end.prev = null;
				var o7 = i1.end;
				if(o7.wrap != null) {
					o7.wrap.zpp_inner._inuse = false;
					var _this18 = o7.wrap;
					if(_this18 != null && _this18.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this19 = _this18.zpp_inner;
					if(_this19._immutable) {
						throw new js._Boot.HaxeError("Error: Vec2 is immutable");
					}
					if(_this19._isimmutable != null) {
						_this19._isimmutable();
					}
					if(_this18.zpp_inner._inuse) {
						throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
					}
					var inner7 = _this18.zpp_inner;
					_this18.zpp_inner.outer = null;
					_this18.zpp_inner = null;
					_this18.zpp_pool = null;
					if(ZPP_PubPool.nextVec2 != null) {
						ZPP_PubPool.nextVec2.zpp_pool = _this18;
					} else {
						ZPP_PubPool.poolVec2 = _this18;
					}
					ZPP_PubPool.nextVec2 = _this18;
					_this18.zpp_disp = true;
					if(inner7.outer != null) {
						inner7.outer.zpp_inner = null;
						inner7.outer = null;
					}
					inner7._isimmutable = null;
					inner7._validate = null;
					inner7._invalidate = null;
					inner7.next = ZPP_Vec2.zpp_pool;
					ZPP_Vec2.zpp_pool = inner7;
					o7.wrap = null;
				}
				o7.prev = o7.next = null;
				o7.next = ZPP_GeomVert.zpp_pool;
				ZPP_GeomVert.zpp_pool = o7;
				i1.end = null;
				tmp2 = retnodes2;
			}
			i1.end = tmp2;
			if(!i1.vertex) {
				if(i1.end != i1.path0.vert) {
					i1.start.x = i1.end.x;
					i1.start.y = i1.end.y;
					var tmp3;
					if(i1.end != null && i1.end.prev == i1.end) {
						i1.end.next = i1.end.prev = null;
						var o8 = i1.end;
						if(o8.wrap != null) {
							o8.wrap.zpp_inner._inuse = false;
							var _this20 = o8.wrap;
							if(_this20 != null && _this20.zpp_disp) {
								throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
							}
							var _this21 = _this20.zpp_inner;
							if(_this21._immutable) {
								throw new js._Boot.HaxeError("Error: Vec2 is immutable");
							}
							if(_this21._isimmutable != null) {
								_this21._isimmutable();
							}
							if(_this20.zpp_inner._inuse) {
								throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
							}
							var inner8 = _this20.zpp_inner;
							_this20.zpp_inner.outer = null;
							_this20.zpp_inner = null;
							_this20.zpp_pool = null;
							if(ZPP_PubPool.nextVec2 != null) {
								ZPP_PubPool.nextVec2.zpp_pool = _this20;
							} else {
								ZPP_PubPool.poolVec2 = _this20;
							}
							ZPP_PubPool.nextVec2 = _this20;
							_this20.zpp_disp = true;
							if(inner8.outer != null) {
								inner8.outer.zpp_inner = null;
								inner8.outer = null;
							}
							inner8._isimmutable = null;
							inner8._validate = null;
							inner8._invalidate = null;
							inner8.next = ZPP_Vec2.zpp_pool;
							ZPP_Vec2.zpp_pool = inner8;
							o8.wrap = null;
						}
						o8.prev = o8.next = null;
						o8.next = ZPP_GeomVert.zpp_pool;
						ZPP_GeomVert.zpp_pool = o8;
						tmp3 = null;
					} else {
						var retnodes3 = i1.end.prev;
						i1.end.prev.next = i1.end.next;
						i1.end.next.prev = i1.end.prev;
						i1.end.next = i1.end.prev = null;
						var o9 = i1.end;
						if(o9.wrap != null) {
							o9.wrap.zpp_inner._inuse = false;
							var _this22 = o9.wrap;
							if(_this22 != null && _this22.zpp_disp) {
								throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
							}
							var _this23 = _this22.zpp_inner;
							if(_this23._immutable) {
								throw new js._Boot.HaxeError("Error: Vec2 is immutable");
							}
							if(_this23._isimmutable != null) {
								_this23._isimmutable();
							}
							if(_this22.zpp_inner._inuse) {
								throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
							}
							var inner9 = _this22.zpp_inner;
							_this22.zpp_inner.outer = null;
							_this22.zpp_inner = null;
							_this22.zpp_pool = null;
							if(ZPP_PubPool.nextVec2 != null) {
								ZPP_PubPool.nextVec2.zpp_pool = _this22;
							} else {
								ZPP_PubPool.poolVec2 = _this22;
							}
							ZPP_PubPool.nextVec2 = _this22;
							_this22.zpp_disp = true;
							if(inner9.outer != null) {
								inner9.outer.zpp_inner = null;
								inner9.outer = null;
							}
							inner9._isimmutable = null;
							inner9._validate = null;
							inner9._invalidate = null;
							inner9.next = ZPP_Vec2.zpp_pool;
							ZPP_Vec2.zpp_pool = inner9;
							o9.wrap = null;
						}
						o9.prev = o9.next = null;
						o9.next = ZPP_GeomVert.zpp_pool;
						ZPP_GeomVert.zpp_pool = o9;
						i1.end = null;
						tmp3 = retnodes3;
					}
					i1.end = tmp3;
				} else {
					var n1 = i1.start.next;
					i1.start.x = n1.x;
					i1.start.y = n1.y;
					if(n1 != null && n1.prev == n1) {
						n1.next = n1.prev = null;
						var o10 = n1;
						if(o10.wrap != null) {
							o10.wrap.zpp_inner._inuse = false;
							var _this24 = o10.wrap;
							if(_this24 != null && _this24.zpp_disp) {
								throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
							}
							var _this25 = _this24.zpp_inner;
							if(_this25._immutable) {
								throw new js._Boot.HaxeError("Error: Vec2 is immutable");
							}
							if(_this25._isimmutable != null) {
								_this25._isimmutable();
							}
							if(_this24.zpp_inner._inuse) {
								throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
							}
							var inner10 = _this24.zpp_inner;
							_this24.zpp_inner.outer = null;
							_this24.zpp_inner = null;
							_this24.zpp_pool = null;
							if(ZPP_PubPool.nextVec2 != null) {
								ZPP_PubPool.nextVec2.zpp_pool = _this24;
							} else {
								ZPP_PubPool.poolVec2 = _this24;
							}
							ZPP_PubPool.nextVec2 = _this24;
							_this24.zpp_disp = true;
							if(inner10.outer != null) {
								inner10.outer.zpp_inner = null;
								inner10.outer = null;
							}
							inner10._isimmutable = null;
							inner10._validate = null;
							inner10._invalidate = null;
							inner10.next = ZPP_Vec2.zpp_pool;
							ZPP_Vec2.zpp_pool = inner10;
							o10.wrap = null;
						}
						o10.prev = o10.next = null;
						o10.next = ZPP_GeomVert.zpp_pool;
						ZPP_GeomVert.zpp_pool = o10;
						n1 = null;
					} else {
						n1.prev.next = n1.next;
						n1.next.prev = n1.prev;
						n1.next = n1.prev = null;
						var o11 = n1;
						if(o11.wrap != null) {
							o11.wrap.zpp_inner._inuse = false;
							var _this26 = o11.wrap;
							if(_this26 != null && _this26.zpp_disp) {
								throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
							}
							var _this27 = _this26.zpp_inner;
							if(_this27._immutable) {
								throw new js._Boot.HaxeError("Error: Vec2 is immutable");
							}
							if(_this27._isimmutable != null) {
								_this27._isimmutable();
							}
							if(_this26.zpp_inner._inuse) {
								throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
							}
							var inner11 = _this26.zpp_inner;
							_this26.zpp_inner.outer = null;
							_this26.zpp_inner = null;
							_this26.zpp_pool = null;
							if(ZPP_PubPool.nextVec2 != null) {
								ZPP_PubPool.nextVec2.zpp_pool = _this26;
							} else {
								ZPP_PubPool.poolVec2 = _this26;
							}
							ZPP_PubPool.nextVec2 = _this26;
							_this26.zpp_disp = true;
							if(inner11.outer != null) {
								inner11.outer.zpp_inner = null;
								inner11.outer = null;
							}
							inner11._isimmutable = null;
							inner11._validate = null;
							inner11._invalidate = null;
							inner11.next = ZPP_Vec2.zpp_pool;
							ZPP_Vec2.zpp_pool = inner11;
							o11.wrap = null;
						}
						o11.prev = o11.next = null;
						o11.next = ZPP_GeomVert.zpp_pool;
						ZPP_GeomVert.zpp_pool = o11;
					}
				}
			}
			i1.end.next.prev = i1.start.prev;
			i1.start.prev.next = i1.end.next;
			i1.end.next = i1.start;
			i1.start.prev = i1.end;
			var xr4;
			if(i1.path0 == i1.path0.parent) {
				xr4 = i1.path0;
			} else {
				var obj14 = i1.path0;
				var stack8 = null;
				while(obj14 != obj14.parent) {
					var nxt17 = obj14.parent;
					obj14.parent = stack8;
					stack8 = obj14;
					obj14 = nxt17;
				}
				while(stack8 != null) {
					var nxt18 = stack8.parent;
					stack8.parent = obj14;
					stack8 = nxt18;
				}
				xr4 = obj14;
			}
			var yr4;
			if(i1.path1 == i1.path1.parent) {
				yr4 = i1.path1;
			} else {
				var obj15 = i1.path1;
				var stack9 = null;
				while(obj15 != obj15.parent) {
					var nxt19 = obj15.parent;
					obj15.parent = stack9;
					stack9 = obj15;
					obj15 = nxt19;
				}
				while(stack9 != null) {
					var nxt20 = stack9.parent;
					stack9.parent = obj15;
					stack9 = nxt20;
				}
				yr4 = obj15;
			}
			if(xr4 != yr4) {
				if(xr4.rank < yr4.rank) {
					xr4.parent = yr4;
				} else if(xr4.rank > yr4.rank) {
					yr4.parent = xr4;
				} else {
					yr4.parent = xr4;
					xr4.rank++;
				}
			}
		}
		i1.end = i1.start = null;
		i1.path0 = i1.path1 = null;
		i1.next = ZPP_CutInt.zpp_pool;
		ZPP_CutInt.zpp_pool = i1;
		j1.end = j1.start = null;
		j1.path0 = j1.path1 = null;
		j1.next = ZPP_CutInt.zpp_pool;
		ZPP_CutInt.zpp_pool = j1;
	}
	var ret16 = output == null?new GeomPolyList():output;
	var cx_ite = ZPP_Cutter.paths.head;
	while(cx_ite != null) {
		var p5 = cx_ite.elt;
		var poly;
		if(p5 == p5.parent) {
			poly = p5;
		} else {
			var obj16 = p5;
			var stack10 = null;
			while(obj16 != obj16.parent) {
				var nxt21 = obj16.parent;
				obj16.parent = stack10;
				stack10 = obj16;
				obj16 = nxt21;
			}
			while(stack10 != null) {
				var nxt22 = stack10.parent;
				stack10.parent = obj16;
				stack10 = nxt22;
			}
			poly = obj16;
		}
		if(poly.used) {
			cx_ite = cx_ite.next;
			continue;
		}
		poly.used = true;
		var p6 = poly.vert;
		var skip = true;
		while(poly.vert != null && (skip || p6 != poly.vert)) {
			skip = false;
			if(p6.x == p6.next.x && p6.y == p6.next.y) {
				if(p6 == poly.vert) {
					poly.vert = p6.next == p6?null:p6.next;
					skip = true;
				}
				if(p6 != null && p6.prev == p6) {
					p6.next = p6.prev = null;
					p6 = null;
					p6 = p6;
				} else {
					var retnodes4 = p6.next;
					p6.prev.next = p6.next;
					p6.next.prev = p6.prev;
					p6.next = p6.prev = null;
					p6 = null;
					p6 = retnodes4;
				}
			} else {
				p6 = p6.next;
			}
		}
		if(poly.vert != null) {
			var gp = GeomPoly.get();
			gp.zpp_inner.vertices = poly.vert;
			if(ret16.zpp_inner.reverse_flag) {
				ret16.push(gp);
			} else {
				ret16.unshift(gp);
			}
		}
		cx_ite = cx_ite.next;
	}
	while(ZPP_Cutter.paths.head != null) {
		var p7 = ZPP_Cutter.paths.pop_unsafe();
		p7.vert = null;
		p7.parent = null;
		p7.next = ZPP_CutVert.zpp_pool;
		ZPP_CutVert.zpp_pool = p7;
	}
	while(verts != null) if(verts != null && verts.prev == verts) {
		verts.next = verts.prev = null;
		var o12 = verts;
		o12.vert = null;
		o12.parent = null;
		o12.next = ZPP_CutVert.zpp_pool;
		ZPP_CutVert.zpp_pool = o12;
		verts = null;
		verts = verts;
	} else {
		var retnodes5 = verts.next;
		verts.prev.next = verts.next;
		verts.next.prev = verts.prev;
		verts.next = verts.prev = null;
		var o13 = verts;
		o13.vert = null;
		o13.parent = null;
		o13.next = ZPP_CutVert.zpp_pool;
		ZPP_CutVert.zpp_pool = o13;
		verts = null;
		verts = retnodes5;
	}
	return ret16;
};
ZPP_Cutter.prototype.__class__ = ZPP_Cutter;
var ZPP_Geom = zpp_nape.geom.ZPP_Geom = function() { };
ZPP_Geom.__name__ = ["zpp_nape","geom","ZPP_Geom"];
ZPP_Geom.validateShape = function(s) {
	if(s.type == 1) {
		var _this = s.polygon;
		if(_this.zip_gaxi) {
			if(_this.body != null) {
				_this.zip_gaxi = false;
				_this.validate_laxi();
				var _this1 = _this.body;
				if(_this1.zip_axis) {
					_this1.zip_axis = false;
					_this1.axisx = Math.sin(_this1.rot);
					_this1.axisy = Math.cos(_this1.rot);
				}
				if(_this.zip_gverts) {
					if(_this.body != null) {
						_this.zip_gverts = false;
						_this.validate_lverts();
						var _this2 = _this.body;
						if(_this2.zip_axis) {
							_this2.zip_axis = false;
							_this2.axisx = Math.sin(_this2.rot);
							_this2.axisy = Math.cos(_this2.rot);
						}
						var li = _this.lverts.next;
						var cx_ite = _this.gverts.next;
						while(cx_ite != null) {
							var g = cx_ite;
							var l = li;
							li = li.next;
							g.x = _this.body.posx + (_this.body.axisy * l.x - _this.body.axisx * l.y);
							g.y = _this.body.posy + (l.x * _this.body.axisx + l.y * _this.body.axisy);
							cx_ite = cx_ite.next;
						}
					}
				}
				var ite = _this.edges.head;
				var cx_ite1 = _this.gverts.next;
				var u = cx_ite1;
				cx_ite1 = cx_ite1.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var e = ite.elt;
					ite = ite.next;
					e.gp0 = u;
					e.gp1 = v;
					e.gnormx = _this.body.axisy * e.lnormx - _this.body.axisx * e.lnormy;
					e.gnormy = e.lnormx * _this.body.axisx + e.lnormy * _this.body.axisy;
					e.gprojection = _this.body.posx * e.gnormx + _this.body.posy * e.gnormy + e.lprojection;
					if(e.wrap_gnorm != null) {
						e.wrap_gnorm.zpp_inner.x = e.gnormx;
						e.wrap_gnorm.zpp_inner.y = e.gnormy;
					}
					e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
					e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
					u = v;
					cx_ite1 = cx_ite1.next;
				}
				var e1 = ite.elt;
				e1.gp0 = u;
				e1.gp1 = _this.gverts.next;
				e1.gnormx = _this.body.axisy * e1.lnormx - _this.body.axisx * e1.lnormy;
				e1.gnormy = e1.lnormx * _this.body.axisx + e1.lnormy * _this.body.axisy;
				e1.gprojection = _this.body.posx * e1.gnormx + _this.body.posy * e1.gnormy + e1.lprojection;
				if(e1.wrap_gnorm != null) {
					e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
					e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
				}
				e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
				e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
			}
		}
	}
	if(s.zip_aabb) {
		if(s.body != null) {
			s.zip_aabb = false;
			if(s.type == 0) {
				var _this3 = s.circle;
				if(_this3.zip_worldCOM) {
					if(_this3.body != null) {
						_this3.zip_worldCOM = false;
						if(_this3.zip_localCOM) {
							_this3.zip_localCOM = false;
							if(_this3.type == 1) {
								var _this4 = _this3.polygon;
								if(_this4.lverts.next == null) {
									throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
								}
								if(_this4.lverts.next.next == null) {
									_this4.localCOMx = _this4.lverts.next.x;
									_this4.localCOMy = _this4.lverts.next.y;
								} else if(_this4.lverts.next.next.next == null) {
									_this4.localCOMx = _this4.lverts.next.x;
									_this4.localCOMy = _this4.lverts.next.y;
									_this4.localCOMx += _this4.lverts.next.next.x;
									_this4.localCOMy += _this4.lverts.next.next.y;
									_this4.localCOMx *= 0.5;
									_this4.localCOMy *= 0.5;
								} else {
									_this4.localCOMx = 0;
									_this4.localCOMy = 0;
									var area = 0.0;
									var cx_ite2 = _this4.lverts.next;
									var u1 = cx_ite2;
									cx_ite2 = cx_ite2.next;
									var v1 = cx_ite2;
									cx_ite2 = cx_ite2.next;
									while(cx_ite2 != null) {
										var w = cx_ite2;
										area += v1.x * (w.y - u1.y);
										var cf = w.y * v1.x - w.x * v1.y;
										_this4.localCOMx += (v1.x + w.x) * cf;
										_this4.localCOMy += (v1.y + w.y) * cf;
										u1 = v1;
										v1 = w;
										cx_ite2 = cx_ite2.next;
									}
									cx_ite2 = _this4.lverts.next;
									var w1 = cx_ite2;
									area += v1.x * (w1.y - u1.y);
									var cf1 = w1.y * v1.x - w1.x * v1.y;
									_this4.localCOMx += (v1.x + w1.x) * cf1;
									_this4.localCOMy += (v1.y + w1.y) * cf1;
									u1 = v1;
									cx_ite2 = cx_ite2.next;
									var w2 = cx_ite2;
									area += w1.x * (w2.y - u1.y);
									var cf2 = w2.y * w1.x - w2.x * w1.y;
									_this4.localCOMx += (w1.x + w2.x) * cf2;
									_this4.localCOMy += (w1.y + w2.y) * cf2;
									area = 1 / (3 * area);
									var t = area;
									_this4.localCOMx *= t;
									_this4.localCOMy *= t;
								}
							}
							if(_this3.wrap_localCOM != null) {
								_this3.wrap_localCOM.zpp_inner.x = _this3.localCOMx;
								_this3.wrap_localCOM.zpp_inner.y = _this3.localCOMy;
							}
						}
						var _this5 = _this3.body;
						if(_this5.zip_axis) {
							_this5.zip_axis = false;
							_this5.axisx = Math.sin(_this5.rot);
							_this5.axisy = Math.cos(_this5.rot);
						}
						_this3.worldCOMx = _this3.body.posx + (_this3.body.axisy * _this3.localCOMx - _this3.body.axisx * _this3.localCOMy);
						_this3.worldCOMy = _this3.body.posy + (_this3.localCOMx * _this3.body.axisx + _this3.localCOMy * _this3.body.axisy);
					}
				}
				var rx = _this3.radius;
				var ry = _this3.radius;
				_this3.aabb.minx = _this3.worldCOMx - rx;
				_this3.aabb.miny = _this3.worldCOMy - ry;
				_this3.aabb.maxx = _this3.worldCOMx + rx;
				_this3.aabb.maxy = _this3.worldCOMy + ry;
			} else {
				var _this6 = s.polygon;
				if(_this6.zip_gverts) {
					if(_this6.body != null) {
						_this6.zip_gverts = false;
						_this6.validate_lverts();
						var _this7 = _this6.body;
						if(_this7.zip_axis) {
							_this7.zip_axis = false;
							_this7.axisx = Math.sin(_this7.rot);
							_this7.axisy = Math.cos(_this7.rot);
						}
						var li1 = _this6.lverts.next;
						var cx_ite3 = _this6.gverts.next;
						while(cx_ite3 != null) {
							var g1 = cx_ite3;
							var l1 = li1;
							li1 = li1.next;
							g1.x = _this6.body.posx + (_this6.body.axisy * l1.x - _this6.body.axisx * l1.y);
							g1.y = _this6.body.posy + (l1.x * _this6.body.axisx + l1.y * _this6.body.axisy);
							cx_ite3 = cx_ite3.next;
						}
					}
				}
				if(_this6.lverts.next == null) {
					throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful bounds");
				}
				var p0 = _this6.gverts.next;
				_this6.aabb.minx = p0.x;
				_this6.aabb.miny = p0.y;
				_this6.aabb.maxx = p0.x;
				_this6.aabb.maxy = p0.y;
				var cx_ite4 = _this6.gverts.next.next;
				while(cx_ite4 != null) {
					var p = cx_ite4;
					if(p.x < _this6.aabb.minx) {
						_this6.aabb.minx = p.x;
					}
					if(p.x > _this6.aabb.maxx) {
						_this6.aabb.maxx = p.x;
					}
					if(p.y < _this6.aabb.miny) {
						_this6.aabb.miny = p.y;
					}
					if(p.y > _this6.aabb.maxy) {
						_this6.aabb.maxy = p.y;
					}
					cx_ite4 = cx_ite4.next;
				}
			}
		}
	}
	if(s.zip_worldCOM) {
		if(s.body != null) {
			s.zip_worldCOM = false;
			if(s.zip_localCOM) {
				s.zip_localCOM = false;
				if(s.type == 1) {
					var _this8 = s.polygon;
					if(_this8.lverts.next == null) {
						throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
					}
					if(_this8.lverts.next.next == null) {
						_this8.localCOMx = _this8.lverts.next.x;
						_this8.localCOMy = _this8.lverts.next.y;
					} else if(_this8.lverts.next.next.next == null) {
						_this8.localCOMx = _this8.lverts.next.x;
						_this8.localCOMy = _this8.lverts.next.y;
						_this8.localCOMx += _this8.lverts.next.next.x;
						_this8.localCOMy += _this8.lverts.next.next.y;
						_this8.localCOMx *= 0.5;
						_this8.localCOMy *= 0.5;
					} else {
						_this8.localCOMx = 0;
						_this8.localCOMy = 0;
						var area1 = 0.0;
						var cx_ite5 = _this8.lverts.next;
						var u2 = cx_ite5;
						cx_ite5 = cx_ite5.next;
						var v2 = cx_ite5;
						cx_ite5 = cx_ite5.next;
						while(cx_ite5 != null) {
							var w3 = cx_ite5;
							area1 += v2.x * (w3.y - u2.y);
							var cf3 = w3.y * v2.x - w3.x * v2.y;
							_this8.localCOMx += (v2.x + w3.x) * cf3;
							_this8.localCOMy += (v2.y + w3.y) * cf3;
							u2 = v2;
							v2 = w3;
							cx_ite5 = cx_ite5.next;
						}
						cx_ite5 = _this8.lverts.next;
						var w4 = cx_ite5;
						area1 += v2.x * (w4.y - u2.y);
						var cf4 = w4.y * v2.x - w4.x * v2.y;
						_this8.localCOMx += (v2.x + w4.x) * cf4;
						_this8.localCOMy += (v2.y + w4.y) * cf4;
						u2 = v2;
						cx_ite5 = cx_ite5.next;
						var w5 = cx_ite5;
						area1 += w4.x * (w5.y - u2.y);
						var cf5 = w5.y * w4.x - w5.x * w4.y;
						_this8.localCOMx += (w4.x + w5.x) * cf5;
						_this8.localCOMy += (w4.y + w5.y) * cf5;
						area1 = 1 / (3 * area1);
						var t1 = area1;
						_this8.localCOMx *= t1;
						_this8.localCOMy *= t1;
					}
				}
				if(s.wrap_localCOM != null) {
					s.wrap_localCOM.zpp_inner.x = s.localCOMx;
					s.wrap_localCOM.zpp_inner.y = s.localCOMy;
				}
			}
			var _this9 = s.body;
			if(_this9.zip_axis) {
				_this9.zip_axis = false;
				_this9.axisx = Math.sin(_this9.rot);
				_this9.axisy = Math.cos(_this9.rot);
			}
			s.worldCOMx = s.body.posx + (s.body.axisy * s.localCOMx - s.body.axisx * s.localCOMy);
			s.worldCOMy = s.body.posy + (s.localCOMx * s.body.axisx + s.localCOMy * s.body.axisy);
		}
	}
};
ZPP_Geom.prototype.__class__ = ZPP_Geom;
var ZPP_GeomVert = zpp_nape.geom.ZPP_GeomVert = function() {
	this.forced = false;
	this.wrap = null;
	this.next = null;
	this.prev = null;
	this.y = 0.0;
	this.x = 0.0;
};
ZPP_GeomVert.__name__ = ["zpp_nape","geom","ZPP_GeomVert"];
ZPP_GeomVert.get = function(x,y) {
	var ret;
	if(ZPP_GeomVert.zpp_pool == null) {
		ret = new ZPP_GeomVert();
	} else {
		ret = ZPP_GeomVert.zpp_pool;
		ZPP_GeomVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.forced = false;
	ret.x = x;
	ret.y = y;
	return ret;
};
ZPP_GeomVert.prototype.x = null;
ZPP_GeomVert.prototype.y = null;
ZPP_GeomVert.prototype.prev = null;
ZPP_GeomVert.prototype.next = null;
ZPP_GeomVert.prototype.wrap = null;
ZPP_GeomVert.prototype.forced = null;
ZPP_GeomVert.prototype.free = function() {
	if(this.wrap != null) {
		this.wrap.zpp_inner._inuse = false;
		var _this = this.wrap;
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this1._isimmutable != null) {
			_this1._isimmutable();
		}
		if(_this.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = _this.zpp_inner;
		_this.zpp_inner.outer = null;
		_this.zpp_inner = null;
		_this.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = _this;
		} else {
			ZPP_PubPool.poolVec2 = _this;
		}
		ZPP_PubPool.nextVec2 = _this;
		_this.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
		this.wrap = null;
	}
	this.prev = this.next = null;
};
ZPP_GeomVert.prototype.alloc = function() {
	this.forced = false;
};
ZPP_GeomVert.prototype.wrapper = function() {
	if(this.wrap == null) {
		var x = this.x;
		var y = this.y;
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(ZPP_PubPool.poolVec2 == null) {
			ret = new Vec2();
		} else {
			ret = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(ZPP_Vec2.zpp_pool == null) {
				ret1 = new ZPP_Vec2();
			} else {
				ret1 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(x != x || y != y) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		this.wrap = ret;
		this.wrap.zpp_inner._inuse = true;
		this.wrap.zpp_inner._invalidate = $bind(this,this.modwrap);
		this.wrap.zpp_inner._validate = $bind(this,this.getwrap);
	}
	return this.wrap;
};
ZPP_GeomVert.prototype.modwrap = function(n) {
	this.x = n.x;
	this.y = n.y;
};
ZPP_GeomVert.prototype.getwrap = function() {
	this.wrap.zpp_inner.x = this.x;
	this.wrap.zpp_inner.y = this.y;
};
ZPP_GeomVert.prototype.__class__ = ZPP_GeomVert;
var ZPP_GeomPoly = zpp_nape.geom.ZPP_GeomPoly = function(outer) {
	this.vertices = null;
	this.outer = null;
	this.outer = outer;
};
ZPP_GeomPoly.__name__ = ["zpp_nape","geom","ZPP_GeomPoly"];
ZPP_GeomPoly.prototype.outer = null;
ZPP_GeomPoly.prototype.vertices = null;
ZPP_GeomPoly.prototype.__class__ = ZPP_GeomPoly;
var ZPP_GeomVertexIterator = zpp_nape.geom.ZPP_GeomVertexIterator = function() {
	this.next = null;
	this.outer = null;
	this.forward = false;
	this.first = false;
	this.start = null;
	this.ptr = null;
	ZPP_GeomVertexIterator.internal = true;
	this.outer = new GeomVertexIterator();
	ZPP_GeomVertexIterator.internal = false;
};
ZPP_GeomVertexIterator.__name__ = ["zpp_nape","geom","ZPP_GeomVertexIterator"];
ZPP_GeomVertexIterator.get = function(poly,forward) {
	var ret;
	if(ZPP_GeomVertexIterator.zpp_pool == null) {
		ret = new ZPP_GeomVertexIterator();
	} else {
		ret = ZPP_GeomVertexIterator.zpp_pool;
		ZPP_GeomVertexIterator.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.outer.zpp_inner = ret;
	ret.ptr = poly;
	ret.forward = forward;
	ret.start = poly;
	ret.first = poly != null;
	return ret.outer;
};
ZPP_GeomVertexIterator.prototype.ptr = null;
ZPP_GeomVertexIterator.prototype.start = null;
ZPP_GeomVertexIterator.prototype.first = null;
ZPP_GeomVertexIterator.prototype.forward = null;
ZPP_GeomVertexIterator.prototype.outer = null;
ZPP_GeomVertexIterator.prototype.next = null;
ZPP_GeomVertexIterator.prototype.free = function() {
	this.outer.zpp_inner = null;
	this.ptr = this.start = null;
};
ZPP_GeomVertexIterator.prototype.alloc = function() {
};
ZPP_GeomVertexIterator.prototype.__class__ = ZPP_GeomVertexIterator;
var ZPP_MarchSpan = zpp_nape.geom.ZPP_MarchSpan = function() {
	this.next = null;
	this.out = false;
	this.rank = 0;
	this.parent = null;
	this.parent = this;
};
ZPP_MarchSpan.__name__ = ["zpp_nape","geom","ZPP_MarchSpan"];
ZPP_MarchSpan.prototype.parent = null;
ZPP_MarchSpan.prototype.rank = null;
ZPP_MarchSpan.prototype.out = null;
ZPP_MarchSpan.prototype.next = null;
ZPP_MarchSpan.prototype.free = function() {
	this.parent = this;
};
ZPP_MarchSpan.prototype.alloc = function() {
	this.out = false;
	this.rank = 0;
};
ZPP_MarchSpan.prototype.__class__ = ZPP_MarchSpan;
var ZPP_MarchPair = zpp_nape.geom.ZPP_MarchPair = function() {
	this.next = null;
	this.spanr = null;
	this.span2 = null;
	this.span1 = null;
	this.pd = null;
	this.okeyr = 0;
	this.keyr = 0;
	this.pr = null;
	this.okey2 = 0;
	this.key2 = 0;
	this.p2 = null;
	this.okey1 = 0;
	this.key1 = 0;
	this.p1 = null;
};
ZPP_MarchPair.__name__ = ["zpp_nape","geom","ZPP_MarchPair"];
ZPP_MarchPair.prototype.p1 = null;
ZPP_MarchPair.prototype.key1 = null;
ZPP_MarchPair.prototype.okey1 = null;
ZPP_MarchPair.prototype.p2 = null;
ZPP_MarchPair.prototype.key2 = null;
ZPP_MarchPair.prototype.okey2 = null;
ZPP_MarchPair.prototype.pr = null;
ZPP_MarchPair.prototype.keyr = null;
ZPP_MarchPair.prototype.okeyr = null;
ZPP_MarchPair.prototype.pd = null;
ZPP_MarchPair.prototype.span1 = null;
ZPP_MarchPair.prototype.span2 = null;
ZPP_MarchPair.prototype.spanr = null;
ZPP_MarchPair.prototype.next = null;
ZPP_MarchPair.prototype.free = function() {
	this.p1 = this.p2 = this.pr = this.pd = null;
	this.span1 = this.span2 = this.spanr = null;
};
ZPP_MarchPair.prototype.alloc = function() {
};
ZPP_MarchPair.prototype.__class__ = ZPP_MarchPair;
var ZPP_MarchingSquares = zpp_nape.geom.ZPP_MarchingSquares = function() {
};
ZPP_MarchingSquares.__name__ = ["zpp_nape","geom","ZPP_MarchingSquares"];
ZPP_MarchingSquares.isos = null;
ZPP_MarchingSquares.ints = null;
ZPP_MarchingSquares.map = null;
ZPP_MarchingSquares.run = function(iso,bx0,by0,bx1,by1,cell,quality,combine,ret) {
	var tmp = bx1 - bx0;
	if(cell != null && cell.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = cell.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var xp = tmp / cell.zpp_inner.x;
	var xn = xp | 0;
	var tmp1 = by1 - by0;
	if(cell != null && cell.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = cell.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	var yp = tmp1 / cell.zpp_inner.y;
	var yn = yp | 0;
	if(xp != xn) {
		++xn;
	}
	if(yp != yn) {
		++yn;
	}
	if(combine) {
		if(ZPP_MarchingSquares.map == null) {
			ZPP_MarchingSquares.map = new ZNPArray2_ZPP_MarchPair(xn,yn);
		} else {
			ZPP_MarchingSquares.map.resize(xn,yn,null);
		}
	}
	if(ZPP_MarchingSquares.isos == null) {
		ZPP_MarchingSquares.isos = new ZNPArray2_Float(xn + 1,yn + 1);
	} else {
		ZPP_MarchingSquares.isos.resize(xn + 1,yn + 1,0);
	}
	var _g1 = 0;
	var _g = yn + 1;
	while(_g1 < _g) {
		var y = _g1++;
		var yc;
		if(y == 0) {
			yc = by0;
		} else if(y <= yn) {
			if(cell != null && cell.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = cell.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			yc = by0 + cell.zpp_inner.y * y;
		} else {
			yc = by1;
		}
		var _g3 = 0;
		var _g2 = xn + 1;
		while(_g3 < _g2) {
			var x = _g3++;
			var xc;
			if(x == 0) {
				xc = bx0;
			} else if(x <= xn) {
				if(cell != null && cell.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this3 = cell.zpp_inner;
				if(_this3._validate != null) {
					_this3._validate();
				}
				xc = bx0 + cell.zpp_inner.x * x;
			} else {
				xc = bx1;
			}
			var _this4 = ZPP_MarchingSquares.isos;
			var obj = iso(xc,yc);
			_this4.list[y * _this4.width + x] = obj;
		}
	}
	if(ZPP_MarchingSquares.ints == null) {
		ZPP_MarchingSquares.ints = new ZNPArray2_ZPP_GeomVert(xn + 1,(yn << 1) + 1);
	} else {
		ZPP_MarchingSquares.ints.resize(xn + 1,(yn << 1) + 1,null);
	}
	var spans = null;
	if(combine) {
		if(ZPP_MarchSpan.zpp_pool == null) {
			spans = new ZPP_MarchSpan();
		} else {
			spans = ZPP_MarchSpan.zpp_pool;
			ZPP_MarchSpan.zpp_pool = spans.next;
			spans.next = null;
		}
		spans.out = false;
		spans.rank = 0;
	}
	var py = by0;
	var _g11 = 0;
	var _g4 = yn;
	while(_g11 < _g4) {
		var y1 = _g11++;
		var y0 = py;
		var y11;
		if(y1 == yn - 1) {
			y11 = by1;
		} else {
			if(cell != null && cell.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this5 = cell.zpp_inner;
			if(_this5._validate != null) {
				_this5._validate();
			}
			y11 = by0 + cell.zpp_inner.y * (y1 + 1);
		}
		py = y11;
		var px = bx0;
		var pre = null;
		var _g31 = 0;
		var _g21 = xn;
		while(_g31 < _g21) {
			var x1 = _g31++;
			var x0 = px;
			var x11;
			if(x1 == xn - 1) {
				x11 = bx1;
			} else {
				if(cell != null && cell.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this6 = cell.zpp_inner;
				if(_this6._validate != null) {
					_this6._validate();
				}
				x11 = bx0 + cell.zpp_inner.x * (x1 + 1);
			}
			px = x11;
			var pp = ZPP_MarchingSquares.me.marchSquare(iso,ZPP_MarchingSquares.isos,ZPP_MarchingSquares.ints,x0,y0,x11,y11,x1,y1,x1 == 0 || !combine,y1 == 0 || !combine,x1 == xn - 1 || !combine,y1 == yn - 1 || !combine,quality);
			if(pp == null) {
				pre = null;
				continue;
			}
			if(combine) {
				var pd = pp.p2 != null && pp.okey2 != 14?pp.p2:pp.p1;
				pp.pd = ((pd == pp.p2?pp.okey2:pp.okey1) & 128) == 0?pd.prev:pd.prev.prev;
				var _this7 = ZPP_MarchingSquares.map;
				_this7.list[y1 * _this7.width + x1] = pp;
				var tmp2;
				if(pre != null) {
					var key = pp.key1;
					var flag = key & 1 | (key & 192) >> 5;
					var cnt = 0;
					if((flag & 1) != 0) {
						cnt = 1;
					}
					if((flag & 2) != 0) {
						++cnt;
					}
					if((flag & 4) != 0) {
						++cnt;
					}
					tmp2 = cnt >= 2;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					ZPP_MarchingSquares.me.combLR(pre,pp);
					pp.span1 = pre.spanr;
				} else {
					if(ZPP_MarchSpan.zpp_pool == null) {
						pp.span1 = new ZPP_MarchSpan();
					} else {
						pp.span1 = ZPP_MarchSpan.zpp_pool;
						ZPP_MarchSpan.zpp_pool = pp.span1.next;
						pp.span1.next = null;
					}
					var _this8 = pp.span1;
					_this8.out = false;
					_this8.rank = 0;
					pp.span1.next = spans;
					spans = pp.span1;
				}
				if(pp.p2 != null) {
					if(ZPP_MarchSpan.zpp_pool == null) {
						pp.span2 = new ZPP_MarchSpan();
					} else {
						pp.span2 = ZPP_MarchSpan.zpp_pool;
						ZPP_MarchSpan.zpp_pool = pp.span2.next;
						pp.span2.next = null;
					}
					var _this9 = pp.span2;
					_this9.out = false;
					_this9.rank = 0;
					pp.span2.next = spans;
					spans = pp.span2;
					pp.spanr = pp.span2;
				} else {
					pp.spanr = pp.span1;
				}
				var flag1 = (pp.keyr & 28) >> 2;
				var cnt1 = 0;
				if((flag1 & 1) != 0) {
					cnt1 = 1;
				}
				if((flag1 & 2) != 0) {
					++cnt1;
				}
				if((flag1 & 4) != 0) {
					++cnt1;
				}
				if(cnt1 >= 2) {
					pre = pp;
				} else {
					pre = null;
				}
			} else {
				ZPP_MarchingSquares.me.output(ret,pp.p1);
				if(pp.p2 != null) {
					ZPP_MarchingSquares.me.output(ret,pp.p2);
				}
				pp.p1 = pp.p2 = pp.pr = pp.pd = null;
				pp.span1 = pp.span2 = pp.spanr = null;
				pp.next = ZPP_MarchPair.zpp_pool;
				ZPP_MarchPair.zpp_pool = pp;
			}
		}
	}
	if(!combine) {
		return;
	}
	var _g12 = 1;
	var _g5 = yn;
	while(_g12 < _g5) {
		var y2 = _g12++;
		var pre1 = null;
		var _g32 = 0;
		var _g22 = xn;
		while(_g32 < _g22) {
			var x2 = _g32++;
			var _this10 = ZPP_MarchingSquares.map;
			var b = _this10.list[y2 * _this10.width + x2];
			if(b == null) {
				pre1 = null;
				continue;
			}
			var flag2 = (b.p2 != null && b.okey2 == 14?b.okey2:b.okey1) & 7;
			var cnt2 = 0;
			if((flag2 & 1) != 0) {
				cnt2 = 1;
			}
			if((flag2 & 2) != 0) {
				++cnt2;
			}
			if((flag2 & 4) != 0) {
				++cnt2;
			}
			if(cnt2 < 2) {
				pre1 = null;
				continue;
			}
			var _this11 = ZPP_MarchingSquares.map;
			var a = _this11.list[(y2 - 1) * _this11.width + x2];
			if(a == null) {
				pre1 = null;
				continue;
			}
			var flag3 = ((a.p2 != null && a.okey2 == 56?a.okey2:a.okey1) & 112) >> 4;
			var cnt3 = 0;
			if((flag3 & 1) != 0) {
				cnt3 = 1;
			}
			if((flag3 & 2) != 0) {
				++cnt3;
			}
			if((flag3 & 4) != 0) {
				++cnt3;
			}
			if(cnt3 < 2) {
				pre1 = null;
				continue;
			}
			var ad = a.p2 != null && a.okey2 == 56?a.span2:a.span1;
			var bu = b.p2 != null && b.okey2 == 14?b.span2:b.span1;
			var tmp3;
			if(ad == ad.parent) {
				tmp3 = ad;
			} else {
				var obj1 = ad;
				var stack = null;
				while(obj1 != obj1.parent) {
					var nxt = obj1.parent;
					obj1.parent = stack;
					stack = obj1;
					obj1 = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj1;
					stack = nxt1;
				}
				tmp3 = obj1;
			}
			var tmp4;
			if(bu == bu.parent) {
				tmp4 = bu;
			} else {
				var obj2 = bu;
				var stack1 = null;
				while(obj2 != obj2.parent) {
					var nxt2 = obj2.parent;
					obj2.parent = stack1;
					stack1 = obj2;
					obj2 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj2;
					stack1 = nxt3;
				}
				tmp4 = obj2;
			}
			if(tmp3 == tmp4) {
				if(pre1 != bu) {
					ZPP_MarchingSquares.me.combUD_virtual(a,b);
				}
			} else {
				var xr;
				if(ad == ad.parent) {
					xr = ad;
				} else {
					var obj3 = ad;
					var stack2 = null;
					while(obj3 != obj3.parent) {
						var nxt4 = obj3.parent;
						obj3.parent = stack2;
						stack2 = obj3;
						obj3 = nxt4;
					}
					while(stack2 != null) {
						var nxt5 = stack2.parent;
						stack2.parent = obj3;
						stack2 = nxt5;
					}
					xr = obj3;
				}
				var yr;
				if(bu == bu.parent) {
					yr = bu;
				} else {
					var obj4 = bu;
					var stack3 = null;
					while(obj4 != obj4.parent) {
						var nxt6 = obj4.parent;
						obj4.parent = stack3;
						stack3 = obj4;
						obj4 = nxt6;
					}
					while(stack3 != null) {
						var nxt7 = stack3.parent;
						stack3.parent = obj4;
						stack3 = nxt7;
					}
					yr = obj4;
				}
				if(xr != yr) {
					if(xr.rank < yr.rank) {
						xr.parent = yr;
					} else if(xr.rank > yr.rank) {
						yr.parent = xr;
					} else {
						yr.parent = xr;
						xr.rank++;
					}
				}
				ZPP_MarchingSquares.me.combUD(a,b);
			}
			if(((bu == b.span2?b.okey2:b.okey1) & 4) != 0) {
				pre1 = bu;
			} else {
				pre1 = null;
			}
		}
	}
	var _g13 = 0;
	var _g6 = yn;
	while(_g13 < _g6) {
		var y3 = _g13++;
		var _g33 = 0;
		var _g23 = xn;
		while(_g33 < _g23) {
			var x3 = _g33++;
			var _this12 = ZPP_MarchingSquares.map;
			var p = _this12.list[y3 * _this12.width + x3];
			if(p == null) {
				continue;
			}
			var root;
			if(p.span1 == p.span1.parent) {
				root = p.span1;
			} else {
				var obj5 = p.span1;
				var stack4 = null;
				while(obj5 != obj5.parent) {
					var nxt8 = obj5.parent;
					obj5.parent = stack4;
					stack4 = obj5;
					obj5 = nxt8;
				}
				while(stack4 != null) {
					var nxt9 = stack4.parent;
					stack4.parent = obj5;
					stack4 = nxt9;
				}
				root = obj5;
			}
			if(!root.out) {
				root.out = true;
				ZPP_MarchingSquares.me.output(ret,p.p1);
			}
			if(p.p2 != null) {
				if(p.span2 == p.span2.parent) {
					root = p.span2;
				} else {
					var obj6 = p.span2;
					var stack5 = null;
					while(obj6 != obj6.parent) {
						var nxt10 = obj6.parent;
						obj6.parent = stack5;
						stack5 = obj6;
						obj6 = nxt10;
					}
					while(stack5 != null) {
						var nxt11 = stack5.parent;
						stack5.parent = obj6;
						stack5 = nxt11;
					}
					root = obj6;
				}
				if(!root.out) {
					root.out = true;
					ZPP_MarchingSquares.me.output(ret,p.p2);
				}
			}
			p.p1 = p.p2 = p.pr = p.pd = null;
			p.span1 = p.span2 = p.spanr = null;
			p.next = ZPP_MarchPair.zpp_pool;
			ZPP_MarchPair.zpp_pool = p;
			var _this13 = ZPP_MarchingSquares.map;
			_this13.list[y3 * _this13.width + x3] = null;
		}
	}
	while(spans != null) {
		var t = spans;
		spans = t.next;
		t.parent = t;
		t.next = ZPP_MarchSpan.zpp_pool;
		ZPP_MarchSpan.zpp_pool = t;
	}
};
ZPP_MarchingSquares.ISO = function(iso,x,y) {
	return iso(x,y);
};
ZPP_MarchingSquares.prototype.output = function(ret,poly) {
	var tmp;
	if(poly == null || poly.next == poly || poly.next == poly.prev) {
		tmp = true;
	} else {
		var area = 0.0;
		var F = poly;
		var L = poly;
		if(F != null) {
			var nite = F;
			while(true) {
				var v = nite;
				area += v.x * (v.next.y - v.prev.y);
				nite = nite.next;
				if(!(nite != L)) {
					break;
				}
			}
		}
		var a = area * 0.5;
		tmp = a * a < Config.epsilon * Config.epsilon;
	}
	if(tmp) {
		while(poly != null) if(poly != null && poly.prev == poly) {
			poly.next = poly.prev = null;
			poly = null;
			poly = poly;
		} else {
			var retnodes = poly.next;
			poly.prev.next = poly.next;
			poly.next.prev = poly.prev;
			poly.next = poly.prev = null;
			poly = null;
			poly = retnodes;
		}
		return;
	}
	var gp = GeomPoly.get();
	gp.zpp_inner.vertices = poly;
	if(ret.zpp_inner.reverse_flag) {
		ret.push(gp);
	} else {
		ret.unshift(gp);
	}
};
ZPP_MarchingSquares.prototype.linkright = function(poly,key) {
	var kind = key & 7;
	if(kind == 0) {
		return poly;
	} else if(kind == 3) {
		return poly.next.next;
	} else {
		return poly.next;
	}
};
ZPP_MarchingSquares.prototype.linkleft = function(poly,key) {
	if((key & 1) == 0) {
		return poly.prev;
	} else {
		return poly;
	}
};
ZPP_MarchingSquares.prototype.linkdown = function(poly,key) {
	if((key & 128) == 0) {
		return poly.prev;
	} else {
		return poly.prev.prev;
	}
};
ZPP_MarchingSquares.prototype.linkup = function(poly,key) {
	return poly;
};
ZPP_MarchingSquares.prototype.combLR = function(a,b) {
	var poly = a.pr;
	var kind = a.okeyr & 7;
	var ap = kind == 0?poly:kind == 3?poly.next.next:poly.next;
	var poly1 = b.p1;
	var bp = (b.okey1 & 1) == 0?poly1.prev:poly1;
	var ap2 = ap.next;
	var bp2 = bp.prev;
	if((a.keyr & 4) != 0) {
		if(b.pr == b.p1) {
			b.pr = ap.prev;
		}
		b.p1 = ap.prev;
		ap.prev.next = bp.next;
		bp.next.prev = ap.prev;
		var o = ap;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			var _this = o.wrap;
			if(_this != null && _this.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = _this.zpp_inner;
			if(_this1._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this1._isimmutable != null) {
				_this1._isimmutable();
			}
			if(_this.zpp_inner._inuse) {
				throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
			}
			var inner = _this.zpp_inner;
			_this.zpp_inner.outer = null;
			_this.zpp_inner = null;
			_this.zpp_pool = null;
			if(ZPP_PubPool.nextVec2 != null) {
				ZPP_PubPool.nextVec2.zpp_pool = _this;
			} else {
				ZPP_PubPool.poolVec2 = _this;
			}
			ZPP_PubPool.nextVec2 = _this;
			_this.zpp_disp = true;
			if(inner.outer != null) {
				inner.outer.zpp_inner = null;
				inner.outer = null;
			}
			inner._isimmutable = null;
			inner._validate = null;
			inner._invalidate = null;
			inner.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = inner;
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = ZPP_GeomVert.zpp_pool;
		ZPP_GeomVert.zpp_pool = o;
	} else {
		ap.next = bp.next;
		bp.next.prev = ap;
	}
	var o1 = bp;
	if(o1.wrap != null) {
		o1.wrap.zpp_inner._inuse = false;
		var _this2 = o1.wrap;
		if(_this2 != null && _this2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this3 = _this2.zpp_inner;
		if(_this3._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this3._isimmutable != null) {
			_this3._isimmutable();
		}
		if(_this2.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = _this2.zpp_inner;
		_this2.zpp_inner.outer = null;
		_this2.zpp_inner = null;
		_this2.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = _this2;
		} else {
			ZPP_PubPool.poolVec2 = _this2;
		}
		ZPP_PubPool.nextVec2 = _this2;
		_this2.zpp_disp = true;
		if(inner1.outer != null) {
			inner1.outer.zpp_inner = null;
			inner1.outer = null;
		}
		inner1._isimmutable = null;
		inner1._validate = null;
		inner1._invalidate = null;
		inner1.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner1;
		o1.wrap = null;
	}
	o1.prev = o1.next = null;
	o1.next = ZPP_GeomVert.zpp_pool;
	ZPP_GeomVert.zpp_pool = o1;
	if((a.keyr & 16) != 0) {
		b.pd = ap2.next;
		ap2.next.prev = bp2.prev;
		bp2.prev.next = ap2.next;
		if(ap2.wrap != null) {
			ap2.wrap.zpp_inner._inuse = false;
			var _this4 = ap2.wrap;
			if(_this4 != null && _this4.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this5 = _this4.zpp_inner;
			if(_this5._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this5._isimmutable != null) {
				_this5._isimmutable();
			}
			if(_this4.zpp_inner._inuse) {
				throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
			}
			var inner2 = _this4.zpp_inner;
			_this4.zpp_inner.outer = null;
			_this4.zpp_inner = null;
			_this4.zpp_pool = null;
			if(ZPP_PubPool.nextVec2 != null) {
				ZPP_PubPool.nextVec2.zpp_pool = _this4;
			} else {
				ZPP_PubPool.poolVec2 = _this4;
			}
			ZPP_PubPool.nextVec2 = _this4;
			_this4.zpp_disp = true;
			if(inner2.outer != null) {
				inner2.outer.zpp_inner = null;
				inner2.outer = null;
			}
			inner2._isimmutable = null;
			inner2._validate = null;
			inner2._invalidate = null;
			inner2.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = inner2;
			ap2.wrap = null;
		}
		ap2.prev = ap2.next = null;
		ap2.next = ZPP_GeomVert.zpp_pool;
		ZPP_GeomVert.zpp_pool = ap2;
	} else {
		ap2.prev = bp2.prev;
		bp2.prev.next = ap2;
	}
	if(bp2.wrap != null) {
		bp2.wrap.zpp_inner._inuse = false;
		var _this6 = bp2.wrap;
		if(_this6 != null && _this6.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this7 = _this6.zpp_inner;
		if(_this7._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this7._isimmutable != null) {
			_this7._isimmutable();
		}
		if(_this6.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner3 = _this6.zpp_inner;
		_this6.zpp_inner.outer = null;
		_this6.zpp_inner = null;
		_this6.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = _this6;
		} else {
			ZPP_PubPool.poolVec2 = _this6;
		}
		ZPP_PubPool.nextVec2 = _this6;
		_this6.zpp_disp = true;
		if(inner3.outer != null) {
			inner3.outer.zpp_inner = null;
			inner3.outer = null;
		}
		inner3._isimmutable = null;
		inner3._validate = null;
		inner3._invalidate = null;
		inner3.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner3;
		bp2.wrap = null;
	}
	bp2.prev = bp2.next = null;
	bp2.next = ZPP_GeomVert.zpp_pool;
	ZPP_GeomVert.zpp_pool = bp2;
};
ZPP_MarchingSquares.prototype.combUD = function(a,b) {
	var tmp = a.p2 != null && a.key2 == 56;
	var bu = b.p2 != null && b.key2 == 14?b.p2:b.p1;
	var ap = a.pd;
	var bp = bu;
	var ap2 = ap.prev;
	var bp2 = bp.next;
	bp.next = ap.next;
	ap.next.prev = bp;
	if(ap.wrap != null) {
		ap.wrap.zpp_inner._inuse = false;
		var _this = ap.wrap;
		if(_this != null && _this.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = _this.zpp_inner;
		if(_this1._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this1._isimmutable != null) {
			_this1._isimmutable();
		}
		if(_this.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner = _this.zpp_inner;
		_this.zpp_inner.outer = null;
		_this.zpp_inner = null;
		_this.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = _this;
		} else {
			ZPP_PubPool.poolVec2 = _this;
		}
		ZPP_PubPool.nextVec2 = _this;
		_this.zpp_disp = true;
		if(inner.outer != null) {
			inner.outer.zpp_inner = null;
			inner.outer = null;
		}
		inner._isimmutable = null;
		inner._validate = null;
		inner._invalidate = null;
		inner.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner;
		ap.wrap = null;
	}
	ap.prev = ap.next = null;
	ap.next = ZPP_GeomVert.zpp_pool;
	ZPP_GeomVert.zpp_pool = ap;
	bp2.prev = ap2.prev;
	ap2.prev.next = bp2;
	if(ap2 == a.p1) {
		a.p1 = bp2;
	}
	if(ap2.wrap != null) {
		ap2.wrap.zpp_inner._inuse = false;
		var _this2 = ap2.wrap;
		if(_this2 != null && _this2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this3 = _this2.zpp_inner;
		if(_this3._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this3._isimmutable != null) {
			_this3._isimmutable();
		}
		if(_this2.zpp_inner._inuse) {
			throw new js._Boot.HaxeError("Error: This Vec2 is not disposable");
		}
		var inner1 = _this2.zpp_inner;
		_this2.zpp_inner.outer = null;
		_this2.zpp_inner = null;
		_this2.zpp_pool = null;
		if(ZPP_PubPool.nextVec2 != null) {
			ZPP_PubPool.nextVec2.zpp_pool = _this2;
		} else {
			ZPP_PubPool.poolVec2 = _this2;
		}
		ZPP_PubPool.nextVec2 = _this2;
		_this2.zpp_disp = true;
		if(inner1.outer != null) {
			inner1.outer.zpp_inner = null;
			inner1.outer = null;
		}
		inner1._isimmutable = null;
		inner1._validate = null;
		inner1._invalidate = null;
		inner1.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = inner1;
		ap2.wrap = null;
	}
	ap2.prev = ap2.next = null;
	ap2.next = ZPP_GeomVert.zpp_pool;
	ZPP_GeomVert.zpp_pool = ap2;
};
ZPP_MarchingSquares.prototype.combUD_virtual = function(a,b) {
	var tmp = a.p2 != null && a.key2 == 56;
	var bu = b.p2 != null && b.key2 == 14?b.p2:b.p1;
	var ap = a.pd;
	var bp = bu;
	ap.forced = bp.forced = ap.prev.forced = bp.next.forced = true;
};
ZPP_MarchingSquares.prototype.combLeft = function(key) {
	var flag = key & 1 | (key & 192) >> 5;
	var cnt = 0;
	if((flag & 1) != 0) {
		cnt = 1;
	}
	if((flag & 2) != 0) {
		++cnt;
	}
	if((flag & 4) != 0) {
		++cnt;
	}
	return cnt >= 2;
};
ZPP_MarchingSquares.prototype.combRight = function(key) {
	var flag = (key & 28) >> 2;
	var cnt = 0;
	if((flag & 1) != 0) {
		cnt = 1;
	}
	if((flag & 2) != 0) {
		++cnt;
	}
	if((flag & 4) != 0) {
		++cnt;
	}
	return cnt >= 2;
};
ZPP_MarchingSquares.prototype.combUp = function(key) {
	var flag = key & 7;
	var cnt = 0;
	if((flag & 1) != 0) {
		cnt = 1;
	}
	if((flag & 2) != 0) {
		++cnt;
	}
	if((flag & 4) != 0) {
		++cnt;
	}
	return cnt >= 2;
};
ZPP_MarchingSquares.prototype.combDown = function(key) {
	var flag = (key & 112) >> 4;
	var cnt = 0;
	if((flag & 1) != 0) {
		cnt = 1;
	}
	if((flag & 2) != 0) {
		++cnt;
	}
	if((flag & 4) != 0) {
		++cnt;
	}
	return cnt >= 2;
};
ZPP_MarchingSquares.prototype.comb = function(flag) {
	var cnt = 0;
	if((flag & 1) != 0) {
		cnt = 1;
	}
	if((flag & 2) != 0) {
		++cnt;
	}
	if((flag & 4) != 0) {
		++cnt;
	}
	return cnt >= 2;
};
ZPP_MarchingSquares.prototype.marchSquare = function(iso,isos,ints,x0,y0,x1,y1,xn,yn,fstx,fsty,sndx,sndy,quality) {
	var key = 0;
	var v0 = isos.list[yn * isos.width + xn];
	if(v0 < 0) {
		key = 8;
	}
	var v1 = isos.list[yn * isos.width + (xn + 1)];
	if(v1 < 0) {
		key |= 4;
	}
	var v2 = isos.list[(yn + 1) * isos.width + (xn + 1)];
	if(v2 < 0) {
		key |= 2;
	}
	var v3 = isos.list[(yn + 1) * isos.width + xn];
	if(v3 < 0) {
		key |= 1;
	}
	if(key == 0) {
		return null;
	} else {
		var ret;
		if(ZPP_MarchPair.zpp_pool == null) {
			ret = new ZPP_MarchPair();
		} else {
			ret = ZPP_MarchPair.zpp_pool;
			ZPP_MarchPair.zpp_pool = ret.next;
			ret.next = null;
		}
		if(key != 10 && key != 5) {
			var val = ZPP_MarchingSquares.look_march[key];
			ret.okey1 = val;
			var _g = 0;
			while(_g < 8) {
				var i = _g++;
				if((val & 1 << i) != 0) {
					var p = null;
					if(i == 0) {
						var ret1;
						if(ZPP_GeomVert.zpp_pool == null) {
							ret1 = new ZPP_GeomVert();
						} else {
							ret1 = ZPP_GeomVert.zpp_pool;
							ZPP_GeomVert.zpp_pool = ret1.next;
							ret1.next = null;
						}
						ret1.forced = false;
						ret1.x = x0;
						ret1.y = y0;
						p = ret1;
						if(fstx || fsty) {
							p.forced = true;
						}
					} else if(i == 2) {
						var ret2;
						if(ZPP_GeomVert.zpp_pool == null) {
							ret2 = new ZPP_GeomVert();
						} else {
							ret2 = ZPP_GeomVert.zpp_pool;
							ZPP_GeomVert.zpp_pool = ret2.next;
							ret2.next = null;
						}
						ret2.forced = false;
						ret2.x = x1;
						ret2.y = y0;
						p = ret2;
						if(sndx || fsty) {
							p.forced = true;
						}
					} else if(i == 4) {
						var ret3;
						if(ZPP_GeomVert.zpp_pool == null) {
							ret3 = new ZPP_GeomVert();
						} else {
							ret3 = ZPP_GeomVert.zpp_pool;
							ZPP_GeomVert.zpp_pool = ret3.next;
							ret3.next = null;
						}
						ret3.forced = false;
						ret3.x = x1;
						ret3.y = y1;
						p = ret3;
						if(sndx || sndy) {
							p.forced = true;
						}
					} else if(i == 6) {
						var ret4;
						if(ZPP_GeomVert.zpp_pool == null) {
							ret4 = new ZPP_GeomVert();
						} else {
							ret4 = ZPP_GeomVert.zpp_pool;
							ZPP_GeomVert.zpp_pool = ret4.next;
							ret4.next = null;
						}
						ret4.forced = false;
						ret4.x = x0;
						ret4.y = y1;
						p = ret4;
						if(fstx || sndy) {
							p.forced = true;
						}
					} else if(i == 1) {
						p = ints.list[(yn << 1) * ints.width + xn];
						if(p == null) {
							var x = this.xlerp(x0,x1,y0,v0,v1,iso,quality);
							var ret5;
							if(ZPP_GeomVert.zpp_pool == null) {
								ret5 = new ZPP_GeomVert();
							} else {
								ret5 = ZPP_GeomVert.zpp_pool;
								ZPP_GeomVert.zpp_pool = ret5.next;
								ret5.next = null;
							}
							ret5.forced = false;
							ret5.x = x;
							ret5.y = y0;
							p = ret5;
							ints.list[(yn << 1) * ints.width + xn] = p;
						} else {
							var x2 = p.x;
							var y = p.y;
							var ret6;
							if(ZPP_GeomVert.zpp_pool == null) {
								ret6 = new ZPP_GeomVert();
							} else {
								ret6 = ZPP_GeomVert.zpp_pool;
								ZPP_GeomVert.zpp_pool = ret6.next;
								ret6.next = null;
							}
							ret6.forced = false;
							ret6.x = x2;
							ret6.y = y;
							p = ret6;
						}
						if(fsty) {
							p.forced = true;
						}
						if(p.x == x0 || p.x == x1) {
							if(p.x == x0 && (val & 1) != 0 || p.x == x1 && (val & 4) != 0) {
								val ^= 2;
							}
						}
					} else if(i == 5) {
						p = ints.list[((yn << 1) + 2) * ints.width + xn];
						if(p == null) {
							var x3 = this.xlerp(x0,x1,y1,v3,v2,iso,quality);
							var ret7;
							if(ZPP_GeomVert.zpp_pool == null) {
								ret7 = new ZPP_GeomVert();
							} else {
								ret7 = ZPP_GeomVert.zpp_pool;
								ZPP_GeomVert.zpp_pool = ret7.next;
								ret7.next = null;
							}
							ret7.forced = false;
							ret7.x = x3;
							ret7.y = y1;
							p = ret7;
							ints.list[((yn << 1) + 2) * ints.width + xn] = p;
						} else {
							var x4 = p.x;
							var y2 = p.y;
							var ret8;
							if(ZPP_GeomVert.zpp_pool == null) {
								ret8 = new ZPP_GeomVert();
							} else {
								ret8 = ZPP_GeomVert.zpp_pool;
								ZPP_GeomVert.zpp_pool = ret8.next;
								ret8.next = null;
							}
							ret8.forced = false;
							ret8.x = x4;
							ret8.y = y2;
							p = ret8;
						}
						if(sndy) {
							p.forced = true;
						}
						if(p.x == x0 || p.x == x1) {
							if(p.x == x0 && (val & 64) != 0 || p.x == x1 && (val & 16) != 0) {
								val ^= 32;
							}
						}
					} else if(i == 3) {
						p = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
						if(p == null) {
							var y3 = this.ylerp(y0,y1,x1,v1,v2,iso,quality);
							var ret9;
							if(ZPP_GeomVert.zpp_pool == null) {
								ret9 = new ZPP_GeomVert();
							} else {
								ret9 = ZPP_GeomVert.zpp_pool;
								ZPP_GeomVert.zpp_pool = ret9.next;
								ret9.next = null;
							}
							ret9.forced = false;
							ret9.x = x1;
							ret9.y = y3;
							p = ret9;
							ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
						} else {
							var x5 = p.x;
							var y4 = p.y;
							var ret10;
							if(ZPP_GeomVert.zpp_pool == null) {
								ret10 = new ZPP_GeomVert();
							} else {
								ret10 = ZPP_GeomVert.zpp_pool;
								ZPP_GeomVert.zpp_pool = ret10.next;
								ret10.next = null;
							}
							ret10.forced = false;
							ret10.x = x5;
							ret10.y = y4;
							p = ret10;
						}
						if(sndx) {
							p.forced = true;
						}
						if(p.y == y0 || p.y == y1) {
							if(p.y == y0 && (val & 4) != 0 || p.y == y1 && (val & 16) != 0) {
								val ^= 8;
							}
						}
					} else {
						p = ints.list[((yn << 1) + 1) * ints.width + xn];
						if(p == null) {
							var y5 = this.ylerp(y0,y1,x0,v0,v3,iso,quality);
							var ret11;
							if(ZPP_GeomVert.zpp_pool == null) {
								ret11 = new ZPP_GeomVert();
							} else {
								ret11 = ZPP_GeomVert.zpp_pool;
								ZPP_GeomVert.zpp_pool = ret11.next;
								ret11.next = null;
							}
							ret11.forced = false;
							ret11.x = x0;
							ret11.y = y5;
							p = ret11;
							ints.list[((yn << 1) + 1) * ints.width + xn] = p;
						} else {
							var x6 = p.x;
							var y6 = p.y;
							var ret12;
							if(ZPP_GeomVert.zpp_pool == null) {
								ret12 = new ZPP_GeomVert();
							} else {
								ret12 = ZPP_GeomVert.zpp_pool;
								ZPP_GeomVert.zpp_pool = ret12.next;
								ret12.next = null;
							}
							ret12.forced = false;
							ret12.x = x6;
							ret12.y = y6;
							p = ret12;
						}
						if(fstx) {
							p.forced = true;
						}
						if(p.y == y0 || p.y == y1) {
							if(p.y == y0 && (val & 1) != 0 || p.y == y1 && (val & 64) != 0) {
								val ^= 128;
							}
						}
					}
					var obj = p;
					if(ret.p1 == null) {
						ret.p1 = obj.prev = obj.next = obj;
					} else {
						obj.prev = ret.p1;
						obj.next = ret.p1.next;
						ret.p1.next.prev = obj;
						ret.p1.next = obj;
					}
					ret.p1 = obj;
				}
			}
			ret.p1 = ret.p1.next;
			ret.key1 = val;
			if(val == 1 || val == 4 || val == 16 || val == 64 || val == 3 || val == 12 || val == 48 || val == 192 || val == 129 || val == 6 || val == 24 || val == 96 || val == 5 || val == 20 || val == 80 || val == 65 || val == 17 || val == 68) {
				val = 0;
				ret.key1 = 0;
				ret.p1 = null;
			}
			if(val == 0) {
				ret = null;
			} else {
				ret.pr = ret.p1;
				ret.okeyr = ret.okey1;
				ret.keyr = ret.key1;
			}
		} else {
			var mid = iso(0.5 * (x0 + x1),0.5 * (y0 + y1)) < 0;
			if(key == 10) {
				if(mid) {
					var val1 = 187;
					ret.okey1 = 187;
					var _g1 = 0;
					while(_g1 < 8) {
						var i1 = _g1++;
						if((val1 & 1 << i1) != 0) {
							var p1 = null;
							if(i1 == 0) {
								var ret13;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret13 = new ZPP_GeomVert();
								} else {
									ret13 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret13.next;
									ret13.next = null;
								}
								ret13.forced = false;
								ret13.x = x0;
								ret13.y = y0;
								p1 = ret13;
								if(fstx || fsty) {
									p1.forced = true;
								}
							} else if(i1 == 2) {
								var ret14;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret14 = new ZPP_GeomVert();
								} else {
									ret14 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret14.next;
									ret14.next = null;
								}
								ret14.forced = false;
								ret14.x = x1;
								ret14.y = y0;
								p1 = ret14;
								if(sndx || fsty) {
									p1.forced = true;
								}
							} else if(i1 == 4) {
								var ret15;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret15 = new ZPP_GeomVert();
								} else {
									ret15 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret15.next;
									ret15.next = null;
								}
								ret15.forced = false;
								ret15.x = x1;
								ret15.y = y1;
								p1 = ret15;
								if(sndx || sndy) {
									p1.forced = true;
								}
							} else if(i1 == 6) {
								var ret16;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret16 = new ZPP_GeomVert();
								} else {
									ret16 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret16.next;
									ret16.next = null;
								}
								ret16.forced = false;
								ret16.x = x0;
								ret16.y = y1;
								p1 = ret16;
								if(fstx || sndy) {
									p1.forced = true;
								}
							} else if(i1 == 1) {
								p1 = ints.list[(yn << 1) * ints.width + xn];
								if(p1 == null) {
									var x7 = this.xlerp(x0,x1,y0,v0,v1,iso,quality);
									var ret17;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret17 = new ZPP_GeomVert();
									} else {
										ret17 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret17.next;
										ret17.next = null;
									}
									ret17.forced = false;
									ret17.x = x7;
									ret17.y = y0;
									p1 = ret17;
									ints.list[(yn << 1) * ints.width + xn] = p1;
								} else {
									var x8 = p1.x;
									var y7 = p1.y;
									var ret18;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret18 = new ZPP_GeomVert();
									} else {
										ret18 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret18.next;
										ret18.next = null;
									}
									ret18.forced = false;
									ret18.x = x8;
									ret18.y = y7;
									p1 = ret18;
								}
								if(fsty) {
									p1.forced = true;
								}
								if(p1.x == x0 || p1.x == x1) {
									if(p1.x == x0 && (val1 & 1) != 0 || p1.x == x1 && (val1 & 4) != 0) {
										val1 ^= 2;
									}
								}
							} else if(i1 == 5) {
								p1 = ints.list[((yn << 1) + 2) * ints.width + xn];
								if(p1 == null) {
									var x9 = this.xlerp(x0,x1,y1,v3,v2,iso,quality);
									var ret19;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret19 = new ZPP_GeomVert();
									} else {
										ret19 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret19.next;
										ret19.next = null;
									}
									ret19.forced = false;
									ret19.x = x9;
									ret19.y = y1;
									p1 = ret19;
									ints.list[((yn << 1) + 2) * ints.width + xn] = p1;
								} else {
									var x10 = p1.x;
									var y8 = p1.y;
									var ret20;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret20 = new ZPP_GeomVert();
									} else {
										ret20 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret20.next;
										ret20.next = null;
									}
									ret20.forced = false;
									ret20.x = x10;
									ret20.y = y8;
									p1 = ret20;
								}
								if(sndy) {
									p1.forced = true;
								}
								if(p1.x == x0 || p1.x == x1) {
									if(p1.x == x0 && (val1 & 64) != 0 || p1.x == x1 && (val1 & 16) != 0) {
										val1 ^= 32;
									}
								}
							} else if(i1 == 3) {
								p1 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
								if(p1 == null) {
									var y9 = this.ylerp(y0,y1,x1,v1,v2,iso,quality);
									var ret21;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret21 = new ZPP_GeomVert();
									} else {
										ret21 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret21.next;
										ret21.next = null;
									}
									ret21.forced = false;
									ret21.x = x1;
									ret21.y = y9;
									p1 = ret21;
									ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p1;
								} else {
									var x11 = p1.x;
									var y10 = p1.y;
									var ret22;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret22 = new ZPP_GeomVert();
									} else {
										ret22 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret22.next;
										ret22.next = null;
									}
									ret22.forced = false;
									ret22.x = x11;
									ret22.y = y10;
									p1 = ret22;
								}
								if(sndx) {
									p1.forced = true;
								}
								if(p1.y == y0 || p1.y == y1) {
									if(p1.y == y0 && (val1 & 4) != 0 || p1.y == y1 && (val1 & 16) != 0) {
										val1 ^= 8;
									}
								}
							} else {
								p1 = ints.list[((yn << 1) + 1) * ints.width + xn];
								if(p1 == null) {
									var y11 = this.ylerp(y0,y1,x0,v0,v3,iso,quality);
									var ret23;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret23 = new ZPP_GeomVert();
									} else {
										ret23 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret23.next;
										ret23.next = null;
									}
									ret23.forced = false;
									ret23.x = x0;
									ret23.y = y11;
									p1 = ret23;
									ints.list[((yn << 1) + 1) * ints.width + xn] = p1;
								} else {
									var x12 = p1.x;
									var y12 = p1.y;
									var ret24;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret24 = new ZPP_GeomVert();
									} else {
										ret24 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret24.next;
										ret24.next = null;
									}
									ret24.forced = false;
									ret24.x = x12;
									ret24.y = y12;
									p1 = ret24;
								}
								if(fstx) {
									p1.forced = true;
								}
								if(p1.y == y0 || p1.y == y1) {
									if(p1.y == y0 && (val1 & 1) != 0 || p1.y == y1 && (val1 & 64) != 0) {
										val1 ^= 128;
									}
								}
							}
							var obj1 = p1;
							if(ret.p1 == null) {
								ret.p1 = obj1.prev = obj1.next = obj1;
							} else {
								obj1.prev = ret.p1;
								obj1.next = ret.p1.next;
								ret.p1.next.prev = obj1;
								ret.p1.next = obj1;
							}
							ret.p1 = obj1;
						}
					}
					ret.p1 = ret.p1.next;
					ret.key1 = val1;
					if(val1 == 1 || val1 == 4 || val1 == 16 || val1 == 64 || val1 == 3 || val1 == 12 || val1 == 48 || val1 == 192 || val1 == 129 || val1 == 6 || val1 == 24 || val1 == 96 || val1 == 5 || val1 == 20 || val1 == 80 || val1 == 65 || val1 == 17 || val1 == 68) {
						val1 = 0;
						ret.key1 = 0;
						ret.p1 = null;
					}
					if(val1 == 0) {
						ret = null;
					} else {
						ret.pr = ret.p1;
						ret.okeyr = ret.okey1;
						ret.keyr = ret.key1;
					}
				} else {
					var val2 = 131;
					ret.okey1 = 131;
					var _g2 = 0;
					while(_g2 < 8) {
						var i2 = _g2++;
						if((val2 & 1 << i2) != 0) {
							var p2 = null;
							if(i2 == 0) {
								var ret25;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret25 = new ZPP_GeomVert();
								} else {
									ret25 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret25.next;
									ret25.next = null;
								}
								ret25.forced = false;
								ret25.x = x0;
								ret25.y = y0;
								p2 = ret25;
								if(fstx || fsty) {
									p2.forced = true;
								}
							} else if(i2 == 2) {
								var ret26;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret26 = new ZPP_GeomVert();
								} else {
									ret26 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret26.next;
									ret26.next = null;
								}
								ret26.forced = false;
								ret26.x = x1;
								ret26.y = y0;
								p2 = ret26;
								if(sndx || fsty) {
									p2.forced = true;
								}
							} else if(i2 == 4) {
								var ret27;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret27 = new ZPP_GeomVert();
								} else {
									ret27 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret27.next;
									ret27.next = null;
								}
								ret27.forced = false;
								ret27.x = x1;
								ret27.y = y1;
								p2 = ret27;
								if(sndx || sndy) {
									p2.forced = true;
								}
							} else if(i2 == 6) {
								var ret28;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret28 = new ZPP_GeomVert();
								} else {
									ret28 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret28.next;
									ret28.next = null;
								}
								ret28.forced = false;
								ret28.x = x0;
								ret28.y = y1;
								p2 = ret28;
								if(fstx || sndy) {
									p2.forced = true;
								}
							} else if(i2 == 1) {
								p2 = ints.list[(yn << 1) * ints.width + xn];
								if(p2 == null) {
									var x13 = this.xlerp(x0,x1,y0,v0,v1,iso,quality);
									var ret29;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret29 = new ZPP_GeomVert();
									} else {
										ret29 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret29.next;
										ret29.next = null;
									}
									ret29.forced = false;
									ret29.x = x13;
									ret29.y = y0;
									p2 = ret29;
									ints.list[(yn << 1) * ints.width + xn] = p2;
								} else {
									var x14 = p2.x;
									var y13 = p2.y;
									var ret30;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret30 = new ZPP_GeomVert();
									} else {
										ret30 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret30.next;
										ret30.next = null;
									}
									ret30.forced = false;
									ret30.x = x14;
									ret30.y = y13;
									p2 = ret30;
								}
								if(fsty) {
									p2.forced = true;
								}
								if(p2.x == x0 || p2.x == x1) {
									if(p2.x == x0 && (val2 & 1) != 0 || p2.x == x1 && (val2 & 4) != 0) {
										val2 ^= 2;
									}
								}
							} else if(i2 == 5) {
								p2 = ints.list[((yn << 1) + 2) * ints.width + xn];
								if(p2 == null) {
									var x15 = this.xlerp(x0,x1,y1,v3,v2,iso,quality);
									var ret31;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret31 = new ZPP_GeomVert();
									} else {
										ret31 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret31.next;
										ret31.next = null;
									}
									ret31.forced = false;
									ret31.x = x15;
									ret31.y = y1;
									p2 = ret31;
									ints.list[((yn << 1) + 2) * ints.width + xn] = p2;
								} else {
									var x16 = p2.x;
									var y14 = p2.y;
									var ret32;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret32 = new ZPP_GeomVert();
									} else {
										ret32 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret32.next;
										ret32.next = null;
									}
									ret32.forced = false;
									ret32.x = x16;
									ret32.y = y14;
									p2 = ret32;
								}
								if(sndy) {
									p2.forced = true;
								}
								if(p2.x == x0 || p2.x == x1) {
									if(p2.x == x0 && (val2 & 64) != 0 || p2.x == x1 && (val2 & 16) != 0) {
										val2 ^= 32;
									}
								}
							} else if(i2 == 3) {
								p2 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
								if(p2 == null) {
									var y15 = this.ylerp(y0,y1,x1,v1,v2,iso,quality);
									var ret33;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret33 = new ZPP_GeomVert();
									} else {
										ret33 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret33.next;
										ret33.next = null;
									}
									ret33.forced = false;
									ret33.x = x1;
									ret33.y = y15;
									p2 = ret33;
									ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p2;
								} else {
									var x17 = p2.x;
									var y16 = p2.y;
									var ret34;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret34 = new ZPP_GeomVert();
									} else {
										ret34 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret34.next;
										ret34.next = null;
									}
									ret34.forced = false;
									ret34.x = x17;
									ret34.y = y16;
									p2 = ret34;
								}
								if(sndx) {
									p2.forced = true;
								}
								if(p2.y == y0 || p2.y == y1) {
									if(p2.y == y0 && (val2 & 4) != 0 || p2.y == y1 && (val2 & 16) != 0) {
										val2 ^= 8;
									}
								}
							} else {
								p2 = ints.list[((yn << 1) + 1) * ints.width + xn];
								if(p2 == null) {
									var y17 = this.ylerp(y0,y1,x0,v0,v3,iso,quality);
									var ret35;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret35 = new ZPP_GeomVert();
									} else {
										ret35 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret35.next;
										ret35.next = null;
									}
									ret35.forced = false;
									ret35.x = x0;
									ret35.y = y17;
									p2 = ret35;
									ints.list[((yn << 1) + 1) * ints.width + xn] = p2;
								} else {
									var x18 = p2.x;
									var y18 = p2.y;
									var ret36;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret36 = new ZPP_GeomVert();
									} else {
										ret36 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret36.next;
										ret36.next = null;
									}
									ret36.forced = false;
									ret36.x = x18;
									ret36.y = y18;
									p2 = ret36;
								}
								if(fstx) {
									p2.forced = true;
								}
								if(p2.y == y0 || p2.y == y1) {
									if(p2.y == y0 && (val2 & 1) != 0 || p2.y == y1 && (val2 & 64) != 0) {
										val2 ^= 128;
									}
								}
							}
							var obj2 = p2;
							if(ret.p1 == null) {
								ret.p1 = obj2.prev = obj2.next = obj2;
							} else {
								obj2.prev = ret.p1;
								obj2.next = ret.p1.next;
								ret.p1.next.prev = obj2;
								ret.p1.next = obj2;
							}
							ret.p1 = obj2;
						}
					}
					ret.p1 = ret.p1.next;
					ret.key1 = val2;
					if(val2 == 1 || val2 == 4 || val2 == 16 || val2 == 64 || val2 == 3 || val2 == 12 || val2 == 48 || val2 == 192 || val2 == 129 || val2 == 6 || val2 == 24 || val2 == 96 || val2 == 5 || val2 == 20 || val2 == 80 || val2 == 65 || val2 == 17 || val2 == 68) {
						val2 = 0;
						ret.key1 = 0;
						ret.p1 = null;
					}
					if(val2 != 0) {
						var val3 = 56;
						ret.okey2 = 56;
						var _g3 = 0;
						while(_g3 < 8) {
							var i3 = _g3++;
							if((val3 & 1 << i3) != 0) {
								var p3 = null;
								if(i3 == 0) {
									var ret37;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret37 = new ZPP_GeomVert();
									} else {
										ret37 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret37.next;
										ret37.next = null;
									}
									ret37.forced = false;
									ret37.x = x0;
									ret37.y = y0;
									p3 = ret37;
									if(fstx || fsty) {
										p3.forced = true;
									}
								} else if(i3 == 2) {
									var ret38;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret38 = new ZPP_GeomVert();
									} else {
										ret38 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret38.next;
										ret38.next = null;
									}
									ret38.forced = false;
									ret38.x = x1;
									ret38.y = y0;
									p3 = ret38;
									if(sndx || fsty) {
										p3.forced = true;
									}
								} else if(i3 == 4) {
									var ret39;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret39 = new ZPP_GeomVert();
									} else {
										ret39 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret39.next;
										ret39.next = null;
									}
									ret39.forced = false;
									ret39.x = x1;
									ret39.y = y1;
									p3 = ret39;
									if(sndx || sndy) {
										p3.forced = true;
									}
								} else if(i3 == 6) {
									var ret40;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret40 = new ZPP_GeomVert();
									} else {
										ret40 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret40.next;
										ret40.next = null;
									}
									ret40.forced = false;
									ret40.x = x0;
									ret40.y = y1;
									p3 = ret40;
									if(fstx || sndy) {
										p3.forced = true;
									}
								} else if(i3 == 1) {
									p3 = ints.list[(yn << 1) * ints.width + xn];
									if(p3 == null) {
										var x19 = this.xlerp(x0,x1,y0,v0,v1,iso,quality);
										var ret41;
										if(ZPP_GeomVert.zpp_pool == null) {
											ret41 = new ZPP_GeomVert();
										} else {
											ret41 = ZPP_GeomVert.zpp_pool;
											ZPP_GeomVert.zpp_pool = ret41.next;
											ret41.next = null;
										}
										ret41.forced = false;
										ret41.x = x19;
										ret41.y = y0;
										p3 = ret41;
										ints.list[(yn << 1) * ints.width + xn] = p3;
									} else {
										var x20 = p3.x;
										var y19 = p3.y;
										var ret42;
										if(ZPP_GeomVert.zpp_pool == null) {
											ret42 = new ZPP_GeomVert();
										} else {
											ret42 = ZPP_GeomVert.zpp_pool;
											ZPP_GeomVert.zpp_pool = ret42.next;
											ret42.next = null;
										}
										ret42.forced = false;
										ret42.x = x20;
										ret42.y = y19;
										p3 = ret42;
									}
									if(fsty) {
										p3.forced = true;
									}
									if(p3.x == x0 || p3.x == x1) {
										if(p3.x == x0 && (val3 & 1) != 0 || p3.x == x1 && (val3 & 4) != 0) {
											val3 ^= 2;
										}
									}
								} else if(i3 == 5) {
									p3 = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p3 == null) {
										var x21 = this.xlerp(x0,x1,y1,v3,v2,iso,quality);
										var ret43;
										if(ZPP_GeomVert.zpp_pool == null) {
											ret43 = new ZPP_GeomVert();
										} else {
											ret43 = ZPP_GeomVert.zpp_pool;
											ZPP_GeomVert.zpp_pool = ret43.next;
											ret43.next = null;
										}
										ret43.forced = false;
										ret43.x = x21;
										ret43.y = y1;
										p3 = ret43;
										ints.list[((yn << 1) + 2) * ints.width + xn] = p3;
									} else {
										var x22 = p3.x;
										var y20 = p3.y;
										var ret44;
										if(ZPP_GeomVert.zpp_pool == null) {
											ret44 = new ZPP_GeomVert();
										} else {
											ret44 = ZPP_GeomVert.zpp_pool;
											ZPP_GeomVert.zpp_pool = ret44.next;
											ret44.next = null;
										}
										ret44.forced = false;
										ret44.x = x22;
										ret44.y = y20;
										p3 = ret44;
									}
									if(sndy) {
										p3.forced = true;
									}
									if(p3.x == x0 || p3.x == x1) {
										if(p3.x == x0 && (val3 & 64) != 0 || p3.x == x1 && (val3 & 16) != 0) {
											val3 ^= 32;
										}
									}
								} else if(i3 == 3) {
									p3 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p3 == null) {
										var y21 = this.ylerp(y0,y1,x1,v1,v2,iso,quality);
										var ret45;
										if(ZPP_GeomVert.zpp_pool == null) {
											ret45 = new ZPP_GeomVert();
										} else {
											ret45 = ZPP_GeomVert.zpp_pool;
											ZPP_GeomVert.zpp_pool = ret45.next;
											ret45.next = null;
										}
										ret45.forced = false;
										ret45.x = x1;
										ret45.y = y21;
										p3 = ret45;
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p3;
									} else {
										var x23 = p3.x;
										var y22 = p3.y;
										var ret46;
										if(ZPP_GeomVert.zpp_pool == null) {
											ret46 = new ZPP_GeomVert();
										} else {
											ret46 = ZPP_GeomVert.zpp_pool;
											ZPP_GeomVert.zpp_pool = ret46.next;
											ret46.next = null;
										}
										ret46.forced = false;
										ret46.x = x23;
										ret46.y = y22;
										p3 = ret46;
									}
									if(sndx) {
										p3.forced = true;
									}
									if(p3.y == y0 || p3.y == y1) {
										if(p3.y == y0 && (val3 & 4) != 0 || p3.y == y1 && (val3 & 16) != 0) {
											val3 ^= 8;
										}
									}
								} else {
									p3 = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p3 == null) {
										var y23 = this.ylerp(y0,y1,x0,v0,v3,iso,quality);
										var ret47;
										if(ZPP_GeomVert.zpp_pool == null) {
											ret47 = new ZPP_GeomVert();
										} else {
											ret47 = ZPP_GeomVert.zpp_pool;
											ZPP_GeomVert.zpp_pool = ret47.next;
											ret47.next = null;
										}
										ret47.forced = false;
										ret47.x = x0;
										ret47.y = y23;
										p3 = ret47;
										ints.list[((yn << 1) + 1) * ints.width + xn] = p3;
									} else {
										var x24 = p3.x;
										var y24 = p3.y;
										var ret48;
										if(ZPP_GeomVert.zpp_pool == null) {
											ret48 = new ZPP_GeomVert();
										} else {
											ret48 = ZPP_GeomVert.zpp_pool;
											ZPP_GeomVert.zpp_pool = ret48.next;
											ret48.next = null;
										}
										ret48.forced = false;
										ret48.x = x24;
										ret48.y = y24;
										p3 = ret48;
									}
									if(fstx) {
										p3.forced = true;
									}
									if(p3.y == y0 || p3.y == y1) {
										if(p3.y == y0 && (val3 & 1) != 0 || p3.y == y1 && (val3 & 64) != 0) {
											val3 ^= 128;
										}
									}
								}
								var obj3 = p3;
								if(ret.p2 == null) {
									ret.p2 = obj3.prev = obj3.next = obj3;
								} else {
									obj3.prev = ret.p2;
									obj3.next = ret.p2.next;
									ret.p2.next.prev = obj3;
									ret.p2.next = obj3;
								}
								ret.p2 = obj3;
							}
						}
						ret.p2 = ret.p2.next;
						ret.key2 = val3;
						if(val3 == 1 || val3 == 4 || val3 == 16 || val3 == 64 || val3 == 3 || val3 == 12 || val3 == 48 || val3 == 192 || val3 == 129 || val3 == 6 || val3 == 24 || val3 == 96 || val3 == 5 || val3 == 20 || val3 == 80 || val3 == 65 || val3 == 17 || val3 == 68) {
							val3 = 0;
							ret.key2 = 0;
							ret.p2 = null;
						}
						if(val3 == 0) {
							ret.pr = ret.p1;
							ret.okeyr = ret.okey1;
							ret.keyr = ret.key1;
						} else {
							ret.pr = ret.p2;
							ret.okeyr = ret.okey2;
							ret.keyr = ret.key2;
						}
					} else {
						var val4 = 56;
						ret.okey1 = 56;
						var _g4 = 0;
						while(_g4 < 8) {
							var i4 = _g4++;
							if((val4 & 1 << i4) != 0) {
								var p4 = null;
								if(i4 == 0) {
									var ret49;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret49 = new ZPP_GeomVert();
									} else {
										ret49 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret49.next;
										ret49.next = null;
									}
									ret49.forced = false;
									ret49.x = x0;
									ret49.y = y0;
									p4 = ret49;
									if(fstx || fsty) {
										p4.forced = true;
									}
								} else if(i4 == 2) {
									var ret50;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret50 = new ZPP_GeomVert();
									} else {
										ret50 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret50.next;
										ret50.next = null;
									}
									ret50.forced = false;
									ret50.x = x1;
									ret50.y = y0;
									p4 = ret50;
									if(sndx || fsty) {
										p4.forced = true;
									}
								} else if(i4 == 4) {
									var ret51;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret51 = new ZPP_GeomVert();
									} else {
										ret51 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret51.next;
										ret51.next = null;
									}
									ret51.forced = false;
									ret51.x = x1;
									ret51.y = y1;
									p4 = ret51;
									if(sndx || sndy) {
										p4.forced = true;
									}
								} else if(i4 == 6) {
									var ret52;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret52 = new ZPP_GeomVert();
									} else {
										ret52 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret52.next;
										ret52.next = null;
									}
									ret52.forced = false;
									ret52.x = x0;
									ret52.y = y1;
									p4 = ret52;
									if(fstx || sndy) {
										p4.forced = true;
									}
								} else if(i4 == 1) {
									p4 = ints.list[(yn << 1) * ints.width + xn];
									if(p4 == null) {
										var x25 = this.xlerp(x0,x1,y0,v0,v1,iso,quality);
										var ret53;
										if(ZPP_GeomVert.zpp_pool == null) {
											ret53 = new ZPP_GeomVert();
										} else {
											ret53 = ZPP_GeomVert.zpp_pool;
											ZPP_GeomVert.zpp_pool = ret53.next;
											ret53.next = null;
										}
										ret53.forced = false;
										ret53.x = x25;
										ret53.y = y0;
										p4 = ret53;
										ints.list[(yn << 1) * ints.width + xn] = p4;
									} else {
										var x26 = p4.x;
										var y25 = p4.y;
										var ret54;
										if(ZPP_GeomVert.zpp_pool == null) {
											ret54 = new ZPP_GeomVert();
										} else {
											ret54 = ZPP_GeomVert.zpp_pool;
											ZPP_GeomVert.zpp_pool = ret54.next;
											ret54.next = null;
										}
										ret54.forced = false;
										ret54.x = x26;
										ret54.y = y25;
										p4 = ret54;
									}
									if(fsty) {
										p4.forced = true;
									}
									if(p4.x == x0 || p4.x == x1) {
										if(p4.x == x0 && (val4 & 1) != 0 || p4.x == x1 && (val4 & 4) != 0) {
											val4 ^= 2;
										}
									}
								} else if(i4 == 5) {
									p4 = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p4 == null) {
										var x27 = this.xlerp(x0,x1,y1,v3,v2,iso,quality);
										var ret55;
										if(ZPP_GeomVert.zpp_pool == null) {
											ret55 = new ZPP_GeomVert();
										} else {
											ret55 = ZPP_GeomVert.zpp_pool;
											ZPP_GeomVert.zpp_pool = ret55.next;
											ret55.next = null;
										}
										ret55.forced = false;
										ret55.x = x27;
										ret55.y = y1;
										p4 = ret55;
										ints.list[((yn << 1) + 2) * ints.width + xn] = p4;
									} else {
										var x28 = p4.x;
										var y26 = p4.y;
										var ret56;
										if(ZPP_GeomVert.zpp_pool == null) {
											ret56 = new ZPP_GeomVert();
										} else {
											ret56 = ZPP_GeomVert.zpp_pool;
											ZPP_GeomVert.zpp_pool = ret56.next;
											ret56.next = null;
										}
										ret56.forced = false;
										ret56.x = x28;
										ret56.y = y26;
										p4 = ret56;
									}
									if(sndy) {
										p4.forced = true;
									}
									if(p4.x == x0 || p4.x == x1) {
										if(p4.x == x0 && (val4 & 64) != 0 || p4.x == x1 && (val4 & 16) != 0) {
											val4 ^= 32;
										}
									}
								} else if(i4 == 3) {
									p4 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p4 == null) {
										var y27 = this.ylerp(y0,y1,x1,v1,v2,iso,quality);
										var ret57;
										if(ZPP_GeomVert.zpp_pool == null) {
											ret57 = new ZPP_GeomVert();
										} else {
											ret57 = ZPP_GeomVert.zpp_pool;
											ZPP_GeomVert.zpp_pool = ret57.next;
											ret57.next = null;
										}
										ret57.forced = false;
										ret57.x = x1;
										ret57.y = y27;
										p4 = ret57;
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p4;
									} else {
										var x29 = p4.x;
										var y28 = p4.y;
										var ret58;
										if(ZPP_GeomVert.zpp_pool == null) {
											ret58 = new ZPP_GeomVert();
										} else {
											ret58 = ZPP_GeomVert.zpp_pool;
											ZPP_GeomVert.zpp_pool = ret58.next;
											ret58.next = null;
										}
										ret58.forced = false;
										ret58.x = x29;
										ret58.y = y28;
										p4 = ret58;
									}
									if(sndx) {
										p4.forced = true;
									}
									if(p4.y == y0 || p4.y == y1) {
										if(p4.y == y0 && (val4 & 4) != 0 || p4.y == y1 && (val4 & 16) != 0) {
											val4 ^= 8;
										}
									}
								} else {
									p4 = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p4 == null) {
										var y29 = this.ylerp(y0,y1,x0,v0,v3,iso,quality);
										var ret59;
										if(ZPP_GeomVert.zpp_pool == null) {
											ret59 = new ZPP_GeomVert();
										} else {
											ret59 = ZPP_GeomVert.zpp_pool;
											ZPP_GeomVert.zpp_pool = ret59.next;
											ret59.next = null;
										}
										ret59.forced = false;
										ret59.x = x0;
										ret59.y = y29;
										p4 = ret59;
										ints.list[((yn << 1) + 1) * ints.width + xn] = p4;
									} else {
										var x30 = p4.x;
										var y30 = p4.y;
										var ret60;
										if(ZPP_GeomVert.zpp_pool == null) {
											ret60 = new ZPP_GeomVert();
										} else {
											ret60 = ZPP_GeomVert.zpp_pool;
											ZPP_GeomVert.zpp_pool = ret60.next;
											ret60.next = null;
										}
										ret60.forced = false;
										ret60.x = x30;
										ret60.y = y30;
										p4 = ret60;
									}
									if(fstx) {
										p4.forced = true;
									}
									if(p4.y == y0 || p4.y == y1) {
										if(p4.y == y0 && (val4 & 1) != 0 || p4.y == y1 && (val4 & 64) != 0) {
											val4 ^= 128;
										}
									}
								}
								var obj4 = p4;
								if(ret.p1 == null) {
									ret.p1 = obj4.prev = obj4.next = obj4;
								} else {
									obj4.prev = ret.p1;
									obj4.next = ret.p1.next;
									ret.p1.next.prev = obj4;
									ret.p1.next = obj4;
								}
								ret.p1 = obj4;
							}
						}
						ret.p1 = ret.p1.next;
						ret.key1 = val4;
						if(val4 == 1 || val4 == 4 || val4 == 16 || val4 == 64 || val4 == 3 || val4 == 12 || val4 == 48 || val4 == 192 || val4 == 129 || val4 == 6 || val4 == 24 || val4 == 96 || val4 == 5 || val4 == 20 || val4 == 80 || val4 == 65 || val4 == 17 || val4 == 68) {
							val4 = 0;
							ret.key1 = 0;
							ret.p1 = null;
						}
						if(val4 == 0) {
							ret = null;
						} else {
							ret.pr = ret.p1;
							ret.okeyr = ret.okey1;
							ret.keyr = ret.key1;
						}
					}
				}
			} else if(mid) {
				var val5 = 238;
				ret.okey1 = 238;
				var _g5 = 0;
				while(_g5 < 8) {
					var i5 = _g5++;
					if((val5 & 1 << i5) != 0) {
						var p5 = null;
						if(i5 == 0) {
							var ret61;
							if(ZPP_GeomVert.zpp_pool == null) {
								ret61 = new ZPP_GeomVert();
							} else {
								ret61 = ZPP_GeomVert.zpp_pool;
								ZPP_GeomVert.zpp_pool = ret61.next;
								ret61.next = null;
							}
							ret61.forced = false;
							ret61.x = x0;
							ret61.y = y0;
							p5 = ret61;
							if(fstx || fsty) {
								p5.forced = true;
							}
						} else if(i5 == 2) {
							var ret62;
							if(ZPP_GeomVert.zpp_pool == null) {
								ret62 = new ZPP_GeomVert();
							} else {
								ret62 = ZPP_GeomVert.zpp_pool;
								ZPP_GeomVert.zpp_pool = ret62.next;
								ret62.next = null;
							}
							ret62.forced = false;
							ret62.x = x1;
							ret62.y = y0;
							p5 = ret62;
							if(sndx || fsty) {
								p5.forced = true;
							}
						} else if(i5 == 4) {
							var ret63;
							if(ZPP_GeomVert.zpp_pool == null) {
								ret63 = new ZPP_GeomVert();
							} else {
								ret63 = ZPP_GeomVert.zpp_pool;
								ZPP_GeomVert.zpp_pool = ret63.next;
								ret63.next = null;
							}
							ret63.forced = false;
							ret63.x = x1;
							ret63.y = y1;
							p5 = ret63;
							if(sndx || sndy) {
								p5.forced = true;
							}
						} else if(i5 == 6) {
							var ret64;
							if(ZPP_GeomVert.zpp_pool == null) {
								ret64 = new ZPP_GeomVert();
							} else {
								ret64 = ZPP_GeomVert.zpp_pool;
								ZPP_GeomVert.zpp_pool = ret64.next;
								ret64.next = null;
							}
							ret64.forced = false;
							ret64.x = x0;
							ret64.y = y1;
							p5 = ret64;
							if(fstx || sndy) {
								p5.forced = true;
							}
						} else if(i5 == 1) {
							p5 = ints.list[(yn << 1) * ints.width + xn];
							if(p5 == null) {
								var x31 = this.xlerp(x0,x1,y0,v0,v1,iso,quality);
								var ret65;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret65 = new ZPP_GeomVert();
								} else {
									ret65 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret65.next;
									ret65.next = null;
								}
								ret65.forced = false;
								ret65.x = x31;
								ret65.y = y0;
								p5 = ret65;
								ints.list[(yn << 1) * ints.width + xn] = p5;
							} else {
								var x32 = p5.x;
								var y31 = p5.y;
								var ret66;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret66 = new ZPP_GeomVert();
								} else {
									ret66 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret66.next;
									ret66.next = null;
								}
								ret66.forced = false;
								ret66.x = x32;
								ret66.y = y31;
								p5 = ret66;
							}
							if(fsty) {
								p5.forced = true;
							}
							if(p5.x == x0 || p5.x == x1) {
								if(p5.x == x0 && (val5 & 1) != 0 || p5.x == x1 && (val5 & 4) != 0) {
									val5 ^= 2;
								}
							}
						} else if(i5 == 5) {
							p5 = ints.list[((yn << 1) + 2) * ints.width + xn];
							if(p5 == null) {
								var x33 = this.xlerp(x0,x1,y1,v3,v2,iso,quality);
								var ret67;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret67 = new ZPP_GeomVert();
								} else {
									ret67 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret67.next;
									ret67.next = null;
								}
								ret67.forced = false;
								ret67.x = x33;
								ret67.y = y1;
								p5 = ret67;
								ints.list[((yn << 1) + 2) * ints.width + xn] = p5;
							} else {
								var x34 = p5.x;
								var y32 = p5.y;
								var ret68;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret68 = new ZPP_GeomVert();
								} else {
									ret68 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret68.next;
									ret68.next = null;
								}
								ret68.forced = false;
								ret68.x = x34;
								ret68.y = y32;
								p5 = ret68;
							}
							if(sndy) {
								p5.forced = true;
							}
							if(p5.x == x0 || p5.x == x1) {
								if(p5.x == x0 && (val5 & 64) != 0 || p5.x == x1 && (val5 & 16) != 0) {
									val5 ^= 32;
								}
							}
						} else if(i5 == 3) {
							p5 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
							if(p5 == null) {
								var y33 = this.ylerp(y0,y1,x1,v1,v2,iso,quality);
								var ret69;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret69 = new ZPP_GeomVert();
								} else {
									ret69 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret69.next;
									ret69.next = null;
								}
								ret69.forced = false;
								ret69.x = x1;
								ret69.y = y33;
								p5 = ret69;
								ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p5;
							} else {
								var x35 = p5.x;
								var y34 = p5.y;
								var ret70;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret70 = new ZPP_GeomVert();
								} else {
									ret70 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret70.next;
									ret70.next = null;
								}
								ret70.forced = false;
								ret70.x = x35;
								ret70.y = y34;
								p5 = ret70;
							}
							if(sndx) {
								p5.forced = true;
							}
							if(p5.y == y0 || p5.y == y1) {
								if(p5.y == y0 && (val5 & 4) != 0 || p5.y == y1 && (val5 & 16) != 0) {
									val5 ^= 8;
								}
							}
						} else {
							p5 = ints.list[((yn << 1) + 1) * ints.width + xn];
							if(p5 == null) {
								var y35 = this.ylerp(y0,y1,x0,v0,v3,iso,quality);
								var ret71;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret71 = new ZPP_GeomVert();
								} else {
									ret71 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret71.next;
									ret71.next = null;
								}
								ret71.forced = false;
								ret71.x = x0;
								ret71.y = y35;
								p5 = ret71;
								ints.list[((yn << 1) + 1) * ints.width + xn] = p5;
							} else {
								var x36 = p5.x;
								var y36 = p5.y;
								var ret72;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret72 = new ZPP_GeomVert();
								} else {
									ret72 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret72.next;
									ret72.next = null;
								}
								ret72.forced = false;
								ret72.x = x36;
								ret72.y = y36;
								p5 = ret72;
							}
							if(fstx) {
								p5.forced = true;
							}
							if(p5.y == y0 || p5.y == y1) {
								if(p5.y == y0 && (val5 & 1) != 0 || p5.y == y1 && (val5 & 64) != 0) {
									val5 ^= 128;
								}
							}
						}
						var obj5 = p5;
						if(ret.p1 == null) {
							ret.p1 = obj5.prev = obj5.next = obj5;
						} else {
							obj5.prev = ret.p1;
							obj5.next = ret.p1.next;
							ret.p1.next.prev = obj5;
							ret.p1.next = obj5;
						}
						ret.p1 = obj5;
					}
				}
				ret.p1 = ret.p1.next;
				ret.key1 = val5;
				if(val5 == 1 || val5 == 4 || val5 == 16 || val5 == 64 || val5 == 3 || val5 == 12 || val5 == 48 || val5 == 192 || val5 == 129 || val5 == 6 || val5 == 24 || val5 == 96 || val5 == 5 || val5 == 20 || val5 == 80 || val5 == 65 || val5 == 17 || val5 == 68) {
					val5 = 0;
					ret.key1 = 0;
					ret.p1 = null;
				}
				if(val5 == 0) {
					ret = null;
				} else {
					ret.pr = ret.p1;
					ret.okeyr = ret.okey1;
					ret.keyr = ret.key1;
				}
			} else {
				var val6 = 224;
				ret.okey1 = 224;
				var _g6 = 0;
				while(_g6 < 8) {
					var i6 = _g6++;
					if((val6 & 1 << i6) != 0) {
						var p6 = null;
						if(i6 == 0) {
							var ret73;
							if(ZPP_GeomVert.zpp_pool == null) {
								ret73 = new ZPP_GeomVert();
							} else {
								ret73 = ZPP_GeomVert.zpp_pool;
								ZPP_GeomVert.zpp_pool = ret73.next;
								ret73.next = null;
							}
							ret73.forced = false;
							ret73.x = x0;
							ret73.y = y0;
							p6 = ret73;
							if(fstx || fsty) {
								p6.forced = true;
							}
						} else if(i6 == 2) {
							var ret74;
							if(ZPP_GeomVert.zpp_pool == null) {
								ret74 = new ZPP_GeomVert();
							} else {
								ret74 = ZPP_GeomVert.zpp_pool;
								ZPP_GeomVert.zpp_pool = ret74.next;
								ret74.next = null;
							}
							ret74.forced = false;
							ret74.x = x1;
							ret74.y = y0;
							p6 = ret74;
							if(sndx || fsty) {
								p6.forced = true;
							}
						} else if(i6 == 4) {
							var ret75;
							if(ZPP_GeomVert.zpp_pool == null) {
								ret75 = new ZPP_GeomVert();
							} else {
								ret75 = ZPP_GeomVert.zpp_pool;
								ZPP_GeomVert.zpp_pool = ret75.next;
								ret75.next = null;
							}
							ret75.forced = false;
							ret75.x = x1;
							ret75.y = y1;
							p6 = ret75;
							if(sndx || sndy) {
								p6.forced = true;
							}
						} else if(i6 == 6) {
							var ret76;
							if(ZPP_GeomVert.zpp_pool == null) {
								ret76 = new ZPP_GeomVert();
							} else {
								ret76 = ZPP_GeomVert.zpp_pool;
								ZPP_GeomVert.zpp_pool = ret76.next;
								ret76.next = null;
							}
							ret76.forced = false;
							ret76.x = x0;
							ret76.y = y1;
							p6 = ret76;
							if(fstx || sndy) {
								p6.forced = true;
							}
						} else if(i6 == 1) {
							p6 = ints.list[(yn << 1) * ints.width + xn];
							if(p6 == null) {
								var x37 = this.xlerp(x0,x1,y0,v0,v1,iso,quality);
								var ret77;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret77 = new ZPP_GeomVert();
								} else {
									ret77 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret77.next;
									ret77.next = null;
								}
								ret77.forced = false;
								ret77.x = x37;
								ret77.y = y0;
								p6 = ret77;
								ints.list[(yn << 1) * ints.width + xn] = p6;
							} else {
								var x38 = p6.x;
								var y37 = p6.y;
								var ret78;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret78 = new ZPP_GeomVert();
								} else {
									ret78 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret78.next;
									ret78.next = null;
								}
								ret78.forced = false;
								ret78.x = x38;
								ret78.y = y37;
								p6 = ret78;
							}
							if(fsty) {
								p6.forced = true;
							}
							if(p6.x == x0 || p6.x == x1) {
								if(p6.x == x0 && (val6 & 1) != 0 || p6.x == x1 && (val6 & 4) != 0) {
									val6 ^= 2;
								}
							}
						} else if(i6 == 5) {
							p6 = ints.list[((yn << 1) + 2) * ints.width + xn];
							if(p6 == null) {
								var x39 = this.xlerp(x0,x1,y1,v3,v2,iso,quality);
								var ret79;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret79 = new ZPP_GeomVert();
								} else {
									ret79 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret79.next;
									ret79.next = null;
								}
								ret79.forced = false;
								ret79.x = x39;
								ret79.y = y1;
								p6 = ret79;
								ints.list[((yn << 1) + 2) * ints.width + xn] = p6;
							} else {
								var x40 = p6.x;
								var y38 = p6.y;
								var ret80;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret80 = new ZPP_GeomVert();
								} else {
									ret80 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret80.next;
									ret80.next = null;
								}
								ret80.forced = false;
								ret80.x = x40;
								ret80.y = y38;
								p6 = ret80;
							}
							if(sndy) {
								p6.forced = true;
							}
							if(p6.x == x0 || p6.x == x1) {
								if(p6.x == x0 && (val6 & 64) != 0 || p6.x == x1 && (val6 & 16) != 0) {
									val6 ^= 32;
								}
							}
						} else if(i6 == 3) {
							p6 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
							if(p6 == null) {
								var y39 = this.ylerp(y0,y1,x1,v1,v2,iso,quality);
								var ret81;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret81 = new ZPP_GeomVert();
								} else {
									ret81 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret81.next;
									ret81.next = null;
								}
								ret81.forced = false;
								ret81.x = x1;
								ret81.y = y39;
								p6 = ret81;
								ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p6;
							} else {
								var x41 = p6.x;
								var y40 = p6.y;
								var ret82;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret82 = new ZPP_GeomVert();
								} else {
									ret82 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret82.next;
									ret82.next = null;
								}
								ret82.forced = false;
								ret82.x = x41;
								ret82.y = y40;
								p6 = ret82;
							}
							if(sndx) {
								p6.forced = true;
							}
							if(p6.y == y0 || p6.y == y1) {
								if(p6.y == y0 && (val6 & 4) != 0 || p6.y == y1 && (val6 & 16) != 0) {
									val6 ^= 8;
								}
							}
						} else {
							p6 = ints.list[((yn << 1) + 1) * ints.width + xn];
							if(p6 == null) {
								var y41 = this.ylerp(y0,y1,x0,v0,v3,iso,quality);
								var ret83;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret83 = new ZPP_GeomVert();
								} else {
									ret83 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret83.next;
									ret83.next = null;
								}
								ret83.forced = false;
								ret83.x = x0;
								ret83.y = y41;
								p6 = ret83;
								ints.list[((yn << 1) + 1) * ints.width + xn] = p6;
							} else {
								var x42 = p6.x;
								var y42 = p6.y;
								var ret84;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret84 = new ZPP_GeomVert();
								} else {
									ret84 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret84.next;
									ret84.next = null;
								}
								ret84.forced = false;
								ret84.x = x42;
								ret84.y = y42;
								p6 = ret84;
							}
							if(fstx) {
								p6.forced = true;
							}
							if(p6.y == y0 || p6.y == y1) {
								if(p6.y == y0 && (val6 & 1) != 0 || p6.y == y1 && (val6 & 64) != 0) {
									val6 ^= 128;
								}
							}
						}
						var obj6 = p6;
						if(ret.p1 == null) {
							ret.p1 = obj6.prev = obj6.next = obj6;
						} else {
							obj6.prev = ret.p1;
							obj6.next = ret.p1.next;
							ret.p1.next.prev = obj6;
							ret.p1.next = obj6;
						}
						ret.p1 = obj6;
					}
				}
				ret.p1 = ret.p1.next;
				ret.key1 = val6;
				if(val6 == 1 || val6 == 4 || val6 == 16 || val6 == 64 || val6 == 3 || val6 == 12 || val6 == 48 || val6 == 192 || val6 == 129 || val6 == 6 || val6 == 24 || val6 == 96 || val6 == 5 || val6 == 20 || val6 == 80 || val6 == 65 || val6 == 17 || val6 == 68) {
					val6 = 0;
					ret.key1 = 0;
					ret.p1 = null;
				}
				if(val6 != 0) {
					var val7 = 14;
					ret.okey2 = 14;
					var _g7 = 0;
					while(_g7 < 8) {
						var i7 = _g7++;
						if((val7 & 1 << i7) != 0) {
							var p7 = null;
							if(i7 == 0) {
								var ret85;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret85 = new ZPP_GeomVert();
								} else {
									ret85 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret85.next;
									ret85.next = null;
								}
								ret85.forced = false;
								ret85.x = x0;
								ret85.y = y0;
								p7 = ret85;
								if(fstx || fsty) {
									p7.forced = true;
								}
							} else if(i7 == 2) {
								var ret86;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret86 = new ZPP_GeomVert();
								} else {
									ret86 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret86.next;
									ret86.next = null;
								}
								ret86.forced = false;
								ret86.x = x1;
								ret86.y = y0;
								p7 = ret86;
								if(sndx || fsty) {
									p7.forced = true;
								}
							} else if(i7 == 4) {
								var ret87;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret87 = new ZPP_GeomVert();
								} else {
									ret87 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret87.next;
									ret87.next = null;
								}
								ret87.forced = false;
								ret87.x = x1;
								ret87.y = y1;
								p7 = ret87;
								if(sndx || sndy) {
									p7.forced = true;
								}
							} else if(i7 == 6) {
								var ret88;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret88 = new ZPP_GeomVert();
								} else {
									ret88 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret88.next;
									ret88.next = null;
								}
								ret88.forced = false;
								ret88.x = x0;
								ret88.y = y1;
								p7 = ret88;
								if(fstx || sndy) {
									p7.forced = true;
								}
							} else if(i7 == 1) {
								p7 = ints.list[(yn << 1) * ints.width + xn];
								if(p7 == null) {
									var x43 = this.xlerp(x0,x1,y0,v0,v1,iso,quality);
									var ret89;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret89 = new ZPP_GeomVert();
									} else {
										ret89 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret89.next;
										ret89.next = null;
									}
									ret89.forced = false;
									ret89.x = x43;
									ret89.y = y0;
									p7 = ret89;
									ints.list[(yn << 1) * ints.width + xn] = p7;
								} else {
									var x44 = p7.x;
									var y43 = p7.y;
									var ret90;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret90 = new ZPP_GeomVert();
									} else {
										ret90 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret90.next;
										ret90.next = null;
									}
									ret90.forced = false;
									ret90.x = x44;
									ret90.y = y43;
									p7 = ret90;
								}
								if(fsty) {
									p7.forced = true;
								}
								if(p7.x == x0 || p7.x == x1) {
									if(p7.x == x0 && (val7 & 1) != 0 || p7.x == x1 && (val7 & 4) != 0) {
										val7 ^= 2;
									}
								}
							} else if(i7 == 5) {
								p7 = ints.list[((yn << 1) + 2) * ints.width + xn];
								if(p7 == null) {
									var x45 = this.xlerp(x0,x1,y1,v3,v2,iso,quality);
									var ret91;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret91 = new ZPP_GeomVert();
									} else {
										ret91 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret91.next;
										ret91.next = null;
									}
									ret91.forced = false;
									ret91.x = x45;
									ret91.y = y1;
									p7 = ret91;
									ints.list[((yn << 1) + 2) * ints.width + xn] = p7;
								} else {
									var x46 = p7.x;
									var y44 = p7.y;
									var ret92;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret92 = new ZPP_GeomVert();
									} else {
										ret92 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret92.next;
										ret92.next = null;
									}
									ret92.forced = false;
									ret92.x = x46;
									ret92.y = y44;
									p7 = ret92;
								}
								if(sndy) {
									p7.forced = true;
								}
								if(p7.x == x0 || p7.x == x1) {
									if(p7.x == x0 && (val7 & 64) != 0 || p7.x == x1 && (val7 & 16) != 0) {
										val7 ^= 32;
									}
								}
							} else if(i7 == 3) {
								p7 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
								if(p7 == null) {
									var y45 = this.ylerp(y0,y1,x1,v1,v2,iso,quality);
									var ret93;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret93 = new ZPP_GeomVert();
									} else {
										ret93 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret93.next;
										ret93.next = null;
									}
									ret93.forced = false;
									ret93.x = x1;
									ret93.y = y45;
									p7 = ret93;
									ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p7;
								} else {
									var x47 = p7.x;
									var y46 = p7.y;
									var ret94;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret94 = new ZPP_GeomVert();
									} else {
										ret94 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret94.next;
										ret94.next = null;
									}
									ret94.forced = false;
									ret94.x = x47;
									ret94.y = y46;
									p7 = ret94;
								}
								if(sndx) {
									p7.forced = true;
								}
								if(p7.y == y0 || p7.y == y1) {
									if(p7.y == y0 && (val7 & 4) != 0 || p7.y == y1 && (val7 & 16) != 0) {
										val7 ^= 8;
									}
								}
							} else {
								p7 = ints.list[((yn << 1) + 1) * ints.width + xn];
								if(p7 == null) {
									var y47 = this.ylerp(y0,y1,x0,v0,v3,iso,quality);
									var ret95;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret95 = new ZPP_GeomVert();
									} else {
										ret95 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret95.next;
										ret95.next = null;
									}
									ret95.forced = false;
									ret95.x = x0;
									ret95.y = y47;
									p7 = ret95;
									ints.list[((yn << 1) + 1) * ints.width + xn] = p7;
								} else {
									var x48 = p7.x;
									var y48 = p7.y;
									var ret96;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret96 = new ZPP_GeomVert();
									} else {
										ret96 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret96.next;
										ret96.next = null;
									}
									ret96.forced = false;
									ret96.x = x48;
									ret96.y = y48;
									p7 = ret96;
								}
								if(fstx) {
									p7.forced = true;
								}
								if(p7.y == y0 || p7.y == y1) {
									if(p7.y == y0 && (val7 & 1) != 0 || p7.y == y1 && (val7 & 64) != 0) {
										val7 ^= 128;
									}
								}
							}
							var obj7 = p7;
							if(ret.p2 == null) {
								ret.p2 = obj7.prev = obj7.next = obj7;
							} else {
								obj7.prev = ret.p2;
								obj7.next = ret.p2.next;
								ret.p2.next.prev = obj7;
								ret.p2.next = obj7;
							}
							ret.p2 = obj7;
						}
					}
					ret.p2 = ret.p2.next;
					ret.key2 = val7;
					if(val7 == 1 || val7 == 4 || val7 == 16 || val7 == 64 || val7 == 3 || val7 == 12 || val7 == 48 || val7 == 192 || val7 == 129 || val7 == 6 || val7 == 24 || val7 == 96 || val7 == 5 || val7 == 20 || val7 == 80 || val7 == 65 || val7 == 17 || val7 == 68) {
						val7 = 0;
						ret.key2 = 0;
						ret.p2 = null;
					}
					if(val7 == 0) {
						ret.pr = ret.p1;
						ret.okeyr = ret.okey1;
						ret.keyr = ret.key1;
					} else {
						ret.pr = ret.p2;
						ret.okeyr = ret.okey2;
						ret.keyr = ret.key2;
					}
				} else {
					var val8 = 14;
					ret.okey1 = 14;
					var _g8 = 0;
					while(_g8 < 8) {
						var i8 = _g8++;
						if((val8 & 1 << i8) != 0) {
							var p8 = null;
							if(i8 == 0) {
								var ret97;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret97 = new ZPP_GeomVert();
								} else {
									ret97 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret97.next;
									ret97.next = null;
								}
								ret97.forced = false;
								ret97.x = x0;
								ret97.y = y0;
								p8 = ret97;
								if(fstx || fsty) {
									p8.forced = true;
								}
							} else if(i8 == 2) {
								var ret98;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret98 = new ZPP_GeomVert();
								} else {
									ret98 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret98.next;
									ret98.next = null;
								}
								ret98.forced = false;
								ret98.x = x1;
								ret98.y = y0;
								p8 = ret98;
								if(sndx || fsty) {
									p8.forced = true;
								}
							} else if(i8 == 4) {
								var ret99;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret99 = new ZPP_GeomVert();
								} else {
									ret99 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret99.next;
									ret99.next = null;
								}
								ret99.forced = false;
								ret99.x = x1;
								ret99.y = y1;
								p8 = ret99;
								if(sndx || sndy) {
									p8.forced = true;
								}
							} else if(i8 == 6) {
								var ret100;
								if(ZPP_GeomVert.zpp_pool == null) {
									ret100 = new ZPP_GeomVert();
								} else {
									ret100 = ZPP_GeomVert.zpp_pool;
									ZPP_GeomVert.zpp_pool = ret100.next;
									ret100.next = null;
								}
								ret100.forced = false;
								ret100.x = x0;
								ret100.y = y1;
								p8 = ret100;
								if(fstx || sndy) {
									p8.forced = true;
								}
							} else if(i8 == 1) {
								p8 = ints.list[(yn << 1) * ints.width + xn];
								if(p8 == null) {
									var x49 = this.xlerp(x0,x1,y0,v0,v1,iso,quality);
									var ret101;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret101 = new ZPP_GeomVert();
									} else {
										ret101 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret101.next;
										ret101.next = null;
									}
									ret101.forced = false;
									ret101.x = x49;
									ret101.y = y0;
									p8 = ret101;
									ints.list[(yn << 1) * ints.width + xn] = p8;
								} else {
									var x50 = p8.x;
									var y49 = p8.y;
									var ret102;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret102 = new ZPP_GeomVert();
									} else {
										ret102 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret102.next;
										ret102.next = null;
									}
									ret102.forced = false;
									ret102.x = x50;
									ret102.y = y49;
									p8 = ret102;
								}
								if(fsty) {
									p8.forced = true;
								}
								if(p8.x == x0 || p8.x == x1) {
									if(p8.x == x0 && (val8 & 1) != 0 || p8.x == x1 && (val8 & 4) != 0) {
										val8 ^= 2;
									}
								}
							} else if(i8 == 5) {
								p8 = ints.list[((yn << 1) + 2) * ints.width + xn];
								if(p8 == null) {
									var x51 = this.xlerp(x0,x1,y1,v3,v2,iso,quality);
									var ret103;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret103 = new ZPP_GeomVert();
									} else {
										ret103 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret103.next;
										ret103.next = null;
									}
									ret103.forced = false;
									ret103.x = x51;
									ret103.y = y1;
									p8 = ret103;
									ints.list[((yn << 1) + 2) * ints.width + xn] = p8;
								} else {
									var x52 = p8.x;
									var y50 = p8.y;
									var ret104;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret104 = new ZPP_GeomVert();
									} else {
										ret104 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret104.next;
										ret104.next = null;
									}
									ret104.forced = false;
									ret104.x = x52;
									ret104.y = y50;
									p8 = ret104;
								}
								if(sndy) {
									p8.forced = true;
								}
								if(p8.x == x0 || p8.x == x1) {
									if(p8.x == x0 && (val8 & 64) != 0 || p8.x == x1 && (val8 & 16) != 0) {
										val8 ^= 32;
									}
								}
							} else if(i8 == 3) {
								p8 = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
								if(p8 == null) {
									var y51 = this.ylerp(y0,y1,x1,v1,v2,iso,quality);
									var ret105;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret105 = new ZPP_GeomVert();
									} else {
										ret105 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret105.next;
										ret105.next = null;
									}
									ret105.forced = false;
									ret105.x = x1;
									ret105.y = y51;
									p8 = ret105;
									ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p8;
								} else {
									var x53 = p8.x;
									var y52 = p8.y;
									var ret106;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret106 = new ZPP_GeomVert();
									} else {
										ret106 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret106.next;
										ret106.next = null;
									}
									ret106.forced = false;
									ret106.x = x53;
									ret106.y = y52;
									p8 = ret106;
								}
								if(sndx) {
									p8.forced = true;
								}
								if(p8.y == y0 || p8.y == y1) {
									if(p8.y == y0 && (val8 & 4) != 0 || p8.y == y1 && (val8 & 16) != 0) {
										val8 ^= 8;
									}
								}
							} else {
								p8 = ints.list[((yn << 1) + 1) * ints.width + xn];
								if(p8 == null) {
									var y53 = this.ylerp(y0,y1,x0,v0,v3,iso,quality);
									var ret107;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret107 = new ZPP_GeomVert();
									} else {
										ret107 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret107.next;
										ret107.next = null;
									}
									ret107.forced = false;
									ret107.x = x0;
									ret107.y = y53;
									p8 = ret107;
									ints.list[((yn << 1) + 1) * ints.width + xn] = p8;
								} else {
									var x54 = p8.x;
									var y54 = p8.y;
									var ret108;
									if(ZPP_GeomVert.zpp_pool == null) {
										ret108 = new ZPP_GeomVert();
									} else {
										ret108 = ZPP_GeomVert.zpp_pool;
										ZPP_GeomVert.zpp_pool = ret108.next;
										ret108.next = null;
									}
									ret108.forced = false;
									ret108.x = x54;
									ret108.y = y54;
									p8 = ret108;
								}
								if(fstx) {
									p8.forced = true;
								}
								if(p8.y == y0 || p8.y == y1) {
									if(p8.y == y0 && (val8 & 1) != 0 || p8.y == y1 && (val8 & 64) != 0) {
										val8 ^= 128;
									}
								}
							}
							var obj8 = p8;
							if(ret.p1 == null) {
								ret.p1 = obj8.prev = obj8.next = obj8;
							} else {
								obj8.prev = ret.p1;
								obj8.next = ret.p1.next;
								ret.p1.next.prev = obj8;
								ret.p1.next = obj8;
							}
							ret.p1 = obj8;
						}
					}
					ret.p1 = ret.p1.next;
					ret.key1 = val8;
					if(val8 == 1 || val8 == 4 || val8 == 16 || val8 == 64 || val8 == 3 || val8 == 12 || val8 == 48 || val8 == 192 || val8 == 129 || val8 == 6 || val8 == 24 || val8 == 96 || val8 == 5 || val8 == 20 || val8 == 80 || val8 == 65 || val8 == 17 || val8 == 68) {
						val8 = 0;
						ret.key1 = 0;
						ret.p1 = null;
					}
					if(val8 == 0) {
						ret = null;
					} else {
						ret.pr = ret.p1;
						ret.okeyr = ret.okey1;
						ret.keyr = ret.key1;
					}
				}
			}
		}
		return ret;
	}
};
ZPP_MarchingSquares.prototype.lerp = function(x0,x1,v0,v1) {
	if(v0 == 0) {
		return x0;
	} else if(v1 == 0) {
		return x1;
	} else {
		var dv = v0 - v1;
		var t = dv * dv < Config.epsilon * Config.epsilon?0.5:v0 / dv;
		if(t < 0) {
			t = 0;
		} else if(t > 1) {
			t = 1;
		}
		return x0 + t * (x1 - x0);
	}
};
ZPP_MarchingSquares.prototype.xlerp = function(x0,x1,y,v0,v1,iso,quality) {
	var xm;
	if(v0 == 0) {
		xm = x0;
	} else if(v1 == 0) {
		xm = x1;
	} else {
		var dv = v0 - v1;
		var t = dv * dv < Config.epsilon * Config.epsilon?0.5:v0 / dv;
		if(t < 0) {
			t = 0;
		} else if(t > 1) {
			t = 1;
		}
		xm = x0 + t * (x1 - x0);
	}
	while(quality-- != 0 && x0 < xm && xm < x1) {
		var vm = iso(xm,y);
		if(vm == 0) {
			break;
		}
		if(v0 * vm < 0) {
			x1 = xm;
			v1 = vm;
		} else {
			x0 = xm;
			v0 = vm;
		}
		if(v0 == 0) {
			xm = x0;
		} else if(v1 == 0) {
			xm = x1;
		} else {
			var dv1 = v0 - v1;
			var t1 = dv1 * dv1 < Config.epsilon * Config.epsilon?0.5:v0 / dv1;
			if(t1 < 0) {
				t1 = 0;
			} else if(t1 > 1) {
				t1 = 1;
			}
			xm = x0 + t1 * (x1 - x0);
		}
	}
	return xm;
};
ZPP_MarchingSquares.prototype.ylerp = function(y0,y1,x,v0,v1,iso,quality) {
	var ym;
	if(v0 == 0) {
		ym = y0;
	} else if(v1 == 0) {
		ym = y1;
	} else {
		var dv = v0 - v1;
		var t = dv * dv < Config.epsilon * Config.epsilon?0.5:v0 / dv;
		if(t < 0) {
			t = 0;
		} else if(t > 1) {
			t = 1;
		}
		ym = y0 + t * (y1 - y0);
	}
	while(quality-- != 0 && y0 < ym && ym < y1) {
		var vm = iso(x,ym);
		if(vm == 0) {
			break;
		}
		if(v0 * vm < 0) {
			y1 = ym;
			v1 = vm;
		} else {
			y0 = ym;
			v0 = vm;
		}
		if(v0 == 0) {
			ym = y0;
		} else if(v1 == 0) {
			ym = y1;
		} else {
			var dv1 = v0 - v1;
			var t1 = dv1 * dv1 < Config.epsilon * Config.epsilon?0.5:v0 / dv1;
			if(t1 < 0) {
				t1 = 0;
			} else if(t1 > 1) {
				t1 = 1;
			}
			ym = y0 + t1 * (y1 - y0);
		}
	}
	return ym;
};
ZPP_MarchingSquares.prototype.__class__ = ZPP_MarchingSquares;
var ZPP_Mat23 = zpp_nape.geom.ZPP_Mat23 = function() {
	this.next = null;
	this._invalidate = null;
	this.ty = 0.0;
	this.tx = 0.0;
	this.d = 0.0;
	this.c = 0.0;
	this.b = 0.0;
	this.a = 0.0;
	this.outer = null;
};
ZPP_Mat23.__name__ = ["zpp_nape","geom","ZPP_Mat23"];
ZPP_Mat23.get = function() {
	var ret;
	if(ZPP_Mat23.zpp_pool == null) {
		ret = new ZPP_Mat23();
	} else {
		ret = ZPP_Mat23.zpp_pool;
		ZPP_Mat23.zpp_pool = ret.next;
		ret.next = null;
	}
	return ret;
};
ZPP_Mat23.identity = function() {
	var ret = ZPP_Mat23.get();
	ret.setas(1,0,0,1,0,0);
	return ret;
};
ZPP_Mat23.prototype.outer = null;
ZPP_Mat23.prototype.wrapper = function() {
	if(this.outer == null) {
		this.outer = new Mat23();
		var o = this.outer.zpp_inner;
		o.next = ZPP_Mat23.zpp_pool;
		ZPP_Mat23.zpp_pool = o;
		this.outer.zpp_inner = this;
	}
	return this.outer;
};
ZPP_Mat23.prototype.a = null;
ZPP_Mat23.prototype.b = null;
ZPP_Mat23.prototype.c = null;
ZPP_Mat23.prototype.d = null;
ZPP_Mat23.prototype.tx = null;
ZPP_Mat23.prototype.ty = null;
ZPP_Mat23.prototype._invalidate = null;
ZPP_Mat23.prototype.invalidate = function() {
	if(this._invalidate != null) {
		this._invalidate();
	}
};
ZPP_Mat23.prototype.set = function(m) {
	this.setas(m.a,m.b,m.c,m.d,m.tx,m.ty);
};
ZPP_Mat23.prototype.setas = function(a,b,c,d,tx,ty) {
	this.tx = tx;
	this.ty = ty;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
};
ZPP_Mat23.prototype.next = null;
ZPP_Mat23.prototype.free = function() {
};
ZPP_Mat23.prototype.alloc = function() {
};
ZPP_Mat23.prototype.__class__ = ZPP_Mat23;
var ZPP_MatMN = zpp_nape.geom.ZPP_MatMN = function(m,n) {
	this.x = null;
	this.n = 0;
	this.m = 0;
	this.outer = null;
	this.m = m;
	this.n = n;
	this.x = [];
	var _g1 = 0;
	var _g = m * n;
	while(_g1 < _g) {
		++_g1;
		this.x.push(0.0);
	}
};
ZPP_MatMN.__name__ = ["zpp_nape","geom","ZPP_MatMN"];
ZPP_MatMN.prototype.outer = null;
ZPP_MatMN.prototype.m = null;
ZPP_MatMN.prototype.n = null;
ZPP_MatMN.prototype.x = null;
ZPP_MatMN.prototype.__class__ = ZPP_MatMN;
var ZPP_Monotone = zpp_nape.geom.ZPP_Monotone = function() { };
ZPP_Monotone.__name__ = ["zpp_nape","geom","ZPP_Monotone"];
ZPP_Monotone.bisector = function(b) {
	var a = b.prev;
	var c = b.next;
	var ux = 0.0;
	var uy = 0.0;
	ux = b.x - a.x;
	uy = b.y - a.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = c.x - b.x;
	vy = c.y - b.y;
	var ret;
	if(ZPP_Vec2.zpp_pool == null) {
		ret = new ZPP_Vec2();
	} else {
		ret = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.weak = false;
	ret._immutable = false;
	ret.x = -uy - vy;
	ret.y = ux + vx;
	var ret1 = ret;
	var imag = 1.0 / Math.sqrt(ret1.x * ret1.x + ret1.y * ret1.y);
	ret1.x *= imag;
	ret1.y *= imag;
	if(vy * ux - vx * uy < 0) {
		ret1.x = -ret1.x;
		ret1.y = -ret1.y;
	}
	return ret1;
};
ZPP_Monotone.below = function(p,q) {
	if(p.y < q.y) {
		return true;
	} else if(p.y > q.y) {
		return false;
	} else if(p.x < q.x) {
		return true;
	} else if(p.x > q.x) {
		return false;
	} else {
		var po = ZPP_Monotone.bisector(p);
		var qo = ZPP_Monotone.bisector(q);
		po.x += p.x;
		po.y += p.y;
		qo.x += q.x;
		qo.y += q.y;
		var ret = po.x < qo.x || po.x == qo.x && po.y < qo.y;
		if(po.outer != null) {
			po.outer.zpp_inner = null;
			po.outer = null;
		}
		po._isimmutable = null;
		po._validate = null;
		po._invalidate = null;
		po.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = po;
		if(qo.outer != null) {
			qo.outer.zpp_inner = null;
			qo.outer = null;
		}
		qo._isimmutable = null;
		qo._validate = null;
		qo._invalidate = null;
		qo.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = qo;
		return ret;
	}
};
ZPP_Monotone.above = function(p,q) {
	return ZPP_Monotone.below(q,p);
};
ZPP_Monotone.left_vertex = function(p) {
	var pre = p.prev;
	if(!(pre.y > p.y)) {
		if(pre.y == p.y) {
			return p.next.y < p.y;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
ZPP_Monotone.isMonotone = function(P) {
	var min = P;
	var max = P;
	var F = P.next;
	if(F != null) {
		var nite = F;
		while(true) {
			var p = nite;
			if(p.y < min.y) {
				min = p;
			}
			if(p.y > max.y) {
				max = p;
			}
			nite = nite.next;
			if(!(nite != P)) {
				break;
			}
		}
	}
	var ret = true;
	var pre = min;
	if(max != min.next) {
		var F1 = min.next;
		var L = max;
		if(F1 != null) {
			var nite1 = F1;
			while(true) {
				var p1 = nite1;
				if(p1.y < pre.y) {
					ret = false;
					break;
				}
				pre = p1;
				nite1 = nite1.next;
				if(!(nite1 != L)) {
					break;
				}
			}
		}
	}
	if(!ret) {
		return false;
	}
	pre = min;
	if(max != min.prev) {
		var F2 = min.prev;
		var L1 = max;
		if(F2 != null) {
			var nite2 = F2;
			while(true) {
				var p2 = nite2;
				if(p2.y < pre.y) {
					ret = false;
					break;
				}
				pre = p2;
				nite2 = nite2.prev;
				if(!(nite2 != L1)) {
					break;
				}
			}
		}
	}
	return ret;
};
ZPP_Monotone.sharedPPoly = null;
ZPP_Monotone.getShared = function() {
	if(ZPP_Monotone.sharedPPoly == null) {
		ZPP_Monotone.sharedPPoly = new ZPP_PartitionedPoly();
	}
	return ZPP_Monotone.sharedPPoly;
};
ZPP_Monotone.decompose = function(P,poly) {
	if(poly == null) {
		poly = new ZPP_PartitionedPoly(P);
	} else {
		poly.init(P);
	}
	if(poly.vertices == null) {
		return poly;
	}
	if(ZPP_Monotone.queue == null) {
		ZPP_Monotone.queue = new ZNPList_ZPP_PartitionVertex();
	}
	var F = poly.vertices;
	var L = poly.vertices;
	if(F != null) {
		var nite = F;
		while(true) {
			var p = nite;
			ZPP_Monotone.queue.add(p);
			var ux = 0.0;
			var uy = 0.0;
			ux = p.next.x - p.x;
			uy = p.next.y - p.y;
			var vx = 0.0;
			var vy = 0.0;
			vx = p.prev.x - p.x;
			vy = p.prev.y - p.y;
			var cx = vy * ux - vx * uy > 0.0;
			p.type = ZPP_Monotone.below(p.prev,p)?ZPP_Monotone.below(p.next,p)?cx?0:3:4:ZPP_Monotone.below(p,p.next)?cx?1:2:4;
			nite = nite.next;
			if(!(nite != L)) {
				break;
			}
		}
	}
	var xxlist = ZPP_Monotone.queue;
	if(xxlist.head != null && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt = null;
		var listSize = 1;
		var numMerges;
		var leftSize;
		var rightSize;
		while(true) {
			numMerges = 0;
			left = head;
			head = null;
			tail = head;
			while(left != null) {
				++numMerges;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					++leftSize;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt = right;
						right = right.next;
						--rightSize;
					} else if(rightSize == 0 || right == null) {
						nxt = left;
						left = left.next;
						--leftSize;
					} else if(ZPP_Monotone.above(left.elt,right.elt)) {
						nxt = left;
						left = left.next;
						--leftSize;
					} else {
						nxt = right;
						right = right.next;
						--rightSize;
					}
					if(tail != null) {
						tail.next = nxt;
					} else {
						head = nxt;
					}
					tail = nxt;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
			if(!(numMerges > 1)) {
				break;
			}
		}
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
	if(ZPP_Monotone.edges == null) {
		if(ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) {
			ZPP_Monotone.edges = new ZPP_Set_ZPP_PartitionVertex();
		} else {
			ZPP_Monotone.edges = ZPP_Set_ZPP_PartitionVertex.zpp_pool;
			ZPP_Set_ZPP_PartitionVertex.zpp_pool = ZPP_Monotone.edges.next;
			ZPP_Monotone.edges.next = null;
		}
		ZPP_Monotone.edges.lt = ZPP_PartitionVertex.edge_lt;
		ZPP_Monotone.edges.swapped = ZPP_PartitionVertex.edge_swap;
	}
	while(ZPP_Monotone.queue.head != null) {
		var v = ZPP_Monotone.queue.pop_unsafe();
		switch(v.type) {
		case 0:
			v.helper = v;
			v.node = ZPP_Monotone.edges.insert(v);
			break;
		case 1:
			var e = v.prev;
			if(e.helper == null) {
				throw new js._Boot.HaxeError("Fatal error (1): Polygon is not weakly-simple and clockwise");
			}
			if(e.helper.type == 2) {
				poly.add_diagonal(v,e.helper);
			}
			ZPP_Monotone.edges.remove_node(e.node);
			e.helper = null;
			break;
		case 2:
			var e1 = v.prev;
			if(e1.helper == null) {
				throw new js._Boot.HaxeError("Fatal error (3): Polygon is not weakly-simple and clockwise");
			}
			if(e1.helper.type == 2) {
				poly.add_diagonal(v,e1.helper);
			}
			ZPP_Monotone.edges.remove_node(e1.node);
			e1.helper = null;
			var ret = null;
			if(!ZPP_Monotone.edges.empty()) {
				var set_ite = ZPP_Monotone.edges.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var elt = set_ite.data;
					if(!ZPP_PartitionVertex.vert_lt(elt,v)) {
						ret = elt;
						break;
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			var e2 = ret;
			if(e2 != null) {
				if(e2.helper == null) {
					throw new js._Boot.HaxeError("Fatal error (4): Polygon is not weakly-simple and clockwise");
				}
				if(e2.helper.type == 2) {
					poly.add_diagonal(v,e2.helper);
				}
				e2.helper = v;
			}
			break;
		case 3:
			var ret1 = null;
			if(!ZPP_Monotone.edges.empty()) {
				var set_ite1 = ZPP_Monotone.edges.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var elt1 = set_ite1.data;
					if(!ZPP_PartitionVertex.vert_lt(elt1,v)) {
						ret1 = elt1;
						break;
					}
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			var e3 = ret1;
			if(e3 != null) {
				if(e3.helper == null) {
					throw new js._Boot.HaxeError("Fatal error (2): Polygon is not weakly-simple and clockwise");
				}
				poly.add_diagonal(v,e3.helper);
				e3.helper = v;
			}
			v.node = ZPP_Monotone.edges.insert(v);
			v.helper = v;
			break;
		case 4:
			var pre = v.prev;
			if(ZPP_Monotone.left_vertex(v)) {
				if(pre.helper == null) {
					throw new js._Boot.HaxeError("Fatal error (5): Polygon is not weakly-simple and clockwise");
				}
				if(pre.helper.type == 2) {
					poly.add_diagonal(v,pre.helper);
				}
				ZPP_Monotone.edges.remove_node(pre.node);
				pre.helper = null;
				v.node = ZPP_Monotone.edges.insert(v);
				v.helper = v;
			} else {
				var ret2 = null;
				if(!ZPP_Monotone.edges.empty()) {
					var set_ite2 = ZPP_Monotone.edges.parent;
					while(set_ite2.prev != null) set_ite2 = set_ite2.prev;
					while(set_ite2 != null) {
						var elt2 = set_ite2.data;
						if(!ZPP_PartitionVertex.vert_lt(elt2,v)) {
							ret2 = elt2;
							break;
						}
						if(set_ite2.next != null) {
							set_ite2 = set_ite2.next;
							while(set_ite2.prev != null) set_ite2 = set_ite2.prev;
						} else {
							while(set_ite2.parent != null && set_ite2 == set_ite2.parent.next) set_ite2 = set_ite2.parent;
							set_ite2 = set_ite2.parent;
						}
					}
				}
				var e4 = ret2;
				if(e4 == null || e4.helper == null) {
					throw new js._Boot.HaxeError("Fatal error (6): Polygon is not weakly-simple and clockwise");
				}
				if(e4.helper.type == 2) {
					poly.add_diagonal(v,e4.helper);
				}
				e4.helper = v;
			}
			break;
		}
	}
	return poly;
};
ZPP_Monotone.prototype.__class__ = ZPP_Monotone;
var ZPP_PartitionVertex = zpp_nape.geom.ZPP_PartitionVertex = function() {
	this.node = null;
	this.prev = null;
	this.next = null;
	this.rightchain = false;
	this.helper = null;
	this.type = 0;
	this.diagonals = null;
	this.forced = false;
	this.y = 0.0;
	this.x = 0.0;
	this.mag = 0;
	this.id = 0;
	this.id = ZPP_PartitionVertex.nextId++;
	this.diagonals = new ZNPList_ZPP_PartitionVertex();
};
ZPP_PartitionVertex.__name__ = ["zpp_nape","geom","ZPP_PartitionVertex"];
ZPP_PartitionVertex.get = function(x) {
	var ret;
	if(ZPP_PartitionVertex.zpp_pool == null) {
		ret = new ZPP_PartitionVertex();
	} else {
		ret = ZPP_PartitionVertex.zpp_pool;
		ZPP_PartitionVertex.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.x = x.x;
	ret.y = x.y;
	return ret;
};
ZPP_PartitionVertex.rightdistance = function(edge,vert) {
	var flip = edge.next.y > edge.y;
	var ux = 0.0;
	var uy = 0.0;
	ux = edge.next.x - edge.x;
	uy = edge.next.y - edge.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = vert.x - edge.x;
	vy = vert.y - edge.y;
	return (flip?-1.0:1.0) * (vy * ux - vx * uy);
};
ZPP_PartitionVertex.vert_lt = function(edge,vert) {
	if(vert == edge || vert == edge.next) {
		return true;
	} else if(edge.y == edge.next.y) {
		var x = edge.x;
		var y = edge.next.x;
		return (x < y?x:y) <= vert.x;
	} else {
		return ZPP_PartitionVertex.rightdistance(edge,vert) <= 0.0;
	}
};
ZPP_PartitionVertex.edge_swap = function(p,q) {
	var t = p.node;
	p.node = q.node;
	q.node = t;
};
ZPP_PartitionVertex.edge_lt = function(p,q) {
	if(p == q && p.next == q.next) {
		return false;
	}
	if(p == q.next) {
		return !ZPP_PartitionVertex.vert_lt(p,q);
	} else if(q == p.next) {
		return ZPP_PartitionVertex.vert_lt(q,p);
	} else if(p.y == p.next.y) {
		if(q.y == q.next.y) {
			var x = p.x;
			var y = p.next.x;
			var tmp = x > y?x:y;
			var x1 = q.x;
			var y1 = q.next.x;
			return tmp > (x1 > y1?x1:y1);
		} else if(!(ZPP_PartitionVertex.rightdistance(q,p) > 0.0)) {
			return ZPP_PartitionVertex.rightdistance(q,p.next) > 0.0;
		} else {
			return true;
		}
	} else {
		var qRight = ZPP_PartitionVertex.rightdistance(p,q);
		var qNextRight = ZPP_PartitionVertex.rightdistance(p,q.next);
		if(qRight == 0 && qNextRight == 0) {
			var x2 = p.x;
			var y2 = p.next.x;
			var tmp1 = x2 > y2?x2:y2;
			var x3 = q.x;
			var y3 = q.next.x;
			return tmp1 > (x3 > y3?x3:y3);
		}
		if(qRight * qNextRight >= 0) {
			if(!(qRight < 0)) {
				return qNextRight < 0;
			} else {
				return true;
			}
		}
		var pRight = ZPP_PartitionVertex.rightdistance(q,p);
		var pNextRight = ZPP_PartitionVertex.rightdistance(q,p.next);
		if(pRight * pNextRight >= 0) {
			if(!(pRight > 0)) {
				return pNextRight > 0;
			} else {
				return true;
			}
		}
		return false;
	}
};
ZPP_PartitionVertex.prototype.id = null;
ZPP_PartitionVertex.prototype.mag = null;
ZPP_PartitionVertex.prototype.x = null;
ZPP_PartitionVertex.prototype.y = null;
ZPP_PartitionVertex.prototype.forced = null;
ZPP_PartitionVertex.prototype.diagonals = null;
ZPP_PartitionVertex.prototype.type = null;
ZPP_PartitionVertex.prototype.helper = null;
ZPP_PartitionVertex.prototype.rightchain = null;
ZPP_PartitionVertex.prototype.next = null;
ZPP_PartitionVertex.prototype.prev = null;
ZPP_PartitionVertex.prototype.alloc = function() {
};
ZPP_PartitionVertex.prototype.free = function() {
	this.helper = null;
};
ZPP_PartitionVertex.prototype.copy = function() {
	var ret;
	if(ZPP_PartitionVertex.zpp_pool == null) {
		ret = new ZPP_PartitionVertex();
	} else {
		ret = ZPP_PartitionVertex.zpp_pool;
		ZPP_PartitionVertex.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.x = this.x;
	ret.y = this.y;
	ret.forced = this.forced;
	return ret;
};
ZPP_PartitionVertex.prototype.sort = function() {
	var ux = 0.0;
	var uy = 0.0;
	var vx = 0.0;
	var vy = 0.0;
	ux = this.prev.x - this.x;
	uy = this.prev.y - this.y;
	vx = this.next.x - this.x;
	vy = this.next.y - this.y;
	var ret = vy * ux - vx * uy;
	var vorient = ret > 0?-1:ret == 0?0:1;
	var xxlist = this.diagonals;
	if(xxlist.head != null && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt = null;
		var listSize = 1;
		var numMerges;
		var leftSize;
		var rightSize;
		while(true) {
			numMerges = 0;
			left = head;
			head = null;
			tail = head;
			while(left != null) {
				++numMerges;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					++leftSize;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt = right;
						right = right.next;
						--rightSize;
					} else if(rightSize == 0 || right == null) {
						nxt = left;
						left = left.next;
						--leftSize;
					} else {
						var tmp;
						if(vorient == 1) {
							ux = left.elt.x - this.x;
							uy = left.elt.y - this.y;
							vx = right.elt.x - this.x;
							vy = right.elt.y - this.y;
							var ret1 = vy * ux - vx * uy;
							tmp = (ret1 > 0?-1:ret1 == 0?0:1) == 1;
						} else {
							ux = this.prev.x - this.x;
							uy = this.prev.y - this.y;
							vx = left.elt.x - this.x;
							vy = left.elt.y - this.y;
							var ret2 = vy * ux - vx * uy;
							var d1 = ret2 > 0?-1:ret2 == 0?0:1;
							ux = this.prev.x - this.x;
							uy = this.prev.y - this.y;
							vx = right.elt.x - this.x;
							vy = right.elt.y - this.y;
							var ret3 = vy * ux - vx * uy;
							var d2 = ret3 > 0?-1:ret3 == 0?0:1;
							if(d1 * d2 == 1 || d1 * d2 == 0 && (d1 == 1 || d2 == 1)) {
								ux = left.elt.x - this.x;
								uy = left.elt.y - this.y;
								vx = right.elt.x - this.x;
								vy = right.elt.y - this.y;
								var ret4 = vy * ux - vx * uy;
								tmp = (ret4 > 0?-1:ret4 == 0?0:1) == 1;
							} else if(d1 == -1 || d2 == -1) {
								tmp = d2 == -1;
							} else if(d1 == 0 && d2 == 0) {
								ux = this.x - this.prev.x;
								uy = this.y - this.prev.y;
								vx = left.elt.x - this.x;
								vy = left.elt.y - this.y;
								var d11 = ux * vx + uy * vy;
								vx = right.elt.x - this.x;
								vy = right.elt.y - this.y;
								var d21 = ux * vx + uy * vy;
								if(d11 < 0 && d21 > 0) {
									tmp = true;
								} else if(d21 < 0 && d11 > 0) {
									tmp = false;
								} else {
									tmp = true;
								}
							} else {
								tmp = true;
							}
						}
						if(tmp) {
							nxt = left;
							left = left.next;
							--leftSize;
						} else {
							nxt = right;
							right = right.next;
							--rightSize;
						}
					}
					if(tail != null) {
						tail.next = nxt;
					} else {
						head = nxt;
					}
					tail = nxt;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
			if(!(numMerges > 1)) {
				break;
			}
		}
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
};
ZPP_PartitionVertex.prototype.node = null;
ZPP_PartitionVertex.prototype.__class__ = ZPP_PartitionVertex;
var ZPP_PartitionedPoly = zpp_nape.geom.ZPP_PartitionedPoly = function(P) {
	this.next = null;
	this.vertices = null;
	this.init(P);
};
ZPP_PartitionedPoly.__name__ = ["zpp_nape","geom","ZPP_PartitionedPoly"];
ZPP_PartitionedPoly.sharedPPList = null;
ZPP_PartitionedPoly.getSharedPP = function() {
	if(ZPP_PartitionedPoly.sharedPPList == null) {
		ZPP_PartitionedPoly.sharedPPList = new ZNPList_ZPP_PartitionedPoly();
	}
	return ZPP_PartitionedPoly.sharedPPList;
};
ZPP_PartitionedPoly.sharedGVList = null;
ZPP_PartitionedPoly.getShared = function() {
	if(ZPP_PartitionedPoly.sharedGVList == null) {
		ZPP_PartitionedPoly.sharedGVList = new ZNPList_ZPP_GeomVert();
	}
	return ZPP_PartitionedPoly.sharedGVList;
};
ZPP_PartitionedPoly.prototype.vertices = null;
ZPP_PartitionedPoly.prototype.eq = function(a,b) {
	var ax = a.x;
	var ay = a.y;
	var bx = b.x;
	var by = b.y;
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - by;
	return dx * dx + dy * dy < Config.epsilon * Config.epsilon;
};
ZPP_PartitionedPoly.prototype.next = null;
ZPP_PartitionedPoly.prototype.alloc = function() {
};
ZPP_PartitionedPoly.prototype.free = function() {
};
ZPP_PartitionedPoly.prototype.init = function(P) {
	if(P == null) {
		return;
	}
	var area = 0.0;
	if(P != null) {
		var nite = P;
		while(true) {
			var v = nite;
			area += v.x * (v.next.y - v.prev.y);
			nite = nite.next;
			if(!(nite != P)) {
				break;
			}
		}
	}
	var cw = area * 0.5 > 0.0;
	var p = P;
	while(true) {
		var tmp;
		if(cw) {
			var ret;
			if(ZPP_PartitionVertex.zpp_pool == null) {
				ret = new ZPP_PartitionVertex();
			} else {
				ret = ZPP_PartitionVertex.zpp_pool;
				ZPP_PartitionVertex.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.x = p.x;
			ret.y = p.y;
			var obj = ret;
			if(this.vertices == null) {
				this.vertices = obj.prev = obj.next = obj;
			} else {
				obj.prev = this.vertices;
				obj.next = this.vertices.next;
				this.vertices.next.prev = obj;
				this.vertices.next = obj;
			}
			tmp = obj;
		} else {
			var ret1;
			if(ZPP_PartitionVertex.zpp_pool == null) {
				ret1 = new ZPP_PartitionVertex();
			} else {
				ret1 = ZPP_PartitionVertex.zpp_pool;
				ZPP_PartitionVertex.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.x = p.x;
			ret1.y = p.y;
			var obj1 = ret1;
			if(this.vertices == null) {
				this.vertices = obj1.prev = obj1.next = obj1;
			} else {
				obj1.next = this.vertices;
				obj1.prev = this.vertices.prev;
				this.vertices.prev.next = obj1;
				this.vertices.prev = obj1;
			}
			tmp = obj1;
		}
		this.vertices = tmp;
		this.vertices.forced = p.forced;
		p = p.next;
		if(!(p != P)) {
			break;
		}
	}
	this.remove_collinear_vertices();
};
ZPP_PartitionedPoly.prototype.remove_collinear_vertices = function() {
	var p = this.vertices;
	var skip = true;
	while(skip || p != this.vertices) {
		skip = false;
		if(this.eq(p,p.next)) {
			if(p == this.vertices) {
				this.vertices = p.next;
				skip = true;
			}
			if(p.forced) {
				p.next.forced = true;
			}
			if(p != null && p.prev == p) {
				p.next = p.prev = null;
				var o = p;
				o.helper = null;
				o.next = ZPP_PartitionVertex.zpp_pool;
				ZPP_PartitionVertex.zpp_pool = o;
				p = null;
				p = p;
			} else {
				var retnodes = p.next;
				p.prev.next = p.next;
				p.next.prev = p.prev;
				p.next = p.prev = null;
				var o1 = p;
				o1.helper = null;
				o1.next = ZPP_PartitionVertex.zpp_pool;
				ZPP_PartitionVertex.zpp_pool = o1;
				p = null;
				p = retnodes;
			}
			if(p == null) {
				this.vertices = null;
				break;
			}
		} else {
			p = p.next;
		}
	}
	if(this.vertices == null) {
		return true;
	}
	var removed;
	while(true) {
		removed = false;
		p = this.vertices;
		skip = true;
		while(skip || p != this.vertices) {
			skip = false;
			var pre = p.prev;
			var ux = 0.0;
			var uy = 0.0;
			ux = p.x - pre.x;
			uy = p.y - pre.y;
			var vx = 0.0;
			var vy = 0.0;
			vx = p.next.x - p.x;
			vy = p.next.y - p.y;
			var crs = vy * ux - vx * uy;
			if(crs * crs >= Config.epsilon * Config.epsilon) {
				p = p.next;
			} else {
				if(p == this.vertices) {
					this.vertices = p.next;
					skip = true;
				}
				if(p != null && p.prev == p) {
					p.next = p.prev = null;
					var o2 = p;
					o2.helper = null;
					o2.next = ZPP_PartitionVertex.zpp_pool;
					ZPP_PartitionVertex.zpp_pool = o2;
					p = null;
					p = p;
				} else {
					var retnodes1 = p.next;
					p.prev.next = p.next;
					p.next.prev = p.prev;
					p.next = p.prev = null;
					var o3 = p;
					o3.helper = null;
					o3.next = ZPP_PartitionVertex.zpp_pool;
					ZPP_PartitionVertex.zpp_pool = o3;
					p = null;
					p = retnodes1;
				}
				removed = true;
				if(p == null) {
					removed = false;
					this.vertices = null;
					break;
				}
			}
		}
		if(!removed) {
			break;
		}
	}
	return this.vertices == null;
};
ZPP_PartitionedPoly.prototype.add_diagonal = function(p,q) {
	p.diagonals.add(q);
	q.diagonals.add(p);
	p.forced = q.forced = true;
};
ZPP_PartitionedPoly.prototype.extract_partitions = function(ret) {
	if(ret == null) {
		ret = new ZNPList_ZPP_PartitionedPoly();
	}
	if(this.vertices != null) {
		var F = this.vertices;
		var L = this.vertices;
		if(F != null) {
			var nite = F;
			while(true) {
				nite.sort();
				nite = nite.next;
				if(!(nite != L)) {
					break;
				}
			}
		}
		this.pull_partitions(this.vertices,ret);
		while(this.vertices != null) {
			var tmp;
			if(this.vertices != null && this.vertices.prev == this.vertices) {
				this.vertices.next = this.vertices.prev = null;
				var o = this.vertices;
				o.helper = null;
				o.next = ZPP_PartitionVertex.zpp_pool;
				ZPP_PartitionVertex.zpp_pool = o;
				tmp = this.vertices = null;
			} else {
				var retnodes = this.vertices.next;
				this.vertices.prev.next = this.vertices.next;
				this.vertices.next.prev = this.vertices.prev;
				this.vertices.next = this.vertices.prev = null;
				var o1 = this.vertices;
				o1.helper = null;
				o1.next = ZPP_PartitionVertex.zpp_pool;
				ZPP_PartitionVertex.zpp_pool = o1;
				this.vertices = null;
				tmp = retnodes;
			}
			this.vertices = tmp;
		}
		var pre = null;
		var cx_ite = ret.head;
		while(cx_ite != null) {
			if(cx_ite.elt.remove_collinear_vertices()) {
				ret.erase(pre);
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
	}
	return ret;
};
ZPP_PartitionedPoly.prototype.pull_partitions = function(start,ret) {
	var poly;
	if(ZPP_PartitionedPoly.zpp_pool == null) {
		poly = new ZPP_PartitionedPoly();
	} else {
		poly = ZPP_PartitionedPoly.zpp_pool;
		ZPP_PartitionedPoly.zpp_pool = poly.next;
		poly.next = null;
	}
	var next = start;
	while(true) {
		var ret1;
		if(ZPP_PartitionVertex.zpp_pool == null) {
			ret1 = new ZPP_PartitionVertex();
		} else {
			ret1 = ZPP_PartitionVertex.zpp_pool;
			ZPP_PartitionVertex.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.x = next.x;
		ret1.y = next.y;
		ret1.forced = next.forced;
		var obj = ret1;
		if(poly.vertices == null) {
			poly.vertices = obj.prev = obj.next = obj;
		} else {
			obj.prev = poly.vertices;
			obj.next = poly.vertices.next;
			poly.vertices.next.prev = obj;
			poly.vertices.next = obj;
		}
		poly.vertices = obj;
		poly.vertices.forced = next.forced;
		if(next.diagonals.head != null) {
			var _this = next.diagonals;
			var ret2 = _this.head.elt;
			_this.pop();
			if(ret2 == start) {
				break;
			} else {
				next = this.pull_partitions(next,ret);
			}
		} else {
			next = next.next;
		}
		if(!(next != start)) {
			break;
		}
	}
	var area = 0.0;
	var F = poly.vertices;
	var L = poly.vertices;
	if(F != null) {
		var nite = F;
		while(true) {
			var v = nite;
			area += v.x * (v.next.y - v.prev.y);
			nite = nite.next;
			if(!(nite != L)) {
				break;
			}
		}
	}
	if(area * 0.5 != 0) {
		ret.add(poly);
	}
	return next;
};
ZPP_PartitionedPoly.prototype.extract = function(ret) {
	if(ret == null) {
		ret = new ZNPList_ZPP_GeomVert();
	}
	if(this.vertices != null) {
		var F = this.vertices;
		var L = this.vertices;
		if(F != null) {
			var nite = F;
			while(true) {
				nite.sort();
				nite = nite.next;
				if(!(nite != L)) {
					break;
				}
			}
		}
		this.pull(this.vertices,ret);
		while(this.vertices != null) {
			var tmp;
			if(this.vertices != null && this.vertices.prev == this.vertices) {
				this.vertices.next = this.vertices.prev = null;
				var o = this.vertices;
				o.helper = null;
				o.next = ZPP_PartitionVertex.zpp_pool;
				ZPP_PartitionVertex.zpp_pool = o;
				tmp = this.vertices = null;
			} else {
				var retnodes = this.vertices.next;
				this.vertices.prev.next = this.vertices.next;
				this.vertices.next.prev = this.vertices.prev;
				this.vertices.next = this.vertices.prev = null;
				var o1 = this.vertices;
				o1.helper = null;
				o1.next = ZPP_PartitionVertex.zpp_pool;
				ZPP_PartitionVertex.zpp_pool = o1;
				this.vertices = null;
				tmp = retnodes;
			}
			this.vertices = tmp;
		}
	}
	return ret;
};
ZPP_PartitionedPoly.prototype.pull = function(start,ret) {
	var poly = null;
	var next = start;
	while(true) {
		var x = next.x;
		var y = next.y;
		var ret1;
		if(ZPP_GeomVert.zpp_pool == null) {
			ret1 = new ZPP_GeomVert();
		} else {
			ret1 = ZPP_GeomVert.zpp_pool;
			ZPP_GeomVert.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.forced = false;
		ret1.x = x;
		ret1.y = y;
		var obj = ret1;
		if(poly == null) {
			poly = obj.prev = obj.next = obj;
		} else {
			obj.prev = poly;
			obj.next = poly.next;
			poly.next.prev = obj;
			poly.next = obj;
		}
		poly = obj;
		obj.forced = next.forced;
		if(next.diagonals.head != null) {
			var _this = next.diagonals;
			var ret2 = _this.head.elt;
			_this.pop();
			if(ret2 == start) {
				break;
			} else {
				next = this.pull(next,ret);
			}
		} else {
			next = next.next;
		}
		if(!(next != start)) {
			break;
		}
	}
	var area = 0.0;
	var F = poly;
	var L = poly;
	if(F != null) {
		var nite = F;
		while(true) {
			var v = nite;
			area += v.x * (v.next.y - v.prev.y);
			nite = nite.next;
			if(!(nite != L)) {
				break;
			}
		}
	}
	var area1 = area * 0.5;
	if(area1 * area1 >= Config.epsilon * Config.epsilon) {
		var p = poly;
		var skip = true;
		while(skip || p != poly) {
			skip = false;
			var ax = p.x;
			var ay = p.y;
			var bx = p.next.x;
			var by = p.next.y;
			var dx = 0.0;
			var dy = 0.0;
			dx = ax - bx;
			dy = ay - by;
			if(dx * dx + dy * dy < Config.epsilon * Config.epsilon) {
				if(p == poly) {
					poly = p.next;
					skip = true;
				}
				if(p.forced) {
					p.next.forced = true;
				}
				if(p != null && p.prev == p) {
					p.next = p.prev = null;
					p = null;
					p = p;
				} else {
					var retnodes = p.next;
					p.prev.next = p.next;
					p.next.prev = p.prev;
					p.next = p.prev = null;
					p = null;
					p = retnodes;
				}
				if(p == null) {
					poly = null;
					break;
				}
			} else {
				p = p.next;
			}
		}
		if(poly != null) {
			var removed;
			while(true) {
				removed = false;
				p = poly;
				skip = true;
				while(skip || p != poly) {
					skip = false;
					var pre = p.prev;
					var ux = 0.0;
					var uy = 0.0;
					ux = p.x - pre.x;
					uy = p.y - pre.y;
					var vx = 0.0;
					var vy = 0.0;
					vx = p.next.x - p.x;
					vy = p.next.y - p.y;
					var crs = vy * ux - vx * uy;
					if(crs * crs >= Config.epsilon * Config.epsilon) {
						p = p.next;
					} else {
						if(p == poly) {
							poly = p.next;
							skip = true;
						}
						if(p != null && p.prev == p) {
							p.next = p.prev = null;
							p = null;
							p = p;
						} else {
							var retnodes1 = p.next;
							p.prev.next = p.next;
							p.next.prev = p.prev;
							p.next = p.prev = null;
							p = null;
							p = retnodes1;
						}
						removed = true;
						if(p == null) {
							removed = false;
							poly = null;
							break;
						}
					}
				}
				if(!removed) {
					break;
				}
			}
		}
		if(poly != null) {
			ret.add(poly);
		}
	}
	return next;
};
ZPP_PartitionedPoly.prototype.__class__ = ZPP_PartitionedPoly;
var ZPP_Ray = zpp_nape.geom.ZPP_Ray = function() {
	this.zip_dir = false;
	this.absnormaly = 0.0;
	this.absnormalx = 0.0;
	this.normaly = 0.0;
	this.normalx = 0.0;
	this.idiry = 0.0;
	this.idirx = 0.0;
	this.diry = 0.0;
	this.dirx = 0.0;
	this.originy = 0.0;
	this.originx = 0.0;
	this.userData = null;
	this.maxdist = 0.0;
	this.direction = null;
	this.origin = null;
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = 0;
		ret1.y = 0;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == 0) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == 0;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = 0;
			ret.zpp_inner.y = 0;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.origin = ret;
	this.origin.zpp_inner._invalidate = $bind(this,this.origin_invalidate);
	var ret2;
	if(ZPP_PubPool.poolVec2 == null) {
		ret2 = new Vec2();
	} else {
		ret2 = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret2.zpp_pool;
		ret2.zpp_pool = null;
		ret2.zpp_disp = false;
		if(ret2 == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret2.zpp_inner == null) {
		var ret3;
		if(ZPP_Vec2.zpp_pool == null) {
			ret3 = new ZPP_Vec2();
		} else {
			ret3 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret3.next;
			ret3.next = null;
		}
		ret3.weak = false;
		ret3._immutable = false;
		ret3.x = 0;
		ret3.y = 0;
		ret2.zpp_inner = ret3;
		ret2.zpp_inner.outer = ret2;
	} else {
		if(ret2 != null && ret2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this4 = ret2.zpp_inner;
		if(_this4._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this4._isimmutable != null) {
			_this4._isimmutable();
		}
		var tmp1;
		if(ret2 != null && ret2.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this5 = ret2.zpp_inner;
		if(_this5._validate != null) {
			_this5._validate();
		}
		if(ret2.zpp_inner.x == 0) {
			if(ret2 != null && ret2.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this6 = ret2.zpp_inner;
			if(_this6._validate != null) {
				_this6._validate();
			}
			tmp1 = ret2.zpp_inner.y == 0;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			ret2.zpp_inner.x = 0;
			ret2.zpp_inner.y = 0;
			var _this7 = ret2.zpp_inner;
			if(_this7._invalidate != null) {
				_this7._invalidate(_this7);
			}
		}
	}
	ret2.zpp_inner.weak = false;
	this.direction = ret2;
	this.direction.zpp_inner._invalidate = $bind(this,this.direction_invalidate);
	this.originx = 0;
	this.originy = 0;
	this.dirx = 0;
	this.diry = 0;
	this.zip_dir = false;
};
ZPP_Ray.__name__ = ["zpp_nape","geom","ZPP_Ray"];
ZPP_Ray.prototype.origin = null;
ZPP_Ray.prototype.direction = null;
ZPP_Ray.prototype.maxdist = null;
ZPP_Ray.prototype.userData = null;
ZPP_Ray.prototype.originx = null;
ZPP_Ray.prototype.originy = null;
ZPP_Ray.prototype.dirx = null;
ZPP_Ray.prototype.diry = null;
ZPP_Ray.prototype.idirx = null;
ZPP_Ray.prototype.idiry = null;
ZPP_Ray.prototype.normalx = null;
ZPP_Ray.prototype.normaly = null;
ZPP_Ray.prototype.absnormalx = null;
ZPP_Ray.prototype.absnormaly = null;
ZPP_Ray.prototype.origin_invalidate = function(x) {
	this.originx = x.x;
	this.originy = x.y;
};
ZPP_Ray.prototype.direction_invalidate = function(x) {
	this.dirx = x.x;
	this.diry = x.y;
	this.zip_dir = true;
};
ZPP_Ray.prototype.zip_dir = null;
ZPP_Ray.prototype.invalidate_dir = function() {
	this.zip_dir = true;
};
ZPP_Ray.prototype.validate_dir = function() {
	if(this.zip_dir) {
		this.zip_dir = false;
		if(this.dirx * this.dirx + this.diry * this.diry < Config.epsilon) {
			throw new js._Boot.HaxeError("Error: Ray::direction is degenerate");
		}
		var imag = 1.0 / Math.sqrt(this.dirx * this.dirx + this.diry * this.diry);
		this.dirx *= imag;
		this.diry *= imag;
		this.idirx = 1 / this.dirx;
		this.idiry = 1 / this.diry;
		this.normalx = -this.diry;
		this.normaly = this.dirx;
		var x = this.normalx;
		this.absnormalx = x < 0?-x:x;
		var x1 = this.normaly;
		this.absnormaly = x1 < 0?-x1:x1;
	}
};
ZPP_Ray.prototype.rayAABB = function() {
	var x0 = this.originx;
	var x1 = x0;
	var y0 = this.originy;
	var y1 = y0;
	if(this.maxdist >= Infinity) {
		if(this.dirx > 0) {
			x1 = Infinity;
		} else if(this.dirx < 0) {
			x1 = -Infinity;
		}
		if(this.diry > 0) {
			y1 = Infinity;
		} else if(this.diry < 0) {
			y1 = -Infinity;
		}
	} else {
		x1 += this.maxdist * this.dirx;
		y1 += this.maxdist * this.diry;
	}
	if(x1 < x0) {
		var t = x0;
		x0 = x1;
		x1 = t;
	}
	if(y1 < y0) {
		var t1 = y0;
		y0 = y1;
		y1 = t1;
	}
	var ret;
	if(ZPP_AABB.zpp_pool == null) {
		ret = new ZPP_AABB();
	} else {
		ret = ZPP_AABB.zpp_pool;
		ZPP_AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.minx = x0;
	ret.miny = y0;
	ret.maxx = x1;
	ret.maxy = y1;
	return ret;
};
ZPP_Ray.prototype.aabbtest = function(a) {
	var dot1 = this.normalx * (this.originx - 0.5 * (a.minx + a.maxx)) + this.normaly * (this.originy - 0.5 * (a.miny + a.maxy));
	return (dot1 < 0?-dot1:dot1) < this.absnormalx * 0.5 * (a.maxx - a.minx) + this.absnormaly * 0.5 * (a.maxy - a.miny);
};
ZPP_Ray.prototype.aabbsect = function(a) {
	var cx = this.originx >= a.minx && this.originx <= a.maxx;
	var cy = this.originy >= a.miny && this.originy <= a.maxy;
	if(cx && cy) {
		return 0.0;
	} else {
		var ret = -1.0;
		while(!(this.dirx >= 0 && this.originx >= a.maxx)) {
			if(this.dirx <= 0 && this.originx <= a.minx) {
				break;
			}
			if(this.diry >= 0 && this.originy >= a.maxy) {
				break;
			}
			if(this.diry <= 0 && this.originy <= a.miny) {
				break;
			}
			if(this.dirx > 0) {
				var t = (a.minx - this.originx) * this.idirx;
				if(t >= 0 && t <= this.maxdist) {
					var y = this.originy + t * this.diry;
					if(y >= a.miny && y <= a.maxy) {
						ret = t;
						break;
					}
				}
			} else if(this.dirx < 0) {
				var t1 = (a.maxx - this.originx) * this.idirx;
				if(t1 >= 0 && t1 <= this.maxdist) {
					var y1 = this.originy + t1 * this.diry;
					if(y1 >= a.miny && y1 <= a.maxy) {
						ret = t1;
						break;
					}
				}
			}
			if(this.diry > 0) {
				var t2 = (a.miny - this.originy) * this.idiry;
				if(t2 >= 0 && t2 <= this.maxdist) {
					var x = this.originx + t2 * this.dirx;
					if(x >= a.minx && x <= a.maxx) {
						ret = t2;
						break;
					}
				}
			} else if(this.diry < 0) {
				var t3 = (a.maxy - this.originy) * this.idiry;
				if(t3 >= 0 && t3 <= this.maxdist) {
					var x1 = this.originx + t3 * this.dirx;
					if(x1 >= a.minx && x1 <= a.maxx) {
						ret = t3;
						break;
					}
				}
			}
			break;
		}
		return ret;
	}
};
ZPP_Ray.prototype.circlesect = function(c,inner,mint) {
	if(c.zip_worldCOM) {
		if(c.body != null) {
			c.zip_worldCOM = false;
			if(c.zip_localCOM) {
				c.zip_localCOM = false;
				if(c.type == 1) {
					var _this = c.polygon;
					if(_this.lverts.next == null) {
						throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
					}
					if(_this.lverts.next.next == null) {
						_this.localCOMx = _this.lverts.next.x;
						_this.localCOMy = _this.lverts.next.y;
					} else if(_this.lverts.next.next.next == null) {
						_this.localCOMx = _this.lverts.next.x;
						_this.localCOMy = _this.lverts.next.y;
						_this.localCOMx += _this.lverts.next.next.x;
						_this.localCOMy += _this.lverts.next.next.y;
						_this.localCOMx *= 0.5;
						_this.localCOMy *= 0.5;
					} else {
						_this.localCOMx = 0;
						_this.localCOMy = 0;
						var area = 0.0;
						var cx_ite = _this.lverts.next;
						var u = cx_ite;
						cx_ite = cx_ite.next;
						var v = cx_ite;
						cx_ite = cx_ite.next;
						while(cx_ite != null) {
							var w = cx_ite;
							area += v.x * (w.y - u.y);
							var cf = w.y * v.x - w.x * v.y;
							_this.localCOMx += (v.x + w.x) * cf;
							_this.localCOMy += (v.y + w.y) * cf;
							u = v;
							v = w;
							cx_ite = cx_ite.next;
						}
						cx_ite = _this.lverts.next;
						var w1 = cx_ite;
						area += v.x * (w1.y - u.y);
						var cf1 = w1.y * v.x - w1.x * v.y;
						_this.localCOMx += (v.x + w1.x) * cf1;
						_this.localCOMy += (v.y + w1.y) * cf1;
						u = v;
						cx_ite = cx_ite.next;
						var w2 = cx_ite;
						area += w1.x * (w2.y - u.y);
						var cf2 = w2.y * w1.x - w2.x * w1.y;
						_this.localCOMx += (w1.x + w2.x) * cf2;
						_this.localCOMy += (w1.y + w2.y) * cf2;
						area = 1 / (3 * area);
						var t = area;
						_this.localCOMx *= t;
						_this.localCOMy *= t;
					}
				}
				if(c.wrap_localCOM != null) {
					c.wrap_localCOM.zpp_inner.x = c.localCOMx;
					c.wrap_localCOM.zpp_inner.y = c.localCOMy;
				}
			}
			var _this1 = c.body;
			if(_this1.zip_axis) {
				_this1.zip_axis = false;
				_this1.axisx = Math.sin(_this1.rot);
				_this1.axisy = Math.cos(_this1.rot);
			}
			c.worldCOMx = c.body.posx + (c.body.axisy * c.localCOMx - c.body.axisx * c.localCOMy);
			c.worldCOMy = c.body.posy + (c.localCOMx * c.body.axisx + c.localCOMy * c.body.axisy);
		}
	}
	var acx = 0.0;
	var acy = 0.0;
	acx = this.originx - c.worldCOMx;
	acy = this.originy - c.worldCOMy;
	var A = this.dirx * this.dirx + this.diry * this.diry;
	var B = 2 * (acx * this.dirx + acy * this.diry);
	var C = acx * acx + acy * acy - c.radius * c.radius;
	var det = B * B - 4 * A * C;
	if(det == 0) {
		var t1 = -B / 2 * A;
		if((!inner || C > 0) && t1 > 0 && t1 < mint && t1 <= this.maxdist) {
			var nx = 0.0;
			var ny = 0.0;
			nx = this.originx;
			ny = this.originy;
			nx += this.dirx * t1;
			ny += this.diry * t1;
			nx -= c.worldCOMx;
			ny -= c.worldCOMy;
			var imag = 1.0 / Math.sqrt(nx * nx + ny * ny);
			nx *= imag;
			ny *= imag;
			if(C <= 0) {
				nx = -nx;
				ny = -ny;
			}
			if(nx != nx || ny != ny) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var ret;
			if(ZPP_PubPool.poolVec2 == null) {
				ret = new Vec2();
			} else {
				ret = ZPP_PubPool.poolVec2;
				ZPP_PubPool.poolVec2 = ret.zpp_pool;
				ret.zpp_pool = null;
				ret.zpp_disp = false;
				if(ret == ZPP_PubPool.nextVec2) {
					ZPP_PubPool.nextVec2 = null;
				}
			}
			if(ret.zpp_inner == null) {
				var ret1;
				if(ZPP_Vec2.zpp_pool == null) {
					ret1 = new ZPP_Vec2();
				} else {
					ret1 = ZPP_Vec2.zpp_pool;
					ZPP_Vec2.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.weak = false;
				ret1._immutable = false;
				ret1.x = nx;
				ret1.y = ny;
				ret.zpp_inner = ret1;
				ret.zpp_inner.outer = ret;
			} else {
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._immutable) {
					throw new js._Boot.HaxeError("Error: Vec2 is immutable");
				}
				if(_this2._isimmutable != null) {
					_this2._isimmutable();
				}
				if(nx != nx || ny != ny) {
					throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
				}
				var tmp;
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this3 = ret.zpp_inner;
				if(_this3._validate != null) {
					_this3._validate();
				}
				if(ret.zpp_inner.x == nx) {
					if(ret != null && ret.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this4 = ret.zpp_inner;
					if(_this4._validate != null) {
						_this4._validate();
					}
					tmp = ret.zpp_inner.y == ny;
				} else {
					tmp = false;
				}
				if(!tmp) {
					ret.zpp_inner.x = nx;
					ret.zpp_inner.y = ny;
					var _this5 = ret.zpp_inner;
					if(_this5._invalidate != null) {
						_this5._invalidate(_this5);
					}
				}
			}
			ret.zpp_inner.weak = false;
			return ZPP_ConvexRayResult.getRay(ret,t1,C <= 0,c.outer);
		} else {
			return null;
		}
	} else {
		det = Math.sqrt(det);
		A = 1 / (2 * A);
		var t0 = (-B - det) * A;
		var t11 = (-B + det) * A;
		if(t0 > 0) {
			if(t0 < mint && t0 <= this.maxdist) {
				var nx1 = 0.0;
				var ny1 = 0.0;
				nx1 = this.originx;
				ny1 = this.originy;
				nx1 += this.dirx * t0;
				ny1 += this.diry * t0;
				nx1 -= c.worldCOMx;
				ny1 -= c.worldCOMy;
				var imag1 = 1.0 / Math.sqrt(nx1 * nx1 + ny1 * ny1);
				nx1 *= imag1;
				ny1 *= imag1;
				if(nx1 != nx1 || ny1 != ny1) {
					throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
				}
				var ret2;
				if(ZPP_PubPool.poolVec2 == null) {
					ret2 = new Vec2();
				} else {
					ret2 = ZPP_PubPool.poolVec2;
					ZPP_PubPool.poolVec2 = ret2.zpp_pool;
					ret2.zpp_pool = null;
					ret2.zpp_disp = false;
					if(ret2 == ZPP_PubPool.nextVec2) {
						ZPP_PubPool.nextVec2 = null;
					}
				}
				if(ret2.zpp_inner == null) {
					var ret3;
					if(ZPP_Vec2.zpp_pool == null) {
						ret3 = new ZPP_Vec2();
					} else {
						ret3 = ZPP_Vec2.zpp_pool;
						ZPP_Vec2.zpp_pool = ret3.next;
						ret3.next = null;
					}
					ret3.weak = false;
					ret3._immutable = false;
					ret3.x = nx1;
					ret3.y = ny1;
					ret2.zpp_inner = ret3;
					ret2.zpp_inner.outer = ret2;
				} else {
					if(ret2 != null && ret2.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this6 = ret2.zpp_inner;
					if(_this6._immutable) {
						throw new js._Boot.HaxeError("Error: Vec2 is immutable");
					}
					if(_this6._isimmutable != null) {
						_this6._isimmutable();
					}
					if(nx1 != nx1 || ny1 != ny1) {
						throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
					}
					var tmp1;
					if(ret2 != null && ret2.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this7 = ret2.zpp_inner;
					if(_this7._validate != null) {
						_this7._validate();
					}
					if(ret2.zpp_inner.x == nx1) {
						if(ret2 != null && ret2.zpp_disp) {
							throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this8 = ret2.zpp_inner;
						if(_this8._validate != null) {
							_this8._validate();
						}
						tmp1 = ret2.zpp_inner.y == ny1;
					} else {
						tmp1 = false;
					}
					if(!tmp1) {
						ret2.zpp_inner.x = nx1;
						ret2.zpp_inner.y = ny1;
						var _this9 = ret2.zpp_inner;
						if(_this9._invalidate != null) {
							_this9._invalidate(_this9);
						}
					}
				}
				ret2.zpp_inner.weak = false;
				return ZPP_ConvexRayResult.getRay(ret2,t0,false,c.outer);
			} else {
				return null;
			}
		} else if(t11 > 0 && inner) {
			if(t11 < mint && t11 <= this.maxdist) {
				var nx2 = 0.0;
				var ny2 = 0.0;
				nx2 = this.originx;
				ny2 = this.originy;
				nx2 += this.dirx * t11;
				ny2 += this.diry * t11;
				nx2 -= c.worldCOMx;
				ny2 -= c.worldCOMy;
				var imag2 = 1.0 / Math.sqrt(nx2 * nx2 + ny2 * ny2);
				nx2 *= imag2;
				ny2 *= imag2;
				nx2 = -nx2;
				ny2 = -ny2;
				if(nx2 != nx2 || ny2 != ny2) {
					throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
				}
				var ret4;
				if(ZPP_PubPool.poolVec2 == null) {
					ret4 = new Vec2();
				} else {
					ret4 = ZPP_PubPool.poolVec2;
					ZPP_PubPool.poolVec2 = ret4.zpp_pool;
					ret4.zpp_pool = null;
					ret4.zpp_disp = false;
					if(ret4 == ZPP_PubPool.nextVec2) {
						ZPP_PubPool.nextVec2 = null;
					}
				}
				if(ret4.zpp_inner == null) {
					var ret5;
					if(ZPP_Vec2.zpp_pool == null) {
						ret5 = new ZPP_Vec2();
					} else {
						ret5 = ZPP_Vec2.zpp_pool;
						ZPP_Vec2.zpp_pool = ret5.next;
						ret5.next = null;
					}
					ret5.weak = false;
					ret5._immutable = false;
					ret5.x = nx2;
					ret5.y = ny2;
					ret4.zpp_inner = ret5;
					ret4.zpp_inner.outer = ret4;
				} else {
					if(ret4 != null && ret4.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this10 = ret4.zpp_inner;
					if(_this10._immutable) {
						throw new js._Boot.HaxeError("Error: Vec2 is immutable");
					}
					if(_this10._isimmutable != null) {
						_this10._isimmutable();
					}
					if(nx2 != nx2 || ny2 != ny2) {
						throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
					}
					var tmp2;
					if(ret4 != null && ret4.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this11 = ret4.zpp_inner;
					if(_this11._validate != null) {
						_this11._validate();
					}
					if(ret4.zpp_inner.x == nx2) {
						if(ret4 != null && ret4.zpp_disp) {
							throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this12 = ret4.zpp_inner;
						if(_this12._validate != null) {
							_this12._validate();
						}
						tmp2 = ret4.zpp_inner.y == ny2;
					} else {
						tmp2 = false;
					}
					if(!tmp2) {
						ret4.zpp_inner.x = nx2;
						ret4.zpp_inner.y = ny2;
						var _this13 = ret4.zpp_inner;
						if(_this13._invalidate != null) {
							_this13._invalidate(_this13);
						}
					}
				}
				ret4.zpp_inner.weak = false;
				return ZPP_ConvexRayResult.getRay(ret4,t11,true,c.outer);
			} else {
				return null;
			}
		} else {
			return null;
		}
	}
};
ZPP_Ray.prototype.circlesect2 = function(c,inner,list) {
	if(c.zip_worldCOM) {
		if(c.body != null) {
			c.zip_worldCOM = false;
			if(c.zip_localCOM) {
				c.zip_localCOM = false;
				if(c.type == 1) {
					var _this = c.polygon;
					if(_this.lverts.next == null) {
						throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
					}
					if(_this.lverts.next.next == null) {
						_this.localCOMx = _this.lverts.next.x;
						_this.localCOMy = _this.lverts.next.y;
					} else if(_this.lverts.next.next.next == null) {
						_this.localCOMx = _this.lverts.next.x;
						_this.localCOMy = _this.lverts.next.y;
						_this.localCOMx += _this.lverts.next.next.x;
						_this.localCOMy += _this.lverts.next.next.y;
						_this.localCOMx *= 0.5;
						_this.localCOMy *= 0.5;
					} else {
						_this.localCOMx = 0;
						_this.localCOMy = 0;
						var area = 0.0;
						var cx_ite = _this.lverts.next;
						var u = cx_ite;
						cx_ite = cx_ite.next;
						var v = cx_ite;
						cx_ite = cx_ite.next;
						while(cx_ite != null) {
							var w = cx_ite;
							area += v.x * (w.y - u.y);
							var cf = w.y * v.x - w.x * v.y;
							_this.localCOMx += (v.x + w.x) * cf;
							_this.localCOMy += (v.y + w.y) * cf;
							u = v;
							v = w;
							cx_ite = cx_ite.next;
						}
						cx_ite = _this.lverts.next;
						var w1 = cx_ite;
						area += v.x * (w1.y - u.y);
						var cf1 = w1.y * v.x - w1.x * v.y;
						_this.localCOMx += (v.x + w1.x) * cf1;
						_this.localCOMy += (v.y + w1.y) * cf1;
						u = v;
						cx_ite = cx_ite.next;
						var w2 = cx_ite;
						area += w1.x * (w2.y - u.y);
						var cf2 = w2.y * w1.x - w2.x * w1.y;
						_this.localCOMx += (w1.x + w2.x) * cf2;
						_this.localCOMy += (w1.y + w2.y) * cf2;
						area = 1 / (3 * area);
						var t = area;
						_this.localCOMx *= t;
						_this.localCOMy *= t;
					}
				}
				if(c.wrap_localCOM != null) {
					c.wrap_localCOM.zpp_inner.x = c.localCOMx;
					c.wrap_localCOM.zpp_inner.y = c.localCOMy;
				}
			}
			var _this1 = c.body;
			if(_this1.zip_axis) {
				_this1.zip_axis = false;
				_this1.axisx = Math.sin(_this1.rot);
				_this1.axisy = Math.cos(_this1.rot);
			}
			c.worldCOMx = c.body.posx + (c.body.axisy * c.localCOMx - c.body.axisx * c.localCOMy);
			c.worldCOMy = c.body.posy + (c.localCOMx * c.body.axisx + c.localCOMy * c.body.axisy);
		}
	}
	var acx = 0.0;
	var acy = 0.0;
	acx = this.originx - c.worldCOMx;
	acy = this.originy - c.worldCOMy;
	var A = this.dirx * this.dirx + this.diry * this.diry;
	var B = 2 * (acx * this.dirx + acy * this.diry);
	var C = acx * acx + acy * acy - c.radius * c.radius;
	var det = B * B - 4 * A * C;
	if(det == 0) {
		var t1 = -B / 2 * A;
		if((!inner || C > 0) && t1 > 0 && t1 <= this.maxdist) {
			var nx = 0.0;
			var ny = 0.0;
			nx = this.originx;
			ny = this.originy;
			nx += this.dirx * t1;
			ny += this.diry * t1;
			nx -= c.worldCOMx;
			ny -= c.worldCOMy;
			var imag = 1.0 / Math.sqrt(nx * nx + ny * ny);
			nx *= imag;
			ny *= imag;
			if(C <= 0) {
				nx = -nx;
				ny = -ny;
			}
			if(nx != nx || ny != ny) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var ret;
			if(ZPP_PubPool.poolVec2 == null) {
				ret = new Vec2();
			} else {
				ret = ZPP_PubPool.poolVec2;
				ZPP_PubPool.poolVec2 = ret.zpp_pool;
				ret.zpp_pool = null;
				ret.zpp_disp = false;
				if(ret == ZPP_PubPool.nextVec2) {
					ZPP_PubPool.nextVec2 = null;
				}
			}
			if(ret.zpp_inner == null) {
				var ret1;
				if(ZPP_Vec2.zpp_pool == null) {
					ret1 = new ZPP_Vec2();
				} else {
					ret1 = ZPP_Vec2.zpp_pool;
					ZPP_Vec2.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.weak = false;
				ret1._immutable = false;
				ret1.x = nx;
				ret1.y = ny;
				ret.zpp_inner = ret1;
				ret.zpp_inner.outer = ret;
			} else {
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._immutable) {
					throw new js._Boot.HaxeError("Error: Vec2 is immutable");
				}
				if(_this2._isimmutable != null) {
					_this2._isimmutable();
				}
				if(nx != nx || ny != ny) {
					throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
				}
				var tmp;
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this3 = ret.zpp_inner;
				if(_this3._validate != null) {
					_this3._validate();
				}
				if(ret.zpp_inner.x == nx) {
					if(ret != null && ret.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this4 = ret.zpp_inner;
					if(_this4._validate != null) {
						_this4._validate();
					}
					tmp = ret.zpp_inner.y == ny;
				} else {
					tmp = false;
				}
				if(!tmp) {
					ret.zpp_inner.x = nx;
					ret.zpp_inner.y = ny;
					var _this5 = ret.zpp_inner;
					if(_this5._invalidate != null) {
						_this5._invalidate(_this5);
					}
				}
			}
			ret.zpp_inner.weak = false;
			var res = ZPP_ConvexRayResult.getRay(ret,t1,C <= 0,c.outer);
			var pre = null;
			var cx_ite1 = list.zpp_inner.inner.head;
			while(cx_ite1 != null) {
				var j = cx_ite1.elt;
				if(res.zpp_inner.next != null) {
					throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
				}
				var tmp1 = res.zpp_inner.toiDistance;
				if(j.zpp_inner.next != null) {
					throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
				}
				if(tmp1 < j.zpp_inner.toiDistance) {
					break;
				}
				pre = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			var _this6 = list.zpp_inner.inner;
			var ret2;
			if(ZNPNode_RayResult.zpp_pool == null) {
				ret2 = new ZNPNode_RayResult();
			} else {
				ret2 = ZNPNode_RayResult.zpp_pool;
				ZNPNode_RayResult.zpp_pool = ret2.next;
				ret2.next = null;
			}
			ret2.elt = res;
			var temp = ret2;
			if(pre == null) {
				temp.next = _this6.head;
				_this6.head = temp;
			} else {
				temp.next = pre.next;
				pre.next = temp;
			}
			_this6.pushmod = _this6.modified = true;
			_this6.length++;
		}
	} else {
		det = Math.sqrt(det);
		A = 1 / (2 * A);
		var t0 = (-B - det) * A;
		var t11 = (-B + det) * A;
		if(t0 > 0 && t0 <= this.maxdist) {
			var nx1 = 0.0;
			var ny1 = 0.0;
			nx1 = this.originx;
			ny1 = this.originy;
			nx1 += this.dirx * t0;
			ny1 += this.diry * t0;
			nx1 -= c.worldCOMx;
			ny1 -= c.worldCOMy;
			var imag1 = 1.0 / Math.sqrt(nx1 * nx1 + ny1 * ny1);
			nx1 *= imag1;
			ny1 *= imag1;
			if(nx1 != nx1 || ny1 != ny1) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var ret3;
			if(ZPP_PubPool.poolVec2 == null) {
				ret3 = new Vec2();
			} else {
				ret3 = ZPP_PubPool.poolVec2;
				ZPP_PubPool.poolVec2 = ret3.zpp_pool;
				ret3.zpp_pool = null;
				ret3.zpp_disp = false;
				if(ret3 == ZPP_PubPool.nextVec2) {
					ZPP_PubPool.nextVec2 = null;
				}
			}
			if(ret3.zpp_inner == null) {
				var ret4;
				if(ZPP_Vec2.zpp_pool == null) {
					ret4 = new ZPP_Vec2();
				} else {
					ret4 = ZPP_Vec2.zpp_pool;
					ZPP_Vec2.zpp_pool = ret4.next;
					ret4.next = null;
				}
				ret4.weak = false;
				ret4._immutable = false;
				ret4.x = nx1;
				ret4.y = ny1;
				ret3.zpp_inner = ret4;
				ret3.zpp_inner.outer = ret3;
			} else {
				if(ret3 != null && ret3.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this7 = ret3.zpp_inner;
				if(_this7._immutable) {
					throw new js._Boot.HaxeError("Error: Vec2 is immutable");
				}
				if(_this7._isimmutable != null) {
					_this7._isimmutable();
				}
				if(nx1 != nx1 || ny1 != ny1) {
					throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
				}
				var tmp2;
				if(ret3 != null && ret3.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this8 = ret3.zpp_inner;
				if(_this8._validate != null) {
					_this8._validate();
				}
				if(ret3.zpp_inner.x == nx1) {
					if(ret3 != null && ret3.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this9 = ret3.zpp_inner;
					if(_this9._validate != null) {
						_this9._validate();
					}
					tmp2 = ret3.zpp_inner.y == ny1;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					ret3.zpp_inner.x = nx1;
					ret3.zpp_inner.y = ny1;
					var _this10 = ret3.zpp_inner;
					if(_this10._invalidate != null) {
						_this10._invalidate(_this10);
					}
				}
			}
			ret3.zpp_inner.weak = false;
			var res1 = ZPP_ConvexRayResult.getRay(ret3,t0,false,c.outer);
			var pre1 = null;
			var cx_ite2 = list.zpp_inner.inner.head;
			while(cx_ite2 != null) {
				var j1 = cx_ite2.elt;
				if(res1.zpp_inner.next != null) {
					throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
				}
				var tmp3 = res1.zpp_inner.toiDistance;
				if(j1.zpp_inner.next != null) {
					throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
				}
				if(tmp3 < j1.zpp_inner.toiDistance) {
					break;
				}
				pre1 = cx_ite2;
				cx_ite2 = cx_ite2.next;
			}
			var _this11 = list.zpp_inner.inner;
			var ret5;
			if(ZNPNode_RayResult.zpp_pool == null) {
				ret5 = new ZNPNode_RayResult();
			} else {
				ret5 = ZNPNode_RayResult.zpp_pool;
				ZNPNode_RayResult.zpp_pool = ret5.next;
				ret5.next = null;
			}
			ret5.elt = res1;
			var temp1 = ret5;
			if(pre1 == null) {
				temp1.next = _this11.head;
				_this11.head = temp1;
			} else {
				temp1.next = pre1.next;
				pre1.next = temp1;
			}
			_this11.pushmod = _this11.modified = true;
			_this11.length++;
		}
		if(t11 > 0 && t11 <= this.maxdist && inner) {
			var nx2 = 0.0;
			var ny2 = 0.0;
			nx2 = this.originx;
			ny2 = this.originy;
			nx2 += this.dirx * t11;
			ny2 += this.diry * t11;
			nx2 -= c.worldCOMx;
			ny2 -= c.worldCOMy;
			var imag2 = 1.0 / Math.sqrt(nx2 * nx2 + ny2 * ny2);
			nx2 *= imag2;
			ny2 *= imag2;
			nx2 = -nx2;
			ny2 = -ny2;
			if(nx2 != nx2 || ny2 != ny2) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var ret6;
			if(ZPP_PubPool.poolVec2 == null) {
				ret6 = new Vec2();
			} else {
				ret6 = ZPP_PubPool.poolVec2;
				ZPP_PubPool.poolVec2 = ret6.zpp_pool;
				ret6.zpp_pool = null;
				ret6.zpp_disp = false;
				if(ret6 == ZPP_PubPool.nextVec2) {
					ZPP_PubPool.nextVec2 = null;
				}
			}
			if(ret6.zpp_inner == null) {
				var ret7;
				if(ZPP_Vec2.zpp_pool == null) {
					ret7 = new ZPP_Vec2();
				} else {
					ret7 = ZPP_Vec2.zpp_pool;
					ZPP_Vec2.zpp_pool = ret7.next;
					ret7.next = null;
				}
				ret7.weak = false;
				ret7._immutable = false;
				ret7.x = nx2;
				ret7.y = ny2;
				ret6.zpp_inner = ret7;
				ret6.zpp_inner.outer = ret6;
			} else {
				if(ret6 != null && ret6.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this12 = ret6.zpp_inner;
				if(_this12._immutable) {
					throw new js._Boot.HaxeError("Error: Vec2 is immutable");
				}
				if(_this12._isimmutable != null) {
					_this12._isimmutable();
				}
				if(nx2 != nx2 || ny2 != ny2) {
					throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
				}
				var tmp4;
				if(ret6 != null && ret6.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this13 = ret6.zpp_inner;
				if(_this13._validate != null) {
					_this13._validate();
				}
				if(ret6.zpp_inner.x == nx2) {
					if(ret6 != null && ret6.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this14 = ret6.zpp_inner;
					if(_this14._validate != null) {
						_this14._validate();
					}
					tmp4 = ret6.zpp_inner.y == ny2;
				} else {
					tmp4 = false;
				}
				if(!tmp4) {
					ret6.zpp_inner.x = nx2;
					ret6.zpp_inner.y = ny2;
					var _this15 = ret6.zpp_inner;
					if(_this15._invalidate != null) {
						_this15._invalidate(_this15);
					}
				}
			}
			ret6.zpp_inner.weak = false;
			var res2 = ZPP_ConvexRayResult.getRay(ret6,t11,true,c.outer);
			var pre2 = null;
			var cx_ite3 = list.zpp_inner.inner.head;
			while(cx_ite3 != null) {
				var j2 = cx_ite3.elt;
				if(res2.zpp_inner.next != null) {
					throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
				}
				var tmp5 = res2.zpp_inner.toiDistance;
				if(j2.zpp_inner.next != null) {
					throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
				}
				if(tmp5 < j2.zpp_inner.toiDistance) {
					break;
				}
				pre2 = cx_ite3;
				cx_ite3 = cx_ite3.next;
			}
			var _this16 = list.zpp_inner.inner;
			var ret8;
			if(ZNPNode_RayResult.zpp_pool == null) {
				ret8 = new ZNPNode_RayResult();
			} else {
				ret8 = ZNPNode_RayResult.zpp_pool;
				ZNPNode_RayResult.zpp_pool = ret8.next;
				ret8.next = null;
			}
			ret8.elt = res2;
			var temp2 = ret8;
			if(pre2 == null) {
				temp2.next = _this16.head;
				_this16.head = temp2;
			} else {
				temp2.next = pre2.next;
				pre2.next = temp2;
			}
			_this16.pushmod = _this16.modified = true;
			_this16.length++;
		}
	}
};
ZPP_Ray.prototype.polysect = function(p,inner,mint) {
	var min = mint;
	var edge = null;
	var ei = p.edges.head;
	var cx_itei = p.gverts.next;
	var u = cx_itei;
	var cx_itej = cx_itei.next;
	while(cx_itej != null) {
		var v = cx_itej;
		var e = ei.elt;
		if(inner || e.gnormx * this.dirx + e.gnormy * this.diry < 0) {
			var _vx = 0.0;
			var _vy = 0.0;
			_vx = v.x - u.x;
			_vy = v.y - u.y;
			var _sx = 0.0;
			var _sy = 0.0;
			_sx = u.x - this.originx;
			_sy = u.y - this.originy;
			var den = _vy * this.dirx - _vx * this.diry;
			if(den * den > Config.epsilon) {
				den = 1 / den;
				var sxx = (_vy * _sx - _vx * _sy) * den;
				if(sxx > 0 && sxx < min && sxx <= this.maxdist) {
					var txx = (this.diry * _sx - this.dirx * _sy) * den;
					if(txx > -Config.epsilon && txx < 1 + Config.epsilon) {
						min = sxx;
						edge = ei.elt;
					}
				}
			}
		}
		ei = ei.next;
		cx_itei = cx_itej;
		u = v;
		cx_itej = cx_itej.next;
	}
	while(true) {
		cx_itej = p.gverts.next;
		var v1 = cx_itej;
		var e1 = ei.elt;
		if(inner || e1.gnormx * this.dirx + e1.gnormy * this.diry < 0) {
			var _vx1 = 0.0;
			var _vy1 = 0.0;
			_vx1 = v1.x - u.x;
			_vy1 = v1.y - u.y;
			var _sx1 = 0.0;
			var _sy1 = 0.0;
			_sx1 = u.x - this.originx;
			_sy1 = u.y - this.originy;
			var den1 = _vy1 * this.dirx - _vx1 * this.diry;
			if(den1 * den1 > Config.epsilon) {
				den1 = 1 / den1;
				var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
				if(sxx1 > 0 && sxx1 < min && sxx1 <= this.maxdist) {
					var txx1 = (this.diry * _sx1 - this.dirx * _sy1) * den1;
					if(txx1 > -Config.epsilon && txx1 < 1 + Config.epsilon) {
						min = sxx1;
						edge = ei.elt;
					}
				}
			}
		}
		ei = ei.next;
		break;
	}
	if(edge != null) {
		var nx = 0.0;
		var ny = 0.0;
		nx = edge.gnormx;
		ny = edge.gnormy;
		var inner1 = nx * this.dirx + ny * this.diry > 0;
		if(inner1) {
			nx = -nx;
			ny = -ny;
		}
		if(nx != nx || ny != ny) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(ZPP_PubPool.poolVec2 == null) {
			ret = new Vec2();
		} else {
			ret = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(ZPP_Vec2.zpp_pool == null) {
				ret1 = new ZPP_Vec2();
			} else {
				ret1 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = nx;
			ret1.y = ny;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(nx != nx || ny != ny) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == nx) {
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == ny;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = nx;
				ret.zpp_inner.y = ny;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		return ZPP_ConvexRayResult.getRay(ret,min,inner1,p.outer);
	} else {
		return null;
	}
};
ZPP_Ray.prototype.polysect2 = function(p,inner,list) {
	var min = Infinity;
	var max = -1.0;
	var edge = null;
	var edgemax = null;
	var ei = p.edges.head;
	var cx_itei = p.gverts.next;
	var u = cx_itei;
	var cx_itej = cx_itei.next;
	while(cx_itej != null) {
		var v = cx_itej;
		var e = ei.elt;
		if(inner || e.gnormx * this.dirx + e.gnormy * this.diry < 0) {
			var _vx = 0.0;
			var _vy = 0.0;
			_vx = v.x - u.x;
			_vy = v.y - u.y;
			var _sx = 0.0;
			var _sy = 0.0;
			_sx = u.x - this.originx;
			_sy = u.y - this.originy;
			var den = _vy * this.dirx - _vx * this.diry;
			if(den * den > Config.epsilon) {
				den = 1 / den;
				var sxx = (_vy * _sx - _vx * _sy) * den;
				if(sxx > 0 && sxx <= this.maxdist && (sxx < min || sxx > max)) {
					var txx = (this.diry * _sx - this.dirx * _sy) * den;
					if(txx > -Config.epsilon && txx < 1 + Config.epsilon) {
						if(sxx < min) {
							min = sxx;
							edge = ei.elt;
						}
						if(sxx > max) {
							max = sxx;
							edgemax = ei.elt;
						}
					}
				}
			}
		}
		ei = ei.next;
		cx_itei = cx_itej;
		u = v;
		cx_itej = cx_itej.next;
	}
	while(true) {
		cx_itej = p.gverts.next;
		var v1 = cx_itej;
		var e1 = ei.elt;
		if(inner || e1.gnormx * this.dirx + e1.gnormy * this.diry < 0) {
			var _vx1 = 0.0;
			var _vy1 = 0.0;
			_vx1 = v1.x - u.x;
			_vy1 = v1.y - u.y;
			var _sx1 = 0.0;
			var _sy1 = 0.0;
			_sx1 = u.x - this.originx;
			_sy1 = u.y - this.originy;
			var den1 = _vy1 * this.dirx - _vx1 * this.diry;
			if(den1 * den1 > Config.epsilon) {
				den1 = 1 / den1;
				var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
				if(sxx1 > 0 && sxx1 <= this.maxdist && (sxx1 < min || sxx1 > max)) {
					var txx1 = (this.diry * _sx1 - this.dirx * _sy1) * den1;
					if(txx1 > -Config.epsilon && txx1 < 1 + Config.epsilon) {
						if(sxx1 < min) {
							min = sxx1;
							edge = ei.elt;
						}
						if(sxx1 > max) {
							max = sxx1;
							edgemax = ei.elt;
						}
					}
				}
			}
		}
		ei = ei.next;
		break;
	}
	if(edge != null) {
		var nx = 0.0;
		var ny = 0.0;
		nx = edge.gnormx;
		ny = edge.gnormy;
		var inner1 = nx * this.dirx + ny * this.diry > 0;
		if(inner1) {
			nx = -nx;
			ny = -ny;
		}
		if(nx != nx || ny != ny) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(ZPP_PubPool.poolVec2 == null) {
			ret = new Vec2();
		} else {
			ret = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(ZPP_Vec2.zpp_pool == null) {
				ret1 = new ZPP_Vec2();
			} else {
				ret1 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = nx;
			ret1.y = ny;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this = ret.zpp_inner;
			if(_this._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this._isimmutable != null) {
				_this._isimmutable();
			}
			if(nx != nx || ny != ny) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._validate != null) {
				_this1._validate();
			}
			if(ret.zpp_inner.x == nx) {
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this2 = ret.zpp_inner;
				if(_this2._validate != null) {
					_this2._validate();
				}
				tmp = ret.zpp_inner.y == ny;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = nx;
				ret.zpp_inner.y = ny;
				var _this3 = ret.zpp_inner;
				if(_this3._invalidate != null) {
					_this3._invalidate(_this3);
				}
			}
		}
		ret.zpp_inner.weak = false;
		var ret2 = ZPP_ConvexRayResult.getRay(ret,min,inner1,p.outer);
		var pre = null;
		var cx_ite = list.zpp_inner.inner.head;
		while(cx_ite != null) {
			var j = cx_ite.elt;
			if(ret2.zpp_inner.next != null) {
				throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
			}
			var tmp1 = ret2.zpp_inner.toiDistance;
			if(j.zpp_inner.next != null) {
				throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
			}
			if(tmp1 < j.zpp_inner.toiDistance) {
				break;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		var _this4 = list.zpp_inner.inner;
		var ret3;
		if(ZNPNode_RayResult.zpp_pool == null) {
			ret3 = new ZNPNode_RayResult();
		} else {
			ret3 = ZNPNode_RayResult.zpp_pool;
			ZNPNode_RayResult.zpp_pool = ret3.next;
			ret3.next = null;
		}
		ret3.elt = ret2;
		var temp = ret3;
		if(pre == null) {
			temp.next = _this4.head;
			_this4.head = temp;
		} else {
			temp.next = pre.next;
			pre.next = temp;
		}
		_this4.pushmod = _this4.modified = true;
		_this4.length++;
	}
	if(edgemax != null && edge != edgemax) {
		var nx1 = 0.0;
		var ny1 = 0.0;
		nx1 = edgemax.gnormx;
		ny1 = edgemax.gnormy;
		var inner2 = nx1 * this.dirx + ny1 * this.diry > 0;
		if(inner2) {
			nx1 = -nx1;
			ny1 = -ny1;
		}
		if(nx1 != nx1 || ny1 != ny1) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret4;
		if(ZPP_PubPool.poolVec2 == null) {
			ret4 = new Vec2();
		} else {
			ret4 = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret4.zpp_pool;
			ret4.zpp_pool = null;
			ret4.zpp_disp = false;
			if(ret4 == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret4.zpp_inner == null) {
			var ret5;
			if(ZPP_Vec2.zpp_pool == null) {
				ret5 = new ZPP_Vec2();
			} else {
				ret5 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret5.next;
				ret5.next = null;
			}
			ret5.weak = false;
			ret5._immutable = false;
			ret5.x = nx1;
			ret5.y = ny1;
			ret4.zpp_inner = ret5;
			ret4.zpp_inner.outer = ret4;
		} else {
			if(ret4 != null && ret4.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this5 = ret4.zpp_inner;
			if(_this5._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this5._isimmutable != null) {
				_this5._isimmutable();
			}
			if(nx1 != nx1 || ny1 != ny1) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp2;
			if(ret4 != null && ret4.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this6 = ret4.zpp_inner;
			if(_this6._validate != null) {
				_this6._validate();
			}
			if(ret4.zpp_inner.x == nx1) {
				if(ret4 != null && ret4.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this7 = ret4.zpp_inner;
				if(_this7._validate != null) {
					_this7._validate();
				}
				tmp2 = ret4.zpp_inner.y == ny1;
			} else {
				tmp2 = false;
			}
			if(!tmp2) {
				ret4.zpp_inner.x = nx1;
				ret4.zpp_inner.y = ny1;
				var _this8 = ret4.zpp_inner;
				if(_this8._invalidate != null) {
					_this8._invalidate(_this8);
				}
			}
		}
		ret4.zpp_inner.weak = false;
		var ret6 = ZPP_ConvexRayResult.getRay(ret4,max,inner2,p.outer);
		var pre1 = null;
		var cx_ite1 = list.zpp_inner.inner.head;
		while(cx_ite1 != null) {
			var j1 = cx_ite1.elt;
			if(ret6.zpp_inner.next != null) {
				throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
			}
			var tmp3 = ret6.zpp_inner.toiDistance;
			if(j1.zpp_inner.next != null) {
				throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
			}
			if(tmp3 < j1.zpp_inner.toiDistance) {
				break;
			}
			pre1 = cx_ite1;
			cx_ite1 = cx_ite1.next;
		}
		var _this9 = list.zpp_inner.inner;
		var ret7;
		if(ZNPNode_RayResult.zpp_pool == null) {
			ret7 = new ZNPNode_RayResult();
		} else {
			ret7 = ZNPNode_RayResult.zpp_pool;
			ZNPNode_RayResult.zpp_pool = ret7.next;
			ret7.next = null;
		}
		ret7.elt = ret6;
		var temp1 = ret7;
		if(pre1 == null) {
			temp1.next = _this9.head;
			_this9.head = temp1;
		} else {
			temp1.next = pre1.next;
			pre1.next = temp1;
		}
		_this9.pushmod = _this9.modified = true;
		_this9.length++;
	}
};
ZPP_Ray.prototype.__class__ = ZPP_Ray;
var ZPP_SimpleVert = zpp_nape.geom.ZPP_SimpleVert = function() {
	this.node = null;
	this.next = null;
	this.id = 0;
	this.links = null;
	this.y = 0.0;
	this.x = 0.0;
	this.forced = false;
	this.id = zpp_nape.ZPP_ID.ZPP_SimpleVert();
	if(ZPP_Set_ZPP_SimpleVert.zpp_pool == null) {
		this.links = new ZPP_Set_ZPP_SimpleVert();
	} else {
		this.links = ZPP_Set_ZPP_SimpleVert.zpp_pool;
		ZPP_Set_ZPP_SimpleVert.zpp_pool = this.links.next;
		this.links.next = null;
	}
	this.links.lt = ZPP_SimpleVert.less_xy;
};
ZPP_SimpleVert.__name__ = ["zpp_nape","geom","ZPP_SimpleVert"];
ZPP_SimpleVert.less_xy = function(p,q) {
	if(!(p.y < q.y)) {
		if(p.y == q.y) {
			return p.x < q.x;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
ZPP_SimpleVert.swap_nodes = function(p,q) {
	var t = p.node;
	p.node = q.node;
	q.node = t;
};
ZPP_SimpleVert.get = function(x,y) {
	var ret;
	if(ZPP_SimpleVert.zpp_pool == null) {
		ret = new ZPP_SimpleVert();
	} else {
		ret = ZPP_SimpleVert.zpp_pool;
		ZPP_SimpleVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.x = x;
	ret.y = y;
	return ret;
};
ZPP_SimpleVert.prototype.forced = null;
ZPP_SimpleVert.prototype.x = null;
ZPP_SimpleVert.prototype.y = null;
ZPP_SimpleVert.prototype.links = null;
ZPP_SimpleVert.prototype.id = null;
ZPP_SimpleVert.prototype.next = null;
ZPP_SimpleVert.prototype.node = null;
ZPP_SimpleVert.prototype.free = function() {
	this.links.clear();
	this.node = null;
	this.forced = false;
};
ZPP_SimpleVert.prototype.alloc = function() {
};
ZPP_SimpleVert.prototype.__class__ = ZPP_SimpleVert;
var ZPP_SimpleSeg = zpp_nape.geom.ZPP_SimpleSeg = function() {
	this.node = null;
	this.prev = null;
	this.next = null;
	this.id = 0;
	this.vertices = null;
	this.right = null;
	this.left = null;
	this.id = zpp_nape.ZPP_ID.ZPP_SimpleSeg();
	if(ZPP_Set_ZPP_SimpleVert.zpp_pool == null) {
		this.vertices = new ZPP_Set_ZPP_SimpleVert();
	} else {
		this.vertices = ZPP_Set_ZPP_SimpleVert.zpp_pool;
		ZPP_Set_ZPP_SimpleVert.zpp_pool = this.vertices.next;
		this.vertices.next = null;
	}
	this.vertices.lt = $bind(this,this.less_xy);
};
ZPP_SimpleSeg.__name__ = ["zpp_nape","geom","ZPP_SimpleSeg"];
ZPP_SimpleSeg.get = function(left,right) {
	var ret;
	if(ZPP_SimpleSeg.zpp_pool == null) {
		ret = new ZPP_SimpleSeg();
	} else {
		ret = ZPP_SimpleSeg.zpp_pool;
		ZPP_SimpleSeg.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.left = left;
	ret.right = right;
	ret.vertices.insert(left);
	ret.vertices.insert(right);
	return ret;
};
ZPP_SimpleSeg.prototype.left = null;
ZPP_SimpleSeg.prototype.right = null;
ZPP_SimpleSeg.prototype.vertices = null;
ZPP_SimpleSeg.prototype.id = null;
ZPP_SimpleSeg.prototype.next = null;
ZPP_SimpleSeg.prototype.free = function() {
	this.left = this.right = null;
	this.prev = null;
	this.node = null;
	this.vertices.clear();
};
ZPP_SimpleSeg.prototype.alloc = function() {
};
ZPP_SimpleSeg.prototype.prev = null;
ZPP_SimpleSeg.prototype.node = null;
ZPP_SimpleSeg.prototype.less_xy = function(a,b) {
	if(!(a.x < b.x)) {
		if(a.x == b.x) {
			return a.y < b.y;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
ZPP_SimpleSeg.prototype.__class__ = ZPP_SimpleSeg;
var ZPP_SimpleEvent = zpp_nape.geom.ZPP_SimpleEvent = function() {
	this.next = null;
	this.node = null;
	this.segment2 = null;
	this.segment = null;
	this.vertex = null;
	this.type = 0;
};
ZPP_SimpleEvent.__name__ = ["zpp_nape","geom","ZPP_SimpleEvent"];
ZPP_SimpleEvent.swap_nodes = function(a,b) {
	var t = a.node;
	a.node = b.node;
	b.node = t;
};
ZPP_SimpleEvent.less_xy = function(a,b) {
	if(a.vertex.x < b.vertex.x) {
		return true;
	} else if(a.vertex.x > b.vertex.x) {
		return false;
	} else if(a.vertex.y < b.vertex.y) {
		return true;
	} else if(a.vertex.y > b.vertex.y) {
		return false;
	} else {
		return a.type < b.type;
	}
};
ZPP_SimpleEvent.get = function(v) {
	var ret;
	if(ZPP_SimpleEvent.zpp_pool == null) {
		ret = new ZPP_SimpleEvent();
	} else {
		ret = ZPP_SimpleEvent.zpp_pool;
		ZPP_SimpleEvent.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.vertex = v;
	return ret;
};
ZPP_SimpleEvent.prototype.type = null;
ZPP_SimpleEvent.prototype.vertex = null;
ZPP_SimpleEvent.prototype.segment = null;
ZPP_SimpleEvent.prototype.segment2 = null;
ZPP_SimpleEvent.prototype.node = null;
ZPP_SimpleEvent.prototype.next = null;
ZPP_SimpleEvent.prototype.free = function() {
	this.vertex = null;
	this.segment = this.segment2 = null;
	this.node = null;
};
ZPP_SimpleEvent.prototype.alloc = function() {
};
ZPP_SimpleEvent.prototype.__class__ = ZPP_SimpleEvent;
var ZPP_SimpleSweep = zpp_nape.geom.ZPP_SimpleSweep = function() {
	this.tree = null;
	this.sweepx = 0.0;
	if(ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) {
		this.tree = new ZPP_Set_ZPP_SimpleSeg();
	} else {
		this.tree = ZPP_Set_ZPP_SimpleSeg.zpp_pool;
		ZPP_Set_ZPP_SimpleSeg.zpp_pool = this.tree.next;
		this.tree.next = null;
	}
	this.tree.lt = $bind(this,this.edge_lt);
	this.tree.swapped = $bind(this,this.swap_nodes);
};
ZPP_SimpleSweep.__name__ = ["zpp_nape","geom","ZPP_SimpleSweep"];
ZPP_SimpleSweep.prototype.sweepx = null;
ZPP_SimpleSweep.prototype.tree = null;
ZPP_SimpleSweep.prototype.swap_nodes = function(p,q) {
	var t = p.node;
	p.node = q.node;
	q.node = t;
};
ZPP_SimpleSweep.prototype.edge_lt = function(p,q) {
	var ux = 0.0;
	var uy = 0.0;
	var vx = 0.0;
	var vy = 0.0;
	var flip;
	if(p.left == q.left && p.right == q.right) {
		return false;
	} else if(p.left == q.right) {
		if(p.left.x == p.right.x) {
			if(p.left.y < p.right.y) {
				return p.left.y > q.left.y;
			} else {
				return p.right.y > q.left.y;
			}
		} else {
			flip = p.right.x < p.left.x;
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
			vx = q.left.x - p.left.x;
			vy = q.left.y - p.left.y;
			return (flip?uy * vx - ux * vy:vy * ux - vx * uy) < 0;
		}
	} else if(p.right == q.left) {
		var tmp;
		if(q.left.x == q.right.x) {
			if(q.left.y < q.right.y) {
				tmp = q.left.y > p.left.y;
			} else {
				tmp = q.right.y > p.left.y;
			}
		} else {
			flip = q.right.x < q.left.x;
			ux = q.right.x - q.left.x;
			uy = q.right.y - q.left.y;
			vx = p.left.x - q.left.x;
			vy = p.left.y - q.left.y;
			tmp = (flip?uy * vx - ux * vy:vy * ux - vx * uy) < 0;
		}
		return !tmp;
	} else if(p.left == q.left) {
		if(p.left.x == p.right.x) {
			if(p.left.y < p.right.y) {
				return p.left.y > q.right.y;
			} else {
				return p.right.y > q.right.y;
			}
		} else {
			flip = p.right.x < p.left.x;
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
			vx = q.right.x - p.left.x;
			vy = q.right.y - p.left.y;
			return (flip?uy * vx - ux * vy:vy * ux - vx * uy) < 0;
		}
	} else if(p.right == q.right) {
		if(p.left.x == p.right.x) {
			if(p.left.y < p.right.y) {
				return p.left.y > q.left.y;
			} else {
				return p.right.y > q.left.y;
			}
		} else {
			flip = p.right.x < p.left.x;
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
			vx = q.left.x - p.left.x;
			vy = q.left.y - p.left.y;
			return (flip?uy * vx - ux * vy:vy * ux - vx * uy) < 0;
		}
	}
	if(p.left.x == p.right.x) {
		if(q.left.x == q.right.x) {
			return (p.left.y < p.right.y?p.right:p.left).y > (q.left.y < q.right.y?q.right:q.left).y;
		} else {
			flip = q.right.x < q.left.x;
			ux = q.right.x - q.left.x;
			uy = q.right.y - q.left.y;
			vx = p.left.x - q.left.x;
			vy = p.left.y - q.left.y;
			var plrg = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			flip = q.right.x < q.left.x;
			ux = q.right.x - q.left.x;
			uy = q.right.y - q.left.y;
			vx = p.right.x - q.left.x;
			vy = p.right.y - q.left.y;
			if(plrg * (flip?uy * vx - ux * vy:vy * ux - vx * uy) >= 0) {
				return plrg >= 0.0;
			} else {
				return this.sweepx >= p.left.x;
			}
		}
	} else if(q.left.x == q.right.x) {
		flip = p.right.x < p.left.x;
		ux = p.right.x - p.left.x;
		uy = p.right.y - p.left.y;
		vx = q.left.x - p.left.x;
		vy = q.left.y - p.left.y;
		var qlrg = flip?uy * vx - ux * vy:vy * ux - vx * uy;
		flip = p.right.x < p.left.x;
		ux = p.right.x - p.left.x;
		uy = p.right.y - p.left.y;
		vx = q.right.x - p.left.x;
		vy = q.right.y - p.left.y;
		if(qlrg * (flip?uy * vx - ux * vy:vy * ux - vx * uy) >= 0) {
			return qlrg < 0.0;
		} else {
			return this.sweepx < q.left.x;
		}
	} else {
		flip = p.right.x < p.left.x;
		ux = p.right.x - p.left.x;
		uy = p.right.y - p.left.y;
		vx = q.left.x - p.left.x;
		vy = q.left.y - p.left.y;
		var qlrg1 = (flip?uy * vx - ux * vy:vy * ux - vx * uy) < 0.0;
		flip = p.right.x < p.left.x;
		ux = p.right.x - p.left.x;
		uy = p.right.y - p.left.y;
		vx = q.right.x - p.left.x;
		vy = q.right.y - p.left.y;
		if(qlrg1 == (flip?uy * vx - ux * vy:vy * ux - vx * uy) < 0.0) {
			return qlrg1;
		} else {
			flip = q.right.x < q.left.x;
			ux = q.right.x - q.left.x;
			uy = q.right.y - q.left.y;
			vx = p.left.x - q.left.x;
			vy = p.left.y - q.left.y;
			var plrg1 = (flip?uy * vx - ux * vy:vy * ux - vx * uy) >= 0.0;
			flip = q.right.x < q.left.x;
			ux = q.right.x - q.left.x;
			uy = q.right.y - q.left.y;
			vx = p.right.x - q.left.x;
			vy = p.right.y - q.left.y;
			if(plrg1 == (flip?uy * vx - ux * vy:vy * ux - vx * uy) >= 0.0) {
				return plrg1;
			}
			return (this.sweepx - p.left.x) / (p.right.x - p.left.x) * (p.right.y - p.left.y) + p.left.y > (this.sweepx - q.left.x) / (q.right.x - q.left.x) * (q.right.y - q.left.y) + q.left.y;
		}
	}
};
ZPP_SimpleSweep.prototype.clear = function() {
	this.tree.clear();
};
ZPP_SimpleSweep.prototype.add = function(e) {
	e.node = this.tree.insert(e);
	var nxt = this.tree.successor_node(e.node);
	var pre = this.tree.predecessor_node(e.node);
	if(nxt != null) {
		e.next = nxt.data;
		nxt.data.prev = e;
	}
	if(pre != null) {
		e.prev = pre.data;
		pre.data.next = e;
	}
	return e;
};
ZPP_SimpleSweep.prototype.remove = function(e) {
	var nxt = this.tree.successor_node(e.node);
	var pre = this.tree.predecessor_node(e.node);
	if(nxt != null) {
		nxt.data.prev = e.prev;
	}
	if(pre != null) {
		pre.data.next = e.next;
	}
	this.tree.remove_node(e.node);
	e.node = null;
};
ZPP_SimpleSweep.prototype.intersect = function(p,q) {
	if(p == null || q == null) {
		return false;
	} else if(p.left == q.left || p.left == q.right || p.right == q.left || p.right == q.right) {
		return false;
	} else {
		var lsign = (q.left.x - p.left.x) * (p.right.y - p.left.y) - (p.right.x - p.left.x) * (q.left.y - p.left.y);
		var rsign = (q.right.x - p.left.x) * (p.right.y - p.left.y) - (p.right.x - p.left.x) * (q.right.y - p.left.y);
		if(lsign * rsign > 0) {
			return false;
		} else {
			var lsign2 = (p.left.x - q.left.x) * (q.right.y - q.left.y) - (q.right.x - q.left.x) * (p.left.y - q.left.y);
			var rsign2 = (p.right.x - q.left.x) * (q.right.y - q.left.y) - (q.right.x - q.left.x) * (p.right.y - q.left.y);
			if(lsign2 * rsign2 > 0) {
				return false;
			} else if(lsign * rsign >= 0 && lsign2 * rsign2 >= 0) {
				return true;
			} else {
				return true;
			}
		}
	}
};
ZPP_SimpleSweep.prototype.intersection = function(p,q) {
	if(p == null || q == null) {
		return null;
	} else if(p.left == q.left || p.left == q.right || p.right == q.left || p.right == q.right) {
		return null;
	} else {
		var ux = 0.0;
		var uy = 0.0;
		ux = p.right.x - p.left.x;
		uy = p.right.y - p.left.y;
		var vx = 0.0;
		var vy = 0.0;
		vx = q.right.x - q.left.x;
		vy = q.right.y - q.left.y;
		var denom = vy * ux - vx * uy;
		if(denom == 0.0) {
			return null;
		}
		denom = 1 / denom;
		var cx = 0.0;
		var cy = 0.0;
		cx = q.left.x - p.left.x;
		cy = q.left.y - p.left.y;
		var t = (vy * cx - vx * cy) * denom;
		if(t < 0 || t > 1) {
			return null;
		}
		var s = (uy * cx - ux * cy) * denom;
		if(s < 0 || s > 1) {
			return null;
		}
		var vet;
		if(s == 0 || s == 1 || t == 0 || t == 1) {
			var cases = s == 0;
			if(s == 1 && cases) {
				throw new js._Boot.HaxeError("corner case 1a");
			} else if(s == 1) {
				cases = true;
			}
			if(t == 0 && cases) {
				throw new js._Boot.HaxeError("corner case 1b");
			} else if(t == 0) {
				cases = true;
			}
			if(t == 1 && cases) {
				throw new js._Boot.HaxeError("corner case 1c");
			}
			if(s == 0) {
				vet = q.left;
			} else if(s == 1) {
				vet = q.right;
			} else if(t == 0) {
				vet = p.left;
			} else {
				vet = p.right;
			}
		} else {
			var x = 0.5 * (p.left.x + ux * t + q.left.x + vx * s);
			var y = 0.5 * (p.left.y + uy * t + q.left.y + vy * s);
			var ret;
			if(ZPP_SimpleVert.zpp_pool == null) {
				ret = new ZPP_SimpleVert();
			} else {
				ret = ZPP_SimpleVert.zpp_pool;
				ZPP_SimpleVert.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.x = x;
			ret.y = y;
			vet = ret;
		}
		var ret1;
		if(ZPP_SimpleEvent.zpp_pool == null) {
			ret1 = new ZPP_SimpleEvent();
		} else {
			ret1 = ZPP_SimpleEvent.zpp_pool;
			ZPP_SimpleEvent.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.vertex = vet;
		var ret2 = ret1;
		ret2.type = 0;
		ret2.segment = p;
		ret2.segment2 = q;
		return ret2;
	}
};
ZPP_SimpleSweep.prototype.__class__ = ZPP_SimpleSweep;
var ZPP_Simple = zpp_nape.geom.ZPP_Simple = function() { };
ZPP_Simple.__name__ = ["zpp_nape","geom","ZPP_Simple"];
ZPP_Simple.decompose = function(poly,rets) {
	if(ZPP_Simple.sweep == null) {
		ZPP_Simple.sweep = new ZPP_SimpleSweep();
		ZPP_Simple.inthash = new FastHash2_Hashable2_Boolfalse();
	}
	if(ZPP_Simple.vertices == null) {
		if(ZPP_Set_ZPP_SimpleVert.zpp_pool == null) {
			ZPP_Simple.vertices = new ZPP_Set_ZPP_SimpleVert();
		} else {
			ZPP_Simple.vertices = ZPP_Set_ZPP_SimpleVert.zpp_pool;
			ZPP_Set_ZPP_SimpleVert.zpp_pool = ZPP_Simple.vertices.next;
			ZPP_Simple.vertices.next = null;
		}
		ZPP_Simple.vertices.lt = ZPP_SimpleVert.less_xy;
		ZPP_Simple.vertices.swapped = ZPP_SimpleVert.swap_nodes;
	}
	if(ZPP_Simple.queue == null) {
		if(ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) {
			ZPP_Simple.queue = new ZPP_Set_ZPP_SimpleEvent();
		} else {
			ZPP_Simple.queue = ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			ZPP_Set_ZPP_SimpleEvent.zpp_pool = ZPP_Simple.queue.next;
			ZPP_Simple.queue.next = null;
		}
		ZPP_Simple.queue.lt = ZPP_SimpleEvent.less_xy;
		ZPP_Simple.queue.swapped = ZPP_SimpleEvent.swap_nodes;
	}
	var fst = null;
	var pre = null;
	if(poly != null) {
		var nite = poly;
		while(true) {
			var v = nite;
			var x = v.x;
			var y = v.y;
			var ret;
			if(ZPP_SimpleVert.zpp_pool == null) {
				ret = new ZPP_SimpleVert();
			} else {
				ret = ZPP_SimpleVert.zpp_pool;
				ZPP_SimpleVert.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.x = x;
			ret.y = y;
			var vert = ret;
			var cur = ZPP_Simple.vertices.parent;
			while(cur != null) if(ZPP_Simple.vertices.lt(vert,cur.data)) {
				cur = cur.prev;
			} else if(ZPP_Simple.vertices.lt(cur.data,vert)) {
				cur = cur.next;
			} else {
				break;
			}
			var vx = cur;
			if(vx != null) {
				var o = vert;
				o.links.clear();
				o.node = null;
				o.forced = false;
				o.next = ZPP_SimpleVert.zpp_pool;
				ZPP_SimpleVert.zpp_pool = o;
				vert = vx.data;
			} else {
				vert.node = ZPP_Simple.vertices.insert(vert);
			}
			if(pre != null) {
				var ret1;
				if(ZPP_SimpleEvent.zpp_pool == null) {
					ret1 = new ZPP_SimpleEvent();
				} else {
					ret1 = ZPP_SimpleEvent.zpp_pool;
					ZPP_SimpleEvent.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.vertex = pre;
				var e1 = ret1;
				var ret2;
				if(ZPP_SimpleEvent.zpp_pool == null) {
					ret2 = new ZPP_SimpleEvent();
				} else {
					ret2 = ZPP_SimpleEvent.zpp_pool;
					ZPP_SimpleEvent.zpp_pool = ret2.next;
					ret2.next = null;
				}
				ret2.vertex = vert;
				var e2 = ret2;
				var seg;
				if(ZPP_SimpleEvent.less_xy(e1,e2)) {
					e1.type = 1;
					e2.type = 2;
					seg = ZPP_SimpleSeg.get(pre,vert);
				} else {
					e1.type = 2;
					e2.type = 1;
					seg = ZPP_SimpleSeg.get(vert,pre);
				}
				e1.segment = e2.segment = seg;
				ZPP_Simple.queue.insert(e1);
				ZPP_Simple.queue.insert(e2);
				pre.links.insert(vert);
				vert.links.insert(pre);
			}
			pre = vert;
			if(fst == null) {
				fst = vert;
			}
			nite = nite.next;
			if(!(nite != poly)) {
				break;
			}
		}
	}
	var ret3;
	if(ZPP_SimpleEvent.zpp_pool == null) {
		ret3 = new ZPP_SimpleEvent();
	} else {
		ret3 = ZPP_SimpleEvent.zpp_pool;
		ZPP_SimpleEvent.zpp_pool = ret3.next;
		ret3.next = null;
	}
	ret3.vertex = pre;
	var e11 = ret3;
	var ret4;
	if(ZPP_SimpleEvent.zpp_pool == null) {
		ret4 = new ZPP_SimpleEvent();
	} else {
		ret4 = ZPP_SimpleEvent.zpp_pool;
		ZPP_SimpleEvent.zpp_pool = ret4.next;
		ret4.next = null;
	}
	ret4.vertex = fst;
	var e21 = ret4;
	var seg1;
	if(ZPP_SimpleEvent.less_xy(e11,e21)) {
		e11.type = 1;
		e21.type = 2;
		seg1 = ZPP_SimpleSeg.get(pre,fst);
	} else {
		e11.type = 2;
		e21.type = 1;
		seg1 = ZPP_SimpleSeg.get(fst,pre);
	}
	e11.segment = e21.segment = seg1;
	ZPP_Simple.queue.insert(e11);
	ZPP_Simple.queue.insert(e21);
	pre.links.insert(fst);
	fst.links.insert(pre);
	if(ZPP_Simple.ints == null) {
		if(ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) {
			ZPP_Simple.ints = new ZPP_Set_ZPP_SimpleEvent();
		} else {
			ZPP_Simple.ints = ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			ZPP_Set_ZPP_SimpleEvent.zpp_pool = ZPP_Simple.ints.next;
			ZPP_Simple.ints.next = null;
		}
		ZPP_Simple.ints.lt = ZPP_SimpleEvent.less_xy;
	}
	while(!ZPP_Simple.queue.empty()) {
		var e = ZPP_Simple.queue.pop_front();
		ZPP_Simple.sweep.sweepx = e.vertex.x;
		if(e.type == 1) {
			var s = e.segment;
			ZPP_Simple.sweep.add(s);
			if(s.next != null && s != null && !(s.next.id < s.id?ZPP_Simple.inthash.has(s.next.id,s.id):ZPP_Simple.inthash.has(s.id,s.next.id))) {
				var intx = ZPP_Simple.sweep.intersection(s.next,s);
				if(intx != null) {
					if(intx.vertex.x >= ZPP_Simple.sweep.sweepx) {
						var cur1 = ZPP_Simple.queue.parent;
						while(cur1 != null) if(ZPP_Simple.queue.lt(intx,cur1.data)) {
							cur1 = cur1.prev;
						} else if(ZPP_Simple.queue.lt(cur1.data,intx)) {
							cur1 = cur1.next;
						} else {
							break;
						}
						var ex = cur1;
						if(ex == null) {
							var cur2 = ZPP_Simple.ints.parent;
							while(cur2 != null) if(ZPP_Simple.ints.lt(intx,cur2.data)) {
								cur2 = cur2.prev;
							} else if(ZPP_Simple.ints.lt(cur2.data,intx)) {
								cur2 = cur2.next;
							} else {
								break;
							}
							var vx1 = cur2;
							if(vx1 != null) {
								var o1 = intx.vertex;
								o1.links.clear();
								o1.node = null;
								o1.forced = false;
								o1.next = ZPP_SimpleVert.zpp_pool;
								ZPP_SimpleVert.zpp_pool = o1;
								intx.vertex = vx1.data.vertex;
								vx1.data = intx;
								ZPP_Simple.queue.insert(intx);
							} else {
								ZPP_Simple.queue.insert(intx);
								ZPP_Simple.ints.insert(intx);
							}
							if(s.next.id < s.id) {
								var id = s.next.id;
								var di = s.id;
								var ret5;
								if(Hashable2_Boolfalse.zpp_pool == null) {
									ret5 = new Hashable2_Boolfalse();
								} else {
									ret5 = Hashable2_Boolfalse.zpp_pool;
									Hashable2_Boolfalse.zpp_pool = ret5.next;
									ret5.next = null;
								}
								ret5.id = id;
								ret5.di = di;
								var ret6 = ret5;
								ret6.value = true;
								ZPP_Simple.inthash.add(ret6);
							} else {
								var id1 = s.id;
								var di1 = s.next.id;
								var ret7;
								if(Hashable2_Boolfalse.zpp_pool == null) {
									ret7 = new Hashable2_Boolfalse();
								} else {
									ret7 = Hashable2_Boolfalse.zpp_pool;
									Hashable2_Boolfalse.zpp_pool = ret7.next;
									ret7.next = null;
								}
								ret7.id = id1;
								ret7.di = di1;
								var ret8 = ret7;
								ret8.value = true;
								ZPP_Simple.inthash.add(ret8);
							}
						} else {
							var x1 = ex.data;
							if(x1.segment != intx.segment || intx.segment2 != x1.segment2) {
								throw new js._Boot.HaxeError("corner case 2, shiiiit.");
							}
							var o2 = intx.vertex;
							o2.links.clear();
							o2.node = null;
							o2.forced = false;
							o2.next = ZPP_SimpleVert.zpp_pool;
							ZPP_SimpleVert.zpp_pool = o2;
							intx.vertex = null;
							intx.segment = intx.segment2 = null;
							intx.node = null;
							intx.next = ZPP_SimpleEvent.zpp_pool;
							ZPP_SimpleEvent.zpp_pool = intx;
						}
					} else {
						var o3 = intx.vertex;
						o3.links.clear();
						o3.node = null;
						o3.forced = false;
						o3.next = ZPP_SimpleVert.zpp_pool;
						ZPP_SimpleVert.zpp_pool = o3;
						intx.vertex = null;
						intx.segment = intx.segment2 = null;
						intx.node = null;
						intx.next = ZPP_SimpleEvent.zpp_pool;
						ZPP_SimpleEvent.zpp_pool = intx;
					}
				}
			}
			if(s != null && s.prev != null && !(s.id < s.prev.id?ZPP_Simple.inthash.has(s.id,s.prev.id):ZPP_Simple.inthash.has(s.prev.id,s.id))) {
				var intx1 = ZPP_Simple.sweep.intersection(s,s.prev);
				if(intx1 != null) {
					if(intx1.vertex.x >= ZPP_Simple.sweep.sweepx) {
						var cur3 = ZPP_Simple.queue.parent;
						while(cur3 != null) if(ZPP_Simple.queue.lt(intx1,cur3.data)) {
							cur3 = cur3.prev;
						} else if(ZPP_Simple.queue.lt(cur3.data,intx1)) {
							cur3 = cur3.next;
						} else {
							break;
						}
						var ex1 = cur3;
						if(ex1 == null) {
							var cur4 = ZPP_Simple.ints.parent;
							while(cur4 != null) if(ZPP_Simple.ints.lt(intx1,cur4.data)) {
								cur4 = cur4.prev;
							} else if(ZPP_Simple.ints.lt(cur4.data,intx1)) {
								cur4 = cur4.next;
							} else {
								break;
							}
							var vx2 = cur4;
							if(vx2 != null) {
								var o4 = intx1.vertex;
								o4.links.clear();
								o4.node = null;
								o4.forced = false;
								o4.next = ZPP_SimpleVert.zpp_pool;
								ZPP_SimpleVert.zpp_pool = o4;
								intx1.vertex = vx2.data.vertex;
								vx2.data = intx1;
								ZPP_Simple.queue.insert(intx1);
							} else {
								ZPP_Simple.queue.insert(intx1);
								ZPP_Simple.ints.insert(intx1);
							}
							if(s.id < s.prev.id) {
								var id2 = s.id;
								var di2 = s.prev.id;
								var ret9;
								if(Hashable2_Boolfalse.zpp_pool == null) {
									ret9 = new Hashable2_Boolfalse();
								} else {
									ret9 = Hashable2_Boolfalse.zpp_pool;
									Hashable2_Boolfalse.zpp_pool = ret9.next;
									ret9.next = null;
								}
								ret9.id = id2;
								ret9.di = di2;
								var ret10 = ret9;
								ret10.value = true;
								ZPP_Simple.inthash.add(ret10);
							} else {
								var id3 = s.prev.id;
								var di3 = s.id;
								var ret11;
								if(Hashable2_Boolfalse.zpp_pool == null) {
									ret11 = new Hashable2_Boolfalse();
								} else {
									ret11 = Hashable2_Boolfalse.zpp_pool;
									Hashable2_Boolfalse.zpp_pool = ret11.next;
									ret11.next = null;
								}
								ret11.id = id3;
								ret11.di = di3;
								var ret12 = ret11;
								ret12.value = true;
								ZPP_Simple.inthash.add(ret12);
							}
						} else {
							var x2 = ex1.data;
							if(x2.segment != intx1.segment || intx1.segment2 != x2.segment2) {
								throw new js._Boot.HaxeError("corner case 2, shiiiit.");
							}
							var o5 = intx1.vertex;
							o5.links.clear();
							o5.node = null;
							o5.forced = false;
							o5.next = ZPP_SimpleVert.zpp_pool;
							ZPP_SimpleVert.zpp_pool = o5;
							intx1.vertex = null;
							intx1.segment = intx1.segment2 = null;
							intx1.node = null;
							intx1.next = ZPP_SimpleEvent.zpp_pool;
							ZPP_SimpleEvent.zpp_pool = intx1;
						}
					} else {
						var o6 = intx1.vertex;
						o6.links.clear();
						o6.node = null;
						o6.forced = false;
						o6.next = ZPP_SimpleVert.zpp_pool;
						ZPP_SimpleVert.zpp_pool = o6;
						intx1.vertex = null;
						intx1.segment = intx1.segment2 = null;
						intx1.node = null;
						intx1.next = ZPP_SimpleEvent.zpp_pool;
						ZPP_SimpleEvent.zpp_pool = intx1;
					}
				}
			}
		} else if(e.type == 2) {
			var s1 = e.segment;
			if(s1.node != null) {
				var nxt = s1.next;
				var pre1 = s1.prev;
				ZPP_Simple.sweep.remove(s1);
				s1.left = s1.right = null;
				s1.prev = null;
				s1.node = null;
				s1.vertices.clear();
				s1.next = ZPP_SimpleSeg.zpp_pool;
				ZPP_SimpleSeg.zpp_pool = s1;
				if(nxt != null && pre1 != null && !(nxt.id < pre1.id?ZPP_Simple.inthash.has(nxt.id,pre1.id):ZPP_Simple.inthash.has(pre1.id,nxt.id))) {
					var intx2 = ZPP_Simple.sweep.intersection(nxt,pre1);
					if(intx2 != null) {
						if(intx2.vertex.x >= ZPP_Simple.sweep.sweepx) {
							var cur5 = ZPP_Simple.queue.parent;
							while(cur5 != null) if(ZPP_Simple.queue.lt(intx2,cur5.data)) {
								cur5 = cur5.prev;
							} else if(ZPP_Simple.queue.lt(cur5.data,intx2)) {
								cur5 = cur5.next;
							} else {
								break;
							}
							var ex2 = cur5;
							if(ex2 == null) {
								var cur6 = ZPP_Simple.ints.parent;
								while(cur6 != null) if(ZPP_Simple.ints.lt(intx2,cur6.data)) {
									cur6 = cur6.prev;
								} else if(ZPP_Simple.ints.lt(cur6.data,intx2)) {
									cur6 = cur6.next;
								} else {
									break;
								}
								var vx3 = cur6;
								if(vx3 != null) {
									var o7 = intx2.vertex;
									o7.links.clear();
									o7.node = null;
									o7.forced = false;
									o7.next = ZPP_SimpleVert.zpp_pool;
									ZPP_SimpleVert.zpp_pool = o7;
									intx2.vertex = vx3.data.vertex;
									vx3.data = intx2;
									ZPP_Simple.queue.insert(intx2);
								} else {
									ZPP_Simple.queue.insert(intx2);
									ZPP_Simple.ints.insert(intx2);
								}
								if(nxt.id < pre1.id) {
									var id4 = nxt.id;
									var di4 = pre1.id;
									var ret13;
									if(Hashable2_Boolfalse.zpp_pool == null) {
										ret13 = new Hashable2_Boolfalse();
									} else {
										ret13 = Hashable2_Boolfalse.zpp_pool;
										Hashable2_Boolfalse.zpp_pool = ret13.next;
										ret13.next = null;
									}
									ret13.id = id4;
									ret13.di = di4;
									var ret14 = ret13;
									ret14.value = true;
									ZPP_Simple.inthash.add(ret14);
								} else {
									var id5 = pre1.id;
									var di5 = nxt.id;
									var ret15;
									if(Hashable2_Boolfalse.zpp_pool == null) {
										ret15 = new Hashable2_Boolfalse();
									} else {
										ret15 = Hashable2_Boolfalse.zpp_pool;
										Hashable2_Boolfalse.zpp_pool = ret15.next;
										ret15.next = null;
									}
									ret15.id = id5;
									ret15.di = di5;
									var ret16 = ret15;
									ret16.value = true;
									ZPP_Simple.inthash.add(ret16);
								}
							} else {
								var x3 = ex2.data;
								if(x3.segment != intx2.segment || intx2.segment2 != x3.segment2) {
									throw new js._Boot.HaxeError("corner case 2, shiiiit.");
								}
								var o8 = intx2.vertex;
								o8.links.clear();
								o8.node = null;
								o8.forced = false;
								o8.next = ZPP_SimpleVert.zpp_pool;
								ZPP_SimpleVert.zpp_pool = o8;
								intx2.vertex = null;
								intx2.segment = intx2.segment2 = null;
								intx2.node = null;
								intx2.next = ZPP_SimpleEvent.zpp_pool;
								ZPP_SimpleEvent.zpp_pool = intx2;
							}
						} else {
							var o9 = intx2.vertex;
							o9.links.clear();
							o9.node = null;
							o9.forced = false;
							o9.next = ZPP_SimpleVert.zpp_pool;
							ZPP_SimpleVert.zpp_pool = o9;
							intx2.vertex = null;
							intx2.segment = intx2.segment2 = null;
							intx2.node = null;
							intx2.next = ZPP_SimpleEvent.zpp_pool;
							ZPP_SimpleEvent.zpp_pool = intx2;
						}
					}
				}
			}
		} else {
			var intx3 = e.vertex;
			var pnull = intx3.node == null;
			var a = e.segment;
			var b = e.segment2;
			if(b.next != a) {
				var t = a;
				a = b;
				b = t;
			}
			var cur7 = a.vertices.parent;
			while(cur7 != null) if(a.vertices.lt(intx3,cur7.data)) {
				cur7 = cur7.prev;
			} else if(a.vertices.lt(cur7.data,intx3)) {
				cur7 = cur7.next;
			} else {
				break;
			}
			var anew = cur7 == null;
			var cur8 = b.vertices.parent;
			while(cur8 != null) if(b.vertices.lt(intx3,cur8.data)) {
				cur8 = cur8.prev;
			} else if(b.vertices.lt(cur8.data,intx3)) {
				cur8 = cur8.next;
			} else {
				break;
			}
			var bnew = cur8 == null;
			if(anew) {
				var aint = a.vertices.insert(intx3);
				var naleft = intx3 == a.left?intx3:a.vertices.predecessor_node(aint).data;
				var naright = intx3 == a.right?intx3:a.vertices.successor_node(aint).data;
				naleft.links.remove(naright);
				if(intx3 != naleft) {
					naleft.links.insert(intx3);
				}
				naright.links.remove(naleft);
				if(intx3 != naright) {
					naright.links.insert(intx3);
				}
				if(intx3 != naleft) {
					intx3.links.insert(naleft);
				}
				if(intx3 != naright) {
					intx3.links.insert(naright);
				}
			}
			if(bnew) {
				var bint = b.vertices.insert(intx3);
				var nbleft = intx3 == b.left?intx3:b.vertices.predecessor_node(bint).data;
				var nbright = intx3 == b.right?intx3:b.vertices.successor_node(bint).data;
				nbleft.links.remove(nbright);
				if(intx3 != nbleft) {
					nbleft.links.insert(intx3);
				}
				nbright.links.remove(nbleft);
				if(intx3 != nbright) {
					nbright.links.insert(intx3);
				}
				if(intx3 != nbleft) {
					intx3.links.insert(nbleft);
				}
				if(intx3 != nbright) {
					intx3.links.insert(nbright);
				}
			}
			if(pnull) {
				intx3.node = ZPP_Simple.vertices.insert(intx3);
			}
			intx3.forced = true;
			if(pnull) {
				var an = a.node;
				var bn = b.node;
				an.data = b;
				bn.data = a;
				a.node = bn;
				b.node = an;
				b.next = a.next;
				a.next = b;
				a.prev = b.prev;
				b.prev = a;
				if(a.prev != null) {
					a.prev.next = a;
				}
				if(b.next != null) {
					b.next.prev = b;
				}
			}
			if(b.next != null && b != null && !(b.next.id < b.id?ZPP_Simple.inthash.has(b.next.id,b.id):ZPP_Simple.inthash.has(b.id,b.next.id))) {
				var intx4 = ZPP_Simple.sweep.intersection(b.next,b);
				if(intx4 != null) {
					if(intx4.vertex.x >= ZPP_Simple.sweep.sweepx) {
						var cur9 = ZPP_Simple.queue.parent;
						while(cur9 != null) if(ZPP_Simple.queue.lt(intx4,cur9.data)) {
							cur9 = cur9.prev;
						} else if(ZPP_Simple.queue.lt(cur9.data,intx4)) {
							cur9 = cur9.next;
						} else {
							break;
						}
						var ex3 = cur9;
						if(ex3 == null) {
							var cur10 = ZPP_Simple.ints.parent;
							while(cur10 != null) if(ZPP_Simple.ints.lt(intx4,cur10.data)) {
								cur10 = cur10.prev;
							} else if(ZPP_Simple.ints.lt(cur10.data,intx4)) {
								cur10 = cur10.next;
							} else {
								break;
							}
							var vx4 = cur10;
							if(vx4 != null) {
								var o10 = intx4.vertex;
								o10.links.clear();
								o10.node = null;
								o10.forced = false;
								o10.next = ZPP_SimpleVert.zpp_pool;
								ZPP_SimpleVert.zpp_pool = o10;
								intx4.vertex = vx4.data.vertex;
								vx4.data = intx4;
								ZPP_Simple.queue.insert(intx4);
							} else {
								ZPP_Simple.queue.insert(intx4);
								ZPP_Simple.ints.insert(intx4);
							}
							if(b.next.id < b.id) {
								var id6 = b.next.id;
								var di6 = b.id;
								var ret17;
								if(Hashable2_Boolfalse.zpp_pool == null) {
									ret17 = new Hashable2_Boolfalse();
								} else {
									ret17 = Hashable2_Boolfalse.zpp_pool;
									Hashable2_Boolfalse.zpp_pool = ret17.next;
									ret17.next = null;
								}
								ret17.id = id6;
								ret17.di = di6;
								var ret18 = ret17;
								ret18.value = true;
								ZPP_Simple.inthash.add(ret18);
							} else {
								var id7 = b.id;
								var di7 = b.next.id;
								var ret19;
								if(Hashable2_Boolfalse.zpp_pool == null) {
									ret19 = new Hashable2_Boolfalse();
								} else {
									ret19 = Hashable2_Boolfalse.zpp_pool;
									Hashable2_Boolfalse.zpp_pool = ret19.next;
									ret19.next = null;
								}
								ret19.id = id7;
								ret19.di = di7;
								var ret20 = ret19;
								ret20.value = true;
								ZPP_Simple.inthash.add(ret20);
							}
						} else {
							var x4 = ex3.data;
							if(x4.segment != intx4.segment || intx4.segment2 != x4.segment2) {
								throw new js._Boot.HaxeError("corner case 2, shiiiit.");
							}
							var o11 = intx4.vertex;
							o11.links.clear();
							o11.node = null;
							o11.forced = false;
							o11.next = ZPP_SimpleVert.zpp_pool;
							ZPP_SimpleVert.zpp_pool = o11;
							intx4.vertex = null;
							intx4.segment = intx4.segment2 = null;
							intx4.node = null;
							intx4.next = ZPP_SimpleEvent.zpp_pool;
							ZPP_SimpleEvent.zpp_pool = intx4;
						}
					} else {
						var o12 = intx4.vertex;
						o12.links.clear();
						o12.node = null;
						o12.forced = false;
						o12.next = ZPP_SimpleVert.zpp_pool;
						ZPP_SimpleVert.zpp_pool = o12;
						intx4.vertex = null;
						intx4.segment = intx4.segment2 = null;
						intx4.node = null;
						intx4.next = ZPP_SimpleEvent.zpp_pool;
						ZPP_SimpleEvent.zpp_pool = intx4;
					}
				}
			}
			if(a != null && a.prev != null && !(a.id < a.prev.id?ZPP_Simple.inthash.has(a.id,a.prev.id):ZPP_Simple.inthash.has(a.prev.id,a.id))) {
				var intx5 = ZPP_Simple.sweep.intersection(a,a.prev);
				if(intx5 != null) {
					if(intx5.vertex.x >= ZPP_Simple.sweep.sweepx) {
						var cur11 = ZPP_Simple.queue.parent;
						while(cur11 != null) if(ZPP_Simple.queue.lt(intx5,cur11.data)) {
							cur11 = cur11.prev;
						} else if(ZPP_Simple.queue.lt(cur11.data,intx5)) {
							cur11 = cur11.next;
						} else {
							break;
						}
						var ex4 = cur11;
						if(ex4 == null) {
							var cur12 = ZPP_Simple.ints.parent;
							while(cur12 != null) if(ZPP_Simple.ints.lt(intx5,cur12.data)) {
								cur12 = cur12.prev;
							} else if(ZPP_Simple.ints.lt(cur12.data,intx5)) {
								cur12 = cur12.next;
							} else {
								break;
							}
							var vx5 = cur12;
							if(vx5 != null) {
								var o13 = intx5.vertex;
								o13.links.clear();
								o13.node = null;
								o13.forced = false;
								o13.next = ZPP_SimpleVert.zpp_pool;
								ZPP_SimpleVert.zpp_pool = o13;
								intx5.vertex = vx5.data.vertex;
								vx5.data = intx5;
								ZPP_Simple.queue.insert(intx5);
							} else {
								ZPP_Simple.queue.insert(intx5);
								ZPP_Simple.ints.insert(intx5);
							}
							if(a.id < a.prev.id) {
								var id8 = a.id;
								var di8 = a.prev.id;
								var ret21;
								if(Hashable2_Boolfalse.zpp_pool == null) {
									ret21 = new Hashable2_Boolfalse();
								} else {
									ret21 = Hashable2_Boolfalse.zpp_pool;
									Hashable2_Boolfalse.zpp_pool = ret21.next;
									ret21.next = null;
								}
								ret21.id = id8;
								ret21.di = di8;
								var ret22 = ret21;
								ret22.value = true;
								ZPP_Simple.inthash.add(ret22);
							} else {
								var id9 = a.prev.id;
								var di9 = a.id;
								var ret23;
								if(Hashable2_Boolfalse.zpp_pool == null) {
									ret23 = new Hashable2_Boolfalse();
								} else {
									ret23 = Hashable2_Boolfalse.zpp_pool;
									Hashable2_Boolfalse.zpp_pool = ret23.next;
									ret23.next = null;
								}
								ret23.id = id9;
								ret23.di = di9;
								var ret24 = ret23;
								ret24.value = true;
								ZPP_Simple.inthash.add(ret24);
							}
						} else {
							var x5 = ex4.data;
							if(x5.segment != intx5.segment || intx5.segment2 != x5.segment2) {
								throw new js._Boot.HaxeError("corner case 2, shiiiit.");
							}
							var o14 = intx5.vertex;
							o14.links.clear();
							o14.node = null;
							o14.forced = false;
							o14.next = ZPP_SimpleVert.zpp_pool;
							ZPP_SimpleVert.zpp_pool = o14;
							intx5.vertex = null;
							intx5.segment = intx5.segment2 = null;
							intx5.node = null;
							intx5.next = ZPP_SimpleEvent.zpp_pool;
							ZPP_SimpleEvent.zpp_pool = intx5;
						}
					} else {
						var o15 = intx5.vertex;
						o15.links.clear();
						o15.node = null;
						o15.forced = false;
						o15.next = ZPP_SimpleVert.zpp_pool;
						ZPP_SimpleVert.zpp_pool = o15;
						intx5.vertex = null;
						intx5.segment = intx5.segment2 = null;
						intx5.node = null;
						intx5.next = ZPP_SimpleEvent.zpp_pool;
						ZPP_SimpleEvent.zpp_pool = intx5;
					}
				}
			}
			ZPP_Simple.ints.remove(e);
		}
		e.vertex = null;
		e.segment = e.segment2 = null;
		e.node = null;
		e.next = ZPP_SimpleEvent.zpp_pool;
		ZPP_SimpleEvent.zpp_pool = e;
	}
	var _g1 = 0;
	var _g = ZPP_Simple.inthash.table.length;
	while(_g1 < _g) {
		var i = _g1++;
		var n = ZPP_Simple.inthash.table[i];
		if(n == null) {
			continue;
		}
		while(n != null) {
			var t1 = n.hnext;
			n.hnext = null;
			var o16 = n;
			o16.next = Hashable2_Boolfalse.zpp_pool;
			Hashable2_Boolfalse.zpp_pool = o16;
			n = t1;
		}
		ZPP_Simple.inthash.table[i] = null;
	}
	if(rets == null) {
		rets = new ZNPList_ZPP_GeomVert();
	}
	while(!ZPP_Simple.vertices.empty()) ZPP_Simple.clip_polygon(ZPP_Simple.vertices,rets);
	return rets;
};
ZPP_Simple.clip_polygon = function(vertices,rets) {
	var ret = null;
	var cur = vertices.first();
	var fst = cur;
	var pren = cur.links.parent;
	var nxtn = pren.prev == null?pren.next:pren.prev;
	var pre = pren.data;
	var nxt = nxtn.data;
	var ux = 0.0;
	var uy = 0.0;
	ux = cur.x - pre.x;
	uy = cur.y - pre.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = nxt.x - cur.x;
	vy = nxt.y - cur.y;
	if(vy * ux - vx * uy < 0) {
		nxt = pre;
	}
	var x = cur.x;
	var y = cur.y;
	var ret1;
	if(ZPP_GeomVert.zpp_pool == null) {
		ret1 = new ZPP_GeomVert();
	} else {
		ret1 = ZPP_GeomVert.zpp_pool;
		ZPP_GeomVert.zpp_pool = ret1.next;
		ret1.next = null;
	}
	ret1.forced = false;
	ret1.x = x;
	ret1.y = y;
	var obj = ret1;
	if(ret == null) {
		ret = obj.prev = obj.next = obj;
	} else {
		obj.prev = ret;
		obj.next = ret.next;
		ret.next.prev = obj;
		ret.next = obj;
	}
	ret = obj;
	obj.forced = cur.forced;
	while(true) {
		cur.links.remove(nxt);
		nxt.links.remove(cur);
		if(nxt == fst) {
			if(cur.links.empty()) {
				vertices.remove(cur);
				var o = cur;
				o.links.clear();
				o.node = null;
				o.forced = false;
				o.next = ZPP_SimpleVert.zpp_pool;
				ZPP_SimpleVert.zpp_pool = o;
			}
			break;
		}
		var x1 = nxt.x;
		var y1 = nxt.y;
		var ret2;
		if(ZPP_GeomVert.zpp_pool == null) {
			ret2 = new ZPP_GeomVert();
		} else {
			ret2 = ZPP_GeomVert.zpp_pool;
			ZPP_GeomVert.zpp_pool = ret2.next;
			ret2.next = null;
		}
		ret2.forced = false;
		ret2.x = x1;
		ret2.y = y1;
		var obj1 = ret2;
		if(ret == null) {
			ret = obj1.prev = obj1.next = obj1;
		} else {
			obj1.prev = ret;
			obj1.next = ret.next;
			ret.next.prev = obj1;
			ret.next = obj1;
		}
		ret = obj1;
		obj1.forced = nxt.forced;
		if(nxt.links.singular()) {
			if(cur.links.empty()) {
				vertices.remove(cur);
				var o1 = cur;
				o1.links.clear();
				o1.node = null;
				o1.forced = false;
				o1.next = ZPP_SimpleVert.zpp_pool;
				ZPP_SimpleVert.zpp_pool = o1;
			}
			cur = nxt;
			nxt = nxt.links.parent.data;
		} else {
			var min = null;
			var minl = 0.0;
			if(!nxt.links.empty()) {
				var set_ite = nxt.links.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var p = set_ite.data;
					if(min == null) {
						min = p;
						var ux1 = 0.0;
						var uy1 = 0.0;
						ux1 = nxt.x - cur.x;
						uy1 = nxt.y - cur.y;
						var vx1 = 0.0;
						var vy1 = 0.0;
						vx1 = p.x - nxt.x;
						vy1 = p.y - nxt.y;
						minl = vy1 * ux1 - vx1 * uy1;
					} else {
						var ux2 = 0.0;
						var uy2 = 0.0;
						ux2 = nxt.x - cur.x;
						uy2 = nxt.y - cur.y;
						var vx2 = 0.0;
						var vy2 = 0.0;
						vx2 = p.x - nxt.x;
						vy2 = p.y - nxt.y;
						var nleft = vy2 * ux2 - vx2 * uy2;
						if(nleft > 0 && minl <= 0) {
							min = p;
							minl = nleft;
						} else if(minl * nleft >= 0) {
							var ux3 = 0.0;
							var uy3 = 0.0;
							ux3 = nxt.x - p.x;
							uy3 = nxt.y - p.y;
							var vx3 = 0.0;
							var vy3 = 0.0;
							vx3 = min.x - nxt.x;
							vy3 = min.y - nxt.y;
							if(vy3 * ux3 - vx3 * uy3 > 0) {
								min = p;
								minl = nleft;
							}
						}
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			if(cur.links.empty()) {
				vertices.remove(cur);
				var o2 = cur;
				o2.links.clear();
				o2.node = null;
				o2.forced = false;
				o2.next = ZPP_SimpleVert.zpp_pool;
				ZPP_SimpleVert.zpp_pool = o2;
			}
			cur = nxt;
			nxt = min;
		}
	}
	vertices.remove(fst);
	fst.links.clear();
	fst.node = null;
	fst.forced = false;
	fst.next = ZPP_SimpleVert.zpp_pool;
	ZPP_SimpleVert.zpp_pool = fst;
	rets.add(ret);
};
ZPP_Simple.isSimple = function(poly) {
	if(ZPP_Simple.sweep == null) {
		ZPP_Simple.sweep = new ZPP_SimpleSweep();
		ZPP_Simple.inthash = new FastHash2_Hashable2_Boolfalse();
	}
	var vertices = ZPP_Simple.list_vertices;
	if(vertices == null) {
		vertices = ZPP_Simple.list_vertices = new ZNPList_ZPP_SimpleVert();
	}
	if(poly != null) {
		var nite = poly;
		while(true) {
			var v = nite;
			var x = v.x;
			var y = v.y;
			var ret;
			if(ZPP_SimpleVert.zpp_pool == null) {
				ret = new ZPP_SimpleVert();
			} else {
				ret = ZPP_SimpleVert.zpp_pool;
				ZPP_SimpleVert.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.x = x;
			ret.y = y;
			vertices.add(ret);
			nite = nite.next;
			if(!(nite != poly)) {
				break;
			}
		}
	}
	var queue = ZPP_Simple.list_queue;
	if(queue == null) {
		queue = ZPP_Simple.list_queue = new ZNPList_ZPP_SimpleEvent();
	}
	var cx_ite = vertices.head;
	var u = cx_ite.elt;
	cx_ite = cx_ite.next;
	while(cx_ite != null) {
		var v1 = cx_ite.elt;
		var ret1;
		if(ZPP_SimpleEvent.zpp_pool == null) {
			ret1 = new ZPP_SimpleEvent();
		} else {
			ret1 = ZPP_SimpleEvent.zpp_pool;
			ZPP_SimpleEvent.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.vertex = u;
		var e1 = queue.add(ret1);
		var ret2;
		if(ZPP_SimpleEvent.zpp_pool == null) {
			ret2 = new ZPP_SimpleEvent();
		} else {
			ret2 = ZPP_SimpleEvent.zpp_pool;
			ZPP_SimpleEvent.zpp_pool = ret2.next;
			ret2.next = null;
		}
		ret2.vertex = v1;
		var e2 = queue.add(ret2);
		var tmp;
		if(ZPP_SimpleEvent.less_xy(e1,e2)) {
			e1.type = 1;
			e2.type = 2;
			tmp = ZPP_SimpleSeg.get(u,v1);
		} else {
			e1.type = 2;
			e2.type = 1;
			tmp = ZPP_SimpleSeg.get(v1,u);
		}
		e1.segment = e2.segment = tmp;
		u = v1;
		cx_ite = cx_ite.next;
	}
	var v2 = vertices.head.elt;
	var ret3;
	if(ZPP_SimpleEvent.zpp_pool == null) {
		ret3 = new ZPP_SimpleEvent();
	} else {
		ret3 = ZPP_SimpleEvent.zpp_pool;
		ZPP_SimpleEvent.zpp_pool = ret3.next;
		ret3.next = null;
	}
	ret3.vertex = u;
	var e11 = queue.add(ret3);
	var ret4;
	if(ZPP_SimpleEvent.zpp_pool == null) {
		ret4 = new ZPP_SimpleEvent();
	} else {
		ret4 = ZPP_SimpleEvent.zpp_pool;
		ZPP_SimpleEvent.zpp_pool = ret4.next;
		ret4.next = null;
	}
	ret4.vertex = v2;
	var e21 = queue.add(ret4);
	var tmp1;
	if(ZPP_SimpleEvent.less_xy(e11,e21)) {
		e11.type = 1;
		e21.type = 2;
		tmp1 = ZPP_SimpleSeg.get(u,v2);
	} else {
		e11.type = 2;
		e21.type = 1;
		tmp1 = ZPP_SimpleSeg.get(v2,u);
	}
	e11.segment = e21.segment = tmp1;
	var xxlist = queue;
	if(xxlist.head != null && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt = null;
		var listSize = 1;
		var numMerges;
		var leftSize;
		var rightSize;
		while(true) {
			numMerges = 0;
			left = head;
			head = null;
			tail = head;
			while(left != null) {
				++numMerges;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					++leftSize;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt = right;
						right = right.next;
						--rightSize;
					} else if(rightSize == 0 || right == null) {
						nxt = left;
						left = left.next;
						--leftSize;
					} else if(ZPP_SimpleEvent.less_xy(left.elt,right.elt)) {
						nxt = left;
						left = left.next;
						--leftSize;
					} else {
						nxt = right;
						right = right.next;
						--rightSize;
					}
					if(tail != null) {
						tail.next = nxt;
					} else {
						head = nxt;
					}
					tail = nxt;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
			if(!(numMerges > 1)) {
				break;
			}
		}
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
	var ret5 = true;
	while(queue.head != null) {
		var e = queue.pop_unsafe();
		var seg = e.segment;
		if(e.type == 1) {
			ZPP_Simple.sweep.add(seg);
			if(ZPP_Simple.sweep.intersect(seg,seg.next) || ZPP_Simple.sweep.intersect(seg,seg.prev)) {
				ret5 = false;
				break;
			}
		} else if(e.type == 2) {
			if(ZPP_Simple.sweep.intersect(seg.prev,seg.next)) {
				ret5 = false;
				break;
			}
			ZPP_Simple.sweep.remove(seg);
			seg.left = seg.right = null;
			seg.prev = null;
			seg.node = null;
			seg.vertices.clear();
			seg.next = ZPP_SimpleSeg.zpp_pool;
			ZPP_SimpleSeg.zpp_pool = seg;
		}
		e.vertex = null;
		e.segment = e.segment2 = null;
		e.node = null;
		e.next = ZPP_SimpleEvent.zpp_pool;
		ZPP_SimpleEvent.zpp_pool = e;
	}
	while(queue.head != null) {
		var e3 = queue.pop_unsafe();
		if(e3.type == 2) {
			var o = e3.segment;
			o.left = o.right = null;
			o.prev = null;
			o.node = null;
			o.vertices.clear();
			o.next = ZPP_SimpleSeg.zpp_pool;
			ZPP_SimpleSeg.zpp_pool = o;
		}
		e3.vertex = null;
		e3.segment = e3.segment2 = null;
		e3.node = null;
		e3.next = ZPP_SimpleEvent.zpp_pool;
		ZPP_SimpleEvent.zpp_pool = e3;
	}
	ZPP_Simple.sweep.clear();
	while(vertices.head != null) {
		var o1 = vertices.pop_unsafe();
		o1.links.clear();
		o1.node = null;
		o1.forced = false;
		o1.next = ZPP_SimpleVert.zpp_pool;
		ZPP_SimpleVert.zpp_pool = o1;
	}
	return ret5;
};
ZPP_Simple.prototype.__class__ = ZPP_Simple;
var ZPP_SimplifyV = zpp_nape.geom.ZPP_SimplifyV = function() {
	this.forced = false;
	this.flag = false;
	this.prev = null;
	this.next = null;
	this.y = 0.0;
	this.x = 0.0;
};
ZPP_SimplifyV.__name__ = ["zpp_nape","geom","ZPP_SimplifyV"];
ZPP_SimplifyV.get = function(v) {
	var ret;
	if(ZPP_SimplifyV.zpp_pool == null) {
		ret = new ZPP_SimplifyV();
	} else {
		ret = ZPP_SimplifyV.zpp_pool;
		ZPP_SimplifyV.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.x = v.x;
	ret.y = v.y;
	ret.flag = false;
	return ret;
};
ZPP_SimplifyV.prototype.x = null;
ZPP_SimplifyV.prototype.y = null;
ZPP_SimplifyV.prototype.next = null;
ZPP_SimplifyV.prototype.prev = null;
ZPP_SimplifyV.prototype.flag = null;
ZPP_SimplifyV.prototype.forced = null;
ZPP_SimplifyV.prototype.free = function() {
};
ZPP_SimplifyV.prototype.alloc = function() {
};
ZPP_SimplifyV.prototype.__class__ = ZPP_SimplifyV;
var ZPP_SimplifyP = zpp_nape.geom.ZPP_SimplifyP = function() {
	this.max = null;
	this.min = null;
	this.next = null;
};
ZPP_SimplifyP.__name__ = ["zpp_nape","geom","ZPP_SimplifyP"];
ZPP_SimplifyP.get = function(min,max) {
	var ret;
	if(ZPP_SimplifyP.zpp_pool == null) {
		ret = new ZPP_SimplifyP();
	} else {
		ret = ZPP_SimplifyP.zpp_pool;
		ZPP_SimplifyP.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.min = min;
	ret.max = max;
	return ret;
};
ZPP_SimplifyP.prototype.next = null;
ZPP_SimplifyP.prototype.min = null;
ZPP_SimplifyP.prototype.max = null;
ZPP_SimplifyP.prototype.free = function() {
	this.min = this.max = null;
};
ZPP_SimplifyP.prototype.alloc = function() {
};
ZPP_SimplifyP.prototype.__class__ = ZPP_SimplifyP;
var ZPP_Simplify = zpp_nape.geom.ZPP_Simplify = function() { };
ZPP_Simplify.__name__ = ["zpp_nape","geom","ZPP_Simplify"];
ZPP_Simplify.lessval = function(a,b) {
	return a.x - b.x + (a.y - b.y);
};
ZPP_Simplify.less = function(a,b) {
	return a.x - b.x + (a.y - b.y) < 0.0;
};
ZPP_Simplify.distance = function(v,a,b) {
	var nx = 0.0;
	var ny = 0.0;
	nx = b.x - a.x;
	ny = b.y - a.y;
	var cx = 0.0;
	var cy = 0.0;
	cx = v.x - a.x;
	cy = v.y - a.y;
	if(nx * nx + ny * ny == 0.0) {
		return cx * cx + cy * cy;
	} else {
		var t = (cx * nx + cy * ny) / (nx * nx + ny * ny);
		if(t <= 0) {
			return cx * cx + cy * cy;
		} else if(t >= 1) {
			var ax = v.x;
			var ay = v.y;
			var bx = b.x;
			var by = b.y;
			var dx = 0.0;
			var dy = 0.0;
			dx = ax - bx;
			dy = ay - by;
			return dx * dx + dy * dy;
		} else {
			cx -= nx * t;
			cy -= ny * t;
			return cx * cx + cy * cy;
		}
	}
};
ZPP_Simplify.simplify = function(P,epsilon) {
	var ret = null;
	var min = null;
	var max = null;
	epsilon *= epsilon;
	if(ZPP_Simplify.stack == null) {
		ZPP_Simplify.stack = new ZNPList_ZPP_SimplifyP();
	}
	var pre = null;
	var fst = null;
	var cur = P;
	while(true) {
		var ret1;
		if(ZPP_SimplifyV.zpp_pool == null) {
			ret1 = new ZPP_SimplifyV();
		} else {
			ret1 = ZPP_SimplifyV.zpp_pool;
			ZPP_SimplifyV.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.x = cur.x;
		ret1.y = cur.y;
		ret1.flag = false;
		var v = ret1;
		v.forced = cur.forced;
		if(v.forced) {
			v.flag = true;
			if(pre != null) {
				var ret2;
				if(ZPP_SimplifyP.zpp_pool == null) {
					ret2 = new ZPP_SimplifyP();
				} else {
					ret2 = ZPP_SimplifyP.zpp_pool;
					ZPP_SimplifyP.zpp_pool = ret2.next;
					ret2.next = null;
				}
				ret2.min = pre;
				ret2.max = v;
				ZPP_Simplify.stack.add(ret2);
			} else {
				fst = v;
			}
			pre = v;
		}
		if(ret == null) {
			ret = v.prev = v.next = v;
		} else {
			v.prev = ret;
			v.next = ret.next;
			ret.next.prev = v;
			ret.next = v;
		}
		ret = v;
		if(min == null) {
			min = v;
			max = v;
		} else {
			if(v.x - min.x + (v.y - min.y) < 0.0) {
				min = v;
			}
			if(max.x - v.x + (max.y - v.y) < 0.0) {
				max = v;
			}
		}
		cur = cur.next;
		if(!(cur != P)) {
			break;
		}
	}
	if(ZPP_Simplify.stack.head == null) {
		if(fst == null) {
			min.flag = max.flag = true;
			var ret3;
			if(ZPP_SimplifyP.zpp_pool == null) {
				ret3 = new ZPP_SimplifyP();
			} else {
				ret3 = ZPP_SimplifyP.zpp_pool;
				ZPP_SimplifyP.zpp_pool = ret3.next;
				ret3.next = null;
			}
			ret3.min = min;
			ret3.max = max;
			ZPP_Simplify.stack.add(ret3);
			var ret4;
			if(ZPP_SimplifyP.zpp_pool == null) {
				ret4 = new ZPP_SimplifyP();
			} else {
				ret4 = ZPP_SimplifyP.zpp_pool;
				ZPP_SimplifyP.zpp_pool = ret4.next;
				ret4.next = null;
			}
			ret4.min = max;
			ret4.max = min;
			ZPP_Simplify.stack.add(ret4);
		} else {
			var d1 = min.x - fst.x + (min.y - fst.y);
			if(d1 < 0) {
				d1 = -d1;
			}
			var d2 = max.x - fst.x + (max.y - fst.y);
			if(d2 < 0) {
				d2 = -d2;
			}
			if(d1 > d2) {
				min.flag = fst.flag = true;
				var ret5;
				if(ZPP_SimplifyP.zpp_pool == null) {
					ret5 = new ZPP_SimplifyP();
				} else {
					ret5 = ZPP_SimplifyP.zpp_pool;
					ZPP_SimplifyP.zpp_pool = ret5.next;
					ret5.next = null;
				}
				ret5.min = min;
				ret5.max = fst;
				ZPP_Simplify.stack.add(ret5);
				var ret6;
				if(ZPP_SimplifyP.zpp_pool == null) {
					ret6 = new ZPP_SimplifyP();
				} else {
					ret6 = ZPP_SimplifyP.zpp_pool;
					ZPP_SimplifyP.zpp_pool = ret6.next;
					ret6.next = null;
				}
				ret6.min = fst;
				ret6.max = min;
				ZPP_Simplify.stack.add(ret6);
			} else {
				max.flag = fst.flag = true;
				var ret7;
				if(ZPP_SimplifyP.zpp_pool == null) {
					ret7 = new ZPP_SimplifyP();
				} else {
					ret7 = ZPP_SimplifyP.zpp_pool;
					ZPP_SimplifyP.zpp_pool = ret7.next;
					ret7.next = null;
				}
				ret7.min = max;
				ret7.max = fst;
				ZPP_Simplify.stack.add(ret7);
				var ret8;
				if(ZPP_SimplifyP.zpp_pool == null) {
					ret8 = new ZPP_SimplifyP();
				} else {
					ret8 = ZPP_SimplifyP.zpp_pool;
					ZPP_SimplifyP.zpp_pool = ret8.next;
					ret8.next = null;
				}
				ret8.min = fst;
				ret8.max = max;
				ZPP_Simplify.stack.add(ret8);
			}
		}
	} else {
		var ret9;
		if(ZPP_SimplifyP.zpp_pool == null) {
			ret9 = new ZPP_SimplifyP();
		} else {
			ret9 = ZPP_SimplifyP.zpp_pool;
			ZPP_SimplifyP.zpp_pool = ret9.next;
			ret9.next = null;
		}
		ret9.min = pre;
		ret9.max = fst;
		ZPP_Simplify.stack.add(ret9);
	}
	while(ZPP_Simplify.stack.head != null) {
		var cur1 = ZPP_Simplify.stack.pop_unsafe();
		var min1 = cur1.min;
		var max1 = cur1.max;
		cur1.min = cur1.max = null;
		cur1.next = ZPP_SimplifyP.zpp_pool;
		ZPP_SimplifyP.zpp_pool = cur1;
		var dmax = epsilon;
		var dv = null;
		var ite = min1.next;
		while(ite != max1) {
			var dist = ZPP_Simplify.distance(ite,min1,max1);
			if(dist > dmax) {
				dmax = dist;
				dv = ite;
			}
			ite = ite.next;
		}
		if(dv != null) {
			dv.flag = true;
			var ret10;
			if(ZPP_SimplifyP.zpp_pool == null) {
				ret10 = new ZPP_SimplifyP();
			} else {
				ret10 = ZPP_SimplifyP.zpp_pool;
				ZPP_SimplifyP.zpp_pool = ret10.next;
				ret10.next = null;
			}
			ret10.min = min1;
			ret10.max = dv;
			ZPP_Simplify.stack.add(ret10);
			var ret11;
			if(ZPP_SimplifyP.zpp_pool == null) {
				ret11 = new ZPP_SimplifyP();
			} else {
				ret11 = ZPP_SimplifyP.zpp_pool;
				ZPP_SimplifyP.zpp_pool = ret11.next;
				ret11.next = null;
			}
			ret11.min = dv;
			ret11.max = max1;
			ZPP_Simplify.stack.add(ret11);
		}
	}
	var retp = null;
	while(ret != null) {
		if(ret.flag) {
			var x = ret.x;
			var y = ret.y;
			var ret12;
			if(ZPP_GeomVert.zpp_pool == null) {
				ret12 = new ZPP_GeomVert();
			} else {
				ret12 = ZPP_GeomVert.zpp_pool;
				ZPP_GeomVert.zpp_pool = ret12.next;
				ret12.next = null;
			}
			ret12.forced = false;
			ret12.x = x;
			ret12.y = y;
			var obj = ret12;
			if(retp == null) {
				retp = obj.prev = obj.next = obj;
			} else {
				obj.prev = retp;
				obj.next = retp.next;
				retp.next.prev = obj;
				retp.next = obj;
			}
			retp = obj;
			obj.forced = ret.forced;
		}
		if(ret != null && ret.prev == ret) {
			ret.next = ret.prev = null;
			var o = ret;
			o.next = ZPP_SimplifyV.zpp_pool;
			ZPP_SimplifyV.zpp_pool = o;
			ret = null;
			ret = ret;
		} else {
			var retnodes = ret.next;
			ret.prev.next = ret.next;
			ret.next.prev = ret.prev;
			ret.next = ret.prev = null;
			var o1 = ret;
			o1.next = ZPP_SimplifyV.zpp_pool;
			ZPP_SimplifyV.zpp_pool = o1;
			ret = null;
			ret = retnodes;
		}
	}
	return retp;
};
ZPP_Simplify.prototype.__class__ = ZPP_Simplify;
var ZPP_ToiEvent = zpp_nape.geom.ZPP_ToiEvent = function() {
	this.kinematic = false;
	this.failed = false;
	this.slipped = false;
	this.axis = null;
	this.c2 = null;
	this.c1 = null;
	this.frozen2 = false;
	this.frozen1 = false;
	this.arbiter = null;
	this.s2 = null;
	this.s1 = null;
	this.toi = 0.0;
	this.next = null;
	this.c1 = new ZPP_Vec2();
	this.c2 = new ZPP_Vec2();
	this.axis = new ZPP_Vec2();
};
ZPP_ToiEvent.__name__ = ["zpp_nape","geom","ZPP_ToiEvent"];
ZPP_ToiEvent.prototype.next = null;
ZPP_ToiEvent.prototype.alloc = function() {
	this.failed = false;
	this.s1 = this.s2 = null;
	this.arbiter = null;
};
ZPP_ToiEvent.prototype.free = function() {
};
ZPP_ToiEvent.prototype.toi = null;
ZPP_ToiEvent.prototype.s1 = null;
ZPP_ToiEvent.prototype.s2 = null;
ZPP_ToiEvent.prototype.arbiter = null;
ZPP_ToiEvent.prototype.frozen1 = null;
ZPP_ToiEvent.prototype.frozen2 = null;
ZPP_ToiEvent.prototype.c1 = null;
ZPP_ToiEvent.prototype.c2 = null;
ZPP_ToiEvent.prototype.axis = null;
ZPP_ToiEvent.prototype.slipped = null;
ZPP_ToiEvent.prototype.failed = null;
ZPP_ToiEvent.prototype.kinematic = null;
ZPP_ToiEvent.prototype.__class__ = ZPP_ToiEvent;
var ZPP_SweepDistance = zpp_nape.geom.ZPP_SweepDistance = function() { };
ZPP_SweepDistance.__name__ = ["zpp_nape","geom","ZPP_SweepDistance"];
ZPP_SweepDistance.dynamicSweep = function(toi,timeStep,lowerBound,negRadius,userAPI) {
	if(userAPI == null) {
		userAPI = false;
	}
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var b2 = s2.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = b2.velx - b1.velx;
	deltay = b2.vely - b1.vely;
	var ang1 = b1.angvel;
	if(ang1 < 0) {
		ang1 = -ang1;
	}
	var ang2 = b2.angvel;
	if(ang2 < 0) {
		ang2 = -ang2;
	}
	var angBias = s1.sweepCoef * ang1 + s2.sweepCoef * ang2;
	if(!userAPI && !toi.kinematic && deltax * deltax + deltay * deltay < Config.dynamicSweepLinearThreshold * Config.dynamicSweepLinearThreshold && angBias < Config.dynamicSweepAngularThreshold) {
		toi.toi = -1;
		toi.failed = true;
		return;
	}
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		var dt = curTOI * timeStep;
		var delta = dt - b1.sweepTime;
		if(delta != 0) {
			b1.sweepTime = dt;
			b1.posx += b1.velx * delta;
			b1.posy += b1.vely * delta;
			if(b1.angvel != 0) {
				var dr = b1.sweep_angvel * delta;
				b1.rot += dr;
				if(dr * dr > 0.0001) {
					b1.axisx = Math.sin(b1.rot);
					b1.axisy = Math.cos(b1.rot);
				} else {
					var d2 = dr * dr;
					var p = 1 - 0.5 * d2;
					var m = 1 - d2 * d2 / 8;
					var nx = (p * b1.axisx + dr * b1.axisy) * m;
					b1.axisy = (p * b1.axisy - dr * b1.axisx) * m;
					b1.axisx = nx;
				}
			}
		}
		if(s1.type == 0) {
			s1.worldCOMx = b1.posx + (b1.axisy * s1.localCOMx - b1.axisx * s1.localCOMy);
			s1.worldCOMy = b1.posy + (s1.localCOMx * b1.axisx + s1.localCOMy * b1.axisy);
		} else {
			var p1 = s1.polygon;
			var li = p1.lverts.next;
			var cx_ite = p1.gverts.next;
			while(cx_ite != null) {
				var g = cx_ite;
				var l = li;
				li = li.next;
				g.x = b1.posx + (b1.axisy * l.x - b1.axisx * l.y);
				g.y = b1.posy + (l.x * b1.axisx + l.y * b1.axisy);
				cx_ite = cx_ite.next;
			}
			var ite = p1.edges.head;
			var cx_ite1 = p1.gverts.next;
			var u = cx_ite1;
			cx_ite1 = cx_ite1.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var e = ite.elt;
				ite = ite.next;
				e.gnormx = b1.axisy * e.lnormx - b1.axisx * e.lnormy;
				e.gnormy = e.lnormx * b1.axisx + e.lnormy * b1.axisy;
				e.gprojection = b1.posx * e.gnormx + b1.posy * e.gnormy + e.lprojection;
				e.tp0 = u.y * e.gnormx - u.x * e.gnormy;
				e.tp1 = v.y * e.gnormx - v.x * e.gnormy;
				u = v;
				cx_ite1 = cx_ite1.next;
			}
			var v1 = p1.gverts.next;
			var e1 = ite.elt;
			e1.gnormx = b1.axisy * e1.lnormx - b1.axisx * e1.lnormy;
			e1.gnormy = e1.lnormx * b1.axisx + e1.lnormy * b1.axisy;
			e1.gprojection = b1.posx * e1.gnormx + b1.posy * e1.gnormy + e1.lprojection;
			e1.tp0 = u.y * e1.gnormx - u.x * e1.gnormy;
			e1.tp1 = v1.y * e1.gnormx - v1.x * e1.gnormy;
		}
		var dt1 = curTOI * timeStep;
		var delta1 = dt1 - b2.sweepTime;
		if(delta1 != 0) {
			b2.sweepTime = dt1;
			b2.posx += b2.velx * delta1;
			b2.posy += b2.vely * delta1;
			if(b2.angvel != 0) {
				var dr1 = b2.sweep_angvel * delta1;
				b2.rot += dr1;
				if(dr1 * dr1 > 0.0001) {
					b2.axisx = Math.sin(b2.rot);
					b2.axisy = Math.cos(b2.rot);
				} else {
					var d21 = dr1 * dr1;
					var p2 = 1 - 0.5 * d21;
					var m1 = 1 - d21 * d21 / 8;
					var nx1 = (p2 * b2.axisx + dr1 * b2.axisy) * m1;
					b2.axisy = (p2 * b2.axisy - dr1 * b2.axisx) * m1;
					b2.axisx = nx1;
				}
			}
		}
		if(s2.type == 0) {
			s2.worldCOMx = b2.posx + (b2.axisy * s2.localCOMx - b2.axisx * s2.localCOMy);
			s2.worldCOMy = b2.posy + (s2.localCOMx * b2.axisx + s2.localCOMy * b2.axisy);
		} else {
			var p3 = s2.polygon;
			var li1 = p3.lverts.next;
			var cx_ite2 = p3.gverts.next;
			while(cx_ite2 != null) {
				var g1 = cx_ite2;
				var l1 = li1;
				li1 = li1.next;
				g1.x = b2.posx + (b2.axisy * l1.x - b2.axisx * l1.y);
				g1.y = b2.posy + (l1.x * b2.axisx + l1.y * b2.axisy);
				cx_ite2 = cx_ite2.next;
			}
			var ite1 = p3.edges.head;
			var cx_ite3 = p3.gverts.next;
			var u1 = cx_ite3;
			cx_ite3 = cx_ite3.next;
			while(cx_ite3 != null) {
				var v2 = cx_ite3;
				var e2 = ite1.elt;
				ite1 = ite1.next;
				e2.gnormx = b2.axisy * e2.lnormx - b2.axisx * e2.lnormy;
				e2.gnormy = e2.lnormx * b2.axisx + e2.lnormy * b2.axisy;
				e2.gprojection = b2.posx * e2.gnormx + b2.posy * e2.gnormy + e2.lprojection;
				e2.tp0 = u1.y * e2.gnormx - u1.x * e2.gnormy;
				e2.tp1 = v2.y * e2.gnormx - v2.x * e2.gnormy;
				u1 = v2;
				cx_ite3 = cx_ite3.next;
			}
			var v3 = p3.gverts.next;
			var e3 = ite1.elt;
			e3.gnormx = b2.axisy * e3.lnormx - b2.axisx * e3.lnormy;
			e3.gnormy = e3.lnormx * b2.axisx + e3.lnormy * b2.axisy;
			e3.gprojection = b2.posx * e3.gnormx + b2.posy * e3.gnormy + e3.lprojection;
			e3.tp0 = u1.y * e3.gnormx - u1.x * e3.gnormy;
			e3.tp1 = v3.y * e3.gnormx - v3.x * e3.gnormy;
		}
		var s11 = s1;
		var s21 = s2;
		var w1 = c1;
		var w2 = c2;
		var tmp;
		if(s1.type == 0 && s2.type == 0) {
			var c11 = s1.circle;
			var c21 = s2.circle;
			var dist;
			var nx2 = 0.0;
			var ny = 0.0;
			nx2 = c21.worldCOMx - c11.worldCOMx;
			ny = c21.worldCOMy - c11.worldCOMy;
			var len = Math.sqrt(nx2 * nx2 + ny * ny);
			dist = len - (c11.radius + c21.radius);
			if(dist < 1e100) {
				if(len == 0) {
					nx2 = 1;
					ny = 0;
				} else {
					var t = 1.0 / len;
					nx2 *= t;
					ny *= t;
				}
				var t1 = c11.radius;
				c1.x = c11.worldCOMx + nx2 * t1;
				c1.y = c11.worldCOMy + ny * t1;
				var t2 = -c21.radius;
				c2.x = c21.worldCOMx + nx2 * t2;
				c2.y = c21.worldCOMy + ny * t2;
				axis.x = nx2;
				axis.y = ny;
			}
			tmp = dist;
		} else {
			var swapped = false;
			if(s1.type == 0 && s2.type == 1) {
				var tmp1 = s1;
				s11 = s2;
				s21 = tmp1;
				var tmp2 = c1;
				w1 = c2;
				w2 = tmp2;
				swapped = true;
			}
			if(s11.type == 1 && s21.type == 0) {
				var poly = s11.polygon;
				var circle = s21.circle;
				var best = -1e+100;
				var a0 = null;
				var cx_ite4 = poly.edges.head;
				while(cx_ite4 != null) {
					var a = cx_ite4.elt;
					var dist1 = a.gnormx * circle.worldCOMx + a.gnormy * circle.worldCOMy - a.gprojection - circle.radius;
					if(dist1 > 1e100) {
						best = dist1;
						break;
					}
					if(dist1 > 0) {
						if(dist1 > best) {
							best = dist1;
							a0 = a;
						}
					} else if(best < 0 && dist1 > best) {
						best = dist1;
						a0 = a;
					}
					cx_ite4 = cx_ite4.next;
				}
				if(best < 1e100) {
					var v0 = a0.gp0;
					var v11 = a0.gp1;
					var dt2 = circle.worldCOMy * a0.gnormx - circle.worldCOMx * a0.gnormy;
					if(dt2 <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
						var nx3 = 0.0;
						var ny1 = 0.0;
						nx3 = circle.worldCOMx - v0.x;
						ny1 = circle.worldCOMy - v0.y;
						var len1 = Math.sqrt(nx3 * nx3 + ny1 * ny1);
						best = len1 - circle.radius;
						if(best < 1e100) {
							if(len1 == 0) {
								nx3 = 1;
								ny1 = 0;
							} else {
								var t3 = 1.0 / len1;
								nx3 *= t3;
								ny1 *= t3;
							}
							w1.x = v0.x + nx3 * 0;
							w1.y = v0.y + ny1 * 0;
							var t4 = -circle.radius;
							w2.x = circle.worldCOMx + nx3 * t4;
							w2.y = circle.worldCOMy + ny1 * t4;
							axis.x = nx3;
							axis.y = ny1;
						}
					} else if(dt2 >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
						var nx4 = 0.0;
						var ny2 = 0.0;
						nx4 = circle.worldCOMx - v11.x;
						ny2 = circle.worldCOMy - v11.y;
						var len2 = Math.sqrt(nx4 * nx4 + ny2 * ny2);
						best = len2 - circle.radius;
						if(best < 1e100) {
							if(len2 == 0) {
								nx4 = 1;
								ny2 = 0;
							} else {
								var t5 = 1.0 / len2;
								nx4 *= t5;
								ny2 *= t5;
							}
							w1.x = v11.x + nx4 * 0;
							w1.y = v11.y + ny2 * 0;
							var t6 = -circle.radius;
							w2.x = circle.worldCOMx + nx4 * t6;
							w2.y = circle.worldCOMy + ny2 * t6;
							axis.x = nx4;
							axis.y = ny2;
						}
					} else {
						var t7 = -circle.radius;
						w2.x = circle.worldCOMx + a0.gnormx * t7;
						w2.y = circle.worldCOMy + a0.gnormy * t7;
						var t8 = -best;
						w1.x = w2.x + a0.gnormx * t8;
						w1.y = w2.y + a0.gnormy * t8;
						axis.x = a0.gnormx;
						axis.y = a0.gnormy;
					}
				}
				if(swapped) {
					axis.x = -axis.x;
					axis.y = -axis.y;
				}
				tmp = best;
			} else {
				var p11 = s11.polygon;
				var p21 = s21.polygon;
				var best1 = -1e+100;
				var a1 = null;
				var a2 = null;
				var besti = 0;
				var cx_ite5 = p11.edges.head;
				while(cx_ite5 != null) {
					var a3 = cx_ite5.elt;
					var min = 1e100;
					var cx_ite6 = p21.gverts.next;
					while(cx_ite6 != null) {
						var v4 = cx_ite6;
						var k = a3.gnormx * v4.x + a3.gnormy * v4.y;
						if(k < min) {
							min = k;
						}
						cx_ite6 = cx_ite6.next;
					}
					min -= a3.gprojection;
					if(min > 1e100) {
						best1 = min;
						break;
					}
					if(min > 0) {
						if(min > best1) {
							best1 = min;
							a1 = a3;
							besti = 1;
						}
					} else if(best1 < 0 && min > best1) {
						best1 = min;
						a1 = a3;
						besti = 1;
					}
					cx_ite5 = cx_ite5.next;
				}
				if(best1 < 1e100) {
					var cx_ite7 = p21.edges.head;
					while(cx_ite7 != null) {
						var a4 = cx_ite7.elt;
						var min1 = 1e100;
						var cx_ite8 = p11.gverts.next;
						while(cx_ite8 != null) {
							var v5 = cx_ite8;
							var k1 = a4.gnormx * v5.x + a4.gnormy * v5.y;
							if(k1 < min1) {
								min1 = k1;
							}
							cx_ite8 = cx_ite8.next;
						}
						min1 -= a4.gprojection;
						if(min1 > 1e100) {
							best1 = min1;
							break;
						}
						if(min1 > 0) {
							if(min1 > best1) {
								best1 = min1;
								a2 = a4;
								besti = 2;
							}
						} else if(best1 < 0 && min1 > best1) {
							best1 = min1;
							a2 = a4;
							besti = 2;
						}
						cx_ite7 = cx_ite7.next;
					}
					if(best1 < 1e100) {
						var q2;
						var ax;
						if(besti == 1) {
							q2 = p21;
							ax = a1;
						} else {
							q2 = p11;
							ax = a2;
							var tmp3 = w1;
							w1 = w2;
							w2 = tmp3;
							swapped = !swapped;
						}
						var ay = null;
						var min2 = 1e100;
						var cx_ite9 = q2.edges.head;
						while(cx_ite9 != null) {
							var a5 = cx_ite9.elt;
							var k2 = ax.gnormx * a5.gnormx + ax.gnormy * a5.gnormy;
							if(k2 < min2) {
								min2 = k2;
								ay = a5;
							}
							cx_ite9 = cx_ite9.next;
						}
						if(swapped) {
							axis.x = -ax.gnormx;
							axis.y = -ax.gnormy;
						} else {
							axis.x = ax.gnormx;
							axis.y = ax.gnormy;
						}
						if(best1 >= 0) {
							var v01 = ax.gp0;
							var v12 = ax.gp1;
							var q0 = ay.gp0;
							var q1 = ay.gp1;
							var vx = 0.0;
							var vy = 0.0;
							var qx = 0.0;
							var qy = 0.0;
							vx = v12.x - v01.x;
							vy = v12.y - v01.y;
							qx = q1.x - q0.x;
							qy = q1.y - q0.y;
							var vdot = 1 / (vx * vx + vy * vy);
							var qdot = 1 / (qx * qx + qy * qy);
							var t11 = -(vx * (v01.x - q0.x) + vy * (v01.y - q0.y)) * vdot;
							var t21 = -(vx * (v01.x - q1.x) + vy * (v01.y - q1.y)) * vdot;
							var s12 = -(qx * (q0.x - v01.x) + qy * (q0.y - v01.y)) * qdot;
							var s22 = -(qx * (q0.x - v12.x) + qy * (q0.y - v12.y)) * qdot;
							if(t11 < 0) {
								t11 = 0;
							} else if(t11 > 1) {
								t11 = 1;
							}
							if(t21 < 0) {
								t21 = 0;
							} else if(t21 > 1) {
								t21 = 1;
							}
							if(s12 < 0) {
								s12 = 0;
							} else if(s12 > 1) {
								s12 = 1;
							}
							if(s22 < 0) {
								s22 = 0;
							} else if(s22 > 1) {
								s22 = 1;
							}
							var f1x = 0.0;
							var f1y = 0.0;
							var t9 = t11;
							f1x = v01.x + vx * t9;
							f1y = v01.y + vy * t9;
							var f2x = 0.0;
							var f2y = 0.0;
							var t10 = t21;
							f2x = v01.x + vx * t10;
							f2y = v01.y + vy * t10;
							var g1x = 0.0;
							var g1y = 0.0;
							var t12 = s12;
							g1x = q0.x + qx * t12;
							g1y = q0.y + qy * t12;
							var g2x = 0.0;
							var g2y = 0.0;
							var t13 = s22;
							g2x = q0.x + qx * t13;
							g2y = q0.y + qy * t13;
							var bx = q0.x;
							var by = q0.y;
							var dx = 0.0;
							var dy = 0.0;
							dx = f1x - bx;
							dy = f1y - by;
							var d1 = dx * dx + dy * dy;
							var bx1 = q1.x;
							var by1 = q1.y;
							var dx1 = 0.0;
							var dy1 = 0.0;
							dx1 = f2x - bx1;
							dy1 = f2y - by1;
							var d22 = dx1 * dx1 + dy1 * dy1;
							var bx2 = v01.x;
							var by2 = v01.y;
							var dx2 = 0.0;
							var dy2 = 0.0;
							dx2 = g1x - bx2;
							dy2 = g1y - by2;
							var e11 = dx2 * dx2 + dy2 * dy2;
							var bx3 = v12.x;
							var by3 = v12.y;
							var dx3 = 0.0;
							var dy3 = 0.0;
							dx3 = g2x - bx3;
							dy3 = g2y - by3;
							var e21 = dx3 * dx3 + dy3 * dy3;
							var minfx = 0.0;
							var minfy = 0.0;
							var minq = null;
							if(d1 < d22) {
								minfx = f1x;
								minfy = f1y;
								minq = q0;
							} else {
								minfx = f2x;
								minfy = f2y;
								minq = q1;
								d1 = d22;
							}
							var mingx = 0.0;
							var mingy = 0.0;
							var minv = null;
							if(e11 < e21) {
								mingx = g1x;
								mingy = g1y;
								minv = v01;
							} else {
								mingx = g2x;
								mingy = g2y;
								minv = v12;
								e11 = e21;
							}
							if(d1 < e11) {
								w1.x = minfx;
								w1.y = minfy;
								w2.x = minq.x;
								w2.y = minq.y;
								best1 = Math.sqrt(d1);
							} else {
								w2.x = mingx;
								w2.y = mingy;
								w1.x = minv.x;
								w1.y = minv.y;
								best1 = Math.sqrt(e11);
							}
							if(best1 != 0) {
								axis.x = w2.x - w1.x;
								axis.y = w2.y - w1.y;
								var t14 = 1.0 / best1;
								axis.x *= t14;
								axis.y *= t14;
								if(swapped) {
									axis.x = -axis.x;
									axis.y = -axis.y;
								}
							}
							tmp = best1;
						} else {
							var c0x = 0.0;
							var c0y = 0.0;
							c0x = ay.gp0.x;
							c0y = ay.gp0.y;
							var c1x = 0.0;
							var c1y = 0.0;
							c1x = ay.gp1.x;
							c1y = ay.gp1.y;
							var dvx = 0.0;
							var dvy = 0.0;
							dvx = c1x - c0x;
							dvy = c1y - c0y;
							var d0 = ax.gnormy * c0x - ax.gnormx * c0y;
							var d11 = ax.gnormy * c1x - ax.gnormx * c1y;
							var den = 1 / (d11 - d0);
							var t15 = (-ax.tp1 - d0) * den;
							if(t15 > Config.epsilon) {
								c0x += dvx * t15;
								c0y += dvy * t15;
							}
							var t16 = (-ax.tp0 - d11) * den;
							if(t16 < -Config.epsilon) {
								c1x += dvx * t16;
								c1y += dvy * t16;
							}
							var c0d = c0x * ax.gnormx + c0y * ax.gnormy - ax.gprojection;
							var c1d = c1x * ax.gnormx + c1y * ax.gnormy - ax.gprojection;
							if(c0d < c1d) {
								w2.x = c0x;
								w2.y = c0y;
								var t17 = -c0d;
								w1.x = w2.x + ax.gnormx * t17;
								w1.y = w2.y + ax.gnormy * t17;
								tmp = c0d;
							} else {
								w2.x = c1x;
								w2.y = c1y;
								var t18 = -c1d;
								w1.x = w2.x + ax.gnormx * t18;
								w1.y = w2.y + ax.gnormy * t18;
								tmp = c1d;
							}
						}
					} else {
						tmp = 1e100;
					}
				} else {
					tmp = 1e100;
				}
			}
		}
		var sep = tmp + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep < Config.distanceThresholdCCD) {
			if(userAPI) {
				break;
			}
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var d2x = 0.0;
			var d2y = 0.0;
			d2x = c2.x - b2.posx;
			d2y = c2.y - b2.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y) + b2.sweep_angvel * (axis.y * d2x - axis.x * d2y);
			if(proj > 0) {
				toi.slipped = true;
			}
			if(proj <= 0 || sep < Config.distanceThresholdCCD * 0.5) {
				break;
			}
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta2 = sep / denom;
		if(delta2 < 1e-6) {
			delta2 = 1e-6;
		}
		curTOI += delta2;
		if(curTOI >= 1) {
			curTOI = 1;
			var dt3 = curTOI * timeStep;
			var delta3 = dt3 - b1.sweepTime;
			if(delta3 != 0) {
				b1.sweepTime = dt3;
				b1.posx += b1.velx * delta3;
				b1.posy += b1.vely * delta3;
				if(b1.angvel != 0) {
					var dr2 = b1.sweep_angvel * delta3;
					b1.rot += dr2;
					if(dr2 * dr2 > 0.0001) {
						b1.axisx = Math.sin(b1.rot);
						b1.axisy = Math.cos(b1.rot);
					} else {
						var d23 = dr2 * dr2;
						var p4 = 1 - 0.5 * d23;
						var m2 = 1 - d23 * d23 / 8;
						var nx5 = (p4 * b1.axisx + dr2 * b1.axisy) * m2;
						b1.axisy = (p4 * b1.axisy - dr2 * b1.axisx) * m2;
						b1.axisx = nx5;
					}
				}
			}
			if(s1.type == 0) {
				s1.worldCOMx = b1.posx + (b1.axisy * s1.localCOMx - b1.axisx * s1.localCOMy);
				s1.worldCOMy = b1.posy + (s1.localCOMx * b1.axisx + s1.localCOMy * b1.axisy);
			} else {
				var p5 = s1.polygon;
				var li2 = p5.lverts.next;
				var cx_ite10 = p5.gverts.next;
				while(cx_ite10 != null) {
					var g2 = cx_ite10;
					var l2 = li2;
					li2 = li2.next;
					g2.x = b1.posx + (b1.axisy * l2.x - b1.axisx * l2.y);
					g2.y = b1.posy + (l2.x * b1.axisx + l2.y * b1.axisy);
					cx_ite10 = cx_ite10.next;
				}
				var ite2 = p5.edges.head;
				var cx_ite11 = p5.gverts.next;
				var u2 = cx_ite11;
				cx_ite11 = cx_ite11.next;
				while(cx_ite11 != null) {
					var v6 = cx_ite11;
					var e4 = ite2.elt;
					ite2 = ite2.next;
					e4.gnormx = b1.axisy * e4.lnormx - b1.axisx * e4.lnormy;
					e4.gnormy = e4.lnormx * b1.axisx + e4.lnormy * b1.axisy;
					e4.gprojection = b1.posx * e4.gnormx + b1.posy * e4.gnormy + e4.lprojection;
					e4.tp0 = u2.y * e4.gnormx - u2.x * e4.gnormy;
					e4.tp1 = v6.y * e4.gnormx - v6.x * e4.gnormy;
					u2 = v6;
					cx_ite11 = cx_ite11.next;
				}
				var v7 = p5.gverts.next;
				var e5 = ite2.elt;
				e5.gnormx = b1.axisy * e5.lnormx - b1.axisx * e5.lnormy;
				e5.gnormy = e5.lnormx * b1.axisx + e5.lnormy * b1.axisy;
				e5.gprojection = b1.posx * e5.gnormx + b1.posy * e5.gnormy + e5.lprojection;
				e5.tp0 = u2.y * e5.gnormx - u2.x * e5.gnormy;
				e5.tp1 = v7.y * e5.gnormx - v7.x * e5.gnormy;
			}
			var dt4 = curTOI * timeStep;
			var delta4 = dt4 - b2.sweepTime;
			if(delta4 != 0) {
				b2.sweepTime = dt4;
				b2.posx += b2.velx * delta4;
				b2.posy += b2.vely * delta4;
				if(b2.angvel != 0) {
					var dr3 = b2.sweep_angvel * delta4;
					b2.rot += dr3;
					if(dr3 * dr3 > 0.0001) {
						b2.axisx = Math.sin(b2.rot);
						b2.axisy = Math.cos(b2.rot);
					} else {
						var d24 = dr3 * dr3;
						var p6 = 1 - 0.5 * d24;
						var m3 = 1 - d24 * d24 / 8;
						var nx6 = (p6 * b2.axisx + dr3 * b2.axisy) * m3;
						b2.axisy = (p6 * b2.axisy - dr3 * b2.axisx) * m3;
						b2.axisx = nx6;
					}
				}
			}
			if(s2.type == 0) {
				s2.worldCOMx = b2.posx + (b2.axisy * s2.localCOMx - b2.axisx * s2.localCOMy);
				s2.worldCOMy = b2.posy + (s2.localCOMx * b2.axisx + s2.localCOMy * b2.axisy);
			} else {
				var p7 = s2.polygon;
				var li3 = p7.lverts.next;
				var cx_ite12 = p7.gverts.next;
				while(cx_ite12 != null) {
					var g3 = cx_ite12;
					var l3 = li3;
					li3 = li3.next;
					g3.x = b2.posx + (b2.axisy * l3.x - b2.axisx * l3.y);
					g3.y = b2.posy + (l3.x * b2.axisx + l3.y * b2.axisy);
					cx_ite12 = cx_ite12.next;
				}
				var ite3 = p7.edges.head;
				var cx_ite13 = p7.gverts.next;
				var u3 = cx_ite13;
				cx_ite13 = cx_ite13.next;
				while(cx_ite13 != null) {
					var v8 = cx_ite13;
					var e6 = ite3.elt;
					ite3 = ite3.next;
					e6.gnormx = b2.axisy * e6.lnormx - b2.axisx * e6.lnormy;
					e6.gnormy = e6.lnormx * b2.axisx + e6.lnormy * b2.axisy;
					e6.gprojection = b2.posx * e6.gnormx + b2.posy * e6.gnormy + e6.lprojection;
					e6.tp0 = u3.y * e6.gnormx - u3.x * e6.gnormy;
					e6.tp1 = v8.y * e6.gnormx - v8.x * e6.gnormy;
					u3 = v8;
					cx_ite13 = cx_ite13.next;
				}
				var v9 = p7.gverts.next;
				var e7 = ite3.elt;
				e7.gnormx = b2.axisy * e7.lnormx - b2.axisx * e7.lnormy;
				e7.gnormy = e7.lnormx * b2.axisx + e7.lnormy * b2.axisy;
				e7.gprojection = b2.posx * e7.gnormx + b2.posy * e7.gnormy + e7.lprojection;
				e7.tp0 = u3.y * e7.gnormx - u3.x * e7.gnormy;
				e7.tp1 = v9.y * e7.gnormx - v9.x * e7.gnormy;
			}
			var s13 = s1;
			var s23 = s2;
			var w11 = c1;
			var w21 = c2;
			var tmp4;
			if(s1.type == 0 && s2.type == 0) {
				var c12 = s1.circle;
				var c22 = s2.circle;
				var dist2;
				var nx7 = 0.0;
				var ny3 = 0.0;
				nx7 = c22.worldCOMx - c12.worldCOMx;
				ny3 = c22.worldCOMy - c12.worldCOMy;
				var len3 = Math.sqrt(nx7 * nx7 + ny3 * ny3);
				dist2 = len3 - (c12.radius + c22.radius);
				if(dist2 < 1e100) {
					if(len3 == 0) {
						nx7 = 1;
						ny3 = 0;
					} else {
						var t19 = 1.0 / len3;
						nx7 *= t19;
						ny3 *= t19;
					}
					var t20 = c12.radius;
					c1.x = c12.worldCOMx + nx7 * t20;
					c1.y = c12.worldCOMy + ny3 * t20;
					var t22 = -c22.radius;
					c2.x = c22.worldCOMx + nx7 * t22;
					c2.y = c22.worldCOMy + ny3 * t22;
					axis.x = nx7;
					axis.y = ny3;
				}
				tmp4 = dist2;
			} else {
				var swapped1 = false;
				if(s1.type == 0 && s2.type == 1) {
					var tmp5 = s1;
					s13 = s2;
					s23 = tmp5;
					var tmp21 = c1;
					w11 = c2;
					w21 = tmp21;
					swapped1 = true;
				}
				if(s13.type == 1 && s23.type == 0) {
					var poly1 = s13.polygon;
					var circle1 = s23.circle;
					var best2 = -1e+100;
					var a01 = null;
					var cx_ite14 = poly1.edges.head;
					while(cx_ite14 != null) {
						var a6 = cx_ite14.elt;
						var dist3 = a6.gnormx * circle1.worldCOMx + a6.gnormy * circle1.worldCOMy - a6.gprojection - circle1.radius;
						if(dist3 > 1e100) {
							best2 = dist3;
							break;
						}
						if(dist3 > 0) {
							if(dist3 > best2) {
								best2 = dist3;
								a01 = a6;
							}
						} else if(best2 < 0 && dist3 > best2) {
							best2 = dist3;
							a01 = a6;
						}
						cx_ite14 = cx_ite14.next;
					}
					if(best2 < 1e100) {
						var v02 = a01.gp0;
						var v13 = a01.gp1;
						var dt5 = circle1.worldCOMy * a01.gnormx - circle1.worldCOMx * a01.gnormy;
						if(dt5 <= v02.y * a01.gnormx - v02.x * a01.gnormy) {
							var nx8 = 0.0;
							var ny4 = 0.0;
							nx8 = circle1.worldCOMx - v02.x;
							ny4 = circle1.worldCOMy - v02.y;
							var len4 = Math.sqrt(nx8 * nx8 + ny4 * ny4);
							best2 = len4 - circle1.radius;
							if(best2 < 1e100) {
								if(len4 == 0) {
									nx8 = 1;
									ny4 = 0;
								} else {
									var t23 = 1.0 / len4;
									nx8 *= t23;
									ny4 *= t23;
								}
								w11.x = v02.x + nx8 * 0;
								w11.y = v02.y + ny4 * 0;
								var t24 = -circle1.radius;
								w21.x = circle1.worldCOMx + nx8 * t24;
								w21.y = circle1.worldCOMy + ny4 * t24;
								axis.x = nx8;
								axis.y = ny4;
							}
						} else if(dt5 >= v13.y * a01.gnormx - v13.x * a01.gnormy) {
							var nx9 = 0.0;
							var ny5 = 0.0;
							nx9 = circle1.worldCOMx - v13.x;
							ny5 = circle1.worldCOMy - v13.y;
							var len5 = Math.sqrt(nx9 * nx9 + ny5 * ny5);
							best2 = len5 - circle1.radius;
							if(best2 < 1e100) {
								if(len5 == 0) {
									nx9 = 1;
									ny5 = 0;
								} else {
									var t25 = 1.0 / len5;
									nx9 *= t25;
									ny5 *= t25;
								}
								w11.x = v13.x + nx9 * 0;
								w11.y = v13.y + ny5 * 0;
								var t26 = -circle1.radius;
								w21.x = circle1.worldCOMx + nx9 * t26;
								w21.y = circle1.worldCOMy + ny5 * t26;
								axis.x = nx9;
								axis.y = ny5;
							}
						} else {
							var t27 = -circle1.radius;
							w21.x = circle1.worldCOMx + a01.gnormx * t27;
							w21.y = circle1.worldCOMy + a01.gnormy * t27;
							var t28 = -best2;
							w11.x = w21.x + a01.gnormx * t28;
							w11.y = w21.y + a01.gnormy * t28;
							axis.x = a01.gnormx;
							axis.y = a01.gnormy;
						}
					}
					if(swapped1) {
						axis.x = -axis.x;
						axis.y = -axis.y;
					}
					tmp4 = best2;
				} else {
					var p12 = s13.polygon;
					var p22 = s23.polygon;
					var best3 = -1e+100;
					var a11 = null;
					var a21 = null;
					var besti1 = 0;
					var cx_ite15 = p12.edges.head;
					while(cx_ite15 != null) {
						var a7 = cx_ite15.elt;
						var min3 = 1e100;
						var cx_ite16 = p22.gverts.next;
						while(cx_ite16 != null) {
							var v10 = cx_ite16;
							var k3 = a7.gnormx * v10.x + a7.gnormy * v10.y;
							if(k3 < min3) {
								min3 = k3;
							}
							cx_ite16 = cx_ite16.next;
						}
						min3 -= a7.gprojection;
						if(min3 > 1e100) {
							best3 = min3;
							break;
						}
						if(min3 > 0) {
							if(min3 > best3) {
								best3 = min3;
								a11 = a7;
								besti1 = 1;
							}
						} else if(best3 < 0 && min3 > best3) {
							best3 = min3;
							a11 = a7;
							besti1 = 1;
						}
						cx_ite15 = cx_ite15.next;
					}
					if(best3 < 1e100) {
						var cx_ite17 = p22.edges.head;
						while(cx_ite17 != null) {
							var a8 = cx_ite17.elt;
							var min4 = 1e100;
							var cx_ite18 = p12.gverts.next;
							while(cx_ite18 != null) {
								var v14 = cx_ite18;
								var k4 = a8.gnormx * v14.x + a8.gnormy * v14.y;
								if(k4 < min4) {
									min4 = k4;
								}
								cx_ite18 = cx_ite18.next;
							}
							min4 -= a8.gprojection;
							if(min4 > 1e100) {
								best3 = min4;
								break;
							}
							if(min4 > 0) {
								if(min4 > best3) {
									best3 = min4;
									a21 = a8;
									besti1 = 2;
								}
							} else if(best3 < 0 && min4 > best3) {
								best3 = min4;
								a21 = a8;
								besti1 = 2;
							}
							cx_ite17 = cx_ite17.next;
						}
						if(best3 < 1e100) {
							var q21;
							var ax1;
							if(besti1 == 1) {
								q21 = p22;
								ax1 = a11;
							} else {
								q21 = p12;
								ax1 = a21;
								var tmp6 = w11;
								w11 = w21;
								w21 = tmp6;
								swapped1 = !swapped1;
							}
							var ay1 = null;
							var min5 = 1e100;
							var cx_ite19 = q21.edges.head;
							while(cx_ite19 != null) {
								var a9 = cx_ite19.elt;
								var k5 = ax1.gnormx * a9.gnormx + ax1.gnormy * a9.gnormy;
								if(k5 < min5) {
									min5 = k5;
									ay1 = a9;
								}
								cx_ite19 = cx_ite19.next;
							}
							if(swapped1) {
								axis.x = -ax1.gnormx;
								axis.y = -ax1.gnormy;
							} else {
								axis.x = ax1.gnormx;
								axis.y = ax1.gnormy;
							}
							if(best3 >= 0) {
								var v03 = ax1.gp0;
								var v15 = ax1.gp1;
								var q01 = ay1.gp0;
								var q11 = ay1.gp1;
								var vx1 = 0.0;
								var vy1 = 0.0;
								var qx1 = 0.0;
								var qy1 = 0.0;
								vx1 = v15.x - v03.x;
								vy1 = v15.y - v03.y;
								qx1 = q11.x - q01.x;
								qy1 = q11.y - q01.y;
								var vdot1 = 1 / (vx1 * vx1 + vy1 * vy1);
								var qdot1 = 1 / (qx1 * qx1 + qy1 * qy1);
								var t110 = -(vx1 * (v03.x - q01.x) + vy1 * (v03.y - q01.y)) * vdot1;
								var t29 = -(vx1 * (v03.x - q11.x) + vy1 * (v03.y - q11.y)) * vdot1;
								var s14 = -(qx1 * (q01.x - v03.x) + qy1 * (q01.y - v03.y)) * qdot1;
								var s24 = -(qx1 * (q01.x - v15.x) + qy1 * (q01.y - v15.y)) * qdot1;
								if(t110 < 0) {
									t110 = 0;
								} else if(t110 > 1) {
									t110 = 1;
								}
								if(t29 < 0) {
									t29 = 0;
								} else if(t29 > 1) {
									t29 = 1;
								}
								if(s14 < 0) {
									s14 = 0;
								} else if(s14 > 1) {
									s14 = 1;
								}
								if(s24 < 0) {
									s24 = 0;
								} else if(s24 > 1) {
									s24 = 1;
								}
								var f1x1 = 0.0;
								var f1y1 = 0.0;
								var t30 = t110;
								f1x1 = v03.x + vx1 * t30;
								f1y1 = v03.y + vy1 * t30;
								var f2x1 = 0.0;
								var f2y1 = 0.0;
								var t31 = t29;
								f2x1 = v03.x + vx1 * t31;
								f2y1 = v03.y + vy1 * t31;
								var g1x1 = 0.0;
								var g1y1 = 0.0;
								var t32 = s14;
								g1x1 = q01.x + qx1 * t32;
								g1y1 = q01.y + qy1 * t32;
								var g2x1 = 0.0;
								var g2y1 = 0.0;
								var t33 = s24;
								g2x1 = q01.x + qx1 * t33;
								g2y1 = q01.y + qy1 * t33;
								var bx4 = q01.x;
								var by4 = q01.y;
								var dx4 = 0.0;
								var dy4 = 0.0;
								dx4 = f1x1 - bx4;
								dy4 = f1y1 - by4;
								var d12 = dx4 * dx4 + dy4 * dy4;
								var bx5 = q11.x;
								var by5 = q11.y;
								var dx5 = 0.0;
								var dy5 = 0.0;
								dx5 = f2x1 - bx5;
								dy5 = f2y1 - by5;
								var d25 = dx5 * dx5 + dy5 * dy5;
								var bx6 = v03.x;
								var by6 = v03.y;
								var dx6 = 0.0;
								var dy6 = 0.0;
								dx6 = g1x1 - bx6;
								dy6 = g1y1 - by6;
								var e12 = dx6 * dx6 + dy6 * dy6;
								var bx7 = v15.x;
								var by7 = v15.y;
								var dx7 = 0.0;
								var dy7 = 0.0;
								dx7 = g2x1 - bx7;
								dy7 = g2y1 - by7;
								var e22 = dx7 * dx7 + dy7 * dy7;
								var minfx1 = 0.0;
								var minfy1 = 0.0;
								var minq1 = null;
								if(d12 < d25) {
									minfx1 = f1x1;
									minfy1 = f1y1;
									minq1 = q01;
								} else {
									minfx1 = f2x1;
									minfy1 = f2y1;
									minq1 = q11;
									d12 = d25;
								}
								var mingx1 = 0.0;
								var mingy1 = 0.0;
								var minv1 = null;
								if(e12 < e22) {
									mingx1 = g1x1;
									mingy1 = g1y1;
									minv1 = v03;
								} else {
									mingx1 = g2x1;
									mingy1 = g2y1;
									minv1 = v15;
									e12 = e22;
								}
								if(d12 < e12) {
									w11.x = minfx1;
									w11.y = minfy1;
									w21.x = minq1.x;
									w21.y = minq1.y;
									best3 = Math.sqrt(d12);
								} else {
									w21.x = mingx1;
									w21.y = mingy1;
									w11.x = minv1.x;
									w11.y = minv1.y;
									best3 = Math.sqrt(e12);
								}
								if(best3 != 0) {
									axis.x = w21.x - w11.x;
									axis.y = w21.y - w11.y;
									var t34 = 1.0 / best3;
									axis.x *= t34;
									axis.y *= t34;
									if(swapped1) {
										axis.x = -axis.x;
										axis.y = -axis.y;
									}
								}
								tmp4 = best3;
							} else {
								var c0x1 = 0.0;
								var c0y1 = 0.0;
								c0x1 = ay1.gp0.x;
								c0y1 = ay1.gp0.y;
								var c1x1 = 0.0;
								var c1y1 = 0.0;
								c1x1 = ay1.gp1.x;
								c1y1 = ay1.gp1.y;
								var dvx1 = 0.0;
								var dvy1 = 0.0;
								dvx1 = c1x1 - c0x1;
								dvy1 = c1y1 - c0y1;
								var d01 = ax1.gnormy * c0x1 - ax1.gnormx * c0y1;
								var d13 = ax1.gnormy * c1x1 - ax1.gnormx * c1y1;
								var den1 = 1 / (d13 - d01);
								var t35 = (-ax1.tp1 - d01) * den1;
								if(t35 > Config.epsilon) {
									c0x1 += dvx1 * t35;
									c0y1 += dvy1 * t35;
								}
								var t36 = (-ax1.tp0 - d13) * den1;
								if(t36 < -Config.epsilon) {
									c1x1 += dvx1 * t36;
									c1y1 += dvy1 * t36;
								}
								var c0d1 = c0x1 * ax1.gnormx + c0y1 * ax1.gnormy - ax1.gprojection;
								var c1d1 = c1x1 * ax1.gnormx + c1y1 * ax1.gnormy - ax1.gprojection;
								if(c0d1 < c1d1) {
									w21.x = c0x1;
									w21.y = c0y1;
									var t37 = -c0d1;
									w11.x = w21.x + ax1.gnormx * t37;
									w11.y = w21.y + ax1.gnormy * t37;
									tmp4 = c0d1;
								} else {
									w21.x = c1x1;
									w21.y = c1y1;
									var t38 = -c1d1;
									w11.x = w21.x + ax1.gnormx * t38;
									w11.y = w21.y + ax1.gnormy * t38;
									tmp4 = c1d1;
								}
							}
						} else {
							tmp4 = 1e100;
						}
					} else {
						tmp4 = 1e100;
					}
				}
			}
			var sep1 = tmp4 + negRadius;
			var dot1 = deltax * axis.x + deltay * axis.y;
			if(sep1 < Config.distanceThresholdCCD) {
				if(userAPI) {
					break;
				}
				var d1x1 = 0.0;
				var d1y1 = 0.0;
				d1x1 = c1.x - b1.posx;
				d1y1 = c1.y - b1.posy;
				var d2x1 = 0.0;
				var d2y1 = 0.0;
				d2x1 = c2.x - b2.posx;
				d2y1 = c2.y - b2.posy;
				var proj1 = dot1 - b1.sweep_angvel * (axis.y * d1x1 - axis.x * d1y1) + b2.sweep_angvel * (axis.y * d2x1 - axis.x * d2y1);
				if(proj1 > 0) {
					toi.slipped = true;
				}
				if(proj1 <= 0 || sep1 < Config.distanceThresholdCCD * 0.5) {
					break;
				}
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep > negRadius) {
				toi.failed = true;
			}
			break;
		}
	}
	toi.toi = curTOI;
};
ZPP_SweepDistance.staticSweep = function(toi,timeStep,lowerBound,negRadius) {
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = -b1.velx;
	deltay = -b1.vely;
	var ang1 = b1.sweep_angvel;
	if(ang1 < 0) {
		ang1 = -ang1;
	}
	var angBias = s1.sweepCoef * ang1;
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		var dt = curTOI * timeStep;
		var delta = dt - b1.sweepTime;
		if(delta != 0) {
			b1.sweepTime = dt;
			b1.posx += b1.velx * delta;
			b1.posy += b1.vely * delta;
			if(b1.angvel != 0) {
				var dr = b1.sweep_angvel * delta;
				b1.rot += dr;
				if(dr * dr > 0.0001) {
					b1.axisx = Math.sin(b1.rot);
					b1.axisy = Math.cos(b1.rot);
				} else {
					var d2 = dr * dr;
					var p = 1 - 0.5 * d2;
					var m = 1 - d2 * d2 / 8;
					var nx = (p * b1.axisx + dr * b1.axisy) * m;
					b1.axisy = (p * b1.axisy - dr * b1.axisx) * m;
					b1.axisx = nx;
				}
			}
		}
		if(s1.type == 0) {
			s1.worldCOMx = b1.posx + (b1.axisy * s1.localCOMx - b1.axisx * s1.localCOMy);
			s1.worldCOMy = b1.posy + (s1.localCOMx * b1.axisx + s1.localCOMy * b1.axisy);
		} else {
			var p1 = s1.polygon;
			var li = p1.lverts.next;
			var cx_ite = p1.gverts.next;
			while(cx_ite != null) {
				var g = cx_ite;
				var l = li;
				li = li.next;
				g.x = b1.posx + (b1.axisy * l.x - b1.axisx * l.y);
				g.y = b1.posy + (l.x * b1.axisx + l.y * b1.axisy);
				cx_ite = cx_ite.next;
			}
			var ite = p1.edges.head;
			var cx_ite1 = p1.gverts.next;
			var u = cx_ite1;
			cx_ite1 = cx_ite1.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var e = ite.elt;
				ite = ite.next;
				e.gnormx = b1.axisy * e.lnormx - b1.axisx * e.lnormy;
				e.gnormy = e.lnormx * b1.axisx + e.lnormy * b1.axisy;
				e.gprojection = b1.posx * e.gnormx + b1.posy * e.gnormy + e.lprojection;
				e.tp0 = u.y * e.gnormx - u.x * e.gnormy;
				e.tp1 = v.y * e.gnormx - v.x * e.gnormy;
				u = v;
				cx_ite1 = cx_ite1.next;
			}
			var v1 = p1.gverts.next;
			var e1 = ite.elt;
			e1.gnormx = b1.axisy * e1.lnormx - b1.axisx * e1.lnormy;
			e1.gnormy = e1.lnormx * b1.axisx + e1.lnormy * b1.axisy;
			e1.gprojection = b1.posx * e1.gnormx + b1.posy * e1.gnormy + e1.lprojection;
			e1.tp0 = u.y * e1.gnormx - u.x * e1.gnormy;
			e1.tp1 = v1.y * e1.gnormx - v1.x * e1.gnormy;
		}
		var s11 = s1;
		var s21 = s2;
		var w1 = c1;
		var w2 = c2;
		var tmp;
		if(s1.type == 0 && s2.type == 0) {
			var c11 = s1.circle;
			var c21 = s2.circle;
			var dist;
			var nx1 = 0.0;
			var ny = 0.0;
			nx1 = c21.worldCOMx - c11.worldCOMx;
			ny = c21.worldCOMy - c11.worldCOMy;
			var len = Math.sqrt(nx1 * nx1 + ny * ny);
			dist = len - (c11.radius + c21.radius);
			if(dist < 1e100) {
				if(len == 0) {
					nx1 = 1;
					ny = 0;
				} else {
					var t = 1.0 / len;
					nx1 *= t;
					ny *= t;
				}
				var t1 = c11.radius;
				c1.x = c11.worldCOMx + nx1 * t1;
				c1.y = c11.worldCOMy + ny * t1;
				var t2 = -c21.radius;
				c2.x = c21.worldCOMx + nx1 * t2;
				c2.y = c21.worldCOMy + ny * t2;
				axis.x = nx1;
				axis.y = ny;
			}
			tmp = dist;
		} else {
			var swapped = false;
			if(s1.type == 0 && s2.type == 1) {
				var tmp1 = s1;
				s11 = s2;
				s21 = tmp1;
				var tmp2 = c1;
				w1 = c2;
				w2 = tmp2;
				swapped = true;
			}
			if(s11.type == 1 && s21.type == 0) {
				var poly = s11.polygon;
				var circle = s21.circle;
				var best = -1e+100;
				var a0 = null;
				var cx_ite2 = poly.edges.head;
				while(cx_ite2 != null) {
					var a = cx_ite2.elt;
					var dist1 = a.gnormx * circle.worldCOMx + a.gnormy * circle.worldCOMy - a.gprojection - circle.radius;
					if(dist1 > 1e100) {
						best = dist1;
						break;
					}
					if(dist1 > 0) {
						if(dist1 > best) {
							best = dist1;
							a0 = a;
						}
					} else if(best < 0 && dist1 > best) {
						best = dist1;
						a0 = a;
					}
					cx_ite2 = cx_ite2.next;
				}
				if(best < 1e100) {
					var v0 = a0.gp0;
					var v11 = a0.gp1;
					var dt1 = circle.worldCOMy * a0.gnormx - circle.worldCOMx * a0.gnormy;
					if(dt1 <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
						var nx2 = 0.0;
						var ny1 = 0.0;
						nx2 = circle.worldCOMx - v0.x;
						ny1 = circle.worldCOMy - v0.y;
						var len1 = Math.sqrt(nx2 * nx2 + ny1 * ny1);
						best = len1 - circle.radius;
						if(best < 1e100) {
							if(len1 == 0) {
								nx2 = 1;
								ny1 = 0;
							} else {
								var t3 = 1.0 / len1;
								nx2 *= t3;
								ny1 *= t3;
							}
							w1.x = v0.x + nx2 * 0;
							w1.y = v0.y + ny1 * 0;
							var t4 = -circle.radius;
							w2.x = circle.worldCOMx + nx2 * t4;
							w2.y = circle.worldCOMy + ny1 * t4;
							axis.x = nx2;
							axis.y = ny1;
						}
					} else if(dt1 >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
						var nx3 = 0.0;
						var ny2 = 0.0;
						nx3 = circle.worldCOMx - v11.x;
						ny2 = circle.worldCOMy - v11.y;
						var len2 = Math.sqrt(nx3 * nx3 + ny2 * ny2);
						best = len2 - circle.radius;
						if(best < 1e100) {
							if(len2 == 0) {
								nx3 = 1;
								ny2 = 0;
							} else {
								var t5 = 1.0 / len2;
								nx3 *= t5;
								ny2 *= t5;
							}
							w1.x = v11.x + nx3 * 0;
							w1.y = v11.y + ny2 * 0;
							var t6 = -circle.radius;
							w2.x = circle.worldCOMx + nx3 * t6;
							w2.y = circle.worldCOMy + ny2 * t6;
							axis.x = nx3;
							axis.y = ny2;
						}
					} else {
						var t7 = -circle.radius;
						w2.x = circle.worldCOMx + a0.gnormx * t7;
						w2.y = circle.worldCOMy + a0.gnormy * t7;
						var t8 = -best;
						w1.x = w2.x + a0.gnormx * t8;
						w1.y = w2.y + a0.gnormy * t8;
						axis.x = a0.gnormx;
						axis.y = a0.gnormy;
					}
				}
				if(swapped) {
					axis.x = -axis.x;
					axis.y = -axis.y;
				}
				tmp = best;
			} else {
				var p11 = s11.polygon;
				var p2 = s21.polygon;
				var best1 = -1e+100;
				var a1 = null;
				var a2 = null;
				var besti = 0;
				var cx_ite3 = p11.edges.head;
				while(cx_ite3 != null) {
					var a3 = cx_ite3.elt;
					var min = 1e100;
					var cx_ite4 = p2.gverts.next;
					while(cx_ite4 != null) {
						var v2 = cx_ite4;
						var k = a3.gnormx * v2.x + a3.gnormy * v2.y;
						if(k < min) {
							min = k;
						}
						cx_ite4 = cx_ite4.next;
					}
					min -= a3.gprojection;
					if(min > 1e100) {
						best1 = min;
						break;
					}
					if(min > 0) {
						if(min > best1) {
							best1 = min;
							a1 = a3;
							besti = 1;
						}
					} else if(best1 < 0 && min > best1) {
						best1 = min;
						a1 = a3;
						besti = 1;
					}
					cx_ite3 = cx_ite3.next;
				}
				if(best1 < 1e100) {
					var cx_ite5 = p2.edges.head;
					while(cx_ite5 != null) {
						var a4 = cx_ite5.elt;
						var min1 = 1e100;
						var cx_ite6 = p11.gverts.next;
						while(cx_ite6 != null) {
							var v3 = cx_ite6;
							var k1 = a4.gnormx * v3.x + a4.gnormy * v3.y;
							if(k1 < min1) {
								min1 = k1;
							}
							cx_ite6 = cx_ite6.next;
						}
						min1 -= a4.gprojection;
						if(min1 > 1e100) {
							best1 = min1;
							break;
						}
						if(min1 > 0) {
							if(min1 > best1) {
								best1 = min1;
								a2 = a4;
								besti = 2;
							}
						} else if(best1 < 0 && min1 > best1) {
							best1 = min1;
							a2 = a4;
							besti = 2;
						}
						cx_ite5 = cx_ite5.next;
					}
					if(best1 < 1e100) {
						var q2;
						var ax;
						if(besti == 1) {
							q2 = p2;
							ax = a1;
						} else {
							q2 = p11;
							ax = a2;
							var tmp3 = w1;
							w1 = w2;
							w2 = tmp3;
							swapped = !swapped;
						}
						var ay = null;
						var min2 = 1e100;
						var cx_ite7 = q2.edges.head;
						while(cx_ite7 != null) {
							var a5 = cx_ite7.elt;
							var k2 = ax.gnormx * a5.gnormx + ax.gnormy * a5.gnormy;
							if(k2 < min2) {
								min2 = k2;
								ay = a5;
							}
							cx_ite7 = cx_ite7.next;
						}
						if(swapped) {
							axis.x = -ax.gnormx;
							axis.y = -ax.gnormy;
						} else {
							axis.x = ax.gnormx;
							axis.y = ax.gnormy;
						}
						if(best1 >= 0) {
							var v01 = ax.gp0;
							var v12 = ax.gp1;
							var q0 = ay.gp0;
							var q1 = ay.gp1;
							var vx = 0.0;
							var vy = 0.0;
							var qx = 0.0;
							var qy = 0.0;
							vx = v12.x - v01.x;
							vy = v12.y - v01.y;
							qx = q1.x - q0.x;
							qy = q1.y - q0.y;
							var vdot = 1 / (vx * vx + vy * vy);
							var qdot = 1 / (qx * qx + qy * qy);
							var t11 = -(vx * (v01.x - q0.x) + vy * (v01.y - q0.y)) * vdot;
							var t21 = -(vx * (v01.x - q1.x) + vy * (v01.y - q1.y)) * vdot;
							var s12 = -(qx * (q0.x - v01.x) + qy * (q0.y - v01.y)) * qdot;
							var s22 = -(qx * (q0.x - v12.x) + qy * (q0.y - v12.y)) * qdot;
							if(t11 < 0) {
								t11 = 0;
							} else if(t11 > 1) {
								t11 = 1;
							}
							if(t21 < 0) {
								t21 = 0;
							} else if(t21 > 1) {
								t21 = 1;
							}
							if(s12 < 0) {
								s12 = 0;
							} else if(s12 > 1) {
								s12 = 1;
							}
							if(s22 < 0) {
								s22 = 0;
							} else if(s22 > 1) {
								s22 = 1;
							}
							var f1x = 0.0;
							var f1y = 0.0;
							var t9 = t11;
							f1x = v01.x + vx * t9;
							f1y = v01.y + vy * t9;
							var f2x = 0.0;
							var f2y = 0.0;
							var t10 = t21;
							f2x = v01.x + vx * t10;
							f2y = v01.y + vy * t10;
							var g1x = 0.0;
							var g1y = 0.0;
							var t12 = s12;
							g1x = q0.x + qx * t12;
							g1y = q0.y + qy * t12;
							var g2x = 0.0;
							var g2y = 0.0;
							var t13 = s22;
							g2x = q0.x + qx * t13;
							g2y = q0.y + qy * t13;
							var bx = q0.x;
							var by = q0.y;
							var dx = 0.0;
							var dy = 0.0;
							dx = f1x - bx;
							dy = f1y - by;
							var d1 = dx * dx + dy * dy;
							var bx1 = q1.x;
							var by1 = q1.y;
							var dx1 = 0.0;
							var dy1 = 0.0;
							dx1 = f2x - bx1;
							dy1 = f2y - by1;
							var d21 = dx1 * dx1 + dy1 * dy1;
							var bx2 = v01.x;
							var by2 = v01.y;
							var dx2 = 0.0;
							var dy2 = 0.0;
							dx2 = g1x - bx2;
							dy2 = g1y - by2;
							var e11 = dx2 * dx2 + dy2 * dy2;
							var bx3 = v12.x;
							var by3 = v12.y;
							var dx3 = 0.0;
							var dy3 = 0.0;
							dx3 = g2x - bx3;
							dy3 = g2y - by3;
							var e2 = dx3 * dx3 + dy3 * dy3;
							var minfx = 0.0;
							var minfy = 0.0;
							var minq = null;
							if(d1 < d21) {
								minfx = f1x;
								minfy = f1y;
								minq = q0;
							} else {
								minfx = f2x;
								minfy = f2y;
								minq = q1;
								d1 = d21;
							}
							var mingx = 0.0;
							var mingy = 0.0;
							var minv = null;
							if(e11 < e2) {
								mingx = g1x;
								mingy = g1y;
								minv = v01;
							} else {
								mingx = g2x;
								mingy = g2y;
								minv = v12;
								e11 = e2;
							}
							if(d1 < e11) {
								w1.x = minfx;
								w1.y = minfy;
								w2.x = minq.x;
								w2.y = minq.y;
								best1 = Math.sqrt(d1);
							} else {
								w2.x = mingx;
								w2.y = mingy;
								w1.x = minv.x;
								w1.y = minv.y;
								best1 = Math.sqrt(e11);
							}
							if(best1 != 0) {
								axis.x = w2.x - w1.x;
								axis.y = w2.y - w1.y;
								var t14 = 1.0 / best1;
								axis.x *= t14;
								axis.y *= t14;
								if(swapped) {
									axis.x = -axis.x;
									axis.y = -axis.y;
								}
							}
							tmp = best1;
						} else {
							var c0x = 0.0;
							var c0y = 0.0;
							c0x = ay.gp0.x;
							c0y = ay.gp0.y;
							var c1x = 0.0;
							var c1y = 0.0;
							c1x = ay.gp1.x;
							c1y = ay.gp1.y;
							var dvx = 0.0;
							var dvy = 0.0;
							dvx = c1x - c0x;
							dvy = c1y - c0y;
							var d0 = ax.gnormy * c0x - ax.gnormx * c0y;
							var d11 = ax.gnormy * c1x - ax.gnormx * c1y;
							var den = 1 / (d11 - d0);
							var t15 = (-ax.tp1 - d0) * den;
							if(t15 > Config.epsilon) {
								c0x += dvx * t15;
								c0y += dvy * t15;
							}
							var t16 = (-ax.tp0 - d11) * den;
							if(t16 < -Config.epsilon) {
								c1x += dvx * t16;
								c1y += dvy * t16;
							}
							var c0d = c0x * ax.gnormx + c0y * ax.gnormy - ax.gprojection;
							var c1d = c1x * ax.gnormx + c1y * ax.gnormy - ax.gprojection;
							if(c0d < c1d) {
								w2.x = c0x;
								w2.y = c0y;
								var t17 = -c0d;
								w1.x = w2.x + ax.gnormx * t17;
								w1.y = w2.y + ax.gnormy * t17;
								tmp = c0d;
							} else {
								w2.x = c1x;
								w2.y = c1y;
								var t18 = -c1d;
								w1.x = w2.x + ax.gnormx * t18;
								w1.y = w2.y + ax.gnormy * t18;
								tmp = c1d;
							}
						}
					} else {
						tmp = 1e100;
					}
				} else {
					tmp = 1e100;
				}
			}
		}
		var sep = tmp + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep < Config.distanceThresholdCCD) {
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y);
			if(proj > 0) {
				toi.slipped = true;
			}
			if(proj <= 0 || sep < Config.distanceThresholdCCD * 0.5) {
				break;
			}
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta1 = sep / denom;
		if(delta1 < 1e-6) {
			delta1 = 1e-6;
		}
		curTOI += delta1;
		if(curTOI >= 1) {
			curTOI = 1;
			var dt2 = curTOI * timeStep;
			var delta2 = dt2 - b1.sweepTime;
			if(delta2 != 0) {
				b1.sweepTime = dt2;
				b1.posx += b1.velx * delta2;
				b1.posy += b1.vely * delta2;
				if(b1.angvel != 0) {
					var dr1 = b1.sweep_angvel * delta2;
					b1.rot += dr1;
					if(dr1 * dr1 > 0.0001) {
						b1.axisx = Math.sin(b1.rot);
						b1.axisy = Math.cos(b1.rot);
					} else {
						var d22 = dr1 * dr1;
						var p3 = 1 - 0.5 * d22;
						var m1 = 1 - d22 * d22 / 8;
						var nx4 = (p3 * b1.axisx + dr1 * b1.axisy) * m1;
						b1.axisy = (p3 * b1.axisy - dr1 * b1.axisx) * m1;
						b1.axisx = nx4;
					}
				}
			}
			if(s1.type == 0) {
				s1.worldCOMx = b1.posx + (b1.axisy * s1.localCOMx - b1.axisx * s1.localCOMy);
				s1.worldCOMy = b1.posy + (s1.localCOMx * b1.axisx + s1.localCOMy * b1.axisy);
			} else {
				var p4 = s1.polygon;
				var li1 = p4.lverts.next;
				var cx_ite8 = p4.gverts.next;
				while(cx_ite8 != null) {
					var g1 = cx_ite8;
					var l1 = li1;
					li1 = li1.next;
					g1.x = b1.posx + (b1.axisy * l1.x - b1.axisx * l1.y);
					g1.y = b1.posy + (l1.x * b1.axisx + l1.y * b1.axisy);
					cx_ite8 = cx_ite8.next;
				}
				var ite1 = p4.edges.head;
				var cx_ite9 = p4.gverts.next;
				var u1 = cx_ite9;
				cx_ite9 = cx_ite9.next;
				while(cx_ite9 != null) {
					var v4 = cx_ite9;
					var e3 = ite1.elt;
					ite1 = ite1.next;
					e3.gnormx = b1.axisy * e3.lnormx - b1.axisx * e3.lnormy;
					e3.gnormy = e3.lnormx * b1.axisx + e3.lnormy * b1.axisy;
					e3.gprojection = b1.posx * e3.gnormx + b1.posy * e3.gnormy + e3.lprojection;
					e3.tp0 = u1.y * e3.gnormx - u1.x * e3.gnormy;
					e3.tp1 = v4.y * e3.gnormx - v4.x * e3.gnormy;
					u1 = v4;
					cx_ite9 = cx_ite9.next;
				}
				var v5 = p4.gverts.next;
				var e4 = ite1.elt;
				e4.gnormx = b1.axisy * e4.lnormx - b1.axisx * e4.lnormy;
				e4.gnormy = e4.lnormx * b1.axisx + e4.lnormy * b1.axisy;
				e4.gprojection = b1.posx * e4.gnormx + b1.posy * e4.gnormy + e4.lprojection;
				e4.tp0 = u1.y * e4.gnormx - u1.x * e4.gnormy;
				e4.tp1 = v5.y * e4.gnormx - v5.x * e4.gnormy;
			}
			var s13 = s1;
			var s23 = s2;
			var w11 = c1;
			var w21 = c2;
			var tmp4;
			if(s1.type == 0 && s2.type == 0) {
				var c12 = s1.circle;
				var c22 = s2.circle;
				var dist2;
				var nx5 = 0.0;
				var ny3 = 0.0;
				nx5 = c22.worldCOMx - c12.worldCOMx;
				ny3 = c22.worldCOMy - c12.worldCOMy;
				var len3 = Math.sqrt(nx5 * nx5 + ny3 * ny3);
				dist2 = len3 - (c12.radius + c22.radius);
				if(dist2 < 1e100) {
					if(len3 == 0) {
						nx5 = 1;
						ny3 = 0;
					} else {
						var t19 = 1.0 / len3;
						nx5 *= t19;
						ny3 *= t19;
					}
					var t20 = c12.radius;
					c1.x = c12.worldCOMx + nx5 * t20;
					c1.y = c12.worldCOMy + ny3 * t20;
					var t22 = -c22.radius;
					c2.x = c22.worldCOMx + nx5 * t22;
					c2.y = c22.worldCOMy + ny3 * t22;
					axis.x = nx5;
					axis.y = ny3;
				}
				tmp4 = dist2;
			} else {
				var swapped1 = false;
				if(s1.type == 0 && s2.type == 1) {
					var tmp5 = s1;
					s13 = s2;
					s23 = tmp5;
					var tmp21 = c1;
					w11 = c2;
					w21 = tmp21;
					swapped1 = true;
				}
				if(s13.type == 1 && s23.type == 0) {
					var poly1 = s13.polygon;
					var circle1 = s23.circle;
					var best2 = -1e+100;
					var a01 = null;
					var cx_ite10 = poly1.edges.head;
					while(cx_ite10 != null) {
						var a6 = cx_ite10.elt;
						var dist3 = a6.gnormx * circle1.worldCOMx + a6.gnormy * circle1.worldCOMy - a6.gprojection - circle1.radius;
						if(dist3 > 1e100) {
							best2 = dist3;
							break;
						}
						if(dist3 > 0) {
							if(dist3 > best2) {
								best2 = dist3;
								a01 = a6;
							}
						} else if(best2 < 0 && dist3 > best2) {
							best2 = dist3;
							a01 = a6;
						}
						cx_ite10 = cx_ite10.next;
					}
					if(best2 < 1e100) {
						var v02 = a01.gp0;
						var v13 = a01.gp1;
						var dt3 = circle1.worldCOMy * a01.gnormx - circle1.worldCOMx * a01.gnormy;
						if(dt3 <= v02.y * a01.gnormx - v02.x * a01.gnormy) {
							var nx6 = 0.0;
							var ny4 = 0.0;
							nx6 = circle1.worldCOMx - v02.x;
							ny4 = circle1.worldCOMy - v02.y;
							var len4 = Math.sqrt(nx6 * nx6 + ny4 * ny4);
							best2 = len4 - circle1.radius;
							if(best2 < 1e100) {
								if(len4 == 0) {
									nx6 = 1;
									ny4 = 0;
								} else {
									var t23 = 1.0 / len4;
									nx6 *= t23;
									ny4 *= t23;
								}
								w11.x = v02.x + nx6 * 0;
								w11.y = v02.y + ny4 * 0;
								var t24 = -circle1.radius;
								w21.x = circle1.worldCOMx + nx6 * t24;
								w21.y = circle1.worldCOMy + ny4 * t24;
								axis.x = nx6;
								axis.y = ny4;
							}
						} else if(dt3 >= v13.y * a01.gnormx - v13.x * a01.gnormy) {
							var nx7 = 0.0;
							var ny5 = 0.0;
							nx7 = circle1.worldCOMx - v13.x;
							ny5 = circle1.worldCOMy - v13.y;
							var len5 = Math.sqrt(nx7 * nx7 + ny5 * ny5);
							best2 = len5 - circle1.radius;
							if(best2 < 1e100) {
								if(len5 == 0) {
									nx7 = 1;
									ny5 = 0;
								} else {
									var t25 = 1.0 / len5;
									nx7 *= t25;
									ny5 *= t25;
								}
								w11.x = v13.x + nx7 * 0;
								w11.y = v13.y + ny5 * 0;
								var t26 = -circle1.radius;
								w21.x = circle1.worldCOMx + nx7 * t26;
								w21.y = circle1.worldCOMy + ny5 * t26;
								axis.x = nx7;
								axis.y = ny5;
							}
						} else {
							var t27 = -circle1.radius;
							w21.x = circle1.worldCOMx + a01.gnormx * t27;
							w21.y = circle1.worldCOMy + a01.gnormy * t27;
							var t28 = -best2;
							w11.x = w21.x + a01.gnormx * t28;
							w11.y = w21.y + a01.gnormy * t28;
							axis.x = a01.gnormx;
							axis.y = a01.gnormy;
						}
					}
					if(swapped1) {
						axis.x = -axis.x;
						axis.y = -axis.y;
					}
					tmp4 = best2;
				} else {
					var p12 = s13.polygon;
					var p21 = s23.polygon;
					var best3 = -1e+100;
					var a11 = null;
					var a21 = null;
					var besti1 = 0;
					var cx_ite11 = p12.edges.head;
					while(cx_ite11 != null) {
						var a7 = cx_ite11.elt;
						var min3 = 1e100;
						var cx_ite12 = p21.gverts.next;
						while(cx_ite12 != null) {
							var v6 = cx_ite12;
							var k3 = a7.gnormx * v6.x + a7.gnormy * v6.y;
							if(k3 < min3) {
								min3 = k3;
							}
							cx_ite12 = cx_ite12.next;
						}
						min3 -= a7.gprojection;
						if(min3 > 1e100) {
							best3 = min3;
							break;
						}
						if(min3 > 0) {
							if(min3 > best3) {
								best3 = min3;
								a11 = a7;
								besti1 = 1;
							}
						} else if(best3 < 0 && min3 > best3) {
							best3 = min3;
							a11 = a7;
							besti1 = 1;
						}
						cx_ite11 = cx_ite11.next;
					}
					if(best3 < 1e100) {
						var cx_ite13 = p21.edges.head;
						while(cx_ite13 != null) {
							var a8 = cx_ite13.elt;
							var min4 = 1e100;
							var cx_ite14 = p12.gverts.next;
							while(cx_ite14 != null) {
								var v7 = cx_ite14;
								var k4 = a8.gnormx * v7.x + a8.gnormy * v7.y;
								if(k4 < min4) {
									min4 = k4;
								}
								cx_ite14 = cx_ite14.next;
							}
							min4 -= a8.gprojection;
							if(min4 > 1e100) {
								best3 = min4;
								break;
							}
							if(min4 > 0) {
								if(min4 > best3) {
									best3 = min4;
									a21 = a8;
									besti1 = 2;
								}
							} else if(best3 < 0 && min4 > best3) {
								best3 = min4;
								a21 = a8;
								besti1 = 2;
							}
							cx_ite13 = cx_ite13.next;
						}
						if(best3 < 1e100) {
							var q21;
							var ax1;
							if(besti1 == 1) {
								q21 = p21;
								ax1 = a11;
							} else {
								q21 = p12;
								ax1 = a21;
								var tmp6 = w11;
								w11 = w21;
								w21 = tmp6;
								swapped1 = !swapped1;
							}
							var ay1 = null;
							var min5 = 1e100;
							var cx_ite15 = q21.edges.head;
							while(cx_ite15 != null) {
								var a9 = cx_ite15.elt;
								var k5 = ax1.gnormx * a9.gnormx + ax1.gnormy * a9.gnormy;
								if(k5 < min5) {
									min5 = k5;
									ay1 = a9;
								}
								cx_ite15 = cx_ite15.next;
							}
							if(swapped1) {
								axis.x = -ax1.gnormx;
								axis.y = -ax1.gnormy;
							} else {
								axis.x = ax1.gnormx;
								axis.y = ax1.gnormy;
							}
							if(best3 >= 0) {
								var v03 = ax1.gp0;
								var v14 = ax1.gp1;
								var q01 = ay1.gp0;
								var q11 = ay1.gp1;
								var vx1 = 0.0;
								var vy1 = 0.0;
								var qx1 = 0.0;
								var qy1 = 0.0;
								vx1 = v14.x - v03.x;
								vy1 = v14.y - v03.y;
								qx1 = q11.x - q01.x;
								qy1 = q11.y - q01.y;
								var vdot1 = 1 / (vx1 * vx1 + vy1 * vy1);
								var qdot1 = 1 / (qx1 * qx1 + qy1 * qy1);
								var t110 = -(vx1 * (v03.x - q01.x) + vy1 * (v03.y - q01.y)) * vdot1;
								var t29 = -(vx1 * (v03.x - q11.x) + vy1 * (v03.y - q11.y)) * vdot1;
								var s14 = -(qx1 * (q01.x - v03.x) + qy1 * (q01.y - v03.y)) * qdot1;
								var s24 = -(qx1 * (q01.x - v14.x) + qy1 * (q01.y - v14.y)) * qdot1;
								if(t110 < 0) {
									t110 = 0;
								} else if(t110 > 1) {
									t110 = 1;
								}
								if(t29 < 0) {
									t29 = 0;
								} else if(t29 > 1) {
									t29 = 1;
								}
								if(s14 < 0) {
									s14 = 0;
								} else if(s14 > 1) {
									s14 = 1;
								}
								if(s24 < 0) {
									s24 = 0;
								} else if(s24 > 1) {
									s24 = 1;
								}
								var f1x1 = 0.0;
								var f1y1 = 0.0;
								var t30 = t110;
								f1x1 = v03.x + vx1 * t30;
								f1y1 = v03.y + vy1 * t30;
								var f2x1 = 0.0;
								var f2y1 = 0.0;
								var t31 = t29;
								f2x1 = v03.x + vx1 * t31;
								f2y1 = v03.y + vy1 * t31;
								var g1x1 = 0.0;
								var g1y1 = 0.0;
								var t32 = s14;
								g1x1 = q01.x + qx1 * t32;
								g1y1 = q01.y + qy1 * t32;
								var g2x1 = 0.0;
								var g2y1 = 0.0;
								var t33 = s24;
								g2x1 = q01.x + qx1 * t33;
								g2y1 = q01.y + qy1 * t33;
								var bx4 = q01.x;
								var by4 = q01.y;
								var dx4 = 0.0;
								var dy4 = 0.0;
								dx4 = f1x1 - bx4;
								dy4 = f1y1 - by4;
								var d12 = dx4 * dx4 + dy4 * dy4;
								var bx5 = q11.x;
								var by5 = q11.y;
								var dx5 = 0.0;
								var dy5 = 0.0;
								dx5 = f2x1 - bx5;
								dy5 = f2y1 - by5;
								var d23 = dx5 * dx5 + dy5 * dy5;
								var bx6 = v03.x;
								var by6 = v03.y;
								var dx6 = 0.0;
								var dy6 = 0.0;
								dx6 = g1x1 - bx6;
								dy6 = g1y1 - by6;
								var e12 = dx6 * dx6 + dy6 * dy6;
								var bx7 = v14.x;
								var by7 = v14.y;
								var dx7 = 0.0;
								var dy7 = 0.0;
								dx7 = g2x1 - bx7;
								dy7 = g2y1 - by7;
								var e21 = dx7 * dx7 + dy7 * dy7;
								var minfx1 = 0.0;
								var minfy1 = 0.0;
								var minq1 = null;
								if(d12 < d23) {
									minfx1 = f1x1;
									minfy1 = f1y1;
									minq1 = q01;
								} else {
									minfx1 = f2x1;
									minfy1 = f2y1;
									minq1 = q11;
									d12 = d23;
								}
								var mingx1 = 0.0;
								var mingy1 = 0.0;
								var minv1 = null;
								if(e12 < e21) {
									mingx1 = g1x1;
									mingy1 = g1y1;
									minv1 = v03;
								} else {
									mingx1 = g2x1;
									mingy1 = g2y1;
									minv1 = v14;
									e12 = e21;
								}
								if(d12 < e12) {
									w11.x = minfx1;
									w11.y = minfy1;
									w21.x = minq1.x;
									w21.y = minq1.y;
									best3 = Math.sqrt(d12);
								} else {
									w21.x = mingx1;
									w21.y = mingy1;
									w11.x = minv1.x;
									w11.y = minv1.y;
									best3 = Math.sqrt(e12);
								}
								if(best3 != 0) {
									axis.x = w21.x - w11.x;
									axis.y = w21.y - w11.y;
									var t34 = 1.0 / best3;
									axis.x *= t34;
									axis.y *= t34;
									if(swapped1) {
										axis.x = -axis.x;
										axis.y = -axis.y;
									}
								}
								tmp4 = best3;
							} else {
								var c0x1 = 0.0;
								var c0y1 = 0.0;
								c0x1 = ay1.gp0.x;
								c0y1 = ay1.gp0.y;
								var c1x1 = 0.0;
								var c1y1 = 0.0;
								c1x1 = ay1.gp1.x;
								c1y1 = ay1.gp1.y;
								var dvx1 = 0.0;
								var dvy1 = 0.0;
								dvx1 = c1x1 - c0x1;
								dvy1 = c1y1 - c0y1;
								var d01 = ax1.gnormy * c0x1 - ax1.gnormx * c0y1;
								var d13 = ax1.gnormy * c1x1 - ax1.gnormx * c1y1;
								var den1 = 1 / (d13 - d01);
								var t35 = (-ax1.tp1 - d01) * den1;
								if(t35 > Config.epsilon) {
									c0x1 += dvx1 * t35;
									c0y1 += dvy1 * t35;
								}
								var t36 = (-ax1.tp0 - d13) * den1;
								if(t36 < -Config.epsilon) {
									c1x1 += dvx1 * t36;
									c1y1 += dvy1 * t36;
								}
								var c0d1 = c0x1 * ax1.gnormx + c0y1 * ax1.gnormy - ax1.gprojection;
								var c1d1 = c1x1 * ax1.gnormx + c1y1 * ax1.gnormy - ax1.gprojection;
								if(c0d1 < c1d1) {
									w21.x = c0x1;
									w21.y = c0y1;
									var t37 = -c0d1;
									w11.x = w21.x + ax1.gnormx * t37;
									w11.y = w21.y + ax1.gnormy * t37;
									tmp4 = c0d1;
								} else {
									w21.x = c1x1;
									w21.y = c1y1;
									var t38 = -c1d1;
									w11.x = w21.x + ax1.gnormx * t38;
									w11.y = w21.y + ax1.gnormy * t38;
									tmp4 = c1d1;
								}
							}
						} else {
							tmp4 = 1e100;
						}
					} else {
						tmp4 = 1e100;
					}
				}
			}
			var sep1 = tmp4 + negRadius;
			var dot1 = deltax * axis.x + deltay * axis.y;
			if(sep1 < Config.distanceThresholdCCD) {
				var d1x1 = 0.0;
				var d1y1 = 0.0;
				d1x1 = c1.x - b1.posx;
				d1y1 = c1.y - b1.posy;
				var proj1 = dot1 - b1.sweep_angvel * (axis.y * d1x1 - axis.x * d1y1);
				if(proj1 > 0) {
					toi.slipped = true;
				}
				if(proj1 <= 0 || sep1 < Config.distanceThresholdCCD * 0.5) {
					break;
				}
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep > negRadius) {
				toi.failed = true;
			}
			break;
		}
	}
	toi.toi = curTOI;
};
ZPP_SweepDistance.distanceBody = function(b1,b2,w1,w2) {
	var t1;
	if(ZPP_Vec2.zpp_pool == null) {
		t1 = new ZPP_Vec2();
	} else {
		t1 = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = t1.next;
		t1.next = null;
	}
	t1.weak = false;
	var t2;
	if(ZPP_Vec2.zpp_pool == null) {
		t2 = new ZPP_Vec2();
	} else {
		t2 = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = t2.next;
		t2.next = null;
	}
	t2.weak = false;
	var ax;
	if(ZPP_Vec2.zpp_pool == null) {
		ax = new ZPP_Vec2();
	} else {
		ax = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = ax.next;
		ax.next = null;
	}
	ax.weak = false;
	var min = 1e100;
	var cx_ite = b1.shapes.head;
	while(cx_ite != null) {
		var s1 = cx_ite.elt;
		var cx_ite1 = b2.shapes.head;
		while(cx_ite1 != null) {
			var s2 = cx_ite1.elt;
			var s11 = s1;
			var s21 = s2;
			var w11 = t1;
			var w21 = t2;
			var dist;
			if(s1.type == 0 && s2.type == 0) {
				var c1 = s1.circle;
				var c2 = s2.circle;
				var dist1;
				var nx = 0.0;
				var ny = 0.0;
				nx = c2.worldCOMx - c1.worldCOMx;
				ny = c2.worldCOMy - c1.worldCOMy;
				var len = Math.sqrt(nx * nx + ny * ny);
				dist1 = len - (c1.radius + c2.radius);
				if(dist1 < min) {
					if(len == 0) {
						nx = 1;
						ny = 0;
					} else {
						var t = 1.0 / len;
						nx *= t;
						ny *= t;
					}
					var t3 = c1.radius;
					w11.x = c1.worldCOMx + nx * t3;
					w11.y = c1.worldCOMy + ny * t3;
					var t4 = -c2.radius;
					w21.x = c2.worldCOMx + nx * t4;
					w21.y = c2.worldCOMy + ny * t4;
					ax.x = nx;
					ax.y = ny;
				}
				dist = dist1;
			} else {
				var swapped = false;
				if(s1.type == 0 && s2.type == 1) {
					var tmp = s1;
					s11 = s2;
					s21 = tmp;
					var tmp2 = w11;
					w11 = w21;
					w21 = tmp2;
					swapped = true;
				}
				if(s11.type == 1 && s21.type == 0) {
					var poly = s11.polygon;
					var circle = s21.circle;
					var best = -1e+100;
					var a0 = null;
					var cx_ite2 = poly.edges.head;
					while(cx_ite2 != null) {
						var a = cx_ite2.elt;
						var dist2 = a.gnormx * circle.worldCOMx + a.gnormy * circle.worldCOMy - a.gprojection - circle.radius;
						if(dist2 > min) {
							best = dist2;
							break;
						}
						if(dist2 > 0) {
							if(dist2 > best) {
								best = dist2;
								a0 = a;
							}
						} else if(best < 0 && dist2 > best) {
							best = dist2;
							a0 = a;
						}
						cx_ite2 = cx_ite2.next;
					}
					if(best < min) {
						var v0 = a0.gp0;
						var v1 = a0.gp1;
						var dt = circle.worldCOMy * a0.gnormx - circle.worldCOMx * a0.gnormy;
						if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
							var nx1 = 0.0;
							var ny1 = 0.0;
							nx1 = circle.worldCOMx - v0.x;
							ny1 = circle.worldCOMy - v0.y;
							var len1 = Math.sqrt(nx1 * nx1 + ny1 * ny1);
							best = len1 - circle.radius;
							if(best < min) {
								if(len1 == 0) {
									nx1 = 1;
									ny1 = 0;
								} else {
									var t5 = 1.0 / len1;
									nx1 *= t5;
									ny1 *= t5;
								}
								w11.x = v0.x + nx1 * 0;
								w11.y = v0.y + ny1 * 0;
								var t6 = -circle.radius;
								w21.x = circle.worldCOMx + nx1 * t6;
								w21.y = circle.worldCOMy + ny1 * t6;
								ax.x = nx1;
								ax.y = ny1;
							}
						} else if(dt >= v1.y * a0.gnormx - v1.x * a0.gnormy) {
							var nx2 = 0.0;
							var ny2 = 0.0;
							nx2 = circle.worldCOMx - v1.x;
							ny2 = circle.worldCOMy - v1.y;
							var len2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);
							best = len2 - circle.radius;
							if(best < min) {
								if(len2 == 0) {
									nx2 = 1;
									ny2 = 0;
								} else {
									var t7 = 1.0 / len2;
									nx2 *= t7;
									ny2 *= t7;
								}
								w11.x = v1.x + nx2 * 0;
								w11.y = v1.y + ny2 * 0;
								var t8 = -circle.radius;
								w21.x = circle.worldCOMx + nx2 * t8;
								w21.y = circle.worldCOMy + ny2 * t8;
								ax.x = nx2;
								ax.y = ny2;
							}
						} else {
							var t9 = -circle.radius;
							w21.x = circle.worldCOMx + a0.gnormx * t9;
							w21.y = circle.worldCOMy + a0.gnormy * t9;
							var t10 = -best;
							w11.x = w21.x + a0.gnormx * t10;
							w11.y = w21.y + a0.gnormy * t10;
							ax.x = a0.gnormx;
							ax.y = a0.gnormy;
						}
					}
					if(swapped) {
						ax.x = -ax.x;
						ax.y = -ax.y;
					}
					dist = best;
				} else {
					var p1 = s11.polygon;
					var p2 = s21.polygon;
					var best1 = -1e+100;
					var a1 = null;
					var a2 = null;
					var besti = 0;
					var cx_ite3 = p1.edges.head;
					while(cx_ite3 != null) {
						var a3 = cx_ite3.elt;
						var min1 = 1e100;
						var cx_ite4 = p2.gverts.next;
						while(cx_ite4 != null) {
							var v = cx_ite4;
							var k = a3.gnormx * v.x + a3.gnormy * v.y;
							if(k < min1) {
								min1 = k;
							}
							cx_ite4 = cx_ite4.next;
						}
						min1 -= a3.gprojection;
						if(min1 > min) {
							best1 = min1;
							break;
						}
						if(min1 > 0) {
							if(min1 > best1) {
								best1 = min1;
								a1 = a3;
								besti = 1;
							}
						} else if(best1 < 0 && min1 > best1) {
							best1 = min1;
							a1 = a3;
							besti = 1;
						}
						cx_ite3 = cx_ite3.next;
					}
					if(best1 < min) {
						var cx_ite5 = p2.edges.head;
						while(cx_ite5 != null) {
							var a4 = cx_ite5.elt;
							var min2 = 1e100;
							var cx_ite6 = p1.gverts.next;
							while(cx_ite6 != null) {
								var v2 = cx_ite6;
								var k1 = a4.gnormx * v2.x + a4.gnormy * v2.y;
								if(k1 < min2) {
									min2 = k1;
								}
								cx_ite6 = cx_ite6.next;
							}
							min2 -= a4.gprojection;
							if(min2 > min) {
								best1 = min2;
								break;
							}
							if(min2 > 0) {
								if(min2 > best1) {
									best1 = min2;
									a2 = a4;
									besti = 2;
								}
							} else if(best1 < 0 && min2 > best1) {
								best1 = min2;
								a2 = a4;
								besti = 2;
							}
							cx_ite5 = cx_ite5.next;
						}
						if(best1 < min) {
							var q2;
							var ax1;
							if(besti == 1) {
								q2 = p2;
								ax1 = a1;
							} else {
								q2 = p1;
								ax1 = a2;
								var tmp1 = w11;
								w11 = w21;
								w21 = tmp1;
								swapped = !swapped;
							}
							var ay = null;
							var min3 = 1e100;
							var cx_ite7 = q2.edges.head;
							while(cx_ite7 != null) {
								var a5 = cx_ite7.elt;
								var k2 = ax1.gnormx * a5.gnormx + ax1.gnormy * a5.gnormy;
								if(k2 < min3) {
									min3 = k2;
									ay = a5;
								}
								cx_ite7 = cx_ite7.next;
							}
							if(swapped) {
								ax.x = -ax1.gnormx;
								ax.y = -ax1.gnormy;
							} else {
								ax.x = ax1.gnormx;
								ax.y = ax1.gnormy;
							}
							if(best1 >= 0) {
								var v01 = ax1.gp0;
								var v11 = ax1.gp1;
								var q0 = ay.gp0;
								var q1 = ay.gp1;
								var vx = 0.0;
								var vy = 0.0;
								var qx = 0.0;
								var qy = 0.0;
								vx = v11.x - v01.x;
								vy = v11.y - v01.y;
								qx = q1.x - q0.x;
								qy = q1.y - q0.y;
								var vdot = 1 / (vx * vx + vy * vy);
								var qdot = 1 / (qx * qx + qy * qy);
								var t11 = -(vx * (v01.x - q0.x) + vy * (v01.y - q0.y)) * vdot;
								var t21 = -(vx * (v01.x - q1.x) + vy * (v01.y - q1.y)) * vdot;
								var s12 = -(qx * (q0.x - v01.x) + qy * (q0.y - v01.y)) * qdot;
								var s22 = -(qx * (q0.x - v11.x) + qy * (q0.y - v11.y)) * qdot;
								if(t11 < 0) {
									t11 = 0;
								} else if(t11 > 1) {
									t11 = 1;
								}
								if(t21 < 0) {
									t21 = 0;
								} else if(t21 > 1) {
									t21 = 1;
								}
								if(s12 < 0) {
									s12 = 0;
								} else if(s12 > 1) {
									s12 = 1;
								}
								if(s22 < 0) {
									s22 = 0;
								} else if(s22 > 1) {
									s22 = 1;
								}
								var f1x = 0.0;
								var f1y = 0.0;
								var t12 = t11;
								f1x = v01.x + vx * t12;
								f1y = v01.y + vy * t12;
								var f2x = 0.0;
								var f2y = 0.0;
								var t13 = t21;
								f2x = v01.x + vx * t13;
								f2y = v01.y + vy * t13;
								var g1x = 0.0;
								var g1y = 0.0;
								var t14 = s12;
								g1x = q0.x + qx * t14;
								g1y = q0.y + qy * t14;
								var g2x = 0.0;
								var g2y = 0.0;
								var t15 = s22;
								g2x = q0.x + qx * t15;
								g2y = q0.y + qy * t15;
								var bx = q0.x;
								var by = q0.y;
								var dx = 0.0;
								var dy = 0.0;
								dx = f1x - bx;
								dy = f1y - by;
								var d1 = dx * dx + dy * dy;
								var bx1 = q1.x;
								var by1 = q1.y;
								var dx1 = 0.0;
								var dy1 = 0.0;
								dx1 = f2x - bx1;
								dy1 = f2y - by1;
								var d2 = dx1 * dx1 + dy1 * dy1;
								var bx2 = v01.x;
								var by2 = v01.y;
								var dx2 = 0.0;
								var dy2 = 0.0;
								dx2 = g1x - bx2;
								dy2 = g1y - by2;
								var e1 = dx2 * dx2 + dy2 * dy2;
								var bx3 = v11.x;
								var by3 = v11.y;
								var dx3 = 0.0;
								var dy3 = 0.0;
								dx3 = g2x - bx3;
								dy3 = g2y - by3;
								var e2 = dx3 * dx3 + dy3 * dy3;
								var minfx = 0.0;
								var minfy = 0.0;
								var minq = null;
								if(d1 < d2) {
									minfx = f1x;
									minfy = f1y;
									minq = q0;
								} else {
									minfx = f2x;
									minfy = f2y;
									minq = q1;
									d1 = d2;
								}
								var mingx = 0.0;
								var mingy = 0.0;
								var minv = null;
								if(e1 < e2) {
									mingx = g1x;
									mingy = g1y;
									minv = v01;
								} else {
									mingx = g2x;
									mingy = g2y;
									minv = v11;
									e1 = e2;
								}
								if(d1 < e1) {
									w11.x = minfx;
									w11.y = minfy;
									w21.x = minq.x;
									w21.y = minq.y;
									best1 = Math.sqrt(d1);
								} else {
									w21.x = mingx;
									w21.y = mingy;
									w11.x = minv.x;
									w11.y = minv.y;
									best1 = Math.sqrt(e1);
								}
								if(best1 != 0) {
									ax.x = w21.x - w11.x;
									ax.y = w21.y - w11.y;
									var t16 = 1.0 / best1;
									ax.x *= t16;
									ax.y *= t16;
									if(swapped) {
										ax.x = -ax.x;
										ax.y = -ax.y;
									}
								}
								dist = best1;
							} else {
								var c0x = 0.0;
								var c0y = 0.0;
								c0x = ay.gp0.x;
								c0y = ay.gp0.y;
								var c1x = 0.0;
								var c1y = 0.0;
								c1x = ay.gp1.x;
								c1y = ay.gp1.y;
								var dvx = 0.0;
								var dvy = 0.0;
								dvx = c1x - c0x;
								dvy = c1y - c0y;
								var d0 = ax1.gnormy * c0x - ax1.gnormx * c0y;
								var d11 = ax1.gnormy * c1x - ax1.gnormx * c1y;
								var den = 1 / (d11 - d0);
								var t17 = (-ax1.tp1 - d0) * den;
								if(t17 > Config.epsilon) {
									c0x += dvx * t17;
									c0y += dvy * t17;
								}
								var t18 = (-ax1.tp0 - d11) * den;
								if(t18 < -Config.epsilon) {
									c1x += dvx * t18;
									c1y += dvy * t18;
								}
								var c0d = c0x * ax1.gnormx + c0y * ax1.gnormy - ax1.gprojection;
								var c1d = c1x * ax1.gnormx + c1y * ax1.gnormy - ax1.gprojection;
								if(c0d < c1d) {
									w21.x = c0x;
									w21.y = c0y;
									var t19 = -c0d;
									w11.x = w21.x + ax1.gnormx * t19;
									w11.y = w21.y + ax1.gnormy * t19;
									dist = c0d;
								} else {
									w21.x = c1x;
									w21.y = c1y;
									var t20 = -c1d;
									w11.x = w21.x + ax1.gnormx * t20;
									w11.y = w21.y + ax1.gnormy * t20;
									dist = c1d;
								}
							}
						} else {
							dist = min;
						}
					} else {
						dist = min;
					}
				}
			}
			if(dist < min) {
				min = dist;
				w1.x = t1.x;
				w1.y = t1.y;
				w2.x = t2.x;
				w2.y = t2.y;
			}
			cx_ite1 = cx_ite1.next;
		}
		cx_ite = cx_ite.next;
	}
	var o = t1;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = ZPP_Vec2.zpp_pool;
	ZPP_Vec2.zpp_pool = o;
	var o1 = t2;
	if(o1.outer != null) {
		o1.outer.zpp_inner = null;
		o1.outer = null;
	}
	o1._isimmutable = null;
	o1._validate = null;
	o1._invalidate = null;
	o1.next = ZPP_Vec2.zpp_pool;
	ZPP_Vec2.zpp_pool = o1;
	var o2 = ax;
	if(o2.outer != null) {
		o2.outer.zpp_inner = null;
		o2.outer = null;
	}
	o2._isimmutable = null;
	o2._validate = null;
	o2._invalidate = null;
	o2.next = ZPP_Vec2.zpp_pool;
	ZPP_Vec2.zpp_pool = o2;
	return min;
};
ZPP_SweepDistance.distance = function(s1,s2,w1,w2,axis,upperBound) {
	if(upperBound == null) {
		upperBound = 1e100;
	}
	if(s1.type == 0 && s2.type == 0) {
		var c1 = s1.circle;
		var c2 = s2.circle;
		var dist;
		var nx = 0.0;
		var ny = 0.0;
		nx = c2.worldCOMx - c1.worldCOMx;
		ny = c2.worldCOMy - c1.worldCOMy;
		var len = Math.sqrt(nx * nx + ny * ny);
		dist = len - (c1.radius + c2.radius);
		if(dist < upperBound) {
			if(len == 0) {
				nx = 1;
				ny = 0;
			} else {
				var t = 1.0 / len;
				nx *= t;
				ny *= t;
			}
			var t1 = c1.radius;
			w1.x = c1.worldCOMx + nx * t1;
			w1.y = c1.worldCOMy + ny * t1;
			var t2 = -c2.radius;
			w2.x = c2.worldCOMx + nx * t2;
			w2.y = c2.worldCOMy + ny * t2;
			axis.x = nx;
			axis.y = ny;
		}
		return dist;
	} else {
		var swapped = false;
		if(s1.type == 0 && s2.type == 1) {
			var tmp = s1;
			s1 = s2;
			s2 = tmp;
			var tmp2 = w1;
			w1 = w2;
			w2 = tmp2;
			swapped = true;
		}
		if(s1.type == 1 && s2.type == 0) {
			var poly = s1.polygon;
			var circle = s2.circle;
			var best = -1e+100;
			var a0 = null;
			var cx_ite = poly.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				var dist1 = a.gnormx * circle.worldCOMx + a.gnormy * circle.worldCOMy - a.gprojection - circle.radius;
				if(dist1 > upperBound) {
					best = dist1;
					break;
				}
				if(dist1 > 0) {
					if(dist1 > best) {
						best = dist1;
						a0 = a;
					}
				} else if(best < 0 && dist1 > best) {
					best = dist1;
					a0 = a;
				}
				cx_ite = cx_ite.next;
			}
			if(best < upperBound) {
				var v0 = a0.gp0;
				var v1 = a0.gp1;
				var dt = circle.worldCOMy * a0.gnormx - circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var nx1 = 0.0;
					var ny1 = 0.0;
					nx1 = circle.worldCOMx - v0.x;
					ny1 = circle.worldCOMy - v0.y;
					var len1 = Math.sqrt(nx1 * nx1 + ny1 * ny1);
					best = len1 - circle.radius;
					if(best < upperBound) {
						if(len1 == 0) {
							nx1 = 1;
							ny1 = 0;
						} else {
							var t3 = 1.0 / len1;
							nx1 *= t3;
							ny1 *= t3;
						}
						w1.x = v0.x + nx1 * 0;
						w1.y = v0.y + ny1 * 0;
						var t4 = -circle.radius;
						w2.x = circle.worldCOMx + nx1 * t4;
						w2.y = circle.worldCOMy + ny1 * t4;
						axis.x = nx1;
						axis.y = ny1;
					}
				} else if(dt >= v1.y * a0.gnormx - v1.x * a0.gnormy) {
					var nx2 = 0.0;
					var ny2 = 0.0;
					nx2 = circle.worldCOMx - v1.x;
					ny2 = circle.worldCOMy - v1.y;
					var len2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);
					best = len2 - circle.radius;
					if(best < upperBound) {
						if(len2 == 0) {
							nx2 = 1;
							ny2 = 0;
						} else {
							var t5 = 1.0 / len2;
							nx2 *= t5;
							ny2 *= t5;
						}
						w1.x = v1.x + nx2 * 0;
						w1.y = v1.y + ny2 * 0;
						var t6 = -circle.radius;
						w2.x = circle.worldCOMx + nx2 * t6;
						w2.y = circle.worldCOMy + ny2 * t6;
						axis.x = nx2;
						axis.y = ny2;
					}
				} else {
					var t7 = -circle.radius;
					w2.x = circle.worldCOMx + a0.gnormx * t7;
					w2.y = circle.worldCOMy + a0.gnormy * t7;
					var t8 = -best;
					w1.x = w2.x + a0.gnormx * t8;
					w1.y = w2.y + a0.gnormy * t8;
					axis.x = a0.gnormx;
					axis.y = a0.gnormy;
				}
			}
			if(swapped) {
				axis.x = -axis.x;
				axis.y = -axis.y;
			}
			return best;
		} else {
			var p1 = s1.polygon;
			var p2 = s2.polygon;
			var best1 = -1e+100;
			var a1 = null;
			var a2 = null;
			var besti = 0;
			var cx_ite1 = p1.edges.head;
			while(cx_ite1 != null) {
				var a3 = cx_ite1.elt;
				var min = 1e100;
				var cx_ite2 = p2.gverts.next;
				while(cx_ite2 != null) {
					var v = cx_ite2;
					var k = a3.gnormx * v.x + a3.gnormy * v.y;
					if(k < min) {
						min = k;
					}
					cx_ite2 = cx_ite2.next;
				}
				min -= a3.gprojection;
				if(min > upperBound) {
					best1 = min;
					break;
				}
				if(min > 0) {
					if(min > best1) {
						best1 = min;
						a1 = a3;
						besti = 1;
					}
				} else if(best1 < 0 && min > best1) {
					best1 = min;
					a1 = a3;
					besti = 1;
				}
				cx_ite1 = cx_ite1.next;
			}
			if(best1 < upperBound) {
				var cx_ite3 = p2.edges.head;
				while(cx_ite3 != null) {
					var a4 = cx_ite3.elt;
					var min1 = 1e100;
					var cx_ite4 = p1.gverts.next;
					while(cx_ite4 != null) {
						var v2 = cx_ite4;
						var k1 = a4.gnormx * v2.x + a4.gnormy * v2.y;
						if(k1 < min1) {
							min1 = k1;
						}
						cx_ite4 = cx_ite4.next;
					}
					min1 -= a4.gprojection;
					if(min1 > upperBound) {
						best1 = min1;
						break;
					}
					if(min1 > 0) {
						if(min1 > best1) {
							best1 = min1;
							a2 = a4;
							besti = 2;
						}
					} else if(best1 < 0 && min1 > best1) {
						best1 = min1;
						a2 = a4;
						besti = 2;
					}
					cx_ite3 = cx_ite3.next;
				}
				if(best1 < upperBound) {
					var q2;
					var ax;
					if(besti == 1) {
						q2 = p2;
						ax = a1;
					} else {
						q2 = p1;
						ax = a2;
						var tmp1 = w1;
						w1 = w2;
						w2 = tmp1;
						swapped = !swapped;
					}
					var ay = null;
					var min2 = 1e100;
					var cx_ite5 = q2.edges.head;
					while(cx_ite5 != null) {
						var a5 = cx_ite5.elt;
						var k2 = ax.gnormx * a5.gnormx + ax.gnormy * a5.gnormy;
						if(k2 < min2) {
							min2 = k2;
							ay = a5;
						}
						cx_ite5 = cx_ite5.next;
					}
					if(swapped) {
						axis.x = -ax.gnormx;
						axis.y = -ax.gnormy;
					} else {
						axis.x = ax.gnormx;
						axis.y = ax.gnormy;
					}
					if(best1 >= 0) {
						var v01 = ax.gp0;
						var v11 = ax.gp1;
						var q0 = ay.gp0;
						var q1 = ay.gp1;
						var vx = 0.0;
						var vy = 0.0;
						var qx = 0.0;
						var qy = 0.0;
						vx = v11.x - v01.x;
						vy = v11.y - v01.y;
						qx = q1.x - q0.x;
						qy = q1.y - q0.y;
						var vdot = 1 / (vx * vx + vy * vy);
						var qdot = 1 / (qx * qx + qy * qy);
						var t11 = -(vx * (v01.x - q0.x) + vy * (v01.y - q0.y)) * vdot;
						var t21 = -(vx * (v01.x - q1.x) + vy * (v01.y - q1.y)) * vdot;
						var s11 = -(qx * (q0.x - v01.x) + qy * (q0.y - v01.y)) * qdot;
						var s21 = -(qx * (q0.x - v11.x) + qy * (q0.y - v11.y)) * qdot;
						if(t11 < 0) {
							t11 = 0;
						} else if(t11 > 1) {
							t11 = 1;
						}
						if(t21 < 0) {
							t21 = 0;
						} else if(t21 > 1) {
							t21 = 1;
						}
						if(s11 < 0) {
							s11 = 0;
						} else if(s11 > 1) {
							s11 = 1;
						}
						if(s21 < 0) {
							s21 = 0;
						} else if(s21 > 1) {
							s21 = 1;
						}
						var f1x = 0.0;
						var f1y = 0.0;
						var t9 = t11;
						f1x = v01.x + vx * t9;
						f1y = v01.y + vy * t9;
						var f2x = 0.0;
						var f2y = 0.0;
						var t10 = t21;
						f2x = v01.x + vx * t10;
						f2y = v01.y + vy * t10;
						var g1x = 0.0;
						var g1y = 0.0;
						var t12 = s11;
						g1x = q0.x + qx * t12;
						g1y = q0.y + qy * t12;
						var g2x = 0.0;
						var g2y = 0.0;
						var t13 = s21;
						g2x = q0.x + qx * t13;
						g2y = q0.y + qy * t13;
						var bx = q0.x;
						var by = q0.y;
						var dx = 0.0;
						var dy = 0.0;
						dx = f1x - bx;
						dy = f1y - by;
						var d1 = dx * dx + dy * dy;
						var bx1 = q1.x;
						var by1 = q1.y;
						var dx1 = 0.0;
						var dy1 = 0.0;
						dx1 = f2x - bx1;
						dy1 = f2y - by1;
						var d2 = dx1 * dx1 + dy1 * dy1;
						var bx2 = v01.x;
						var by2 = v01.y;
						var dx2 = 0.0;
						var dy2 = 0.0;
						dx2 = g1x - bx2;
						dy2 = g1y - by2;
						var e1 = dx2 * dx2 + dy2 * dy2;
						var bx3 = v11.x;
						var by3 = v11.y;
						var dx3 = 0.0;
						var dy3 = 0.0;
						dx3 = g2x - bx3;
						dy3 = g2y - by3;
						var e2 = dx3 * dx3 + dy3 * dy3;
						var minfx = 0.0;
						var minfy = 0.0;
						var minq = null;
						if(d1 < d2) {
							minfx = f1x;
							minfy = f1y;
							minq = q0;
						} else {
							minfx = f2x;
							minfy = f2y;
							minq = q1;
							d1 = d2;
						}
						var mingx = 0.0;
						var mingy = 0.0;
						var minv = null;
						if(e1 < e2) {
							mingx = g1x;
							mingy = g1y;
							minv = v01;
						} else {
							mingx = g2x;
							mingy = g2y;
							minv = v11;
							e1 = e2;
						}
						if(d1 < e1) {
							w1.x = minfx;
							w1.y = minfy;
							w2.x = minq.x;
							w2.y = minq.y;
							best1 = Math.sqrt(d1);
						} else {
							w2.x = mingx;
							w2.y = mingy;
							w1.x = minv.x;
							w1.y = minv.y;
							best1 = Math.sqrt(e1);
						}
						if(best1 != 0) {
							axis.x = w2.x - w1.x;
							axis.y = w2.y - w1.y;
							var t14 = 1.0 / best1;
							axis.x *= t14;
							axis.y *= t14;
							if(swapped) {
								axis.x = -axis.x;
								axis.y = -axis.y;
							}
						}
						return best1;
					} else {
						var c0x = 0.0;
						var c0y = 0.0;
						c0x = ay.gp0.x;
						c0y = ay.gp0.y;
						var c1x = 0.0;
						var c1y = 0.0;
						c1x = ay.gp1.x;
						c1y = ay.gp1.y;
						var dvx = 0.0;
						var dvy = 0.0;
						dvx = c1x - c0x;
						dvy = c1y - c0y;
						var d0 = ax.gnormy * c0x - ax.gnormx * c0y;
						var d11 = ax.gnormy * c1x - ax.gnormx * c1y;
						var den = 1 / (d11 - d0);
						var t15 = (-ax.tp1 - d0) * den;
						if(t15 > Config.epsilon) {
							c0x += dvx * t15;
							c0y += dvy * t15;
						}
						var t16 = (-ax.tp0 - d11) * den;
						if(t16 < -Config.epsilon) {
							c1x += dvx * t16;
							c1y += dvy * t16;
						}
						var c0d = c0x * ax.gnormx + c0y * ax.gnormy - ax.gprojection;
						var c1d = c1x * ax.gnormx + c1y * ax.gnormy - ax.gprojection;
						if(c0d < c1d) {
							w2.x = c0x;
							w2.y = c0y;
							var t17 = -c0d;
							w1.x = w2.x + ax.gnormx * t17;
							w1.y = w2.y + ax.gnormy * t17;
							return c0d;
						} else {
							w2.x = c1x;
							w2.y = c1y;
							var t18 = -c1d;
							w1.x = w2.x + ax.gnormx * t18;
							w1.y = w2.y + ax.gnormy * t18;
							return c1d;
						}
					}
				} else {
					return upperBound;
				}
			} else {
				return upperBound;
			}
		}
	}
};
ZPP_SweepDistance.prototype.__class__ = ZPP_SweepDistance;
var ZPP_PartitionPair = zpp_nape.geom.ZPP_PartitionPair = function() {
	this.node = null;
	this.di = 0;
	this.id = 0;
	this.b = null;
	this.a = null;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
};
ZPP_PartitionPair.__name__ = ["zpp_nape","geom","ZPP_PartitionPair"];
ZPP_PartitionPair.get = function(a,b) {
	var ret;
	if(ZPP_PartitionPair.zpp_pool == null) {
		ret = new ZPP_PartitionPair();
	} else {
		ret = ZPP_PartitionPair.zpp_pool;
		ZPP_PartitionPair.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.a = a;
	ret.b = b;
	if(a.id < b.id) {
		ret.id = a.id;
		ret.di = b.id;
	} else {
		ret.id = b.id;
		ret.di = a.id;
	}
	return ret;
};
ZPP_PartitionPair.edge_swap = function(a,b) {
	var t = a.node;
	a.node = b.node;
	b.node = t;
};
ZPP_PartitionPair.edge_lt = function(a,b) {
	if(a.id >= b.id) {
		if(a.id == b.id) {
			return a.di < b.di;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
ZPP_PartitionPair.prototype.next = null;
ZPP_PartitionPair.prototype.elem = function() {
	return this;
};
ZPP_PartitionPair.prototype.begin = function() {
	return this.next;
};
ZPP_PartitionPair.prototype._inuse = null;
ZPP_PartitionPair.prototype.modified = null;
ZPP_PartitionPair.prototype.pushmod = null;
ZPP_PartitionPair.prototype.length = null;
ZPP_PartitionPair.prototype.setbegin = function(i) {
	this.next = i;
	this.modified = true;
	this.pushmod = true;
};
ZPP_PartitionPair.prototype.add = function(o) {
	o._inuse = true;
	o.next = this.next;
	this.next = o;
	this.modified = true;
	this.length++;
	return o;
};
ZPP_PartitionPair.prototype.inlined_add = function(o) {
	o._inuse = true;
	o.next = this.next;
	this.next = o;
	this.modified = true;
	this.length++;
	return o;
};
ZPP_PartitionPair.prototype.addAll = function(x) {
	var cx_ite = x.next;
	while(cx_ite != null) {
		this.add(cx_ite);
		cx_ite = cx_ite.next;
	}
};
ZPP_PartitionPair.prototype.insert = function(cur,o) {
	o._inuse = true;
	if(cur == null) {
		o.next = this.next;
		this.next = o;
	} else {
		o.next = cur.next;
		cur.next = o;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return o;
};
ZPP_PartitionPair.prototype.inlined_insert = function(cur,o) {
	o._inuse = true;
	if(cur == null) {
		o.next = this.next;
		this.next = o;
	} else {
		o.next = cur.next;
		cur.next = o;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return o;
};
ZPP_PartitionPair.prototype.pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret._inuse = false;
	if(this.next == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZPP_PartitionPair.prototype.inlined_pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret._inuse = false;
	if(this.next == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZPP_PartitionPair.prototype.pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
};
ZPP_PartitionPair.prototype.inlined_pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
};
ZPP_PartitionPair.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.next;
	while(cur != null) {
		if(cur == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.next;
				ret = old.next;
				this.next = ret;
				if(this.next == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			old._inuse = false;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZPP_PartitionPair.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZPP_PartitionPair.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	while(cur != null) {
		if(cur == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.next;
				ret = old.next;
				this.next = ret;
				if(this.next == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			old._inuse = false;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZPP_PartitionPair.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.next;
				ret1 = old.next;
				this.next = ret1;
				if(this.next == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			old._inuse = false;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZPP_PartitionPair.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.next;
		ret = old.next;
		this.next = ret;
		if(this.next == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	old._inuse = false;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZPP_PartitionPair.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.next;
		ret = old.next;
		this.next = ret;
		if(this.next == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	old._inuse = false;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZPP_PartitionPair.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZPP_PartitionPair.prototype.clear = function() {
};
ZPP_PartitionPair.prototype.inlined_clear = function() {
};
ZPP_PartitionPair.prototype.reverse = function() {
	var cur = this.next;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.next = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZPP_PartitionPair.prototype.empty = function() {
	return this.next == null;
};
ZPP_PartitionPair.prototype.size = function() {
	return this.length;
};
ZPP_PartitionPair.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.next;
	while(cx_ite != null) {
		if(cx_ite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZPP_PartitionPair.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.next;
	while(cx_ite != null) {
		if(cx_ite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZPP_PartitionPair.prototype.front = function() {
	return this.next;
};
ZPP_PartitionPair.prototype.back = function() {
	var ret = this.next;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret;
};
ZPP_PartitionPair.prototype.iterator_at = function(ind) {
	var ret = this.next;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZPP_PartitionPair.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it;
	} else {
		return null;
	}
};
ZPP_PartitionPair.prototype.free = function() {
	this.a = this.b = null;
	this.node = null;
};
ZPP_PartitionPair.prototype.alloc = function() {
};
ZPP_PartitionPair.prototype.a = null;
ZPP_PartitionPair.prototype.b = null;
ZPP_PartitionPair.prototype.id = null;
ZPP_PartitionPair.prototype.di = null;
ZPP_PartitionPair.prototype.node = null;
ZPP_PartitionPair.prototype.__class__ = ZPP_PartitionPair;
var ZPP_Triangular = zpp_nape.geom.ZPP_Triangular = function() { };
ZPP_Triangular.__name__ = ["zpp_nape","geom","ZPP_Triangular"];
ZPP_Triangular.lt = function(p,q) {
	if(!(p.y < q.y)) {
		if(p.y == q.y) {
			return p.x < q.x;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
ZPP_Triangular.right_turn = function(a,b,c) {
	var ux = 0.0;
	var uy = 0.0;
	ux = c.x - b.x;
	uy = c.y - b.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = b.x - a.x;
	vy = b.y - a.y;
	return vy * ux - vx * uy;
};
ZPP_Triangular.delaunay = function(A,B,C,D) {
	var ux = 0.0;
	var uy = 0.0;
	var vx = 0.0;
	var vy = 0.0;
	var tmp;
	var tmp1;
	var tmp2;
	ux = C.x - B.x;
	uy = C.y - B.y;
	vx = B.x - A.x;
	vy = B.y - A.y;
	if(!(vy * ux - vx * uy >= 0)) {
		ux = D.x - C.x;
		uy = D.y - C.y;
		vx = C.x - B.x;
		vy = C.y - B.y;
		tmp2 = vy * ux - vx * uy >= 0;
	} else {
		tmp2 = true;
	}
	if(!tmp2) {
		ux = A.x - D.x;
		uy = A.y - D.y;
		vx = D.x - C.x;
		vy = D.y - C.y;
		tmp1 = vy * ux - vx * uy >= 0;
	} else {
		tmp1 = true;
	}
	if(!tmp1) {
		ux = B.x - A.x;
		uy = B.y - A.y;
		vx = A.x - D.x;
		vy = A.y - D.y;
		tmp = vy * ux - vx * uy >= 0;
	} else {
		tmp = true;
	}
	if(tmp) {
		return true;
	}
	return B.x * (C.y * D.mag - C.mag * D.y) - C.x * (B.y * D.mag - B.mag * D.y) + D.x * (B.y * C.mag - B.mag * C.y) - (A.x * (C.y * D.mag - C.mag * D.y) - C.x * (A.y * D.mag - A.mag * D.y) + D.x * (A.y * C.mag - A.mag * C.y)) + (A.x * (B.y * D.mag - B.mag * D.y) - B.x * (A.y * D.mag - A.mag * D.y) + D.x * (A.y * B.mag - A.mag * B.y)) - (A.x * (B.y * C.mag - B.mag * C.y) - B.x * (A.y * C.mag - A.mag * C.y) + C.x * (A.y * B.mag - A.mag * B.y)) > 0;
};
ZPP_Triangular.optimise = function(P) {
	var F = P.vertices;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		while(true) {
			var p = nite;
			p.sort();
			p.mag = p.x * p.x + p.y * p.y;
			nite = nite.next;
			if(!(nite != L)) {
				break;
			}
		}
	}
	if(ZPP_Triangular.edgeSet == null) {
		if(ZPP_Set_ZPP_PartitionPair.zpp_pool == null) {
			ZPP_Triangular.edgeSet = new ZPP_Set_ZPP_PartitionPair();
		} else {
			ZPP_Triangular.edgeSet = ZPP_Set_ZPP_PartitionPair.zpp_pool;
			ZPP_Set_ZPP_PartitionPair.zpp_pool = ZPP_Triangular.edgeSet.next;
			ZPP_Triangular.edgeSet.next = null;
		}
		ZPP_Triangular.edgeSet.lt = ZPP_PartitionPair.edge_lt;
		ZPP_Triangular.edgeSet.swapped = ZPP_PartitionPair.edge_swap;
	}
	var edgeStack;
	if(ZPP_PartitionPair.zpp_pool == null) {
		edgeStack = new ZPP_PartitionPair();
	} else {
		edgeStack = ZPP_PartitionPair.zpp_pool;
		ZPP_PartitionPair.zpp_pool = edgeStack.next;
		edgeStack.next = null;
	}
	var F1 = P.vertices;
	var L1 = P.vertices;
	if(F1 != null) {
		var nite1 = F1;
		while(true) {
			var p1 = nite1;
			var q0 = p1.next;
			p1.diagonals.reverse();
			var cx_ite = p1.diagonals.head;
			while(cx_ite != null) {
				var q = cx_ite.elt;
				if(q.id < p1.id) {
					q0 = q;
					cx_ite = cx_ite.next;
					continue;
				}
				if(!ZPP_Triangular.delaunay(p1,q0,q,cx_ite.next == null?p1.prev:cx_ite.next.elt)) {
					var ret;
					if(ZPP_PartitionPair.zpp_pool == null) {
						ret = new ZPP_PartitionPair();
					} else {
						ret = ZPP_PartitionPair.zpp_pool;
						ZPP_PartitionPair.zpp_pool = ret.next;
						ret.next = null;
					}
					ret.a = p1;
					ret.b = q;
					if(p1.id < q.id) {
						ret.id = p1.id;
						ret.di = q.id;
					} else {
						ret.id = q.id;
						ret.di = p1.id;
					}
					var edge = ret;
					edgeStack.add(edge);
					edge.node = ZPP_Triangular.edgeSet.insert(edge);
				}
				q0 = q;
				cx_ite = cx_ite.next;
			}
			nite1 = nite1.next;
			if(!(nite1 != L1)) {
				break;
			}
		}
	}
	while(edgeStack.next != null) {
		var edge1 = edgeStack.pop_unsafe();
		var A = edge1.a;
		var C = edge1.b;
		var B = A.next;
		var D = null;
		var cx_ite1 = A.diagonals.head;
		while(cx_ite1 != null) {
			var p2 = cx_ite1.elt;
			if(p2 == C) {
				cx_ite1 = cx_ite1.next;
				if(cx_ite1 == null) {
					D = A.prev;
				} else {
					D = cx_ite1.elt;
				}
				break;
			}
			B = p2;
			cx_ite1 = cx_ite1.next;
		}
		A.diagonals.remove(C);
		C.diagonals.remove(A);
		if(C == B.next) {
			B.diagonals.add(D);
		} else {
			var cx_ite2 = B.diagonals.head;
			while(cx_ite2 != null) {
				if(cx_ite2.elt == C) {
					B.diagonals.insert(cx_ite2,D);
					break;
				}
				cx_ite2 = cx_ite2.next;
			}
		}
		if(A == D.next) {
			D.diagonals.add(B);
		} else {
			var cx_ite3 = D.diagonals.head;
			while(cx_ite3 != null) {
				if(cx_ite3.elt == A) {
					D.diagonals.insert(cx_ite3,B);
					break;
				}
				cx_ite3 = cx_ite3.next;
			}
		}
		ZPP_Triangular.edgeSet.remove_node(edge1.node);
		edge1.a = edge1.b = null;
		edge1.node = null;
		edge1.next = ZPP_PartitionPair.zpp_pool;
		ZPP_PartitionPair.zpp_pool = edge1;
	}
	var o = edgeStack;
	o.a = o.b = null;
	o.node = null;
	o.next = ZPP_PartitionPair.zpp_pool;
	ZPP_PartitionPair.zpp_pool = o;
};
ZPP_Triangular.triangulate = function(P) {
	var min = P.vertices;
	var max = P.vertices;
	var F = P.vertices.next;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		while(true) {
			var p = nite;
			if(p.y < min.y || p.y == min.y && p.x < min.x) {
				min = p;
			}
			if(max.y < p.y || max.y == p.y && max.x < p.x) {
				max = p;
			}
			nite = nite.next;
			if(!(nite != L)) {
				break;
			}
		}
	}
	if(ZPP_Triangular.queue == null) {
		ZPP_Triangular.queue = new ZNPList_ZPP_PartitionVertex();
	}
	var rp = max.prev;
	var lp = max.next;
	ZPP_Triangular.queue.add(max);
	while(rp != min || lp != min) if(rp == min || lp != min && (rp.y < lp.y || rp.y == lp.y && rp.x < lp.x)) {
		ZPP_Triangular.queue.add(lp);
		lp.rightchain = false;
		lp = lp.next;
	} else {
		ZPP_Triangular.queue.add(rp);
		rp.rightchain = true;
		rp = rp.prev;
	}
	ZPP_Triangular.queue.add(min);
	if(ZPP_Triangular.stack == null) {
		ZPP_Triangular.stack = new ZNPList_ZPP_PartitionVertex();
	}
	ZPP_Triangular.stack.add(ZPP_Triangular.queue.pop_unsafe());
	var pre = ZPP_Triangular.queue.pop_unsafe();
	ZPP_Triangular.stack.add(pre);
	while(true) {
		var p1 = ZPP_Triangular.queue.pop_unsafe();
		if(ZPP_Triangular.queue.head == null) {
			break;
		}
		if(p1.rightchain != ZPP_Triangular.stack.head.elt.rightchain) {
			while(true) {
				var s = ZPP_Triangular.stack.pop_unsafe();
				if(ZPP_Triangular.stack.head == null) {
					break;
				}
				P.add_diagonal(s,p1);
			}
			ZPP_Triangular.stack.add(pre);
		} else {
			var q = ZPP_Triangular.stack.pop_unsafe();
			while(ZPP_Triangular.stack.head != null) {
				var s1 = ZPP_Triangular.stack.head.elt;
				var ux = 0.0;
				var uy = 0.0;
				ux = p1.x - q.x;
				uy = p1.y - q.y;
				var vx = 0.0;
				var vy = 0.0;
				vx = q.x - s1.x;
				vy = q.y - s1.y;
				var right = vy * ux - vx * uy;
				if(p1.rightchain && right >= 0 || !p1.rightchain && right <= 0) {
					break;
				}
				P.add_diagonal(s1,p1);
				q = s1;
				ZPP_Triangular.stack.pop();
			}
			ZPP_Triangular.stack.add(q);
		}
		ZPP_Triangular.stack.add(p1);
		pre = p1;
	}
	if(ZPP_Triangular.stack.head != null) {
		ZPP_Triangular.stack.pop();
		while(ZPP_Triangular.stack.head != null) {
			var s2 = ZPP_Triangular.stack.pop_unsafe();
			if(ZPP_Triangular.stack.head == null) {
				break;
			}
			P.add_diagonal(max,s2);
		}
	}
	return P;
};
ZPP_Triangular.prototype.__class__ = ZPP_Triangular;
var ZPP_Vec2 = zpp_nape.geom.ZPP_Vec2 = function() {
	this.y = 0.0;
	this.x = 0.0;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.weak = false;
	this.outer = null;
	this._isimmutable = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
ZPP_Vec2.__name__ = ["zpp_nape","geom","ZPP_Vec2"];
ZPP_Vec2.get = function(x,y,immutable) {
	if(immutable == null) {
		immutable = false;
	}
	var ret;
	if(ZPP_Vec2.zpp_pool == null) {
		ret = new ZPP_Vec2();
	} else {
		ret = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.weak = false;
	ret._immutable = immutable;
	ret.x = x;
	ret.y = y;
	return ret;
};
ZPP_Vec2.prototype._invalidate = null;
ZPP_Vec2.prototype._validate = null;
ZPP_Vec2.prototype.validate = function() {
	if(this._validate != null) {
		this._validate();
	}
};
ZPP_Vec2.prototype.invalidate = function() {
	if(this._invalidate != null) {
		this._invalidate(this);
	}
};
ZPP_Vec2.prototype._immutable = null;
ZPP_Vec2.prototype._isimmutable = null;
ZPP_Vec2.prototype.immutable = function() {
	if(this._immutable) {
		throw new js._Boot.HaxeError("Error: Vec2 is immutable");
	}
	if(this._isimmutable != null) {
		this._isimmutable();
	}
};
ZPP_Vec2.prototype.outer = null;
ZPP_Vec2.prototype.wrapper = function() {
	if(this.outer == null) {
		this.outer = new Vec2();
		var o = this.outer.zpp_inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = o;
		this.outer.zpp_inner = this;
	}
	return this.outer;
};
ZPP_Vec2.prototype.weak = null;
ZPP_Vec2.prototype.free = function() {
	if(this.outer != null) {
		this.outer.zpp_inner = null;
		this.outer = null;
	}
	this._isimmutable = null;
	this._validate = null;
	this._invalidate = null;
};
ZPP_Vec2.prototype.alloc = function() {
	this.weak = false;
};
ZPP_Vec2.prototype.next = null;
ZPP_Vec2.prototype.elem = function() {
	return this;
};
ZPP_Vec2.prototype.begin = function() {
	return this.next;
};
ZPP_Vec2.prototype._inuse = null;
ZPP_Vec2.prototype.modified = null;
ZPP_Vec2.prototype.pushmod = null;
ZPP_Vec2.prototype.length = null;
ZPP_Vec2.prototype.setbegin = function(i) {
	this.next = i;
	this.modified = true;
	this.pushmod = true;
};
ZPP_Vec2.prototype.add = function(o) {
	o._inuse = true;
	o.next = this.next;
	this.next = o;
	this.modified = true;
	this.length++;
	return o;
};
ZPP_Vec2.prototype.inlined_add = function(o) {
	o._inuse = true;
	o.next = this.next;
	this.next = o;
	this.modified = true;
	this.length++;
	return o;
};
ZPP_Vec2.prototype.addAll = function(x) {
	var cx_ite = x.next;
	while(cx_ite != null) {
		this.add(cx_ite);
		cx_ite = cx_ite.next;
	}
};
ZPP_Vec2.prototype.insert = function(cur,o) {
	o._inuse = true;
	if(cur == null) {
		o.next = this.next;
		this.next = o;
	} else {
		o.next = cur.next;
		cur.next = o;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return o;
};
ZPP_Vec2.prototype.inlined_insert = function(cur,o) {
	o._inuse = true;
	if(cur == null) {
		o.next = this.next;
		this.next = o;
	} else {
		o.next = cur.next;
		cur.next = o;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return o;
};
ZPP_Vec2.prototype.pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret._inuse = false;
	if(this.next == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZPP_Vec2.prototype.inlined_pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret._inuse = false;
	if(this.next == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZPP_Vec2.prototype.pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
};
ZPP_Vec2.prototype.inlined_pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
};
ZPP_Vec2.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.next;
	while(cur != null) {
		if(cur == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.next;
				ret = old.next;
				this.next = ret;
				if(this.next == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			old._inuse = false;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZPP_Vec2.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZPP_Vec2.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	while(cur != null) {
		if(cur == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.next;
				ret = old.next;
				this.next = ret;
				if(this.next == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			old._inuse = false;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZPP_Vec2.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.next;
				ret1 = old.next;
				this.next = ret1;
				if(this.next == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			old._inuse = false;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZPP_Vec2.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.next;
		ret = old.next;
		this.next = ret;
		if(this.next == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	old._inuse = false;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZPP_Vec2.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.next;
		ret = old.next;
		this.next = ret;
		if(this.next == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	old._inuse = false;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZPP_Vec2.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZPP_Vec2.prototype.clear = function() {
};
ZPP_Vec2.prototype.inlined_clear = function() {
};
ZPP_Vec2.prototype.reverse = function() {
	var cur = this.next;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.next = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZPP_Vec2.prototype.empty = function() {
	return this.next == null;
};
ZPP_Vec2.prototype.size = function() {
	return this.length;
};
ZPP_Vec2.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.next;
	while(cx_ite != null) {
		if(cx_ite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZPP_Vec2.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.next;
	while(cx_ite != null) {
		if(cx_ite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZPP_Vec2.prototype.front = function() {
	return this.next;
};
ZPP_Vec2.prototype.back = function() {
	var ret = this.next;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret;
};
ZPP_Vec2.prototype.iterator_at = function(ind) {
	var ret = this.next;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZPP_Vec2.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it;
	} else {
		return null;
	}
};
ZPP_Vec2.prototype.x = null;
ZPP_Vec2.prototype.y = null;
ZPP_Vec2.prototype.copy = function() {
	var x = this.x;
	var y = this.y;
	var ret;
	if(ZPP_Vec2.zpp_pool == null) {
		ret = new ZPP_Vec2();
	} else {
		ret = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.weak = false;
	ret._immutable = false;
	ret.x = x;
	ret.y = y;
	return ret;
};
ZPP_Vec2.prototype.toString = function() {
	return "{ x: " + this.x + " y: " + this.y + " }";
};
ZPP_Vec2.prototype.__class__ = ZPP_Vec2;
var ZPP_Vec3 = zpp_nape.geom.ZPP_Vec3 = function() {
	this._validate = null;
	this.immutable = false;
	this.z = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this.outer = null;
	this.immutable = false;
	this._validate = null;
};
ZPP_Vec3.__name__ = ["zpp_nape","geom","ZPP_Vec3"];
ZPP_Vec3.prototype.outer = null;
ZPP_Vec3.prototype.x = null;
ZPP_Vec3.prototype.y = null;
ZPP_Vec3.prototype.z = null;
ZPP_Vec3.prototype.immutable = null;
ZPP_Vec3.prototype._validate = null;
ZPP_Vec3.prototype.validate = function() {
	if(this._validate != null) {
		this._validate();
	}
};
ZPP_Vec3.prototype.__class__ = ZPP_Vec3;
var ZPP_VecMath = zpp_nape.geom.ZPP_VecMath = function() { };
ZPP_VecMath.__name__ = ["zpp_nape","geom","ZPP_VecMath"];
ZPP_VecMath.vec_dsq = function(ax,ay,bx,by) {
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - by;
	return dx * dx + dy * dy;
};
ZPP_VecMath.vec_distance = function(ax,ay,bx,by) {
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - by;
	return Math.sqrt(dx * dx + dy * dy);
};
ZPP_VecMath.prototype.__class__ = ZPP_VecMath;
var ZPP_Interactor = zpp_nape.phys.ZPP_Interactor = function() {
	this.wrap_cbTypes = null;
	this.cbSet = null;
	this.cbTypes = null;
	this.group = null;
	this.cbsets = null;
	this.icompound = null;
	this.ibody = null;
	this.ishape = null;
	this.userData = null;
	this.id = 0;
	this.outer_i = null;
	this.id = zpp_nape.ZPP_ID.Interactor();
	this.cbsets = new ZNPList_ZPP_CallbackSet();
	this.cbTypes = new ZNPList_ZPP_CbType();
};
ZPP_Interactor.__name__ = ["zpp_nape","phys","ZPP_Interactor"];
ZPP_Interactor.get = function(i1,i2) {
	var id = i1.id < i2.id?i1.id:i2.id;
	var di = i1.id < i2.id?i2.id:i1.id;
	var xs = i1.cbsets.length < i2.cbsets.length?i1.cbsets:i2.cbsets;
	var ret = null;
	var cx_ite = xs.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x.id == id && x.di == di) {
			ret = x;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZPP_Interactor.int_callback = function(set,x,cb) {
	var o1 = set.int1;
	var o2 = set.int2;
	var tmp;
	var _this = x.options1;
	var xs = o1.cbTypes;
	if(_this.nonemptyintersection(xs,_this.includes) && !_this.nonemptyintersection(xs,_this.excludes)) {
		var _this1 = x.options2;
		var xs1 = o2.cbTypes;
		if(_this1.nonemptyintersection(xs1,_this1.includes)) {
			tmp = !_this1.nonemptyintersection(xs1,_this1.excludes);
		} else {
			tmp = false;
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		cb.int1 = o1;
		cb.int2 = o2;
	} else {
		cb.int1 = o2;
		cb.int2 = o1;
	}
};
ZPP_Interactor.prototype.outer_i = null;
ZPP_Interactor.prototype.id = null;
ZPP_Interactor.prototype.userData = null;
ZPP_Interactor.prototype.ishape = null;
ZPP_Interactor.prototype.ibody = null;
ZPP_Interactor.prototype.icompound = null;
ZPP_Interactor.prototype.isShape = function() {
	return this.ishape != null;
};
ZPP_Interactor.prototype.isBody = function() {
	return this.ibody != null;
};
ZPP_Interactor.prototype.isCompound = function() {
	return this.icompound != null;
};
ZPP_Interactor.prototype.__iaddedToSpace = function() {
	if(this.group != null) {
		this.group.interactors.add(this);
	}
	var cx_ite = this.cbTypes.head;
	while(cx_ite != null) {
		cx_ite.elt.interactors.add(this);
		cx_ite = cx_ite.next;
	}
	this.alloc_cbSet();
};
ZPP_Interactor.prototype.__iremovedFromSpace = function() {
	if(this.group != null) {
		this.group.interactors.remove(this);
	}
	var cx_ite = this.cbTypes.head;
	while(cx_ite != null) {
		cx_ite.elt.interactors.remove(this);
		cx_ite = cx_ite.next;
	}
	this.dealloc_cbSet();
};
ZPP_Interactor.prototype.wake = function() {
	if(this.ishape != null) {
		var body = this.ishape.body;
		if(body != null && body.space != null) {
			body.space.non_inlined_wake(body);
		}
	} else if(this.ibody != null) {
		if(this.ibody.space != null) {
			this.ibody.space.non_inlined_wake(this.ibody);
		}
	} else if(this.icompound.space != null) {
		this.icompound.space.wakeCompound(this.icompound);
	}
};
ZPP_Interactor.prototype.cbsets = null;
ZPP_Interactor.prototype.getSpace = function() {
	if(this.ishape != null) {
		if(this.ishape.body == null) {
			return null;
		} else {
			return this.ishape.body.space;
		}
	} else if(this.ibody != null) {
		return this.ibody.space;
	} else {
		return this.icompound.space;
	}
};
ZPP_Interactor.prototype.group = null;
ZPP_Interactor.prototype.cbTypes = null;
ZPP_Interactor.prototype.cbSet = null;
ZPP_Interactor.prototype.wrap_cbTypes = null;
ZPP_Interactor.prototype.setupcbTypes = function() {
	this.wrap_cbTypes = ZPP_CbTypeList.get(this.cbTypes);
	this.wrap_cbTypes.zpp_inner.adder = $bind(this,this.wrap_cbTypes_adder);
	this.wrap_cbTypes.zpp_inner.subber = $bind(this,this.wrap_cbTypes_subber);
	this.wrap_cbTypes.zpp_inner.dontremove = true;
	this.wrap_cbTypes.zpp_inner._modifiable = $bind(this,this.immutable_cbTypes);
};
ZPP_Interactor.prototype.immutable_cbTypes = function() {
	this.immutable_midstep("Interactor::cbTypes");
};
ZPP_Interactor.prototype.wrap_cbTypes_subber = function(pcb) {
	var cb = pcb.zpp_inner;
	if(this.cbTypes.has(cb)) {
		var space = this.ishape != null?this.ishape.body == null?null:this.ishape.body.space:this.ibody != null?this.ibody.space:this.icompound.space;
		if(space != null) {
			this.dealloc_cbSet();
			cb.interactors.remove(this);
		}
		this.cbTypes.remove(cb);
		if(space != null) {
			this.alloc_cbSet();
			this.wake();
		}
	}
};
ZPP_Interactor.prototype.wrap_cbTypes_adder = function(cb) {
	this.insert_cbtype(cb.zpp_inner);
	return false;
};
ZPP_Interactor.prototype.insert_cbtype = function(cb) {
	if(!this.cbTypes.has(cb)) {
		var space = this.ishape != null?this.ishape.body == null?null:this.ishape.body.space:this.ibody != null?this.ibody.space:this.icompound.space;
		if(space != null) {
			this.dealloc_cbSet();
			cb.interactors.add(this);
		}
		var pre = null;
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			if(cb.id < cx_ite.elt.id) {
				break;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		var _this = this.cbTypes;
		var ret;
		if(ZNPNode_ZPP_CbType.zpp_pool == null) {
			ret = new ZNPNode_ZPP_CbType();
		} else {
			ret = ZNPNode_ZPP_CbType.zpp_pool;
			ZNPNode_ZPP_CbType.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.elt = cb;
		var temp = ret;
		if(pre == null) {
			temp.next = _this.head;
			_this.head = temp;
		} else {
			temp.next = pre.next;
			pre.next = temp;
		}
		_this.pushmod = _this.modified = true;
		_this.length++;
		if(space != null) {
			this.alloc_cbSet();
			this.wake();
		}
	}
};
ZPP_Interactor.prototype.alloc_cbSet = function() {
	var space = this.ishape != null?this.ishape.body == null?null:this.ishape.body.space:this.ibody != null?this.ibody.space:this.icompound.space;
	if((this.cbSet = space.cbsets.get(this.cbTypes)) != null) {
		this.cbSet.count++;
		this.cbSet.interactors.add(this);
		this.cbSet.validate();
		space.freshInteractorType(this);
	}
};
ZPP_Interactor.prototype.dealloc_cbSet = function() {
	var space = this.ishape != null?this.ishape.body == null?null:this.ishape.body.space:this.ibody != null?this.ibody.space:this.icompound.space;
	if(this.cbSet != null) {
		this.cbSet.interactors.remove(this);
		space.nullInteractorType(this);
		if(--this.cbSet.count == 0) {
			space.cbsets.remove(this.cbSet);
			var o = this.cbSet;
			o.listeners.clear();
			o.zip_listeners = true;
			o.bodylisteners.clear();
			o.zip_bodylisteners = true;
			o.conlisteners.clear();
			o.zip_conlisteners = true;
			while(o.cbTypes.head != null) o.cbTypes.pop_unsafe().cbsets.remove(o);
			o.next = ZPP_CbSet.zpp_pool;
			ZPP_CbSet.zpp_pool = o;
		}
		this.cbSet = null;
	}
};
ZPP_Interactor.prototype.setGroup = function(group) {
	if(this.group != group) {
		var inspace = (this.ishape != null?this.ishape.body == null?null:this.ishape.body.space:this.ibody != null?this.ibody.space:this.icompound.space) != null;
		if(inspace && this.group != null) {
			this.group.interactors.remove(this);
		}
		this.group = group;
		if(inspace && group != null) {
			group.interactors.add(this);
		}
		if(inspace) {
			if(this.ishape != null) {
				this.ishape.body.wake();
			} else if(this.ibody != null) {
				this.ibody.wake();
			} else {
				this.icompound.wake();
			}
		}
	}
};
ZPP_Interactor.prototype.immutable_midstep = function(n) {
	if(this.ibody != null) {
		var _this = this.ibody;
		if(_this.space != null && _this.space.midstep) {
			throw new js._Boot.HaxeError("Error: " + n + " cannot be set during a space step()");
		}
	} else if(this.ishape != null) {
		this.ishape.__immutable_midstep(n);
	} else {
		this.icompound.__imutable_midstep(n);
	}
};
ZPP_Interactor.prototype.lookup_group = function() {
	var cur = this;
	while(cur != null && cur.group == null) if(cur.ishape != null) {
		cur = cur.ishape.body;
	} else if(cur.icompound != null) {
		cur = cur.icompound.compound;
	} else {
		cur = cur.ibody.compound;
	}
	if(cur == null) {
		return null;
	} else {
		return cur.group;
	}
};
ZPP_Interactor.prototype.copyto = function(ret) {
	ret.zpp_inner_i.group = this.group;
	var _this = this.outer_i;
	if(_this.zpp_inner_i.wrap_cbTypes == null) {
		_this.zpp_inner_i.setupcbTypes();
	}
	var _this1 = _this.zpp_inner_i.wrap_cbTypes;
	_this1.zpp_inner.valmod();
	var _g = CbTypeIterator.get(_this1);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this2 = _g.zpp_inner;
		_this2.zpp_inner.valmod();
		if(_this2.zpp_inner.zip_length) {
			_this2.zpp_inner.zip_length = false;
			_this2.zpp_inner.user_length = _this2.zpp_inner.inner.length;
		}
		var length = _this2.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = CbTypeIterator.zpp_pool;
			CbTypeIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var cb = _g.zpp_inner.at(_g.zpp_i++);
		if(ret.zpp_inner_i.wrap_cbTypes == null) {
			ret.zpp_inner_i.setupcbTypes();
		}
		var _this3 = ret.zpp_inner_i.wrap_cbTypes;
		if(_this3.zpp_inner.reverse_flag) {
			_this3.push(cb);
		} else {
			_this3.unshift(cb);
		}
	}
	if(this.userData != null) {
		ret.zpp_inner_i.userData = Reflect.copy(this.userData);
	}
};
ZPP_Interactor.prototype.__class__ = ZPP_Interactor;
var ZPP_Body = zpp_nape.phys.ZPP_Body = function() {
	this.wrap_worldCOM = null;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_aabb = false;
	this.aabb = null;
	this.norotate = false;
	this.sinertia = 0.0;
	this.iinertia = 0.0;
	this.cinertia = 0.0;
	this.zip_inertia = false;
	this.inertia = 0.0;
	this.inertiaMode = 0;
	this.zip_gravMassScale = false;
	this.gravMassScale = 0.0;
	this.gravMassMode = 0;
	this.zip_gravMass = false;
	this.gravMass = 0.0;
	this.nomove = false;
	this.cmass = 0.0;
	this.smass = 0.0;
	this.imass = 0.0;
	this.massMode = 0;
	this.zip_mass = false;
	this.mass = 0.0;
	this.zip_axis = false;
	this.axisy = 0.0;
	this.axisx = 0.0;
	this.rot = 0.0;
	this.pre_rot = 0.0;
	this.kinangvel = 0.0;
	this.torque = 0.0;
	this.angvel = 0.0;
	this.wrapcvel = null;
	this.wrap_svel = null;
	this.svely = 0.0;
	this.svelx = 0.0;
	this.wrap_kinvel = null;
	this.kinvely = 0.0;
	this.kinvelx = 0.0;
	this.wrap_force = null;
	this.forcey = 0.0;
	this.forcex = 0.0;
	this.wrap_vel = null;
	this.vely = 0.0;
	this.velx = 0.0;
	this.wrap_pos = null;
	this.posy = 0.0;
	this.posx = 0.0;
	this.pre_posy = 0.0;
	this.pre_posx = 0.0;
	this.disableCCD = false;
	this.bulletEnabled = false;
	this.bullet = false;
	this.sweepRadius = 0.0;
	this.sweepFrozen = false;
	this.sweep_angvel = 0.0;
	this.sweepTime = 0.0;
	this.graph_depth = 0;
	this.component = null;
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_arbiters = null;
	this.arbiters = null;
	this.space = null;
	this.wrap_shapes = null;
	this.shapes = null;
	this.compound = null;
	this.type = 0;
	this.world = false;
	this.outer = null;
	ZPP_Interactor.call(this);
	this.ibody = this;
	this.world = false;
	this.bulletEnabled = false;
	this.sweepTime = 0;
	this.sweep_angvel = 0;
	this.norotate = this.nomove = false;
	this.disableCCD = false;
	this.posx = 0;
	this.posy = 0;
	this.rot = 0;
	this.axisx = 0;
	this.axisy = 1;
	this.svelx = 0;
	this.svely = 0;
	this.velx = 0;
	this.vely = 0;
	this.kinvelx = 0;
	this.kinvely = 0;
	this.forcex = 0;
	this.forcey = 0;
	this.torque = this.angvel = this.kinangvel = 0;
	this.pre_posx = Infinity;
	this.pre_posy = Infinity;
	this.pre_rot = Infinity;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.zip_aabb = true;
	var ret;
	if(ZPP_AABB.zpp_pool == null) {
		ret = new ZPP_AABB();
	} else {
		ret = ZPP_AABB.zpp_pool;
		ZPP_AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.minx = 0;
	ret.miny = 0;
	ret.maxx = 0;
	ret.maxy = 0;
	this.aabb = ret;
	this.aabb._immutable = true;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.massMode = 0;
	this.gravMassMode = 0;
	this.gravMassScale = 1.0;
	this.inertiaMode = 0;
	this.arbiters = new ZNPList_ZPP_Arbiter();
	this.constraints = new ZNPList_ZPP_Constraint();
	this.shapes = new ZNPList_ZPP_Shape();
	this.wrap_shapes = ZPP_ShapeList.get(this.shapes);
	this.wrap_shapes.zpp_inner.adder = $bind(this,this.shapes_adder);
	this.wrap_shapes.zpp_inner.subber = $bind(this,this.shapes_subber);
	this.wrap_shapes.zpp_inner._invalidate = $bind(this,this.shapes_invalidate);
	this.wrap_shapes.zpp_inner._modifiable = $bind(this,this.shapes_modifiable);
	this.kinematicDelaySleep = false;
};
ZPP_Body.__name__ = ["zpp_nape","phys","ZPP_Body"];
ZPP_Body.__super__ = ZPP_Interactor;
// for(var k in ZPP_Interactor.prototype ) ZPP_Body.prototype[k] = ZPP_Interactor.prototype[k];
ZPP_Body.prototype = Object.create(ZPP_Interactor.prototype);
ZPP_Body.bodysetlt = function(a,b) {
	return a.id < b.id;
};
ZPP_Body.__static = function() {
	if(ZPP_Flags.BodyType_STATIC == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.BodyType_STATIC = new BodyType();
		ZPP_Flags.internal = false;
	}
	var ret = new Body(ZPP_Flags.BodyType_STATIC);
	var si = ret.zpp_inner;
	si.world = true;
	si.wrap_shapes.zpp_inner.immutable = true;
	si.smass = si.imass = si.cmass = si.mass = si.gravMass = 0.0;
	si.sinertia = si.iinertia = si.cinertia = si.inertia = 0.0;
	si.cbTypes.clear();
	return ret;
};
ZPP_Body.prototype.outer = null;
ZPP_Body.prototype.world = null;
ZPP_Body.prototype.type = null;
ZPP_Body.prototype.isStatic = function() {
	return this.type == 1;
};
ZPP_Body.prototype.isDynamic = function() {
	return this.type == 2;
};
ZPP_Body.prototype.isKinematic = function() {
	return this.type == 3;
};
ZPP_Body.prototype.invalidate_type = function() {
	this.invalidate_mass();
	this.invalidate_inertia();
};
ZPP_Body.prototype.compound = null;
ZPP_Body.prototype.shapes = null;
ZPP_Body.prototype.wrap_shapes = null;
ZPP_Body.prototype.invalidate_shapes = function() {
	this.zip_aabb = true;
	this.zip_localCOM = true;
	this.zip_worldCOM = true;
	this.invalidate_mass();
	this.invalidate_inertia();
};
ZPP_Body.prototype.space = null;
ZPP_Body.prototype.arbiters = null;
ZPP_Body.prototype.wrap_arbiters = null;
ZPP_Body.prototype.constraints = null;
ZPP_Body.prototype.wrap_constraints = null;
ZPP_Body.prototype.component = null;
ZPP_Body.prototype.graph_depth = null;
ZPP_Body.prototype.init_bodysetlist = function() {
	if(ZPP_Body.bodyset == null) {
		ZPP_Body.bodyset = new ZPP_Set_ZPP_Body();
		ZPP_Body.bodyset.lt = ZPP_Body.bodysetlt;
		ZPP_Body.bodystack = new ZNPList_ZPP_Body();
	}
};
ZPP_Body.prototype.connectedBodies_cont = function(b) {
	if(ZPP_Body.bodyset.try_insert_bool(b.zpp_inner)) {
		ZPP_Body.bodystack.add(b.zpp_inner);
		b.zpp_inner.graph_depth = ZPP_Body.cur_graph_depth + 1;
	}
};
ZPP_Body.prototype.connectedBodies = function(depth,output) {
	var _gthis = this;
	if(ZPP_Body.bodyset == null) {
		ZPP_Body.bodyset = new ZPP_Set_ZPP_Body();
		ZPP_Body.bodyset.lt = ZPP_Body.bodysetlt;
		ZPP_Body.bodystack = new ZNPList_ZPP_Body();
	}
	var ret = output == null?new BodyList():output;
	ZPP_Body.bodystack.add(this);
	ZPP_Body.bodyset.insert(this);
	this.graph_depth = 0;
	while(ZPP_Body.bodystack.head != null) {
		var cur = ZPP_Body.bodystack.pop_unsafe();
		if(cur.graph_depth == depth) {
			continue;
		}
		ZPP_Body.cur_graph_depth = cur.graph_depth;
		var cx_ite = cur.constraints.head;
		while(cx_ite != null) {
			cx_ite.elt.outer.visitBodies($bind(this,this.connectedBodies_cont));
			cx_ite = cx_ite.next;
		}
	}
	var _this = ZPP_Body.bodyset;
	if(_this.parent != null) {
		var cur1 = _this.parent;
		while(cur1 != null) if(cur1.prev != null) {
			cur1 = cur1.prev;
		} else if(cur1.next != null) {
			cur1 = cur1.next;
		} else {
			var b = cur1.data;
			if(b != _gthis) {
				var obj = b.outer;
				if(ret.zpp_inner.reverse_flag) {
					ret.push(obj);
				} else {
					ret.unshift(obj);
				}
			}
			var ret1 = cur1.parent;
			if(ret1 != null) {
				if(cur1 == ret1.prev) {
					ret1.prev = null;
				} else {
					ret1.next = null;
				}
				cur1.parent = null;
			}
			var o = cur1;
			o.data = null;
			o.lt = null;
			o.swapped = null;
			o.next = ZPP_Set_ZPP_Body.zpp_pool;
			ZPP_Set_ZPP_Body.zpp_pool = o;
			cur1 = ret1;
		}
		_this.parent = null;
	}
	return ret;
};
ZPP_Body.prototype.interactingBodies = function(arbiter_type,depth,output) {
	var _gthis = this;
	if(ZPP_Body.bodyset == null) {
		ZPP_Body.bodyset = new ZPP_Set_ZPP_Body();
		ZPP_Body.bodyset.lt = ZPP_Body.bodysetlt;
		ZPP_Body.bodystack = new ZNPList_ZPP_Body();
	}
	var ret = output == null?new BodyList():output;
	ZPP_Body.bodyset.insert(this);
	ZPP_Body.bodystack.add(this);
	this.graph_depth = 0;
	while(ZPP_Body.bodystack.head != null) {
		var cur = ZPP_Body.bodystack.pop_unsafe();
		if(cur.graph_depth == depth) {
			continue;
		}
		var cx_ite = cur.arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if((arb.type & arbiter_type) != 0) {
				var other = arb.b1 == cur?arb.b2:arb.b1;
				if(ZPP_Body.bodyset.try_insert_bool(other)) {
					ZPP_Body.bodystack.add(other);
					other.graph_depth = cur.graph_depth + 1;
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	var _this = ZPP_Body.bodyset;
	if(_this.parent != null) {
		var cur1 = _this.parent;
		while(cur1 != null) if(cur1.prev != null) {
			cur1 = cur1.prev;
		} else if(cur1.next != null) {
			cur1 = cur1.next;
		} else {
			var b = cur1.data;
			if(b != _gthis) {
				var obj = b.outer;
				if(ret.zpp_inner.reverse_flag) {
					ret.push(obj);
				} else {
					ret.unshift(obj);
				}
			}
			var ret1 = cur1.parent;
			if(ret1 != null) {
				if(cur1 == ret1.prev) {
					ret1.prev = null;
				} else {
					ret1.next = null;
				}
				cur1.parent = null;
			}
			var o = cur1;
			o.data = null;
			o.lt = null;
			o.swapped = null;
			o.next = ZPP_Set_ZPP_Body.zpp_pool;
			ZPP_Set_ZPP_Body.zpp_pool = o;
			cur1 = ret1;
		}
		_this.parent = null;
	}
	return ret;
};
ZPP_Body.prototype.atRest = function(dt) {
	if(this.type != 2) {
		return this.component.sleeping;
	} else {
		var linSq = Config.linearSleepThreshold;
		linSq *= linSq;
		var cansleep;
		if(this.velx * this.velx + this.vely * this.vely > linSq) {
			cansleep = false;
		} else {
			var ax = this.posx;
			var ay = this.posy;
			var bx = this.pre_posx;
			var by = this.pre_posy;
			var dx = 0.0;
			var dy = 0.0;
			dx = ax - bx;
			dy = ay - by;
			if(dx * dx + dy * dy > 0.25 * linSq * dt * dt) {
				cansleep = false;
			} else {
				var dx1 = 0.0;
				var dy1 = 0.0;
				dx1 = this.aabb.maxx - this.aabb.minx;
				dy1 = this.aabb.maxy - this.aabb.miny;
				var idl = dx1 * dx1 + dy1 * dy1;
				var angSq = Config.angularSleepThreshold;
				angSq *= angSq;
				if(4 * this.angvel * this.angvel * idl > angSq) {
					cansleep = false;
				} else {
					var dr = this.rot - this.pre_rot;
					if(dr * dr * idl > angSq * dt * dt) {
						cansleep = false;
					} else {
						cansleep = true;
					}
				}
			}
		}
		if(!cansleep) {
			this.component.waket = this.space.stamp;
		}
		return this.component.waket + Config.sleepDelay < this.space.stamp;
	}
};
ZPP_Body.prototype.refreshArbiters = function() {
	var cx_ite = this.arbiters.head;
	while(cx_ite != null) {
		cx_ite.elt.invalidated = true;
		cx_ite = cx_ite.next;
	}
};
ZPP_Body.prototype.sweepTime = null;
ZPP_Body.prototype.sweep_angvel = null;
ZPP_Body.prototype.sweepFrozen = null;
ZPP_Body.prototype.sweepRadius = null;
ZPP_Body.prototype.bullet = null;
ZPP_Body.prototype.bulletEnabled = null;
ZPP_Body.prototype.disableCCD = null;
ZPP_Body.prototype.sweepIntegrate = function(dt) {
	var delta = dt - this.sweepTime;
	if(delta != 0) {
		this.sweepTime = dt;
		this.posx += this.velx * delta;
		this.posy += this.vely * delta;
		if(this.angvel != 0) {
			var dr = this.sweep_angvel * delta;
			this.rot += dr;
			if(dr * dr > 0.0001) {
				this.axisx = Math.sin(this.rot);
				this.axisy = Math.cos(this.rot);
			} else {
				var d2 = dr * dr;
				var p = 1 - 0.5 * d2;
				var m = 1 - d2 * d2 / 8;
				var nx = (p * this.axisx + dr * this.axisy) * m;
				this.axisy = (p * this.axisy - dr * this.axisx) * m;
				this.axisx = nx;
			}
		}
	}
};
ZPP_Body.prototype.sweepValidate = function(s) {
	if(s.type == 0) {
		s.worldCOMx = this.posx + (this.axisy * s.localCOMx - this.axisx * s.localCOMy);
		s.worldCOMy = this.posy + (s.localCOMx * this.axisx + s.localCOMy * this.axisy);
	} else {
		var p = s.polygon;
		var li = p.lverts.next;
		var cx_ite = p.gverts.next;
		while(cx_ite != null) {
			var g = cx_ite;
			var l = li;
			li = li.next;
			g.x = this.posx + (this.axisy * l.x - this.axisx * l.y);
			g.y = this.posy + (l.x * this.axisx + l.y * this.axisy);
			cx_ite = cx_ite.next;
		}
		var ite = p.edges.head;
		var cx_ite1 = p.gverts.next;
		var u = cx_ite1;
		cx_ite1 = cx_ite1.next;
		while(cx_ite1 != null) {
			var v = cx_ite1;
			var e = ite.elt;
			ite = ite.next;
			e.gnormx = this.axisy * e.lnormx - this.axisx * e.lnormy;
			e.gnormy = e.lnormx * this.axisx + e.lnormy * this.axisy;
			e.gprojection = this.posx * e.gnormx + this.posy * e.gnormy + e.lprojection;
			e.tp0 = u.y * e.gnormx - u.x * e.gnormy;
			e.tp1 = v.y * e.gnormx - v.x * e.gnormy;
			u = v;
			cx_ite1 = cx_ite1.next;
		}
		var v1 = p.gverts.next;
		var e1 = ite.elt;
		e1.gnormx = this.axisy * e1.lnormx - this.axisx * e1.lnormy;
		e1.gnormy = e1.lnormx * this.axisx + e1.lnormy * this.axisy;
		e1.gprojection = this.posx * e1.gnormx + this.posy * e1.gnormy + e1.lprojection;
		e1.tp0 = u.y * e1.gnormx - u.x * e1.gnormy;
		e1.tp1 = v1.y * e1.gnormx - v1.x * e1.gnormy;
	}
};
ZPP_Body.prototype.pre_posx = null;
ZPP_Body.prototype.pre_posy = null;
ZPP_Body.prototype.posx = null;
ZPP_Body.prototype.posy = null;
ZPP_Body.prototype.wrap_pos = null;
ZPP_Body.prototype.velx = null;
ZPP_Body.prototype.vely = null;
ZPP_Body.prototype.wrap_vel = null;
ZPP_Body.prototype.forcex = null;
ZPP_Body.prototype.forcey = null;
ZPP_Body.prototype.wrap_force = null;
ZPP_Body.prototype.kinvelx = null;
ZPP_Body.prototype.kinvely = null;
ZPP_Body.prototype.wrap_kinvel = null;
ZPP_Body.prototype.svelx = null;
ZPP_Body.prototype.svely = null;
ZPP_Body.prototype.wrap_svel = null;
ZPP_Body.prototype.invalidate_pos = function() {
	var cx_ite = this.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		if(s.type == 1) {
			s.polygon.invalidate_gverts();
			s.polygon.invalidate_gaxi();
		}
		s.invalidate_worldCOM();
		cx_ite = cx_ite.next;
	}
	this.zip_worldCOM = true;
};
ZPP_Body.prototype.pos_invalidate = function(pos) {
	this.immutable_midstep("Body::position");
	if(this.type == 1 && this.space != null) {
		throw new js._Boot.HaxeError("Error: Cannot move a static object once inside a Space");
	}
	if(!(this.posx == pos.x && this.posy == pos.y)) {
		this.posx = pos.x;
		this.posy = pos.y;
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.type == 1) {
				s.polygon.invalidate_gverts();
				s.polygon.invalidate_gaxi();
			}
			s.invalidate_worldCOM();
			cx_ite = cx_ite.next;
		}
		this.zip_worldCOM = true;
		this.wake();
	}
};
ZPP_Body.prototype.pos_validate = function() {
	this.wrap_pos.zpp_inner.x = this.posx;
	this.wrap_pos.zpp_inner.y = this.posy;
};
ZPP_Body.prototype.vel_invalidate = function(vel) {
	if(this.type == 1) {
		throw new js._Boot.HaxeError("Error: Static body cannot have its velocity set.");
	}
	this.velx = vel.x;
	this.vely = vel.y;
	this.wake();
};
ZPP_Body.prototype.vel_validate = function() {
	this.wrap_vel.zpp_inner.x = this.velx;
	this.wrap_vel.zpp_inner.y = this.vely;
};
ZPP_Body.prototype.kinvel_invalidate = function(vel) {
	this.kinvelx = vel.x;
	this.kinvely = vel.y;
	this.wake();
};
ZPP_Body.prototype.kinvel_validate = function() {
	this.wrap_kinvel.zpp_inner.x = this.kinvelx;
	this.wrap_kinvel.zpp_inner.y = this.kinvely;
};
ZPP_Body.prototype.svel_invalidate = function(vel) {
	this.svelx = vel.x;
	this.svely = vel.y;
	this.wake();
};
ZPP_Body.prototype.svel_validate = function() {
	this.wrap_svel.zpp_inner.x = this.svelx;
	this.wrap_svel.zpp_inner.y = this.svely;
};
ZPP_Body.prototype.force_invalidate = function(force) {
	if(this.type != 2) {
		throw new js._Boot.HaxeError("Error: Non-dynamic body cannot have force applied.");
	}
	this.forcex = force.x;
	this.forcey = force.y;
	this.wake();
};
ZPP_Body.prototype.force_validate = function() {
	this.wrap_force.zpp_inner.x = this.forcex;
	this.wrap_force.zpp_inner.y = this.forcey;
};
ZPP_Body.prototype.setupPosition = function() {
	var x = this.posx;
	var y = this.posy;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_pos = ret;
	this.wrap_pos.zpp_inner._inuse = true;
	if(this.world) {
		this.wrap_pos.zpp_inner._immutable = true;
	} else {
		this.wrap_pos.zpp_inner._invalidate = $bind(this,this.pos_invalidate);
		this.wrap_pos.zpp_inner._validate = $bind(this,this.pos_validate);
	}
};
ZPP_Body.prototype.setupVelocity = function() {
	var x = this.velx;
	var y = this.vely;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_vel = ret;
	this.wrap_vel.zpp_inner._inuse = true;
	if(this.world) {
		this.wrap_vel.zpp_inner._immutable = true;
	} else {
		this.wrap_vel.zpp_inner._invalidate = $bind(this,this.vel_invalidate);
		this.wrap_vel.zpp_inner._validate = $bind(this,this.vel_validate);
	}
};
ZPP_Body.prototype.setupkinvel = function() {
	var x = this.kinvelx;
	var y = this.kinvely;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_kinvel = ret;
	this.wrap_kinvel.zpp_inner._inuse = true;
	if(this.world) {
		this.wrap_kinvel.zpp_inner._immutable = true;
	} else {
		this.wrap_kinvel.zpp_inner._invalidate = $bind(this,this.kinvel_invalidate);
		this.wrap_kinvel.zpp_inner._validate = $bind(this,this.kinvel_validate);
	}
};
ZPP_Body.prototype.setupsvel = function() {
	var x = this.svelx;
	var y = this.svely;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_svel = ret;
	this.wrap_svel.zpp_inner._inuse = true;
	if(this.world) {
		this.wrap_svel.zpp_inner._immutable = true;
	} else {
		this.wrap_svel.zpp_inner._invalidate = $bind(this,this.svel_invalidate);
		this.wrap_svel.zpp_inner._validate = $bind(this,this.svel_validate);
	}
};
ZPP_Body.prototype.setupForce = function() {
	var x = this.forcex;
	var y = this.forcey;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_force = ret;
	this.wrap_force.zpp_inner._inuse = true;
	if(this.world) {
		this.wrap_force.zpp_inner._immutable = true;
	} else {
		this.wrap_force.zpp_inner._invalidate = $bind(this,this.force_invalidate);
		this.wrap_force.zpp_inner._validate = $bind(this,this.force_validate);
	}
};
ZPP_Body.prototype.cvel_validate = function() {
	this.wrapcvel.zpp_inner.x = this.velx + this.kinvelx;
	this.wrapcvel.zpp_inner.y = this.vely + this.kinvely;
	this.wrapcvel.zpp_inner.z = this.angvel + this.kinangvel;
};
ZPP_Body.prototype.wrapcvel = null;
ZPP_Body.prototype.setup_cvel = function() {
	this.wrapcvel = Vec3.get();
	this.wrapcvel.zpp_inner.immutable = true;
	this.wrapcvel.zpp_inner._validate = $bind(this,this.cvel_validate);
};
ZPP_Body.prototype.angvel = null;
ZPP_Body.prototype.torque = null;
ZPP_Body.prototype.kinangvel = null;
ZPP_Body.prototype.pre_rot = null;
ZPP_Body.prototype.rot = null;
ZPP_Body.prototype.invalidate_rot = function() {
	this.zip_axis = true;
	var cx_ite = this.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		if(s.type == 1) {
			s.polygon.invalidate_gverts();
			s.polygon.invalidate_gaxi();
		}
		s.invalidate_worldCOM();
		cx_ite = cx_ite.next;
	}
	this.zip_worldCOM = true;
};
ZPP_Body.prototype.axisx = null;
ZPP_Body.prototype.axisy = null;
ZPP_Body.prototype.zip_axis = null;
ZPP_Body.prototype.validate_axis = function() {
	if(this.zip_axis) {
		this.zip_axis = false;
		this.axisx = Math.sin(this.rot);
		this.axisy = Math.cos(this.rot);
	}
};
ZPP_Body.prototype.quick_validate_axis = function() {
	this.axisx = Math.sin(this.rot);
	this.axisy = Math.cos(this.rot);
};
ZPP_Body.prototype.delta_rot = function(dr) {
	this.rot += dr;
	if(dr * dr > 0.0001) {
		this.axisx = Math.sin(this.rot);
		this.axisy = Math.cos(this.rot);
	} else {
		var d2 = dr * dr;
		var p = 1 - 0.5 * d2;
		var m = 1 - d2 * d2 / 8;
		var nx = (p * this.axisx + dr * this.axisy) * m;
		this.axisy = (p * this.axisy - dr * this.axisx) * m;
		this.axisx = nx;
	}
};
ZPP_Body.prototype.kinematicDelaySleep = null;
ZPP_Body.prototype.mass = null;
ZPP_Body.prototype.zip_mass = null;
ZPP_Body.prototype.massMode = null;
ZPP_Body.prototype.imass = null;
ZPP_Body.prototype.smass = null;
ZPP_Body.prototype.cmass = null;
ZPP_Body.prototype.nomove = null;
ZPP_Body.prototype.invalidate_mass = function() {
	this.zip_mass = true;
	this.invalidate_gravMass();
};
ZPP_Body.prototype.validate_mass = function() {
	if(this.zip_mass || this.massMode == 0 && false) {
		this.zip_mass = false;
		if(this.massMode == 0) {
			this.cmass = 0;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				s.refmaterial.density = s.material.density;
				s.validate_area_inertia();
				this.cmass += s.area * s.material.density;
				cx_ite = cx_ite.next;
			}
		}
		if(this.type == 2 && !this.nomove) {
			this.mass = this.cmass;
			this.imass = this.smass = 1.0 / this.mass;
		} else {
			this.mass = Infinity;
			this.imass = this.smass = 0.0;
		}
	}
};
ZPP_Body.prototype.gravMass = null;
ZPP_Body.prototype.zip_gravMass = null;
ZPP_Body.prototype.gravMassMode = null;
ZPP_Body.prototype.gravMassScale = null;
ZPP_Body.prototype.zip_gravMassScale = null;
ZPP_Body.prototype.invalidate_gravMass = function() {
	if(this.gravMassMode != 1) {
		this.zip_gravMass = true;
	}
	if(this.gravMassMode != 2) {
		this.zip_gravMassScale = true;
	}
	this.wake();
};
ZPP_Body.prototype.validate_gravMass = function() {
	if(this.zip_gravMass) {
		this.zip_gravMass = false;
		this.validate_mass();
		if(this.gravMassMode == 0) {
			this.validate_mass();
			this.gravMass = this.cmass;
		} else if(this.gravMassMode == 2) {
			this.validate_mass();
			this.gravMass = this.cmass * this.gravMassScale;
		}
	}
};
ZPP_Body.prototype.invalidate_gravMassScale = function() {
	if(this.gravMassMode != 2) {
		this.zip_gravMassScale = true;
	} else {
		this.invalidate_gravMass();
	}
};
ZPP_Body.prototype.validate_gravMassScale = function() {
	if(this.zip_gravMassScale) {
		this.zip_gravMassScale = false;
		if(this.gravMassMode == 0) {
			this.gravMassScale = 1.0;
		} else if(this.gravMassMode == 1) {
			this.validate_mass();
			this.gravMassScale = this.gravMass / this.cmass;
		}
	}
};
ZPP_Body.prototype.inertiaMode = null;
ZPP_Body.prototype.inertia = null;
ZPP_Body.prototype.zip_inertia = null;
ZPP_Body.prototype.cinertia = null;
ZPP_Body.prototype.iinertia = null;
ZPP_Body.prototype.sinertia = null;
ZPP_Body.prototype.norotate = null;
ZPP_Body.prototype.invalidate_inertia = function() {
	this.zip_inertia = true;
	this.wake();
};
ZPP_Body.prototype.validate_inertia = function() {
	if(this.zip_inertia || this.inertiaMode == 0 && false) {
		this.zip_inertia = false;
		if(this.inertiaMode == 0) {
			this.cinertia = 0;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				s.refmaterial.density = s.material.density;
				s.validate_area_inertia();
				this.cinertia += s.inertia * s.area * s.material.density;
				cx_ite = cx_ite.next;
			}
		}
		if(this.type == 2 && !this.norotate) {
			this.inertia = this.cinertia;
			this.sinertia = this.iinertia = 1.0 / this.inertia;
		} else {
			this.inertia = Infinity;
			this.sinertia = this.iinertia = 0;
		}
	}
};
ZPP_Body.prototype.invalidate_wake = function() {
	this.wake();
};
ZPP_Body.prototype.aabb = null;
ZPP_Body.prototype.zip_aabb = null;
ZPP_Body.prototype.validate_aabb = function() {
	if(this.shapes.head == null) {
		throw new js._Boot.HaxeError("Error: Body bounds only makes sense if it contains shapes");
	}
	if(this.zip_aabb) {
		this.zip_aabb = false;
		this.aabb.minx = Infinity;
		this.aabb.miny = Infinity;
		this.aabb.maxx = -Infinity;
		this.aabb.maxy = -Infinity;
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.zip_aabb) {
				if(s.body != null) {
					s.zip_aabb = false;
					if(s.type == 0) {
						var _this = s.circle;
						if(_this.zip_worldCOM) {
							if(_this.body != null) {
								_this.zip_worldCOM = false;
								if(_this.zip_localCOM) {
									_this.zip_localCOM = false;
									if(_this.type == 1) {
										var _this1 = _this.polygon;
										if(_this1.lverts.next == null) {
											throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
										}
										if(_this1.lverts.next.next == null) {
											_this1.localCOMx = _this1.lverts.next.x;
											_this1.localCOMy = _this1.lverts.next.y;
										} else if(_this1.lverts.next.next.next == null) {
											_this1.localCOMx = _this1.lverts.next.x;
											_this1.localCOMy = _this1.lverts.next.y;
											_this1.localCOMx += _this1.lverts.next.next.x;
											_this1.localCOMy += _this1.lverts.next.next.y;
											_this1.localCOMx *= 0.5;
											_this1.localCOMy *= 0.5;
										} else {
											_this1.localCOMx = 0;
											_this1.localCOMy = 0;
											var area = 0.0;
											var cx_ite1 = _this1.lverts.next;
											var u = cx_ite1;
											cx_ite1 = cx_ite1.next;
											var v = cx_ite1;
											cx_ite1 = cx_ite1.next;
											while(cx_ite1 != null) {
												var w = cx_ite1;
												area += v.x * (w.y - u.y);
												var cf = w.y * v.x - w.x * v.y;
												_this1.localCOMx += (v.x + w.x) * cf;
												_this1.localCOMy += (v.y + w.y) * cf;
												u = v;
												v = w;
												cx_ite1 = cx_ite1.next;
											}
											cx_ite1 = _this1.lverts.next;
											var w1 = cx_ite1;
											area += v.x * (w1.y - u.y);
											var cf1 = w1.y * v.x - w1.x * v.y;
											_this1.localCOMx += (v.x + w1.x) * cf1;
											_this1.localCOMy += (v.y + w1.y) * cf1;
											u = v;
											cx_ite1 = cx_ite1.next;
											var w2 = cx_ite1;
											area += w1.x * (w2.y - u.y);
											var cf2 = w2.y * w1.x - w2.x * w1.y;
											_this1.localCOMx += (w1.x + w2.x) * cf2;
											_this1.localCOMy += (w1.y + w2.y) * cf2;
											area = 1 / (3 * area);
											var t = area;
											_this1.localCOMx *= t;
											_this1.localCOMy *= t;
										}
									}
									if(_this.wrap_localCOM != null) {
										_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
										_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
									}
								}
								var _this2 = _this.body;
								if(_this2.zip_axis) {
									_this2.zip_axis = false;
									_this2.axisx = Math.sin(_this2.rot);
									_this2.axisy = Math.cos(_this2.rot);
								}
								_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
								_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
							}
						}
						var rx = _this.radius;
						var ry = _this.radius;
						_this.aabb.minx = _this.worldCOMx - rx;
						_this.aabb.miny = _this.worldCOMy - ry;
						_this.aabb.maxx = _this.worldCOMx + rx;
						_this.aabb.maxy = _this.worldCOMy + ry;
					} else {
						var _this3 = s.polygon;
						if(_this3.zip_gverts) {
							if(_this3.body != null) {
								_this3.zip_gverts = false;
								_this3.validate_lverts();
								var _this4 = _this3.body;
								if(_this4.zip_axis) {
									_this4.zip_axis = false;
									_this4.axisx = Math.sin(_this4.rot);
									_this4.axisy = Math.cos(_this4.rot);
								}
								var li = _this3.lverts.next;
								var cx_ite2 = _this3.gverts.next;
								while(cx_ite2 != null) {
									var g = cx_ite2;
									var l = li;
									li = li.next;
									g.x = _this3.body.posx + (_this3.body.axisy * l.x - _this3.body.axisx * l.y);
									g.y = _this3.body.posy + (l.x * _this3.body.axisx + l.y * _this3.body.axisy);
									cx_ite2 = cx_ite2.next;
								}
							}
						}
						if(_this3.lverts.next == null) {
							throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful bounds");
						}
						var p0 = _this3.gverts.next;
						_this3.aabb.minx = p0.x;
						_this3.aabb.miny = p0.y;
						_this3.aabb.maxx = p0.x;
						_this3.aabb.maxy = p0.y;
						var cx_ite3 = _this3.gverts.next.next;
						while(cx_ite3 != null) {
							var p = cx_ite3;
							if(p.x < _this3.aabb.minx) {
								_this3.aabb.minx = p.x;
							}
							if(p.x > _this3.aabb.maxx) {
								_this3.aabb.maxx = p.x;
							}
							if(p.y < _this3.aabb.miny) {
								_this3.aabb.miny = p.y;
							}
							if(p.y > _this3.aabb.maxy) {
								_this3.aabb.maxy = p.y;
							}
							cx_ite3 = cx_ite3.next;
						}
					}
				}
			}
			var _this5 = this.aabb;
			var x = s.aabb;
			if(x.minx < _this5.minx) {
				_this5.minx = x.minx;
			}
			if(x.maxx > _this5.maxx) {
				_this5.maxx = x.maxx;
			}
			if(x.miny < _this5.miny) {
				_this5.miny = x.miny;
			}
			if(x.maxy > _this5.maxy) {
				_this5.maxy = x.maxy;
			}
			cx_ite = cx_ite.next;
		}
	}
};
ZPP_Body.prototype.invalidate_aabb = function() {
	this.zip_aabb = true;
};
ZPP_Body.prototype.localCOMx = null;
ZPP_Body.prototype.localCOMy = null;
ZPP_Body.prototype.zip_localCOM = null;
ZPP_Body.prototype.worldCOMx = null;
ZPP_Body.prototype.worldCOMy = null;
ZPP_Body.prototype.zip_worldCOM = null;
ZPP_Body.prototype.wrap_localCOM = null;
ZPP_Body.prototype.wrap_worldCOM = null;
ZPP_Body.prototype.invalidate_localCOM = function() {
	this.zip_localCOM = true;
	this.zip_worldCOM = true;
};
ZPP_Body.prototype.invalidate_worldCOM = function() {
	this.zip_worldCOM = true;
};
ZPP_Body.prototype.validate_localCOM = function() {
	if(this.zip_localCOM) {
		this.zip_localCOM = false;
		var tempx = 0;
		var tempy = 0;
		var msum = 0.0;
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.zip_localCOM) {
				s.zip_localCOM = false;
				if(s.type == 1) {
					var _this = s.polygon;
					if(_this.lverts.next == null) {
						throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
					}
					if(_this.lverts.next.next == null) {
						_this.localCOMx = _this.lverts.next.x;
						_this.localCOMy = _this.lverts.next.y;
					} else if(_this.lverts.next.next.next == null) {
						_this.localCOMx = _this.lverts.next.x;
						_this.localCOMy = _this.lverts.next.y;
						_this.localCOMx += _this.lverts.next.next.x;
						_this.localCOMy += _this.lverts.next.next.y;
						_this.localCOMx *= 0.5;
						_this.localCOMy *= 0.5;
					} else {
						_this.localCOMx = 0;
						_this.localCOMy = 0;
						var area = 0.0;
						var cx_ite1 = _this.lverts.next;
						var u = cx_ite1;
						cx_ite1 = cx_ite1.next;
						var v = cx_ite1;
						cx_ite1 = cx_ite1.next;
						while(cx_ite1 != null) {
							var w = cx_ite1;
							area += v.x * (w.y - u.y);
							var cf = w.y * v.x - w.x * v.y;
							_this.localCOMx += (v.x + w.x) * cf;
							_this.localCOMy += (v.y + w.y) * cf;
							u = v;
							v = w;
							cx_ite1 = cx_ite1.next;
						}
						cx_ite1 = _this.lverts.next;
						var w1 = cx_ite1;
						area += v.x * (w1.y - u.y);
						var cf1 = w1.y * v.x - w1.x * v.y;
						_this.localCOMx += (v.x + w1.x) * cf1;
						_this.localCOMy += (v.y + w1.y) * cf1;
						u = v;
						cx_ite1 = cx_ite1.next;
						var w2 = cx_ite1;
						area += w1.x * (w2.y - u.y);
						var cf2 = w2.y * w1.x - w2.x * w1.y;
						_this.localCOMx += (w1.x + w2.x) * cf2;
						_this.localCOMy += (w1.y + w2.y) * cf2;
						area = 1 / (3 * area);
						var t = area;
						_this.localCOMx *= t;
						_this.localCOMy *= t;
					}
				}
				if(s.wrap_localCOM != null) {
					s.wrap_localCOM.zpp_inner.x = s.localCOMx;
					s.wrap_localCOM.zpp_inner.y = s.localCOMy;
				}
			}
			s.validate_area_inertia();
			var t1 = s.area * s.material.density;
			tempx += s.localCOMx * t1;
			tempy += s.localCOMy * t1;
			msum += s.area * s.material.density;
			cx_ite = cx_ite.next;
		}
		if(msum != 0) {
			var t2 = 1.0 / msum;
			this.localCOMx = tempx * t2;
			this.localCOMy = tempy * t2;
		}
		if(this.wrap_localCOM != null) {
			this.wrap_localCOM.zpp_inner.x = this.localCOMx;
			this.wrap_localCOM.zpp_inner.y = this.localCOMy;
		}
		if(this.zip_mass && this.massMode == 0) {
			this.zip_mass = false;
			this.cmass = msum;
			if(this.type == 2) {
				this.mass = this.cmass;
				this.imass = this.smass = 1.0 / this.mass;
			} else {
				this.mass = Infinity;
				this.imass = this.smass = 0.0;
			}
		}
	}
};
ZPP_Body.prototype.validate_worldCOM = function() {
	if(this.zip_worldCOM) {
		this.zip_worldCOM = false;
		this.validate_localCOM();
		if(this.zip_axis) {
			this.zip_axis = false;
			this.axisx = Math.sin(this.rot);
			this.axisy = Math.cos(this.rot);
		}
		this.worldCOMx = this.posx + (this.axisy * this.localCOMx - this.axisx * this.localCOMy);
		this.worldCOMy = this.posy + (this.localCOMx * this.axisx + this.localCOMy * this.axisy);
		if(this.wrap_worldCOM != null) {
			this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
			this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
		}
	}
};
ZPP_Body.prototype.getlocalCOM = function() {
	if(this.shapes.head == null) {
		throw new js._Boot.HaxeError("Error: localCOM only makes sense when Body has Shapes");
	}
	this.validate_localCOM();
};
ZPP_Body.prototype.getworldCOM = function() {
	if(this.shapes.head == null) {
		throw new js._Boot.HaxeError("Error: worldCOM only makes sense when Body has Shapes");
	}
	this.validate_worldCOM();
};
ZPP_Body.prototype.__immutable_midstep = function(name) {
	if(this.space != null && this.space.midstep) {
		throw new js._Boot.HaxeError("Error: " + name + " cannot be set during a space step()");
	}
};
ZPP_Body.prototype.clear = function() {
	if(this.space != null) {
		throw new js._Boot.HaxeError("Error: Cannot clear a Body if it is currently being used by a Space!");
	}
	if(this.constraints.head != null) {
		throw new js._Boot.HaxeError("Error: Cannot clear a Body if it is currently being used by a constraint!");
	}
	while(this.shapes.head != null) {
		var s = this.shapes.pop_unsafe();
		s.removedFromBody();
		s.body = null;
	}
	this.invalidate_shapes();
	this.pre_posx = 0;
	this.pre_posy = 0;
	this.posx = 0;
	this.posy = 0;
	this.velx = 0;
	this.vely = 0;
	this.forcex = 0;
	this.forcey = 0;
	this.kinvelx = 0;
	this.kinvely = 0;
	this.svelx = 0;
	this.svely = 0;
	this.angvel = this.torque = this.kinangvel = this.pre_rot = this.rot = 0;
	var cx_ite = this.shapes.head;
	while(cx_ite != null) {
		var s1 = cx_ite.elt;
		if(s1.type == 1) {
			s1.polygon.invalidate_gverts();
			s1.polygon.invalidate_gaxi();
		}
		s1.invalidate_worldCOM();
		cx_ite = cx_ite.next;
	}
	this.zip_worldCOM = true;
	this.zip_axis = true;
	var cx_ite1 = this.shapes.head;
	while(cx_ite1 != null) {
		var s2 = cx_ite1.elt;
		if(s2.type == 1) {
			s2.polygon.invalidate_gverts();
			s2.polygon.invalidate_gaxi();
		}
		s2.invalidate_worldCOM();
		cx_ite1 = cx_ite1.next;
	}
	this.zip_worldCOM = true;
	this.axisx = 0;
	this.axisy = 1;
	this.zip_axis = false;
	this.massMode = 0;
	this.gravMassMode = 0;
	this.gravMassScale = 1.0;
	this.inertiaMode = 0;
	this.norotate = false;
	this.nomove = false;
};
ZPP_Body.prototype.aabb_validate = function() {
	if(this.shapes.head == null) {
		throw new js._Boot.HaxeError("Error: bounds only makes sense when Body has shapes");
	}
	if(this.shapes.head == null) {
		throw new js._Boot.HaxeError("Error: Body bounds only makes sense if it contains shapes");
	}
	if(this.zip_aabb) {
		this.zip_aabb = false;
		this.aabb.minx = Infinity;
		this.aabb.miny = Infinity;
		this.aabb.maxx = -Infinity;
		this.aabb.maxy = -Infinity;
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.zip_aabb) {
				if(s.body != null) {
					s.zip_aabb = false;
					if(s.type == 0) {
						var _this = s.circle;
						if(_this.zip_worldCOM) {
							if(_this.body != null) {
								_this.zip_worldCOM = false;
								if(_this.zip_localCOM) {
									_this.zip_localCOM = false;
									if(_this.type == 1) {
										var _this1 = _this.polygon;
										if(_this1.lverts.next == null) {
											throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
										}
										if(_this1.lverts.next.next == null) {
											_this1.localCOMx = _this1.lverts.next.x;
											_this1.localCOMy = _this1.lverts.next.y;
										} else if(_this1.lverts.next.next.next == null) {
											_this1.localCOMx = _this1.lverts.next.x;
											_this1.localCOMy = _this1.lverts.next.y;
											_this1.localCOMx += _this1.lverts.next.next.x;
											_this1.localCOMy += _this1.lverts.next.next.y;
											_this1.localCOMx *= 0.5;
											_this1.localCOMy *= 0.5;
										} else {
											_this1.localCOMx = 0;
											_this1.localCOMy = 0;
											var area = 0.0;
											var cx_ite1 = _this1.lverts.next;
											var u = cx_ite1;
											cx_ite1 = cx_ite1.next;
											var v = cx_ite1;
											cx_ite1 = cx_ite1.next;
											while(cx_ite1 != null) {
												var w = cx_ite1;
												area += v.x * (w.y - u.y);
												var cf = w.y * v.x - w.x * v.y;
												_this1.localCOMx += (v.x + w.x) * cf;
												_this1.localCOMy += (v.y + w.y) * cf;
												u = v;
												v = w;
												cx_ite1 = cx_ite1.next;
											}
											cx_ite1 = _this1.lverts.next;
											var w1 = cx_ite1;
											area += v.x * (w1.y - u.y);
											var cf1 = w1.y * v.x - w1.x * v.y;
											_this1.localCOMx += (v.x + w1.x) * cf1;
											_this1.localCOMy += (v.y + w1.y) * cf1;
											u = v;
											cx_ite1 = cx_ite1.next;
											var w2 = cx_ite1;
											area += w1.x * (w2.y - u.y);
											var cf2 = w2.y * w1.x - w2.x * w1.y;
											_this1.localCOMx += (w1.x + w2.x) * cf2;
											_this1.localCOMy += (w1.y + w2.y) * cf2;
											area = 1 / (3 * area);
											var t = area;
											_this1.localCOMx *= t;
											_this1.localCOMy *= t;
										}
									}
									if(_this.wrap_localCOM != null) {
										_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
										_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
									}
								}
								var _this2 = _this.body;
								if(_this2.zip_axis) {
									_this2.zip_axis = false;
									_this2.axisx = Math.sin(_this2.rot);
									_this2.axisy = Math.cos(_this2.rot);
								}
								_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
								_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
							}
						}
						var rx = _this.radius;
						var ry = _this.radius;
						_this.aabb.minx = _this.worldCOMx - rx;
						_this.aabb.miny = _this.worldCOMy - ry;
						_this.aabb.maxx = _this.worldCOMx + rx;
						_this.aabb.maxy = _this.worldCOMy + ry;
					} else {
						var _this3 = s.polygon;
						if(_this3.zip_gverts) {
							if(_this3.body != null) {
								_this3.zip_gverts = false;
								_this3.validate_lverts();
								var _this4 = _this3.body;
								if(_this4.zip_axis) {
									_this4.zip_axis = false;
									_this4.axisx = Math.sin(_this4.rot);
									_this4.axisy = Math.cos(_this4.rot);
								}
								var li = _this3.lverts.next;
								var cx_ite2 = _this3.gverts.next;
								while(cx_ite2 != null) {
									var g = cx_ite2;
									var l = li;
									li = li.next;
									g.x = _this3.body.posx + (_this3.body.axisy * l.x - _this3.body.axisx * l.y);
									g.y = _this3.body.posy + (l.x * _this3.body.axisx + l.y * _this3.body.axisy);
									cx_ite2 = cx_ite2.next;
								}
							}
						}
						if(_this3.lverts.next == null) {
							throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful bounds");
						}
						var p0 = _this3.gverts.next;
						_this3.aabb.minx = p0.x;
						_this3.aabb.miny = p0.y;
						_this3.aabb.maxx = p0.x;
						_this3.aabb.maxy = p0.y;
						var cx_ite3 = _this3.gverts.next.next;
						while(cx_ite3 != null) {
							var p = cx_ite3;
							if(p.x < _this3.aabb.minx) {
								_this3.aabb.minx = p.x;
							}
							if(p.x > _this3.aabb.maxx) {
								_this3.aabb.maxx = p.x;
							}
							if(p.y < _this3.aabb.miny) {
								_this3.aabb.miny = p.y;
							}
							if(p.y > _this3.aabb.maxy) {
								_this3.aabb.maxy = p.y;
							}
							cx_ite3 = cx_ite3.next;
						}
					}
				}
			}
			var _this5 = this.aabb;
			var x = s.aabb;
			if(x.minx < _this5.minx) {
				_this5.minx = x.minx;
			}
			if(x.maxx > _this5.maxx) {
				_this5.maxx = x.maxx;
			}
			if(x.miny < _this5.miny) {
				_this5.miny = x.miny;
			}
			if(x.maxy > _this5.maxy) {
				_this5.maxy = x.maxy;
			}
			cx_ite = cx_ite.next;
		}
	}
};
ZPP_Body.prototype.shapes_adder = function(s) {
	if(s.zpp_inner.body != this) {
		if(s.zpp_inner.body != null) {
			s.zpp_inner.body.wrap_shapes.remove(s);
		}
		s.zpp_inner.body = this;
		s.zpp_inner.addedToBody();
		if(this.space != null) {
			var _this = this.space;
			var s1 = s.zpp_inner;
			var o = s1.body;
			if(!o.world) {
				o.component.waket = _this.stamp + (_this.midstep?0:1);
				if(o.type == 3) {
					o.kinematicDelaySleep = true;
				}
				if(o.component.sleeping) {
					_this.really_wake(o,false);
				}
			}
			_this.bphase.insert(s1);
			s1.addedToSpace();
		}
		if(s.zpp_inner.type == 1) {
			s.zpp_inner.polygon.invalidate_gaxi();
			s.zpp_inner.polygon.invalidate_gverts();
		}
		return true;
	} else {
		return false;
	}
};
ZPP_Body.prototype.shapes_subber = function(s) {
	if(this.space != null) {
		this.space.removed_shape(s.zpp_inner);
	}
	s.zpp_inner.body = null;
	s.zpp_inner.removedFromBody();
};
ZPP_Body.prototype.shapes_invalidate = function(_) {
	this.invalidate_shapes();
};
ZPP_Body.prototype.shapes_modifiable = function() {
	this.immutable_midstep("Body::shapes");
	if(this.type == 1 && this.space != null) {
		throw new js._Boot.HaxeError("Error: Cannot modifiy shapes of static object once added to Space");
	}
};
ZPP_Body.prototype.addedToSpace = function() {
	if(ZPP_Component.zpp_pool == null) {
		this.component = new ZPP_Component();
	} else {
		this.component = ZPP_Component.zpp_pool;
		ZPP_Component.zpp_pool = this.component.next;
		this.component.next = null;
	}
	this.component.isBody = true;
	this.component.body = this;
	this.__iaddedToSpace();
};
ZPP_Body.prototype.removedFromSpace = function() {
	while(this.arbiters.head != null) {
		var arb = this.arbiters.pop_unsafe();
		arb.cleared = true;
		if(arb.b2 == this) {
			var _this = arb.b1.arbiters;
			var pre = null;
			var cur = _this.head;
			while(cur != null) {
				if(cur.elt == arb) {
					var old;
					var ret;
					if(pre == null) {
						old = _this.head;
						ret = old.next;
						_this.head = ret;
						if(_this.head == null) {
							_this.pushmod = true;
						}
					} else {
						old = pre.next;
						ret = old.next;
						pre.next = ret;
						if(ret == null) {
							_this.pushmod = true;
						}
					}
					var o = old;
					o.elt = null;
					o.next = ZNPNode_ZPP_Arbiter.zpp_pool;
					ZNPNode_ZPP_Arbiter.zpp_pool = o;
					_this.modified = true;
					_this.length--;
					_this.pushmod = true;
					break;
				}
				pre = cur;
				cur = cur.next;
			}
		}
		if(arb.b1 == this) {
			var _this1 = arb.b2.arbiters;
			var pre1 = null;
			var cur1 = _this1.head;
			while(cur1 != null) {
				if(cur1.elt == arb) {
					var old1;
					var ret1;
					if(pre1 == null) {
						old1 = _this1.head;
						ret1 = old1.next;
						_this1.head = ret1;
						if(_this1.head == null) {
							_this1.pushmod = true;
						}
					} else {
						old1 = pre1.next;
						ret1 = old1.next;
						pre1.next = ret1;
						if(ret1 == null) {
							_this1.pushmod = true;
						}
					}
					var o1 = old1;
					o1.elt = null;
					o1.next = ZNPNode_ZPP_Arbiter.zpp_pool;
					ZNPNode_ZPP_Arbiter.zpp_pool = o1;
					_this1.modified = true;
					_this1.length--;
					_this1.pushmod = true;
					break;
				}
				pre1 = cur1;
				cur1 = cur1.next;
			}
		}
		if(arb.pair != null) {
			arb.pair.arb = null;
			arb.pair = null;
		}
		arb.active = false;
		this.space.f_arbiters.modified = true;
	}
	var o2 = this.component;
	o2.body = null;
	o2.constraint = null;
	o2.next = ZPP_Component.zpp_pool;
	ZPP_Component.zpp_pool = o2;
	this.component = null;
	this.__iremovedFromSpace();
};
ZPP_Body.prototype.copy = function() {
	var ret = new Body().zpp_inner;
	ret.type = this.type;
	ret.bulletEnabled = this.bulletEnabled;
	ret.disableCCD = this.disableCCD;
	var cx_ite = this.shapes.head;
	while(cx_ite != null) {
		var _this = ret.outer.zpp_inner.wrap_shapes;
		var obj = cx_ite.elt.outer.copy();
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
		cx_ite = cx_ite.next;
	}
	ret.posx = this.posx;
	ret.posy = this.posy;
	ret.velx = this.velx;
	ret.vely = this.vely;
	ret.forcex = this.forcex;
	ret.forcey = this.forcey;
	ret.rot = this.rot;
	ret.angvel = this.angvel;
	ret.torque = this.torque;
	ret.kinvelx = this.kinvelx;
	ret.kinvely = this.kinvely;
	ret.kinangvel = this.kinangvel;
	ret.svelx = this.svelx;
	ret.svely = this.svely;
	if(!this.zip_axis) {
		ret.axisx = this.axisx;
		ret.axisy = this.axisy;
	} else {
		ret.zip_axis = true;
		var cx_ite1 = ret.shapes.head;
		while(cx_ite1 != null) {
			var s = cx_ite1.elt;
			if(s.type == 1) {
				s.polygon.invalidate_gverts();
				s.polygon.invalidate_gaxi();
			}
			s.invalidate_worldCOM();
			cx_ite1 = cx_ite1.next;
		}
		ret.zip_worldCOM = true;
	}
	ret.rot = this.rot;
	ret.massMode = this.massMode;
	ret.gravMassMode = this.gravMassMode;
	ret.inertiaMode = this.inertiaMode;
	ret.norotate = this.norotate;
	ret.nomove = this.nomove;
	ret.cmass = this.cmass;
	ret.cinertia = this.cinertia;
	if(!this.zip_mass) {
		ret.mass = this.mass;
	} else {
		ret.invalidate_mass();
	}
	if(!this.zip_gravMass) {
		ret.gravMass = this.gravMass;
	} else {
		ret.invalidate_gravMass();
	}
	if(!this.zip_gravMassScale) {
		ret.gravMassScale = this.gravMassScale;
	} else {
		ret.invalidate_gravMassScale();
	}
	if(!this.zip_inertia) {
		ret.inertia = this.inertia;
	} else {
		ret.invalidate_inertia();
	}
	if(!this.zip_aabb) {
		ret.aabb.minx = this.aabb.minx;
		ret.aabb.miny = this.aabb.miny;
		ret.aabb.maxx = this.aabb.maxx;
		ret.aabb.maxy = this.aabb.maxy;
	} else {
		ret.zip_aabb = true;
	}
	if(!this.zip_localCOM) {
		ret.localCOMx = this.localCOMx;
		ret.localCOMy = this.localCOMy;
	} else {
		ret.zip_localCOM = true;
		ret.zip_worldCOM = true;
	}
	if(!this.zip_worldCOM) {
		ret.worldCOMx = this.worldCOMx;
		ret.worldCOMy = this.worldCOMy;
	} else {
		ret.zip_worldCOM = true;
	}
	this.copyto(ret.outer);
	return ret.outer;
};
ZPP_Body.prototype.__class__ = ZPP_Body;
var ZPP_Compound = zpp_nape.phys.ZPP_Compound = function() {
	this.space = null;
	this.compound = null;
	this.depth = 0;
	this.wrap_compounds = null;
	this.wrap_constraints = null;
	this.wrap_bodies = null;
	this.compounds = null;
	this.constraints = null;
	this.bodies = null;
	this.outer = null;
	ZPP_Interactor.call(this);
	this.icompound = this;
	this.depth = 1;
	this.bodies = new ZNPList_ZPP_Body();
	this.wrap_bodies = ZPP_BodyList.get(this.bodies);
	this.wrap_bodies.zpp_inner.adder = $bind(this,this.bodies_adder);
	this.wrap_bodies.zpp_inner.subber = $bind(this,this.bodies_subber);
	this.wrap_bodies.zpp_inner._modifiable = $bind(this,this.bodies_modifiable);
	this.constraints = new ZNPList_ZPP_Constraint();
	this.wrap_constraints = ZPP_ConstraintList.get(this.constraints);
	this.wrap_constraints.zpp_inner.adder = $bind(this,this.constraints_adder);
	this.wrap_constraints.zpp_inner.subber = $bind(this,this.constraints_subber);
	this.wrap_constraints.zpp_inner._modifiable = $bind(this,this.constraints_modifiable);
	this.compounds = new ZNPList_ZPP_Compound();
	this.wrap_compounds = ZPP_CompoundList.get(this.compounds);
	this.wrap_compounds.zpp_inner.adder = $bind(this,this.compounds_adder);
	this.wrap_compounds.zpp_inner.subber = $bind(this,this.compounds_subber);
	this.wrap_compounds.zpp_inner._modifiable = $bind(this,this.compounds_modifiable);
};
ZPP_Compound.__name__ = ["zpp_nape","phys","ZPP_Compound"];
ZPP_Compound.__super__ = ZPP_Interactor;
// for(var k in ZPP_Interactor.prototype ) ZPP_Compound.prototype[k] = ZPP_Interactor.prototype[k];
ZPP_Compound.prototype = Object.create(ZPP_Interactor.prototype);
ZPP_Compound.prototype.outer = null;
ZPP_Compound.prototype.bodies = null;
ZPP_Compound.prototype.constraints = null;
ZPP_Compound.prototype.compounds = null;
ZPP_Compound.prototype.wrap_bodies = null;
ZPP_Compound.prototype.wrap_constraints = null;
ZPP_Compound.prototype.wrap_compounds = null;
ZPP_Compound.prototype.depth = null;
ZPP_Compound.prototype.compound = null;
ZPP_Compound.prototype.space = null;
ZPP_Compound.prototype.__imutable_midstep = function(name) {
	if(this.space != null && this.space.midstep) {
		throw new js._Boot.HaxeError("Error: " + name + " cannot be set during space step()");
	}
};
ZPP_Compound.prototype.addedToSpace = function() {
	this.__iaddedToSpace();
};
ZPP_Compound.prototype.removedFromSpace = function() {
	this.__iremovedFromSpace();
};
ZPP_Compound.prototype.breakApart = function() {
	if(this.space != null) {
		this.__iremovedFromSpace();
		this.space.nullInteractorType(this);
	}
	if(this.compound != null) {
		this.compound.compounds.remove(this);
	} else if(this.space != null) {
		this.space.compounds.remove(this);
	}
	while(this.bodies.head != null) {
		var b = this.bodies.pop_unsafe();
		if((b.compound = this.compound) != null) {
			this.compound.bodies.add(b);
		} else if(this.space != null) {
			this.space.bodies.add(b);
		}
		if(this.space != null) {
			this.space.freshInteractorType(b);
		}
	}
	while(this.constraints.head != null) {
		var c = this.constraints.pop_unsafe();
		if((c.compound = this.compound) != null) {
			this.compound.constraints.add(c);
		} else if(this.space != null) {
			this.space.constraints.add(c);
		}
	}
	while(this.compounds.head != null) {
		var c1 = this.compounds.pop_unsafe();
		if((c1.compound = this.compound) != null) {
			this.compound.compounds.add(c1);
		} else if(this.space != null) {
			this.space.compounds.add(c1);
		}
		if(this.space != null) {
			this.space.freshInteractorType(c1);
		}
	}
	this.compound = null;
	this.space = null;
};
ZPP_Compound.prototype.bodies_adder = function(x) {
	if(x.zpp_inner.compound != this) {
		if(x.zpp_inner.compound != null) {
			x.zpp_inner.compound.wrap_bodies.remove(x);
		} else if(x.zpp_inner.space != null) {
			x.zpp_inner.space.wrap_bodies.remove(x);
		}
		x.zpp_inner.compound = this;
		if(this.space != null) {
			this.space.addBody(x.zpp_inner);
		}
		return true;
	} else {
		return false;
	}
};
ZPP_Compound.prototype.bodies_subber = function(x) {
	x.zpp_inner.compound = null;
	if(this.space != null) {
		this.space.remBody(x.zpp_inner);
	}
};
ZPP_Compound.prototype.bodies_modifiable = function() {
	this.immutable_midstep("Compound::" + "bodies");
};
ZPP_Compound.prototype.constraints_adder = function(x) {
	if(x.zpp_inner.compound != this) {
		if(x.zpp_inner.compound != null) {
			x.zpp_inner.compound.wrap_constraints.remove(x);
		} else if(x.zpp_inner.space != null) {
			x.zpp_inner.space.wrap_constraints.remove(x);
		}
		x.zpp_inner.compound = this;
		if(this.space != null) {
			this.space.addConstraint(x.zpp_inner);
		}
		return true;
	} else {
		return false;
	}
};
ZPP_Compound.prototype.constraints_subber = function(x) {
	x.zpp_inner.compound = null;
	if(this.space != null) {
		this.space.remConstraint(x.zpp_inner);
	}
};
ZPP_Compound.prototype.constraints_modifiable = function() {
	this.immutable_midstep("Compound::" + "constraints");
};
ZPP_Compound.prototype.compounds_adder = function(x) {
	var cur = this;
	while(cur != null && cur != x.zpp_inner) cur = cur.compound;
	if(cur == x.zpp_inner) {
		throw new js._Boot.HaxeError("Error: Assignment would cause a cycle in the Compound tree: assigning " + x.toString() + ".compound = " + this.outer.toString());
	}
	if(x.zpp_inner.compound != this) {
		if(x.zpp_inner.compound != null) {
			x.zpp_inner.compound.wrap_compounds.remove(x);
		} else if(x.zpp_inner.space != null) {
			x.zpp_inner.space.wrap_compounds.remove(x);
		}
		x.zpp_inner.compound = this;
		x.zpp_inner.depth = this.depth + 1;
		if(this.space != null) {
			this.space.addCompound(x.zpp_inner);
		}
		return true;
	} else {
		return false;
	}
};
ZPP_Compound.prototype.compounds_subber = function(x) {
	x.zpp_inner.compound = null;
	x.zpp_inner.depth = 1;
	if(this.space != null) {
		this.space.remCompound(x.zpp_inner);
	}
};
ZPP_Compound.prototype.compounds_modifiable = function() {
	this.immutable_midstep("Compound::" + "compounds");
};
ZPP_Compound.prototype.copy = function(dict,todo) {
	var root = dict == null;
	if(dict == null) {
		dict = [];
	}
	if(todo == null) {
		todo = [];
	}
	var ret = new Compound();
	var cx_ite = this.compounds.head;
	while(cx_ite != null) {
		var cc = cx_ite.elt.copy(dict,todo);
		cc.zpp_inner.immutable_midstep("Compound::compound");
		if((cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer) != ret) {
			if((cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer) != null) {
				(cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer).zpp_inner.wrap_compounds.remove(cc);
			}
			if(ret != null) {
				var _this = ret.zpp_inner.wrap_compounds;
				if(_this.zpp_inner.reverse_flag) {
					_this.push(cc);
				} else {
					_this.unshift(cc);
				}
			}
		}
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = this.bodies.head;
	while(cx_ite1 != null) {
		var b = cx_ite1.elt;
		var bc = b.outer.copy();
		dict.push(ZPP_CopyHelper.dict(b.id,bc));
		if((bc.zpp_inner.compound == null?null:bc.zpp_inner.compound.outer) != ret) {
			if((bc.zpp_inner.compound == null?null:bc.zpp_inner.compound.outer) != null) {
				(bc.zpp_inner.compound == null?null:bc.zpp_inner.compound.outer).zpp_inner.wrap_bodies.remove(bc);
			}
			if(ret != null) {
				var _this1 = ret.zpp_inner.wrap_bodies;
				if(_this1.zpp_inner.reverse_flag) {
					_this1.push(bc);
				} else {
					_this1.unshift(bc);
				}
			}
		}
		cx_ite1 = cx_ite1.next;
	}
	var cx_ite2 = this.constraints.head;
	while(cx_ite2 != null) {
		var cc1 = cx_ite2.elt.copy(dict,todo);
		if((cc1.zpp_inner.compound == null?null:cc1.zpp_inner.compound.outer) != ret) {
			if((cc1.zpp_inner.compound == null?null:cc1.zpp_inner.compound.outer) != null) {
				(cc1.zpp_inner.compound == null?null:cc1.zpp_inner.compound.outer).zpp_inner.wrap_constraints.remove(cc1);
			}
			if(ret != null) {
				var _this2 = ret.zpp_inner.wrap_constraints;
				if(_this2.zpp_inner.reverse_flag) {
					_this2.push(cc1);
				} else {
					_this2.unshift(cc1);
				}
			}
		}
		cx_ite2 = cx_ite2.next;
	}
	if(root) {
		while(todo.length > 0) {
			var xcb = todo.pop();
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == xcb.id) {
					xcb.cb(idc.bc);
					break;
				}
			}
		}
	}
	this.copyto(ret);
	return ret;
};
ZPP_Compound.prototype.__class__ = ZPP_Compound;
var ZPP_FluidProperties = zpp_nape.phys.ZPP_FluidProperties = function() {
	this.wrap_gravity = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.density = 0.0;
	this.viscosity = 0.0;
	this.wrap_shapes = null;
	this.shapes = null;
	this.outer = null;
	this.userData = null;
	this.next = null;
	this.shapes = new ZNPList_ZPP_Shape();
	this.density = this.viscosity = 1;
	this.wrap_gravity = null;
	this.gravityx = 0;
	this.gravityy = 0;
};
ZPP_FluidProperties.__name__ = ["zpp_nape","phys","ZPP_FluidProperties"];
ZPP_FluidProperties.prototype.next = null;
ZPP_FluidProperties.prototype.userData = null;
ZPP_FluidProperties.prototype.outer = null;
ZPP_FluidProperties.prototype.wrapper = function() {
	if(this.outer == null) {
		this.outer = new FluidProperties();
		var o = this.outer.zpp_inner;
		o.outer = null;
		o.next = ZPP_FluidProperties.zpp_pool;
		ZPP_FluidProperties.zpp_pool = o;
		this.outer.zpp_inner = this;
	}
	return this.outer;
};
ZPP_FluidProperties.prototype.free = function() {
	this.outer = null;
};
ZPP_FluidProperties.prototype.alloc = function() {
};
ZPP_FluidProperties.prototype.shapes = null;
ZPP_FluidProperties.prototype.wrap_shapes = null;
ZPP_FluidProperties.prototype.feature_cons = function() {
	this.shapes = new ZNPList_ZPP_Shape();
};
ZPP_FluidProperties.prototype.addShape = function(shape) {
	this.shapes.add(shape);
};
ZPP_FluidProperties.prototype.remShape = function(shape) {
	this.shapes.remove(shape);
};
ZPP_FluidProperties.prototype.copy = function() {
	var ret;
	if(ZPP_FluidProperties.zpp_pool == null) {
		ret = new ZPP_FluidProperties();
	} else {
		ret = ZPP_FluidProperties.zpp_pool;
		ZPP_FluidProperties.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.viscosity = this.viscosity;
	ret.density = this.density;
	return ret;
};
ZPP_FluidProperties.prototype.viscosity = null;
ZPP_FluidProperties.prototype.density = null;
ZPP_FluidProperties.prototype.gravityx = null;
ZPP_FluidProperties.prototype.gravityy = null;
ZPP_FluidProperties.prototype.wrap_gravity = null;
ZPP_FluidProperties.prototype.gravity_invalidate = function(x) {
	this.gravityx = x.x;
	this.gravityy = x.y;
	this.invalidate();
};
ZPP_FluidProperties.prototype.gravity_validate = function() {
	this.wrap_gravity.zpp_inner.x = this.gravityx;
	this.wrap_gravity.zpp_inner.y = this.gravityy;
};
ZPP_FluidProperties.prototype.getgravity = function() {
	var x = this.gravityx;
	var y = this.gravityy;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_gravity = ret;
	this.wrap_gravity.zpp_inner._inuse = true;
	this.wrap_gravity.zpp_inner._invalidate = $bind(this,this.gravity_invalidate);
	this.wrap_gravity.zpp_inner._validate = $bind(this,this.gravity_validate);
};
ZPP_FluidProperties.prototype.invalidate = function() {
	var cx_ite = this.shapes.head;
	while(cx_ite != null) {
		cx_ite.elt.invalidate_fluidprops();
		cx_ite = cx_ite.next;
	}
};
ZPP_FluidProperties.prototype.__class__ = ZPP_FluidProperties;
var ZPP_Material = zpp_nape.phys.ZPP_Material = function() {
	this.rollingFriction = 0.0;
	this.elasticity = 0.0;
	this.density = 0.0;
	this.staticFriction = 0.0;
	this.dynamicFriction = 0.0;
	this.wrap_shapes = null;
	this.shapes = null;
	this.outer = null;
	this.userData = null;
	this.next = null;
	this.shapes = new ZNPList_ZPP_Shape();
	this.elasticity = 0;
	this.dynamicFriction = 1;
	this.staticFriction = 2;
	this.density = 0.001;
	this.rollingFriction = 0.01;
};
ZPP_Material.__name__ = ["zpp_nape","phys","ZPP_Material"];
ZPP_Material.prototype.next = null;
ZPP_Material.prototype.userData = null;
ZPP_Material.prototype.outer = null;
ZPP_Material.prototype.wrapper = function() {
	if(this.outer == null) {
		this.outer = new Material();
		var o = this.outer.zpp_inner;
		o.outer = null;
		o.next = ZPP_Material.zpp_pool;
		ZPP_Material.zpp_pool = o;
		this.outer.zpp_inner = this;
	}
	return this.outer;
};
ZPP_Material.prototype.free = function() {
	this.outer = null;
};
ZPP_Material.prototype.alloc = function() {
};
ZPP_Material.prototype.shapes = null;
ZPP_Material.prototype.wrap_shapes = null;
ZPP_Material.prototype.feature_cons = function() {
	this.shapes = new ZNPList_ZPP_Shape();
};
ZPP_Material.prototype.addShape = function(shape) {
	this.shapes.add(shape);
};
ZPP_Material.prototype.remShape = function(shape) {
	this.shapes.remove(shape);
};
ZPP_Material.prototype.dynamicFriction = null;
ZPP_Material.prototype.staticFriction = null;
ZPP_Material.prototype.density = null;
ZPP_Material.prototype.elasticity = null;
ZPP_Material.prototype.rollingFriction = null;
ZPP_Material.prototype.copy = function() {
	var ret = new ZPP_Material();
	ret.dynamicFriction = this.dynamicFriction;
	ret.staticFriction = this.staticFriction;
	ret.density = this.density;
	ret.elasticity = this.elasticity;
	ret.rollingFriction = this.rollingFriction;
	return ret;
};
ZPP_Material.prototype.set = function(x) {
	this.dynamicFriction = x.dynamicFriction;
	this.staticFriction = x.staticFriction;
	this.density = x.density;
	this.elasticity = x.elasticity;
	this.rollingFriction = x.rollingFriction;
};
ZPP_Material.prototype.invalidate = function(x) {
	var cx_ite = this.shapes.head;
	while(cx_ite != null) {
		cx_ite.elt.invalidate_material(x);
		cx_ite = cx_ite.next;
	}
};
ZPP_Material.prototype.__class__ = ZPP_Material;
var ZPP_Shape = zpp_nape.shape.ZPP_Shape = function(type) {
	this.zip_aabb = false;
	this.aabb = null;
	this.pairs = null;
	this.node = null;
	this.sweep = null;
	this.sensorEnabled = false;
	this.fluidEnabled = false;
	this.fluidProperties = null;
	this.filter = null;
	this.material = null;
	this.refmaterial = null;
	this.polygon = null;
	this.circle = null;
	this.sweepCoef = 0.0;
	this.zip_sweepRadius = false;
	this.sweepRadius = 0.0;
	this.wrap_worldCOM = null;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_angDrag = false;
	this.angDrag = 0.0;
	this.inertia = 0.0;
	this.zip_area_inertia = false;
	this.area = 0.0;
	this.type = 0;
	this.body = null;
	this.outer = null;
	ZPP_Interactor.call(this);
	this.pairs = new ZNPList_ZPP_AABBPair();
	this.ishape = this;
	this.type = type;
	var ret;
	if(ZPP_AABB.zpp_pool == null) {
		ret = new ZPP_AABB();
	} else {
		ret = ZPP_AABB.zpp_pool;
		ZPP_AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.minx = 0;
	ret.miny = 0;
	ret.maxx = 0;
	ret.maxy = 0;
	this.aabb = ret;
	this.aabb._immutable = true;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.zip_area_inertia = this.zip_angDrag = this.zip_localCOM = this.zip_sweepRadius = true;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.fluidEnabled = false;
	this.sensorEnabled = false;
	this.fluidProperties = null;
	this.body = null;
	this.refmaterial = new ZPP_Material();
	this.sweepRadius = this.sweepCoef = 0;
};
ZPP_Shape.__name__ = ["zpp_nape","shape","ZPP_Shape"];
ZPP_Shape.__super__ = ZPP_Interactor;
// for(var k in ZPP_Interactor.prototype ) ZPP_Shape.prototype[k] = ZPP_Interactor.prototype[k];
ZPP_Shape.prototype = Object.create(ZPP_Interactor.prototype);
ZPP_Shape.prototype.outer = null;
ZPP_Shape.prototype.body = null;
ZPP_Shape.prototype.type = null;
ZPP_Shape.prototype.isCircle = function() {
	return this.type == 0;
};
ZPP_Shape.prototype.isPolygon = function() {
	return this.type == 1;
};
ZPP_Shape.prototype.area = null;
ZPP_Shape.prototype.zip_area_inertia = null;
ZPP_Shape.prototype.inertia = null;
ZPP_Shape.prototype.angDrag = null;
ZPP_Shape.prototype.zip_angDrag = null;
ZPP_Shape.prototype.localCOMx = null;
ZPP_Shape.prototype.localCOMy = null;
ZPP_Shape.prototype.zip_localCOM = null;
ZPP_Shape.prototype.worldCOMx = null;
ZPP_Shape.prototype.worldCOMy = null;
ZPP_Shape.prototype.zip_worldCOM = null;
ZPP_Shape.prototype.wrap_localCOM = null;
ZPP_Shape.prototype.wrap_worldCOM = null;
ZPP_Shape.prototype.sweepRadius = null;
ZPP_Shape.prototype.zip_sweepRadius = null;
ZPP_Shape.prototype.sweepCoef = null;
ZPP_Shape.prototype.invalidate_sweepRadius = function() {
	this.zip_sweepRadius = true;
};
ZPP_Shape.prototype.validate_sweepRadius = function() {
	if(this.zip_sweepRadius) {
		this.zip_sweepRadius = false;
		if(this.type == 0) {
			this.circle.__validate_sweepRadius();
		} else {
			this.polygon.__validate_sweepRadius();
		}
	}
};
ZPP_Shape.prototype.circle = null;
ZPP_Shape.prototype.polygon = null;
ZPP_Shape.prototype.refmaterial = null;
ZPP_Shape.prototype.material = null;
ZPP_Shape.prototype.filter = null;
ZPP_Shape.prototype.fluidProperties = null;
ZPP_Shape.prototype.fluidEnabled = null;
ZPP_Shape.prototype.sensorEnabled = null;
ZPP_Shape.prototype.sweep = null;
ZPP_Shape.prototype.node = null;
ZPP_Shape.prototype.pairs = null;
ZPP_Shape.prototype.clear = function() {
	if(this.type == 0) {
		this.circle.__clear();
	} else {
		this.polygon.__clear();
	}
};
ZPP_Shape.prototype.aabb = null;
ZPP_Shape.prototype.zip_aabb = null;
ZPP_Shape.prototype.validate_aabb = function() {
	if(this.zip_aabb) {
		if(this.body != null) {
			this.zip_aabb = false;
			if(this.type == 0) {
				var _this = this.circle;
				if(_this.zip_worldCOM) {
					if(_this.body != null) {
						_this.zip_worldCOM = false;
						if(_this.zip_localCOM) {
							_this.zip_localCOM = false;
							if(_this.type == 1) {
								var _this1 = _this.polygon;
								if(_this1.lverts.next == null) {
									throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
								}
								if(_this1.lverts.next.next == null) {
									_this1.localCOMx = _this1.lverts.next.x;
									_this1.localCOMy = _this1.lverts.next.y;
								} else if(_this1.lverts.next.next.next == null) {
									_this1.localCOMx = _this1.lverts.next.x;
									_this1.localCOMy = _this1.lverts.next.y;
									_this1.localCOMx += _this1.lverts.next.next.x;
									_this1.localCOMy += _this1.lverts.next.next.y;
									_this1.localCOMx *= 0.5;
									_this1.localCOMy *= 0.5;
								} else {
									_this1.localCOMx = 0;
									_this1.localCOMy = 0;
									var area = 0.0;
									var cx_ite = _this1.lverts.next;
									var u = cx_ite;
									cx_ite = cx_ite.next;
									var v = cx_ite;
									cx_ite = cx_ite.next;
									while(cx_ite != null) {
										var w = cx_ite;
										area += v.x * (w.y - u.y);
										var cf = w.y * v.x - w.x * v.y;
										_this1.localCOMx += (v.x + w.x) * cf;
										_this1.localCOMy += (v.y + w.y) * cf;
										u = v;
										v = w;
										cx_ite = cx_ite.next;
									}
									cx_ite = _this1.lverts.next;
									var w1 = cx_ite;
									area += v.x * (w1.y - u.y);
									var cf1 = w1.y * v.x - w1.x * v.y;
									_this1.localCOMx += (v.x + w1.x) * cf1;
									_this1.localCOMy += (v.y + w1.y) * cf1;
									u = v;
									cx_ite = cx_ite.next;
									var w2 = cx_ite;
									area += w1.x * (w2.y - u.y);
									var cf2 = w2.y * w1.x - w2.x * w1.y;
									_this1.localCOMx += (w1.x + w2.x) * cf2;
									_this1.localCOMy += (w1.y + w2.y) * cf2;
									area = 1 / (3 * area);
									var t = area;
									_this1.localCOMx *= t;
									_this1.localCOMy *= t;
								}
							}
							if(_this.wrap_localCOM != null) {
								_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
								_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
							}
						}
						var _this2 = _this.body;
						if(_this2.zip_axis) {
							_this2.zip_axis = false;
							_this2.axisx = Math.sin(_this2.rot);
							_this2.axisy = Math.cos(_this2.rot);
						}
						_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
						_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
					}
				}
				var rx = _this.radius;
				var ry = _this.radius;
				_this.aabb.minx = _this.worldCOMx - rx;
				_this.aabb.miny = _this.worldCOMy - ry;
				_this.aabb.maxx = _this.worldCOMx + rx;
				_this.aabb.maxy = _this.worldCOMy + ry;
			} else {
				var _this3 = this.polygon;
				if(_this3.zip_gverts) {
					if(_this3.body != null) {
						_this3.zip_gverts = false;
						_this3.validate_lverts();
						var _this4 = _this3.body;
						if(_this4.zip_axis) {
							_this4.zip_axis = false;
							_this4.axisx = Math.sin(_this4.rot);
							_this4.axisy = Math.cos(_this4.rot);
						}
						var li = _this3.lverts.next;
						var cx_ite1 = _this3.gverts.next;
						while(cx_ite1 != null) {
							var g = cx_ite1;
							var l = li;
							li = li.next;
							g.x = _this3.body.posx + (_this3.body.axisy * l.x - _this3.body.axisx * l.y);
							g.y = _this3.body.posy + (l.x * _this3.body.axisx + l.y * _this3.body.axisy);
							cx_ite1 = cx_ite1.next;
						}
					}
				}
				if(_this3.lverts.next == null) {
					throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful bounds");
				}
				var p0 = _this3.gverts.next;
				_this3.aabb.minx = p0.x;
				_this3.aabb.miny = p0.y;
				_this3.aabb.maxx = p0.x;
				_this3.aabb.maxy = p0.y;
				var cx_ite2 = _this3.gverts.next.next;
				while(cx_ite2 != null) {
					var p = cx_ite2;
					if(p.x < _this3.aabb.minx) {
						_this3.aabb.minx = p.x;
					}
					if(p.x > _this3.aabb.maxx) {
						_this3.aabb.maxx = p.x;
					}
					if(p.y < _this3.aabb.miny) {
						_this3.aabb.miny = p.y;
					}
					if(p.y > _this3.aabb.maxy) {
						_this3.aabb.maxy = p.y;
					}
					cx_ite2 = cx_ite2.next;
				}
			}
		}
	}
};
ZPP_Shape.prototype.force_validate_aabb = function() {
	if(this.type == 0) {
		var _this = this.circle;
		_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
		_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
		_this.aabb.minx = _this.worldCOMx - _this.radius;
		_this.aabb.miny = _this.worldCOMy - _this.radius;
		_this.aabb.maxx = _this.worldCOMx + _this.radius;
		_this.aabb.maxy = _this.worldCOMy + _this.radius;
	} else {
		var _this1 = this.polygon;
		var li = _this1.lverts.next;
		var p0 = _this1.gverts.next;
		var l = li;
		li = li.next;
		p0.x = _this1.body.posx + (_this1.body.axisy * l.x - _this1.body.axisx * l.y);
		p0.y = _this1.body.posy + (l.x * _this1.body.axisx + l.y * _this1.body.axisy);
		_this1.aabb.minx = p0.x;
		_this1.aabb.miny = p0.y;
		_this1.aabb.maxx = p0.x;
		_this1.aabb.maxy = p0.y;
		var cx_ite = _this1.gverts.next.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var l1 = li;
			li = li.next;
			p.x = _this1.body.posx + (_this1.body.axisy * l1.x - _this1.body.axisx * l1.y);
			p.y = _this1.body.posy + (l1.x * _this1.body.axisx + l1.y * _this1.body.axisy);
			if(p.x < _this1.aabb.minx) {
				_this1.aabb.minx = p.x;
			}
			if(p.x > _this1.aabb.maxx) {
				_this1.aabb.maxx = p.x;
			}
			if(p.y < _this1.aabb.miny) {
				_this1.aabb.miny = p.y;
			}
			if(p.y > _this1.aabb.maxy) {
				_this1.aabb.maxy = p.y;
			}
			cx_ite = cx_ite.next;
		}
	}
};
ZPP_Shape.prototype.invalidate_aabb = function() {
	this.zip_aabb = true;
	if(this.body != null) {
		this.body.zip_aabb = true;
	}
};
ZPP_Shape.prototype.validate_area_inertia = function() {
	if(this.zip_area_inertia) {
		this.zip_area_inertia = false;
		if(this.type == 0) {
			this.circle.__validate_area_inertia();
		} else {
			this.polygon.__validate_area_inertia();
		}
	}
};
ZPP_Shape.prototype.validate_angDrag = function() {
	if(this.zip_angDrag || this.refmaterial.dynamicFriction != this.material.dynamicFriction) {
		this.zip_angDrag = false;
		this.refmaterial.dynamicFriction = this.material.dynamicFriction;
		if(this.type == 0) {
			this.circle.__validate_angDrag();
		} else {
			this.polygon.__validate_angDrag();
		}
	}
};
ZPP_Shape.prototype.validate_localCOM = function() {
	if(this.zip_localCOM) {
		this.zip_localCOM = false;
		if(this.type == 1) {
			var _this = this.polygon;
			if(_this.lverts.next == null) {
				throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
			}
			if(_this.lverts.next.next == null) {
				_this.localCOMx = _this.lverts.next.x;
				_this.localCOMy = _this.lverts.next.y;
			} else if(_this.lverts.next.next.next == null) {
				_this.localCOMx = _this.lverts.next.x;
				_this.localCOMy = _this.lverts.next.y;
				_this.localCOMx += _this.lverts.next.next.x;
				_this.localCOMy += _this.lverts.next.next.y;
				_this.localCOMx *= 0.5;
				_this.localCOMy *= 0.5;
			} else {
				_this.localCOMx = 0;
				_this.localCOMy = 0;
				var area = 0.0;
				var cx_ite = _this.lverts.next;
				var u = cx_ite;
				cx_ite = cx_ite.next;
				var v = cx_ite;
				cx_ite = cx_ite.next;
				while(cx_ite != null) {
					var w = cx_ite;
					area += v.x * (w.y - u.y);
					var cf = w.y * v.x - w.x * v.y;
					_this.localCOMx += (v.x + w.x) * cf;
					_this.localCOMy += (v.y + w.y) * cf;
					u = v;
					v = w;
					cx_ite = cx_ite.next;
				}
				cx_ite = _this.lverts.next;
				var w1 = cx_ite;
				area += v.x * (w1.y - u.y);
				var cf1 = w1.y * v.x - w1.x * v.y;
				_this.localCOMx += (v.x + w1.x) * cf1;
				_this.localCOMy += (v.y + w1.y) * cf1;
				u = v;
				cx_ite = cx_ite.next;
				var w2 = cx_ite;
				area += w1.x * (w2.y - u.y);
				var cf2 = w2.y * w1.x - w2.x * w1.y;
				_this.localCOMx += (w1.x + w2.x) * cf2;
				_this.localCOMy += (w1.y + w2.y) * cf2;
				area = 1 / (3 * area);
				var t = area;
				_this.localCOMx *= t;
				_this.localCOMy *= t;
			}
		}
		if(this.wrap_localCOM != null) {
			this.wrap_localCOM.zpp_inner.x = this.localCOMx;
			this.wrap_localCOM.zpp_inner.y = this.localCOMy;
		}
	}
};
ZPP_Shape.prototype.validate_worldCOM = function() {
	if(this.zip_worldCOM) {
		if(this.body != null) {
			this.zip_worldCOM = false;
			if(this.zip_localCOM) {
				this.zip_localCOM = false;
				if(this.type == 1) {
					var _this = this.polygon;
					if(_this.lverts.next == null) {
						throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
					}
					if(_this.lverts.next.next == null) {
						_this.localCOMx = _this.lverts.next.x;
						_this.localCOMy = _this.lverts.next.y;
					} else if(_this.lverts.next.next.next == null) {
						_this.localCOMx = _this.lverts.next.x;
						_this.localCOMy = _this.lverts.next.y;
						_this.localCOMx += _this.lverts.next.next.x;
						_this.localCOMy += _this.lverts.next.next.y;
						_this.localCOMx *= 0.5;
						_this.localCOMy *= 0.5;
					} else {
						_this.localCOMx = 0;
						_this.localCOMy = 0;
						var area = 0.0;
						var cx_ite = _this.lverts.next;
						var u = cx_ite;
						cx_ite = cx_ite.next;
						var v = cx_ite;
						cx_ite = cx_ite.next;
						while(cx_ite != null) {
							var w = cx_ite;
							area += v.x * (w.y - u.y);
							var cf = w.y * v.x - w.x * v.y;
							_this.localCOMx += (v.x + w.x) * cf;
							_this.localCOMy += (v.y + w.y) * cf;
							u = v;
							v = w;
							cx_ite = cx_ite.next;
						}
						cx_ite = _this.lverts.next;
						var w1 = cx_ite;
						area += v.x * (w1.y - u.y);
						var cf1 = w1.y * v.x - w1.x * v.y;
						_this.localCOMx += (v.x + w1.x) * cf1;
						_this.localCOMy += (v.y + w1.y) * cf1;
						u = v;
						cx_ite = cx_ite.next;
						var w2 = cx_ite;
						area += w1.x * (w2.y - u.y);
						var cf2 = w2.y * w1.x - w2.x * w1.y;
						_this.localCOMx += (w1.x + w2.x) * cf2;
						_this.localCOMy += (w1.y + w2.y) * cf2;
						area = 1 / (3 * area);
						var t = area;
						_this.localCOMx *= t;
						_this.localCOMy *= t;
					}
				}
				if(this.wrap_localCOM != null) {
					this.wrap_localCOM.zpp_inner.x = this.localCOMx;
					this.wrap_localCOM.zpp_inner.y = this.localCOMy;
				}
			}
			var _this1 = this.body;
			if(_this1.zip_axis) {
				_this1.zip_axis = false;
				_this1.axisx = Math.sin(_this1.rot);
				_this1.axisy = Math.cos(_this1.rot);
			}
			this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
			this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
		}
	}
};
ZPP_Shape.prototype.getworldCOM = function() {
	if(this.body == null) {
		throw new js._Boot.HaxeError("Error: worldCOM only makes sense when Shape belongs to a Body");
	}
	if(this.zip_worldCOM) {
		if(this.body != null) {
			this.zip_worldCOM = false;
			if(this.zip_localCOM) {
				this.zip_localCOM = false;
				if(this.type == 1) {
					var _this = this.polygon;
					if(_this.lverts.next == null) {
						throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
					}
					if(_this.lverts.next.next == null) {
						_this.localCOMx = _this.lverts.next.x;
						_this.localCOMy = _this.lverts.next.y;
					} else if(_this.lverts.next.next.next == null) {
						_this.localCOMx = _this.lverts.next.x;
						_this.localCOMy = _this.lverts.next.y;
						_this.localCOMx += _this.lverts.next.next.x;
						_this.localCOMy += _this.lverts.next.next.y;
						_this.localCOMx *= 0.5;
						_this.localCOMy *= 0.5;
					} else {
						_this.localCOMx = 0;
						_this.localCOMy = 0;
						var area = 0.0;
						var cx_ite = _this.lverts.next;
						var u = cx_ite;
						cx_ite = cx_ite.next;
						var v = cx_ite;
						cx_ite = cx_ite.next;
						while(cx_ite != null) {
							var w = cx_ite;
							area += v.x * (w.y - u.y);
							var cf = w.y * v.x - w.x * v.y;
							_this.localCOMx += (v.x + w.x) * cf;
							_this.localCOMy += (v.y + w.y) * cf;
							u = v;
							v = w;
							cx_ite = cx_ite.next;
						}
						cx_ite = _this.lverts.next;
						var w1 = cx_ite;
						area += v.x * (w1.y - u.y);
						var cf1 = w1.y * v.x - w1.x * v.y;
						_this.localCOMx += (v.x + w1.x) * cf1;
						_this.localCOMy += (v.y + w1.y) * cf1;
						u = v;
						cx_ite = cx_ite.next;
						var w2 = cx_ite;
						area += w1.x * (w2.y - u.y);
						var cf2 = w2.y * w1.x - w2.x * w1.y;
						_this.localCOMx += (w1.x + w2.x) * cf2;
						_this.localCOMy += (w1.y + w2.y) * cf2;
						area = 1 / (3 * area);
						var t = area;
						_this.localCOMx *= t;
						_this.localCOMy *= t;
					}
				}
				if(this.wrap_localCOM != null) {
					this.wrap_localCOM.zpp_inner.x = this.localCOMx;
					this.wrap_localCOM.zpp_inner.y = this.localCOMy;
				}
			}
			var _this1 = this.body;
			if(_this1.zip_axis) {
				_this1.zip_axis = false;
				_this1.axisx = Math.sin(_this1.rot);
				_this1.axisy = Math.cos(_this1.rot);
			}
			this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
			this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
		}
	}
	this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
	this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
};
ZPP_Shape.prototype.invalidate_area_inertia = function() {
	this.zip_area_inertia = true;
	if(this.body != null) {
		var _this = this.body;
		_this.zip_localCOM = true;
		_this.zip_worldCOM = true;
		this.body.invalidate_mass();
		this.body.invalidate_inertia();
	}
};
ZPP_Shape.prototype.invalidate_angDrag = function() {
	this.zip_angDrag = true;
};
ZPP_Shape.prototype.invalidate_localCOM = function() {
	this.zip_localCOM = true;
	this.invalidate_area_inertia();
	if(this.type == 0) {
		this.zip_sweepRadius = true;
	}
	this.invalidate_angDrag();
	this.invalidate_worldCOM();
	if(this.body != null) {
		var _this = this.body;
		_this.zip_localCOM = true;
		_this.zip_worldCOM = true;
	}
};
ZPP_Shape.prototype.invalidate_worldCOM = function() {
	this.zip_worldCOM = true;
	this.zip_aabb = true;
	if(this.body != null) {
		this.body.zip_aabb = true;
	}
};
ZPP_Shape.prototype.invalidate_material = function(flags) {
	if((flags & ZPP_Material.WAKE) != 0) {
		this.wake();
	}
	if((flags & ZPP_Material.ARBITERS) != 0) {
		if(this.body != null) {
			this.body.refreshArbiters();
		}
	}
	if((flags & ZPP_Material.PROPS) != 0) {
		if(this.body != null) {
			var _this = this.body;
			_this.zip_localCOM = true;
			_this.zip_worldCOM = true;
			this.body.invalidate_mass();
			this.body.invalidate_inertia();
		}
	}
	if((flags & ZPP_Material.ANGDRAG) != 0) {
		this.invalidate_angDrag();
	}
	this.refmaterial.set(this.material);
};
ZPP_Shape.prototype.invalidate_filter = function() {
	this.wake();
};
ZPP_Shape.prototype.invalidate_fluidprops = function() {
	if(this.fluidEnabled) {
		this.wake();
	}
};
ZPP_Shape.prototype.aabb_validate = function() {
	if(this.body == null) {
		throw new js._Boot.HaxeError("Error: bounds only makes sense when Shape belongs to a Body");
	}
	if(this.zip_aabb) {
		if(this.body != null) {
			this.zip_aabb = false;
			if(this.type == 0) {
				var _this = this.circle;
				if(_this.zip_worldCOM) {
					if(_this.body != null) {
						_this.zip_worldCOM = false;
						if(_this.zip_localCOM) {
							_this.zip_localCOM = false;
							if(_this.type == 1) {
								var _this1 = _this.polygon;
								if(_this1.lverts.next == null) {
									throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
								}
								if(_this1.lverts.next.next == null) {
									_this1.localCOMx = _this1.lverts.next.x;
									_this1.localCOMy = _this1.lverts.next.y;
								} else if(_this1.lverts.next.next.next == null) {
									_this1.localCOMx = _this1.lverts.next.x;
									_this1.localCOMy = _this1.lverts.next.y;
									_this1.localCOMx += _this1.lverts.next.next.x;
									_this1.localCOMy += _this1.lverts.next.next.y;
									_this1.localCOMx *= 0.5;
									_this1.localCOMy *= 0.5;
								} else {
									_this1.localCOMx = 0;
									_this1.localCOMy = 0;
									var area = 0.0;
									var cx_ite = _this1.lverts.next;
									var u = cx_ite;
									cx_ite = cx_ite.next;
									var v = cx_ite;
									cx_ite = cx_ite.next;
									while(cx_ite != null) {
										var w = cx_ite;
										area += v.x * (w.y - u.y);
										var cf = w.y * v.x - w.x * v.y;
										_this1.localCOMx += (v.x + w.x) * cf;
										_this1.localCOMy += (v.y + w.y) * cf;
										u = v;
										v = w;
										cx_ite = cx_ite.next;
									}
									cx_ite = _this1.lverts.next;
									var w1 = cx_ite;
									area += v.x * (w1.y - u.y);
									var cf1 = w1.y * v.x - w1.x * v.y;
									_this1.localCOMx += (v.x + w1.x) * cf1;
									_this1.localCOMy += (v.y + w1.y) * cf1;
									u = v;
									cx_ite = cx_ite.next;
									var w2 = cx_ite;
									area += w1.x * (w2.y - u.y);
									var cf2 = w2.y * w1.x - w2.x * w1.y;
									_this1.localCOMx += (w1.x + w2.x) * cf2;
									_this1.localCOMy += (w1.y + w2.y) * cf2;
									area = 1 / (3 * area);
									var t = area;
									_this1.localCOMx *= t;
									_this1.localCOMy *= t;
								}
							}
							if(_this.wrap_localCOM != null) {
								_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
								_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
							}
						}
						var _this2 = _this.body;
						if(_this2.zip_axis) {
							_this2.zip_axis = false;
							_this2.axisx = Math.sin(_this2.rot);
							_this2.axisy = Math.cos(_this2.rot);
						}
						_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
						_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
					}
				}
				var rx = _this.radius;
				var ry = _this.radius;
				_this.aabb.minx = _this.worldCOMx - rx;
				_this.aabb.miny = _this.worldCOMy - ry;
				_this.aabb.maxx = _this.worldCOMx + rx;
				_this.aabb.maxy = _this.worldCOMy + ry;
			} else {
				var _this3 = this.polygon;
				if(_this3.zip_gverts) {
					if(_this3.body != null) {
						_this3.zip_gverts = false;
						_this3.validate_lverts();
						var _this4 = _this3.body;
						if(_this4.zip_axis) {
							_this4.zip_axis = false;
							_this4.axisx = Math.sin(_this4.rot);
							_this4.axisy = Math.cos(_this4.rot);
						}
						var li = _this3.lverts.next;
						var cx_ite1 = _this3.gverts.next;
						while(cx_ite1 != null) {
							var g = cx_ite1;
							var l = li;
							li = li.next;
							g.x = _this3.body.posx + (_this3.body.axisy * l.x - _this3.body.axisx * l.y);
							g.y = _this3.body.posy + (l.x * _this3.body.axisx + l.y * _this3.body.axisy);
							cx_ite1 = cx_ite1.next;
						}
					}
				}
				if(_this3.lverts.next == null) {
					throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful bounds");
				}
				var p0 = _this3.gverts.next;
				_this3.aabb.minx = p0.x;
				_this3.aabb.miny = p0.y;
				_this3.aabb.maxx = p0.x;
				_this3.aabb.maxy = p0.y;
				var cx_ite2 = _this3.gverts.next.next;
				while(cx_ite2 != null) {
					var p = cx_ite2;
					if(p.x < _this3.aabb.minx) {
						_this3.aabb.minx = p.x;
					}
					if(p.x > _this3.aabb.maxx) {
						_this3.aabb.maxx = p.x;
					}
					if(p.y < _this3.aabb.miny) {
						_this3.aabb.miny = p.y;
					}
					if(p.y > _this3.aabb.maxy) {
						_this3.aabb.maxy = p.y;
					}
					cx_ite2 = cx_ite2.next;
				}
			}
		}
	}
};
ZPP_Shape.prototype.setMaterial = function(material) {
	if(this.material != material) {
		if(this.body != null && this.body.space != null) {
			if(this.material != null) {
				this.material.shapes.remove(this);
			}
		}
		this.material = material;
		if(this.body != null && this.body.space != null) {
			material.shapes.add(this);
		}
		this.wake();
		if(this.body != null) {
			this.body.refreshArbiters();
		}
	}
};
ZPP_Shape.prototype.setFilter = function(filter) {
	if(this.filter != filter) {
		if(this.body != null && this.body.space != null) {
			if(this.filter != null) {
				this.filter.shapes.remove(this);
			}
		}
		this.filter = filter;
		if(this.body != null && this.body.space != null) {
			filter.shapes.add(this);
		}
		this.wake();
	}
};
ZPP_Shape.prototype.setFluid = function(fluid) {
	if(this.fluidProperties != fluid) {
		if(this.body != null && this.body.space != null) {
			if(this.fluidProperties != null) {
				this.fluidProperties.shapes.remove(this);
			}
		}
		this.fluidProperties = fluid;
		if(this.body != null && this.body.space != null) {
			fluid.shapes.add(this);
		}
		if(this.fluidEnabled) {
			this.wake();
		}
	}
};
ZPP_Shape.prototype.__immutable_midstep = function(name) {
	if(this.body != null && this.body.space != null && this.body.space.midstep) {
		throw new js._Boot.HaxeError("Error: " + name + " cannot be set during a space step()");
	}
};
ZPP_Shape.prototype.addedToBody = function() {
	this.invalidate_worldCOM();
	this.zip_aabb = true;
	if(this.body != null) {
		this.body.zip_aabb = true;
	}
};
ZPP_Shape.prototype.removedFromBody = function() {
};
ZPP_Shape.prototype.addedToSpace = function() {
	this.__iaddedToSpace();
	this.material.shapes.add(this);
	this.filter.shapes.add(this);
	if(this.fluidProperties != null) {
		this.fluidProperties.shapes.add(this);
	}
};
ZPP_Shape.prototype.removedFromSpace = function() {
	this.__iremovedFromSpace();
	this.material.shapes.remove(this);
	this.filter.shapes.remove(this);
	if(this.fluidProperties != null) {
		this.fluidProperties.shapes.remove(this);
	}
};
ZPP_Shape.prototype.copy = function() {
	var ret = null;
	if(this.type == 0) {
		ret = this.circle.__copy();
	} else {
		ret = this.polygon.__copy();
	}
	if(!this.zip_area_inertia) {
		ret.area = this.area;
		ret.inertia = this.inertia;
	} else {
		ret.invalidate_area_inertia();
	}
	if(!this.zip_sweepRadius) {
		ret.sweepRadius = this.sweepRadius;
		ret.sweepCoef = this.sweepCoef;
	} else {
		ret.zip_sweepRadius = true;
	}
	if(!this.zip_angDrag) {
		ret.angDrag = this.angDrag;
	} else {
		ret.invalidate_angDrag();
	}
	if(!this.zip_aabb) {
		ret.aabb.minx = this.aabb.minx;
		ret.aabb.miny = this.aabb.miny;
		ret.aabb.maxx = this.aabb.maxx;
		ret.aabb.maxy = this.aabb.maxy;
	} else {
		ret.zip_aabb = true;
		if(ret.body != null) {
			ret.body.zip_aabb = true;
		}
	}
	var o = ret.material;
	o.outer = null;
	o.next = ZPP_Material.zpp_pool;
	ZPP_Material.zpp_pool = o;
	var o1 = ret.filter;
	o1.outer = null;
	o1.next = ZPP_InteractionFilter.zpp_pool;
	ZPP_InteractionFilter.zpp_pool = o1;
	ret.material = this.material;
	ret.filter = this.filter;
	if(this.fluidProperties != null) {
		ret.fluidProperties = this.fluidProperties;
	}
	ret.fluidEnabled = this.fluidEnabled;
	ret.sensorEnabled = this.sensorEnabled;
	if(this.userData != null) {
		ret.userData = Reflect.copy(this.userData);
	}
	this.copyto(ret.outer);
	return ret.outer;
};
ZPP_Shape.prototype.__class__ = ZPP_Shape;
var ZPP_Circle = zpp_nape.shape.ZPP_Circle = function() {
	this.radius = 0.0;
	this.outer_zn = null;
	ZPP_Shape.call(this,0);
	this.circle = this;
	this.zip_localCOM = false;
};
ZPP_Circle.__name__ = ["zpp_nape","shape","ZPP_Circle"];
ZPP_Circle.__super__ = ZPP_Shape;
// for(var k in ZPP_Shape.prototype ) ZPP_Circle.prototype[k] = ZPP_Shape.prototype[k];
ZPP_Circle.prototype = Object.create(ZPP_Shape.prototype);
ZPP_Circle.prototype.outer_zn = null;
ZPP_Circle.prototype.radius = null;
ZPP_Circle.prototype.__clear = function() {
};
ZPP_Circle.prototype.invalidate_radius = function() {
	this.invalidate_area_inertia();
	this.invalidate_angDrag();
	this.zip_aabb = true;
	if(this.body != null) {
		this.body.zip_aabb = true;
	}
	if(this.body != null) {
		this.body.wake();
	}
};
ZPP_Circle.prototype.localCOM_validate = function() {
	this.wrap_localCOM.zpp_inner.x = this.localCOMx;
	this.wrap_localCOM.zpp_inner.y = this.localCOMy;
};
ZPP_Circle.prototype.localCOM_invalidate = function(x) {
	this.localCOMx = x.x;
	this.localCOMy = x.y;
	this.invalidate_localCOM();
	if(this.body != null) {
		this.body.wake();
	}
};
ZPP_Circle.prototype.localCOM_immutable = function() {
	if(this.body != null && this.body.type == 1 && this.body.space != null) {
		throw new js._Boot.HaxeError("Error: Cannot modify localCOM of Circle added to a static Body whilst within a Space");
	}
};
ZPP_Circle.prototype.setupLocalCOM = function() {
	var x = this.localCOMx;
	var y = this.localCOMy;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_localCOM = ret;
	this.wrap_localCOM.zpp_inner._inuse = true;
	this.wrap_localCOM.zpp_inner._validate = $bind(this,this.localCOM_validate);
	this.wrap_localCOM.zpp_inner._invalidate = $bind(this,this.localCOM_invalidate);
	this.wrap_localCOM.zpp_inner._isimmutable = $bind(this,this.localCOM_immutable);
};
ZPP_Circle.prototype.__validate_aabb = function() {
	if(this.zip_worldCOM) {
		if(this.body != null) {
			this.zip_worldCOM = false;
			if(this.zip_localCOM) {
				this.zip_localCOM = false;
				if(this.type == 1) {
					var _this = this.polygon;
					if(_this.lverts.next == null) {
						throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
					}
					if(_this.lverts.next.next == null) {
						_this.localCOMx = _this.lverts.next.x;
						_this.localCOMy = _this.lverts.next.y;
					} else if(_this.lverts.next.next.next == null) {
						_this.localCOMx = _this.lverts.next.x;
						_this.localCOMy = _this.lverts.next.y;
						_this.localCOMx += _this.lverts.next.next.x;
						_this.localCOMy += _this.lverts.next.next.y;
						_this.localCOMx *= 0.5;
						_this.localCOMy *= 0.5;
					} else {
						_this.localCOMx = 0;
						_this.localCOMy = 0;
						var area = 0.0;
						var cx_ite = _this.lverts.next;
						var u = cx_ite;
						cx_ite = cx_ite.next;
						var v = cx_ite;
						cx_ite = cx_ite.next;
						while(cx_ite != null) {
							var w = cx_ite;
							area += v.x * (w.y - u.y);
							var cf = w.y * v.x - w.x * v.y;
							_this.localCOMx += (v.x + w.x) * cf;
							_this.localCOMy += (v.y + w.y) * cf;
							u = v;
							v = w;
							cx_ite = cx_ite.next;
						}
						cx_ite = _this.lverts.next;
						var w1 = cx_ite;
						area += v.x * (w1.y - u.y);
						var cf1 = w1.y * v.x - w1.x * v.y;
						_this.localCOMx += (v.x + w1.x) * cf1;
						_this.localCOMy += (v.y + w1.y) * cf1;
						u = v;
						cx_ite = cx_ite.next;
						var w2 = cx_ite;
						area += w1.x * (w2.y - u.y);
						var cf2 = w2.y * w1.x - w2.x * w1.y;
						_this.localCOMx += (w1.x + w2.x) * cf2;
						_this.localCOMy += (w1.y + w2.y) * cf2;
						area = 1 / (3 * area);
						var t = area;
						_this.localCOMx *= t;
						_this.localCOMy *= t;
					}
				}
				if(this.wrap_localCOM != null) {
					this.wrap_localCOM.zpp_inner.x = this.localCOMx;
					this.wrap_localCOM.zpp_inner.y = this.localCOMy;
				}
			}
			var _this1 = this.body;
			if(_this1.zip_axis) {
				_this1.zip_axis = false;
				_this1.axisx = Math.sin(_this1.rot);
				_this1.axisy = Math.cos(_this1.rot);
			}
			this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
			this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
		}
	}
	var rx = this.radius;
	var ry = this.radius;
	this.aabb.minx = this.worldCOMx - rx;
	this.aabb.miny = this.worldCOMy - ry;
	this.aabb.maxx = this.worldCOMx + rx;
	this.aabb.maxy = this.worldCOMy + ry;
};
ZPP_Circle.prototype._force_validate_aabb = function() {
	this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
	this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
	this.aabb.minx = this.worldCOMx - this.radius;
	this.aabb.miny = this.worldCOMy - this.radius;
	this.aabb.maxx = this.worldCOMx + this.radius;
	this.aabb.maxy = this.worldCOMy + this.radius;
};
ZPP_Circle.prototype.__validate_sweepRadius = function() {
	this.sweepCoef = Math.sqrt(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
	this.sweepRadius = this.sweepCoef + this.radius;
};
ZPP_Circle.prototype.__validate_area_inertia = function() {
	var r2 = this.radius * this.radius;
	this.area = r2 * Math.PI;
	this.inertia = r2 * 0.5 + (this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
};
ZPP_Circle.prototype.__validate_angDrag = function() {
	var lc = this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy;
	var r2 = this.radius * this.radius;
	this.angDrag = (lc + 2 * r2) * (this.material.dynamicFriction * Config.fluidAngularDragFriction) + 0.5 * Config.fluidAngularDrag * (1 + Config.fluidVacuumDrag) * lc;
	this.angDrag /= 2 * (lc + 0.5 * r2);
};
ZPP_Circle.prototype.__scale = function(sx,sy) {
	var factor = ((sx < 0?-sx:sx) + (sy < 0?-sy:sy)) / 2;
	this.radius *= factor < 0?-factor:factor;
	this.invalidate_radius();
	if(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy > 0) {
		this.localCOMx *= sx;
		this.localCOMy *= sy;
		this.invalidate_localCOM();
	}
};
ZPP_Circle.prototype.__translate = function(x,y) {
	this.localCOMx += x;
	this.localCOMy += y;
	this.invalidate_localCOM();
};
ZPP_Circle.prototype.__rotate = function(x,y) {
	if(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy > 0) {
		var tx = 0.0;
		var ty = 0.0;
		tx = y * this.localCOMx - x * this.localCOMy;
		ty = this.localCOMx * x + this.localCOMy * y;
		this.localCOMx = tx;
		this.localCOMy = ty;
		this.invalidate_localCOM();
	}
};
ZPP_Circle.prototype.__transform = function(m) {
	var det = m.zpp_inner.a * m.zpp_inner.d - m.zpp_inner.b * m.zpp_inner.c;
	if(det < 0) {
		det = -det;
	}
	this.radius *= Math.sqrt(det);
	var t = m.zpp_inner.a * this.localCOMx + m.zpp_inner.b * this.localCOMy + m.zpp_inner.tx;
	this.localCOMy = m.zpp_inner.c * this.localCOMx + m.zpp_inner.d * this.localCOMy + m.zpp_inner.ty;
	this.localCOMx = t;
	this.invalidate_radius();
	this.invalidate_localCOM();
};
ZPP_Circle.prototype.__copy = function() {
	var ret = new Circle(this.radius).zpp_inner_zn;
	ret.localCOMx = this.localCOMx;
	ret.localCOMy = this.localCOMy;
	ret.zip_localCOM = false;
	return ret;
};
ZPP_Circle.prototype.__class__ = ZPP_Circle;
var ZPP_Edge = zpp_nape.shape.ZPP_Edge = function() {
	this.tp1 = 0.0;
	this.tp0 = 0.0;
	this.gp1 = null;
	this.lp1 = null;
	this.gp0 = null;
	this.lp0 = null;
	this.gprojection = 0.0;
	this.lprojection = 0.0;
	this.length = 0.0;
	this.wrap_gnorm = null;
	this.gnormy = 0.0;
	this.gnormx = 0.0;
	this.wrap_lnorm = null;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.outer = null;
	this.polygon = null;
	this.next = null;
	this.lnormx = 0;
	this.lnormy = 0;
	this.gnormx = 0;
	this.gnormy = 0;
	this.length = 0;
	this.lprojection = 0;
	this.gprojection = 0;
};
ZPP_Edge.__name__ = ["zpp_nape","shape","ZPP_Edge"];
ZPP_Edge.prototype.next = null;
ZPP_Edge.prototype.free = function() {
	this.polygon = null;
};
ZPP_Edge.prototype.alloc = function() {
};
ZPP_Edge.prototype.polygon = null;
ZPP_Edge.prototype.outer = null;
ZPP_Edge.prototype.wrapper = function() {
	if(this.outer == null) {
		ZPP_Edge.internal = true;
		this.outer = new Edge();
		ZPP_Edge.internal = false;
		this.outer.zpp_inner = this;
	}
	return this.outer;
};
ZPP_Edge.prototype.lnormx = null;
ZPP_Edge.prototype.lnormy = null;
ZPP_Edge.prototype.wrap_lnorm = null;
ZPP_Edge.prototype.gnormx = null;
ZPP_Edge.prototype.gnormy = null;
ZPP_Edge.prototype.wrap_gnorm = null;
ZPP_Edge.prototype.length = null;
ZPP_Edge.prototype.lprojection = null;
ZPP_Edge.prototype.gprojection = null;
ZPP_Edge.prototype.lp0 = null;
ZPP_Edge.prototype.gp0 = null;
ZPP_Edge.prototype.lp1 = null;
ZPP_Edge.prototype.gp1 = null;
ZPP_Edge.prototype.tp0 = null;
ZPP_Edge.prototype.tp1 = null;
ZPP_Edge.prototype.lnorm_validate = function() {
	if(this.polygon == null) {
		throw new js._Boot.HaxeError("Error: Edge not currently in use");
	}
	this.polygon.validate_laxi();
	this.wrap_lnorm.zpp_inner.x = this.lnormx;
	this.wrap_lnorm.zpp_inner.y = this.lnormy;
};
ZPP_Edge.prototype.gnorm_validate = function() {
	if(this.polygon == null) {
		throw new js._Boot.HaxeError("Error: Edge not currently in use");
	}
	if(this.polygon.body == null) {
		throw new js._Boot.HaxeError("Error: Edge worldNormal only makes sense if the parent Polygon is contained within a rigid body");
	}
	var _this = this.polygon;
	if(_this.zip_gaxi) {
		if(_this.body != null) {
			_this.zip_gaxi = false;
			_this.validate_laxi();
			var _this1 = _this.body;
			if(_this1.zip_axis) {
				_this1.zip_axis = false;
				_this1.axisx = Math.sin(_this1.rot);
				_this1.axisy = Math.cos(_this1.rot);
			}
			if(_this.zip_gverts) {
				if(_this.body != null) {
					_this.zip_gverts = false;
					_this.validate_lverts();
					var _this2 = _this.body;
					if(_this2.zip_axis) {
						_this2.zip_axis = false;
						_this2.axisx = Math.sin(_this2.rot);
						_this2.axisy = Math.cos(_this2.rot);
					}
					var li = _this.lverts.next;
					var cx_ite = _this.gverts.next;
					while(cx_ite != null) {
						var g = cx_ite;
						var l = li;
						li = li.next;
						g.x = _this.body.posx + (_this.body.axisy * l.x - _this.body.axisx * l.y);
						g.y = _this.body.posy + (l.x * _this.body.axisx + l.y * _this.body.axisy);
						cx_ite = cx_ite.next;
					}
				}
			}
			var ite = _this.edges.head;
			var cx_ite1 = _this.gverts.next;
			var u = cx_ite1;
			cx_ite1 = cx_ite1.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var e = ite.elt;
				ite = ite.next;
				e.gp0 = u;
				e.gp1 = v;
				e.gnormx = _this.body.axisy * e.lnormx - _this.body.axisx * e.lnormy;
				e.gnormy = e.lnormx * _this.body.axisx + e.lnormy * _this.body.axisy;
				e.gprojection = _this.body.posx * e.gnormx + _this.body.posy * e.gnormy + e.lprojection;
				if(e.wrap_gnorm != null) {
					e.wrap_gnorm.zpp_inner.x = e.gnormx;
					e.wrap_gnorm.zpp_inner.y = e.gnormy;
				}
				e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
				e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
				u = v;
				cx_ite1 = cx_ite1.next;
			}
			var e1 = ite.elt;
			e1.gp0 = u;
			e1.gp1 = _this.gverts.next;
			e1.gnormx = _this.body.axisy * e1.lnormx - _this.body.axisx * e1.lnormy;
			e1.gnormy = e1.lnormx * _this.body.axisx + e1.lnormy * _this.body.axisy;
			e1.gprojection = _this.body.posx * e1.gnormx + _this.body.posy * e1.gnormy + e1.lprojection;
			if(e1.wrap_gnorm != null) {
				e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
				e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
			}
			e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
			e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
		}
	}
	this.wrap_gnorm.zpp_inner.x = this.gnormx;
	this.wrap_gnorm.zpp_inner.y = this.gnormy;
};
ZPP_Edge.prototype.getlnorm = function() {
	var x = this.lnormx;
	var y = this.lnormy;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_lnorm = ret;
	this.wrap_lnorm.zpp_inner._immutable = true;
	this.wrap_lnorm.zpp_inner._validate = $bind(this,this.lnorm_validate);
};
ZPP_Edge.prototype.getgnorm = function() {
	var x = this.gnormx;
	var y = this.gnormy;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_gnorm = ret;
	this.wrap_gnorm.zpp_inner._immutable = true;
	this.wrap_gnorm.zpp_inner._validate = $bind(this,this.gnorm_validate);
};
ZPP_Edge.prototype.__class__ = ZPP_Edge;
var ZPP_Polygon = zpp_nape.shape.ZPP_Polygon = function() {
	this.zip_sanitation = false;
	this.zip_valid = false;
	this.zip_gaxi = false;
	this.zip_gverts = false;
	this.zip_laxi = false;
	this.zip_lverts = false;
	this.reverse_flag = false;
	this.edgeCnt = 0;
	this.wrap_edges = null;
	this.edges = null;
	this.wrap_gverts = null;
	this.gverts = null;
	this.wrap_lverts = null;
	this.lverts = null;
	this.outer_zn = null;
	ZPP_Shape.call(this,1);
	this.polygon = this;
	this.lverts = new ZPP_Vec2();
	this.gverts = new ZPP_Vec2();
	this.edges = new ZNPList_ZPP_Edge();
	this.edgeCnt = 0;
};
ZPP_Polygon.__name__ = ["zpp_nape","shape","ZPP_Polygon"];
ZPP_Polygon.__super__ = ZPP_Shape;
// for(var k in ZPP_Shape.prototype ) ZPP_Polygon.prototype[k] = ZPP_Shape.prototype[k];
ZPP_Polygon.prototype = Object.create(ZPP_Shape.prototype);
ZPP_Polygon.prototype.outer_zn = null;
ZPP_Polygon.prototype.lverts = null;
ZPP_Polygon.prototype.wrap_lverts = null;
ZPP_Polygon.prototype.gverts = null;
ZPP_Polygon.prototype.wrap_gverts = null;
ZPP_Polygon.prototype.edges = null;
ZPP_Polygon.prototype.wrap_edges = null;
ZPP_Polygon.prototype.edgeCnt = null;
ZPP_Polygon.prototype.reverse_flag = null;
ZPP_Polygon.prototype.__clear = function() {
};
ZPP_Polygon.prototype.lverts_pa_invalidate = function(x) {
	this.invalidate_lverts();
};
ZPP_Polygon.prototype.lverts_pa_immutable = function() {
	if(this.body != null && this.body.type == 1 && this.body.space != null) {
		throw new js._Boot.HaxeError("Error: Cannot modify local vertex of Polygon added to a static body whilst within a Space");
	}
};
ZPP_Polygon.prototype.gverts_pa_validate = function() {
	if(this.body == null) {
		throw new js._Boot.HaxeError("Error: World vertex only makes sense when Polygon is contained in a rigid body");
	}
	if(this.zip_gverts) {
		if(this.body != null) {
			this.zip_gverts = false;
			this.validate_lverts();
			var _this = this.body;
			if(_this.zip_axis) {
				_this.zip_axis = false;
				_this.axisx = Math.sin(_this.rot);
				_this.axisy = Math.cos(_this.rot);
			}
			var li = this.lverts.next;
			var cx_ite = this.gverts.next;
			while(cx_ite != null) {
				var g = cx_ite;
				var l = li;
				li = li.next;
				g.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
				g.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
				cx_ite = cx_ite.next;
			}
		}
	}
};
ZPP_Polygon.prototype.lverts_post_adder = function(x) {
	x.zpp_inner._invalidate = $bind(this,this.lverts_pa_invalidate);
	x.zpp_inner._isimmutable = $bind(this,this.lverts_pa_immutable);
	var ite = null;
	var ite2 = null;
	var cx_ite = this.lverts.next;
	while(cx_ite != null) {
		if(cx_ite == x.zpp_inner) {
			break;
		} else {
			if(ite == null) {
				ite = this.gverts.next;
			} else {
				ite = ite.next;
			}
			if(ite2 == null) {
				ite2 = this.edges.head;
			} else {
				ite2 = ite2.next;
			}
		}
		cx_ite = cx_ite.next;
	}
	var ret;
	if(ZPP_Vec2.zpp_pool == null) {
		ret = new ZPP_Vec2();
	} else {
		ret = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.weak = false;
	ret._immutable = true;
	ret.x = 0;
	ret.y = 0;
	var vec = ret;
	this.gverts.insert(ite,vec);
	if(this.lverts.next.next != null) {
		if(this.lverts.next.next.next == null) {
			var ed;
			if(ZPP_Edge.zpp_pool == null) {
				ed = new ZPP_Edge();
			} else {
				ed = ZPP_Edge.zpp_pool;
				ZPP_Edge.zpp_pool = ed.next;
				ed.next = null;
			}
			ed.polygon = this;
			this.edges.add(ed);
			var ed1;
			if(ZPP_Edge.zpp_pool == null) {
				ed1 = new ZPP_Edge();
			} else {
				ed1 = ZPP_Edge.zpp_pool;
				ZPP_Edge.zpp_pool = ed1.next;
				ed1.next = null;
			}
			ed1.polygon = this;
			this.edges.add(ed1);
			this.edgeCnt += 2;
		} else {
			var ed2;
			if(ZPP_Edge.zpp_pool == null) {
				ed2 = new ZPP_Edge();
			} else {
				ed2 = ZPP_Edge.zpp_pool;
				ZPP_Edge.zpp_pool = ed2.next;
				ed2.next = null;
			}
			ed2.polygon = this;
			this.edges.insert(ite2,ed2);
			this.edgeCnt++;
		}
	}
	vec._validate = $bind(this,this.gverts_pa_validate);
};
ZPP_Polygon.prototype.lverts_subber = function(x) {
	this.cleanup_lvert(x.zpp_inner);
};
ZPP_Polygon.prototype.lverts_invalidate = function(_) {
	this.invalidate_lverts();
};
ZPP_Polygon.prototype.lverts_validate = function() {
	this.validate_lverts();
};
ZPP_Polygon.prototype.lverts_modifiable = function() {
	this.immutable_midstep("Polygon::localVerts");
	if(this.body != null && this.body.type == 1 && this.body.space != null) {
		throw new js._Boot.HaxeError("Error: Cannot modifiy shapes of static object once added to Space");
	}
};
ZPP_Polygon.prototype.gverts_validate = function() {
	if(this.zip_gverts) {
		if(this.body != null) {
			this.zip_gverts = false;
			this.validate_lverts();
			var _this = this.body;
			if(_this.zip_axis) {
				_this.zip_axis = false;
				_this.axisx = Math.sin(_this.rot);
				_this.axisy = Math.cos(_this.rot);
			}
			var li = this.lverts.next;
			var cx_ite = this.gverts.next;
			while(cx_ite != null) {
				var g = cx_ite;
				var l = li;
				li = li.next;
				g.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
				g.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
				cx_ite = cx_ite.next;
			}
		}
	}
};
ZPP_Polygon.prototype.edges_validate = function() {
	this.validate_lverts();
};
ZPP_Polygon.prototype.getlverts = function() {
	this.wrap_lverts = ZPP_MixVec2List.get(this.lverts);
	this.wrap_lverts.zpp_inner.post_adder = $bind(this,this.lverts_post_adder);
	this.wrap_lverts.zpp_inner.subber = $bind(this,this.lverts_subber);
	this.wrap_lverts.zpp_inner._invalidate = $bind(this,this.lverts_invalidate);
	this.wrap_lverts.zpp_inner._validate = $bind(this,this.lverts_validate);
	this.wrap_lverts.zpp_inner._modifiable = $bind(this,this.lverts_modifiable);
	this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
};
ZPP_Polygon.prototype.getgverts = function() {
	this.wrap_gverts = ZPP_MixVec2List.get(this.gverts,true);
	this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
	this.wrap_gverts.zpp_inner._validate = $bind(this,this.gverts_validate);
};
ZPP_Polygon.prototype.getedges = function() {
	this.wrap_edges = ZPP_EdgeList.get(this.edges,true);
	this.wrap_edges.zpp_inner.reverse_flag = this.reverse_flag;
	this.wrap_edges.zpp_inner._validate = $bind(this,this.edges_validate);
};
ZPP_Polygon.prototype.zip_lverts = null;
ZPP_Polygon.prototype.invalidate_lverts = function() {
	this.invalidate_laxi();
	this.invalidate_area_inertia();
	this.invalidate_angDrag();
	this.invalidate_localCOM();
	this.invalidate_gverts();
	this.zip_lverts = true;
	this.zip_valid = true;
	this.zip_sanitation = true;
	if(this.body != null) {
		this.body.wake();
	}
};
ZPP_Polygon.prototype.zip_laxi = null;
ZPP_Polygon.prototype.invalidate_laxi = function() {
	this.invalidate_gaxi();
	this.zip_sweepRadius = true;
	this.zip_laxi = true;
};
ZPP_Polygon.prototype.zip_gverts = null;
ZPP_Polygon.prototype.invalidate_gverts = function() {
	this.zip_aabb = true;
	if(this.body != null) {
		this.body.zip_aabb = true;
	}
	this.zip_gverts = true;
};
ZPP_Polygon.prototype.zip_gaxi = null;
ZPP_Polygon.prototype.invalidate_gaxi = function() {
	this.zip_gaxi = true;
};
ZPP_Polygon.prototype.zip_valid = null;
ZPP_Polygon.prototype.validation = null;
ZPP_Polygon.prototype.valid = function() {
	if(this.zip_valid) {
		this.zip_valid = false;
		if(this.zip_sanitation) {
			this.zip_sanitation = false;
			this.splice_collinear_real();
		}
		if(this.lverts.length < 3) {
			if(ZPP_Flags.ValidationResult_DEGENERATE == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.ValidationResult_DEGENERATE = new ValidationResult();
				ZPP_Flags.internal = false;
			}
			return this.validation = ZPP_Flags.ValidationResult_DEGENERATE;
		} else {
			this.validate_lverts();
			this.validate_area_inertia();
			if(this.area < Config.epsilon) {
				if(ZPP_Flags.ValidationResult_DEGENERATE == null) {
					ZPP_Flags.internal = true;
					ZPP_Flags.ValidationResult_DEGENERATE = new ValidationResult();
					ZPP_Flags.internal = false;
				}
				return this.validation = ZPP_Flags.ValidationResult_DEGENERATE;
			} else {
				var neg = false;
				var pos = false;
				var cx_cont = true;
				var cx_ite = this.lverts.next;
				var u = cx_ite;
				cx_ite = cx_ite.next;
				var v = cx_ite;
				cx_ite = cx_ite.next;
				while(cx_ite != null) {
					var w = cx_ite;
					var ax = 0.0;
					var ay = 0.0;
					ax = w.x - v.x;
					ay = w.y - v.y;
					var bx = 0.0;
					var by = 0.0;
					bx = v.x - u.x;
					by = v.y - u.y;
					var dot = by * ax - bx * ay;
					if(dot > Config.epsilon) {
						pos = true;
					} else if(dot < -Config.epsilon) {
						neg = true;
					}
					if(pos && neg) {
						cx_cont = false;
						break;
					}
					u = v;
					v = w;
					cx_ite = cx_ite.next;
				}
				if(cx_cont) {
					cx_ite = this.lverts.next;
					var w1 = cx_ite;
					while(true) {
						var ax1 = 0.0;
						var ay1 = 0.0;
						ax1 = w1.x - v.x;
						ay1 = w1.y - v.y;
						var bx1 = 0.0;
						var by1 = 0.0;
						bx1 = v.x - u.x;
						by1 = v.y - u.y;
						var dot1 = by1 * ax1 - bx1 * ay1;
						if(dot1 > Config.epsilon) {
							pos = true;
						} else if(dot1 < -Config.epsilon) {
							neg = true;
						}
						if(pos && neg) {
							cx_cont = false;
							break;
						}
						break;
					}
					if(cx_cont) {
						u = v;
						v = w1;
						cx_ite = cx_ite.next;
						var w2 = cx_ite;
						while(true) {
							var ax2 = 0.0;
							var ay2 = 0.0;
							ax2 = w2.x - w1.x;
							ay2 = w2.y - w1.y;
							var bx2 = 0.0;
							var by2 = 0.0;
							bx2 = w1.x - u.x;
							by2 = w1.y - u.y;
							var dot2 = by2 * ax2 - bx2 * ay2;
							if(dot2 > Config.epsilon) {
								pos = true;
							} else if(dot2 < -Config.epsilon) {
								neg = true;
							}
							if(pos && neg) {
								break;
							}
							break;
						}
					}
				}
				if(pos && neg) {
					if(ZPP_Flags.ValidationResult_CONCAVE == null) {
						ZPP_Flags.internal = true;
						ZPP_Flags.ValidationResult_CONCAVE = new ValidationResult();
						ZPP_Flags.internal = false;
					}
					return this.validation = ZPP_Flags.ValidationResult_CONCAVE;
				} else {
					var cont = true;
					var cx_cont1 = true;
					var cx_ite1 = this.lverts.next;
					var u1 = cx_ite1;
					cx_ite1 = cx_ite1.next;
					while(cx_ite1 != null) {
						var v1 = cx_ite1;
						if(!cont) {
							cx_cont1 = false;
							break;
						}
						var cx_cont2 = true;
						var cx_ite2 = this.lverts.next;
						var a = cx_ite2;
						cx_ite2 = cx_ite2.next;
						while(cx_ite2 != null) {
							var b = cx_ite2;
							if(u1 == a || u1 == b || v1 == a || v1 == b) {
								a = b;
								cx_ite2 = cx_ite2.next;
								continue;
							}
							var sx = 0.0;
							var sy = 0.0;
							sx = u1.x - a.x;
							sy = u1.y - a.y;
							var vx = 0.0;
							var vy = 0.0;
							vx = v1.x - u1.x;
							vy = v1.y - u1.y;
							var qx = 0.0;
							var qy = 0.0;
							qx = b.x - a.x;
							qy = b.y - a.y;
							var den = vy * qx - vx * qy;
							if(den * den > Config.epsilon) {
								den = 1 / den;
								var t = (qy * sx - qx * sy) * den;
								if(t > Config.epsilon && t < 1 - Config.epsilon) {
									var s = (vy * sx - vx * sy) * den;
									if(s > Config.epsilon && s < 1 - Config.epsilon) {
										cont = false;
										cx_cont2 = false;
										break;
									}
								}
							}
							a = b;
							cx_ite2 = cx_ite2.next;
						}
						if(cx_cont2) {
							while(true) {
								var b1 = this.lverts.next;
								if(u1 == a || u1 == b1 || v1 == a || v1 == b1) {
									break;
								}
								var sx1 = 0.0;
								var sy1 = 0.0;
								sx1 = u1.x - a.x;
								sy1 = u1.y - a.y;
								var vx1 = 0.0;
								var vy1 = 0.0;
								vx1 = v1.x - u1.x;
								vy1 = v1.y - u1.y;
								var qx1 = 0.0;
								var qy1 = 0.0;
								qx1 = b1.x - a.x;
								qy1 = b1.y - a.y;
								var den1 = vy1 * qx1 - vx1 * qy1;
								if(den1 * den1 > Config.epsilon) {
									den1 = 1 / den1;
									var t1 = (qy1 * sx1 - qx1 * sy1) * den1;
									if(t1 > Config.epsilon && t1 < 1 - Config.epsilon) {
										var s1 = (vy1 * sx1 - vx1 * sy1) * den1;
										if(s1 > Config.epsilon && s1 < 1 - Config.epsilon) {
											cont = false;
											break;
										}
									}
								}
								break;
							}
						}
						u1 = v1;
						cx_ite1 = cx_ite1.next;
					}
					if(cx_cont1) {
						while(true) {
							var v2 = this.lverts.next;
							if(!cont) {
								break;
							}
							var cx_cont3 = true;
							var cx_ite3 = this.lverts.next;
							var a1 = cx_ite3;
							cx_ite3 = cx_ite3.next;
							while(cx_ite3 != null) {
								var b2 = cx_ite3;
								if(u1 == a1 || u1 == b2 || v2 == a1 || v2 == b2) {
									a1 = b2;
									cx_ite3 = cx_ite3.next;
									continue;
								}
								var sx2 = 0.0;
								var sy2 = 0.0;
								sx2 = u1.x - a1.x;
								sy2 = u1.y - a1.y;
								var vx2 = 0.0;
								var vy2 = 0.0;
								vx2 = v2.x - u1.x;
								vy2 = v2.y - u1.y;
								var qx2 = 0.0;
								var qy2 = 0.0;
								qx2 = b2.x - a1.x;
								qy2 = b2.y - a1.y;
								var den2 = vy2 * qx2 - vx2 * qy2;
								if(den2 * den2 > Config.epsilon) {
									den2 = 1 / den2;
									var t2 = (qy2 * sx2 - qx2 * sy2) * den2;
									if(t2 > Config.epsilon && t2 < 1 - Config.epsilon) {
										var s2 = (vy2 * sx2 - vx2 * sy2) * den2;
										if(s2 > Config.epsilon && s2 < 1 - Config.epsilon) {
											cont = false;
											cx_cont3 = false;
											break;
										}
									}
								}
								a1 = b2;
								cx_ite3 = cx_ite3.next;
							}
							if(cx_cont3) {
								while(true) {
									var b3 = this.lverts.next;
									if(u1 == a1 || u1 == b3 || v2 == a1 || v2 == b3) {
										break;
									}
									var sx3 = 0.0;
									var sy3 = 0.0;
									sx3 = u1.x - a1.x;
									sy3 = u1.y - a1.y;
									var vx3 = 0.0;
									var vy3 = 0.0;
									vx3 = v2.x - u1.x;
									vy3 = v2.y - u1.y;
									var qx3 = 0.0;
									var qy3 = 0.0;
									qx3 = b3.x - a1.x;
									qy3 = b3.y - a1.y;
									var den3 = vy3 * qx3 - vx3 * qy3;
									if(den3 * den3 > Config.epsilon) {
										den3 = 1 / den3;
										var t3 = (qy3 * sx3 - qx3 * sy3) * den3;
										if(t3 > Config.epsilon && t3 < 1 - Config.epsilon) {
											var s3 = (vy3 * sx3 - vx3 * sy3) * den3;
											if(s3 > Config.epsilon && s3 < 1 - Config.epsilon) {
												cont = false;
												break;
											}
										}
									}
									break;
								}
							}
							break;
						}
					}
					if(!cont) {
						if(ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
							ZPP_Flags.internal = true;
							ZPP_Flags.ValidationResult_SELF_INTERSECTING = new ValidationResult();
							ZPP_Flags.internal = false;
						}
						return this.validation = ZPP_Flags.ValidationResult_SELF_INTERSECTING;
					} else {
						if(ZPP_Flags.ValidationResult_VALID == null) {
							ZPP_Flags.internal = true;
							ZPP_Flags.ValidationResult_VALID = new ValidationResult();
							ZPP_Flags.internal = false;
						}
						return this.validation = ZPP_Flags.ValidationResult_VALID;
					}
				}
			}
		}
	} else {
		return this.validation;
	}
};
ZPP_Polygon.prototype.validate_lverts = function() {
	if(this.zip_lverts) {
		this.zip_lverts = false;
		if(this.lverts.length > 2) {
			this.validate_area_inertia();
			if(this.area < 0) {
				this.reverse_vertices();
				this.area = -this.area;
			}
		}
	}
};
ZPP_Polygon.prototype.cleanup_lvert = function(x) {
	var ite = null;
	var ite2 = null;
	var cx_ite = this.lverts.next;
	while(cx_ite != null) {
		if(cx_ite == x) {
			break;
		} else {
			if(ite == null) {
				ite = this.gverts.next;
			} else {
				ite = ite.next;
			}
			if(ite2 == null) {
				ite2 = this.edges.head;
			} else {
				ite2 = ite2.next;
			}
		}
		cx_ite = cx_ite.next;
	}
	var rem = ite == null?this.gverts.next:ite.next;
	this.gverts.erase(ite);
	var o = rem;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = ZPP_Vec2.zpp_pool;
	ZPP_Vec2.zpp_pool = o;
	if(this.edgeCnt == 2) {
		var rem1 = this.edges.pop_unsafe();
		var o1 = rem1;
		o1.polygon = null;
		o1.next = ZPP_Edge.zpp_pool;
		ZPP_Edge.zpp_pool = o1;
		rem1 = this.edges.pop_unsafe();
		var o2 = rem1;
		o2.polygon = null;
		o2.next = ZPP_Edge.zpp_pool;
		ZPP_Edge.zpp_pool = o2;
		this.edgeCnt = 0;
	} else if(this.edgeCnt != 0) {
		var rem2 = ite2 == null?this.edges.head.elt:ite2.next.elt;
		this.edges.erase(ite2);
		var o3 = rem2;
		o3.polygon = null;
		o3.next = ZPP_Edge.zpp_pool;
		ZPP_Edge.zpp_pool = o3;
		this.edgeCnt--;
	}
};
ZPP_Polygon.prototype.zip_sanitation = null;
ZPP_Polygon.prototype.splice_collinear = function() {
	if(this.zip_sanitation) {
		this.zip_sanitation = false;
		this.splice_collinear_real();
	}
};
ZPP_Polygon.prototype.splice_collinear_real = function() {
	if(this.lverts.next == null) {
		return;
	}
	if(this.lverts.next.next == null) {
		return;
	}
	if(this.lverts.next.next.next == null) {
		return;
	}
	var pre = null;
	var cur = this.lverts.next;
	while(cur != null) {
		var nxt = cur.next == null?this.lverts.next:cur.next;
		var u = cur;
		var v = nxt;
		var ax = u.x;
		var ay = u.y;
		var bx = v.x;
		var by = v.y;
		var dx = 0.0;
		var dy = 0.0;
		dx = ax - bx;
		dy = ay - by;
		if(dx * dx + dy * dy < Config.epsilon * Config.epsilon) {
			this.cleanup_lvert(cur);
			cur = this.lverts.erase(pre);
		} else {
			pre = cur;
			cur = cur.next;
		}
	}
	if(this.lverts.next == null) {
		return;
	}
	var removed;
	while(true) {
		removed = false;
		var pre1 = this.lverts.next;
		while(pre1 != null) {
			var cur1 = pre1.next == null?this.lverts.next:pre1.next;
			var nxt1 = cur1.next == null?this.lverts.next:cur1.next;
			var u1 = pre1;
			var v1 = cur1;
			var w = nxt1;
			var ax1 = 0.0;
			var ay1 = 0.0;
			ax1 = v1.x - u1.x;
			ay1 = v1.y - u1.y;
			var bx1 = 0.0;
			var by1 = 0.0;
			bx1 = w.x - v1.x;
			by1 = w.y - v1.y;
			var crs = by1 * ax1 - bx1 * ay1;
			if(crs * crs >= Config.epsilon * Config.epsilon) {
				pre1 = pre1.next;
			} else {
				this.cleanup_lvert(cur1);
				this.lverts.erase(pre1.next == null?null:pre1);
				removed = true;
				pre1 = pre1.next;
			}
		}
		if(!removed) {
			break;
		}
	}
};
ZPP_Polygon.prototype.reverse_vertices = function() {
	this.lverts.reverse();
	this.gverts.reverse();
	this.edges.reverse();
	this.edges.insert(this.edges.iterator_at(this.edgeCnt - 1),this.edges.pop_unsafe());
	this.reverse_flag = !this.reverse_flag;
	if(this.wrap_lverts != null) {
		this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
	}
	if(this.wrap_gverts != null) {
		this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
	}
	if(this.wrap_edges != null) {
		this.wrap_edges.zpp_inner.reverse_flag = this.reverse_flag;
	}
};
ZPP_Polygon.prototype.validate_laxi = function() {
	if(this.zip_laxi) {
		this.zip_laxi = false;
		this.validate_lverts();
		var ite = this.edges.head;
		var cx_ite = this.lverts.next;
		var u = cx_ite;
		cx_ite = cx_ite.next;
		while(cx_ite != null) {
			var v = cx_ite;
			var edge = ite.elt;
			ite = ite.next;
			edge.lp0 = u;
			edge.lp1 = v;
			var dx = 0.0;
			var dy = 0.0;
			dx = u.x - v.x;
			dy = u.y - v.y;
			var l = Math.sqrt(dx * dx + dy * dy);
			edge.length = l;
			var t = 1.0 / l;
			dx *= t;
			dy *= t;
			var t1 = dx;
			dx = -dy;
			dy = t1;
			edge.lprojection = dx * u.x + dy * u.y;
			edge.lnormx = dx;
			edge.lnormy = dy;
			if(edge.wrap_lnorm != null) {
				edge.wrap_lnorm.zpp_inner.x = dx;
				edge.wrap_lnorm.zpp_inner.y = dy;
			}
			u = v;
			cx_ite = cx_ite.next;
		}
		var v1 = this.lverts.next;
		var edge1 = ite.elt;
		edge1.lp0 = u;
		edge1.lp1 = v1;
		var dx1 = 0.0;
		var dy1 = 0.0;
		dx1 = u.x - v1.x;
		dy1 = u.y - v1.y;
		var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
		edge1.length = l1;
		var t2 = 1.0 / l1;
		dx1 *= t2;
		dy1 *= t2;
		var t3 = dx1;
		dx1 = -dy1;
		dy1 = t3;
		edge1.lprojection = dx1 * u.x + dy1 * u.y;
		edge1.lnormx = dx1;
		edge1.lnormy = dy1;
		if(edge1.wrap_lnorm != null) {
			edge1.wrap_lnorm.zpp_inner.x = dx1;
			edge1.wrap_lnorm.zpp_inner.y = dy1;
		}
	}
};
ZPP_Polygon.prototype.validate_gverts = function() {
	if(this.zip_gverts) {
		if(this.body != null) {
			this.zip_gverts = false;
			this.validate_lverts();
			var _this = this.body;
			if(_this.zip_axis) {
				_this.zip_axis = false;
				_this.axisx = Math.sin(_this.rot);
				_this.axisy = Math.cos(_this.rot);
			}
			var li = this.lverts.next;
			var cx_ite = this.gverts.next;
			while(cx_ite != null) {
				var g = cx_ite;
				var l = li;
				li = li.next;
				g.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
				g.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
				cx_ite = cx_ite.next;
			}
		}
	}
};
ZPP_Polygon.prototype.validate_gaxi = function() {
	if(this.zip_gaxi) {
		if(this.body != null) {
			this.zip_gaxi = false;
			this.validate_laxi();
			var _this = this.body;
			if(_this.zip_axis) {
				_this.zip_axis = false;
				_this.axisx = Math.sin(_this.rot);
				_this.axisy = Math.cos(_this.rot);
			}
			if(this.zip_gverts) {
				if(this.body != null) {
					this.zip_gverts = false;
					this.validate_lverts();
					var _this1 = this.body;
					if(_this1.zip_axis) {
						_this1.zip_axis = false;
						_this1.axisx = Math.sin(_this1.rot);
						_this1.axisy = Math.cos(_this1.rot);
					}
					var li = this.lverts.next;
					var cx_ite = this.gverts.next;
					while(cx_ite != null) {
						var g = cx_ite;
						var l = li;
						li = li.next;
						g.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
						g.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
						cx_ite = cx_ite.next;
					}
				}
			}
			var ite = this.edges.head;
			var cx_ite1 = this.gverts.next;
			var u = cx_ite1;
			cx_ite1 = cx_ite1.next;
			while(cx_ite1 != null) {
				var v = cx_ite1;
				var e = ite.elt;
				ite = ite.next;
				e.gp0 = u;
				e.gp1 = v;
				e.gnormx = this.body.axisy * e.lnormx - this.body.axisx * e.lnormy;
				e.gnormy = e.lnormx * this.body.axisx + e.lnormy * this.body.axisy;
				e.gprojection = this.body.posx * e.gnormx + this.body.posy * e.gnormy + e.lprojection;
				if(e.wrap_gnorm != null) {
					e.wrap_gnorm.zpp_inner.x = e.gnormx;
					e.wrap_gnorm.zpp_inner.y = e.gnormy;
				}
				e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
				e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
				u = v;
				cx_ite1 = cx_ite1.next;
			}
			var e1 = ite.elt;
			e1.gp0 = u;
			e1.gp1 = this.gverts.next;
			e1.gnormx = this.body.axisy * e1.lnormx - this.body.axisx * e1.lnormy;
			e1.gnormy = e1.lnormx * this.body.axisx + e1.lnormy * this.body.axisy;
			e1.gprojection = this.body.posx * e1.gnormx + this.body.posy * e1.gnormy + e1.lprojection;
			if(e1.wrap_gnorm != null) {
				e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
				e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
			}
			e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
			e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
		}
	}
};
ZPP_Polygon.prototype.__validate_aabb = function() {
	if(this.zip_gverts) {
		if(this.body != null) {
			this.zip_gverts = false;
			this.validate_lverts();
			var _this = this.body;
			if(_this.zip_axis) {
				_this.zip_axis = false;
				_this.axisx = Math.sin(_this.rot);
				_this.axisy = Math.cos(_this.rot);
			}
			var li = this.lverts.next;
			var cx_ite = this.gverts.next;
			while(cx_ite != null) {
				var g = cx_ite;
				var l = li;
				li = li.next;
				g.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
				g.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
				cx_ite = cx_ite.next;
			}
		}
	}
	if(this.lverts.next == null) {
		throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful bounds");
	}
	var p0 = this.gverts.next;
	this.aabb.minx = p0.x;
	this.aabb.miny = p0.y;
	this.aabb.maxx = p0.x;
	this.aabb.maxy = p0.y;
	var cx_ite1 = this.gverts.next.next;
	while(cx_ite1 != null) {
		var p = cx_ite1;
		if(p.x < this.aabb.minx) {
			this.aabb.minx = p.x;
		}
		if(p.x > this.aabb.maxx) {
			this.aabb.maxx = p.x;
		}
		if(p.y < this.aabb.miny) {
			this.aabb.miny = p.y;
		}
		if(p.y > this.aabb.maxy) {
			this.aabb.maxy = p.y;
		}
		cx_ite1 = cx_ite1.next;
	}
};
ZPP_Polygon.prototype._force_validate_aabb = function() {
	var li = this.lverts.next;
	var p0 = this.gverts.next;
	var l = li;
	li = li.next;
	p0.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
	p0.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
	this.aabb.minx = p0.x;
	this.aabb.miny = p0.y;
	this.aabb.maxx = p0.x;
	this.aabb.maxy = p0.y;
	var cx_ite = this.gverts.next.next;
	while(cx_ite != null) {
		var p = cx_ite;
		var l1 = li;
		li = li.next;
		p.x = this.body.posx + (this.body.axisy * l1.x - this.body.axisx * l1.y);
		p.y = this.body.posy + (l1.x * this.body.axisx + l1.y * this.body.axisy);
		if(p.x < this.aabb.minx) {
			this.aabb.minx = p.x;
		}
		if(p.x > this.aabb.maxx) {
			this.aabb.maxx = p.x;
		}
		if(p.y < this.aabb.miny) {
			this.aabb.miny = p.y;
		}
		if(p.y > this.aabb.maxy) {
			this.aabb.maxy = p.y;
		}
		cx_ite = cx_ite.next;
	}
};
ZPP_Polygon.prototype.__validate_sweepRadius = function() {
	var maxRadius = 0.0;
	var minRadius = 0.0;
	this.validate_laxi();
	var cx_ite = this.lverts.next;
	while(cx_ite != null) {
		var x = cx_ite;
		var r = x.x * x.x + x.y * x.y;
		if(r > maxRadius) {
			maxRadius = r;
		}
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = this.edges.head;
	while(cx_ite1 != null) {
		var e = cx_ite1.elt;
		if(e.lprojection < minRadius) {
			minRadius = e.lprojection;
			if(minRadius < 0) {
				break;
			}
		}
		cx_ite1 = cx_ite1.next;
	}
	if(minRadius < 0) {
		minRadius = 0;
	}
	this.sweepRadius = Math.sqrt(maxRadius);
	this.sweepCoef = this.sweepRadius - minRadius;
};
ZPP_Polygon.prototype.__validate_area_inertia = function() {
	if(this.lverts.next == null || this.lverts.next.next == null || this.lverts.next.next.next == null) {
		this.area = 0;
		this.inertia = 0;
	} else {
		this.area = 0.0;
		var s1 = 0.0;
		var s2 = 0.0;
		var cx_ite = this.lverts.next;
		var u = cx_ite;
		cx_ite = cx_ite.next;
		var v = cx_ite;
		cx_ite = cx_ite.next;
		while(cx_ite != null) {
			var w = cx_ite;
			var a = v.y * u.x - v.x * u.y;
			s1 += a * (v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y));
			s2 += a;
			this.area += v.x * (w.y - u.y);
			u = v;
			v = w;
			cx_ite = cx_ite.next;
		}
		cx_ite = this.lverts.next;
		var w1 = cx_ite;
		var a1 = v.y * u.x - v.x * u.y;
		s1 += a1 * (v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y));
		s2 += a1;
		this.area += v.x * (w1.y - u.y);
		u = v;
		cx_ite = cx_ite.next;
		var a2 = w1.y * u.x - w1.x * u.y;
		s1 += a2 * (w1.x * w1.x + w1.y * w1.y + (w1.x * u.x + w1.y * u.y) + (u.x * u.x + u.y * u.y));
		s2 += a2;
		this.area += w1.x * (cx_ite.y - u.y);
		this.inertia = s1 / (6 * s2);
		this.area *= 0.5;
		if(this.area < 0) {
			this.area = -this.area;
			this.reverse_vertices();
		}
	}
};
ZPP_Polygon.prototype.__validate_angDrag = function() {
	if(this.lverts.length < 3) {
		throw new js._Boot.HaxeError("Error: Polygon's with less than 3 vertices have no meaningful angDrag");
	}
	this.validate_area_inertia();
	this.validate_laxi();
	var accum = 0.0;
	var ei = this.edges.head;
	var perim = 0.0;
	var cx_itei = this.lverts.next;
	var u = cx_itei;
	var cx_itej = cx_itei.next;
	while(cx_itej != null) {
		var v = cx_itej;
		var edge = ei.elt;
		ei = ei.next;
		perim += edge.length;
		var dx = 0.0;
		var dy = 0.0;
		dx = v.x - u.x;
		dy = v.y - u.y;
		accum += edge.length * Config.fluidAngularDragFriction * this.material.dynamicFriction * edge.lprojection * edge.lprojection;
		var t = -(u.y * edge.lnormx - u.x * edge.lnormy) / (dy * edge.lnormx - dx * edge.lnormy);
		if(t > 0) {
			var ta = t > 1?1:t;
			var cx = 0.0;
			var cy = 0.0;
			cx = u.x;
			cy = u.y;
			var t1 = ta;
			cx += dx * t1;
			cy += dy * t1;
			var dota = edge.lnormy * u.x - edge.lnormx * u.y;
			var dotb = edge.lnormy * cx - edge.lnormx * cy;
			accum += (dotb * dotb * dotb - dota * dota * dota) / (3 * (dotb - dota)) * ta * edge.length * Config.fluidAngularDrag;
		}
		if(t < 1) {
			var tb = t < 0?0:t;
			var cx1 = 0.0;
			var cy1 = 0.0;
			cx1 = u.x;
			cy1 = u.y;
			var t2 = tb;
			cx1 += dx * t2;
			cy1 += dy * t2;
			var dota1 = edge.lnormy * cx1 - edge.lnormx * cy1;
			var dotb1 = edge.lnormy * v.x - edge.lnormx * v.y;
			accum += (dotb1 * dotb1 * dotb1 - dota1 * dota1 * dota1) / (3 * (dotb1 - dota1)) * Config.fluidVacuumDrag * (1 - tb) * edge.length * Config.fluidAngularDrag;
		}
		cx_itei = cx_itej;
		u = v;
		cx_itej = cx_itej.next;
	}
	while(true) {
		cx_itej = this.lverts.next;
		var v1 = cx_itej;
		var edge1 = ei.elt;
		ei = ei.next;
		perim += edge1.length;
		var dx1 = 0.0;
		var dy1 = 0.0;
		dx1 = v1.x - u.x;
		dy1 = v1.y - u.y;
		accum += edge1.length * Config.fluidAngularDragFriction * this.material.dynamicFriction * edge1.lprojection * edge1.lprojection;
		var t3 = -(u.y * edge1.lnormx - u.x * edge1.lnormy) / (dy1 * edge1.lnormx - dx1 * edge1.lnormy);
		if(t3 > 0) {
			var ta1 = t3 > 1?1:t3;
			var cx2 = 0.0;
			var cy2 = 0.0;
			cx2 = u.x;
			cy2 = u.y;
			var t4 = ta1;
			cx2 += dx1 * t4;
			cy2 += dy1 * t4;
			var dota2 = edge1.lnormy * u.x - edge1.lnormx * u.y;
			var dotb2 = edge1.lnormy * cx2 - edge1.lnormx * cy2;
			accum += (dotb2 * dotb2 * dotb2 - dota2 * dota2 * dota2) / (3 * (dotb2 - dota2)) * ta1 * edge1.length * Config.fluidAngularDrag;
		}
		if(t3 < 1) {
			var tb1 = t3 < 0?0:t3;
			var cx3 = 0.0;
			var cy3 = 0.0;
			cx3 = u.x;
			cy3 = u.y;
			var t5 = tb1;
			cx3 += dx1 * t5;
			cy3 += dy1 * t5;
			var dota3 = edge1.lnormy * cx3 - edge1.lnormx * cy3;
			var dotb3 = edge1.lnormy * v1.x - edge1.lnormx * v1.y;
			accum += (dotb3 * dotb3 * dotb3 - dota3 * dota3 * dota3) / (3 * (dotb3 - dota3)) * Config.fluidVacuumDrag * (1 - tb1) * edge1.length * Config.fluidAngularDrag;
		}
		break;
	}
	this.angDrag = accum / (this.inertia * perim);
};
ZPP_Polygon.prototype.__validate_localCOM = function() {
	if(this.lverts.next == null) {
		throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
	}
	if(this.lverts.next.next == null) {
		this.localCOMx = this.lverts.next.x;
		this.localCOMy = this.lverts.next.y;
	} else if(this.lverts.next.next.next == null) {
		this.localCOMx = this.lverts.next.x;
		this.localCOMy = this.lverts.next.y;
		this.localCOMx += this.lverts.next.next.x;
		this.localCOMy += this.lverts.next.next.y;
		this.localCOMx *= 0.5;
		this.localCOMy *= 0.5;
	} else {
		this.localCOMx = 0;
		this.localCOMy = 0;
		var area = 0.0;
		var cx_ite = this.lverts.next;
		var u = cx_ite;
		cx_ite = cx_ite.next;
		var v = cx_ite;
		cx_ite = cx_ite.next;
		while(cx_ite != null) {
			var w = cx_ite;
			area += v.x * (w.y - u.y);
			var cf = w.y * v.x - w.x * v.y;
			this.localCOMx += (v.x + w.x) * cf;
			this.localCOMy += (v.y + w.y) * cf;
			u = v;
			v = w;
			cx_ite = cx_ite.next;
		}
		cx_ite = this.lverts.next;
		var w1 = cx_ite;
		area += v.x * (w1.y - u.y);
		var cf1 = w1.y * v.x - w1.x * v.y;
		this.localCOMx += (v.x + w1.x) * cf1;
		this.localCOMy += (v.y + w1.y) * cf1;
		u = v;
		cx_ite = cx_ite.next;
		var w2 = cx_ite;
		area += w1.x * (w2.y - u.y);
		var cf2 = w2.y * w1.x - w2.x * w1.y;
		this.localCOMx += (w1.x + w2.x) * cf2;
		this.localCOMy += (w1.y + w2.y) * cf2;
		area = 1 / (3 * area);
		var t = area;
		this.localCOMx *= t;
		this.localCOMy *= t;
	}
};
ZPP_Polygon.prototype.localCOM_validate = function() {
	if(this.lverts.next == null) {
		throw new js._Boot.HaxeError("Error: An empty polygon does not have any meaningful localCOM");
	}
	if(this.zip_localCOM) {
		this.zip_localCOM = false;
		if(this.type == 1) {
			var _this = this.polygon;
			if(_this.lverts.next == null) {
				throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
			}
			if(_this.lverts.next.next == null) {
				_this.localCOMx = _this.lverts.next.x;
				_this.localCOMy = _this.lverts.next.y;
			} else if(_this.lverts.next.next.next == null) {
				_this.localCOMx = _this.lverts.next.x;
				_this.localCOMy = _this.lverts.next.y;
				_this.localCOMx += _this.lverts.next.next.x;
				_this.localCOMy += _this.lverts.next.next.y;
				_this.localCOMx *= 0.5;
				_this.localCOMy *= 0.5;
			} else {
				_this.localCOMx = 0;
				_this.localCOMy = 0;
				var area = 0.0;
				var cx_ite = _this.lverts.next;
				var u = cx_ite;
				cx_ite = cx_ite.next;
				var v = cx_ite;
				cx_ite = cx_ite.next;
				while(cx_ite != null) {
					var w = cx_ite;
					area += v.x * (w.y - u.y);
					var cf = w.y * v.x - w.x * v.y;
					_this.localCOMx += (v.x + w.x) * cf;
					_this.localCOMy += (v.y + w.y) * cf;
					u = v;
					v = w;
					cx_ite = cx_ite.next;
				}
				cx_ite = _this.lverts.next;
				var w1 = cx_ite;
				area += v.x * (w1.y - u.y);
				var cf1 = w1.y * v.x - w1.x * v.y;
				_this.localCOMx += (v.x + w1.x) * cf1;
				_this.localCOMy += (v.y + w1.y) * cf1;
				u = v;
				cx_ite = cx_ite.next;
				var w2 = cx_ite;
				area += w1.x * (w2.y - u.y);
				var cf2 = w2.y * w1.x - w2.x * w1.y;
				_this.localCOMx += (w1.x + w2.x) * cf2;
				_this.localCOMy += (w1.y + w2.y) * cf2;
				area = 1 / (3 * area);
				var t = area;
				_this.localCOMx *= t;
				_this.localCOMy *= t;
			}
		}
		if(this.wrap_localCOM != null) {
			this.wrap_localCOM.zpp_inner.x = this.localCOMx;
			this.wrap_localCOM.zpp_inner.y = this.localCOMy;
		}
	}
};
ZPP_Polygon.prototype.localCOM_invalidate = function(x) {
	if(this.zip_localCOM) {
		this.zip_localCOM = false;
		if(this.type == 1) {
			var _this = this.polygon;
			if(_this.lverts.next == null) {
				throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
			}
			if(_this.lverts.next.next == null) {
				_this.localCOMx = _this.lverts.next.x;
				_this.localCOMy = _this.lverts.next.y;
			} else if(_this.lverts.next.next.next == null) {
				_this.localCOMx = _this.lverts.next.x;
				_this.localCOMy = _this.lverts.next.y;
				_this.localCOMx += _this.lverts.next.next.x;
				_this.localCOMy += _this.lverts.next.next.y;
				_this.localCOMx *= 0.5;
				_this.localCOMy *= 0.5;
			} else {
				_this.localCOMx = 0;
				_this.localCOMy = 0;
				var area = 0.0;
				var cx_ite = _this.lverts.next;
				var u = cx_ite;
				cx_ite = cx_ite.next;
				var v = cx_ite;
				cx_ite = cx_ite.next;
				while(cx_ite != null) {
					var w = cx_ite;
					area += v.x * (w.y - u.y);
					var cf = w.y * v.x - w.x * v.y;
					_this.localCOMx += (v.x + w.x) * cf;
					_this.localCOMy += (v.y + w.y) * cf;
					u = v;
					v = w;
					cx_ite = cx_ite.next;
				}
				cx_ite = _this.lverts.next;
				var w1 = cx_ite;
				area += v.x * (w1.y - u.y);
				var cf1 = w1.y * v.x - w1.x * v.y;
				_this.localCOMx += (v.x + w1.x) * cf1;
				_this.localCOMy += (v.y + w1.y) * cf1;
				u = v;
				cx_ite = cx_ite.next;
				var w2 = cx_ite;
				area += w1.x * (w2.y - u.y);
				var cf2 = w2.y * w1.x - w2.x * w1.y;
				_this.localCOMx += (w1.x + w2.x) * cf2;
				_this.localCOMy += (w1.y + w2.y) * cf2;
				area = 1 / (3 * area);
				var t = area;
				_this.localCOMx *= t;
				_this.localCOMy *= t;
			}
		}
		if(this.wrap_localCOM != null) {
			this.wrap_localCOM.zpp_inner.x = this.localCOMx;
			this.wrap_localCOM.zpp_inner.y = this.localCOMy;
		}
	}
	var delx = 0;
	var dely = 0;
	delx = x.x - this.localCOMx;
	dely = x.y - this.localCOMy;
	var cx_ite1 = this.lverts.next;
	while(cx_ite1 != null) {
		var p = cx_ite1;
		p.x += delx;
		p.y += dely;
		cx_ite1 = cx_ite1.next;
	}
	this.invalidate_lverts();
};
ZPP_Polygon.prototype.setupLocalCOM = function() {
	var x = this.localCOMx;
	var y = this.localCOMy;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_localCOM = ret;
	this.wrap_localCOM.zpp_inner._inuse = true;
	this.wrap_localCOM.zpp_inner._validate = $bind(this,this.localCOM_validate);
	this.wrap_localCOM.zpp_inner._invalidate = $bind(this,this.localCOM_invalidate);
};
ZPP_Polygon.prototype.__translate = function(dx,dy) {
	var cx_ite = this.lverts.next;
	while(cx_ite != null) {
		var p = cx_ite;
		p.x += dx;
		p.y += dy;
		cx_ite = cx_ite.next;
	}
	this.invalidate_lverts();
};
ZPP_Polygon.prototype.__scale = function(sx,sy) {
	var cx_ite = this.lverts.next;
	while(cx_ite != null) {
		var p = cx_ite;
		p.x *= sx;
		p.y *= sy;
		cx_ite = cx_ite.next;
	}
	this.invalidate_lverts();
};
ZPP_Polygon.prototype.__rotate = function(ax,ay) {
	var cx_ite = this.lverts.next;
	while(cx_ite != null) {
		var p = cx_ite;
		var tempx = 0.0;
		var tempy = 0.0;
		tempx = ay * p.x - ax * p.y;
		tempy = p.x * ax + p.y * ay;
		p.x = tempx;
		p.y = tempy;
		cx_ite = cx_ite.next;
	}
	this.invalidate_lverts();
};
ZPP_Polygon.prototype.__transform = function(mat) {
	var cx_ite = this.lverts.next;
	while(cx_ite != null) {
		var p = cx_ite;
		var t = mat.zpp_inner.a * p.x + mat.zpp_inner.b * p.y + mat.zpp_inner.tx;
		p.y = mat.zpp_inner.c * p.x + mat.zpp_inner.d * p.y + mat.zpp_inner.ty;
		p.x = t;
		cx_ite = cx_ite.next;
	}
	this.invalidate_lverts();
};
ZPP_Polygon.prototype.__copy = function() {
	var _this = this.outer_zn;
	if(_this.zpp_inner_zn.wrap_lverts == null) {
		_this.zpp_inner_zn.getlverts();
	}
	return new Polygon(_this.zpp_inner_zn.wrap_lverts).zpp_inner_zn;
};
ZPP_Polygon.prototype.__class__ = ZPP_Polygon;
var ZPP_Broadphase = zpp_nape.space.ZPP_Broadphase = function() {
	this.circShape = null;
	this.matrix = null;
	this.aabbShape = null;
	this.dynab = null;
	this.sweep = null;
	this.is_sweep = false;
	this.space = null;
};
ZPP_Broadphase.__name__ = ["zpp_nape","space","ZPP_Broadphase"];
ZPP_Broadphase.prototype.space = null;
ZPP_Broadphase.prototype.is_sweep = null;
ZPP_Broadphase.prototype.sweep = null;
ZPP_Broadphase.prototype.dynab = null;
ZPP_Broadphase.prototype.insert = function(shape) {
	if(this.is_sweep) {
		this.sweep.__insert(shape);
	} else {
		this.dynab.__insert(shape);
	}
};
ZPP_Broadphase.prototype.remove = function(shape) {
	if(this.is_sweep) {
		this.sweep.__remove(shape);
	} else {
		this.dynab.__remove(shape);
	}
};
ZPP_Broadphase.prototype.sync = function(shape) {
	if(this.is_sweep) {
		if(!this.sweep.space.continuous) {
			if(shape.zip_aabb) {
				if(shape.body != null) {
					shape.zip_aabb = false;
					if(shape.type == 0) {
						var _this = shape.circle;
						if(_this.zip_worldCOM) {
							if(_this.body != null) {
								_this.zip_worldCOM = false;
								if(_this.zip_localCOM) {
									_this.zip_localCOM = false;
									if(_this.type == 1) {
										var _this1 = _this.polygon;
										if(_this1.lverts.next == null) {
											throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
										}
										if(_this1.lverts.next.next == null) {
											_this1.localCOMx = _this1.lverts.next.x;
											_this1.localCOMy = _this1.lverts.next.y;
										} else if(_this1.lverts.next.next.next == null) {
											_this1.localCOMx = _this1.lverts.next.x;
											_this1.localCOMy = _this1.lverts.next.y;
											_this1.localCOMx += _this1.lverts.next.next.x;
											_this1.localCOMy += _this1.lverts.next.next.y;
											_this1.localCOMx *= 0.5;
											_this1.localCOMy *= 0.5;
										} else {
											_this1.localCOMx = 0;
											_this1.localCOMy = 0;
											var area = 0.0;
											var cx_ite = _this1.lverts.next;
											var u = cx_ite;
											cx_ite = cx_ite.next;
											var v = cx_ite;
											cx_ite = cx_ite.next;
											while(cx_ite != null) {
												var w = cx_ite;
												area += v.x * (w.y - u.y);
												var cf = w.y * v.x - w.x * v.y;
												_this1.localCOMx += (v.x + w.x) * cf;
												_this1.localCOMy += (v.y + w.y) * cf;
												u = v;
												v = w;
												cx_ite = cx_ite.next;
											}
											cx_ite = _this1.lverts.next;
											var w1 = cx_ite;
											area += v.x * (w1.y - u.y);
											var cf1 = w1.y * v.x - w1.x * v.y;
											_this1.localCOMx += (v.x + w1.x) * cf1;
											_this1.localCOMy += (v.y + w1.y) * cf1;
											u = v;
											cx_ite = cx_ite.next;
											var w2 = cx_ite;
											area += w1.x * (w2.y - u.y);
											var cf2 = w2.y * w1.x - w2.x * w1.y;
											_this1.localCOMx += (w1.x + w2.x) * cf2;
											_this1.localCOMy += (w1.y + w2.y) * cf2;
											area = 1 / (3 * area);
											var t = area;
											_this1.localCOMx *= t;
											_this1.localCOMy *= t;
										}
									}
									if(_this.wrap_localCOM != null) {
										_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
										_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
									}
								}
								var _this2 = _this.body;
								if(_this2.zip_axis) {
									_this2.zip_axis = false;
									_this2.axisx = Math.sin(_this2.rot);
									_this2.axisy = Math.cos(_this2.rot);
								}
								_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
								_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
							}
						}
						var rx = _this.radius;
						var ry = _this.radius;
						_this.aabb.minx = _this.worldCOMx - rx;
						_this.aabb.miny = _this.worldCOMy - ry;
						_this.aabb.maxx = _this.worldCOMx + rx;
						_this.aabb.maxy = _this.worldCOMy + ry;
					} else {
						var _this3 = shape.polygon;
						if(_this3.zip_gverts) {
							if(_this3.body != null) {
								_this3.zip_gverts = false;
								_this3.validate_lverts();
								var _this4 = _this3.body;
								if(_this4.zip_axis) {
									_this4.zip_axis = false;
									_this4.axisx = Math.sin(_this4.rot);
									_this4.axisy = Math.cos(_this4.rot);
								}
								var li = _this3.lverts.next;
								var cx_ite1 = _this3.gverts.next;
								while(cx_ite1 != null) {
									var g = cx_ite1;
									var l = li;
									li = li.next;
									g.x = _this3.body.posx + (_this3.body.axisy * l.x - _this3.body.axisx * l.y);
									g.y = _this3.body.posy + (l.x * _this3.body.axisx + l.y * _this3.body.axisy);
									cx_ite1 = cx_ite1.next;
								}
							}
						}
						if(_this3.lverts.next == null) {
							throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful bounds");
						}
						var p0 = _this3.gverts.next;
						_this3.aabb.minx = p0.x;
						_this3.aabb.miny = p0.y;
						_this3.aabb.maxx = p0.x;
						_this3.aabb.maxy = p0.y;
						var cx_ite2 = _this3.gverts.next.next;
						while(cx_ite2 != null) {
							var p = cx_ite2;
							if(p.x < _this3.aabb.minx) {
								_this3.aabb.minx = p.x;
							}
							if(p.x > _this3.aabb.maxx) {
								_this3.aabb.maxx = p.x;
							}
							if(p.y < _this3.aabb.miny) {
								_this3.aabb.miny = p.y;
							}
							if(p.y > _this3.aabb.maxy) {
								_this3.aabb.maxy = p.y;
							}
							cx_ite2 = cx_ite2.next;
						}
					}
				}
			}
		}
	} else {
		var _this5 = this.dynab;
		var node = shape.node;
		if(!node.synced) {
			if(!_this5.space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == 0) {
							var _this6 = shape.circle;
							if(_this6.zip_worldCOM) {
								if(_this6.body != null) {
									_this6.zip_worldCOM = false;
									if(_this6.zip_localCOM) {
										_this6.zip_localCOM = false;
										if(_this6.type == 1) {
											var _this7 = _this6.polygon;
											if(_this7.lverts.next == null) {
												throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
											}
											if(_this7.lverts.next.next == null) {
												_this7.localCOMx = _this7.lverts.next.x;
												_this7.localCOMy = _this7.lverts.next.y;
											} else if(_this7.lverts.next.next.next == null) {
												_this7.localCOMx = _this7.lverts.next.x;
												_this7.localCOMy = _this7.lverts.next.y;
												_this7.localCOMx += _this7.lverts.next.next.x;
												_this7.localCOMy += _this7.lverts.next.next.y;
												_this7.localCOMx *= 0.5;
												_this7.localCOMy *= 0.5;
											} else {
												_this7.localCOMx = 0;
												_this7.localCOMy = 0;
												var area1 = 0.0;
												var cx_ite3 = _this7.lverts.next;
												var u1 = cx_ite3;
												cx_ite3 = cx_ite3.next;
												var v1 = cx_ite3;
												cx_ite3 = cx_ite3.next;
												while(cx_ite3 != null) {
													var w3 = cx_ite3;
													area1 += v1.x * (w3.y - u1.y);
													var cf3 = w3.y * v1.x - w3.x * v1.y;
													_this7.localCOMx += (v1.x + w3.x) * cf3;
													_this7.localCOMy += (v1.y + w3.y) * cf3;
													u1 = v1;
													v1 = w3;
													cx_ite3 = cx_ite3.next;
												}
												cx_ite3 = _this7.lverts.next;
												var w4 = cx_ite3;
												area1 += v1.x * (w4.y - u1.y);
												var cf4 = w4.y * v1.x - w4.x * v1.y;
												_this7.localCOMx += (v1.x + w4.x) * cf4;
												_this7.localCOMy += (v1.y + w4.y) * cf4;
												u1 = v1;
												cx_ite3 = cx_ite3.next;
												var w5 = cx_ite3;
												area1 += w4.x * (w5.y - u1.y);
												var cf5 = w5.y * w4.x - w5.x * w4.y;
												_this7.localCOMx += (w4.x + w5.x) * cf5;
												_this7.localCOMy += (w4.y + w5.y) * cf5;
												area1 = 1 / (3 * area1);
												var t1 = area1;
												_this7.localCOMx *= t1;
												_this7.localCOMy *= t1;
											}
										}
										if(_this6.wrap_localCOM != null) {
											_this6.wrap_localCOM.zpp_inner.x = _this6.localCOMx;
											_this6.wrap_localCOM.zpp_inner.y = _this6.localCOMy;
										}
									}
									var _this8 = _this6.body;
									if(_this8.zip_axis) {
										_this8.zip_axis = false;
										_this8.axisx = Math.sin(_this8.rot);
										_this8.axisy = Math.cos(_this8.rot);
									}
									_this6.worldCOMx = _this6.body.posx + (_this6.body.axisy * _this6.localCOMx - _this6.body.axisx * _this6.localCOMy);
									_this6.worldCOMy = _this6.body.posy + (_this6.localCOMx * _this6.body.axisx + _this6.localCOMy * _this6.body.axisy);
								}
							}
							var rx1 = _this6.radius;
							var ry1 = _this6.radius;
							_this6.aabb.minx = _this6.worldCOMx - rx1;
							_this6.aabb.miny = _this6.worldCOMy - ry1;
							_this6.aabb.maxx = _this6.worldCOMx + rx1;
							_this6.aabb.maxy = _this6.worldCOMy + ry1;
						} else {
							var _this9 = shape.polygon;
							if(_this9.zip_gverts) {
								if(_this9.body != null) {
									_this9.zip_gverts = false;
									_this9.validate_lverts();
									var _this10 = _this9.body;
									if(_this10.zip_axis) {
										_this10.zip_axis = false;
										_this10.axisx = Math.sin(_this10.rot);
										_this10.axisy = Math.cos(_this10.rot);
									}
									var li1 = _this9.lverts.next;
									var cx_ite4 = _this9.gverts.next;
									while(cx_ite4 != null) {
										var g1 = cx_ite4;
										var l1 = li1;
										li1 = li1.next;
										g1.x = _this9.body.posx + (_this9.body.axisy * l1.x - _this9.body.axisx * l1.y);
										g1.y = _this9.body.posy + (l1.x * _this9.body.axisx + l1.y * _this9.body.axisy);
										cx_ite4 = cx_ite4.next;
									}
								}
							}
							if(_this9.lverts.next == null) {
								throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful bounds");
							}
							var p01 = _this9.gverts.next;
							_this9.aabb.minx = p01.x;
							_this9.aabb.miny = p01.y;
							_this9.aabb.maxx = p01.x;
							_this9.aabb.maxy = p01.y;
							var cx_ite5 = _this9.gverts.next.next;
							while(cx_ite5 != null) {
								var p1 = cx_ite5;
								if(p1.x < _this9.aabb.minx) {
									_this9.aabb.minx = p1.x;
								}
								if(p1.x > _this9.aabb.maxx) {
									_this9.aabb.maxx = p1.x;
								}
								if(p1.y < _this9.aabb.miny) {
									_this9.aabb.miny = p1.y;
								}
								if(p1.y > _this9.aabb.maxy) {
									_this9.aabb.maxy = p1.y;
								}
								cx_ite5 = cx_ite5.next;
							}
						}
					}
				}
			}
			var sync;
			if(node.dyn == (shape.body.type == 1?false:!shape.body.component.sleeping)) {
				var _this11 = node.aabb;
				var x = shape.aabb;
				sync = !(x.minx >= _this11.minx && x.miny >= _this11.miny && x.maxx <= _this11.maxx && x.maxy <= _this11.maxy);
			} else {
				sync = true;
			}
			if(sync) {
				node.synced = true;
				node.snext = _this5.syncs;
				_this5.syncs = node;
			}
		}
	}
};
ZPP_Broadphase.prototype.broadphase = function(space,discrete) {
};
ZPP_Broadphase.prototype.clear = function() {
};
ZPP_Broadphase.prototype.shapesUnderPoint = function(x,y,filter,output) {
	return null;
};
ZPP_Broadphase.prototype.bodiesUnderPoint = function(x,y,filter,output) {
	return null;
};
ZPP_Broadphase.prototype.aabbShape = null;
ZPP_Broadphase.prototype.matrix = null;
ZPP_Broadphase.prototype.updateAABBShape = function(aabb) {
	if(this.aabbShape == null) {
		if(ZPP_Flags.BodyType_STATIC == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.BodyType_STATIC = new BodyType();
			ZPP_Flags.internal = false;
		}
		var _this = new Body(ZPP_Flags.BodyType_STATIC).zpp_inner.wrap_shapes;
		var obj = this.aabbShape = new Polygon(Polygon.rect(aabb.minx,aabb.miny,aabb.maxx - aabb.minx,aabb.maxy - aabb.miny));
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
	} else {
		var ab = this.aabbShape.zpp_inner.aabb;
		var sx = (aabb.maxx - aabb.minx) / (ab.maxx - ab.minx);
		var sy = (aabb.maxy - aabb.miny) / (ab.maxy - ab.miny);
		if(this.matrix == null) {
			this.matrix = new Mat23();
		}
		var _this1 = this.matrix;
		if(sx != sx) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "a" + " cannot be NaN");
		}
		_this1.zpp_inner.a = sx;
		var _this2 = _this1.zpp_inner;
		if(_this2._invalidate != null) {
			_this2._invalidate();
		}
		var _this3 = this.matrix;
		var _this4 = this.matrix;
		_this4.zpp_inner.c = 0;
		var _this5 = _this4.zpp_inner;
		if(_this5._invalidate != null) {
			_this5._invalidate();
		}
		var b = _this4.zpp_inner.c;
		if(b != b) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "b" + " cannot be NaN");
		}
		_this3.zpp_inner.b = b;
		var _this6 = _this3.zpp_inner;
		if(_this6._invalidate != null) {
			_this6._invalidate();
		}
		var _this7 = this.matrix;
		if(sy != sy) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "d" + " cannot be NaN");
		}
		_this7.zpp_inner.d = sy;
		var _this8 = _this7.zpp_inner;
		if(_this8._invalidate != null) {
			_this8._invalidate();
		}
		var _this9 = this.matrix;
		var tx = aabb.minx - sx * ab.minx;
		if(tx != tx) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "tx" + " cannot be NaN");
		}
		_this9.zpp_inner.tx = tx;
		var _this10 = _this9.zpp_inner;
		if(_this10._invalidate != null) {
			_this10._invalidate();
		}
		var _this11 = this.matrix;
		var ty = aabb.miny - sy * ab.miny;
		if(ty != ty) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "ty" + " cannot be NaN");
		}
		_this11.zpp_inner.ty = ty;
		var _this12 = _this11.zpp_inner;
		if(_this12._invalidate != null) {
			_this12._invalidate();
		}
		this.aabbShape.transform(this.matrix);
	}
	var _this13 = this.aabbShape.zpp_inner;
	if(_this13.zip_aabb) {
		if(_this13.body != null) {
			_this13.zip_aabb = false;
			if(_this13.type == 0) {
				var _this14 = _this13.circle;
				if(_this14.zip_worldCOM) {
					if(_this14.body != null) {
						_this14.zip_worldCOM = false;
						if(_this14.zip_localCOM) {
							_this14.zip_localCOM = false;
							if(_this14.type == 1) {
								var _this15 = _this14.polygon;
								if(_this15.lverts.next == null) {
									throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
								}
								if(_this15.lverts.next.next == null) {
									_this15.localCOMx = _this15.lverts.next.x;
									_this15.localCOMy = _this15.lverts.next.y;
								} else if(_this15.lverts.next.next.next == null) {
									_this15.localCOMx = _this15.lverts.next.x;
									_this15.localCOMy = _this15.lverts.next.y;
									_this15.localCOMx += _this15.lverts.next.next.x;
									_this15.localCOMy += _this15.lverts.next.next.y;
									_this15.localCOMx *= 0.5;
									_this15.localCOMy *= 0.5;
								} else {
									_this15.localCOMx = 0;
									_this15.localCOMy = 0;
									var area = 0.0;
									var cx_ite = _this15.lverts.next;
									var u = cx_ite;
									cx_ite = cx_ite.next;
									var v = cx_ite;
									cx_ite = cx_ite.next;
									while(cx_ite != null) {
										var w = cx_ite;
										area += v.x * (w.y - u.y);
										var cf = w.y * v.x - w.x * v.y;
										_this15.localCOMx += (v.x + w.x) * cf;
										_this15.localCOMy += (v.y + w.y) * cf;
										u = v;
										v = w;
										cx_ite = cx_ite.next;
									}
									cx_ite = _this15.lverts.next;
									var w1 = cx_ite;
									area += v.x * (w1.y - u.y);
									var cf1 = w1.y * v.x - w1.x * v.y;
									_this15.localCOMx += (v.x + w1.x) * cf1;
									_this15.localCOMy += (v.y + w1.y) * cf1;
									u = v;
									cx_ite = cx_ite.next;
									var w2 = cx_ite;
									area += w1.x * (w2.y - u.y);
									var cf2 = w2.y * w1.x - w2.x * w1.y;
									_this15.localCOMx += (w1.x + w2.x) * cf2;
									_this15.localCOMy += (w1.y + w2.y) * cf2;
									area = 1 / (3 * area);
									var t = area;
									_this15.localCOMx *= t;
									_this15.localCOMy *= t;
								}
							}
							if(_this14.wrap_localCOM != null) {
								_this14.wrap_localCOM.zpp_inner.x = _this14.localCOMx;
								_this14.wrap_localCOM.zpp_inner.y = _this14.localCOMy;
							}
						}
						var _this16 = _this14.body;
						if(_this16.zip_axis) {
							_this16.zip_axis = false;
							_this16.axisx = Math.sin(_this16.rot);
							_this16.axisy = Math.cos(_this16.rot);
						}
						_this14.worldCOMx = _this14.body.posx + (_this14.body.axisy * _this14.localCOMx - _this14.body.axisx * _this14.localCOMy);
						_this14.worldCOMy = _this14.body.posy + (_this14.localCOMx * _this14.body.axisx + _this14.localCOMy * _this14.body.axisy);
					}
				}
				var rx = _this14.radius;
				var ry = _this14.radius;
				_this14.aabb.minx = _this14.worldCOMx - rx;
				_this14.aabb.miny = _this14.worldCOMy - ry;
				_this14.aabb.maxx = _this14.worldCOMx + rx;
				_this14.aabb.maxy = _this14.worldCOMy + ry;
			} else {
				var _this17 = _this13.polygon;
				if(_this17.zip_gverts) {
					if(_this17.body != null) {
						_this17.zip_gverts = false;
						_this17.validate_lverts();
						var _this18 = _this17.body;
						if(_this18.zip_axis) {
							_this18.zip_axis = false;
							_this18.axisx = Math.sin(_this18.rot);
							_this18.axisy = Math.cos(_this18.rot);
						}
						var li = _this17.lverts.next;
						var cx_ite1 = _this17.gverts.next;
						while(cx_ite1 != null) {
							var g = cx_ite1;
							var l = li;
							li = li.next;
							g.x = _this17.body.posx + (_this17.body.axisy * l.x - _this17.body.axisx * l.y);
							g.y = _this17.body.posy + (l.x * _this17.body.axisx + l.y * _this17.body.axisy);
							cx_ite1 = cx_ite1.next;
						}
					}
				}
				if(_this17.lverts.next == null) {
					throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful bounds");
				}
				var p0 = _this17.gverts.next;
				_this17.aabb.minx = p0.x;
				_this17.aabb.miny = p0.y;
				_this17.aabb.maxx = p0.x;
				_this17.aabb.maxy = p0.y;
				var cx_ite2 = _this17.gverts.next.next;
				while(cx_ite2 != null) {
					var p = cx_ite2;
					if(p.x < _this17.aabb.minx) {
						_this17.aabb.minx = p.x;
					}
					if(p.x > _this17.aabb.maxx) {
						_this17.aabb.maxx = p.x;
					}
					if(p.y < _this17.aabb.miny) {
						_this17.aabb.miny = p.y;
					}
					if(p.y > _this17.aabb.maxy) {
						_this17.aabb.maxy = p.y;
					}
					cx_ite2 = cx_ite2.next;
				}
			}
		}
	}
	var _this19 = this.aabbShape.zpp_inner.polygon;
	if(_this19.zip_gaxi) {
		if(_this19.body != null) {
			_this19.zip_gaxi = false;
			_this19.validate_laxi();
			var _this20 = _this19.body;
			if(_this20.zip_axis) {
				_this20.zip_axis = false;
				_this20.axisx = Math.sin(_this20.rot);
				_this20.axisy = Math.cos(_this20.rot);
			}
			if(_this19.zip_gverts) {
				if(_this19.body != null) {
					_this19.zip_gverts = false;
					_this19.validate_lverts();
					var _this21 = _this19.body;
					if(_this21.zip_axis) {
						_this21.zip_axis = false;
						_this21.axisx = Math.sin(_this21.rot);
						_this21.axisy = Math.cos(_this21.rot);
					}
					var li1 = _this19.lverts.next;
					var cx_ite3 = _this19.gverts.next;
					while(cx_ite3 != null) {
						var g1 = cx_ite3;
						var l1 = li1;
						li1 = li1.next;
						g1.x = _this19.body.posx + (_this19.body.axisy * l1.x - _this19.body.axisx * l1.y);
						g1.y = _this19.body.posy + (l1.x * _this19.body.axisx + l1.y * _this19.body.axisy);
						cx_ite3 = cx_ite3.next;
					}
				}
			}
			var ite = _this19.edges.head;
			var cx_ite4 = _this19.gverts.next;
			var u1 = cx_ite4;
			cx_ite4 = cx_ite4.next;
			while(cx_ite4 != null) {
				var v1 = cx_ite4;
				var e = ite.elt;
				ite = ite.next;
				e.gp0 = u1;
				e.gp1 = v1;
				e.gnormx = _this19.body.axisy * e.lnormx - _this19.body.axisx * e.lnormy;
				e.gnormy = e.lnormx * _this19.body.axisx + e.lnormy * _this19.body.axisy;
				e.gprojection = _this19.body.posx * e.gnormx + _this19.body.posy * e.gnormy + e.lprojection;
				if(e.wrap_gnorm != null) {
					e.wrap_gnorm.zpp_inner.x = e.gnormx;
					e.wrap_gnorm.zpp_inner.y = e.gnormy;
				}
				e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
				e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
				u1 = v1;
				cx_ite4 = cx_ite4.next;
			}
			var e1 = ite.elt;
			e1.gp0 = u1;
			e1.gp1 = _this19.gverts.next;
			e1.gnormx = _this19.body.axisy * e1.lnormx - _this19.body.axisx * e1.lnormy;
			e1.gnormy = e1.lnormx * _this19.body.axisx + e1.lnormy * _this19.body.axisy;
			e1.gprojection = _this19.body.posx * e1.gnormx + _this19.body.posy * e1.gnormy + e1.lprojection;
			if(e1.wrap_gnorm != null) {
				e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
				e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
			}
			e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
			e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
		}
	}
};
ZPP_Broadphase.prototype.shapesInAABB = function(aabb,strict,containment,filter,output) {
	return null;
};
ZPP_Broadphase.prototype.bodiesInAABB = function(aabb,strict,containment,filter,output) {
	return null;
};
ZPP_Broadphase.prototype.circShape = null;
ZPP_Broadphase.prototype.updateCircShape = function(x,y,r) {
	if(this.circShape == null) {
		if(ZPP_Flags.BodyType_STATIC == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.BodyType_STATIC = new BodyType();
			ZPP_Flags.internal = false;
		}
		var _this = new Body(ZPP_Flags.BodyType_STATIC).zpp_inner.wrap_shapes;
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(ZPP_PubPool.poolVec2 == null) {
			ret = new Vec2();
		} else {
			ret = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(ZPP_Vec2.zpp_pool == null) {
				ret1 = new ZPP_Vec2();
			} else {
				ret1 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this1 = ret.zpp_inner;
			if(_this1._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this1._isimmutable != null) {
				_this1._isimmutable();
			}
			if(x != x || y != y) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this3 = ret.zpp_inner;
				if(_this3._validate != null) {
					_this3._validate();
				}
				tmp = ret.zpp_inner.y == y;
			} else {
				tmp = false;
			}
			if(!tmp) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this4 = ret.zpp_inner;
				if(_this4._invalidate != null) {
					_this4._invalidate(_this4);
				}
			}
		}
		ret.zpp_inner.weak = false;
		var obj = this.circShape = new Circle(r,ret);
		if(_this.zpp_inner.reverse_flag) {
			_this.push(obj);
		} else {
			_this.unshift(obj);
		}
	} else {
		var ci = this.circShape.zpp_inner.circle;
		var ss = r / ci.radius;
		if(this.matrix == null) {
			this.matrix = new Mat23();
		}
		var _this5 = this.matrix;
		var _this6 = this.matrix;
		if(ss != ss) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "d" + " cannot be NaN");
		}
		_this6.zpp_inner.d = ss;
		var _this7 = _this6.zpp_inner;
		if(_this7._invalidate != null) {
			_this7._invalidate();
		}
		var a = _this6.zpp_inner.d;
		if(a != a) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "a" + " cannot be NaN");
		}
		_this5.zpp_inner.a = a;
		var _this8 = _this5.zpp_inner;
		if(_this8._invalidate != null) {
			_this8._invalidate();
		}
		var _this9 = this.matrix;
		var _this10 = this.matrix;
		_this10.zpp_inner.c = 0;
		var _this11 = _this10.zpp_inner;
		if(_this11._invalidate != null) {
			_this11._invalidate();
		}
		var b = _this10.zpp_inner.c;
		if(b != b) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "b" + " cannot be NaN");
		}
		_this9.zpp_inner.b = b;
		var _this12 = _this9.zpp_inner;
		if(_this12._invalidate != null) {
			_this12._invalidate();
		}
		var _this13 = this.matrix;
		var tx = x - ss * ci.localCOMx;
		if(tx != tx) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "tx" + " cannot be NaN");
		}
		_this13.zpp_inner.tx = tx;
		var _this14 = _this13.zpp_inner;
		if(_this14._invalidate != null) {
			_this14._invalidate();
		}
		var _this15 = this.matrix;
		var ty = y - ss * ci.localCOMy;
		if(ty != ty) {
			throw new js._Boot.HaxeError("Error: Mat23::" + "ty" + " cannot be NaN");
		}
		_this15.zpp_inner.ty = ty;
		var _this16 = _this15.zpp_inner;
		if(_this16._invalidate != null) {
			_this16._invalidate();
		}
		this.circShape.transform(this.matrix);
	}
	var _this17 = this.circShape.zpp_inner;
	if(_this17.zip_aabb) {
		if(_this17.body != null) {
			_this17.zip_aabb = false;
			if(_this17.type == 0) {
				var _this18 = _this17.circle;
				if(_this18.zip_worldCOM) {
					if(_this18.body != null) {
						_this18.zip_worldCOM = false;
						if(_this18.zip_localCOM) {
							_this18.zip_localCOM = false;
							if(_this18.type == 1) {
								var _this19 = _this18.polygon;
								if(_this19.lverts.next == null) {
									throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
								}
								if(_this19.lverts.next.next == null) {
									_this19.localCOMx = _this19.lverts.next.x;
									_this19.localCOMy = _this19.lverts.next.y;
								} else if(_this19.lverts.next.next.next == null) {
									_this19.localCOMx = _this19.lverts.next.x;
									_this19.localCOMy = _this19.lverts.next.y;
									_this19.localCOMx += _this19.lverts.next.next.x;
									_this19.localCOMy += _this19.lverts.next.next.y;
									_this19.localCOMx *= 0.5;
									_this19.localCOMy *= 0.5;
								} else {
									_this19.localCOMx = 0;
									_this19.localCOMy = 0;
									var area = 0.0;
									var cx_ite = _this19.lverts.next;
									var u = cx_ite;
									cx_ite = cx_ite.next;
									var v = cx_ite;
									cx_ite = cx_ite.next;
									while(cx_ite != null) {
										var w = cx_ite;
										area += v.x * (w.y - u.y);
										var cf = w.y * v.x - w.x * v.y;
										_this19.localCOMx += (v.x + w.x) * cf;
										_this19.localCOMy += (v.y + w.y) * cf;
										u = v;
										v = w;
										cx_ite = cx_ite.next;
									}
									cx_ite = _this19.lverts.next;
									var w1 = cx_ite;
									area += v.x * (w1.y - u.y);
									var cf1 = w1.y * v.x - w1.x * v.y;
									_this19.localCOMx += (v.x + w1.x) * cf1;
									_this19.localCOMy += (v.y + w1.y) * cf1;
									u = v;
									cx_ite = cx_ite.next;
									var w2 = cx_ite;
									area += w1.x * (w2.y - u.y);
									var cf2 = w2.y * w1.x - w2.x * w1.y;
									_this19.localCOMx += (w1.x + w2.x) * cf2;
									_this19.localCOMy += (w1.y + w2.y) * cf2;
									area = 1 / (3 * area);
									var t = area;
									_this19.localCOMx *= t;
									_this19.localCOMy *= t;
								}
							}
							if(_this18.wrap_localCOM != null) {
								_this18.wrap_localCOM.zpp_inner.x = _this18.localCOMx;
								_this18.wrap_localCOM.zpp_inner.y = _this18.localCOMy;
							}
						}
						var _this20 = _this18.body;
						if(_this20.zip_axis) {
							_this20.zip_axis = false;
							_this20.axisx = Math.sin(_this20.rot);
							_this20.axisy = Math.cos(_this20.rot);
						}
						_this18.worldCOMx = _this18.body.posx + (_this18.body.axisy * _this18.localCOMx - _this18.body.axisx * _this18.localCOMy);
						_this18.worldCOMy = _this18.body.posy + (_this18.localCOMx * _this18.body.axisx + _this18.localCOMy * _this18.body.axisy);
					}
				}
				var rx = _this18.radius;
				var ry = _this18.radius;
				_this18.aabb.minx = _this18.worldCOMx - rx;
				_this18.aabb.miny = _this18.worldCOMy - ry;
				_this18.aabb.maxx = _this18.worldCOMx + rx;
				_this18.aabb.maxy = _this18.worldCOMy + ry;
			} else {
				var _this21 = _this17.polygon;
				if(_this21.zip_gverts) {
					if(_this21.body != null) {
						_this21.zip_gverts = false;
						_this21.validate_lverts();
						var _this22 = _this21.body;
						if(_this22.zip_axis) {
							_this22.zip_axis = false;
							_this22.axisx = Math.sin(_this22.rot);
							_this22.axisy = Math.cos(_this22.rot);
						}
						var li = _this21.lverts.next;
						var cx_ite1 = _this21.gverts.next;
						while(cx_ite1 != null) {
							var g = cx_ite1;
							var l = li;
							li = li.next;
							g.x = _this21.body.posx + (_this21.body.axisy * l.x - _this21.body.axisx * l.y);
							g.y = _this21.body.posy + (l.x * _this21.body.axisx + l.y * _this21.body.axisy);
							cx_ite1 = cx_ite1.next;
						}
					}
				}
				if(_this21.lverts.next == null) {
					throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful bounds");
				}
				var p0 = _this21.gverts.next;
				_this21.aabb.minx = p0.x;
				_this21.aabb.miny = p0.y;
				_this21.aabb.maxx = p0.x;
				_this21.aabb.maxy = p0.y;
				var cx_ite2 = _this21.gverts.next.next;
				while(cx_ite2 != null) {
					var p = cx_ite2;
					if(p.x < _this21.aabb.minx) {
						_this21.aabb.minx = p.x;
					}
					if(p.x > _this21.aabb.maxx) {
						_this21.aabb.maxx = p.x;
					}
					if(p.y < _this21.aabb.miny) {
						_this21.aabb.miny = p.y;
					}
					if(p.y > _this21.aabb.maxy) {
						_this21.aabb.maxy = p.y;
					}
					cx_ite2 = cx_ite2.next;
				}
			}
		}
	}
};
ZPP_Broadphase.prototype.shapesInCircle = function(x,y,r,containment,filter,output) {
	return null;
};
ZPP_Broadphase.prototype.bodiesInCircle = function(x,y,r,containment,filter,output) {
	return null;
};
ZPP_Broadphase.prototype.validateShape = function(s) {
	if(s.type == 1) {
		var _this = s.polygon;
		if(_this.zip_gaxi) {
			if(_this.body != null) {
				_this.zip_gaxi = false;
				_this.validate_laxi();
				var _this1 = _this.body;
				if(_this1.zip_axis) {
					_this1.zip_axis = false;
					_this1.axisx = Math.sin(_this1.rot);
					_this1.axisy = Math.cos(_this1.rot);
				}
				if(_this.zip_gverts) {
					if(_this.body != null) {
						_this.zip_gverts = false;
						_this.validate_lverts();
						var _this2 = _this.body;
						if(_this2.zip_axis) {
							_this2.zip_axis = false;
							_this2.axisx = Math.sin(_this2.rot);
							_this2.axisy = Math.cos(_this2.rot);
						}
						var li = _this.lverts.next;
						var cx_ite = _this.gverts.next;
						while(cx_ite != null) {
							var g = cx_ite;
							var l = li;
							li = li.next;
							g.x = _this.body.posx + (_this.body.axisy * l.x - _this.body.axisx * l.y);
							g.y = _this.body.posy + (l.x * _this.body.axisx + l.y * _this.body.axisy);
							cx_ite = cx_ite.next;
						}
					}
				}
				var ite = _this.edges.head;
				var cx_ite1 = _this.gverts.next;
				var u = cx_ite1;
				cx_ite1 = cx_ite1.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var e = ite.elt;
					ite = ite.next;
					e.gp0 = u;
					e.gp1 = v;
					e.gnormx = _this.body.axisy * e.lnormx - _this.body.axisx * e.lnormy;
					e.gnormy = e.lnormx * _this.body.axisx + e.lnormy * _this.body.axisy;
					e.gprojection = _this.body.posx * e.gnormx + _this.body.posy * e.gnormy + e.lprojection;
					if(e.wrap_gnorm != null) {
						e.wrap_gnorm.zpp_inner.x = e.gnormx;
						e.wrap_gnorm.zpp_inner.y = e.gnormy;
					}
					e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
					e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
					u = v;
					cx_ite1 = cx_ite1.next;
				}
				var e1 = ite.elt;
				e1.gp0 = u;
				e1.gp1 = _this.gverts.next;
				e1.gnormx = _this.body.axisy * e1.lnormx - _this.body.axisx * e1.lnormy;
				e1.gnormy = e1.lnormx * _this.body.axisx + e1.lnormy * _this.body.axisy;
				e1.gprojection = _this.body.posx * e1.gnormx + _this.body.posy * e1.gnormy + e1.lprojection;
				if(e1.wrap_gnorm != null) {
					e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
					e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
				}
				e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
				e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
			}
		}
	}
	if(s.zip_aabb) {
		if(s.body != null) {
			s.zip_aabb = false;
			if(s.type == 0) {
				var _this3 = s.circle;
				if(_this3.zip_worldCOM) {
					if(_this3.body != null) {
						_this3.zip_worldCOM = false;
						if(_this3.zip_localCOM) {
							_this3.zip_localCOM = false;
							if(_this3.type == 1) {
								var _this4 = _this3.polygon;
								if(_this4.lverts.next == null) {
									throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
								}
								if(_this4.lverts.next.next == null) {
									_this4.localCOMx = _this4.lverts.next.x;
									_this4.localCOMy = _this4.lverts.next.y;
								} else if(_this4.lverts.next.next.next == null) {
									_this4.localCOMx = _this4.lverts.next.x;
									_this4.localCOMy = _this4.lverts.next.y;
									_this4.localCOMx += _this4.lverts.next.next.x;
									_this4.localCOMy += _this4.lverts.next.next.y;
									_this4.localCOMx *= 0.5;
									_this4.localCOMy *= 0.5;
								} else {
									_this4.localCOMx = 0;
									_this4.localCOMy = 0;
									var area = 0.0;
									var cx_ite2 = _this4.lverts.next;
									var u1 = cx_ite2;
									cx_ite2 = cx_ite2.next;
									var v1 = cx_ite2;
									cx_ite2 = cx_ite2.next;
									while(cx_ite2 != null) {
										var w = cx_ite2;
										area += v1.x * (w.y - u1.y);
										var cf = w.y * v1.x - w.x * v1.y;
										_this4.localCOMx += (v1.x + w.x) * cf;
										_this4.localCOMy += (v1.y + w.y) * cf;
										u1 = v1;
										v1 = w;
										cx_ite2 = cx_ite2.next;
									}
									cx_ite2 = _this4.lverts.next;
									var w1 = cx_ite2;
									area += v1.x * (w1.y - u1.y);
									var cf1 = w1.y * v1.x - w1.x * v1.y;
									_this4.localCOMx += (v1.x + w1.x) * cf1;
									_this4.localCOMy += (v1.y + w1.y) * cf1;
									u1 = v1;
									cx_ite2 = cx_ite2.next;
									var w2 = cx_ite2;
									area += w1.x * (w2.y - u1.y);
									var cf2 = w2.y * w1.x - w2.x * w1.y;
									_this4.localCOMx += (w1.x + w2.x) * cf2;
									_this4.localCOMy += (w1.y + w2.y) * cf2;
									area = 1 / (3 * area);
									var t = area;
									_this4.localCOMx *= t;
									_this4.localCOMy *= t;
								}
							}
							if(_this3.wrap_localCOM != null) {
								_this3.wrap_localCOM.zpp_inner.x = _this3.localCOMx;
								_this3.wrap_localCOM.zpp_inner.y = _this3.localCOMy;
							}
						}
						var _this5 = _this3.body;
						if(_this5.zip_axis) {
							_this5.zip_axis = false;
							_this5.axisx = Math.sin(_this5.rot);
							_this5.axisy = Math.cos(_this5.rot);
						}
						_this3.worldCOMx = _this3.body.posx + (_this3.body.axisy * _this3.localCOMx - _this3.body.axisx * _this3.localCOMy);
						_this3.worldCOMy = _this3.body.posy + (_this3.localCOMx * _this3.body.axisx + _this3.localCOMy * _this3.body.axisy);
					}
				}
				var rx = _this3.radius;
				var ry = _this3.radius;
				_this3.aabb.minx = _this3.worldCOMx - rx;
				_this3.aabb.miny = _this3.worldCOMy - ry;
				_this3.aabb.maxx = _this3.worldCOMx + rx;
				_this3.aabb.maxy = _this3.worldCOMy + ry;
			} else {
				var _this6 = s.polygon;
				if(_this6.zip_gverts) {
					if(_this6.body != null) {
						_this6.zip_gverts = false;
						_this6.validate_lverts();
						var _this7 = _this6.body;
						if(_this7.zip_axis) {
							_this7.zip_axis = false;
							_this7.axisx = Math.sin(_this7.rot);
							_this7.axisy = Math.cos(_this7.rot);
						}
						var li1 = _this6.lverts.next;
						var cx_ite3 = _this6.gverts.next;
						while(cx_ite3 != null) {
							var g1 = cx_ite3;
							var l1 = li1;
							li1 = li1.next;
							g1.x = _this6.body.posx + (_this6.body.axisy * l1.x - _this6.body.axisx * l1.y);
							g1.y = _this6.body.posy + (l1.x * _this6.body.axisx + l1.y * _this6.body.axisy);
							cx_ite3 = cx_ite3.next;
						}
					}
				}
				if(_this6.lverts.next == null) {
					throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful bounds");
				}
				var p0 = _this6.gverts.next;
				_this6.aabb.minx = p0.x;
				_this6.aabb.miny = p0.y;
				_this6.aabb.maxx = p0.x;
				_this6.aabb.maxy = p0.y;
				var cx_ite4 = _this6.gverts.next.next;
				while(cx_ite4 != null) {
					var p = cx_ite4;
					if(p.x < _this6.aabb.minx) {
						_this6.aabb.minx = p.x;
					}
					if(p.x > _this6.aabb.maxx) {
						_this6.aabb.maxx = p.x;
					}
					if(p.y < _this6.aabb.miny) {
						_this6.aabb.miny = p.y;
					}
					if(p.y > _this6.aabb.maxy) {
						_this6.aabb.maxy = p.y;
					}
					cx_ite4 = cx_ite4.next;
				}
			}
		}
	}
	if(s.zip_worldCOM) {
		if(s.body != null) {
			s.zip_worldCOM = false;
			if(s.zip_localCOM) {
				s.zip_localCOM = false;
				if(s.type == 1) {
					var _this8 = s.polygon;
					if(_this8.lverts.next == null) {
						throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
					}
					if(_this8.lverts.next.next == null) {
						_this8.localCOMx = _this8.lverts.next.x;
						_this8.localCOMy = _this8.lverts.next.y;
					} else if(_this8.lverts.next.next.next == null) {
						_this8.localCOMx = _this8.lverts.next.x;
						_this8.localCOMy = _this8.lverts.next.y;
						_this8.localCOMx += _this8.lverts.next.next.x;
						_this8.localCOMy += _this8.lverts.next.next.y;
						_this8.localCOMx *= 0.5;
						_this8.localCOMy *= 0.5;
					} else {
						_this8.localCOMx = 0;
						_this8.localCOMy = 0;
						var area1 = 0.0;
						var cx_ite5 = _this8.lverts.next;
						var u2 = cx_ite5;
						cx_ite5 = cx_ite5.next;
						var v2 = cx_ite5;
						cx_ite5 = cx_ite5.next;
						while(cx_ite5 != null) {
							var w3 = cx_ite5;
							area1 += v2.x * (w3.y - u2.y);
							var cf3 = w3.y * v2.x - w3.x * v2.y;
							_this8.localCOMx += (v2.x + w3.x) * cf3;
							_this8.localCOMy += (v2.y + w3.y) * cf3;
							u2 = v2;
							v2 = w3;
							cx_ite5 = cx_ite5.next;
						}
						cx_ite5 = _this8.lverts.next;
						var w4 = cx_ite5;
						area1 += v2.x * (w4.y - u2.y);
						var cf4 = w4.y * v2.x - w4.x * v2.y;
						_this8.localCOMx += (v2.x + w4.x) * cf4;
						_this8.localCOMy += (v2.y + w4.y) * cf4;
						u2 = v2;
						cx_ite5 = cx_ite5.next;
						var w5 = cx_ite5;
						area1 += w4.x * (w5.y - u2.y);
						var cf5 = w5.y * w4.x - w5.x * w4.y;
						_this8.localCOMx += (w4.x + w5.x) * cf5;
						_this8.localCOMy += (w4.y + w5.y) * cf5;
						area1 = 1 / (3 * area1);
						var t1 = area1;
						_this8.localCOMx *= t1;
						_this8.localCOMy *= t1;
					}
				}
				if(s.wrap_localCOM != null) {
					s.wrap_localCOM.zpp_inner.x = s.localCOMx;
					s.wrap_localCOM.zpp_inner.y = s.localCOMy;
				}
			}
			var _this9 = s.body;
			if(_this9.zip_axis) {
				_this9.zip_axis = false;
				_this9.axisx = Math.sin(_this9.rot);
				_this9.axisy = Math.cos(_this9.rot);
			}
			s.worldCOMx = s.body.posx + (s.body.axisy * s.localCOMx - s.body.axisx * s.localCOMy);
			s.worldCOMy = s.body.posy + (s.localCOMx * s.body.axisx + s.localCOMy * s.body.axisy);
		}
	}
};
ZPP_Broadphase.prototype.shapesInShape = function(shape,containment,filter,output) {
	return null;
};
ZPP_Broadphase.prototype.bodiesInShape = function(shape,containment,filter,output) {
	return null;
};
ZPP_Broadphase.prototype.rayCast = function(ray,inner,filter) {
	return null;
};
ZPP_Broadphase.prototype.rayMultiCast = function(ray,inner,filter,output) {
	return null;
};
ZPP_Broadphase.prototype.__class__ = ZPP_Broadphase;
var ZPP_AABBNode = zpp_nape.space.ZPP_AABBNode = function() {
	this.first_sync = false;
	this.synced = false;
	this.snext = null;
	this.moved = false;
	this.mnext = null;
	this.next = null;
	this.rayt = 0.0;
	this.height = 0;
	this.child2 = null;
	this.child1 = null;
	this.parent = null;
	this.dyn = false;
	this.shape = null;
	this.aabb = null;
	this.height = -1;
};
ZPP_AABBNode.__name__ = ["zpp_nape","space","ZPP_AABBNode"];
ZPP_AABBNode.prototype.aabb = null;
ZPP_AABBNode.prototype.shape = null;
ZPP_AABBNode.prototype.dyn = null;
ZPP_AABBNode.prototype.parent = null;
ZPP_AABBNode.prototype.child1 = null;
ZPP_AABBNode.prototype.child2 = null;
ZPP_AABBNode.prototype.height = null;
ZPP_AABBNode.prototype.rayt = null;
ZPP_AABBNode.prototype.next = null;
ZPP_AABBNode.prototype.alloc = function() {
	if(ZPP_AABB.zpp_pool == null) {
		this.aabb = new ZPP_AABB();
	} else {
		this.aabb = ZPP_AABB.zpp_pool;
		ZPP_AABB.zpp_pool = this.aabb.next;
		this.aabb.next = null;
	}
	this.moved = false;
	this.synced = false;
	this.first_sync = false;
};
ZPP_AABBNode.prototype.free = function() {
	this.height = -1;
	var o = this.aabb;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o.wrap_min = o.wrap_max = null;
	o._invalidate = null;
	o._validate = null;
	o.next = ZPP_AABB.zpp_pool;
	ZPP_AABB.zpp_pool = o;
	this.child1 = this.child2 = this.parent = null;
	this.next = null;
	this.snext = null;
	this.mnext = null;
};
ZPP_AABBNode.prototype.mnext = null;
ZPP_AABBNode.prototype.moved = null;
ZPP_AABBNode.prototype.snext = null;
ZPP_AABBNode.prototype.synced = null;
ZPP_AABBNode.prototype.first_sync = null;
ZPP_AABBNode.prototype.isLeaf = function() {
	return this.child1 == null;
};
ZPP_AABBNode.prototype.__class__ = ZPP_AABBNode;
var ZPP_AABBPair = zpp_nape.space.ZPP_AABBPair = function() {
	this.next = null;
	this.arb = null;
	this.di = 0;
	this.id = 0;
	this.sleeping = false;
	this.first = false;
	this.n2 = null;
	this.n1 = null;
};
ZPP_AABBPair.__name__ = ["zpp_nape","space","ZPP_AABBPair"];
ZPP_AABBPair.prototype.n1 = null;
ZPP_AABBPair.prototype.n2 = null;
ZPP_AABBPair.prototype.first = null;
ZPP_AABBPair.prototype.sleeping = null;
ZPP_AABBPair.prototype.id = null;
ZPP_AABBPair.prototype.di = null;
ZPP_AABBPair.prototype.arb = null;
ZPP_AABBPair.prototype.next = null;
ZPP_AABBPair.prototype.alloc = function() {
};
ZPP_AABBPair.prototype.free = function() {
	this.n1 = this.n2 = null;
	this.sleeping = false;
};
ZPP_AABBPair.prototype.__class__ = ZPP_AABBPair;
var ZPP_AABBTree = zpp_nape.space.ZPP_AABBTree = function() {
	this.root = null;
};
ZPP_AABBTree.__name__ = ["zpp_nape","space","ZPP_AABBTree"];
ZPP_AABBTree.prototype.root = null;
ZPP_AABBTree.prototype.clear = function() {
	if(this.root == null) {
		return;
	}
	var stack = null;
	this.root.next = stack;
	stack = this.root;
	while(stack != null) {
		var ret = stack;
		stack = ret.next;
		ret.next = null;
		if(ret.child1 == null) {
			ret.shape.node = null;
			ret.shape.removedFromSpace();
			ret.shape = null;
		} else {
			if(ret.child1 != null) {
				ret.child1.next = stack;
				stack = ret.child1;
			}
			if(ret.child2 != null) {
				ret.child2.next = stack;
				stack = ret.child2;
			}
		}
		ret.height = -1;
		var o = ret.aabb;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = ZPP_AABB.zpp_pool;
		ZPP_AABB.zpp_pool = o;
		ret.child1 = ret.child2 = ret.parent = null;
		ret.next = null;
		ret.snext = null;
		ret.mnext = null;
		ret.next = ZPP_AABBNode.zpp_pool;
		ZPP_AABBNode.zpp_pool = ret;
	}
	this.root = null;
};
ZPP_AABBTree.prototype.insertLeaf = function(leaf) {
	if(this.root == null) {
		this.root = leaf;
		this.root.parent = null;
	} else {
		var leafaabb = leaf.aabb;
		var node = this.root;
		while(node.child1 != null) {
			var child1 = node.child1;
			var child2 = node.child2;
			var _this = node.aabb;
			var area = (_this.maxx - _this.minx + (_this.maxy - _this.miny)) * 2;
			var _this1 = ZPP_AABBTree.tmpaabb;
			var a = node.aabb;
			_this1.minx = a.minx < leafaabb.minx?a.minx:leafaabb.minx;
			_this1.miny = a.miny < leafaabb.miny?a.miny:leafaabb.miny;
			_this1.maxx = a.maxx > leafaabb.maxx?a.maxx:leafaabb.maxx;
			_this1.maxy = a.maxy > leafaabb.maxy?a.maxy:leafaabb.maxy;
			var _this2 = ZPP_AABBTree.tmpaabb;
			var carea = (_this2.maxx - _this2.minx + (_this2.maxy - _this2.miny)) * 2;
			var cost = 2 * carea;
			var icost = 2 * (carea - area);
			var _this3 = ZPP_AABBTree.tmpaabb;
			var b = child1.aabb;
			_this3.minx = leafaabb.minx < b.minx?leafaabb.minx:b.minx;
			_this3.miny = leafaabb.miny < b.miny?leafaabb.miny:b.miny;
			_this3.maxx = leafaabb.maxx > b.maxx?leafaabb.maxx:b.maxx;
			_this3.maxy = leafaabb.maxy > b.maxy?leafaabb.maxy:b.maxy;
			var cost1;
			if(child1.child1 == null) {
				var _this4 = ZPP_AABBTree.tmpaabb;
				cost1 = (_this4.maxx - _this4.minx + (_this4.maxy - _this4.miny)) * 2 + icost;
			} else {
				var _this5 = child1.aabb;
				var oarea = (_this5.maxx - _this5.minx + (_this5.maxy - _this5.miny)) * 2;
				var _this6 = ZPP_AABBTree.tmpaabb;
				cost1 = (_this6.maxx - _this6.minx + (_this6.maxy - _this6.miny)) * 2 - oarea + icost;
			}
			var _this7 = ZPP_AABBTree.tmpaabb;
			var b1 = child2.aabb;
			_this7.minx = leafaabb.minx < b1.minx?leafaabb.minx:b1.minx;
			_this7.miny = leafaabb.miny < b1.miny?leafaabb.miny:b1.miny;
			_this7.maxx = leafaabb.maxx > b1.maxx?leafaabb.maxx:b1.maxx;
			_this7.maxy = leafaabb.maxy > b1.maxy?leafaabb.maxy:b1.maxy;
			var cost2;
			if(child2.child1 == null) {
				var _this8 = ZPP_AABBTree.tmpaabb;
				cost2 = (_this8.maxx - _this8.minx + (_this8.maxy - _this8.miny)) * 2 + icost;
			} else {
				var _this9 = child2.aabb;
				var oarea1 = (_this9.maxx - _this9.minx + (_this9.maxy - _this9.miny)) * 2;
				var _this10 = ZPP_AABBTree.tmpaabb;
				cost2 = (_this10.maxx - _this10.minx + (_this10.maxy - _this10.miny)) * 2 - oarea1 + icost;
			}
			if(cost < cost1 && cost < cost2) {
				break;
			} else if(cost1 < cost2) {
				node = child1;
			} else {
				node = child2;
			}
		}
		var sibling = node;
		var oparent = sibling.parent;
		var nparent;
		if(ZPP_AABBNode.zpp_pool == null) {
			nparent = new ZPP_AABBNode();
		} else {
			nparent = ZPP_AABBNode.zpp_pool;
			ZPP_AABBNode.zpp_pool = nparent.next;
			nparent.next = null;
		}
		if(ZPP_AABB.zpp_pool == null) {
			nparent.aabb = new ZPP_AABB();
		} else {
			nparent.aabb = ZPP_AABB.zpp_pool;
			ZPP_AABB.zpp_pool = nparent.aabb.next;
			nparent.aabb.next = null;
		}
		nparent.moved = false;
		nparent.synced = false;
		nparent.first_sync = false;
		nparent.parent = oparent;
		var _this11 = nparent.aabb;
		var b2 = sibling.aabb;
		_this11.minx = leafaabb.minx < b2.minx?leafaabb.minx:b2.minx;
		_this11.miny = leafaabb.miny < b2.miny?leafaabb.miny:b2.miny;
		_this11.maxx = leafaabb.maxx > b2.maxx?leafaabb.maxx:b2.maxx;
		_this11.maxy = leafaabb.maxy > b2.maxy?leafaabb.maxy:b2.maxy;
		nparent.height = sibling.height + 1;
		if(oparent != null) {
			if(oparent.child1 == sibling) {
				oparent.child1 = nparent;
			} else {
				oparent.child2 = nparent;
			}
			nparent.child1 = sibling;
			nparent.child2 = leaf;
			sibling.parent = nparent;
			leaf.parent = nparent;
		} else {
			nparent.child1 = sibling;
			nparent.child2 = leaf;
			sibling.parent = nparent;
			leaf.parent = nparent;
			this.root = nparent;
		}
		node = leaf.parent;
		while(node != null) {
			if(node.child1 == null || node.height < 2) {
				node = node;
			} else {
				var b3 = node.child1;
				var c = node.child2;
				var balance = c.height - b3.height;
				if(balance > 1) {
					var f = c.child1;
					var g = c.child2;
					c.child1 = node;
					c.parent = node.parent;
					node.parent = c;
					if(c.parent != null) {
						if(c.parent.child1 == node) {
							c.parent.child1 = c;
						} else {
							c.parent.child2 = c;
						}
					} else {
						this.root = c;
					}
					if(f.height > g.height) {
						c.child2 = f;
						node.child2 = g;
						g.parent = node;
						var _this12 = node.aabb;
						var a1 = b3.aabb;
						var b4 = g.aabb;
						_this12.minx = a1.minx < b4.minx?a1.minx:b4.minx;
						_this12.miny = a1.miny < b4.miny?a1.miny:b4.miny;
						_this12.maxx = a1.maxx > b4.maxx?a1.maxx:b4.maxx;
						_this12.maxy = a1.maxy > b4.maxy?a1.maxy:b4.maxy;
						var _this13 = c.aabb;
						var a2 = node.aabb;
						var b5 = f.aabb;
						_this13.minx = a2.minx < b5.minx?a2.minx:b5.minx;
						_this13.miny = a2.miny < b5.miny?a2.miny:b5.miny;
						_this13.maxx = a2.maxx > b5.maxx?a2.maxx:b5.maxx;
						_this13.maxy = a2.maxy > b5.maxy?a2.maxy:b5.maxy;
						var x = b3.height;
						var y = g.height;
						node.height = 1 + (x > y?x:y);
						var x1 = node.height;
						var y1 = f.height;
						c.height = 1 + (x1 > y1?x1:y1);
					} else {
						c.child2 = g;
						node.child2 = f;
						f.parent = node;
						var _this14 = node.aabb;
						var a3 = b3.aabb;
						var b6 = f.aabb;
						_this14.minx = a3.minx < b6.minx?a3.minx:b6.minx;
						_this14.miny = a3.miny < b6.miny?a3.miny:b6.miny;
						_this14.maxx = a3.maxx > b6.maxx?a3.maxx:b6.maxx;
						_this14.maxy = a3.maxy > b6.maxy?a3.maxy:b6.maxy;
						var _this15 = c.aabb;
						var a4 = node.aabb;
						var b7 = g.aabb;
						_this15.minx = a4.minx < b7.minx?a4.minx:b7.minx;
						_this15.miny = a4.miny < b7.miny?a4.miny:b7.miny;
						_this15.maxx = a4.maxx > b7.maxx?a4.maxx:b7.maxx;
						_this15.maxy = a4.maxy > b7.maxy?a4.maxy:b7.maxy;
						var x2 = b3.height;
						var y2 = f.height;
						node.height = 1 + (x2 > y2?x2:y2);
						var x3 = node.height;
						var y3 = g.height;
						c.height = 1 + (x3 > y3?x3:y3);
					}
					node = c;
				} else if(balance < -1) {
					var f1 = b3.child1;
					var g1 = b3.child2;
					b3.child1 = node;
					b3.parent = node.parent;
					node.parent = b3;
					if(b3.parent != null) {
						if(b3.parent.child1 == node) {
							b3.parent.child1 = b3;
						} else {
							b3.parent.child2 = b3;
						}
					} else {
						this.root = b3;
					}
					if(f1.height > g1.height) {
						b3.child2 = f1;
						node.child1 = g1;
						g1.parent = node;
						var _this16 = node.aabb;
						var a5 = c.aabb;
						var b8 = g1.aabb;
						_this16.minx = a5.minx < b8.minx?a5.minx:b8.minx;
						_this16.miny = a5.miny < b8.miny?a5.miny:b8.miny;
						_this16.maxx = a5.maxx > b8.maxx?a5.maxx:b8.maxx;
						_this16.maxy = a5.maxy > b8.maxy?a5.maxy:b8.maxy;
						var _this17 = b3.aabb;
						var a6 = node.aabb;
						var b9 = f1.aabb;
						_this17.minx = a6.minx < b9.minx?a6.minx:b9.minx;
						_this17.miny = a6.miny < b9.miny?a6.miny:b9.miny;
						_this17.maxx = a6.maxx > b9.maxx?a6.maxx:b9.maxx;
						_this17.maxy = a6.maxy > b9.maxy?a6.maxy:b9.maxy;
						var x4 = c.height;
						var y4 = g1.height;
						node.height = 1 + (x4 > y4?x4:y4);
						var x5 = node.height;
						var y5 = f1.height;
						b3.height = 1 + (x5 > y5?x5:y5);
					} else {
						b3.child2 = g1;
						node.child1 = f1;
						f1.parent = node;
						var _this18 = node.aabb;
						var a7 = c.aabb;
						var b10 = f1.aabb;
						_this18.minx = a7.minx < b10.minx?a7.minx:b10.minx;
						_this18.miny = a7.miny < b10.miny?a7.miny:b10.miny;
						_this18.maxx = a7.maxx > b10.maxx?a7.maxx:b10.maxx;
						_this18.maxy = a7.maxy > b10.maxy?a7.maxy:b10.maxy;
						var _this19 = b3.aabb;
						var a8 = node.aabb;
						var b11 = g1.aabb;
						_this19.minx = a8.minx < b11.minx?a8.minx:b11.minx;
						_this19.miny = a8.miny < b11.miny?a8.miny:b11.miny;
						_this19.maxx = a8.maxx > b11.maxx?a8.maxx:b11.maxx;
						_this19.maxy = a8.maxy > b11.maxy?a8.maxy:b11.maxy;
						var x6 = c.height;
						var y6 = f1.height;
						node.height = 1 + (x6 > y6?x6:y6);
						var x7 = node.height;
						var y7 = g1.height;
						b3.height = 1 + (x7 > y7?x7:y7);
					}
					node = b3;
				} else {
					node = node;
				}
			}
			var child11 = node.child1;
			var child21 = node.child2;
			var x8 = child11.height;
			var y8 = child21.height;
			node.height = 1 + (x8 > y8?x8:y8);
			var _this20 = node.aabb;
			var a9 = child11.aabb;
			var b12 = child21.aabb;
			_this20.minx = a9.minx < b12.minx?a9.minx:b12.minx;
			_this20.miny = a9.miny < b12.miny?a9.miny:b12.miny;
			_this20.maxx = a9.maxx > b12.maxx?a9.maxx:b12.maxx;
			_this20.maxy = a9.maxy > b12.maxy?a9.maxy:b12.maxy;
			node = node.parent;
		}
	}
};
ZPP_AABBTree.prototype.inlined_insertLeaf = function(leaf) {
	if(this.root == null) {
		this.root = leaf;
		this.root.parent = null;
	} else {
		var leafaabb = leaf.aabb;
		var node = this.root;
		while(node.child1 != null) {
			var child1 = node.child1;
			var child2 = node.child2;
			var _this = node.aabb;
			var area = (_this.maxx - _this.minx + (_this.maxy - _this.miny)) * 2;
			var _this1 = ZPP_AABBTree.tmpaabb;
			var a = node.aabb;
			_this1.minx = a.minx < leafaabb.minx?a.minx:leafaabb.minx;
			_this1.miny = a.miny < leafaabb.miny?a.miny:leafaabb.miny;
			_this1.maxx = a.maxx > leafaabb.maxx?a.maxx:leafaabb.maxx;
			_this1.maxy = a.maxy > leafaabb.maxy?a.maxy:leafaabb.maxy;
			var _this2 = ZPP_AABBTree.tmpaabb;
			var carea = (_this2.maxx - _this2.minx + (_this2.maxy - _this2.miny)) * 2;
			var cost = 2 * carea;
			var icost = 2 * (carea - area);
			var _this3 = ZPP_AABBTree.tmpaabb;
			var b = child1.aabb;
			_this3.minx = leafaabb.minx < b.minx?leafaabb.minx:b.minx;
			_this3.miny = leafaabb.miny < b.miny?leafaabb.miny:b.miny;
			_this3.maxx = leafaabb.maxx > b.maxx?leafaabb.maxx:b.maxx;
			_this3.maxy = leafaabb.maxy > b.maxy?leafaabb.maxy:b.maxy;
			var cost1;
			if(child1.child1 == null) {
				var _this4 = ZPP_AABBTree.tmpaabb;
				cost1 = (_this4.maxx - _this4.minx + (_this4.maxy - _this4.miny)) * 2 + icost;
			} else {
				var _this5 = child1.aabb;
				var oarea = (_this5.maxx - _this5.minx + (_this5.maxy - _this5.miny)) * 2;
				var _this6 = ZPP_AABBTree.tmpaabb;
				cost1 = (_this6.maxx - _this6.minx + (_this6.maxy - _this6.miny)) * 2 - oarea + icost;
			}
			var _this7 = ZPP_AABBTree.tmpaabb;
			var b1 = child2.aabb;
			_this7.minx = leafaabb.minx < b1.minx?leafaabb.minx:b1.minx;
			_this7.miny = leafaabb.miny < b1.miny?leafaabb.miny:b1.miny;
			_this7.maxx = leafaabb.maxx > b1.maxx?leafaabb.maxx:b1.maxx;
			_this7.maxy = leafaabb.maxy > b1.maxy?leafaabb.maxy:b1.maxy;
			var cost2;
			if(child2.child1 == null) {
				var _this8 = ZPP_AABBTree.tmpaabb;
				cost2 = (_this8.maxx - _this8.minx + (_this8.maxy - _this8.miny)) * 2 + icost;
			} else {
				var _this9 = child2.aabb;
				var oarea1 = (_this9.maxx - _this9.minx + (_this9.maxy - _this9.miny)) * 2;
				var _this10 = ZPP_AABBTree.tmpaabb;
				cost2 = (_this10.maxx - _this10.minx + (_this10.maxy - _this10.miny)) * 2 - oarea1 + icost;
			}
			if(cost < cost1 && cost < cost2) {
				break;
			} else if(cost1 < cost2) {
				node = child1;
			} else {
				node = child2;
			}
		}
		var sibling = node;
		var oparent = sibling.parent;
		var nparent;
		if(ZPP_AABBNode.zpp_pool == null) {
			nparent = new ZPP_AABBNode();
		} else {
			nparent = ZPP_AABBNode.zpp_pool;
			ZPP_AABBNode.zpp_pool = nparent.next;
			nparent.next = null;
		}
		if(ZPP_AABB.zpp_pool == null) {
			nparent.aabb = new ZPP_AABB();
		} else {
			nparent.aabb = ZPP_AABB.zpp_pool;
			ZPP_AABB.zpp_pool = nparent.aabb.next;
			nparent.aabb.next = null;
		}
		nparent.moved = false;
		nparent.synced = false;
		nparent.first_sync = false;
		nparent.parent = oparent;
		var _this11 = nparent.aabb;
		var b2 = sibling.aabb;
		_this11.minx = leafaabb.minx < b2.minx?leafaabb.minx:b2.minx;
		_this11.miny = leafaabb.miny < b2.miny?leafaabb.miny:b2.miny;
		_this11.maxx = leafaabb.maxx > b2.maxx?leafaabb.maxx:b2.maxx;
		_this11.maxy = leafaabb.maxy > b2.maxy?leafaabb.maxy:b2.maxy;
		nparent.height = sibling.height + 1;
		if(oparent != null) {
			if(oparent.child1 == sibling) {
				oparent.child1 = nparent;
			} else {
				oparent.child2 = nparent;
			}
			nparent.child1 = sibling;
			nparent.child2 = leaf;
			sibling.parent = nparent;
			leaf.parent = nparent;
		} else {
			nparent.child1 = sibling;
			nparent.child2 = leaf;
			sibling.parent = nparent;
			leaf.parent = nparent;
			this.root = nparent;
		}
		node = leaf.parent;
		while(node != null) {
			if(node.child1 == null || node.height < 2) {
				node = node;
			} else {
				var b3 = node.child1;
				var c = node.child2;
				var balance = c.height - b3.height;
				if(balance > 1) {
					var f = c.child1;
					var g = c.child2;
					c.child1 = node;
					c.parent = node.parent;
					node.parent = c;
					if(c.parent != null) {
						if(c.parent.child1 == node) {
							c.parent.child1 = c;
						} else {
							c.parent.child2 = c;
						}
					} else {
						this.root = c;
					}
					if(f.height > g.height) {
						c.child2 = f;
						node.child2 = g;
						g.parent = node;
						var _this12 = node.aabb;
						var a1 = b3.aabb;
						var b4 = g.aabb;
						_this12.minx = a1.minx < b4.minx?a1.minx:b4.minx;
						_this12.miny = a1.miny < b4.miny?a1.miny:b4.miny;
						_this12.maxx = a1.maxx > b4.maxx?a1.maxx:b4.maxx;
						_this12.maxy = a1.maxy > b4.maxy?a1.maxy:b4.maxy;
						var _this13 = c.aabb;
						var a2 = node.aabb;
						var b5 = f.aabb;
						_this13.minx = a2.minx < b5.minx?a2.minx:b5.minx;
						_this13.miny = a2.miny < b5.miny?a2.miny:b5.miny;
						_this13.maxx = a2.maxx > b5.maxx?a2.maxx:b5.maxx;
						_this13.maxy = a2.maxy > b5.maxy?a2.maxy:b5.maxy;
						var x = b3.height;
						var y = g.height;
						node.height = 1 + (x > y?x:y);
						var x1 = node.height;
						var y1 = f.height;
						c.height = 1 + (x1 > y1?x1:y1);
					} else {
						c.child2 = g;
						node.child2 = f;
						f.parent = node;
						var _this14 = node.aabb;
						var a3 = b3.aabb;
						var b6 = f.aabb;
						_this14.minx = a3.minx < b6.minx?a3.minx:b6.minx;
						_this14.miny = a3.miny < b6.miny?a3.miny:b6.miny;
						_this14.maxx = a3.maxx > b6.maxx?a3.maxx:b6.maxx;
						_this14.maxy = a3.maxy > b6.maxy?a3.maxy:b6.maxy;
						var _this15 = c.aabb;
						var a4 = node.aabb;
						var b7 = g.aabb;
						_this15.minx = a4.minx < b7.minx?a4.minx:b7.minx;
						_this15.miny = a4.miny < b7.miny?a4.miny:b7.miny;
						_this15.maxx = a4.maxx > b7.maxx?a4.maxx:b7.maxx;
						_this15.maxy = a4.maxy > b7.maxy?a4.maxy:b7.maxy;
						var x2 = b3.height;
						var y2 = f.height;
						node.height = 1 + (x2 > y2?x2:y2);
						var x3 = node.height;
						var y3 = g.height;
						c.height = 1 + (x3 > y3?x3:y3);
					}
					node = c;
				} else if(balance < -1) {
					var f1 = b3.child1;
					var g1 = b3.child2;
					b3.child1 = node;
					b3.parent = node.parent;
					node.parent = b3;
					if(b3.parent != null) {
						if(b3.parent.child1 == node) {
							b3.parent.child1 = b3;
						} else {
							b3.parent.child2 = b3;
						}
					} else {
						this.root = b3;
					}
					if(f1.height > g1.height) {
						b3.child2 = f1;
						node.child1 = g1;
						g1.parent = node;
						var _this16 = node.aabb;
						var a5 = c.aabb;
						var b8 = g1.aabb;
						_this16.minx = a5.minx < b8.minx?a5.minx:b8.minx;
						_this16.miny = a5.miny < b8.miny?a5.miny:b8.miny;
						_this16.maxx = a5.maxx > b8.maxx?a5.maxx:b8.maxx;
						_this16.maxy = a5.maxy > b8.maxy?a5.maxy:b8.maxy;
						var _this17 = b3.aabb;
						var a6 = node.aabb;
						var b9 = f1.aabb;
						_this17.minx = a6.minx < b9.minx?a6.minx:b9.minx;
						_this17.miny = a6.miny < b9.miny?a6.miny:b9.miny;
						_this17.maxx = a6.maxx > b9.maxx?a6.maxx:b9.maxx;
						_this17.maxy = a6.maxy > b9.maxy?a6.maxy:b9.maxy;
						var x4 = c.height;
						var y4 = g1.height;
						node.height = 1 + (x4 > y4?x4:y4);
						var x5 = node.height;
						var y5 = f1.height;
						b3.height = 1 + (x5 > y5?x5:y5);
					} else {
						b3.child2 = g1;
						node.child1 = f1;
						f1.parent = node;
						var _this18 = node.aabb;
						var a7 = c.aabb;
						var b10 = f1.aabb;
						_this18.minx = a7.minx < b10.minx?a7.minx:b10.minx;
						_this18.miny = a7.miny < b10.miny?a7.miny:b10.miny;
						_this18.maxx = a7.maxx > b10.maxx?a7.maxx:b10.maxx;
						_this18.maxy = a7.maxy > b10.maxy?a7.maxy:b10.maxy;
						var _this19 = b3.aabb;
						var a8 = node.aabb;
						var b11 = g1.aabb;
						_this19.minx = a8.minx < b11.minx?a8.minx:b11.minx;
						_this19.miny = a8.miny < b11.miny?a8.miny:b11.miny;
						_this19.maxx = a8.maxx > b11.maxx?a8.maxx:b11.maxx;
						_this19.maxy = a8.maxy > b11.maxy?a8.maxy:b11.maxy;
						var x6 = c.height;
						var y6 = f1.height;
						node.height = 1 + (x6 > y6?x6:y6);
						var x7 = node.height;
						var y7 = g1.height;
						b3.height = 1 + (x7 > y7?x7:y7);
					}
					node = b3;
				} else {
					node = node;
				}
			}
			var child11 = node.child1;
			var child21 = node.child2;
			var x8 = child11.height;
			var y8 = child21.height;
			node.height = 1 + (x8 > y8?x8:y8);
			var _this20 = node.aabb;
			var a9 = child11.aabb;
			var b12 = child21.aabb;
			_this20.minx = a9.minx < b12.minx?a9.minx:b12.minx;
			_this20.miny = a9.miny < b12.miny?a9.miny:b12.miny;
			_this20.maxx = a9.maxx > b12.maxx?a9.maxx:b12.maxx;
			_this20.maxy = a9.maxy > b12.maxy?a9.maxy:b12.maxy;
			node = node.parent;
		}
	}
};
ZPP_AABBTree.prototype.removeLeaf = function(leaf) {
	if(leaf == this.root) {
		this.root = null;
	} else {
		var parent = leaf.parent;
		var gparent = parent.parent;
		var sibling = parent.child1 == leaf?parent.child2:parent.child1;
		if(gparent != null) {
			if(gparent.child1 == parent) {
				gparent.child1 = sibling;
			} else {
				gparent.child2 = sibling;
			}
			sibling.parent = gparent;
			parent.height = -1;
			var o = parent.aabb;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o.wrap_min = o.wrap_max = null;
			o._invalidate = null;
			o._validate = null;
			o.next = ZPP_AABB.zpp_pool;
			ZPP_AABB.zpp_pool = o;
			parent.child1 = parent.child2 = parent.parent = null;
			parent.next = null;
			parent.snext = null;
			parent.mnext = null;
			parent.next = ZPP_AABBNode.zpp_pool;
			ZPP_AABBNode.zpp_pool = parent;
			var node = gparent;
			while(node != null) {
				if(node.child1 == null || node.height < 2) {
					node = node;
				} else {
					var b = node.child1;
					var c = node.child2;
					var balance = c.height - b.height;
					if(balance > 1) {
						var f = c.child1;
						var g = c.child2;
						c.child1 = node;
						c.parent = node.parent;
						node.parent = c;
						if(c.parent != null) {
							if(c.parent.child1 == node) {
								c.parent.child1 = c;
							} else {
								c.parent.child2 = c;
							}
						} else {
							this.root = c;
						}
						if(f.height > g.height) {
							c.child2 = f;
							node.child2 = g;
							g.parent = node;
							var _this = node.aabb;
							var a = b.aabb;
							var b1 = g.aabb;
							_this.minx = a.minx < b1.minx?a.minx:b1.minx;
							_this.miny = a.miny < b1.miny?a.miny:b1.miny;
							_this.maxx = a.maxx > b1.maxx?a.maxx:b1.maxx;
							_this.maxy = a.maxy > b1.maxy?a.maxy:b1.maxy;
							var _this1 = c.aabb;
							var a1 = node.aabb;
							var b2 = f.aabb;
							_this1.minx = a1.minx < b2.minx?a1.minx:b2.minx;
							_this1.miny = a1.miny < b2.miny?a1.miny:b2.miny;
							_this1.maxx = a1.maxx > b2.maxx?a1.maxx:b2.maxx;
							_this1.maxy = a1.maxy > b2.maxy?a1.maxy:b2.maxy;
							var x = b.height;
							var y = g.height;
							node.height = 1 + (x > y?x:y);
							var x1 = node.height;
							var y1 = f.height;
							c.height = 1 + (x1 > y1?x1:y1);
						} else {
							c.child2 = g;
							node.child2 = f;
							f.parent = node;
							var _this2 = node.aabb;
							var a2 = b.aabb;
							var b3 = f.aabb;
							_this2.minx = a2.minx < b3.minx?a2.minx:b3.minx;
							_this2.miny = a2.miny < b3.miny?a2.miny:b3.miny;
							_this2.maxx = a2.maxx > b3.maxx?a2.maxx:b3.maxx;
							_this2.maxy = a2.maxy > b3.maxy?a2.maxy:b3.maxy;
							var _this3 = c.aabb;
							var a3 = node.aabb;
							var b4 = g.aabb;
							_this3.minx = a3.minx < b4.minx?a3.minx:b4.minx;
							_this3.miny = a3.miny < b4.miny?a3.miny:b4.miny;
							_this3.maxx = a3.maxx > b4.maxx?a3.maxx:b4.maxx;
							_this3.maxy = a3.maxy > b4.maxy?a3.maxy:b4.maxy;
							var x2 = b.height;
							var y2 = f.height;
							node.height = 1 + (x2 > y2?x2:y2);
							var x3 = node.height;
							var y3 = g.height;
							c.height = 1 + (x3 > y3?x3:y3);
						}
						node = c;
					} else if(balance < -1) {
						var f1 = b.child1;
						var g1 = b.child2;
						b.child1 = node;
						b.parent = node.parent;
						node.parent = b;
						if(b.parent != null) {
							if(b.parent.child1 == node) {
								b.parent.child1 = b;
							} else {
								b.parent.child2 = b;
							}
						} else {
							this.root = b;
						}
						if(f1.height > g1.height) {
							b.child2 = f1;
							node.child1 = g1;
							g1.parent = node;
							var _this4 = node.aabb;
							var a4 = c.aabb;
							var b5 = g1.aabb;
							_this4.minx = a4.minx < b5.minx?a4.minx:b5.minx;
							_this4.miny = a4.miny < b5.miny?a4.miny:b5.miny;
							_this4.maxx = a4.maxx > b5.maxx?a4.maxx:b5.maxx;
							_this4.maxy = a4.maxy > b5.maxy?a4.maxy:b5.maxy;
							var _this5 = b.aabb;
							var a5 = node.aabb;
							var b6 = f1.aabb;
							_this5.minx = a5.minx < b6.minx?a5.minx:b6.minx;
							_this5.miny = a5.miny < b6.miny?a5.miny:b6.miny;
							_this5.maxx = a5.maxx > b6.maxx?a5.maxx:b6.maxx;
							_this5.maxy = a5.maxy > b6.maxy?a5.maxy:b6.maxy;
							var x4 = c.height;
							var y4 = g1.height;
							node.height = 1 + (x4 > y4?x4:y4);
							var x5 = node.height;
							var y5 = f1.height;
							b.height = 1 + (x5 > y5?x5:y5);
						} else {
							b.child2 = g1;
							node.child1 = f1;
							f1.parent = node;
							var _this6 = node.aabb;
							var a6 = c.aabb;
							var b7 = f1.aabb;
							_this6.minx = a6.minx < b7.minx?a6.minx:b7.minx;
							_this6.miny = a6.miny < b7.miny?a6.miny:b7.miny;
							_this6.maxx = a6.maxx > b7.maxx?a6.maxx:b7.maxx;
							_this6.maxy = a6.maxy > b7.maxy?a6.maxy:b7.maxy;
							var _this7 = b.aabb;
							var a7 = node.aabb;
							var b8 = g1.aabb;
							_this7.minx = a7.minx < b8.minx?a7.minx:b8.minx;
							_this7.miny = a7.miny < b8.miny?a7.miny:b8.miny;
							_this7.maxx = a7.maxx > b8.maxx?a7.maxx:b8.maxx;
							_this7.maxy = a7.maxy > b8.maxy?a7.maxy:b8.maxy;
							var x6 = c.height;
							var y6 = f1.height;
							node.height = 1 + (x6 > y6?x6:y6);
							var x7 = node.height;
							var y7 = g1.height;
							b.height = 1 + (x7 > y7?x7:y7);
						}
						node = b;
					} else {
						node = node;
					}
				}
				var child1 = node.child1;
				var child2 = node.child2;
				var _this8 = node.aabb;
				var a8 = child1.aabb;
				var b9 = child2.aabb;
				_this8.minx = a8.minx < b9.minx?a8.minx:b9.minx;
				_this8.miny = a8.miny < b9.miny?a8.miny:b9.miny;
				_this8.maxx = a8.maxx > b9.maxx?a8.maxx:b9.maxx;
				_this8.maxy = a8.maxy > b9.maxy?a8.maxy:b9.maxy;
				var x8 = child1.height;
				var y8 = child2.height;
				node.height = 1 + (x8 > y8?x8:y8);
				node = node.parent;
			}
		} else {
			this.root = sibling;
			sibling.parent = null;
			parent.height = -1;
			var o1 = parent.aabb;
			if(o1.outer != null) {
				o1.outer.zpp_inner = null;
				o1.outer = null;
			}
			o1.wrap_min = o1.wrap_max = null;
			o1._invalidate = null;
			o1._validate = null;
			o1.next = ZPP_AABB.zpp_pool;
			ZPP_AABB.zpp_pool = o1;
			parent.child1 = parent.child2 = parent.parent = null;
			parent.next = null;
			parent.snext = null;
			parent.mnext = null;
			parent.next = ZPP_AABBNode.zpp_pool;
			ZPP_AABBNode.zpp_pool = parent;
		}
	}
};
ZPP_AABBTree.prototype.inlined_removeLeaf = function(leaf) {
	if(leaf == this.root) {
		this.root = null;
		return;
	} else {
		var parent = leaf.parent;
		var gparent = parent.parent;
		var sibling = parent.child1 == leaf?parent.child2:parent.child1;
		if(gparent != null) {
			if(gparent.child1 == parent) {
				gparent.child1 = sibling;
			} else {
				gparent.child2 = sibling;
			}
			sibling.parent = gparent;
			parent.height = -1;
			var o = parent.aabb;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o.wrap_min = o.wrap_max = null;
			o._invalidate = null;
			o._validate = null;
			o.next = ZPP_AABB.zpp_pool;
			ZPP_AABB.zpp_pool = o;
			parent.child1 = parent.child2 = parent.parent = null;
			parent.next = null;
			parent.snext = null;
			parent.mnext = null;
			parent.next = ZPP_AABBNode.zpp_pool;
			ZPP_AABBNode.zpp_pool = parent;
			var node = gparent;
			while(node != null) {
				if(node.child1 == null || node.height < 2) {
					node = node;
				} else {
					var b = node.child1;
					var c = node.child2;
					var balance = c.height - b.height;
					if(balance > 1) {
						var f = c.child1;
						var g = c.child2;
						c.child1 = node;
						c.parent = node.parent;
						node.parent = c;
						if(c.parent != null) {
							if(c.parent.child1 == node) {
								c.parent.child1 = c;
							} else {
								c.parent.child2 = c;
							}
						} else {
							this.root = c;
						}
						if(f.height > g.height) {
							c.child2 = f;
							node.child2 = g;
							g.parent = node;
							var _this = node.aabb;
							var a = b.aabb;
							var b1 = g.aabb;
							_this.minx = a.minx < b1.minx?a.minx:b1.minx;
							_this.miny = a.miny < b1.miny?a.miny:b1.miny;
							_this.maxx = a.maxx > b1.maxx?a.maxx:b1.maxx;
							_this.maxy = a.maxy > b1.maxy?a.maxy:b1.maxy;
							var _this1 = c.aabb;
							var a1 = node.aabb;
							var b2 = f.aabb;
							_this1.minx = a1.minx < b2.minx?a1.minx:b2.minx;
							_this1.miny = a1.miny < b2.miny?a1.miny:b2.miny;
							_this1.maxx = a1.maxx > b2.maxx?a1.maxx:b2.maxx;
							_this1.maxy = a1.maxy > b2.maxy?a1.maxy:b2.maxy;
							var x = b.height;
							var y = g.height;
							node.height = 1 + (x > y?x:y);
							var x1 = node.height;
							var y1 = f.height;
							c.height = 1 + (x1 > y1?x1:y1);
						} else {
							c.child2 = g;
							node.child2 = f;
							f.parent = node;
							var _this2 = node.aabb;
							var a2 = b.aabb;
							var b3 = f.aabb;
							_this2.minx = a2.minx < b3.minx?a2.minx:b3.minx;
							_this2.miny = a2.miny < b3.miny?a2.miny:b3.miny;
							_this2.maxx = a2.maxx > b3.maxx?a2.maxx:b3.maxx;
							_this2.maxy = a2.maxy > b3.maxy?a2.maxy:b3.maxy;
							var _this3 = c.aabb;
							var a3 = node.aabb;
							var b4 = g.aabb;
							_this3.minx = a3.minx < b4.minx?a3.minx:b4.minx;
							_this3.miny = a3.miny < b4.miny?a3.miny:b4.miny;
							_this3.maxx = a3.maxx > b4.maxx?a3.maxx:b4.maxx;
							_this3.maxy = a3.maxy > b4.maxy?a3.maxy:b4.maxy;
							var x2 = b.height;
							var y2 = f.height;
							node.height = 1 + (x2 > y2?x2:y2);
							var x3 = node.height;
							var y3 = g.height;
							c.height = 1 + (x3 > y3?x3:y3);
						}
						node = c;
					} else if(balance < -1) {
						var f1 = b.child1;
						var g1 = b.child2;
						b.child1 = node;
						b.parent = node.parent;
						node.parent = b;
						if(b.parent != null) {
							if(b.parent.child1 == node) {
								b.parent.child1 = b;
							} else {
								b.parent.child2 = b;
							}
						} else {
							this.root = b;
						}
						if(f1.height > g1.height) {
							b.child2 = f1;
							node.child1 = g1;
							g1.parent = node;
							var _this4 = node.aabb;
							var a4 = c.aabb;
							var b5 = g1.aabb;
							_this4.minx = a4.minx < b5.minx?a4.minx:b5.minx;
							_this4.miny = a4.miny < b5.miny?a4.miny:b5.miny;
							_this4.maxx = a4.maxx > b5.maxx?a4.maxx:b5.maxx;
							_this4.maxy = a4.maxy > b5.maxy?a4.maxy:b5.maxy;
							var _this5 = b.aabb;
							var a5 = node.aabb;
							var b6 = f1.aabb;
							_this5.minx = a5.minx < b6.minx?a5.minx:b6.minx;
							_this5.miny = a5.miny < b6.miny?a5.miny:b6.miny;
							_this5.maxx = a5.maxx > b6.maxx?a5.maxx:b6.maxx;
							_this5.maxy = a5.maxy > b6.maxy?a5.maxy:b6.maxy;
							var x4 = c.height;
							var y4 = g1.height;
							node.height = 1 + (x4 > y4?x4:y4);
							var x5 = node.height;
							var y5 = f1.height;
							b.height = 1 + (x5 > y5?x5:y5);
						} else {
							b.child2 = g1;
							node.child1 = f1;
							f1.parent = node;
							var _this6 = node.aabb;
							var a6 = c.aabb;
							var b7 = f1.aabb;
							_this6.minx = a6.minx < b7.minx?a6.minx:b7.minx;
							_this6.miny = a6.miny < b7.miny?a6.miny:b7.miny;
							_this6.maxx = a6.maxx > b7.maxx?a6.maxx:b7.maxx;
							_this6.maxy = a6.maxy > b7.maxy?a6.maxy:b7.maxy;
							var _this7 = b.aabb;
							var a7 = node.aabb;
							var b8 = g1.aabb;
							_this7.minx = a7.minx < b8.minx?a7.minx:b8.minx;
							_this7.miny = a7.miny < b8.miny?a7.miny:b8.miny;
							_this7.maxx = a7.maxx > b8.maxx?a7.maxx:b8.maxx;
							_this7.maxy = a7.maxy > b8.maxy?a7.maxy:b8.maxy;
							var x6 = c.height;
							var y6 = f1.height;
							node.height = 1 + (x6 > y6?x6:y6);
							var x7 = node.height;
							var y7 = g1.height;
							b.height = 1 + (x7 > y7?x7:y7);
						}
						node = b;
					} else {
						node = node;
					}
				}
				var child1 = node.child1;
				var child2 = node.child2;
				var _this8 = node.aabb;
				var a8 = child1.aabb;
				var b9 = child2.aabb;
				_this8.minx = a8.minx < b9.minx?a8.minx:b9.minx;
				_this8.miny = a8.miny < b9.miny?a8.miny:b9.miny;
				_this8.maxx = a8.maxx > b9.maxx?a8.maxx:b9.maxx;
				_this8.maxy = a8.maxy > b9.maxy?a8.maxy:b9.maxy;
				var x8 = child1.height;
				var y8 = child2.height;
				node.height = 1 + (x8 > y8?x8:y8);
				node = node.parent;
			}
		} else {
			this.root = sibling;
			sibling.parent = null;
			parent.height = -1;
			var o1 = parent.aabb;
			if(o1.outer != null) {
				o1.outer.zpp_inner = null;
				o1.outer = null;
			}
			o1.wrap_min = o1.wrap_max = null;
			o1._invalidate = null;
			o1._validate = null;
			o1.next = ZPP_AABB.zpp_pool;
			ZPP_AABB.zpp_pool = o1;
			parent.child1 = parent.child2 = parent.parent = null;
			parent.next = null;
			parent.snext = null;
			parent.mnext = null;
			parent.next = ZPP_AABBNode.zpp_pool;
			ZPP_AABBNode.zpp_pool = parent;
		}
	}
};
ZPP_AABBTree.prototype.balance = function(a) {
	if(a.child1 == null || a.height < 2) {
		return a;
	} else {
		var b = a.child1;
		var c = a.child2;
		var balance = c.height - b.height;
		if(balance > 1) {
			var f = c.child1;
			var g = c.child2;
			c.child1 = a;
			c.parent = a.parent;
			a.parent = c;
			if(c.parent != null) {
				if(c.parent.child1 == a) {
					c.parent.child1 = c;
				} else {
					c.parent.child2 = c;
				}
			} else {
				this.root = c;
			}
			if(f.height > g.height) {
				c.child2 = f;
				a.child2 = g;
				g.parent = a;
				var _this = a.aabb;
				var a1 = b.aabb;
				var b1 = g.aabb;
				_this.minx = a1.minx < b1.minx?a1.minx:b1.minx;
				_this.miny = a1.miny < b1.miny?a1.miny:b1.miny;
				_this.maxx = a1.maxx > b1.maxx?a1.maxx:b1.maxx;
				_this.maxy = a1.maxy > b1.maxy?a1.maxy:b1.maxy;
				var _this1 = c.aabb;
				var a2 = a.aabb;
				var b2 = f.aabb;
				_this1.minx = a2.minx < b2.minx?a2.minx:b2.minx;
				_this1.miny = a2.miny < b2.miny?a2.miny:b2.miny;
				_this1.maxx = a2.maxx > b2.maxx?a2.maxx:b2.maxx;
				_this1.maxy = a2.maxy > b2.maxy?a2.maxy:b2.maxy;
				var x = b.height;
				var y = g.height;
				a.height = 1 + (x > y?x:y);
				var x1 = a.height;
				var y1 = f.height;
				c.height = 1 + (x1 > y1?x1:y1);
			} else {
				c.child2 = g;
				a.child2 = f;
				f.parent = a;
				var _this2 = a.aabb;
				var a3 = b.aabb;
				var b3 = f.aabb;
				_this2.minx = a3.minx < b3.minx?a3.minx:b3.minx;
				_this2.miny = a3.miny < b3.miny?a3.miny:b3.miny;
				_this2.maxx = a3.maxx > b3.maxx?a3.maxx:b3.maxx;
				_this2.maxy = a3.maxy > b3.maxy?a3.maxy:b3.maxy;
				var _this3 = c.aabb;
				var a4 = a.aabb;
				var b4 = g.aabb;
				_this3.minx = a4.minx < b4.minx?a4.minx:b4.minx;
				_this3.miny = a4.miny < b4.miny?a4.miny:b4.miny;
				_this3.maxx = a4.maxx > b4.maxx?a4.maxx:b4.maxx;
				_this3.maxy = a4.maxy > b4.maxy?a4.maxy:b4.maxy;
				var x2 = b.height;
				var y2 = f.height;
				a.height = 1 + (x2 > y2?x2:y2);
				var x3 = a.height;
				var y3 = g.height;
				c.height = 1 + (x3 > y3?x3:y3);
			}
			return c;
		} else if(balance < -1) {
			var f1 = b.child1;
			var g1 = b.child2;
			b.child1 = a;
			b.parent = a.parent;
			a.parent = b;
			if(b.parent != null) {
				if(b.parent.child1 == a) {
					b.parent.child1 = b;
				} else {
					b.parent.child2 = b;
				}
			} else {
				this.root = b;
			}
			if(f1.height > g1.height) {
				b.child2 = f1;
				a.child1 = g1;
				g1.parent = a;
				var _this4 = a.aabb;
				var a5 = c.aabb;
				var b5 = g1.aabb;
				_this4.minx = a5.minx < b5.minx?a5.minx:b5.minx;
				_this4.miny = a5.miny < b5.miny?a5.miny:b5.miny;
				_this4.maxx = a5.maxx > b5.maxx?a5.maxx:b5.maxx;
				_this4.maxy = a5.maxy > b5.maxy?a5.maxy:b5.maxy;
				var _this5 = b.aabb;
				var a6 = a.aabb;
				var b6 = f1.aabb;
				_this5.minx = a6.minx < b6.minx?a6.minx:b6.minx;
				_this5.miny = a6.miny < b6.miny?a6.miny:b6.miny;
				_this5.maxx = a6.maxx > b6.maxx?a6.maxx:b6.maxx;
				_this5.maxy = a6.maxy > b6.maxy?a6.maxy:b6.maxy;
				var x4 = c.height;
				var y4 = g1.height;
				a.height = 1 + (x4 > y4?x4:y4);
				var x5 = a.height;
				var y5 = f1.height;
				b.height = 1 + (x5 > y5?x5:y5);
			} else {
				b.child2 = g1;
				a.child1 = f1;
				f1.parent = a;
				var _this6 = a.aabb;
				var a7 = c.aabb;
				var b7 = f1.aabb;
				_this6.minx = a7.minx < b7.minx?a7.minx:b7.minx;
				_this6.miny = a7.miny < b7.miny?a7.miny:b7.miny;
				_this6.maxx = a7.maxx > b7.maxx?a7.maxx:b7.maxx;
				_this6.maxy = a7.maxy > b7.maxy?a7.maxy:b7.maxy;
				var _this7 = b.aabb;
				var a8 = a.aabb;
				var b8 = g1.aabb;
				_this7.minx = a8.minx < b8.minx?a8.minx:b8.minx;
				_this7.miny = a8.miny < b8.miny?a8.miny:b8.miny;
				_this7.maxx = a8.maxx > b8.maxx?a8.maxx:b8.maxx;
				_this7.maxy = a8.maxy > b8.maxy?a8.maxy:b8.maxy;
				var x6 = c.height;
				var y6 = f1.height;
				a.height = 1 + (x6 > y6?x6:y6);
				var x7 = a.height;
				var y7 = g1.height;
				b.height = 1 + (x7 > y7?x7:y7);
			}
			return b;
		} else {
			return a;
		}
	}
};
ZPP_AABBTree.prototype.__class__ = ZPP_AABBTree;
var ZPP_DynAABBPhase = zpp_nape.space.ZPP_DynAABBPhase = function(space) {
	this.openlist = null;
	this.failed = null;
	this.treeStack2 = null;
	this.treeStack = null;
	this.moves = null;
	this.syncs = null;
	this.pairs = null;
	this.dtree = null;
	this.stree = null;
	ZPP_Broadphase.call(this);
	this.space = space;
	this.is_sweep = false;
	this.dynab = this;
	this.stree = new ZPP_AABBTree();
	this.dtree = new ZPP_AABBTree();
};
ZPP_DynAABBPhase.__name__ = ["zpp_nape","space","ZPP_DynAABBPhase"];
ZPP_DynAABBPhase.__super__ = ZPP_Broadphase;
// for(var k in ZPP_Broadphase.prototype ) ZPP_DynAABBPhase.prototype[k] = ZPP_Broadphase.prototype[k];
ZPP_DynAABBPhase.prototype = Object.create(ZPP_Broadphase.prototype);
ZPP_DynAABBPhase.prototype.stree = null;
ZPP_DynAABBPhase.prototype.dtree = null;
ZPP_DynAABBPhase.prototype.pairs = null;
ZPP_DynAABBPhase.prototype.syncs = null;
ZPP_DynAABBPhase.prototype.moves = null;
ZPP_DynAABBPhase.prototype.dyn = function(shape) {
	if(shape.body.type == 1) {
		return false;
	} else {
		return !shape.body.component.sleeping;
	}
};
ZPP_DynAABBPhase.prototype.__insert = function(shape) {
	var node;
	if(ZPP_AABBNode.zpp_pool == null) {
		node = new ZPP_AABBNode();
	} else {
		node = ZPP_AABBNode.zpp_pool;
		ZPP_AABBNode.zpp_pool = node.next;
		node.next = null;
	}
	if(ZPP_AABB.zpp_pool == null) {
		node.aabb = new ZPP_AABB();
	} else {
		node.aabb = ZPP_AABB.zpp_pool;
		ZPP_AABB.zpp_pool = node.aabb.next;
		node.aabb.next = null;
	}
	node.moved = false;
	node.synced = false;
	node.first_sync = false;
	node.shape = shape;
	shape.node = node;
	node.synced = true;
	node.first_sync = true;
	node.snext = this.syncs;
	this.syncs = node;
};
ZPP_DynAABBPhase.prototype.__remove = function(shape) {
	var node = shape.node;
	if(!node.first_sync) {
		if(node.dyn) {
			this.dtree.removeLeaf(node);
		} else {
			this.stree.removeLeaf(node);
		}
	}
	shape.node = null;
	if(node.synced) {
		var pre = null;
		var cur = this.syncs;
		while(cur != null) {
			if(cur == node) {
				break;
			}
			pre = cur;
			cur = cur.snext;
		}
		if(pre == null) {
			this.syncs = cur.snext;
		} else {
			pre.snext = cur.snext;
		}
		cur.snext = null;
		node.synced = false;
	}
	if(node.moved) {
		var pre1 = null;
		var cur1 = this.moves;
		while(cur1 != null) {
			if(cur1 == node) {
				break;
			}
			pre1 = cur1;
			cur1 = cur1.mnext;
		}
		if(pre1 == null) {
			this.moves = cur1.mnext;
		} else {
			pre1.mnext = cur1.mnext;
		}
		cur1.mnext = null;
		node.moved = false;
	}
	var pre2 = null;
	var cur2 = this.pairs;
	while(cur2 != null) {
		var nxt = cur2.next;
		if(cur2.n1 == node || cur2.n2 == node) {
			if(pre2 == null) {
				this.pairs = nxt;
			} else {
				pre2.next = nxt;
			}
			if(cur2.arb != null) {
				cur2.arb.pair = null;
			}
			cur2.arb = null;
			cur2.n1.shape.pairs.remove(cur2);
			cur2.n2.shape.pairs.remove(cur2);
			var o = cur2;
			o.n1 = o.n2 = null;
			o.sleeping = false;
			o.next = ZPP_AABBPair.zpp_pool;
			ZPP_AABBPair.zpp_pool = o;
			cur2 = nxt;
			continue;
		}
		pre2 = cur2;
		cur2 = nxt;
	}
	while(shape.pairs.head != null) {
		var cur3 = shape.pairs.pop_unsafe();
		if(cur3.n1 == node) {
			cur3.n2.shape.pairs.remove(cur3);
		} else {
			cur3.n1.shape.pairs.remove(cur3);
		}
		if(cur3.arb != null) {
			cur3.arb.pair = null;
		}
		cur3.arb = null;
		cur3.n1 = cur3.n2 = null;
		cur3.sleeping = false;
		cur3.next = ZPP_AABBPair.zpp_pool;
		ZPP_AABBPair.zpp_pool = cur3;
	}
	node.height = -1;
	var o1 = node.aabb;
	if(o1.outer != null) {
		o1.outer.zpp_inner = null;
		o1.outer = null;
	}
	o1.wrap_min = o1.wrap_max = null;
	o1._invalidate = null;
	o1._validate = null;
	o1.next = ZPP_AABB.zpp_pool;
	ZPP_AABB.zpp_pool = o1;
	node.child1 = node.child2 = node.parent = null;
	node.next = null;
	node.snext = null;
	node.mnext = null;
	node.next = ZPP_AABBNode.zpp_pool;
	ZPP_AABBNode.zpp_pool = node;
};
ZPP_DynAABBPhase.prototype.__sync = function(shape) {
	var node = shape.node;
	if(!node.synced) {
		if(!this.space.continuous) {
			if(shape.zip_aabb) {
				if(shape.body != null) {
					shape.zip_aabb = false;
					if(shape.type == 0) {
						var _this = shape.circle;
						if(_this.zip_worldCOM) {
							if(_this.body != null) {
								_this.zip_worldCOM = false;
								if(_this.zip_localCOM) {
									_this.zip_localCOM = false;
									if(_this.type == 1) {
										var _this1 = _this.polygon;
										if(_this1.lverts.next == null) {
											throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
										}
										if(_this1.lverts.next.next == null) {
											_this1.localCOMx = _this1.lverts.next.x;
											_this1.localCOMy = _this1.lverts.next.y;
										} else if(_this1.lverts.next.next.next == null) {
											_this1.localCOMx = _this1.lverts.next.x;
											_this1.localCOMy = _this1.lverts.next.y;
											_this1.localCOMx += _this1.lverts.next.next.x;
											_this1.localCOMy += _this1.lverts.next.next.y;
											_this1.localCOMx *= 0.5;
											_this1.localCOMy *= 0.5;
										} else {
											_this1.localCOMx = 0;
											_this1.localCOMy = 0;
											var area = 0.0;
											var cx_ite = _this1.lverts.next;
											var u = cx_ite;
											cx_ite = cx_ite.next;
											var v = cx_ite;
											cx_ite = cx_ite.next;
											while(cx_ite != null) {
												var w = cx_ite;
												area += v.x * (w.y - u.y);
												var cf = w.y * v.x - w.x * v.y;
												_this1.localCOMx += (v.x + w.x) * cf;
												_this1.localCOMy += (v.y + w.y) * cf;
												u = v;
												v = w;
												cx_ite = cx_ite.next;
											}
											cx_ite = _this1.lverts.next;
											var w1 = cx_ite;
											area += v.x * (w1.y - u.y);
											var cf1 = w1.y * v.x - w1.x * v.y;
											_this1.localCOMx += (v.x + w1.x) * cf1;
											_this1.localCOMy += (v.y + w1.y) * cf1;
											u = v;
											cx_ite = cx_ite.next;
											var w2 = cx_ite;
											area += w1.x * (w2.y - u.y);
											var cf2 = w2.y * w1.x - w2.x * w1.y;
											_this1.localCOMx += (w1.x + w2.x) * cf2;
											_this1.localCOMy += (w1.y + w2.y) * cf2;
											area = 1 / (3 * area);
											var t = area;
											_this1.localCOMx *= t;
											_this1.localCOMy *= t;
										}
									}
									if(_this.wrap_localCOM != null) {
										_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
										_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
									}
								}
								var _this2 = _this.body;
								if(_this2.zip_axis) {
									_this2.zip_axis = false;
									_this2.axisx = Math.sin(_this2.rot);
									_this2.axisy = Math.cos(_this2.rot);
								}
								_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
								_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
							}
						}
						var rx = _this.radius;
						var ry = _this.radius;
						_this.aabb.minx = _this.worldCOMx - rx;
						_this.aabb.miny = _this.worldCOMy - ry;
						_this.aabb.maxx = _this.worldCOMx + rx;
						_this.aabb.maxy = _this.worldCOMy + ry;
					} else {
						var _this3 = shape.polygon;
						if(_this3.zip_gverts) {
							if(_this3.body != null) {
								_this3.zip_gverts = false;
								_this3.validate_lverts();
								var _this4 = _this3.body;
								if(_this4.zip_axis) {
									_this4.zip_axis = false;
									_this4.axisx = Math.sin(_this4.rot);
									_this4.axisy = Math.cos(_this4.rot);
								}
								var li = _this3.lverts.next;
								var cx_ite1 = _this3.gverts.next;
								while(cx_ite1 != null) {
									var g = cx_ite1;
									var l = li;
									li = li.next;
									g.x = _this3.body.posx + (_this3.body.axisy * l.x - _this3.body.axisx * l.y);
									g.y = _this3.body.posy + (l.x * _this3.body.axisx + l.y * _this3.body.axisy);
									cx_ite1 = cx_ite1.next;
								}
							}
						}
						if(_this3.lverts.next == null) {
							throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful bounds");
						}
						var p0 = _this3.gverts.next;
						_this3.aabb.minx = p0.x;
						_this3.aabb.miny = p0.y;
						_this3.aabb.maxx = p0.x;
						_this3.aabb.maxy = p0.y;
						var cx_ite2 = _this3.gverts.next.next;
						while(cx_ite2 != null) {
							var p = cx_ite2;
							if(p.x < _this3.aabb.minx) {
								_this3.aabb.minx = p.x;
							}
							if(p.x > _this3.aabb.maxx) {
								_this3.aabb.maxx = p.x;
							}
							if(p.y < _this3.aabb.miny) {
								_this3.aabb.miny = p.y;
							}
							if(p.y > _this3.aabb.maxy) {
								_this3.aabb.maxy = p.y;
							}
							cx_ite2 = cx_ite2.next;
						}
					}
				}
			}
		}
		var sync;
		if(node.dyn == (shape.body.type == 1?false:!shape.body.component.sleeping)) {
			var _this5 = node.aabb;
			var x = shape.aabb;
			sync = !(x.minx >= _this5.minx && x.miny >= _this5.miny && x.maxx <= _this5.maxx && x.maxy <= _this5.maxy);
		} else {
			sync = true;
		}
		if(sync) {
			node.synced = true;
			node.snext = this.syncs;
			this.syncs = node;
		}
	}
};
ZPP_DynAABBPhase.prototype.sync_broadphase = function() {
	this.space.validation();
	if(this.syncs != null) {
		if(this.moves == null) {
			var node = this.syncs;
			while(node != null) {
				var shape = node.shape;
				if(!node.first_sync) {
					var tree = node.dyn?this.dtree:this.stree;
					if(node == tree.root) {
						tree.root = null;
					} else {
						var parent = node.parent;
						var gparent = parent.parent;
						var sibling = parent.child1 == node?parent.child2:parent.child1;
						if(gparent != null) {
							if(gparent.child1 == parent) {
								gparent.child1 = sibling;
							} else {
								gparent.child2 = sibling;
							}
							sibling.parent = gparent;
							parent.height = -1;
							var o = parent.aabb;
							if(o.outer != null) {
								o.outer.zpp_inner = null;
								o.outer = null;
							}
							o.wrap_min = o.wrap_max = null;
							o._invalidate = null;
							o._validate = null;
							o.next = ZPP_AABB.zpp_pool;
							ZPP_AABB.zpp_pool = o;
							parent.child1 = parent.child2 = parent.parent = null;
							parent.next = null;
							parent.snext = null;
							parent.mnext = null;
							parent.next = ZPP_AABBNode.zpp_pool;
							ZPP_AABBNode.zpp_pool = parent;
							var node1 = gparent;
							while(node1 != null) {
								if(node1.child1 == null || node1.height < 2) {
									node1 = node1;
								} else {
									var b = node1.child1;
									var c = node1.child2;
									var balance = c.height - b.height;
									if(balance > 1) {
										var f = c.child1;
										var g = c.child2;
										c.child1 = node1;
										c.parent = node1.parent;
										node1.parent = c;
										if(c.parent != null) {
											if(c.parent.child1 == node1) {
												c.parent.child1 = c;
											} else {
												c.parent.child2 = c;
											}
										} else {
											tree.root = c;
										}
										if(f.height > g.height) {
											c.child2 = f;
											node1.child2 = g;
											g.parent = node1;
											var _this = node1.aabb;
											var a = b.aabb;
											var b1 = g.aabb;
											_this.minx = a.minx < b1.minx?a.minx:b1.minx;
											_this.miny = a.miny < b1.miny?a.miny:b1.miny;
											_this.maxx = a.maxx > b1.maxx?a.maxx:b1.maxx;
											_this.maxy = a.maxy > b1.maxy?a.maxy:b1.maxy;
											var _this1 = c.aabb;
											var a1 = node1.aabb;
											var b2 = f.aabb;
											_this1.minx = a1.minx < b2.minx?a1.minx:b2.minx;
											_this1.miny = a1.miny < b2.miny?a1.miny:b2.miny;
											_this1.maxx = a1.maxx > b2.maxx?a1.maxx:b2.maxx;
											_this1.maxy = a1.maxy > b2.maxy?a1.maxy:b2.maxy;
											var x = b.height;
											var y = g.height;
											node1.height = 1 + (x > y?x:y);
											var x1 = node1.height;
											var y1 = f.height;
											c.height = 1 + (x1 > y1?x1:y1);
										} else {
											c.child2 = g;
											node1.child2 = f;
											f.parent = node1;
											var _this2 = node1.aabb;
											var a2 = b.aabb;
											var b3 = f.aabb;
											_this2.minx = a2.minx < b3.minx?a2.minx:b3.minx;
											_this2.miny = a2.miny < b3.miny?a2.miny:b3.miny;
											_this2.maxx = a2.maxx > b3.maxx?a2.maxx:b3.maxx;
											_this2.maxy = a2.maxy > b3.maxy?a2.maxy:b3.maxy;
											var _this3 = c.aabb;
											var a3 = node1.aabb;
											var b4 = g.aabb;
											_this3.minx = a3.minx < b4.minx?a3.minx:b4.minx;
											_this3.miny = a3.miny < b4.miny?a3.miny:b4.miny;
											_this3.maxx = a3.maxx > b4.maxx?a3.maxx:b4.maxx;
											_this3.maxy = a3.maxy > b4.maxy?a3.maxy:b4.maxy;
											var x2 = b.height;
											var y2 = f.height;
											node1.height = 1 + (x2 > y2?x2:y2);
											var x3 = node1.height;
											var y3 = g.height;
											c.height = 1 + (x3 > y3?x3:y3);
										}
										node1 = c;
									} else if(balance < -1) {
										var f1 = b.child1;
										var g1 = b.child2;
										b.child1 = node1;
										b.parent = node1.parent;
										node1.parent = b;
										if(b.parent != null) {
											if(b.parent.child1 == node1) {
												b.parent.child1 = b;
											} else {
												b.parent.child2 = b;
											}
										} else {
											tree.root = b;
										}
										if(f1.height > g1.height) {
											b.child2 = f1;
											node1.child1 = g1;
											g1.parent = node1;
											var _this4 = node1.aabb;
											var a4 = c.aabb;
											var b5 = g1.aabb;
											_this4.minx = a4.minx < b5.minx?a4.minx:b5.minx;
											_this4.miny = a4.miny < b5.miny?a4.miny:b5.miny;
											_this4.maxx = a4.maxx > b5.maxx?a4.maxx:b5.maxx;
											_this4.maxy = a4.maxy > b5.maxy?a4.maxy:b5.maxy;
											var _this5 = b.aabb;
											var a5 = node1.aabb;
											var b6 = f1.aabb;
											_this5.minx = a5.minx < b6.minx?a5.minx:b6.minx;
											_this5.miny = a5.miny < b6.miny?a5.miny:b6.miny;
											_this5.maxx = a5.maxx > b6.maxx?a5.maxx:b6.maxx;
											_this5.maxy = a5.maxy > b6.maxy?a5.maxy:b6.maxy;
											var x4 = c.height;
											var y4 = g1.height;
											node1.height = 1 + (x4 > y4?x4:y4);
											var x5 = node1.height;
											var y5 = f1.height;
											b.height = 1 + (x5 > y5?x5:y5);
										} else {
											b.child2 = g1;
											node1.child1 = f1;
											f1.parent = node1;
											var _this6 = node1.aabb;
											var a6 = c.aabb;
											var b7 = f1.aabb;
											_this6.minx = a6.minx < b7.minx?a6.minx:b7.minx;
											_this6.miny = a6.miny < b7.miny?a6.miny:b7.miny;
											_this6.maxx = a6.maxx > b7.maxx?a6.maxx:b7.maxx;
											_this6.maxy = a6.maxy > b7.maxy?a6.maxy:b7.maxy;
											var _this7 = b.aabb;
											var a7 = node1.aabb;
											var b8 = g1.aabb;
											_this7.minx = a7.minx < b8.minx?a7.minx:b8.minx;
											_this7.miny = a7.miny < b8.miny?a7.miny:b8.miny;
											_this7.maxx = a7.maxx > b8.maxx?a7.maxx:b8.maxx;
											_this7.maxy = a7.maxy > b8.maxy?a7.maxy:b8.maxy;
											var x6 = c.height;
											var y6 = f1.height;
											node1.height = 1 + (x6 > y6?x6:y6);
											var x7 = node1.height;
											var y7 = g1.height;
											b.height = 1 + (x7 > y7?x7:y7);
										}
										node1 = b;
									} else {
										node1 = node1;
									}
								}
								var child1 = node1.child1;
								var child2 = node1.child2;
								var _this8 = node1.aabb;
								var a8 = child1.aabb;
								var b9 = child2.aabb;
								_this8.minx = a8.minx < b9.minx?a8.minx:b9.minx;
								_this8.miny = a8.miny < b9.miny?a8.miny:b9.miny;
								_this8.maxx = a8.maxx > b9.maxx?a8.maxx:b9.maxx;
								_this8.maxy = a8.maxy > b9.maxy?a8.maxy:b9.maxy;
								var x8 = child1.height;
								var y8 = child2.height;
								node1.height = 1 + (x8 > y8?x8:y8);
								node1 = node1.parent;
							}
						} else {
							tree.root = sibling;
							sibling.parent = null;
							parent.height = -1;
							var o1 = parent.aabb;
							if(o1.outer != null) {
								o1.outer.zpp_inner = null;
								o1.outer = null;
							}
							o1.wrap_min = o1.wrap_max = null;
							o1._invalidate = null;
							o1._validate = null;
							o1.next = ZPP_AABB.zpp_pool;
							ZPP_AABB.zpp_pool = o1;
							parent.child1 = parent.child2 = parent.parent = null;
							parent.next = null;
							parent.snext = null;
							parent.mnext = null;
							parent.next = ZPP_AABBNode.zpp_pool;
							ZPP_AABBNode.zpp_pool = parent;
						}
					}
				} else {
					node.first_sync = false;
				}
				var aabb = node.aabb;
				if(!this.space.continuous) {
					if(shape.zip_aabb) {
						if(shape.body != null) {
							shape.zip_aabb = false;
							if(shape.type == 0) {
								var _this9 = shape.circle;
								if(_this9.zip_worldCOM) {
									if(_this9.body != null) {
										_this9.zip_worldCOM = false;
										if(_this9.zip_localCOM) {
											_this9.zip_localCOM = false;
											if(_this9.type == 1) {
												var _this10 = _this9.polygon;
												if(_this10.lverts.next == null) {
													throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
												}
												if(_this10.lverts.next.next == null) {
													_this10.localCOMx = _this10.lverts.next.x;
													_this10.localCOMy = _this10.lverts.next.y;
												} else if(_this10.lverts.next.next.next == null) {
													_this10.localCOMx = _this10.lverts.next.x;
													_this10.localCOMy = _this10.lverts.next.y;
													_this10.localCOMx += _this10.lverts.next.next.x;
													_this10.localCOMy += _this10.lverts.next.next.y;
													_this10.localCOMx *= 0.5;
													_this10.localCOMy *= 0.5;
												} else {
													_this10.localCOMx = 0;
													_this10.localCOMy = 0;
													var area = 0.0;
													var cx_ite = _this10.lverts.next;
													var u = cx_ite;
													cx_ite = cx_ite.next;
													var v = cx_ite;
													cx_ite = cx_ite.next;
													while(cx_ite != null) {
														var w = cx_ite;
														area += v.x * (w.y - u.y);
														var cf = w.y * v.x - w.x * v.y;
														_this10.localCOMx += (v.x + w.x) * cf;
														_this10.localCOMy += (v.y + w.y) * cf;
														u = v;
														v = w;
														cx_ite = cx_ite.next;
													}
													cx_ite = _this10.lverts.next;
													var w1 = cx_ite;
													area += v.x * (w1.y - u.y);
													var cf1 = w1.y * v.x - w1.x * v.y;
													_this10.localCOMx += (v.x + w1.x) * cf1;
													_this10.localCOMy += (v.y + w1.y) * cf1;
													u = v;
													cx_ite = cx_ite.next;
													var w2 = cx_ite;
													area += w1.x * (w2.y - u.y);
													var cf2 = w2.y * w1.x - w2.x * w1.y;
													_this10.localCOMx += (w1.x + w2.x) * cf2;
													_this10.localCOMy += (w1.y + w2.y) * cf2;
													area = 1 / (3 * area);
													var t = area;
													_this10.localCOMx *= t;
													_this10.localCOMy *= t;
												}
											}
											if(_this9.wrap_localCOM != null) {
												_this9.wrap_localCOM.zpp_inner.x = _this9.localCOMx;
												_this9.wrap_localCOM.zpp_inner.y = _this9.localCOMy;
											}
										}
										var _this11 = _this9.body;
										if(_this11.zip_axis) {
											_this11.zip_axis = false;
											_this11.axisx = Math.sin(_this11.rot);
											_this11.axisy = Math.cos(_this11.rot);
										}
										_this9.worldCOMx = _this9.body.posx + (_this9.body.axisy * _this9.localCOMx - _this9.body.axisx * _this9.localCOMy);
										_this9.worldCOMy = _this9.body.posy + (_this9.localCOMx * _this9.body.axisx + _this9.localCOMy * _this9.body.axisy);
									}
								}
								var rx = _this9.radius;
								var ry = _this9.radius;
								_this9.aabb.minx = _this9.worldCOMx - rx;
								_this9.aabb.miny = _this9.worldCOMy - ry;
								_this9.aabb.maxx = _this9.worldCOMx + rx;
								_this9.aabb.maxy = _this9.worldCOMy + ry;
							} else {
								var _this12 = shape.polygon;
								if(_this12.zip_gverts) {
									if(_this12.body != null) {
										_this12.zip_gverts = false;
										_this12.validate_lverts();
										var _this13 = _this12.body;
										if(_this13.zip_axis) {
											_this13.zip_axis = false;
											_this13.axisx = Math.sin(_this13.rot);
											_this13.axisy = Math.cos(_this13.rot);
										}
										var li = _this12.lverts.next;
										var cx_ite1 = _this12.gverts.next;
										while(cx_ite1 != null) {
											var g2 = cx_ite1;
											var l = li;
											li = li.next;
											g2.x = _this12.body.posx + (_this12.body.axisy * l.x - _this12.body.axisx * l.y);
											g2.y = _this12.body.posy + (l.x * _this12.body.axisx + l.y * _this12.body.axisy);
											cx_ite1 = cx_ite1.next;
										}
									}
								}
								if(_this12.lverts.next == null) {
									throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful bounds");
								}
								var p0 = _this12.gverts.next;
								_this12.aabb.minx = p0.x;
								_this12.aabb.miny = p0.y;
								_this12.aabb.maxx = p0.x;
								_this12.aabb.maxy = p0.y;
								var cx_ite2 = _this12.gverts.next.next;
								while(cx_ite2 != null) {
									var p = cx_ite2;
									if(p.x < _this12.aabb.minx) {
										_this12.aabb.minx = p.x;
									}
									if(p.x > _this12.aabb.maxx) {
										_this12.aabb.maxx = p.x;
									}
									if(p.y < _this12.aabb.miny) {
										_this12.aabb.miny = p.y;
									}
									if(p.y > _this12.aabb.maxy) {
										_this12.aabb.maxy = p.y;
									}
									cx_ite2 = cx_ite2.next;
								}
							}
						}
					}
				}
				var a9 = shape.aabb;
				aabb.minx = a9.minx - 3.0;
				aabb.miny = a9.miny - 3.0;
				aabb.maxx = a9.maxx + 3.0;
				aabb.maxy = a9.maxy + 3.0;
				var tree1 = (node.dyn = shape.body.type == 1?false:!shape.body.component.sleeping)?this.dtree:this.stree;
				if(tree1.root == null) {
					tree1.root = node;
					tree1.root.parent = null;
				} else {
					var leafaabb = node.aabb;
					var node2 = tree1.root;
					while(node2.child1 != null) {
						var child11 = node2.child1;
						var child21 = node2.child2;
						var _this14 = node2.aabb;
						var area1 = (_this14.maxx - _this14.minx + (_this14.maxy - _this14.miny)) * 2;
						var _this15 = ZPP_AABBTree.tmpaabb;
						var a10 = node2.aabb;
						_this15.minx = a10.minx < leafaabb.minx?a10.minx:leafaabb.minx;
						_this15.miny = a10.miny < leafaabb.miny?a10.miny:leafaabb.miny;
						_this15.maxx = a10.maxx > leafaabb.maxx?a10.maxx:leafaabb.maxx;
						_this15.maxy = a10.maxy > leafaabb.maxy?a10.maxy:leafaabb.maxy;
						var _this16 = ZPP_AABBTree.tmpaabb;
						var carea = (_this16.maxx - _this16.minx + (_this16.maxy - _this16.miny)) * 2;
						var cost = 2 * carea;
						var icost = 2 * (carea - area1);
						var _this17 = ZPP_AABBTree.tmpaabb;
						var b10 = child11.aabb;
						_this17.minx = leafaabb.minx < b10.minx?leafaabb.minx:b10.minx;
						_this17.miny = leafaabb.miny < b10.miny?leafaabb.miny:b10.miny;
						_this17.maxx = leafaabb.maxx > b10.maxx?leafaabb.maxx:b10.maxx;
						_this17.maxy = leafaabb.maxy > b10.maxy?leafaabb.maxy:b10.maxy;
						var cost1;
						if(child11.child1 == null) {
							var _this18 = ZPP_AABBTree.tmpaabb;
							cost1 = (_this18.maxx - _this18.minx + (_this18.maxy - _this18.miny)) * 2 + icost;
						} else {
							var _this19 = child11.aabb;
							var oarea = (_this19.maxx - _this19.minx + (_this19.maxy - _this19.miny)) * 2;
							var _this20 = ZPP_AABBTree.tmpaabb;
							cost1 = (_this20.maxx - _this20.minx + (_this20.maxy - _this20.miny)) * 2 - oarea + icost;
						}
						var _this21 = ZPP_AABBTree.tmpaabb;
						var b11 = child21.aabb;
						_this21.minx = leafaabb.minx < b11.minx?leafaabb.minx:b11.minx;
						_this21.miny = leafaabb.miny < b11.miny?leafaabb.miny:b11.miny;
						_this21.maxx = leafaabb.maxx > b11.maxx?leafaabb.maxx:b11.maxx;
						_this21.maxy = leafaabb.maxy > b11.maxy?leafaabb.maxy:b11.maxy;
						var cost2;
						if(child21.child1 == null) {
							var _this22 = ZPP_AABBTree.tmpaabb;
							cost2 = (_this22.maxx - _this22.minx + (_this22.maxy - _this22.miny)) * 2 + icost;
						} else {
							var _this23 = child21.aabb;
							var oarea1 = (_this23.maxx - _this23.minx + (_this23.maxy - _this23.miny)) * 2;
							var _this24 = ZPP_AABBTree.tmpaabb;
							cost2 = (_this24.maxx - _this24.minx + (_this24.maxy - _this24.miny)) * 2 - oarea1 + icost;
						}
						if(cost < cost1 && cost < cost2) {
							break;
						} else if(cost1 < cost2) {
							node2 = child11;
						} else {
							node2 = child21;
						}
					}
					var sibling1 = node2;
					var oparent = sibling1.parent;
					var nparent;
					if(ZPP_AABBNode.zpp_pool == null) {
						nparent = new ZPP_AABBNode();
					} else {
						nparent = ZPP_AABBNode.zpp_pool;
						ZPP_AABBNode.zpp_pool = nparent.next;
						nparent.next = null;
					}
					if(ZPP_AABB.zpp_pool == null) {
						nparent.aabb = new ZPP_AABB();
					} else {
						nparent.aabb = ZPP_AABB.zpp_pool;
						ZPP_AABB.zpp_pool = nparent.aabb.next;
						nparent.aabb.next = null;
					}
					nparent.moved = false;
					nparent.synced = false;
					nparent.first_sync = false;
					nparent.parent = oparent;
					var _this25 = nparent.aabb;
					var b12 = sibling1.aabb;
					_this25.minx = leafaabb.minx < b12.minx?leafaabb.minx:b12.minx;
					_this25.miny = leafaabb.miny < b12.miny?leafaabb.miny:b12.miny;
					_this25.maxx = leafaabb.maxx > b12.maxx?leafaabb.maxx:b12.maxx;
					_this25.maxy = leafaabb.maxy > b12.maxy?leafaabb.maxy:b12.maxy;
					nparent.height = sibling1.height + 1;
					if(oparent != null) {
						if(oparent.child1 == sibling1) {
							oparent.child1 = nparent;
						} else {
							oparent.child2 = nparent;
						}
						nparent.child1 = sibling1;
						nparent.child2 = node;
						sibling1.parent = nparent;
						node.parent = nparent;
					} else {
						nparent.child1 = sibling1;
						nparent.child2 = node;
						sibling1.parent = nparent;
						node.parent = nparent;
						tree1.root = nparent;
					}
					node2 = node.parent;
					while(node2 != null) {
						if(node2.child1 == null || node2.height < 2) {
							node2 = node2;
						} else {
							var b13 = node2.child1;
							var c1 = node2.child2;
							var balance1 = c1.height - b13.height;
							if(balance1 > 1) {
								var f2 = c1.child1;
								var g3 = c1.child2;
								c1.child1 = node2;
								c1.parent = node2.parent;
								node2.parent = c1;
								if(c1.parent != null) {
									if(c1.parent.child1 == node2) {
										c1.parent.child1 = c1;
									} else {
										c1.parent.child2 = c1;
									}
								} else {
									tree1.root = c1;
								}
								if(f2.height > g3.height) {
									c1.child2 = f2;
									node2.child2 = g3;
									g3.parent = node2;
									var _this26 = node2.aabb;
									var a11 = b13.aabb;
									var b14 = g3.aabb;
									_this26.minx = a11.minx < b14.minx?a11.minx:b14.minx;
									_this26.miny = a11.miny < b14.miny?a11.miny:b14.miny;
									_this26.maxx = a11.maxx > b14.maxx?a11.maxx:b14.maxx;
									_this26.maxy = a11.maxy > b14.maxy?a11.maxy:b14.maxy;
									var _this27 = c1.aabb;
									var a12 = node2.aabb;
									var b15 = f2.aabb;
									_this27.minx = a12.minx < b15.minx?a12.minx:b15.minx;
									_this27.miny = a12.miny < b15.miny?a12.miny:b15.miny;
									_this27.maxx = a12.maxx > b15.maxx?a12.maxx:b15.maxx;
									_this27.maxy = a12.maxy > b15.maxy?a12.maxy:b15.maxy;
									var x9 = b13.height;
									var y9 = g3.height;
									node2.height = 1 + (x9 > y9?x9:y9);
									var x10 = node2.height;
									var y10 = f2.height;
									c1.height = 1 + (x10 > y10?x10:y10);
								} else {
									c1.child2 = g3;
									node2.child2 = f2;
									f2.parent = node2;
									var _this28 = node2.aabb;
									var a13 = b13.aabb;
									var b16 = f2.aabb;
									_this28.minx = a13.minx < b16.minx?a13.minx:b16.minx;
									_this28.miny = a13.miny < b16.miny?a13.miny:b16.miny;
									_this28.maxx = a13.maxx > b16.maxx?a13.maxx:b16.maxx;
									_this28.maxy = a13.maxy > b16.maxy?a13.maxy:b16.maxy;
									var _this29 = c1.aabb;
									var a14 = node2.aabb;
									var b17 = g3.aabb;
									_this29.minx = a14.minx < b17.minx?a14.minx:b17.minx;
									_this29.miny = a14.miny < b17.miny?a14.miny:b17.miny;
									_this29.maxx = a14.maxx > b17.maxx?a14.maxx:b17.maxx;
									_this29.maxy = a14.maxy > b17.maxy?a14.maxy:b17.maxy;
									var x11 = b13.height;
									var y11 = f2.height;
									node2.height = 1 + (x11 > y11?x11:y11);
									var x12 = node2.height;
									var y12 = g3.height;
									c1.height = 1 + (x12 > y12?x12:y12);
								}
								node2 = c1;
							} else if(balance1 < -1) {
								var f3 = b13.child1;
								var g4 = b13.child2;
								b13.child1 = node2;
								b13.parent = node2.parent;
								node2.parent = b13;
								if(b13.parent != null) {
									if(b13.parent.child1 == node2) {
										b13.parent.child1 = b13;
									} else {
										b13.parent.child2 = b13;
									}
								} else {
									tree1.root = b13;
								}
								if(f3.height > g4.height) {
									b13.child2 = f3;
									node2.child1 = g4;
									g4.parent = node2;
									var _this30 = node2.aabb;
									var a15 = c1.aabb;
									var b18 = g4.aabb;
									_this30.minx = a15.minx < b18.minx?a15.minx:b18.minx;
									_this30.miny = a15.miny < b18.miny?a15.miny:b18.miny;
									_this30.maxx = a15.maxx > b18.maxx?a15.maxx:b18.maxx;
									_this30.maxy = a15.maxy > b18.maxy?a15.maxy:b18.maxy;
									var _this31 = b13.aabb;
									var a16 = node2.aabb;
									var b19 = f3.aabb;
									_this31.minx = a16.minx < b19.minx?a16.minx:b19.minx;
									_this31.miny = a16.miny < b19.miny?a16.miny:b19.miny;
									_this31.maxx = a16.maxx > b19.maxx?a16.maxx:b19.maxx;
									_this31.maxy = a16.maxy > b19.maxy?a16.maxy:b19.maxy;
									var x13 = c1.height;
									var y13 = g4.height;
									node2.height = 1 + (x13 > y13?x13:y13);
									var x14 = node2.height;
									var y14 = f3.height;
									b13.height = 1 + (x14 > y14?x14:y14);
								} else {
									b13.child2 = g4;
									node2.child1 = f3;
									f3.parent = node2;
									var _this32 = node2.aabb;
									var a17 = c1.aabb;
									var b20 = f3.aabb;
									_this32.minx = a17.minx < b20.minx?a17.minx:b20.minx;
									_this32.miny = a17.miny < b20.miny?a17.miny:b20.miny;
									_this32.maxx = a17.maxx > b20.maxx?a17.maxx:b20.maxx;
									_this32.maxy = a17.maxy > b20.maxy?a17.maxy:b20.maxy;
									var _this33 = b13.aabb;
									var a18 = node2.aabb;
									var b21 = g4.aabb;
									_this33.minx = a18.minx < b21.minx?a18.minx:b21.minx;
									_this33.miny = a18.miny < b21.miny?a18.miny:b21.miny;
									_this33.maxx = a18.maxx > b21.maxx?a18.maxx:b21.maxx;
									_this33.maxy = a18.maxy > b21.maxy?a18.maxy:b21.maxy;
									var x15 = c1.height;
									var y15 = f3.height;
									node2.height = 1 + (x15 > y15?x15:y15);
									var x16 = node2.height;
									var y16 = g4.height;
									b13.height = 1 + (x16 > y16?x16:y16);
								}
								node2 = b13;
							} else {
								node2 = node2;
							}
						}
						var child12 = node2.child1;
						var child22 = node2.child2;
						var x17 = child12.height;
						var y17 = child22.height;
						node2.height = 1 + (x17 > y17?x17:y17);
						var _this34 = node2.aabb;
						var a19 = child12.aabb;
						var b22 = child22.aabb;
						_this34.minx = a19.minx < b22.minx?a19.minx:b22.minx;
						_this34.miny = a19.miny < b22.miny?a19.miny:b22.miny;
						_this34.maxx = a19.maxx > b22.maxx?a19.maxx:b22.maxx;
						_this34.maxy = a19.maxy > b22.maxy?a19.maxy:b22.maxy;
						node2 = node2.parent;
					}
				}
				node.synced = false;
				node.moved = true;
				node.mnext = node.snext;
				node.snext = null;
				node = node.mnext;
			}
			var t1 = this.syncs;
			this.syncs = this.moves;
			this.moves = t1;
		} else {
			while(this.syncs != null) {
				var ret = this.syncs;
				this.syncs = ret.snext;
				ret.snext = null;
				var shape1 = ret.shape;
				if(!ret.first_sync) {
					var tree2 = ret.dyn?this.dtree:this.stree;
					if(ret == tree2.root) {
						tree2.root = null;
					} else {
						var parent1 = ret.parent;
						var gparent1 = parent1.parent;
						var sibling2 = parent1.child1 == ret?parent1.child2:parent1.child1;
						if(gparent1 != null) {
							if(gparent1.child1 == parent1) {
								gparent1.child1 = sibling2;
							} else {
								gparent1.child2 = sibling2;
							}
							sibling2.parent = gparent1;
							parent1.height = -1;
							var o2 = parent1.aabb;
							if(o2.outer != null) {
								o2.outer.zpp_inner = null;
								o2.outer = null;
							}
							o2.wrap_min = o2.wrap_max = null;
							o2._invalidate = null;
							o2._validate = null;
							o2.next = ZPP_AABB.zpp_pool;
							ZPP_AABB.zpp_pool = o2;
							parent1.child1 = parent1.child2 = parent1.parent = null;
							parent1.next = null;
							parent1.snext = null;
							parent1.mnext = null;
							parent1.next = ZPP_AABBNode.zpp_pool;
							ZPP_AABBNode.zpp_pool = parent1;
							var node3 = gparent1;
							while(node3 != null) {
								if(node3.child1 == null || node3.height < 2) {
									node3 = node3;
								} else {
									var b23 = node3.child1;
									var c2 = node3.child2;
									var balance2 = c2.height - b23.height;
									if(balance2 > 1) {
										var f4 = c2.child1;
										var g5 = c2.child2;
										c2.child1 = node3;
										c2.parent = node3.parent;
										node3.parent = c2;
										if(c2.parent != null) {
											if(c2.parent.child1 == node3) {
												c2.parent.child1 = c2;
											} else {
												c2.parent.child2 = c2;
											}
										} else {
											tree2.root = c2;
										}
										if(f4.height > g5.height) {
											c2.child2 = f4;
											node3.child2 = g5;
											g5.parent = node3;
											var _this35 = node3.aabb;
											var a20 = b23.aabb;
											var b24 = g5.aabb;
											_this35.minx = a20.minx < b24.minx?a20.minx:b24.minx;
											_this35.miny = a20.miny < b24.miny?a20.miny:b24.miny;
											_this35.maxx = a20.maxx > b24.maxx?a20.maxx:b24.maxx;
											_this35.maxy = a20.maxy > b24.maxy?a20.maxy:b24.maxy;
											var _this36 = c2.aabb;
											var a21 = node3.aabb;
											var b25 = f4.aabb;
											_this36.minx = a21.minx < b25.minx?a21.minx:b25.minx;
											_this36.miny = a21.miny < b25.miny?a21.miny:b25.miny;
											_this36.maxx = a21.maxx > b25.maxx?a21.maxx:b25.maxx;
											_this36.maxy = a21.maxy > b25.maxy?a21.maxy:b25.maxy;
											var x18 = b23.height;
											var y18 = g5.height;
											node3.height = 1 + (x18 > y18?x18:y18);
											var x19 = node3.height;
											var y19 = f4.height;
											c2.height = 1 + (x19 > y19?x19:y19);
										} else {
											c2.child2 = g5;
											node3.child2 = f4;
											f4.parent = node3;
											var _this37 = node3.aabb;
											var a22 = b23.aabb;
											var b26 = f4.aabb;
											_this37.minx = a22.minx < b26.minx?a22.minx:b26.minx;
											_this37.miny = a22.miny < b26.miny?a22.miny:b26.miny;
											_this37.maxx = a22.maxx > b26.maxx?a22.maxx:b26.maxx;
											_this37.maxy = a22.maxy > b26.maxy?a22.maxy:b26.maxy;
											var _this38 = c2.aabb;
											var a23 = node3.aabb;
											var b27 = g5.aabb;
											_this38.minx = a23.minx < b27.minx?a23.minx:b27.minx;
											_this38.miny = a23.miny < b27.miny?a23.miny:b27.miny;
											_this38.maxx = a23.maxx > b27.maxx?a23.maxx:b27.maxx;
											_this38.maxy = a23.maxy > b27.maxy?a23.maxy:b27.maxy;
											var x20 = b23.height;
											var y20 = f4.height;
											node3.height = 1 + (x20 > y20?x20:y20);
											var x21 = node3.height;
											var y21 = g5.height;
											c2.height = 1 + (x21 > y21?x21:y21);
										}
										node3 = c2;
									} else if(balance2 < -1) {
										var f5 = b23.child1;
										var g6 = b23.child2;
										b23.child1 = node3;
										b23.parent = node3.parent;
										node3.parent = b23;
										if(b23.parent != null) {
											if(b23.parent.child1 == node3) {
												b23.parent.child1 = b23;
											} else {
												b23.parent.child2 = b23;
											}
										} else {
											tree2.root = b23;
										}
										if(f5.height > g6.height) {
											b23.child2 = f5;
											node3.child1 = g6;
											g6.parent = node3;
											var _this39 = node3.aabb;
											var a24 = c2.aabb;
											var b28 = g6.aabb;
											_this39.minx = a24.minx < b28.minx?a24.minx:b28.minx;
											_this39.miny = a24.miny < b28.miny?a24.miny:b28.miny;
											_this39.maxx = a24.maxx > b28.maxx?a24.maxx:b28.maxx;
											_this39.maxy = a24.maxy > b28.maxy?a24.maxy:b28.maxy;
											var _this40 = b23.aabb;
											var a25 = node3.aabb;
											var b29 = f5.aabb;
											_this40.minx = a25.minx < b29.minx?a25.minx:b29.minx;
											_this40.miny = a25.miny < b29.miny?a25.miny:b29.miny;
											_this40.maxx = a25.maxx > b29.maxx?a25.maxx:b29.maxx;
											_this40.maxy = a25.maxy > b29.maxy?a25.maxy:b29.maxy;
											var x22 = c2.height;
											var y22 = g6.height;
											node3.height = 1 + (x22 > y22?x22:y22);
											var x23 = node3.height;
											var y23 = f5.height;
											b23.height = 1 + (x23 > y23?x23:y23);
										} else {
											b23.child2 = g6;
											node3.child1 = f5;
											f5.parent = node3;
											var _this41 = node3.aabb;
											var a26 = c2.aabb;
											var b30 = f5.aabb;
											_this41.minx = a26.minx < b30.minx?a26.minx:b30.minx;
											_this41.miny = a26.miny < b30.miny?a26.miny:b30.miny;
											_this41.maxx = a26.maxx > b30.maxx?a26.maxx:b30.maxx;
											_this41.maxy = a26.maxy > b30.maxy?a26.maxy:b30.maxy;
											var _this42 = b23.aabb;
											var a27 = node3.aabb;
											var b31 = g6.aabb;
											_this42.minx = a27.minx < b31.minx?a27.minx:b31.minx;
											_this42.miny = a27.miny < b31.miny?a27.miny:b31.miny;
											_this42.maxx = a27.maxx > b31.maxx?a27.maxx:b31.maxx;
											_this42.maxy = a27.maxy > b31.maxy?a27.maxy:b31.maxy;
											var x24 = c2.height;
											var y24 = f5.height;
											node3.height = 1 + (x24 > y24?x24:y24);
											var x25 = node3.height;
											var y25 = g6.height;
											b23.height = 1 + (x25 > y25?x25:y25);
										}
										node3 = b23;
									} else {
										node3 = node3;
									}
								}
								var child13 = node3.child1;
								var child23 = node3.child2;
								var _this43 = node3.aabb;
								var a28 = child13.aabb;
								var b32 = child23.aabb;
								_this43.minx = a28.minx < b32.minx?a28.minx:b32.minx;
								_this43.miny = a28.miny < b32.miny?a28.miny:b32.miny;
								_this43.maxx = a28.maxx > b32.maxx?a28.maxx:b32.maxx;
								_this43.maxy = a28.maxy > b32.maxy?a28.maxy:b32.maxy;
								var x26 = child13.height;
								var y26 = child23.height;
								node3.height = 1 + (x26 > y26?x26:y26);
								node3 = node3.parent;
							}
						} else {
							tree2.root = sibling2;
							sibling2.parent = null;
							parent1.height = -1;
							var o3 = parent1.aabb;
							if(o3.outer != null) {
								o3.outer.zpp_inner = null;
								o3.outer = null;
							}
							o3.wrap_min = o3.wrap_max = null;
							o3._invalidate = null;
							o3._validate = null;
							o3.next = ZPP_AABB.zpp_pool;
							ZPP_AABB.zpp_pool = o3;
							parent1.child1 = parent1.child2 = parent1.parent = null;
							parent1.next = null;
							parent1.snext = null;
							parent1.mnext = null;
							parent1.next = ZPP_AABBNode.zpp_pool;
							ZPP_AABBNode.zpp_pool = parent1;
						}
					}
				} else {
					ret.first_sync = false;
				}
				var aabb1 = ret.aabb;
				if(!this.space.continuous) {
					if(shape1.zip_aabb) {
						if(shape1.body != null) {
							shape1.zip_aabb = false;
							if(shape1.type == 0) {
								var _this44 = shape1.circle;
								if(_this44.zip_worldCOM) {
									if(_this44.body != null) {
										_this44.zip_worldCOM = false;
										if(_this44.zip_localCOM) {
											_this44.zip_localCOM = false;
											if(_this44.type == 1) {
												var _this45 = _this44.polygon;
												if(_this45.lverts.next == null) {
													throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
												}
												if(_this45.lverts.next.next == null) {
													_this45.localCOMx = _this45.lverts.next.x;
													_this45.localCOMy = _this45.lverts.next.y;
												} else if(_this45.lverts.next.next.next == null) {
													_this45.localCOMx = _this45.lverts.next.x;
													_this45.localCOMy = _this45.lverts.next.y;
													_this45.localCOMx += _this45.lverts.next.next.x;
													_this45.localCOMy += _this45.lverts.next.next.y;
													_this45.localCOMx *= 0.5;
													_this45.localCOMy *= 0.5;
												} else {
													_this45.localCOMx = 0;
													_this45.localCOMy = 0;
													var area2 = 0.0;
													var cx_ite3 = _this45.lverts.next;
													var u1 = cx_ite3;
													cx_ite3 = cx_ite3.next;
													var v1 = cx_ite3;
													cx_ite3 = cx_ite3.next;
													while(cx_ite3 != null) {
														var w3 = cx_ite3;
														area2 += v1.x * (w3.y - u1.y);
														var cf3 = w3.y * v1.x - w3.x * v1.y;
														_this45.localCOMx += (v1.x + w3.x) * cf3;
														_this45.localCOMy += (v1.y + w3.y) * cf3;
														u1 = v1;
														v1 = w3;
														cx_ite3 = cx_ite3.next;
													}
													cx_ite3 = _this45.lverts.next;
													var w4 = cx_ite3;
													area2 += v1.x * (w4.y - u1.y);
													var cf4 = w4.y * v1.x - w4.x * v1.y;
													_this45.localCOMx += (v1.x + w4.x) * cf4;
													_this45.localCOMy += (v1.y + w4.y) * cf4;
													u1 = v1;
													cx_ite3 = cx_ite3.next;
													var w5 = cx_ite3;
													area2 += w4.x * (w5.y - u1.y);
													var cf5 = w5.y * w4.x - w5.x * w4.y;
													_this45.localCOMx += (w4.x + w5.x) * cf5;
													_this45.localCOMy += (w4.y + w5.y) * cf5;
													area2 = 1 / (3 * area2);
													var t2 = area2;
													_this45.localCOMx *= t2;
													_this45.localCOMy *= t2;
												}
											}
											if(_this44.wrap_localCOM != null) {
												_this44.wrap_localCOM.zpp_inner.x = _this44.localCOMx;
												_this44.wrap_localCOM.zpp_inner.y = _this44.localCOMy;
											}
										}
										var _this46 = _this44.body;
										if(_this46.zip_axis) {
											_this46.zip_axis = false;
											_this46.axisx = Math.sin(_this46.rot);
											_this46.axisy = Math.cos(_this46.rot);
										}
										_this44.worldCOMx = _this44.body.posx + (_this44.body.axisy * _this44.localCOMx - _this44.body.axisx * _this44.localCOMy);
										_this44.worldCOMy = _this44.body.posy + (_this44.localCOMx * _this44.body.axisx + _this44.localCOMy * _this44.body.axisy);
									}
								}
								var rx1 = _this44.radius;
								var ry1 = _this44.radius;
								_this44.aabb.minx = _this44.worldCOMx - rx1;
								_this44.aabb.miny = _this44.worldCOMy - ry1;
								_this44.aabb.maxx = _this44.worldCOMx + rx1;
								_this44.aabb.maxy = _this44.worldCOMy + ry1;
							} else {
								var _this47 = shape1.polygon;
								if(_this47.zip_gverts) {
									if(_this47.body != null) {
										_this47.zip_gverts = false;
										_this47.validate_lverts();
										var _this48 = _this47.body;
										if(_this48.zip_axis) {
											_this48.zip_axis = false;
											_this48.axisx = Math.sin(_this48.rot);
											_this48.axisy = Math.cos(_this48.rot);
										}
										var li1 = _this47.lverts.next;
										var cx_ite4 = _this47.gverts.next;
										while(cx_ite4 != null) {
											var g7 = cx_ite4;
											var l1 = li1;
											li1 = li1.next;
											g7.x = _this47.body.posx + (_this47.body.axisy * l1.x - _this47.body.axisx * l1.y);
											g7.y = _this47.body.posy + (l1.x * _this47.body.axisx + l1.y * _this47.body.axisy);
											cx_ite4 = cx_ite4.next;
										}
									}
								}
								if(_this47.lverts.next == null) {
									throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful bounds");
								}
								var p01 = _this47.gverts.next;
								_this47.aabb.minx = p01.x;
								_this47.aabb.miny = p01.y;
								_this47.aabb.maxx = p01.x;
								_this47.aabb.maxy = p01.y;
								var cx_ite5 = _this47.gverts.next.next;
								while(cx_ite5 != null) {
									var p1 = cx_ite5;
									if(p1.x < _this47.aabb.minx) {
										_this47.aabb.minx = p1.x;
									}
									if(p1.x > _this47.aabb.maxx) {
										_this47.aabb.maxx = p1.x;
									}
									if(p1.y < _this47.aabb.miny) {
										_this47.aabb.miny = p1.y;
									}
									if(p1.y > _this47.aabb.maxy) {
										_this47.aabb.maxy = p1.y;
									}
									cx_ite5 = cx_ite5.next;
								}
							}
						}
					}
				}
				var a29 = shape1.aabb;
				aabb1.minx = a29.minx - 3.0;
				aabb1.miny = a29.miny - 3.0;
				aabb1.maxx = a29.maxx + 3.0;
				aabb1.maxy = a29.maxy + 3.0;
				var tree3 = (ret.dyn = shape1.body.type == 1?false:!shape1.body.component.sleeping)?this.dtree:this.stree;
				if(tree3.root == null) {
					tree3.root = ret;
					tree3.root.parent = null;
				} else {
					var leafaabb1 = ret.aabb;
					var node4 = tree3.root;
					while(node4.child1 != null) {
						var child14 = node4.child1;
						var child24 = node4.child2;
						var _this49 = node4.aabb;
						var area3 = (_this49.maxx - _this49.minx + (_this49.maxy - _this49.miny)) * 2;
						var _this50 = ZPP_AABBTree.tmpaabb;
						var a30 = node4.aabb;
						_this50.minx = a30.minx < leafaabb1.minx?a30.minx:leafaabb1.minx;
						_this50.miny = a30.miny < leafaabb1.miny?a30.miny:leafaabb1.miny;
						_this50.maxx = a30.maxx > leafaabb1.maxx?a30.maxx:leafaabb1.maxx;
						_this50.maxy = a30.maxy > leafaabb1.maxy?a30.maxy:leafaabb1.maxy;
						var _this51 = ZPP_AABBTree.tmpaabb;
						var carea1 = (_this51.maxx - _this51.minx + (_this51.maxy - _this51.miny)) * 2;
						var cost3 = 2 * carea1;
						var icost1 = 2 * (carea1 - area3);
						var _this52 = ZPP_AABBTree.tmpaabb;
						var b33 = child14.aabb;
						_this52.minx = leafaabb1.minx < b33.minx?leafaabb1.minx:b33.minx;
						_this52.miny = leafaabb1.miny < b33.miny?leafaabb1.miny:b33.miny;
						_this52.maxx = leafaabb1.maxx > b33.maxx?leafaabb1.maxx:b33.maxx;
						_this52.maxy = leafaabb1.maxy > b33.maxy?leafaabb1.maxy:b33.maxy;
						var cost11;
						if(child14.child1 == null) {
							var _this53 = ZPP_AABBTree.tmpaabb;
							cost11 = (_this53.maxx - _this53.minx + (_this53.maxy - _this53.miny)) * 2 + icost1;
						} else {
							var _this54 = child14.aabb;
							var oarea2 = (_this54.maxx - _this54.minx + (_this54.maxy - _this54.miny)) * 2;
							var _this55 = ZPP_AABBTree.tmpaabb;
							cost11 = (_this55.maxx - _this55.minx + (_this55.maxy - _this55.miny)) * 2 - oarea2 + icost1;
						}
						var _this56 = ZPP_AABBTree.tmpaabb;
						var b34 = child24.aabb;
						_this56.minx = leafaabb1.minx < b34.minx?leafaabb1.minx:b34.minx;
						_this56.miny = leafaabb1.miny < b34.miny?leafaabb1.miny:b34.miny;
						_this56.maxx = leafaabb1.maxx > b34.maxx?leafaabb1.maxx:b34.maxx;
						_this56.maxy = leafaabb1.maxy > b34.maxy?leafaabb1.maxy:b34.maxy;
						var cost21;
						if(child24.child1 == null) {
							var _this57 = ZPP_AABBTree.tmpaabb;
							cost21 = (_this57.maxx - _this57.minx + (_this57.maxy - _this57.miny)) * 2 + icost1;
						} else {
							var _this58 = child24.aabb;
							var oarea3 = (_this58.maxx - _this58.minx + (_this58.maxy - _this58.miny)) * 2;
							var _this59 = ZPP_AABBTree.tmpaabb;
							cost21 = (_this59.maxx - _this59.minx + (_this59.maxy - _this59.miny)) * 2 - oarea3 + icost1;
						}
						if(cost3 < cost11 && cost3 < cost21) {
							break;
						} else if(cost11 < cost21) {
							node4 = child14;
						} else {
							node4 = child24;
						}
					}
					var sibling3 = node4;
					var oparent1 = sibling3.parent;
					var nparent1;
					if(ZPP_AABBNode.zpp_pool == null) {
						nparent1 = new ZPP_AABBNode();
					} else {
						nparent1 = ZPP_AABBNode.zpp_pool;
						ZPP_AABBNode.zpp_pool = nparent1.next;
						nparent1.next = null;
					}
					if(ZPP_AABB.zpp_pool == null) {
						nparent1.aabb = new ZPP_AABB();
					} else {
						nparent1.aabb = ZPP_AABB.zpp_pool;
						ZPP_AABB.zpp_pool = nparent1.aabb.next;
						nparent1.aabb.next = null;
					}
					nparent1.moved = false;
					nparent1.synced = false;
					nparent1.first_sync = false;
					nparent1.parent = oparent1;
					var _this60 = nparent1.aabb;
					var b35 = sibling3.aabb;
					_this60.minx = leafaabb1.minx < b35.minx?leafaabb1.minx:b35.minx;
					_this60.miny = leafaabb1.miny < b35.miny?leafaabb1.miny:b35.miny;
					_this60.maxx = leafaabb1.maxx > b35.maxx?leafaabb1.maxx:b35.maxx;
					_this60.maxy = leafaabb1.maxy > b35.maxy?leafaabb1.maxy:b35.maxy;
					nparent1.height = sibling3.height + 1;
					if(oparent1 != null) {
						if(oparent1.child1 == sibling3) {
							oparent1.child1 = nparent1;
						} else {
							oparent1.child2 = nparent1;
						}
						nparent1.child1 = sibling3;
						nparent1.child2 = ret;
						sibling3.parent = nparent1;
						ret.parent = nparent1;
					} else {
						nparent1.child1 = sibling3;
						nparent1.child2 = ret;
						sibling3.parent = nparent1;
						ret.parent = nparent1;
						tree3.root = nparent1;
					}
					node4 = ret.parent;
					while(node4 != null) {
						if(node4.child1 == null || node4.height < 2) {
							node4 = node4;
						} else {
							var b36 = node4.child1;
							var c3 = node4.child2;
							var balance3 = c3.height - b36.height;
							if(balance3 > 1) {
								var f6 = c3.child1;
								var g8 = c3.child2;
								c3.child1 = node4;
								c3.parent = node4.parent;
								node4.parent = c3;
								if(c3.parent != null) {
									if(c3.parent.child1 == node4) {
										c3.parent.child1 = c3;
									} else {
										c3.parent.child2 = c3;
									}
								} else {
									tree3.root = c3;
								}
								if(f6.height > g8.height) {
									c3.child2 = f6;
									node4.child2 = g8;
									g8.parent = node4;
									var _this61 = node4.aabb;
									var a31 = b36.aabb;
									var b37 = g8.aabb;
									_this61.minx = a31.minx < b37.minx?a31.minx:b37.minx;
									_this61.miny = a31.miny < b37.miny?a31.miny:b37.miny;
									_this61.maxx = a31.maxx > b37.maxx?a31.maxx:b37.maxx;
									_this61.maxy = a31.maxy > b37.maxy?a31.maxy:b37.maxy;
									var _this62 = c3.aabb;
									var a32 = node4.aabb;
									var b38 = f6.aabb;
									_this62.minx = a32.minx < b38.minx?a32.minx:b38.minx;
									_this62.miny = a32.miny < b38.miny?a32.miny:b38.miny;
									_this62.maxx = a32.maxx > b38.maxx?a32.maxx:b38.maxx;
									_this62.maxy = a32.maxy > b38.maxy?a32.maxy:b38.maxy;
									var x27 = b36.height;
									var y27 = g8.height;
									node4.height = 1 + (x27 > y27?x27:y27);
									var x28 = node4.height;
									var y28 = f6.height;
									c3.height = 1 + (x28 > y28?x28:y28);
								} else {
									c3.child2 = g8;
									node4.child2 = f6;
									f6.parent = node4;
									var _this63 = node4.aabb;
									var a33 = b36.aabb;
									var b39 = f6.aabb;
									_this63.minx = a33.minx < b39.minx?a33.minx:b39.minx;
									_this63.miny = a33.miny < b39.miny?a33.miny:b39.miny;
									_this63.maxx = a33.maxx > b39.maxx?a33.maxx:b39.maxx;
									_this63.maxy = a33.maxy > b39.maxy?a33.maxy:b39.maxy;
									var _this64 = c3.aabb;
									var a34 = node4.aabb;
									var b40 = g8.aabb;
									_this64.minx = a34.minx < b40.minx?a34.minx:b40.minx;
									_this64.miny = a34.miny < b40.miny?a34.miny:b40.miny;
									_this64.maxx = a34.maxx > b40.maxx?a34.maxx:b40.maxx;
									_this64.maxy = a34.maxy > b40.maxy?a34.maxy:b40.maxy;
									var x29 = b36.height;
									var y29 = f6.height;
									node4.height = 1 + (x29 > y29?x29:y29);
									var x30 = node4.height;
									var y30 = g8.height;
									c3.height = 1 + (x30 > y30?x30:y30);
								}
								node4 = c3;
							} else if(balance3 < -1) {
								var f7 = b36.child1;
								var g9 = b36.child2;
								b36.child1 = node4;
								b36.parent = node4.parent;
								node4.parent = b36;
								if(b36.parent != null) {
									if(b36.parent.child1 == node4) {
										b36.parent.child1 = b36;
									} else {
										b36.parent.child2 = b36;
									}
								} else {
									tree3.root = b36;
								}
								if(f7.height > g9.height) {
									b36.child2 = f7;
									node4.child1 = g9;
									g9.parent = node4;
									var _this65 = node4.aabb;
									var a35 = c3.aabb;
									var b41 = g9.aabb;
									_this65.minx = a35.minx < b41.minx?a35.minx:b41.minx;
									_this65.miny = a35.miny < b41.miny?a35.miny:b41.miny;
									_this65.maxx = a35.maxx > b41.maxx?a35.maxx:b41.maxx;
									_this65.maxy = a35.maxy > b41.maxy?a35.maxy:b41.maxy;
									var _this66 = b36.aabb;
									var a36 = node4.aabb;
									var b42 = f7.aabb;
									_this66.minx = a36.minx < b42.minx?a36.minx:b42.minx;
									_this66.miny = a36.miny < b42.miny?a36.miny:b42.miny;
									_this66.maxx = a36.maxx > b42.maxx?a36.maxx:b42.maxx;
									_this66.maxy = a36.maxy > b42.maxy?a36.maxy:b42.maxy;
									var x31 = c3.height;
									var y31 = g9.height;
									node4.height = 1 + (x31 > y31?x31:y31);
									var x32 = node4.height;
									var y32 = f7.height;
									b36.height = 1 + (x32 > y32?x32:y32);
								} else {
									b36.child2 = g9;
									node4.child1 = f7;
									f7.parent = node4;
									var _this67 = node4.aabb;
									var a37 = c3.aabb;
									var b43 = f7.aabb;
									_this67.minx = a37.minx < b43.minx?a37.minx:b43.minx;
									_this67.miny = a37.miny < b43.miny?a37.miny:b43.miny;
									_this67.maxx = a37.maxx > b43.maxx?a37.maxx:b43.maxx;
									_this67.maxy = a37.maxy > b43.maxy?a37.maxy:b43.maxy;
									var _this68 = b36.aabb;
									var a38 = node4.aabb;
									var b44 = g9.aabb;
									_this68.minx = a38.minx < b44.minx?a38.minx:b44.minx;
									_this68.miny = a38.miny < b44.miny?a38.miny:b44.miny;
									_this68.maxx = a38.maxx > b44.maxx?a38.maxx:b44.maxx;
									_this68.maxy = a38.maxy > b44.maxy?a38.maxy:b44.maxy;
									var x33 = c3.height;
									var y33 = f7.height;
									node4.height = 1 + (x33 > y33?x33:y33);
									var x34 = node4.height;
									var y34 = g9.height;
									b36.height = 1 + (x34 > y34?x34:y34);
								}
								node4 = b36;
							} else {
								node4 = node4;
							}
						}
						var child15 = node4.child1;
						var child25 = node4.child2;
						var x35 = child15.height;
						var y35 = child25.height;
						node4.height = 1 + (x35 > y35?x35:y35);
						var _this69 = node4.aabb;
						var a39 = child15.aabb;
						var b45 = child25.aabb;
						_this69.minx = a39.minx < b45.minx?a39.minx:b45.minx;
						_this69.miny = a39.miny < b45.miny?a39.miny:b45.miny;
						_this69.maxx = a39.maxx > b45.maxx?a39.maxx:b45.maxx;
						_this69.maxy = a39.maxy > b45.maxy?a39.maxy:b45.maxy;
						node4 = node4.parent;
					}
				}
				ret.synced = false;
				if(!ret.moved) {
					ret.moved = true;
					ret.mnext = this.moves;
					this.moves = ret;
				}
			}
		}
	}
};
ZPP_DynAABBPhase.prototype.broadphase = function(space,discrete) {
	var node = this.syncs;
	while(node != null) {
		var shape = node.shape;
		if(!node.first_sync) {
			var tree = node.dyn?this.dtree:this.stree;
			if(node == tree.root) {
				tree.root = null;
			} else {
				var parent = node.parent;
				var gparent = parent.parent;
				var sibling = parent.child1 == node?parent.child2:parent.child1;
				if(gparent != null) {
					if(gparent.child1 == parent) {
						gparent.child1 = sibling;
					} else {
						gparent.child2 = sibling;
					}
					sibling.parent = gparent;
					parent.height = -1;
					var o = parent.aabb;
					if(o.outer != null) {
						o.outer.zpp_inner = null;
						o.outer = null;
					}
					o.wrap_min = o.wrap_max = null;
					o._invalidate = null;
					o._validate = null;
					o.next = ZPP_AABB.zpp_pool;
					ZPP_AABB.zpp_pool = o;
					parent.child1 = parent.child2 = parent.parent = null;
					parent.next = null;
					parent.snext = null;
					parent.mnext = null;
					parent.next = ZPP_AABBNode.zpp_pool;
					ZPP_AABBNode.zpp_pool = parent;
					var node1 = gparent;
					while(node1 != null) {
						if(node1.child1 == null || node1.height < 2) {
							node1 = node1;
						} else {
							var b = node1.child1;
							var c = node1.child2;
							var balance = c.height - b.height;
							if(balance > 1) {
								var f = c.child1;
								var g = c.child2;
								c.child1 = node1;
								c.parent = node1.parent;
								node1.parent = c;
								if(c.parent != null) {
									if(c.parent.child1 == node1) {
										c.parent.child1 = c;
									} else {
										c.parent.child2 = c;
									}
								} else {
									tree.root = c;
								}
								if(f.height > g.height) {
									c.child2 = f;
									node1.child2 = g;
									g.parent = node1;
									var _this = node1.aabb;
									var a = b.aabb;
									var b1 = g.aabb;
									_this.minx = a.minx < b1.minx?a.minx:b1.minx;
									_this.miny = a.miny < b1.miny?a.miny:b1.miny;
									_this.maxx = a.maxx > b1.maxx?a.maxx:b1.maxx;
									_this.maxy = a.maxy > b1.maxy?a.maxy:b1.maxy;
									var _this1 = c.aabb;
									var a1 = node1.aabb;
									var b2 = f.aabb;
									_this1.minx = a1.minx < b2.minx?a1.minx:b2.minx;
									_this1.miny = a1.miny < b2.miny?a1.miny:b2.miny;
									_this1.maxx = a1.maxx > b2.maxx?a1.maxx:b2.maxx;
									_this1.maxy = a1.maxy > b2.maxy?a1.maxy:b2.maxy;
									var x = b.height;
									var y = g.height;
									node1.height = 1 + (x > y?x:y);
									var x1 = node1.height;
									var y1 = f.height;
									c.height = 1 + (x1 > y1?x1:y1);
								} else {
									c.child2 = g;
									node1.child2 = f;
									f.parent = node1;
									var _this2 = node1.aabb;
									var a2 = b.aabb;
									var b3 = f.aabb;
									_this2.minx = a2.minx < b3.minx?a2.minx:b3.minx;
									_this2.miny = a2.miny < b3.miny?a2.miny:b3.miny;
									_this2.maxx = a2.maxx > b3.maxx?a2.maxx:b3.maxx;
									_this2.maxy = a2.maxy > b3.maxy?a2.maxy:b3.maxy;
									var _this3 = c.aabb;
									var a3 = node1.aabb;
									var b4 = g.aabb;
									_this3.minx = a3.minx < b4.minx?a3.minx:b4.minx;
									_this3.miny = a3.miny < b4.miny?a3.miny:b4.miny;
									_this3.maxx = a3.maxx > b4.maxx?a3.maxx:b4.maxx;
									_this3.maxy = a3.maxy > b4.maxy?a3.maxy:b4.maxy;
									var x2 = b.height;
									var y2 = f.height;
									node1.height = 1 + (x2 > y2?x2:y2);
									var x3 = node1.height;
									var y3 = g.height;
									c.height = 1 + (x3 > y3?x3:y3);
								}
								node1 = c;
							} else if(balance < -1) {
								var f1 = b.child1;
								var g1 = b.child2;
								b.child1 = node1;
								b.parent = node1.parent;
								node1.parent = b;
								if(b.parent != null) {
									if(b.parent.child1 == node1) {
										b.parent.child1 = b;
									} else {
										b.parent.child2 = b;
									}
								} else {
									tree.root = b;
								}
								if(f1.height > g1.height) {
									b.child2 = f1;
									node1.child1 = g1;
									g1.parent = node1;
									var _this4 = node1.aabb;
									var a4 = c.aabb;
									var b5 = g1.aabb;
									_this4.minx = a4.minx < b5.minx?a4.minx:b5.minx;
									_this4.miny = a4.miny < b5.miny?a4.miny:b5.miny;
									_this4.maxx = a4.maxx > b5.maxx?a4.maxx:b5.maxx;
									_this4.maxy = a4.maxy > b5.maxy?a4.maxy:b5.maxy;
									var _this5 = b.aabb;
									var a5 = node1.aabb;
									var b6 = f1.aabb;
									_this5.minx = a5.minx < b6.minx?a5.minx:b6.minx;
									_this5.miny = a5.miny < b6.miny?a5.miny:b6.miny;
									_this5.maxx = a5.maxx > b6.maxx?a5.maxx:b6.maxx;
									_this5.maxy = a5.maxy > b6.maxy?a5.maxy:b6.maxy;
									var x4 = c.height;
									var y4 = g1.height;
									node1.height = 1 + (x4 > y4?x4:y4);
									var x5 = node1.height;
									var y5 = f1.height;
									b.height = 1 + (x5 > y5?x5:y5);
								} else {
									b.child2 = g1;
									node1.child1 = f1;
									f1.parent = node1;
									var _this6 = node1.aabb;
									var a6 = c.aabb;
									var b7 = f1.aabb;
									_this6.minx = a6.minx < b7.minx?a6.minx:b7.minx;
									_this6.miny = a6.miny < b7.miny?a6.miny:b7.miny;
									_this6.maxx = a6.maxx > b7.maxx?a6.maxx:b7.maxx;
									_this6.maxy = a6.maxy > b7.maxy?a6.maxy:b7.maxy;
									var _this7 = b.aabb;
									var a7 = node1.aabb;
									var b8 = g1.aabb;
									_this7.minx = a7.minx < b8.minx?a7.minx:b8.minx;
									_this7.miny = a7.miny < b8.miny?a7.miny:b8.miny;
									_this7.maxx = a7.maxx > b8.maxx?a7.maxx:b8.maxx;
									_this7.maxy = a7.maxy > b8.maxy?a7.maxy:b8.maxy;
									var x6 = c.height;
									var y6 = f1.height;
									node1.height = 1 + (x6 > y6?x6:y6);
									var x7 = node1.height;
									var y7 = g1.height;
									b.height = 1 + (x7 > y7?x7:y7);
								}
								node1 = b;
							} else {
								node1 = node1;
							}
						}
						var child1 = node1.child1;
						var child2 = node1.child2;
						var _this8 = node1.aabb;
						var a8 = child1.aabb;
						var b9 = child2.aabb;
						_this8.minx = a8.minx < b9.minx?a8.minx:b9.minx;
						_this8.miny = a8.miny < b9.miny?a8.miny:b9.miny;
						_this8.maxx = a8.maxx > b9.maxx?a8.maxx:b9.maxx;
						_this8.maxy = a8.maxy > b9.maxy?a8.maxy:b9.maxy;
						var x8 = child1.height;
						var y8 = child2.height;
						node1.height = 1 + (x8 > y8?x8:y8);
						node1 = node1.parent;
					}
				} else {
					tree.root = sibling;
					sibling.parent = null;
					parent.height = -1;
					var o1 = parent.aabb;
					if(o1.outer != null) {
						o1.outer.zpp_inner = null;
						o1.outer = null;
					}
					o1.wrap_min = o1.wrap_max = null;
					o1._invalidate = null;
					o1._validate = null;
					o1.next = ZPP_AABB.zpp_pool;
					ZPP_AABB.zpp_pool = o1;
					parent.child1 = parent.child2 = parent.parent = null;
					parent.next = null;
					parent.snext = null;
					parent.mnext = null;
					parent.next = ZPP_AABBNode.zpp_pool;
					ZPP_AABBNode.zpp_pool = parent;
				}
			}
		} else {
			node.first_sync = false;
		}
		var aabb = node.aabb;
		if(!space.continuous) {
			if(shape.zip_aabb) {
				if(shape.body != null) {
					shape.zip_aabb = false;
					if(shape.type == 0) {
						var _this9 = shape.circle;
						if(_this9.zip_worldCOM) {
							if(_this9.body != null) {
								_this9.zip_worldCOM = false;
								if(_this9.zip_localCOM) {
									_this9.zip_localCOM = false;
									if(_this9.type == 1) {
										var _this10 = _this9.polygon;
										if(_this10.lverts.next == null) {
											throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
										}
										if(_this10.lverts.next.next == null) {
											_this10.localCOMx = _this10.lverts.next.x;
											_this10.localCOMy = _this10.lverts.next.y;
										} else if(_this10.lverts.next.next.next == null) {
											_this10.localCOMx = _this10.lverts.next.x;
											_this10.localCOMy = _this10.lverts.next.y;
											_this10.localCOMx += _this10.lverts.next.next.x;
											_this10.localCOMy += _this10.lverts.next.next.y;
											_this10.localCOMx *= 0.5;
											_this10.localCOMy *= 0.5;
										} else {
											_this10.localCOMx = 0;
											_this10.localCOMy = 0;
											var area = 0.0;
											var cx_ite = _this10.lverts.next;
											var u = cx_ite;
											cx_ite = cx_ite.next;
											var v = cx_ite;
											cx_ite = cx_ite.next;
											while(cx_ite != null) {
												var w = cx_ite;
												area += v.x * (w.y - u.y);
												var cf = w.y * v.x - w.x * v.y;
												_this10.localCOMx += (v.x + w.x) * cf;
												_this10.localCOMy += (v.y + w.y) * cf;
												u = v;
												v = w;
												cx_ite = cx_ite.next;
											}
											cx_ite = _this10.lverts.next;
											var w1 = cx_ite;
											area += v.x * (w1.y - u.y);
											var cf1 = w1.y * v.x - w1.x * v.y;
											_this10.localCOMx += (v.x + w1.x) * cf1;
											_this10.localCOMy += (v.y + w1.y) * cf1;
											u = v;
											cx_ite = cx_ite.next;
											var w2 = cx_ite;
											area += w1.x * (w2.y - u.y);
											var cf2 = w2.y * w1.x - w2.x * w1.y;
											_this10.localCOMx += (w1.x + w2.x) * cf2;
											_this10.localCOMy += (w1.y + w2.y) * cf2;
											area = 1 / (3 * area);
											var t = area;
											_this10.localCOMx *= t;
											_this10.localCOMy *= t;
										}
									}
									if(_this9.wrap_localCOM != null) {
										_this9.wrap_localCOM.zpp_inner.x = _this9.localCOMx;
										_this9.wrap_localCOM.zpp_inner.y = _this9.localCOMy;
									}
								}
								var _this11 = _this9.body;
								if(_this11.zip_axis) {
									_this11.zip_axis = false;
									_this11.axisx = Math.sin(_this11.rot);
									_this11.axisy = Math.cos(_this11.rot);
								}
								_this9.worldCOMx = _this9.body.posx + (_this9.body.axisy * _this9.localCOMx - _this9.body.axisx * _this9.localCOMy);
								_this9.worldCOMy = _this9.body.posy + (_this9.localCOMx * _this9.body.axisx + _this9.localCOMy * _this9.body.axisy);
							}
						}
						var rx = _this9.radius;
						var ry = _this9.radius;
						_this9.aabb.minx = _this9.worldCOMx - rx;
						_this9.aabb.miny = _this9.worldCOMy - ry;
						_this9.aabb.maxx = _this9.worldCOMx + rx;
						_this9.aabb.maxy = _this9.worldCOMy + ry;
					} else {
						var _this12 = shape.polygon;
						if(_this12.zip_gverts) {
							if(_this12.body != null) {
								_this12.zip_gverts = false;
								_this12.validate_lverts();
								var _this13 = _this12.body;
								if(_this13.zip_axis) {
									_this13.zip_axis = false;
									_this13.axisx = Math.sin(_this13.rot);
									_this13.axisy = Math.cos(_this13.rot);
								}
								var li = _this12.lverts.next;
								var cx_ite1 = _this12.gverts.next;
								while(cx_ite1 != null) {
									var g2 = cx_ite1;
									var l = li;
									li = li.next;
									g2.x = _this12.body.posx + (_this12.body.axisy * l.x - _this12.body.axisx * l.y);
									g2.y = _this12.body.posy + (l.x * _this12.body.axisx + l.y * _this12.body.axisy);
									cx_ite1 = cx_ite1.next;
								}
							}
						}
						if(_this12.lverts.next == null) {
							throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful bounds");
						}
						var p0 = _this12.gverts.next;
						_this12.aabb.minx = p0.x;
						_this12.aabb.miny = p0.y;
						_this12.aabb.maxx = p0.x;
						_this12.aabb.maxy = p0.y;
						var cx_ite2 = _this12.gverts.next.next;
						while(cx_ite2 != null) {
							var p = cx_ite2;
							if(p.x < _this12.aabb.minx) {
								_this12.aabb.minx = p.x;
							}
							if(p.x > _this12.aabb.maxx) {
								_this12.aabb.maxx = p.x;
							}
							if(p.y < _this12.aabb.miny) {
								_this12.aabb.miny = p.y;
							}
							if(p.y > _this12.aabb.maxy) {
								_this12.aabb.maxy = p.y;
							}
							cx_ite2 = cx_ite2.next;
						}
					}
				}
			}
		}
		var a9 = shape.aabb;
		aabb.minx = a9.minx - 3.0;
		aabb.miny = a9.miny - 3.0;
		aabb.maxx = a9.maxx + 3.0;
		aabb.maxy = a9.maxy + 3.0;
		var tree1 = (node.dyn = shape.body.type == 1?false:!shape.body.component.sleeping)?this.dtree:this.stree;
		if(tree1.root == null) {
			tree1.root = node;
			tree1.root.parent = null;
		} else {
			var leafaabb = node.aabb;
			var node2 = tree1.root;
			while(node2.child1 != null) {
				var child11 = node2.child1;
				var child21 = node2.child2;
				var _this14 = node2.aabb;
				var area1 = (_this14.maxx - _this14.minx + (_this14.maxy - _this14.miny)) * 2;
				var _this15 = ZPP_AABBTree.tmpaabb;
				var a10 = node2.aabb;
				_this15.minx = a10.minx < leafaabb.minx?a10.minx:leafaabb.minx;
				_this15.miny = a10.miny < leafaabb.miny?a10.miny:leafaabb.miny;
				_this15.maxx = a10.maxx > leafaabb.maxx?a10.maxx:leafaabb.maxx;
				_this15.maxy = a10.maxy > leafaabb.maxy?a10.maxy:leafaabb.maxy;
				var _this16 = ZPP_AABBTree.tmpaabb;
				var carea = (_this16.maxx - _this16.minx + (_this16.maxy - _this16.miny)) * 2;
				var cost = 2 * carea;
				var icost = 2 * (carea - area1);
				var _this17 = ZPP_AABBTree.tmpaabb;
				var b10 = child11.aabb;
				_this17.minx = leafaabb.minx < b10.minx?leafaabb.minx:b10.minx;
				_this17.miny = leafaabb.miny < b10.miny?leafaabb.miny:b10.miny;
				_this17.maxx = leafaabb.maxx > b10.maxx?leafaabb.maxx:b10.maxx;
				_this17.maxy = leafaabb.maxy > b10.maxy?leafaabb.maxy:b10.maxy;
				var cost1;
				if(child11.child1 == null) {
					var _this18 = ZPP_AABBTree.tmpaabb;
					cost1 = (_this18.maxx - _this18.minx + (_this18.maxy - _this18.miny)) * 2 + icost;
				} else {
					var _this19 = child11.aabb;
					var oarea = (_this19.maxx - _this19.minx + (_this19.maxy - _this19.miny)) * 2;
					var _this20 = ZPP_AABBTree.tmpaabb;
					cost1 = (_this20.maxx - _this20.minx + (_this20.maxy - _this20.miny)) * 2 - oarea + icost;
				}
				var _this21 = ZPP_AABBTree.tmpaabb;
				var b11 = child21.aabb;
				_this21.minx = leafaabb.minx < b11.minx?leafaabb.minx:b11.minx;
				_this21.miny = leafaabb.miny < b11.miny?leafaabb.miny:b11.miny;
				_this21.maxx = leafaabb.maxx > b11.maxx?leafaabb.maxx:b11.maxx;
				_this21.maxy = leafaabb.maxy > b11.maxy?leafaabb.maxy:b11.maxy;
				var cost2;
				if(child21.child1 == null) {
					var _this22 = ZPP_AABBTree.tmpaabb;
					cost2 = (_this22.maxx - _this22.minx + (_this22.maxy - _this22.miny)) * 2 + icost;
				} else {
					var _this23 = child21.aabb;
					var oarea1 = (_this23.maxx - _this23.minx + (_this23.maxy - _this23.miny)) * 2;
					var _this24 = ZPP_AABBTree.tmpaabb;
					cost2 = (_this24.maxx - _this24.minx + (_this24.maxy - _this24.miny)) * 2 - oarea1 + icost;
				}
				if(cost < cost1 && cost < cost2) {
					break;
				} else if(cost1 < cost2) {
					node2 = child11;
				} else {
					node2 = child21;
				}
			}
			var sibling1 = node2;
			var oparent = sibling1.parent;
			var nparent;
			if(ZPP_AABBNode.zpp_pool == null) {
				nparent = new ZPP_AABBNode();
			} else {
				nparent = ZPP_AABBNode.zpp_pool;
				ZPP_AABBNode.zpp_pool = nparent.next;
				nparent.next = null;
			}
			if(ZPP_AABB.zpp_pool == null) {
				nparent.aabb = new ZPP_AABB();
			} else {
				nparent.aabb = ZPP_AABB.zpp_pool;
				ZPP_AABB.zpp_pool = nparent.aabb.next;
				nparent.aabb.next = null;
			}
			nparent.moved = false;
			nparent.synced = false;
			nparent.first_sync = false;
			nparent.parent = oparent;
			var _this25 = nparent.aabb;
			var b12 = sibling1.aabb;
			_this25.minx = leafaabb.minx < b12.minx?leafaabb.minx:b12.minx;
			_this25.miny = leafaabb.miny < b12.miny?leafaabb.miny:b12.miny;
			_this25.maxx = leafaabb.maxx > b12.maxx?leafaabb.maxx:b12.maxx;
			_this25.maxy = leafaabb.maxy > b12.maxy?leafaabb.maxy:b12.maxy;
			nparent.height = sibling1.height + 1;
			if(oparent != null) {
				if(oparent.child1 == sibling1) {
					oparent.child1 = nparent;
				} else {
					oparent.child2 = nparent;
				}
				nparent.child1 = sibling1;
				nparent.child2 = node;
				sibling1.parent = nparent;
				node.parent = nparent;
			} else {
				nparent.child1 = sibling1;
				nparent.child2 = node;
				sibling1.parent = nparent;
				node.parent = nparent;
				tree1.root = nparent;
			}
			node2 = node.parent;
			while(node2 != null) {
				if(node2.child1 == null || node2.height < 2) {
					node2 = node2;
				} else {
					var b13 = node2.child1;
					var c1 = node2.child2;
					var balance1 = c1.height - b13.height;
					if(balance1 > 1) {
						var f2 = c1.child1;
						var g3 = c1.child2;
						c1.child1 = node2;
						c1.parent = node2.parent;
						node2.parent = c1;
						if(c1.parent != null) {
							if(c1.parent.child1 == node2) {
								c1.parent.child1 = c1;
							} else {
								c1.parent.child2 = c1;
							}
						} else {
							tree1.root = c1;
						}
						if(f2.height > g3.height) {
							c1.child2 = f2;
							node2.child2 = g3;
							g3.parent = node2;
							var _this26 = node2.aabb;
							var a11 = b13.aabb;
							var b14 = g3.aabb;
							_this26.minx = a11.minx < b14.minx?a11.minx:b14.minx;
							_this26.miny = a11.miny < b14.miny?a11.miny:b14.miny;
							_this26.maxx = a11.maxx > b14.maxx?a11.maxx:b14.maxx;
							_this26.maxy = a11.maxy > b14.maxy?a11.maxy:b14.maxy;
							var _this27 = c1.aabb;
							var a12 = node2.aabb;
							var b15 = f2.aabb;
							_this27.minx = a12.minx < b15.minx?a12.minx:b15.minx;
							_this27.miny = a12.miny < b15.miny?a12.miny:b15.miny;
							_this27.maxx = a12.maxx > b15.maxx?a12.maxx:b15.maxx;
							_this27.maxy = a12.maxy > b15.maxy?a12.maxy:b15.maxy;
							var x9 = b13.height;
							var y9 = g3.height;
							node2.height = 1 + (x9 > y9?x9:y9);
							var x10 = node2.height;
							var y10 = f2.height;
							c1.height = 1 + (x10 > y10?x10:y10);
						} else {
							c1.child2 = g3;
							node2.child2 = f2;
							f2.parent = node2;
							var _this28 = node2.aabb;
							var a13 = b13.aabb;
							var b16 = f2.aabb;
							_this28.minx = a13.minx < b16.minx?a13.minx:b16.minx;
							_this28.miny = a13.miny < b16.miny?a13.miny:b16.miny;
							_this28.maxx = a13.maxx > b16.maxx?a13.maxx:b16.maxx;
							_this28.maxy = a13.maxy > b16.maxy?a13.maxy:b16.maxy;
							var _this29 = c1.aabb;
							var a14 = node2.aabb;
							var b17 = g3.aabb;
							_this29.minx = a14.minx < b17.minx?a14.minx:b17.minx;
							_this29.miny = a14.miny < b17.miny?a14.miny:b17.miny;
							_this29.maxx = a14.maxx > b17.maxx?a14.maxx:b17.maxx;
							_this29.maxy = a14.maxy > b17.maxy?a14.maxy:b17.maxy;
							var x11 = b13.height;
							var y11 = f2.height;
							node2.height = 1 + (x11 > y11?x11:y11);
							var x12 = node2.height;
							var y12 = g3.height;
							c1.height = 1 + (x12 > y12?x12:y12);
						}
						node2 = c1;
					} else if(balance1 < -1) {
						var f3 = b13.child1;
						var g4 = b13.child2;
						b13.child1 = node2;
						b13.parent = node2.parent;
						node2.parent = b13;
						if(b13.parent != null) {
							if(b13.parent.child1 == node2) {
								b13.parent.child1 = b13;
							} else {
								b13.parent.child2 = b13;
							}
						} else {
							tree1.root = b13;
						}
						if(f3.height > g4.height) {
							b13.child2 = f3;
							node2.child1 = g4;
							g4.parent = node2;
							var _this30 = node2.aabb;
							var a15 = c1.aabb;
							var b18 = g4.aabb;
							_this30.minx = a15.minx < b18.minx?a15.minx:b18.minx;
							_this30.miny = a15.miny < b18.miny?a15.miny:b18.miny;
							_this30.maxx = a15.maxx > b18.maxx?a15.maxx:b18.maxx;
							_this30.maxy = a15.maxy > b18.maxy?a15.maxy:b18.maxy;
							var _this31 = b13.aabb;
							var a16 = node2.aabb;
							var b19 = f3.aabb;
							_this31.minx = a16.minx < b19.minx?a16.minx:b19.minx;
							_this31.miny = a16.miny < b19.miny?a16.miny:b19.miny;
							_this31.maxx = a16.maxx > b19.maxx?a16.maxx:b19.maxx;
							_this31.maxy = a16.maxy > b19.maxy?a16.maxy:b19.maxy;
							var x13 = c1.height;
							var y13 = g4.height;
							node2.height = 1 + (x13 > y13?x13:y13);
							var x14 = node2.height;
							var y14 = f3.height;
							b13.height = 1 + (x14 > y14?x14:y14);
						} else {
							b13.child2 = g4;
							node2.child1 = f3;
							f3.parent = node2;
							var _this32 = node2.aabb;
							var a17 = c1.aabb;
							var b20 = f3.aabb;
							_this32.minx = a17.minx < b20.minx?a17.minx:b20.minx;
							_this32.miny = a17.miny < b20.miny?a17.miny:b20.miny;
							_this32.maxx = a17.maxx > b20.maxx?a17.maxx:b20.maxx;
							_this32.maxy = a17.maxy > b20.maxy?a17.maxy:b20.maxy;
							var _this33 = b13.aabb;
							var a18 = node2.aabb;
							var b21 = g4.aabb;
							_this33.minx = a18.minx < b21.minx?a18.minx:b21.minx;
							_this33.miny = a18.miny < b21.miny?a18.miny:b21.miny;
							_this33.maxx = a18.maxx > b21.maxx?a18.maxx:b21.maxx;
							_this33.maxy = a18.maxy > b21.maxy?a18.maxy:b21.maxy;
							var x15 = c1.height;
							var y15 = f3.height;
							node2.height = 1 + (x15 > y15?x15:y15);
							var x16 = node2.height;
							var y16 = g4.height;
							b13.height = 1 + (x16 > y16?x16:y16);
						}
						node2 = b13;
					} else {
						node2 = node2;
					}
				}
				var child12 = node2.child1;
				var child22 = node2.child2;
				var x17 = child12.height;
				var y17 = child22.height;
				node2.height = 1 + (x17 > y17?x17:y17);
				var _this34 = node2.aabb;
				var a19 = child12.aabb;
				var b22 = child22.aabb;
				_this34.minx = a19.minx < b22.minx?a19.minx:b22.minx;
				_this34.miny = a19.miny < b22.miny?a19.miny:b22.miny;
				_this34.maxx = a19.maxx > b22.maxx?a19.maxx:b22.maxx;
				_this34.maxy = a19.maxy > b22.maxy?a19.maxy:b22.maxy;
				node2 = node2.parent;
			}
		}
		node.synced = false;
		node = node.snext;
	}
	while(this.syncs != null) {
		var ret = this.syncs;
		this.syncs = ret.snext;
		ret.snext = null;
		if(ret.moved) {
			continue;
		}
		ret.moved = false;
		var lshape = ret.shape;
		if(lshape.body.component.sleeping) {
			continue;
		}
		var ab = ret.aabb;
		var stack = null;
		if(this.dtree.root != null) {
			this.dtree.root.next = stack;
			stack = this.dtree.root;
		}
		while(stack != null) {
			var ret1 = stack;
			stack = ret1.next;
			ret1.next = null;
			if(ret1 == ret) {
				continue;
			}
			if(ret1.child1 == null) {
				var shape1 = ret1.shape;
				if(shape1.body != lshape.body && !(shape1.body.type == 1 && lshape.body.type == 1)) {
					var x18 = ret1.aabb;
					if(x18.miny <= ab.maxy && ab.miny <= x18.maxy && x18.minx <= ab.maxx && ab.minx <= x18.maxx) {
						var id;
						var di;
						if(lshape.id < shape1.id) {
							id = lshape.id;
							di = shape1.id;
						} else {
							id = shape1.id;
							di = lshape.id;
						}
						var s = lshape.pairs.length < shape1.pairs.length?lshape:shape1;
						var p1 = null;
						var cx_ite3 = s.pairs.head;
						while(cx_ite3 != null) {
							var px = cx_ite3.elt;
							if(px.id == id && px.di == di) {
								p1 = px;
								break;
							}
							cx_ite3 = cx_ite3.next;
						}
						if(p1 != null) {
							if(p1.sleeping) {
								p1.sleeping = false;
								p1.next = this.pairs;
								this.pairs = p1;
								p1.first = true;
							}
							continue;
						}
						if(ZPP_AABBPair.zpp_pool == null) {
							p1 = new ZPP_AABBPair();
						} else {
							p1 = ZPP_AABBPair.zpp_pool;
							ZPP_AABBPair.zpp_pool = p1.next;
							p1.next = null;
						}
						p1.n1 = ret;
						p1.n2 = ret1;
						p1.id = id;
						p1.di = di;
						p1.next = this.pairs;
						this.pairs = p1;
						p1.first = true;
						var _this35 = lshape.pairs;
						var ret2;
						if(ZNPNode_ZPP_AABBPair.zpp_pool == null) {
							ret2 = new ZNPNode_ZPP_AABBPair();
						} else {
							ret2 = ZNPNode_ZPP_AABBPair.zpp_pool;
							ZNPNode_ZPP_AABBPair.zpp_pool = ret2.next;
							ret2.next = null;
						}
						ret2.elt = p1;
						var temp = ret2;
						temp.next = _this35.head;
						_this35.head = temp;
						_this35.modified = true;
						_this35.length++;
						var _this36 = shape1.pairs;
						var ret3;
						if(ZNPNode_ZPP_AABBPair.zpp_pool == null) {
							ret3 = new ZNPNode_ZPP_AABBPair();
						} else {
							ret3 = ZNPNode_ZPP_AABBPair.zpp_pool;
							ZNPNode_ZPP_AABBPair.zpp_pool = ret3.next;
							ret3.next = null;
						}
						ret3.elt = p1;
						var temp1 = ret3;
						temp1.next = _this36.head;
						_this36.head = temp1;
						_this36.modified = true;
						_this36.length++;
					}
				}
			} else {
				var x19 = ret1.aabb;
				if(x19.miny <= ab.maxy && ab.miny <= x19.maxy && x19.minx <= ab.maxx && ab.minx <= x19.maxx) {
					if(ret1.child1 != null) {
						ret1.child1.next = stack;
						stack = ret1.child1;
					}
					if(ret1.child2 != null) {
						ret1.child2.next = stack;
						stack = ret1.child2;
					}
				}
			}
		}
		if(this.stree.root != null) {
			this.stree.root.next = stack;
			stack = this.stree.root;
		}
		while(stack != null) {
			var ret4 = stack;
			stack = ret4.next;
			ret4.next = null;
			if(ret4 == ret) {
				continue;
			}
			if(ret4.child1 == null) {
				var shape2 = ret4.shape;
				if(shape2.body != lshape.body && !(shape2.body.type == 1 && lshape.body.type == 1)) {
					var x20 = ret4.aabb;
					if(x20.miny <= ab.maxy && ab.miny <= x20.maxy && x20.minx <= ab.maxx && ab.minx <= x20.maxx) {
						var id1;
						var di1;
						if(lshape.id < shape2.id) {
							id1 = lshape.id;
							di1 = shape2.id;
						} else {
							id1 = shape2.id;
							di1 = lshape.id;
						}
						var s1 = lshape.pairs.length < shape2.pairs.length?lshape:shape2;
						var p2 = null;
						var cx_ite4 = s1.pairs.head;
						while(cx_ite4 != null) {
							var px1 = cx_ite4.elt;
							if(px1.id == id1 && px1.di == di1) {
								p2 = px1;
								break;
							}
							cx_ite4 = cx_ite4.next;
						}
						if(p2 != null) {
							if(p2.sleeping) {
								p2.sleeping = false;
								p2.next = this.pairs;
								this.pairs = p2;
								p2.first = true;
							}
							continue;
						}
						if(ZPP_AABBPair.zpp_pool == null) {
							p2 = new ZPP_AABBPair();
						} else {
							p2 = ZPP_AABBPair.zpp_pool;
							ZPP_AABBPair.zpp_pool = p2.next;
							p2.next = null;
						}
						p2.n1 = ret;
						p2.n2 = ret4;
						p2.id = id1;
						p2.di = di1;
						p2.next = this.pairs;
						this.pairs = p2;
						p2.first = true;
						var _this37 = lshape.pairs;
						var ret5;
						if(ZNPNode_ZPP_AABBPair.zpp_pool == null) {
							ret5 = new ZNPNode_ZPP_AABBPair();
						} else {
							ret5 = ZNPNode_ZPP_AABBPair.zpp_pool;
							ZNPNode_ZPP_AABBPair.zpp_pool = ret5.next;
							ret5.next = null;
						}
						ret5.elt = p2;
						var temp2 = ret5;
						temp2.next = _this37.head;
						_this37.head = temp2;
						_this37.modified = true;
						_this37.length++;
						var _this38 = shape2.pairs;
						var ret6;
						if(ZNPNode_ZPP_AABBPair.zpp_pool == null) {
							ret6 = new ZNPNode_ZPP_AABBPair();
						} else {
							ret6 = ZNPNode_ZPP_AABBPair.zpp_pool;
							ZNPNode_ZPP_AABBPair.zpp_pool = ret6.next;
							ret6.next = null;
						}
						ret6.elt = p2;
						var temp3 = ret6;
						temp3.next = _this38.head;
						_this38.head = temp3;
						_this38.modified = true;
						_this38.length++;
					}
				}
			} else {
				var x21 = ret4.aabb;
				if(x21.miny <= ab.maxy && ab.miny <= x21.maxy && x21.minx <= ab.maxx && ab.minx <= x21.maxx) {
					if(ret4.child1 != null) {
						ret4.child1.next = stack;
						stack = ret4.child1;
					}
					if(ret4.child2 != null) {
						ret4.child2.next = stack;
						stack = ret4.child2;
					}
				}
			}
		}
	}
	while(this.moves != null) {
		var ret7 = this.moves;
		this.moves = ret7.mnext;
		ret7.mnext = null;
		ret7.moved = false;
		var lshape1 = ret7.shape;
		if(lshape1.body.component.sleeping) {
			continue;
		}
		var ab1 = ret7.aabb;
		var stack1 = null;
		if(this.dtree.root != null) {
			this.dtree.root.next = stack1;
			stack1 = this.dtree.root;
		}
		while(stack1 != null) {
			var ret8 = stack1;
			stack1 = ret8.next;
			ret8.next = null;
			if(ret8 == ret7) {
				continue;
			}
			if(ret8.child1 == null) {
				var shape3 = ret8.shape;
				if(shape3.body != lshape1.body && !(shape3.body.type == 1 && lshape1.body.type == 1)) {
					var x22 = ret8.aabb;
					if(x22.miny <= ab1.maxy && ab1.miny <= x22.maxy && x22.minx <= ab1.maxx && ab1.minx <= x22.maxx) {
						var id2;
						var di2;
						if(lshape1.id < shape3.id) {
							id2 = lshape1.id;
							di2 = shape3.id;
						} else {
							id2 = shape3.id;
							di2 = lshape1.id;
						}
						var s2 = lshape1.pairs.length < shape3.pairs.length?lshape1:shape3;
						var p3 = null;
						var cx_ite5 = s2.pairs.head;
						while(cx_ite5 != null) {
							var px2 = cx_ite5.elt;
							if(px2.id == id2 && px2.di == di2) {
								p3 = px2;
								break;
							}
							cx_ite5 = cx_ite5.next;
						}
						if(p3 != null) {
							if(p3.sleeping) {
								p3.sleeping = false;
								p3.next = this.pairs;
								this.pairs = p3;
								p3.first = true;
							}
							continue;
						}
						if(ZPP_AABBPair.zpp_pool == null) {
							p3 = new ZPP_AABBPair();
						} else {
							p3 = ZPP_AABBPair.zpp_pool;
							ZPP_AABBPair.zpp_pool = p3.next;
							p3.next = null;
						}
						p3.n1 = ret7;
						p3.n2 = ret8;
						p3.id = id2;
						p3.di = di2;
						p3.next = this.pairs;
						this.pairs = p3;
						p3.first = true;
						var _this39 = lshape1.pairs;
						var ret9;
						if(ZNPNode_ZPP_AABBPair.zpp_pool == null) {
							ret9 = new ZNPNode_ZPP_AABBPair();
						} else {
							ret9 = ZNPNode_ZPP_AABBPair.zpp_pool;
							ZNPNode_ZPP_AABBPair.zpp_pool = ret9.next;
							ret9.next = null;
						}
						ret9.elt = p3;
						var temp4 = ret9;
						temp4.next = _this39.head;
						_this39.head = temp4;
						_this39.modified = true;
						_this39.length++;
						var _this40 = shape3.pairs;
						var ret10;
						if(ZNPNode_ZPP_AABBPair.zpp_pool == null) {
							ret10 = new ZNPNode_ZPP_AABBPair();
						} else {
							ret10 = ZNPNode_ZPP_AABBPair.zpp_pool;
							ZNPNode_ZPP_AABBPair.zpp_pool = ret10.next;
							ret10.next = null;
						}
						ret10.elt = p3;
						var temp5 = ret10;
						temp5.next = _this40.head;
						_this40.head = temp5;
						_this40.modified = true;
						_this40.length++;
					}
				}
			} else {
				var x23 = ret8.aabb;
				if(x23.miny <= ab1.maxy && ab1.miny <= x23.maxy && x23.minx <= ab1.maxx && ab1.minx <= x23.maxx) {
					if(ret8.child1 != null) {
						ret8.child1.next = stack1;
						stack1 = ret8.child1;
					}
					if(ret8.child2 != null) {
						ret8.child2.next = stack1;
						stack1 = ret8.child2;
					}
				}
			}
		}
		if(this.stree.root != null) {
			this.stree.root.next = stack1;
			stack1 = this.stree.root;
		}
		while(stack1 != null) {
			var ret11 = stack1;
			stack1 = ret11.next;
			ret11.next = null;
			if(ret11 == ret7) {
				continue;
			}
			if(ret11.child1 == null) {
				var shape4 = ret11.shape;
				if(shape4.body != lshape1.body && !(shape4.body.type == 1 && lshape1.body.type == 1)) {
					var x24 = ret11.aabb;
					if(x24.miny <= ab1.maxy && ab1.miny <= x24.maxy && x24.minx <= ab1.maxx && ab1.minx <= x24.maxx) {
						var id3;
						var di3;
						if(lshape1.id < shape4.id) {
							id3 = lshape1.id;
							di3 = shape4.id;
						} else {
							id3 = shape4.id;
							di3 = lshape1.id;
						}
						var s3 = lshape1.pairs.length < shape4.pairs.length?lshape1:shape4;
						var p4 = null;
						var cx_ite6 = s3.pairs.head;
						while(cx_ite6 != null) {
							var px3 = cx_ite6.elt;
							if(px3.id == id3 && px3.di == di3) {
								p4 = px3;
								break;
							}
							cx_ite6 = cx_ite6.next;
						}
						if(p4 != null) {
							if(p4.sleeping) {
								p4.sleeping = false;
								p4.next = this.pairs;
								this.pairs = p4;
								p4.first = true;
							}
							continue;
						}
						if(ZPP_AABBPair.zpp_pool == null) {
							p4 = new ZPP_AABBPair();
						} else {
							p4 = ZPP_AABBPair.zpp_pool;
							ZPP_AABBPair.zpp_pool = p4.next;
							p4.next = null;
						}
						p4.n1 = ret7;
						p4.n2 = ret11;
						p4.id = id3;
						p4.di = di3;
						p4.next = this.pairs;
						this.pairs = p4;
						p4.first = true;
						var _this41 = lshape1.pairs;
						var ret12;
						if(ZNPNode_ZPP_AABBPair.zpp_pool == null) {
							ret12 = new ZNPNode_ZPP_AABBPair();
						} else {
							ret12 = ZNPNode_ZPP_AABBPair.zpp_pool;
							ZNPNode_ZPP_AABBPair.zpp_pool = ret12.next;
							ret12.next = null;
						}
						ret12.elt = p4;
						var temp6 = ret12;
						temp6.next = _this41.head;
						_this41.head = temp6;
						_this41.modified = true;
						_this41.length++;
						var _this42 = shape4.pairs;
						var ret13;
						if(ZNPNode_ZPP_AABBPair.zpp_pool == null) {
							ret13 = new ZNPNode_ZPP_AABBPair();
						} else {
							ret13 = ZNPNode_ZPP_AABBPair.zpp_pool;
							ZNPNode_ZPP_AABBPair.zpp_pool = ret13.next;
							ret13.next = null;
						}
						ret13.elt = p4;
						var temp7 = ret13;
						temp7.next = _this42.head;
						_this42.head = temp7;
						_this42.modified = true;
						_this42.length++;
					}
				}
			} else {
				var x25 = ret11.aabb;
				if(x25.miny <= ab1.maxy && ab1.miny <= x25.maxy && x25.minx <= ab1.maxx && ab1.minx <= x25.maxx) {
					if(ret11.child1 != null) {
						ret11.child1.next = stack1;
						stack1 = ret11.child1;
					}
					if(ret11.child2 != null) {
						ret11.child2.next = stack1;
						stack1 = ret11.child2;
					}
				}
			}
		}
	}
	var pre = null;
	var cur = this.pairs;
	while(cur != null) {
		var tmp;
		if(!cur.first) {
			var _this43 = cur.n1.aabb;
			var x26 = cur.n2.aabb;
			tmp = !(x26.miny <= _this43.maxy && _this43.miny <= x26.maxy && x26.minx <= _this43.maxx && _this43.minx <= x26.maxx);
		} else {
			tmp = false;
		}
		if(tmp) {
			if(pre == null) {
				this.pairs = cur.next;
			} else {
				pre.next = cur.next;
			}
			var _this44 = cur.n1.shape.pairs;
			var pre1 = null;
			var cur1 = _this44.head;
			while(cur1 != null) {
				if(cur1.elt == cur) {
					var old;
					var ret14;
					if(pre1 == null) {
						old = _this44.head;
						ret14 = old.next;
						_this44.head = ret14;
						if(_this44.head == null) {
							_this44.pushmod = true;
						}
					} else {
						old = pre1.next;
						ret14 = old.next;
						pre1.next = ret14;
						if(ret14 == null) {
							_this44.pushmod = true;
						}
					}
					var o2 = old;
					o2.elt = null;
					o2.next = ZNPNode_ZPP_AABBPair.zpp_pool;
					ZNPNode_ZPP_AABBPair.zpp_pool = o2;
					_this44.modified = true;
					_this44.length--;
					_this44.pushmod = true;
					break;
				}
				pre1 = cur1;
				cur1 = cur1.next;
			}
			var _this45 = cur.n2.shape.pairs;
			var pre2 = null;
			var cur2 = _this45.head;
			while(cur2 != null) {
				if(cur2.elt == cur) {
					var old1;
					var ret15;
					if(pre2 == null) {
						old1 = _this45.head;
						ret15 = old1.next;
						_this45.head = ret15;
						if(_this45.head == null) {
							_this45.pushmod = true;
						}
					} else {
						old1 = pre2.next;
						ret15 = old1.next;
						pre2.next = ret15;
						if(ret15 == null) {
							_this45.pushmod = true;
						}
					}
					var o3 = old1;
					o3.elt = null;
					o3.next = ZNPNode_ZPP_AABBPair.zpp_pool;
					ZNPNode_ZPP_AABBPair.zpp_pool = o3;
					_this45.modified = true;
					_this45.length--;
					_this45.pushmod = true;
					break;
				}
				pre2 = cur2;
				cur2 = cur2.next;
			}
			var nxt = cur.next;
			if(cur.arb != null) {
				cur.arb.pair = null;
			}
			cur.arb = null;
			var o4 = cur;
			o4.n1 = o4.n2 = null;
			o4.sleeping = false;
			o4.next = ZPP_AABBPair.zpp_pool;
			ZPP_AABBPair.zpp_pool = o4;
			cur = nxt;
			continue;
		}
		var s11 = cur.n1.shape;
		var b110 = s11.body;
		var s21 = cur.n2.shape;
		var b23 = s21.body;
		if(!cur.first) {
			if((b110.component.sleeping || b110.type == 1) && (b23.component.sleeping || b23.type == 1)) {
				cur.sleeping = true;
				if(pre == null) {
					this.pairs = cur.next;
				} else {
					pre.next = cur.next;
				}
				cur = cur.next;
				continue;
			}
		}
		cur.first = false;
		var _this46 = s11.aabb;
		var x27 = s21.aabb;
		if(x27.miny <= _this46.maxy && _this46.miny <= x27.maxy && x27.minx <= _this46.maxx && _this46.minx <= x27.maxx) {
			var oarb = cur.arb;
			if(discrete) {
				cur.arb = space.narrowPhase(s11,s21,b110.type != 2 || b23.type != 2,cur.arb,false);
			} else {
				cur.arb = space.continuousEvent(s11,s21,b110.type != 2 || b23.type != 2,cur.arb,false);
			}
			if(cur.arb == null) {
				if(oarb != null) {
					oarb.pair = null;
				}
			} else {
				cur.arb.pair = cur;
			}
		}
		pre = cur;
		cur = cur.next;
	}
};
ZPP_DynAABBPhase.prototype.clear = function() {
	while(this.syncs != null) {
		var next = this.syncs.snext;
		this.syncs.snext = null;
		if(this.syncs.first_sync) {
			this.syncs.shape.node = null;
			this.syncs.shape.removedFromSpace();
			this.syncs.shape = null;
		}
		this.syncs = next;
	}
	while(this.moves != null) {
		var next1 = this.moves.mnext;
		this.moves.mnext = null;
		if(this.moves.first_sync) {
			this.moves.shape.node = null;
			this.moves.shape.removedFromSpace();
			this.moves.shape = null;
		}
		this.moves = next1;
	}
	while(this.pairs != null) {
		var nxt = this.pairs.next;
		if(this.pairs.arb != null) {
			this.pairs.arb.pair = null;
		}
		this.pairs.arb = null;
		var _this = this.pairs.n1.shape.pairs;
		var obj = this.pairs;
		var pre = null;
		var cur = _this.head;
		while(cur != null) {
			if(cur.elt == obj) {
				var old;
				var ret;
				if(pre == null) {
					old = _this.head;
					ret = old.next;
					_this.head = ret;
					if(_this.head == null) {
						_this.pushmod = true;
					}
				} else {
					old = pre.next;
					ret = old.next;
					pre.next = ret;
					if(ret == null) {
						_this.pushmod = true;
					}
				}
				var o = old;
				o.elt = null;
				o.next = ZNPNode_ZPP_AABBPair.zpp_pool;
				ZNPNode_ZPP_AABBPair.zpp_pool = o;
				_this.modified = true;
				_this.length--;
				_this.pushmod = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		var _this1 = this.pairs.n2.shape.pairs;
		var obj1 = this.pairs;
		var pre1 = null;
		var cur1 = _this1.head;
		while(cur1 != null) {
			if(cur1.elt == obj1) {
				var old1;
				var ret1;
				if(pre1 == null) {
					old1 = _this1.head;
					ret1 = old1.next;
					_this1.head = ret1;
					if(_this1.head == null) {
						_this1.pushmod = true;
					}
				} else {
					old1 = pre1.next;
					ret1 = old1.next;
					pre1.next = ret1;
					if(ret1 == null) {
						_this1.pushmod = true;
					}
				}
				var o1 = old1;
				o1.elt = null;
				o1.next = ZNPNode_ZPP_AABBPair.zpp_pool;
				ZNPNode_ZPP_AABBPair.zpp_pool = o1;
				_this1.modified = true;
				_this1.length--;
				_this1.pushmod = true;
				break;
			}
			pre1 = cur1;
			cur1 = cur1.next;
		}
		var o2 = this.pairs;
		o2.n1 = o2.n2 = null;
		o2.sleeping = false;
		o2.next = ZPP_AABBPair.zpp_pool;
		ZPP_AABBPair.zpp_pool = o2;
		this.pairs = nxt;
	}
	this.dtree.clear();
	this.stree.clear();
};
ZPP_DynAABBPhase.prototype.treeStack = null;
ZPP_DynAABBPhase.prototype.shapesUnderPoint = function(x,y,filter,output) {
	this.sync_broadphase();
	var ret;
	if(ZPP_Vec2.zpp_pool == null) {
		ret = new ZPP_Vec2();
	} else {
		ret = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.weak = false;
	ret._immutable = false;
	ret.x = x;
	ret.y = y;
	var v = ret;
	var ret1 = output == null?new ShapeList():output;
	if(this.stree.root != null) {
		if(this.treeStack == null) {
			this.treeStack = new ZNPList_ZPP_AABBNode();
		}
		this.treeStack.add(this.stree.root);
		while(this.treeStack.head != null) {
			var node = this.treeStack.pop_unsafe();
			var _this = node.aabb;
			if(v.x >= _this.minx && v.x <= _this.maxx && v.y >= _this.miny && v.y <= _this.maxy) {
				if(node.child1 == null) {
					var tmp;
					if(filter != null) {
						var _this1 = node.shape.filter;
						if((_this1.collisionMask & filter.collisionGroup) != 0) {
							tmp = (filter.collisionMask & _this1.collisionGroup) != 0;
						} else {
							tmp = false;
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						if(node.shape.type == 0) {
							if(ZPP_Collide.circleContains(node.shape.circle,v)) {
								ret1.push(node.shape.outer);
							}
						} else if(ZPP_Collide.polyContains(node.shape.polygon,v)) {
							ret1.push(node.shape.outer);
						}
					}
				} else {
					if(node.child1 != null) {
						this.treeStack.add(node.child1);
					}
					if(node.child2 != null) {
						this.treeStack.add(node.child2);
					}
				}
			}
		}
	}
	if(this.dtree.root != null) {
		if(this.treeStack == null) {
			this.treeStack = new ZNPList_ZPP_AABBNode();
		}
		this.treeStack.add(this.dtree.root);
		while(this.treeStack.head != null) {
			var node1 = this.treeStack.pop_unsafe();
			var _this2 = node1.aabb;
			if(v.x >= _this2.minx && v.x <= _this2.maxx && v.y >= _this2.miny && v.y <= _this2.maxy) {
				if(node1.child1 == null) {
					var tmp1;
					if(filter != null) {
						var _this3 = node1.shape.filter;
						if((_this3.collisionMask & filter.collisionGroup) != 0) {
							tmp1 = (filter.collisionMask & _this3.collisionGroup) != 0;
						} else {
							tmp1 = false;
						}
					} else {
						tmp1 = true;
					}
					if(tmp1) {
						if(node1.shape.type == 0) {
							if(ZPP_Collide.circleContains(node1.shape.circle,v)) {
								ret1.push(node1.shape.outer);
							}
						} else if(ZPP_Collide.polyContains(node1.shape.polygon,v)) {
							ret1.push(node1.shape.outer);
						}
					}
				} else {
					if(node1.child1 != null) {
						this.treeStack.add(node1.child1);
					}
					if(node1.child2 != null) {
						this.treeStack.add(node1.child2);
					}
				}
			}
		}
	}
	if(v.outer != null) {
		v.outer.zpp_inner = null;
		v.outer = null;
	}
	v._isimmutable = null;
	v._validate = null;
	v._invalidate = null;
	v.next = ZPP_Vec2.zpp_pool;
	ZPP_Vec2.zpp_pool = v;
	return ret1;
};
ZPP_DynAABBPhase.prototype.bodiesUnderPoint = function(x,y,filter,output) {
	this.sync_broadphase();
	var ret;
	if(ZPP_Vec2.zpp_pool == null) {
		ret = new ZPP_Vec2();
	} else {
		ret = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.weak = false;
	ret._immutable = false;
	ret.x = x;
	ret.y = y;
	var v = ret;
	var ret1 = output == null?new BodyList():output;
	if(this.stree.root != null) {
		if(this.treeStack == null) {
			this.treeStack = new ZNPList_ZPP_AABBNode();
		}
		this.treeStack.add(this.stree.root);
		while(this.treeStack.head != null) {
			var node = this.treeStack.pop_unsafe();
			var _this = node.aabb;
			if(v.x >= _this.minx && v.x <= _this.maxx && v.y >= _this.miny && v.y <= _this.maxy) {
				if(node.child1 == null) {
					var body = node.shape.body.outer;
					if(!ret1.has(body)) {
						var tmp;
						if(filter != null) {
							var _this1 = node.shape.filter;
							if((_this1.collisionMask & filter.collisionGroup) != 0) {
								tmp = (filter.collisionMask & _this1.collisionGroup) != 0;
							} else {
								tmp = false;
							}
						} else {
							tmp = true;
						}
						if(tmp) {
							if(node.shape.type == 0) {
								if(ZPP_Collide.circleContains(node.shape.circle,v)) {
									ret1.push(body);
								}
							} else if(ZPP_Collide.polyContains(node.shape.polygon,v)) {
								ret1.push(body);
							}
						}
					}
				} else {
					if(node.child1 != null) {
						this.treeStack.add(node.child1);
					}
					if(node.child2 != null) {
						this.treeStack.add(node.child2);
					}
				}
			}
		}
	}
	if(this.dtree.root != null) {
		if(this.treeStack == null) {
			this.treeStack = new ZNPList_ZPP_AABBNode();
		}
		this.treeStack.add(this.dtree.root);
		while(this.treeStack.head != null) {
			var node1 = this.treeStack.pop_unsafe();
			var _this2 = node1.aabb;
			if(v.x >= _this2.minx && v.x <= _this2.maxx && v.y >= _this2.miny && v.y <= _this2.maxy) {
				if(node1.child1 == null) {
					var body1 = node1.shape.body.outer;
					if(!ret1.has(body1)) {
						var tmp1;
						if(filter != null) {
							var _this3 = node1.shape.filter;
							if((_this3.collisionMask & filter.collisionGroup) != 0) {
								tmp1 = (filter.collisionMask & _this3.collisionGroup) != 0;
							} else {
								tmp1 = false;
							}
						} else {
							tmp1 = true;
						}
						if(tmp1) {
							if(node1.shape.type == 0) {
								if(ZPP_Collide.circleContains(node1.shape.circle,v)) {
									ret1.push(body1);
								}
							} else if(ZPP_Collide.polyContains(node1.shape.polygon,v)) {
								ret1.push(body1);
							}
						}
					}
				} else {
					if(node1.child1 != null) {
						this.treeStack.add(node1.child1);
					}
					if(node1.child2 != null) {
						this.treeStack.add(node1.child2);
					}
				}
			}
		}
	}
	if(v.outer != null) {
		v.outer.zpp_inner = null;
		v.outer = null;
	}
	v._isimmutable = null;
	v._validate = null;
	v._invalidate = null;
	v.next = ZPP_Vec2.zpp_pool;
	ZPP_Vec2.zpp_pool = v;
	return ret1;
};
ZPP_DynAABBPhase.prototype.treeStack2 = null;
ZPP_DynAABBPhase.prototype.shapesInAABB = function(aabb,strict,containment,filter,output) {
	this.sync_broadphase();
	this.updateAABBShape(aabb);
	var ab = this.aabbShape.zpp_inner.aabb;
	var ret = output == null?new ShapeList():output;
	if(this.stree.root != null) {
		if(this.treeStack == null) {
			this.treeStack = new ZNPList_ZPP_AABBNode();
		}
		this.treeStack.add(this.stree.root);
		while(this.treeStack.head != null) {
			var node = this.treeStack.pop_unsafe();
			var x = node.aabb;
			if(x.minx >= ab.minx && x.miny >= ab.miny && x.maxx <= ab.maxx && x.maxy <= ab.maxy) {
				if(node.child1 == null) {
					var tmp;
					if(filter != null) {
						var _this = node.shape.filter;
						if((_this.collisionMask & filter.collisionGroup) != 0) {
							tmp = (filter.collisionMask & _this.collisionGroup) != 0;
						} else {
							tmp = false;
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						ret.push(node.shape.outer);
					}
				} else {
					if(this.treeStack2 == null) {
						this.treeStack2 = new ZNPList_ZPP_AABBNode();
					}
					this.treeStack2.add(node);
					while(this.treeStack2.head != null) {
						var node1 = this.treeStack2.pop_unsafe();
						if(node1.child1 == null) {
							var tmp1;
							if(filter != null) {
								var _this1 = node1.shape.filter;
								if((_this1.collisionMask & filter.collisionGroup) != 0) {
									tmp1 = (filter.collisionMask & _this1.collisionGroup) != 0;
								} else {
									tmp1 = false;
								}
							} else {
								tmp1 = true;
							}
							if(tmp1) {
								ret.push(node1.shape.outer);
							}
						} else {
							if(node1.child1 != null) {
								this.treeStack2.add(node1.child1);
							}
							if(node1.child2 != null) {
								this.treeStack2.add(node1.child2);
							}
						}
					}
				}
			} else {
				var _this2 = node.aabb;
				if(ab.miny <= _this2.maxy && _this2.miny <= ab.maxy && ab.minx <= _this2.maxx && _this2.minx <= ab.maxx) {
					if(node.child1 == null) {
						var tmp2;
						if(filter != null) {
							var _this3 = node.shape.filter;
							if((_this3.collisionMask & filter.collisionGroup) != 0) {
								tmp2 = (filter.collisionMask & _this3.collisionGroup) != 0;
							} else {
								tmp2 = false;
							}
						} else {
							tmp2 = true;
						}
						if(tmp2) {
							if(strict) {
								if(containment) {
									if(ZPP_Collide.containTest(this.aabbShape.zpp_inner,node.shape)) {
										ret.push(node.shape.outer);
									}
								} else {
									var x1 = node.shape.aabb;
									if(x1.minx >= ab.minx && x1.miny >= ab.miny && x1.maxx <= ab.maxx && x1.maxy <= ab.maxy) {
										ret.push(node.shape.outer);
									} else if(ZPP_Collide.testCollide_safe(node.shape,this.aabbShape.zpp_inner)) {
										ret.push(node.shape.outer);
									}
								}
							} else {
								var tmp3;
								if(!(!containment)) {
									var x2 = node.shape.aabb;
									if(x2.minx >= ab.minx && x2.miny >= ab.miny && x2.maxx <= ab.maxx) {
										tmp3 = x2.maxy <= ab.maxy;
									} else {
										tmp3 = false;
									}
								} else {
									tmp3 = true;
								}
								if(tmp3) {
									ret.push(node.shape.outer);
								}
							}
						}
					} else {
						if(node.child1 != null) {
							this.treeStack.add(node.child1);
						}
						if(node.child2 != null) {
							this.treeStack.add(node.child2);
						}
					}
				}
			}
		}
	}
	if(this.dtree.root != null) {
		if(this.treeStack == null) {
			this.treeStack = new ZNPList_ZPP_AABBNode();
		}
		this.treeStack.add(this.dtree.root);
		while(this.treeStack.head != null) {
			var node2 = this.treeStack.pop_unsafe();
			var x3 = node2.aabb;
			if(x3.minx >= ab.minx && x3.miny >= ab.miny && x3.maxx <= ab.maxx && x3.maxy <= ab.maxy) {
				if(node2.child1 == null) {
					var tmp4;
					if(filter != null) {
						var _this4 = node2.shape.filter;
						if((_this4.collisionMask & filter.collisionGroup) != 0) {
							tmp4 = (filter.collisionMask & _this4.collisionGroup) != 0;
						} else {
							tmp4 = false;
						}
					} else {
						tmp4 = true;
					}
					if(tmp4) {
						ret.push(node2.shape.outer);
					}
				} else {
					if(this.treeStack2 == null) {
						this.treeStack2 = new ZNPList_ZPP_AABBNode();
					}
					this.treeStack2.add(node2);
					while(this.treeStack2.head != null) {
						var node3 = this.treeStack2.pop_unsafe();
						if(node3.child1 == null) {
							var tmp5;
							if(filter != null) {
								var _this5 = node3.shape.filter;
								if((_this5.collisionMask & filter.collisionGroup) != 0) {
									tmp5 = (filter.collisionMask & _this5.collisionGroup) != 0;
								} else {
									tmp5 = false;
								}
							} else {
								tmp5 = true;
							}
							if(tmp5) {
								ret.push(node3.shape.outer);
							}
						} else {
							if(node3.child1 != null) {
								this.treeStack2.add(node3.child1);
							}
							if(node3.child2 != null) {
								this.treeStack2.add(node3.child2);
							}
						}
					}
				}
			} else {
				var _this6 = node2.aabb;
				if(ab.miny <= _this6.maxy && _this6.miny <= ab.maxy && ab.minx <= _this6.maxx && _this6.minx <= ab.maxx) {
					if(node2.child1 == null) {
						var tmp6;
						if(filter != null) {
							var _this7 = node2.shape.filter;
							if((_this7.collisionMask & filter.collisionGroup) != 0) {
								tmp6 = (filter.collisionMask & _this7.collisionGroup) != 0;
							} else {
								tmp6 = false;
							}
						} else {
							tmp6 = true;
						}
						if(tmp6) {
							if(strict) {
								if(containment) {
									if(ZPP_Collide.containTest(this.aabbShape.zpp_inner,node2.shape)) {
										ret.push(node2.shape.outer);
									}
								} else {
									var x4 = node2.shape.aabb;
									if(x4.minx >= ab.minx && x4.miny >= ab.miny && x4.maxx <= ab.maxx && x4.maxy <= ab.maxy) {
										ret.push(node2.shape.outer);
									} else if(ZPP_Collide.testCollide_safe(node2.shape,this.aabbShape.zpp_inner)) {
										ret.push(node2.shape.outer);
									}
								}
							} else {
								var tmp7;
								if(!(!containment)) {
									var x5 = node2.shape.aabb;
									if(x5.minx >= ab.minx && x5.miny >= ab.miny && x5.maxx <= ab.maxx) {
										tmp7 = x5.maxy <= ab.maxy;
									} else {
										tmp7 = false;
									}
								} else {
									tmp7 = true;
								}
								if(tmp7) {
									ret.push(node2.shape.outer);
								}
							}
						}
					} else {
						if(node2.child1 != null) {
							this.treeStack.add(node2.child1);
						}
						if(node2.child2 != null) {
							this.treeStack.add(node2.child2);
						}
					}
				}
			}
		}
	}
	return ret;
};
ZPP_DynAABBPhase.prototype.failed = null;
ZPP_DynAABBPhase.prototype.bodiesInAABB = function(aabb,strict,containment,filter,output) {
	this.sync_broadphase();
	this.updateAABBShape(aabb);
	var ab = this.aabbShape.zpp_inner.aabb;
	var ret = output == null?new BodyList():output;
	if(this.failed == null) {
		this.failed = new BodyList();
	}
	if(this.stree.root != null) {
		if(this.treeStack == null) {
			this.treeStack = new ZNPList_ZPP_AABBNode();
		}
		this.treeStack.add(this.stree.root);
		while(this.treeStack.head != null) {
			var node = this.treeStack.pop_unsafe();
			var x = node.aabb;
			if(x.minx >= ab.minx && x.miny >= ab.miny && x.maxx <= ab.maxx && x.maxy <= ab.maxy) {
				if(node.child1 == null) {
					var tmp;
					if(filter != null) {
						var _this = node.shape.filter;
						if((_this.collisionMask & filter.collisionGroup) != 0) {
							tmp = (filter.collisionMask & _this.collisionGroup) != 0;
						} else {
							tmp = false;
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						var body = node.shape.body.outer;
						if(!ret.has(body)) {
							ret.push(body);
						}
					}
				} else {
					if(this.treeStack2 == null) {
						this.treeStack2 = new ZNPList_ZPP_AABBNode();
					}
					this.treeStack2.add(node);
					while(this.treeStack2.head != null) {
						var node1 = this.treeStack2.pop_unsafe();
						if(node1.child1 == null) {
							var tmp1;
							if(filter != null) {
								var _this1 = node1.shape.filter;
								if((_this1.collisionMask & filter.collisionGroup) != 0) {
									tmp1 = (filter.collisionMask & _this1.collisionGroup) != 0;
								} else {
									tmp1 = false;
								}
							} else {
								tmp1 = true;
							}
							if(tmp1) {
								var body1 = node1.shape.body.outer;
								if(!ret.has(body1)) {
									ret.push(body1);
								}
							}
						} else {
							if(node1.child1 != null) {
								this.treeStack2.add(node1.child1);
							}
							if(node1.child2 != null) {
								this.treeStack2.add(node1.child2);
							}
						}
					}
				}
			} else {
				var _this2 = node.aabb;
				if(ab.miny <= _this2.maxy && _this2.miny <= ab.maxy && ab.minx <= _this2.maxx && _this2.minx <= ab.maxx) {
					if(node.child1 == null) {
						var body2 = node.shape.body.outer;
						var tmp2;
						if(filter != null) {
							var _this3 = node.shape.filter;
							if((_this3.collisionMask & filter.collisionGroup) != 0) {
								tmp2 = (filter.collisionMask & _this3.collisionGroup) != 0;
							} else {
								tmp2 = false;
							}
						} else {
							tmp2 = true;
						}
						if(tmp2) {
							if(strict) {
								if(containment) {
									if(!this.failed.has(body2)) {
										var col = ZPP_Collide.containTest(this.aabbShape.zpp_inner,node.shape);
										if(!ret.has(body2) && col) {
											ret.push(body2);
										} else if(!col) {
											ret.remove(body2);
											this.failed.push(body2);
										}
									}
								} else if(!ret.has(body2) && ZPP_Collide.testCollide_safe(node.shape,this.aabbShape.zpp_inner)) {
									ret.push(body2);
								}
							} else if(containment) {
								if(!this.failed.has(body2)) {
									var x1 = node.shape.aabb;
									var col1 = x1.minx >= ab.minx && x1.miny >= ab.miny && x1.maxx <= ab.maxx && x1.maxy <= ab.maxy;
									if(!ret.has(body2) && col1) {
										ret.push(body2);
									} else if(!col1) {
										ret.remove(body2);
										this.failed.push(body2);
									}
								}
							} else {
								var tmp3;
								if(!ret.has(body2)) {
									var x2 = node.shape.aabb;
									if(x2.minx >= ab.minx && x2.miny >= ab.miny && x2.maxx <= ab.maxx) {
										tmp3 = x2.maxy <= ab.maxy;
									} else {
										tmp3 = false;
									}
								} else {
									tmp3 = false;
								}
								if(tmp3) {
									ret.push(body2);
								}
							}
						}
					} else {
						if(node.child1 != null) {
							this.treeStack.add(node.child1);
						}
						if(node.child2 != null) {
							this.treeStack.add(node.child2);
						}
					}
				}
			}
		}
	}
	if(this.dtree.root != null) {
		if(this.treeStack == null) {
			this.treeStack = new ZNPList_ZPP_AABBNode();
		}
		this.treeStack.add(this.dtree.root);
		while(this.treeStack.head != null) {
			var node2 = this.treeStack.pop_unsafe();
			var x3 = node2.aabb;
			if(x3.minx >= ab.minx && x3.miny >= ab.miny && x3.maxx <= ab.maxx && x3.maxy <= ab.maxy) {
				if(node2.child1 == null) {
					var tmp4;
					if(filter != null) {
						var _this4 = node2.shape.filter;
						if((_this4.collisionMask & filter.collisionGroup) != 0) {
							tmp4 = (filter.collisionMask & _this4.collisionGroup) != 0;
						} else {
							tmp4 = false;
						}
					} else {
						tmp4 = true;
					}
					if(tmp4) {
						var body3 = node2.shape.body.outer;
						if(!ret.has(body3)) {
							ret.push(body3);
						}
					}
				} else {
					if(this.treeStack2 == null) {
						this.treeStack2 = new ZNPList_ZPP_AABBNode();
					}
					this.treeStack2.add(node2);
					while(this.treeStack2.head != null) {
						var node3 = this.treeStack2.pop_unsafe();
						if(node3.child1 == null) {
							var tmp5;
							if(filter != null) {
								var _this5 = node3.shape.filter;
								if((_this5.collisionMask & filter.collisionGroup) != 0) {
									tmp5 = (filter.collisionMask & _this5.collisionGroup) != 0;
								} else {
									tmp5 = false;
								}
							} else {
								tmp5 = true;
							}
							if(tmp5) {
								var body4 = node3.shape.body.outer;
								if(!ret.has(body4)) {
									ret.push(body4);
								}
							}
						} else {
							if(node3.child1 != null) {
								this.treeStack2.add(node3.child1);
							}
							if(node3.child2 != null) {
								this.treeStack2.add(node3.child2);
							}
						}
					}
				}
			} else {
				var _this6 = node2.aabb;
				if(ab.miny <= _this6.maxy && _this6.miny <= ab.maxy && ab.minx <= _this6.maxx && _this6.minx <= ab.maxx) {
					if(node2.child1 == null) {
						var body5 = node2.shape.body.outer;
						var tmp6;
						if(filter != null) {
							var _this7 = node2.shape.filter;
							if((_this7.collisionMask & filter.collisionGroup) != 0) {
								tmp6 = (filter.collisionMask & _this7.collisionGroup) != 0;
							} else {
								tmp6 = false;
							}
						} else {
							tmp6 = true;
						}
						if(tmp6) {
							if(strict) {
								if(containment) {
									if(!this.failed.has(body5)) {
										var col2 = ZPP_Collide.containTest(this.aabbShape.zpp_inner,node2.shape);
										if(!ret.has(body5) && col2) {
											ret.push(body5);
										} else if(!col2) {
											ret.remove(body5);
											this.failed.push(body5);
										}
									}
								} else if(!ret.has(body5) && ZPP_Collide.testCollide_safe(node2.shape,this.aabbShape.zpp_inner)) {
									ret.push(body5);
								}
							} else if(containment) {
								if(!this.failed.has(body5)) {
									var x4 = node2.shape.aabb;
									var col3 = x4.minx >= ab.minx && x4.miny >= ab.miny && x4.maxx <= ab.maxx && x4.maxy <= ab.maxy;
									if(!ret.has(body5) && col3) {
										ret.push(body5);
									} else if(!col3) {
										ret.remove(body5);
										this.failed.push(body5);
									}
								}
							} else {
								var tmp7;
								if(!ret.has(body5)) {
									var x5 = node2.shape.aabb;
									if(x5.minx >= ab.minx && x5.miny >= ab.miny && x5.maxx <= ab.maxx) {
										tmp7 = x5.maxy <= ab.maxy;
									} else {
										tmp7 = false;
									}
								} else {
									tmp7 = false;
								}
								if(tmp7) {
									ret.push(body5);
								}
							}
						}
					} else {
						if(node2.child1 != null) {
							this.treeStack.add(node2.child1);
						}
						if(node2.child2 != null) {
							this.treeStack.add(node2.child2);
						}
					}
				}
			}
		}
	}
	this.failed.clear();
	return ret;
};
ZPP_DynAABBPhase.prototype.shapesInCircle = function(x,y,r,containment,filter,output) {
	this.sync_broadphase();
	this.updateCircShape(x,y,r);
	var ab = this.circShape.zpp_inner.aabb;
	var ret = output == null?new ShapeList():output;
	if(this.stree.root != null) {
		if(this.treeStack == null) {
			this.treeStack = new ZNPList_ZPP_AABBNode();
		}
		this.treeStack.add(this.stree.root);
		while(this.treeStack.head != null) {
			var node = this.treeStack.pop_unsafe();
			var _this = node.aabb;
			if(ab.miny <= _this.maxy && _this.miny <= ab.maxy && ab.minx <= _this.maxx && _this.minx <= ab.maxx) {
				if(node.child1 == null) {
					var tmp;
					if(filter != null) {
						var _this1 = node.shape.filter;
						if((_this1.collisionMask & filter.collisionGroup) != 0) {
							tmp = (filter.collisionMask & _this1.collisionGroup) != 0;
						} else {
							tmp = false;
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						if(containment) {
							if(ZPP_Collide.containTest(this.circShape.zpp_inner,node.shape)) {
								ret.push(node.shape.outer);
							}
						} else if(ZPP_Collide.testCollide_safe(node.shape,this.circShape.zpp_inner)) {
							ret.push(node.shape.outer);
						}
					}
				} else {
					if(node.child1 != null) {
						this.treeStack.add(node.child1);
					}
					if(node.child2 != null) {
						this.treeStack.add(node.child2);
					}
				}
			}
		}
	}
	if(this.dtree.root != null) {
		if(this.treeStack == null) {
			this.treeStack = new ZNPList_ZPP_AABBNode();
		}
		this.treeStack.add(this.dtree.root);
		while(this.treeStack.head != null) {
			var node1 = this.treeStack.pop_unsafe();
			var _this2 = node1.aabb;
			if(ab.miny <= _this2.maxy && _this2.miny <= ab.maxy && ab.minx <= _this2.maxx && _this2.minx <= ab.maxx) {
				if(node1.child1 == null) {
					var tmp1;
					if(filter != null) {
						var _this3 = node1.shape.filter;
						if((_this3.collisionMask & filter.collisionGroup) != 0) {
							tmp1 = (filter.collisionMask & _this3.collisionGroup) != 0;
						} else {
							tmp1 = false;
						}
					} else {
						tmp1 = true;
					}
					if(tmp1) {
						if(containment) {
							if(ZPP_Collide.containTest(this.circShape.zpp_inner,node1.shape)) {
								ret.push(node1.shape.outer);
							}
						} else if(ZPP_Collide.testCollide_safe(node1.shape,this.circShape.zpp_inner)) {
							ret.push(node1.shape.outer);
						}
					}
				} else {
					if(node1.child1 != null) {
						this.treeStack.add(node1.child1);
					}
					if(node1.child2 != null) {
						this.treeStack.add(node1.child2);
					}
				}
			}
		}
	}
	return ret;
};
ZPP_DynAABBPhase.prototype.bodiesInCircle = function(x,y,r,containment,filter,output) {
	this.sync_broadphase();
	this.updateCircShape(x,y,r);
	var ab = this.circShape.zpp_inner.aabb;
	var ret = output == null?new BodyList():output;
	if(this.failed == null) {
		this.failed = new BodyList();
	}
	if(this.stree.root != null) {
		if(this.treeStack == null) {
			this.treeStack = new ZNPList_ZPP_AABBNode();
		}
		this.treeStack.add(this.stree.root);
		while(this.treeStack.head != null) {
			var node = this.treeStack.pop_unsafe();
			var _this = node.aabb;
			if(ab.miny <= _this.maxy && _this.miny <= ab.maxy && ab.minx <= _this.maxx && _this.minx <= ab.maxx) {
				if(node.child1 == null) {
					var body = node.shape.body.outer;
					var tmp;
					if(filter != null) {
						var _this1 = node.shape.filter;
						if((_this1.collisionMask & filter.collisionGroup) != 0) {
							tmp = (filter.collisionMask & _this1.collisionGroup) != 0;
						} else {
							tmp = false;
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						if(containment) {
							if(!this.failed.has(body)) {
								var col = ZPP_Collide.containTest(this.circShape.zpp_inner,node.shape);
								if(!ret.has(body) && col) {
									ret.push(body);
								} else if(!col) {
									ret.remove(body);
									this.failed.push(body);
								}
							}
						} else if(!ret.has(body) && ZPP_Collide.testCollide_safe(node.shape,this.circShape.zpp_inner)) {
							ret.push(body);
						}
					}
				} else {
					if(node.child1 != null) {
						this.treeStack.add(node.child1);
					}
					if(node.child2 != null) {
						this.treeStack.add(node.child2);
					}
				}
			}
		}
	}
	if(this.dtree.root != null) {
		if(this.treeStack == null) {
			this.treeStack = new ZNPList_ZPP_AABBNode();
		}
		this.treeStack.add(this.dtree.root);
		while(this.treeStack.head != null) {
			var node1 = this.treeStack.pop_unsafe();
			var _this2 = node1.aabb;
			if(ab.miny <= _this2.maxy && _this2.miny <= ab.maxy && ab.minx <= _this2.maxx && _this2.minx <= ab.maxx) {
				if(node1.child1 == null) {
					var body1 = node1.shape.body.outer;
					var tmp1;
					if(filter != null) {
						var _this3 = node1.shape.filter;
						if((_this3.collisionMask & filter.collisionGroup) != 0) {
							tmp1 = (filter.collisionMask & _this3.collisionGroup) != 0;
						} else {
							tmp1 = false;
						}
					} else {
						tmp1 = true;
					}
					if(tmp1) {
						if(containment) {
							if(!this.failed.has(body1)) {
								var col1 = ZPP_Collide.containTest(this.circShape.zpp_inner,node1.shape);
								if(!ret.has(body1) && col1) {
									ret.push(body1);
								} else if(!col1) {
									ret.remove(body1);
									this.failed.push(body1);
								}
							}
						} else if(!ret.has(body1) && ZPP_Collide.testCollide_safe(node1.shape,this.circShape.zpp_inner)) {
							ret.push(body1);
						}
					}
				} else {
					if(node1.child1 != null) {
						this.treeStack.add(node1.child1);
					}
					if(node1.child2 != null) {
						this.treeStack.add(node1.child2);
					}
				}
			}
		}
	}
	this.failed.clear();
	return ret;
};
ZPP_DynAABBPhase.prototype.shapesInShape = function(shp,containment,filter,output) {
	this.sync_broadphase();
	this.validateShape(shp);
	var ab = shp.aabb;
	var ret = output == null?new ShapeList():output;
	if(this.stree.root != null) {
		if(this.treeStack == null) {
			this.treeStack = new ZNPList_ZPP_AABBNode();
		}
		this.treeStack.add(this.stree.root);
		while(this.treeStack.head != null) {
			var node = this.treeStack.pop_unsafe();
			var _this = node.aabb;
			if(ab.miny <= _this.maxy && _this.miny <= ab.maxy && ab.minx <= _this.maxx && _this.minx <= ab.maxx) {
				if(node.child1 == null) {
					var tmp;
					if(filter != null) {
						var _this1 = node.shape.filter;
						if((_this1.collisionMask & filter.collisionGroup) != 0) {
							tmp = (filter.collisionMask & _this1.collisionGroup) != 0;
						} else {
							tmp = false;
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						if(containment) {
							if(ZPP_Collide.containTest(shp,node.shape)) {
								ret.push(node.shape.outer);
							}
						} else if(ZPP_Collide.testCollide_safe(node.shape,shp)) {
							ret.push(node.shape.outer);
						}
					}
				} else {
					if(node.child1 != null) {
						this.treeStack.add(node.child1);
					}
					if(node.child2 != null) {
						this.treeStack.add(node.child2);
					}
				}
			}
		}
	}
	if(this.dtree.root != null) {
		if(this.treeStack == null) {
			this.treeStack = new ZNPList_ZPP_AABBNode();
		}
		this.treeStack.add(this.dtree.root);
		while(this.treeStack.head != null) {
			var node1 = this.treeStack.pop_unsafe();
			var _this2 = node1.aabb;
			if(ab.miny <= _this2.maxy && _this2.miny <= ab.maxy && ab.minx <= _this2.maxx && _this2.minx <= ab.maxx) {
				if(node1.child1 == null) {
					var tmp1;
					if(filter != null) {
						var _this3 = node1.shape.filter;
						if((_this3.collisionMask & filter.collisionGroup) != 0) {
							tmp1 = (filter.collisionMask & _this3.collisionGroup) != 0;
						} else {
							tmp1 = false;
						}
					} else {
						tmp1 = true;
					}
					if(tmp1) {
						if(containment) {
							if(ZPP_Collide.containTest(shp,node1.shape)) {
								ret.push(node1.shape.outer);
							}
						} else if(ZPP_Collide.testCollide_safe(node1.shape,shp)) {
							ret.push(node1.shape.outer);
						}
					}
				} else {
					if(node1.child1 != null) {
						this.treeStack.add(node1.child1);
					}
					if(node1.child2 != null) {
						this.treeStack.add(node1.child2);
					}
				}
			}
		}
	}
	return ret;
};
ZPP_DynAABBPhase.prototype.bodiesInShape = function(shp,containment,filter,output) {
	this.sync_broadphase();
	this.validateShape(shp);
	var ab = shp.aabb;
	var ret = output == null?new BodyList():output;
	if(this.failed == null) {
		this.failed = new BodyList();
	}
	if(this.stree.root != null) {
		if(this.treeStack == null) {
			this.treeStack = new ZNPList_ZPP_AABBNode();
		}
		this.treeStack.add(this.stree.root);
		while(this.treeStack.head != null) {
			var node = this.treeStack.pop_unsafe();
			var _this = node.aabb;
			if(ab.miny <= _this.maxy && _this.miny <= ab.maxy && ab.minx <= _this.maxx && _this.minx <= ab.maxx) {
				if(node.child1 == null) {
					var body = node.shape.body.outer;
					var tmp;
					if(filter != null) {
						var _this1 = node.shape.filter;
						if((_this1.collisionMask & filter.collisionGroup) != 0) {
							tmp = (filter.collisionMask & _this1.collisionGroup) != 0;
						} else {
							tmp = false;
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						if(containment) {
							if(!this.failed.has(body)) {
								var col = ZPP_Collide.containTest(shp,node.shape);
								if(!ret.has(body) && col) {
									ret.push(body);
								} else if(!col) {
									ret.remove(body);
									this.failed.push(body);
								}
							}
						} else if(!ret.has(body) && ZPP_Collide.testCollide_safe(node.shape,shp)) {
							ret.push(body);
						}
					}
				} else {
					if(node.child1 != null) {
						this.treeStack.add(node.child1);
					}
					if(node.child2 != null) {
						this.treeStack.add(node.child2);
					}
				}
			}
		}
	}
	if(this.dtree.root != null) {
		if(this.treeStack == null) {
			this.treeStack = new ZNPList_ZPP_AABBNode();
		}
		this.treeStack.add(this.dtree.root);
		while(this.treeStack.head != null) {
			var node1 = this.treeStack.pop_unsafe();
			var _this2 = node1.aabb;
			if(ab.miny <= _this2.maxy && _this2.miny <= ab.maxy && ab.minx <= _this2.maxx && _this2.minx <= ab.maxx) {
				if(node1.child1 == null) {
					var body1 = node1.shape.body.outer;
					var tmp1;
					if(filter != null) {
						var _this3 = node1.shape.filter;
						if((_this3.collisionMask & filter.collisionGroup) != 0) {
							tmp1 = (filter.collisionMask & _this3.collisionGroup) != 0;
						} else {
							tmp1 = false;
						}
					} else {
						tmp1 = true;
					}
					if(tmp1) {
						if(containment) {
							if(!this.failed.has(body1)) {
								var col1 = ZPP_Collide.containTest(shp,node1.shape);
								if(!ret.has(body1) && col1) {
									ret.push(body1);
								} else if(!col1) {
									ret.remove(body1);
									this.failed.push(body1);
								}
							}
						} else if(!ret.has(body1) && ZPP_Collide.testCollide_safe(node1.shape,shp)) {
							ret.push(body1);
						}
					}
				} else {
					if(node1.child1 != null) {
						this.treeStack.add(node1.child1);
					}
					if(node1.child2 != null) {
						this.treeStack.add(node1.child2);
					}
				}
			}
		}
	}
	this.failed.clear();
	return ret;
};
ZPP_DynAABBPhase.prototype.openlist = null;
ZPP_DynAABBPhase.prototype.rayCast = function(ray,inner,filter) {
	if(this.openlist == null) {
		this.openlist = new ZNPList_ZPP_AABBNode();
	}
	this.sync_broadphase();
	ray.validate_dir();
	var mint = ray.maxdist;
	if(this.dtree.root != null) {
		if(ray.aabbtest(this.dtree.root.aabb)) {
			var t = ray.aabbsect(this.dtree.root.aabb);
			if(t >= 0 && t < mint) {
				this.dtree.root.rayt = t;
				var pre = null;
				var cx_ite = this.openlist.head;
				while(cx_ite != null) {
					if(this.dtree.root.rayt < cx_ite.elt.rayt) {
						break;
					}
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				var _this = this.openlist;
				var ret;
				if(ZNPNode_ZPP_AABBNode.zpp_pool == null) {
					ret = new ZNPNode_ZPP_AABBNode();
				} else {
					ret = ZNPNode_ZPP_AABBNode.zpp_pool;
					ZNPNode_ZPP_AABBNode.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = this.dtree.root;
				var temp = ret;
				if(pre == null) {
					temp.next = _this.head;
					_this.head = temp;
				} else {
					temp.next = pre.next;
					pre.next = temp;
				}
				_this.pushmod = _this.modified = true;
				_this.length++;
			}
		}
	}
	if(this.stree.root != null) {
		if(ray.aabbtest(this.stree.root.aabb)) {
			var t1 = ray.aabbsect(this.stree.root.aabb);
			if(t1 >= 0 && t1 < mint) {
				this.stree.root.rayt = t1;
				var pre1 = null;
				var cx_ite1 = this.openlist.head;
				while(cx_ite1 != null) {
					if(this.stree.root.rayt < cx_ite1.elt.rayt) {
						break;
					}
					pre1 = cx_ite1;
					cx_ite1 = cx_ite1.next;
				}
				var _this1 = this.openlist;
				var ret1;
				if(ZNPNode_ZPP_AABBNode.zpp_pool == null) {
					ret1 = new ZNPNode_ZPP_AABBNode();
				} else {
					ret1 = ZNPNode_ZPP_AABBNode.zpp_pool;
					ZNPNode_ZPP_AABBNode.zpp_pool = ret1.next;
					ret1.next = null;
				}
				ret1.elt = this.stree.root;
				var temp1 = ret1;
				if(pre1 == null) {
					temp1.next = _this1.head;
					_this1.head = temp1;
				} else {
					temp1.next = pre1.next;
					pre1.next = temp1;
				}
				_this1.pushmod = _this1.modified = true;
				_this1.length++;
			}
		}
	}
	var minres = null;
	while(this.openlist.head != null) {
		var cnode = this.openlist.pop_unsafe();
		if(cnode.rayt >= mint) {
			break;
		}
		if(cnode.child1 == null) {
			var shape = cnode.shape;
			var tmp;
			if(filter != null) {
				var _this2 = shape.filter;
				if((_this2.collisionMask & filter.collisionGroup) != 0) {
					tmp = (filter.collisionMask & _this2.collisionGroup) != 0;
				} else {
					tmp = false;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				var result = shape.type == 0?ray.circlesect(shape.circle,inner,mint):ray.aabbtest(shape.aabb)?ray.polysect(shape.polygon,inner,mint):null;
				if(result != null) {
					if(result.zpp_inner.next != null) {
						throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
					}
					mint = result.zpp_inner.toiDistance;
					if(minres != null) {
						if(minres.zpp_inner.next != null) {
							throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
						}
						minres.zpp_inner.free();
					}
					minres = result;
				}
			}
		} else {
			if(cnode.child1 != null) {
				if(ray.aabbtest(cnode.child1.aabb)) {
					var t2 = ray.aabbsect(cnode.child1.aabb);
					if(t2 >= 0 && t2 < mint) {
						cnode.child1.rayt = t2;
						var pre2 = null;
						var cx_ite2 = this.openlist.head;
						while(cx_ite2 != null) {
							if(cnode.child1.rayt < cx_ite2.elt.rayt) {
								break;
							}
							pre2 = cx_ite2;
							cx_ite2 = cx_ite2.next;
						}
						var _this3 = this.openlist;
						var ret2;
						if(ZNPNode_ZPP_AABBNode.zpp_pool == null) {
							ret2 = new ZNPNode_ZPP_AABBNode();
						} else {
							ret2 = ZNPNode_ZPP_AABBNode.zpp_pool;
							ZNPNode_ZPP_AABBNode.zpp_pool = ret2.next;
							ret2.next = null;
						}
						ret2.elt = cnode.child1;
						var temp2 = ret2;
						if(pre2 == null) {
							temp2.next = _this3.head;
							_this3.head = temp2;
						} else {
							temp2.next = pre2.next;
							pre2.next = temp2;
						}
						_this3.pushmod = _this3.modified = true;
						_this3.length++;
					}
				}
			}
			if(cnode.child2 != null) {
				if(ray.aabbtest(cnode.child2.aabb)) {
					var t3 = ray.aabbsect(cnode.child2.aabb);
					if(t3 >= 0 && t3 < mint) {
						cnode.child2.rayt = t3;
						var pre3 = null;
						var cx_ite3 = this.openlist.head;
						while(cx_ite3 != null) {
							if(cnode.child2.rayt < cx_ite3.elt.rayt) {
								break;
							}
							pre3 = cx_ite3;
							cx_ite3 = cx_ite3.next;
						}
						var _this4 = this.openlist;
						var ret3;
						if(ZNPNode_ZPP_AABBNode.zpp_pool == null) {
							ret3 = new ZNPNode_ZPP_AABBNode();
						} else {
							ret3 = ZNPNode_ZPP_AABBNode.zpp_pool;
							ZNPNode_ZPP_AABBNode.zpp_pool = ret3.next;
							ret3.next = null;
						}
						ret3.elt = cnode.child2;
						var temp3 = ret3;
						if(pre3 == null) {
							temp3.next = _this4.head;
							_this4.head = temp3;
						} else {
							temp3.next = pre3.next;
							pre3.next = temp3;
						}
						_this4.pushmod = _this4.modified = true;
						_this4.length++;
					}
				}
			}
		}
	}
	this.openlist.clear();
	return minres;
};
ZPP_DynAABBPhase.prototype.rayMultiCast = function(ray,inner,filter,output) {
	if(this.openlist == null) {
		this.openlist = new ZNPList_ZPP_AABBNode();
	}
	this.sync_broadphase();
	ray.validate_dir();
	var inf = ray.maxdist >= Infinity;
	var ret = output == null?new RayResultList():output;
	if(this.dtree.root != null) {
		if(ray.aabbtest(this.dtree.root.aabb)) {
			if(inf) {
				this.openlist.add(this.dtree.root);
			} else {
				var t = ray.aabbsect(this.dtree.root.aabb);
				if(t >= 0 && t < ray.maxdist) {
					this.openlist.add(this.dtree.root);
				}
			}
		}
	}
	if(this.stree.root != null) {
		if(ray.aabbtest(this.stree.root.aabb)) {
			if(inf) {
				this.openlist.add(this.stree.root);
			} else {
				var t1 = ray.aabbsect(this.stree.root.aabb);
				if(t1 >= 0 && t1 < ray.maxdist) {
					this.openlist.add(this.stree.root);
				}
			}
		}
	}
	while(this.openlist.head != null) {
		var cnode = this.openlist.pop_unsafe();
		if(cnode.child1 == null) {
			var shape = cnode.shape;
			var tmp;
			if(filter != null) {
				var _this = shape.filter;
				if((_this.collisionMask & filter.collisionGroup) != 0) {
					tmp = (filter.collisionMask & _this.collisionGroup) != 0;
				} else {
					tmp = false;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				if(shape.type == 0) {
					ray.circlesect2(shape.circle,inner,ret);
				} else if(ray.aabbtest(shape.aabb)) {
					ray.polysect2(shape.polygon,inner,ret);
				}
			}
		} else {
			if(cnode.child1 != null) {
				if(ray.aabbtest(cnode.child1.aabb)) {
					if(inf) {
						this.openlist.add(cnode.child1);
					} else {
						var t2 = ray.aabbsect(cnode.child1.aabb);
						if(t2 >= 0 && t2 < ray.maxdist) {
							this.openlist.add(cnode.child1);
						}
					}
				}
			}
			if(cnode.child2 != null) {
				if(ray.aabbtest(cnode.child2.aabb)) {
					if(inf) {
						this.openlist.add(cnode.child2);
					} else {
						var t3 = ray.aabbsect(cnode.child2.aabb);
						if(t3 >= 0 && t3 < ray.maxdist) {
							this.openlist.add(cnode.child2);
						}
					}
				}
			}
		}
	}
	this.openlist.clear();
	return ret;
};
ZPP_DynAABBPhase.prototype.__class__ = ZPP_DynAABBPhase;
var ZPP_Island = zpp_nape.space.ZPP_Island = function() {
	this.waket = 0;
	this.sleep = false;
	this.comps = null;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.comps = new ZNPList_ZPP_Component();
};
ZPP_Island.__name__ = ["zpp_nape","space","ZPP_Island"];
ZPP_Island.prototype.next = null;
ZPP_Island.prototype.elem = function() {
	return this;
};
ZPP_Island.prototype.begin = function() {
	return this.next;
};
ZPP_Island.prototype._inuse = null;
ZPP_Island.prototype.modified = null;
ZPP_Island.prototype.pushmod = null;
ZPP_Island.prototype.length = null;
ZPP_Island.prototype.setbegin = function(i) {
	this.next = i;
	this.modified = true;
	this.pushmod = true;
};
ZPP_Island.prototype.add = function(o) {
	o._inuse = true;
	o.next = this.next;
	this.next = o;
	this.modified = true;
	this.length++;
	return o;
};
ZPP_Island.prototype.inlined_add = function(o) {
	o._inuse = true;
	o.next = this.next;
	this.next = o;
	this.modified = true;
	this.length++;
	return o;
};
ZPP_Island.prototype.addAll = function(x) {
	var cx_ite = x.next;
	while(cx_ite != null) {
		this.add(cx_ite);
		cx_ite = cx_ite.next;
	}
};
ZPP_Island.prototype.insert = function(cur,o) {
	o._inuse = true;
	if(cur == null) {
		o.next = this.next;
		this.next = o;
	} else {
		o.next = cur.next;
		cur.next = o;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return o;
};
ZPP_Island.prototype.inlined_insert = function(cur,o) {
	o._inuse = true;
	if(cur == null) {
		o.next = this.next;
		this.next = o;
	} else {
		o.next = cur.next;
		cur.next = o;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return o;
};
ZPP_Island.prototype.pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret._inuse = false;
	if(this.next == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZPP_Island.prototype.inlined_pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret._inuse = false;
	if(this.next == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZPP_Island.prototype.pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
};
ZPP_Island.prototype.inlined_pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
};
ZPP_Island.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.next;
	while(cur != null) {
		if(cur == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.next;
				ret = old.next;
				this.next = ret;
				if(this.next == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			old._inuse = false;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZPP_Island.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZPP_Island.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	while(cur != null) {
		if(cur == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.next;
				ret = old.next;
				this.next = ret;
				if(this.next == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			old._inuse = false;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZPP_Island.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.next;
				ret1 = old.next;
				this.next = ret1;
				if(this.next == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			old._inuse = false;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZPP_Island.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.next;
		ret = old.next;
		this.next = ret;
		if(this.next == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	old._inuse = false;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZPP_Island.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.next;
		ret = old.next;
		this.next = ret;
		if(this.next == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	old._inuse = false;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZPP_Island.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZPP_Island.prototype.clear = function() {
};
ZPP_Island.prototype.inlined_clear = function() {
};
ZPP_Island.prototype.reverse = function() {
	var cur = this.next;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.next = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZPP_Island.prototype.empty = function() {
	return this.next == null;
};
ZPP_Island.prototype.size = function() {
	return this.length;
};
ZPP_Island.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.next;
	while(cx_ite != null) {
		if(cx_ite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZPP_Island.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.next;
	while(cx_ite != null) {
		if(cx_ite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZPP_Island.prototype.front = function() {
	return this.next;
};
ZPP_Island.prototype.back = function() {
	var ret = this.next;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret;
};
ZPP_Island.prototype.iterator_at = function(ind) {
	var ret = this.next;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZPP_Island.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it;
	} else {
		return null;
	}
};
ZPP_Island.prototype.comps = null;
ZPP_Island.prototype.sleep = null;
ZPP_Island.prototype.waket = null;
ZPP_Island.prototype.free = function() {
};
ZPP_Island.prototype.alloc = function() {
	this.waket = 0;
};
ZPP_Island.prototype.__class__ = ZPP_Island;
var ZPP_Component = zpp_nape.space.ZPP_Component = function() {
	this.woken = false;
	this.waket = 0;
	this.sleeping = false;
	this.island = null;
	this.constraint = null;
	this.body = null;
	this.isBody = false;
	this.rank = 0;
	this.parent = null;
	this.next = null;
	this.sleeping = false;
	this.island = null;
	this.parent = this;
	this.rank = 0;
	this.woken = false;
};
ZPP_Component.__name__ = ["zpp_nape","space","ZPP_Component"];
ZPP_Component.prototype.next = null;
ZPP_Component.prototype.parent = null;
ZPP_Component.prototype.rank = null;
ZPP_Component.prototype.isBody = null;
ZPP_Component.prototype.body = null;
ZPP_Component.prototype.constraint = null;
ZPP_Component.prototype.island = null;
ZPP_Component.prototype.sleeping = null;
ZPP_Component.prototype.waket = null;
ZPP_Component.prototype.woken = null;
ZPP_Component.prototype.free = function() {
	this.body = null;
	this.constraint = null;
};
ZPP_Component.prototype.alloc = function() {
};
ZPP_Component.prototype.reset = function() {
	this.sleeping = false;
	this.island = null;
	this.parent = this;
	this.rank = 0;
};
ZPP_Component.prototype.__class__ = ZPP_Component;
var ZPP_CallbackSet = zpp_nape.space.ZPP_CallbackSet = function() {
	this.lazydel = false;
	this.freed = false;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.int2 = null;
	this.int1 = null;
	this.di = 0;
	this.id = 0;
	this.arbiters = new ZNPList_ZPP_Arbiter();
};
ZPP_CallbackSet.__name__ = ["zpp_nape","space","ZPP_CallbackSet"];
ZPP_CallbackSet.get = function(i1,i2) {
	var ret;
	if(ZPP_CallbackSet.zpp_pool == null) {
		ret = new ZPP_CallbackSet();
	} else {
		ret = ZPP_CallbackSet.zpp_pool;
		ZPP_CallbackSet.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.freed = false;
	ret.lazydel = false;
	ret.COLLISIONstate = 1;
	ret.COLLISIONstamp = 0;
	ret.SENSORstate = 1;
	ret.SENSORstamp = 0;
	ret.FLUIDstate = 1;
	ret.FLUIDstamp = 0;
	if(i1.id < i2.id) {
		ret.int1 = i1;
		ret.int2 = i2;
	} else {
		ret.int1 = i2;
		ret.int2 = i1;
	}
	ret.id = ret.int1.id;
	ret.di = ret.int2.id;
	return ret;
};
ZPP_CallbackSet.prototype.id = null;
ZPP_CallbackSet.prototype.di = null;
ZPP_CallbackSet.prototype.int1 = null;
ZPP_CallbackSet.prototype.int2 = null;
ZPP_CallbackSet.prototype.arbiters = null;
ZPP_CallbackSet.prototype.COLLISIONstate = null;
ZPP_CallbackSet.prototype.COLLISIONstamp = null;
ZPP_CallbackSet.prototype.SENSORstate = null;
ZPP_CallbackSet.prototype.SENSORstamp = null;
ZPP_CallbackSet.prototype.FLUIDstate = null;
ZPP_CallbackSet.prototype.FLUIDstamp = null;
ZPP_CallbackSet.prototype.next = null;
ZPP_CallbackSet.prototype.elem = function() {
	return this;
};
ZPP_CallbackSet.prototype.begin = function() {
	return this.next;
};
ZPP_CallbackSet.prototype._inuse = null;
ZPP_CallbackSet.prototype.modified = null;
ZPP_CallbackSet.prototype.pushmod = null;
ZPP_CallbackSet.prototype.length = null;
ZPP_CallbackSet.prototype.setbegin = function(i) {
	this.next = i;
	this.modified = true;
	this.pushmod = true;
};
ZPP_CallbackSet.prototype.add = function(o) {
	o._inuse = true;
	o.next = this.next;
	this.next = o;
	this.modified = true;
	this.length++;
	return o;
};
ZPP_CallbackSet.prototype.inlined_add = function(o) {
	o._inuse = true;
	o.next = this.next;
	this.next = o;
	this.modified = true;
	this.length++;
	return o;
};
ZPP_CallbackSet.prototype.addAll = function(x) {
	var cx_ite = x.next;
	while(cx_ite != null) {
		this.add(cx_ite);
		cx_ite = cx_ite.next;
	}
};
ZPP_CallbackSet.prototype.insert = function(cur,o) {
	o._inuse = true;
	if(cur == null) {
		o.next = this.next;
		this.next = o;
	} else {
		o.next = cur.next;
		cur.next = o;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return o;
};
ZPP_CallbackSet.prototype.inlined_insert = function(cur,o) {
	o._inuse = true;
	if(cur == null) {
		o.next = this.next;
		this.next = o;
	} else {
		o.next = cur.next;
		cur.next = o;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return o;
};
ZPP_CallbackSet.prototype.pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret._inuse = false;
	if(this.next == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZPP_CallbackSet.prototype.inlined_pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret._inuse = false;
	if(this.next == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZPP_CallbackSet.prototype.pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
};
ZPP_CallbackSet.prototype.inlined_pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
};
ZPP_CallbackSet.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.next;
	while(cur != null) {
		if(cur == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.next;
				ret = old.next;
				this.next = ret;
				if(this.next == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			old._inuse = false;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZPP_CallbackSet.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZPP_CallbackSet.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	while(cur != null) {
		if(cur == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.next;
				ret = old.next;
				this.next = ret;
				if(this.next == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			old._inuse = false;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZPP_CallbackSet.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.next;
				ret1 = old.next;
				this.next = ret1;
				if(this.next == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			old._inuse = false;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZPP_CallbackSet.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.next;
		ret = old.next;
		this.next = ret;
		if(this.next == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	old._inuse = false;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZPP_CallbackSet.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.next;
		ret = old.next;
		this.next = ret;
		if(this.next == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	old._inuse = false;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZPP_CallbackSet.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZPP_CallbackSet.prototype.clear = function() {
};
ZPP_CallbackSet.prototype.inlined_clear = function() {
};
ZPP_CallbackSet.prototype.reverse = function() {
	var cur = this.next;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.next = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZPP_CallbackSet.prototype.empty = function() {
	return this.next == null;
};
ZPP_CallbackSet.prototype.size = function() {
	return this.length;
};
ZPP_CallbackSet.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.next;
	while(cx_ite != null) {
		if(cx_ite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZPP_CallbackSet.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.next;
	while(cx_ite != null) {
		if(cx_ite == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZPP_CallbackSet.prototype.front = function() {
	return this.next;
};
ZPP_CallbackSet.prototype.back = function() {
	var ret = this.next;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret;
};
ZPP_CallbackSet.prototype.iterator_at = function(ind) {
	var ret = this.next;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZPP_CallbackSet.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it;
	} else {
		return null;
	}
};
ZPP_CallbackSet.prototype.freed = null;
ZPP_CallbackSet.prototype.lazydel = null;
ZPP_CallbackSet.prototype.free = function() {
	this.int1 = this.int2 = null;
	this.id = this.di = -1;
	this.freed = true;
};
ZPP_CallbackSet.prototype.alloc = function() {
	this.freed = false;
	this.lazydel = false;
	this.COLLISIONstate = 1;
	this.COLLISIONstamp = 0;
	this.SENSORstate = 1;
	this.SENSORstamp = 0;
	this.FLUIDstate = 1;
	this.FLUIDstamp = 0;
};
ZPP_CallbackSet.prototype.add_arb = function(x) {
	var ret;
	ret = false;
	var cx_ite = this.arbiters.head;
	while(cx_ite != null) {
		if(cx_ite.elt == x) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(!ret) {
		var _this = this.arbiters;
		var ret1;
		if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
			ret1 = new ZNPNode_ZPP_Arbiter();
		} else {
			ret1 = ZNPNode_ZPP_Arbiter.zpp_pool;
			ZNPNode_ZPP_Arbiter.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.elt = x;
		var temp = ret1;
		temp.next = _this.head;
		_this.head = temp;
		_this.modified = true;
		_this.length++;
		return true;
	} else {
		return false;
	}
};
ZPP_CallbackSet.prototype.try_remove_arb = function(x) {
	var _this = this.arbiters;
	var pre = null;
	var cur = _this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == x) {
			var old;
			var ret1;
			if(pre == null) {
				old = _this.head;
				ret1 = old.next;
				_this.head = ret1;
				if(_this.head == null) {
					_this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					_this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Arbiter.zpp_pool;
			ZNPNode_ZPP_Arbiter.zpp_pool = o;
			_this.modified = true;
			_this.length--;
			_this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZPP_CallbackSet.prototype.remove_arb = function(x) {
	var _this = this.arbiters;
	var pre = null;
	var cur = _this.head;
	while(cur != null) {
		if(cur.elt == x) {
			var old;
			var ret;
			if(pre == null) {
				old = _this.head;
				ret = old.next;
				_this.head = ret;
				if(_this.head == null) {
					_this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					_this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Arbiter.zpp_pool;
			ZNPNode_ZPP_Arbiter.zpp_pool = o;
			_this.modified = true;
			_this.length--;
			_this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZPP_CallbackSet.prototype.empty_arb = function(type) {
	var retvar;
	retvar = true;
	var cx_ite = this.arbiters.head;
	while(cx_ite != null) if((cx_ite.elt.type & type) == 0) {
		cx_ite = cx_ite.next;
		continue;
	} else {
		retvar = false;
		break;
	}
	return retvar;
};
ZPP_CallbackSet.prototype.really_empty = function() {
	return this.arbiters.head == null;
};
ZPP_CallbackSet.prototype.sleeping = function() {
	var ret;
	ret = true;
	var cx_ite = this.arbiters.head;
	while(cx_ite != null) if(cx_ite.elt.sleeping) {
		cx_ite = cx_ite.next;
		continue;
	} else {
		ret = false;
		break;
	}
	return ret;
};
ZPP_CallbackSet.prototype.__class__ = ZPP_CallbackSet;
var ZPP_CbSetManager = zpp_nape.space.ZPP_CbSetManager = function(space) {
	this.space = null;
	this.cbsets = null;
	if(ZPP_Set_ZPP_CbSet.zpp_pool == null) {
		this.cbsets = new ZPP_Set_ZPP_CbSet();
	} else {
		this.cbsets = ZPP_Set_ZPP_CbSet.zpp_pool;
		ZPP_Set_ZPP_CbSet.zpp_pool = this.cbsets.next;
		this.cbsets.next = null;
	}
	this.cbsets.lt = ZPP_CbSet.setlt;
	this.space = space;
};
ZPP_CbSetManager.__name__ = ["zpp_nape","space","ZPP_CbSetManager"];
ZPP_CbSetManager.prototype.cbsets = null;
ZPP_CbSetManager.prototype.space = null;
ZPP_CbSetManager.prototype.get = function(cbTypes) {
	if(cbTypes.head == null) {
		return null;
	}
	var fake;
	if(ZPP_CbSet.zpp_pool == null) {
		fake = new ZPP_CbSet();
	} else {
		fake = ZPP_CbSet.zpp_pool;
		ZPP_CbSet.zpp_pool = fake.next;
		fake.next = null;
	}
	var faketypes = fake.cbTypes;
	fake.cbTypes = cbTypes;
	var res = this.cbsets.find_weak(fake);
	var ret;
	if(res != null) {
		ret = res.data;
	} else {
		var set = ZPP_CbSet.get(cbTypes);
		this.cbsets.insert(set);
		set.manager = this;
		ret = set;
	}
	fake.cbTypes = faketypes;
	var o = fake;
	o.listeners.clear();
	o.zip_listeners = true;
	o.bodylisteners.clear();
	o.zip_bodylisteners = true;
	o.conlisteners.clear();
	o.zip_conlisteners = true;
	while(o.cbTypes.head != null) o.cbTypes.pop_unsafe().cbsets.remove(o);
	o.next = ZPP_CbSet.zpp_pool;
	ZPP_CbSet.zpp_pool = o;
	return ret;
};
ZPP_CbSetManager.prototype.remove = function(set) {
	this.cbsets.remove(set);
	while(set.cbpairs.head != null) {
		var pair = set.cbpairs.pop_unsafe();
		if(pair.a != pair.b) {
			if(set == pair.a) {
				pair.b.cbpairs.remove(pair);
			} else {
				pair.a.cbpairs.remove(pair);
			}
		}
		pair.a = pair.b = null;
		pair.listeners.clear();
		pair.next = ZPP_CbSetPair.zpp_pool;
		ZPP_CbSetPair.zpp_pool = pair;
	}
	set.manager = null;
};
ZPP_CbSetManager.prototype.clear = function() {
};
ZPP_CbSetManager.prototype.validate = function() {
	if(!this.cbsets.empty()) {
		var set_ite = this.cbsets.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			set_ite.data.validate();
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
};
ZPP_CbSetManager.prototype.pair = function(a,b) {
	var ret = null;
	var cx_ite = (a.cbpairs.length < b.cbpairs.length?a.cbpairs:b.cbpairs).head;
	while(cx_ite != null) {
		var p = cx_ite.elt;
		if(p.a == a && p.b == b || p.a == b && p.b == a) {
			ret = p;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret == null) {
		var ret1;
		if(ZPP_CbSetPair.zpp_pool == null) {
			ret1 = new ZPP_CbSetPair();
		} else {
			ret1 = ZPP_CbSetPair.zpp_pool;
			ZPP_CbSetPair.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.zip_listeners = true;
		if(ZPP_CbSet.setlt(a,b)) {
			ret1.a = a;
			ret1.b = b;
		} else {
			ret1.a = b;
			ret1.b = a;
		}
		ret = ret1;
		a.cbpairs.add(ret);
		if(b != a) {
			b.cbpairs.add(ret);
		}
	}
	if(ret.zip_listeners) {
		ret.zip_listeners = false;
		ret.__validate();
	}
	return ret;
};
ZPP_CbSetManager.prototype.valid_listener = function(i) {
	return i.space == this.space;
};
ZPP_CbSetManager.prototype.__class__ = ZPP_CbSetManager;
var ZPP_Space = zpp_nape.space.ZPP_Space = function(gravity,broadphase) {
	this.prelisteners = null;
	this.precb = null;
	this.continuous = false;
	this.toiEvents = null;
	this.pre_dt = 0.0;
	this.convexShapeList = null;
	this.cbsets = null;
	this.callbackset_list = null;
	this.callbacks = null;
	this.wrap_listeners = null;
	this.listeners = null;
	this.islands = null;
	this.staticsleep = null;
	this.wrap_livecon = null;
	this.live_constraints = null;
	this.wrap_live = null;
	this.live = null;
	this.wrap_arbiters = null;
	this.s_arbiters = null;
	this.f_arbiters = null;
	this.c_arbiters_false = null;
	this.c_arbiters_true = null;
	this.sortcontacts = false;
	this.time = 0.0;
	this.midstep = false;
	this.stamp = 0;
	this.global_ang_drag = 0.0;
	this.global_lin_drag = 0.0;
	this.__static = null;
	this.bphase = null;
	this.kinematics = null;
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_compounds = null;
	this.compounds = null;
	this.wrap_bodies = null;
	this.bodies = null;
	this.wrap_gravity = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.userData = null;
	this.outer = null;
	this.toiEvents = new ZNPList_ZPP_ToiEvent();
	this.global_lin_drag = 0.015;
	this.global_ang_drag = 0.015;
	ZPP_Callback.internal = true;
	this.precb = new PreCallback();
	this.precb.zpp_inner = new ZPP_Callback();
	ZPP_Callback.internal = false;
	this.sortcontacts = true;
	this.pre_dt = 0.0;
	var tmp;
	if(broadphase != null) {
		if(ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new Broadphase();
			ZPP_Flags.internal = false;
		}
		tmp = broadphase == ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
	} else {
		tmp = true;
	}
	if(tmp) {
		this.bphase = new ZPP_DynAABBPhase(this);
	} else {
		if(ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
			ZPP_Flags.internal = true;
			ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new Broadphase();
			ZPP_Flags.internal = false;
		}
		if(broadphase == ZPP_Flags.Broadphase_SWEEP_AND_PRUNE) {
			this.bphase = new ZPP_SweepPhase(this);
		}
	}
	this.time = 0.0;
	if(gravity != null) {
		this.gravityx = gravity.x;
		this.gravityy = gravity.y;
	} else {
		this.gravityx = 0;
		this.gravityy = 0;
	}
	this.bodies = new ZNPList_ZPP_Body();
	this.wrap_bodies = ZPP_BodyList.get(this.bodies);
	this.wrap_bodies.zpp_inner.adder = $bind(this,this.bodies_adder);
	this.wrap_bodies.zpp_inner.subber = $bind(this,this.bodies_subber);
	this.wrap_bodies.zpp_inner._modifiable = $bind(this,this.bodies_modifiable);
	this.compounds = new ZNPList_ZPP_Compound();
	this.wrap_compounds = ZPP_CompoundList.get(this.compounds);
	this.wrap_compounds.zpp_inner.adder = $bind(this,this.compounds_adder);
	this.wrap_compounds.zpp_inner.subber = $bind(this,this.compounds_subber);
	this.wrap_compounds.zpp_inner._modifiable = $bind(this,this.compounds_modifiable);
	this.kinematics = new ZNPList_ZPP_Body();
	this.c_arbiters_true = new ZNPList_ZPP_ColArbiter();
	this.c_arbiters_false = new ZNPList_ZPP_ColArbiter();
	this.f_arbiters = new ZNPList_ZPP_FluidArbiter();
	this.s_arbiters = new ZNPList_ZPP_SensorArbiter();
	this.islands = new ZPP_Island();
	this.live = new ZNPList_ZPP_Body();
	this.wrap_live = ZPP_BodyList.get(this.live,true);
	this.staticsleep = new ZNPList_ZPP_Body();
	this.constraints = new ZNPList_ZPP_Constraint();
	this.wrap_constraints = ZPP_ConstraintList.get(this.constraints);
	this.wrap_constraints.zpp_inner.adder = $bind(this,this.constraints_adder);
	this.wrap_constraints.zpp_inner.subber = $bind(this,this.constraints_subber);
	this.wrap_constraints.zpp_inner._modifiable = $bind(this,this.constraints_modifiable);
	this.live_constraints = new ZNPList_ZPP_Constraint();
	this.wrap_livecon = ZPP_ConstraintList.get(this.live_constraints,true);
	this.__static = ZPP_Body.__static();
	this.__static.zpp_inner.space = this;
	this.callbacks = new ZPP_Callback();
	this.midstep = false;
	this.listeners = new ZNPList_ZPP_Listener();
	this.wrap_listeners = ZPP_ListenerList.get(this.listeners);
	this.wrap_listeners.zpp_inner.adder = $bind(this,this.listeners_adder);
	this.wrap_listeners.zpp_inner.subber = $bind(this,this.listeners_subber);
	this.wrap_listeners.zpp_inner._modifiable = $bind(this,this.listeners_modifiable);
	this.callbackset_list = new ZPP_CallbackSet();
	this.mrca1 = new ZNPList_ZPP_Interactor();
	this.mrca2 = new ZNPList_ZPP_Interactor();
	this.prelisteners = new ZNPList_ZPP_InteractionListener();
	this.cbsets = new ZPP_CbSetManager(this);
};
ZPP_Space.__name__ = ["zpp_nape","space","ZPP_Space"];
ZPP_Space.prototype.outer = null;
ZPP_Space.prototype.userData = null;
ZPP_Space.prototype.gravityx = null;
ZPP_Space.prototype.gravityy = null;
ZPP_Space.prototype.wrap_gravity = null;
ZPP_Space.prototype.getgravity = function() {
	var x = this.gravityx;
	var y = this.gravityy;
	if(x != x || y != y) {
		throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
	}
	var ret;
	if(ZPP_PubPool.poolVec2 == null) {
		ret = new Vec2();
	} else {
		ret = ZPP_PubPool.poolVec2;
		ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == ZPP_PubPool.nextVec2) {
			ZPP_PubPool.nextVec2 = null;
		}
	}
	if(ret.zpp_inner == null) {
		var ret1;
		if(ZPP_Vec2.zpp_pool == null) {
			ret1 = new ZPP_Vec2();
		} else {
			ret1 = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.weak = false;
		ret1._immutable = false;
		ret1.x = x;
		ret1.y = y;
		ret.zpp_inner = ret1;
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this = ret.zpp_inner;
		if(_this._immutable) {
			throw new js._Boot.HaxeError("Error: Vec2 is immutable");
		}
		if(_this._isimmutable != null) {
			_this._isimmutable();
		}
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var tmp;
		if(ret != null && ret.zpp_disp) {
			throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
		}
		var _this1 = ret.zpp_inner;
		if(_this1._validate != null) {
			_this1._validate();
		}
		if(ret.zpp_inner.x == x) {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this2 = ret.zpp_inner;
			if(_this2._validate != null) {
				_this2._validate();
			}
			tmp = ret.zpp_inner.y == y;
		} else {
			tmp = false;
		}
		if(!tmp) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			var _this3 = ret.zpp_inner;
			if(_this3._invalidate != null) {
				_this3._invalidate(_this3);
			}
		}
	}
	ret.zpp_inner.weak = false;
	this.wrap_gravity = ret;
	this.wrap_gravity.zpp_inner._inuse = true;
	this.wrap_gravity.zpp_inner._invalidate = $bind(this,this.gravity_invalidate);
	this.wrap_gravity.zpp_inner._validate = $bind(this,this.gravity_validate);
};
ZPP_Space.prototype.gravity_invalidate = function(x) {
	if(this.midstep) {
		throw new js._Boot.HaxeError("Error: Space::gravity cannot be set during space step");
	}
	this.gravityx = x.x;
	this.gravityy = x.y;
	var stack = new ZNPList_ZPP_Compound();
	var cx_ite = this.bodies.head;
	while(cx_ite != null) {
		var x1 = cx_ite.elt;
		if(!x1.world) {
			x1.component.waket = this.stamp + (this.midstep?0:1);
			if(x1.type == 3) {
				x1.kinematicDelaySleep = true;
			}
			if(x1.component.sleeping) {
				this.really_wake(x1,false);
			}
		}
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = this.compounds.head;
	while(cx_ite1 != null) {
		stack.add(cx_ite1.elt);
		cx_ite1 = cx_ite1.next;
	}
	while(stack.head != null) {
		var s = stack.pop_unsafe();
		var cx_ite2 = s.bodies.head;
		while(cx_ite2 != null) {
			var x2 = cx_ite2.elt;
			if(!x2.world) {
				x2.component.waket = this.stamp + (this.midstep?0:1);
				if(x2.type == 3) {
					x2.kinematicDelaySleep = true;
				}
				if(x2.component.sleeping) {
					this.really_wake(x2,false);
				}
			}
			cx_ite2 = cx_ite2.next;
		}
		var cx_ite3 = s.compounds.head;
		while(cx_ite3 != null) {
			stack.add(cx_ite3.elt);
			cx_ite3 = cx_ite3.next;
		}
	}
};
ZPP_Space.prototype.gravity_validate = function() {
	this.wrap_gravity.zpp_inner.x = this.gravityx;
	this.wrap_gravity.zpp_inner.y = this.gravityy;
};
ZPP_Space.prototype.bodies = null;
ZPP_Space.prototype.wrap_bodies = null;
ZPP_Space.prototype.compounds = null;
ZPP_Space.prototype.wrap_compounds = null;
ZPP_Space.prototype.constraints = null;
ZPP_Space.prototype.wrap_constraints = null;
ZPP_Space.prototype.kinematics = null;
ZPP_Space.prototype.bphase = null;
ZPP_Space.prototype.__static = null;
ZPP_Space.prototype.global_lin_drag = null;
ZPP_Space.prototype.global_ang_drag = null;
ZPP_Space.prototype.stamp = null;
ZPP_Space.prototype.midstep = null;
ZPP_Space.prototype.time = null;
ZPP_Space.prototype.sortcontacts = null;
ZPP_Space.prototype.c_arbiters_true = null;
ZPP_Space.prototype.c_arbiters_false = null;
ZPP_Space.prototype.f_arbiters = null;
ZPP_Space.prototype.s_arbiters = null;
ZPP_Space.prototype.wrap_arbiters = null;
ZPP_Space.prototype.live = null;
ZPP_Space.prototype.wrap_live = null;
ZPP_Space.prototype.live_constraints = null;
ZPP_Space.prototype.wrap_livecon = null;
ZPP_Space.prototype.staticsleep = null;
ZPP_Space.prototype.islands = null;
ZPP_Space.prototype.listeners = null;
ZPP_Space.prototype.wrap_listeners = null;
ZPP_Space.prototype.callbacks = null;
ZPP_Space.prototype.callbackset_list = null;
ZPP_Space.prototype.cbsets = null;
ZPP_Space.prototype.clear = function() {
	while(this.listeners.head != null) this.remListener(this.listeners.pop_unsafe());
	while(this.callbackset_list.next != null) {
		var c = this.callbackset_list.pop_unsafe();
		c.arbiters.clear();
		c.int1 = c.int2 = null;
		c.id = c.di = -1;
		c.freed = true;
		c.next = ZPP_CallbackSet.zpp_pool;
		ZPP_CallbackSet.zpp_pool = c;
	}
	while(this.c_arbiters_true.head != null) {
		var arb = this.c_arbiters_true.pop_unsafe();
		if(!arb.cleared) {
			var _this = arb.b1.arbiters;
			var pre = null;
			var cur = _this.head;
			while(cur != null) {
				if(cur.elt == arb) {
					var old;
					var ret;
					if(pre == null) {
						old = _this.head;
						ret = old.next;
						_this.head = ret;
						if(_this.head == null) {
							_this.pushmod = true;
						}
					} else {
						old = pre.next;
						ret = old.next;
						pre.next = ret;
						if(ret == null) {
							_this.pushmod = true;
						}
					}
					var o = old;
					o.elt = null;
					o.next = ZNPNode_ZPP_Arbiter.zpp_pool;
					ZNPNode_ZPP_Arbiter.zpp_pool = o;
					_this.modified = true;
					_this.length--;
					_this.pushmod = true;
					break;
				}
				pre = cur;
				cur = cur.next;
			}
			var _this1 = arb.b2.arbiters;
			var pre1 = null;
			var cur1 = _this1.head;
			while(cur1 != null) {
				if(cur1.elt == arb) {
					var old1;
					var ret1;
					if(pre1 == null) {
						old1 = _this1.head;
						ret1 = old1.next;
						_this1.head = ret1;
						if(_this1.head == null) {
							_this1.pushmod = true;
						}
					} else {
						old1 = pre1.next;
						ret1 = old1.next;
						pre1.next = ret1;
						if(ret1 == null) {
							_this1.pushmod = true;
						}
					}
					var o1 = old1;
					o1.elt = null;
					o1.next = ZNPNode_ZPP_Arbiter.zpp_pool;
					ZNPNode_ZPP_Arbiter.zpp_pool = o1;
					_this1.modified = true;
					_this1.length--;
					_this1.pushmod = true;
					break;
				}
				pre1 = cur1;
				cur1 = cur1.next;
			}
			if(arb.pair != null) {
				arb.pair.arb = null;
				arb.pair = null;
			}
		}
		arb.b1 = arb.b2 = null;
		arb.active = false;
		arb.intchange = false;
		while(arb.contacts.next != null) {
			var _this2 = arb.contacts;
			var ret2 = _this2.next;
			_this2.pop();
			ret2.arbiter = null;
			ret2.next = ZPP_Contact.zpp_pool;
			ZPP_Contact.zpp_pool = ret2;
			var _this3 = arb.innards;
			var ret3 = _this3.next;
			_this3.next = ret3.next;
			ret3._inuse = false;
			if(_this3.next == null) {
				_this3.pushmod = true;
			}
			_this3.modified = true;
			_this3.length--;
		}
		arb.userdef_dyn_fric = false;
		arb.userdef_stat_fric = false;
		arb.userdef_restitution = false;
		arb.userdef_rfric = false;
		arb.__ref_edge1 = arb.__ref_edge2 = null;
		arb.next = ZPP_ColArbiter.zpp_pool;
		ZPP_ColArbiter.zpp_pool = arb;
		arb.pre_dt = -1.0;
	}
	while(this.c_arbiters_false.head != null) {
		var arb1 = this.c_arbiters_false.pop_unsafe();
		if(!arb1.cleared) {
			var _this4 = arb1.b1.arbiters;
			var pre2 = null;
			var cur2 = _this4.head;
			while(cur2 != null) {
				if(cur2.elt == arb1) {
					var old2;
					var ret4;
					if(pre2 == null) {
						old2 = _this4.head;
						ret4 = old2.next;
						_this4.head = ret4;
						if(_this4.head == null) {
							_this4.pushmod = true;
						}
					} else {
						old2 = pre2.next;
						ret4 = old2.next;
						pre2.next = ret4;
						if(ret4 == null) {
							_this4.pushmod = true;
						}
					}
					var o2 = old2;
					o2.elt = null;
					o2.next = ZNPNode_ZPP_Arbiter.zpp_pool;
					ZNPNode_ZPP_Arbiter.zpp_pool = o2;
					_this4.modified = true;
					_this4.length--;
					_this4.pushmod = true;
					break;
				}
				pre2 = cur2;
				cur2 = cur2.next;
			}
			var _this5 = arb1.b2.arbiters;
			var pre3 = null;
			var cur3 = _this5.head;
			while(cur3 != null) {
				if(cur3.elt == arb1) {
					var old3;
					var ret5;
					if(pre3 == null) {
						old3 = _this5.head;
						ret5 = old3.next;
						_this5.head = ret5;
						if(_this5.head == null) {
							_this5.pushmod = true;
						}
					} else {
						old3 = pre3.next;
						ret5 = old3.next;
						pre3.next = ret5;
						if(ret5 == null) {
							_this5.pushmod = true;
						}
					}
					var o3 = old3;
					o3.elt = null;
					o3.next = ZNPNode_ZPP_Arbiter.zpp_pool;
					ZNPNode_ZPP_Arbiter.zpp_pool = o3;
					_this5.modified = true;
					_this5.length--;
					_this5.pushmod = true;
					break;
				}
				pre3 = cur3;
				cur3 = cur3.next;
			}
			if(arb1.pair != null) {
				arb1.pair.arb = null;
				arb1.pair = null;
			}
		}
		arb1.b1 = arb1.b2 = null;
		arb1.active = false;
		arb1.intchange = false;
		while(arb1.contacts.next != null) {
			var _this6 = arb1.contacts;
			var ret6 = _this6.next;
			_this6.pop();
			ret6.arbiter = null;
			ret6.next = ZPP_Contact.zpp_pool;
			ZPP_Contact.zpp_pool = ret6;
			var _this7 = arb1.innards;
			var ret7 = _this7.next;
			_this7.next = ret7.next;
			ret7._inuse = false;
			if(_this7.next == null) {
				_this7.pushmod = true;
			}
			_this7.modified = true;
			_this7.length--;
		}
		arb1.userdef_dyn_fric = false;
		arb1.userdef_stat_fric = false;
		arb1.userdef_restitution = false;
		arb1.userdef_rfric = false;
		arb1.__ref_edge1 = arb1.__ref_edge2 = null;
		arb1.next = ZPP_ColArbiter.zpp_pool;
		ZPP_ColArbiter.zpp_pool = arb1;
		arb1.pre_dt = -1.0;
	}
	while(this.s_arbiters.head != null) {
		var arb2 = this.s_arbiters.pop_unsafe();
		if(!arb2.cleared) {
			var _this8 = arb2.b1.arbiters;
			var pre4 = null;
			var cur4 = _this8.head;
			while(cur4 != null) {
				if(cur4.elt == arb2) {
					var old4;
					var ret8;
					if(pre4 == null) {
						old4 = _this8.head;
						ret8 = old4.next;
						_this8.head = ret8;
						if(_this8.head == null) {
							_this8.pushmod = true;
						}
					} else {
						old4 = pre4.next;
						ret8 = old4.next;
						pre4.next = ret8;
						if(ret8 == null) {
							_this8.pushmod = true;
						}
					}
					var o4 = old4;
					o4.elt = null;
					o4.next = ZNPNode_ZPP_Arbiter.zpp_pool;
					ZNPNode_ZPP_Arbiter.zpp_pool = o4;
					_this8.modified = true;
					_this8.length--;
					_this8.pushmod = true;
					break;
				}
				pre4 = cur4;
				cur4 = cur4.next;
			}
			var _this9 = arb2.b2.arbiters;
			var pre5 = null;
			var cur5 = _this9.head;
			while(cur5 != null) {
				if(cur5.elt == arb2) {
					var old5;
					var ret9;
					if(pre5 == null) {
						old5 = _this9.head;
						ret9 = old5.next;
						_this9.head = ret9;
						if(_this9.head == null) {
							_this9.pushmod = true;
						}
					} else {
						old5 = pre5.next;
						ret9 = old5.next;
						pre5.next = ret9;
						if(ret9 == null) {
							_this9.pushmod = true;
						}
					}
					var o5 = old5;
					o5.elt = null;
					o5.next = ZNPNode_ZPP_Arbiter.zpp_pool;
					ZNPNode_ZPP_Arbiter.zpp_pool = o5;
					_this9.modified = true;
					_this9.length--;
					_this9.pushmod = true;
					break;
				}
				pre5 = cur5;
				cur5 = cur5.next;
			}
			if(arb2.pair != null) {
				arb2.pair.arb = null;
				arb2.pair = null;
			}
		}
		arb2.b1 = arb2.b2 = null;
		arb2.active = false;
		arb2.intchange = false;
		arb2.next = ZPP_SensorArbiter.zpp_pool;
		ZPP_SensorArbiter.zpp_pool = arb2;
	}
	while(this.f_arbiters.head != null) {
		var arb3 = this.f_arbiters.pop_unsafe();
		if(!arb3.cleared) {
			var _this10 = arb3.b1.arbiters;
			var pre6 = null;
			var cur6 = _this10.head;
			while(cur6 != null) {
				if(cur6.elt == arb3) {
					var old6;
					var ret10;
					if(pre6 == null) {
						old6 = _this10.head;
						ret10 = old6.next;
						_this10.head = ret10;
						if(_this10.head == null) {
							_this10.pushmod = true;
						}
					} else {
						old6 = pre6.next;
						ret10 = old6.next;
						pre6.next = ret10;
						if(ret10 == null) {
							_this10.pushmod = true;
						}
					}
					var o6 = old6;
					o6.elt = null;
					o6.next = ZNPNode_ZPP_Arbiter.zpp_pool;
					ZNPNode_ZPP_Arbiter.zpp_pool = o6;
					_this10.modified = true;
					_this10.length--;
					_this10.pushmod = true;
					break;
				}
				pre6 = cur6;
				cur6 = cur6.next;
			}
			var _this11 = arb3.b2.arbiters;
			var pre7 = null;
			var cur7 = _this11.head;
			while(cur7 != null) {
				if(cur7.elt == arb3) {
					var old7;
					var ret11;
					if(pre7 == null) {
						old7 = _this11.head;
						ret11 = old7.next;
						_this11.head = ret11;
						if(_this11.head == null) {
							_this11.pushmod = true;
						}
					} else {
						old7 = pre7.next;
						ret11 = old7.next;
						pre7.next = ret11;
						if(ret11 == null) {
							_this11.pushmod = true;
						}
					}
					var o7 = old7;
					o7.elt = null;
					o7.next = ZNPNode_ZPP_Arbiter.zpp_pool;
					ZNPNode_ZPP_Arbiter.zpp_pool = o7;
					_this11.modified = true;
					_this11.length--;
					_this11.pushmod = true;
					break;
				}
				pre7 = cur7;
				cur7 = cur7.next;
			}
			if(arb3.pair != null) {
				arb3.pair.arb = null;
				arb3.pair = null;
			}
		}
		arb3.b1 = arb3.b2 = null;
		arb3.active = false;
		arb3.intchange = false;
		arb3.next = ZPP_FluidArbiter.zpp_pool;
		ZPP_FluidArbiter.zpp_pool = arb3;
		arb3.pre_dt = -1.0;
	}
	this.bphase.clear();
	while(this.bodies.head != null) {
		var b = this.bodies.pop_unsafe();
		if(b.component != null) {
			var i = b.component.island;
			if(i != null) {
				while(i.comps.head != null) {
					var c1 = i.comps.pop_unsafe();
					c1.sleeping = false;
					c1.island = null;
					c1.parent = c1;
					c1.rank = 0;
				}
				i.next = ZPP_Island.zpp_pool;
				ZPP_Island.zpp_pool = i;
			}
		}
		b.removedFromSpace();
		b.space = null;
	}
	while(this.constraints.head != null) {
		var c2 = this.constraints.pop_unsafe();
		if(c2.component != null) {
			var i1 = c2.component.island;
			if(i1 != null) {
				while(i1.comps.head != null) {
					var c3 = i1.comps.pop_unsafe();
					c3.sleeping = false;
					c3.island = null;
					c3.parent = c3;
					c3.rank = 0;
				}
				i1.next = ZPP_Island.zpp_pool;
				ZPP_Island.zpp_pool = i1;
			}
		}
		c2.removedFromSpace();
		c2.space = null;
	}
	this.kinematics.clear();
	var stack = new ZNPList_ZPP_Compound();
	while(this.compounds.head != null) stack.add(this.compounds.pop_unsafe());
	while(stack.head != null) {
		var comp = stack.pop_unsafe();
		comp.removedFromSpace();
		comp.space = null;
		var cx_ite = comp.bodies.head;
		while(cx_ite != null) {
			var b1 = cx_ite.elt;
			if(b1.component != null) {
				var i2 = b1.component.island;
				if(i2 != null) {
					while(i2.comps.head != null) {
						var c4 = i2.comps.pop_unsafe();
						c4.sleeping = false;
						c4.island = null;
						c4.parent = c4;
						c4.rank = 0;
					}
					i2.next = ZPP_Island.zpp_pool;
					ZPP_Island.zpp_pool = i2;
				}
			}
			b1.removedFromSpace();
			b1.space = null;
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = comp.constraints.head;
		while(cx_ite1 != null) {
			var c5 = cx_ite1.elt;
			if(c5.component != null) {
				var i3 = c5.component.island;
				if(i3 != null) {
					while(i3.comps.head != null) {
						var c6 = i3.comps.pop_unsafe();
						c6.sleeping = false;
						c6.island = null;
						c6.parent = c6;
						c6.rank = 0;
					}
					i3.next = ZPP_Island.zpp_pool;
					ZPP_Island.zpp_pool = i3;
				}
			}
			c5.removedFromSpace();
			c5.space = null;
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = comp.compounds.head;
		while(cx_ite2 != null) {
			stack.add(cx_ite2.elt);
			cx_ite2 = cx_ite2.next;
		}
	}
	this.staticsleep.clear();
	this.live.clear();
	this.live_constraints.clear();
	this.stamp = 0;
	this.time = 0.0;
	this.mrca1.clear();
	this.mrca2.clear();
	this.prelisteners.clear();
	this.cbsets.clear();
};
ZPP_Space.prototype.bodies_adder = function(x) {
	if(x.zpp_inner.compound != null) {
		throw new js._Boot.HaxeError("Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set");
	}
	if(x.zpp_inner.space != this) {
		if(x.zpp_inner.space != null) {
			x.zpp_inner.space.outer.zpp_inner.wrap_bodies.remove(x);
		}
		this.addBody(x.zpp_inner);
		return true;
	} else {
		return false;
	}
};
ZPP_Space.prototype.bodies_subber = function(x) {
	this.remBody(x.zpp_inner);
};
ZPP_Space.prototype.bodies_modifiable = function() {
	if(this.midstep) {
		throw new js._Boot.HaxeError("Error: Space::bodies cannot be set during space step()");
	}
};
ZPP_Space.prototype.compounds_adder = function(x) {
	if(x.zpp_inner.compound != null) {
		throw new js._Boot.HaxeError("Error: Cannot set the space of an inner Compound, only the root Compound space can be set");
	}
	if(x.zpp_inner.space != this) {
		if(x.zpp_inner.space != null) {
			x.zpp_inner.space.wrap_compounds.remove(x);
		}
		this.addCompound(x.zpp_inner);
		return true;
	} else {
		return false;
	}
};
ZPP_Space.prototype.compounds_subber = function(x) {
	this.remCompound(x.zpp_inner);
};
ZPP_Space.prototype.compounds_modifiable = function() {
	if(this.midstep) {
		throw new js._Boot.HaxeError("Error: Space::compounds cannot be set during space step()");
	}
};
ZPP_Space.prototype.constraints_adder = function(x) {
	if(x.zpp_inner.compound != null) {
		throw new js._Boot.HaxeError("Error: Cannot set the space of a Constraint belonging to a Compound, only the root Compound space can be set");
	}
	if(x.zpp_inner.space != this) {
		if(x.zpp_inner.space != null) {
			x.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(x);
		}
		this.addConstraint(x.zpp_inner);
		return true;
	} else {
		return false;
	}
};
ZPP_Space.prototype.constraints_subber = function(x) {
	this.remConstraint(x.zpp_inner);
};
ZPP_Space.prototype.constraints_modifiable = function() {
	if(this.midstep) {
		throw new js._Boot.HaxeError("Error: Space::constraints cannot be set during space step()");
	}
};
ZPP_Space.prototype.listeners_adder = function(x) {
	if(x.zpp_inner.space != this) {
		if(x.zpp_inner.space != null) {
			x.zpp_inner.space.outer.zpp_inner.wrap_listeners.remove(x);
		}
		this.addListener(x.zpp_inner);
		return true;
	} else {
		return false;
	}
};
ZPP_Space.prototype.listeners_subber = function(x) {
	this.remListener(x.zpp_inner);
};
ZPP_Space.prototype.listeners_modifiable = function() {
	if(this.midstep) {
		throw new js._Boot.HaxeError("Error: Space::listeners cannot be set during space step()");
	}
};
ZPP_Space.prototype.revoke_listener = function(x) {
};
ZPP_Space.prototype.unrevoke_listener = function(x) {
};
ZPP_Space.prototype.addListener = function(x) {
	x.space = this;
	x.addedToSpace();
};
ZPP_Space.prototype.remListener = function(x) {
	x.removedFromSpace();
	x.space = null;
};
ZPP_Space.prototype.add_callbackset = function(cb) {
	var _this = cb.int1.cbsets;
	var ret;
	if(ZNPNode_ZPP_CallbackSet.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CallbackSet();
	} else {
		ret = ZNPNode_ZPP_CallbackSet.zpp_pool;
		ZNPNode_ZPP_CallbackSet.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = cb;
	var temp = ret;
	temp.next = _this.head;
	_this.head = temp;
	_this.modified = true;
	_this.length++;
	var _this1 = cb.int2.cbsets;
	var ret1;
	if(ZNPNode_ZPP_CallbackSet.zpp_pool == null) {
		ret1 = new ZNPNode_ZPP_CallbackSet();
	} else {
		ret1 = ZNPNode_ZPP_CallbackSet.zpp_pool;
		ZNPNode_ZPP_CallbackSet.zpp_pool = ret1.next;
		ret1.next = null;
	}
	ret1.elt = cb;
	var temp1 = ret1;
	temp1.next = _this1.head;
	_this1.head = temp1;
	_this1.modified = true;
	_this1.length++;
	var _this2 = this.callbackset_list;
	cb._inuse = true;
	cb.next = _this2.next;
	_this2.next = cb;
	_this2.modified = true;
	_this2.length++;
};
ZPP_Space.prototype.remove_callbackset = function(cb) {
	cb.lazydel = true;
	var _this = cb.int1.cbsets;
	var pre = null;
	var cur = _this.head;
	while(cur != null) {
		if(cur.elt == cb) {
			var old;
			var ret;
			if(pre == null) {
				old = _this.head;
				ret = old.next;
				_this.head = ret;
				if(_this.head == null) {
					_this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					_this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_CallbackSet.zpp_pool;
			ZNPNode_ZPP_CallbackSet.zpp_pool = o;
			_this.modified = true;
			_this.length--;
			_this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	var _this1 = cb.int2.cbsets;
	var pre1 = null;
	var cur1 = _this1.head;
	while(cur1 != null) {
		if(cur1.elt == cb) {
			var old1;
			var ret1;
			if(pre1 == null) {
				old1 = _this1.head;
				ret1 = old1.next;
				_this1.head = ret1;
				if(_this1.head == null) {
					_this1.pushmod = true;
				}
			} else {
				old1 = pre1.next;
				ret1 = old1.next;
				pre1.next = ret1;
				if(ret1 == null) {
					_this1.pushmod = true;
				}
			}
			var o1 = old1;
			o1.elt = null;
			o1.next = ZNPNode_ZPP_CallbackSet.zpp_pool;
			ZNPNode_ZPP_CallbackSet.zpp_pool = o1;
			_this1.modified = true;
			_this1.length--;
			_this1.pushmod = true;
			break;
		}
		pre1 = cur1;
		cur1 = cur1.next;
	}
};
ZPP_Space.prototype.transmitType = function(p,new_type) {
	if(!p.world) {
		p.component.waket = this.stamp + (this.midstep?0:1);
		if(p.type == 3) {
			p.kinematicDelaySleep = true;
		}
		if(p.component.sleeping) {
			this.really_wake(p,false);
		}
	}
	if(p.type == 2) {
		this.live.remove(p);
	} else if(p.type == 3) {
		this.kinematics.remove(p);
		this.staticsleep.remove(p);
	} else if(p.type == 1) {
		this.staticsleep.remove(p);
	}
	p.type = new_type;
	if(p.type == 3) {
		this.kinematics.add(p);
	}
	if(p.type == 1) {
		this.static_validation(p);
	}
	p.component.sleeping = true;
	if(!p.world) {
		p.component.waket = this.stamp + (this.midstep?0:1);
		if(p.type == 3) {
			p.kinematicDelaySleep = true;
		}
		if(p.component.sleeping) {
			this.really_wake(p,true);
		}
	}
};
ZPP_Space.prototype.added_shape = function(s,dontwake) {
	if(dontwake == null) {
		dontwake = false;
	}
	if(!dontwake) {
		var o = s.body;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep?0:1);
			if(o.type == 3) {
				o.kinematicDelaySleep = true;
			}
			if(o.component.sleeping) {
				this.really_wake(o,false);
			}
		}
	}
	this.bphase.insert(s);
	s.addedToSpace();
};
ZPP_Space.prototype.removed_shape = function(s,deleting) {
	if(deleting == null) {
		deleting = false;
	}
	var _gthis = this;
	var body = s.body;
	if(!deleting) {
		body.wake();
	}
	var pre = null;
	var cx_ite = body.arbiters.head;
	while(cx_ite != null) {
		var xarb = cx_ite.elt;
		if(xarb.ws1 == s || xarb.ws2 == s) {
			if(xarb.present != 0) {
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite1 = this.mrca1.head;
				while(cx_ite1 != null) {
					var i1 = cx_ite1.elt;
					var cx_ite2 = this.mrca2.head;
					while(cx_ite2 != null) {
						var i2 = cx_ite2.elt;
						var cb1 = i1.cbSet;
						var cb2 = i2.cbSet;
						cb1.validate();
						cb2.validate();
						var ret = null;
						var cx_ite3 = (cb1.cbpairs.length < cb2.cbpairs.length?cb1.cbpairs:cb2.cbpairs).head;
						while(cx_ite3 != null) {
							var p = cx_ite3.elt;
							if(p.a == cb1 && p.b == cb2 || p.a == cb2 && p.b == cb1) {
								ret = p;
								break;
							}
							cx_ite3 = cx_ite3.next;
						}
						if(ret == null) {
							var ret1;
							if(ZPP_CbSetPair.zpp_pool == null) {
								ret1 = new ZPP_CbSetPair();
							} else {
								ret1 = ZPP_CbSetPair.zpp_pool;
								ZPP_CbSetPair.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.zip_listeners = true;
							if(ZPP_CbSet.setlt(cb1,cb2)) {
								ret1.a = cb1;
								ret1.b = cb2;
							} else {
								ret1.a = cb2;
								ret1.b = cb1;
							}
							ret = ret1;
							cb1.cbpairs.add(ret);
							if(cb2 != cb1) {
								cb2.cbpairs.add(ret);
							}
						}
						if(ret.zip_listeners) {
							ret.zip_listeners = false;
							ret.__validate();
						}
						if(ret.listeners.head == null) {
							cx_ite2 = cx_ite2.next;
							continue;
						}
						var callbackset = ZPP_Interactor.get(i1,i2);
						callbackset.remove_arb(xarb);
						xarb.present--;
						var ret2 = null;
						var cx_ite4 = (cb1.cbpairs.length < cb2.cbpairs.length?cb1.cbpairs:cb2.cbpairs).head;
						while(cx_ite4 != null) {
							var p1 = cx_ite4.elt;
							if(p1.a == cb1 && p1.b == cb2 || p1.a == cb2 && p1.b == cb1) {
								ret2 = p1;
								break;
							}
							cx_ite4 = cx_ite4.next;
						}
						if(ret2 == null) {
							var ret3;
							if(ZPP_CbSetPair.zpp_pool == null) {
								ret3 = new ZPP_CbSetPair();
							} else {
								ret3 = ZPP_CbSetPair.zpp_pool;
								ZPP_CbSetPair.zpp_pool = ret3.next;
								ret3.next = null;
							}
							ret3.zip_listeners = true;
							if(ZPP_CbSet.setlt(cb1,cb2)) {
								ret3.a = cb1;
								ret3.b = cb2;
							} else {
								ret3.a = cb2;
								ret3.b = cb1;
							}
							ret2 = ret3;
							cb1.cbpairs.add(ret2);
							if(cb2 != cb1) {
								cb2.cbpairs.add(ret2);
							}
						}
						if(ret2.zip_listeners) {
							ret2.zip_listeners = false;
							ret2.__validate();
						}
						var cx_ite5 = ret2.listeners.head;
						while(cx_ite5 != null) {
							var x = cx_ite5.elt;
							if(x.event == 1) {
								if((x.itype & xarb.type) != 0 && callbackset.empty_arb(x.itype)) {
									var cb = _gthis.push_callback(x);
									cb.event = 1;
									var o1 = callbackset.int1;
									var o2 = callbackset.int2;
									var tmp;
									var _this = x.options1;
									var xs = o1.cbTypes;
									if(_this.nonemptyintersection(xs,_this.includes) && !_this.nonemptyintersection(xs,_this.excludes)) {
										var _this1 = x.options2;
										var xs1 = o2.cbTypes;
										if(_this1.nonemptyintersection(xs1,_this1.includes)) {
											tmp = !_this1.nonemptyintersection(xs1,_this1.excludes);
										} else {
											tmp = false;
										}
									} else {
										tmp = false;
									}
									if(tmp) {
										cb.int1 = o1;
										cb.int2 = o2;
									} else {
										cb.int1 = o2;
										cb.int2 = o1;
									}
									cb.set = callbackset;
								}
							}
							cx_ite5 = cx_ite5.next;
						}
						if(callbackset.arbiters.head == null) {
							this.remove_callbackset(callbackset);
						}
						cx_ite2 = cx_ite2.next;
					}
					cx_ite1 = cx_ite1.next;
				}
			}
			if(xarb.b1 != body && xarb.b1.type == 2) {
				var o = xarb.b1;
				if(!o.world) {
					o.component.waket = this.stamp + (this.midstep?0:1);
					if(o.type == 3) {
						o.kinematicDelaySleep = true;
					}
					if(o.component.sleeping) {
						this.really_wake(o,false);
					}
				}
			}
			if(xarb.b2 != body && xarb.b2.type == 2) {
				var o3 = xarb.b2;
				if(!o3.world) {
					o3.component.waket = this.stamp + (this.midstep?0:1);
					if(o3.type == 3) {
						o3.kinematicDelaySleep = true;
					}
					if(o3.component.sleeping) {
						this.really_wake(o3,false);
					}
				}
			}
			xarb.cleared = true;
			if(body == null || xarb.b2 == body) {
				var _this2 = xarb.b1.arbiters;
				var pre1 = null;
				var cur = _this2.head;
				while(cur != null) {
					if(cur.elt == xarb) {
						var old;
						var ret4;
						if(pre1 == null) {
							old = _this2.head;
							ret4 = old.next;
							_this2.head = ret4;
							if(_this2.head == null) {
								_this2.pushmod = true;
							}
						} else {
							old = pre1.next;
							ret4 = old.next;
							pre1.next = ret4;
							if(ret4 == null) {
								_this2.pushmod = true;
							}
						}
						var o4 = old;
						o4.elt = null;
						o4.next = ZNPNode_ZPP_Arbiter.zpp_pool;
						ZNPNode_ZPP_Arbiter.zpp_pool = o4;
						_this2.modified = true;
						_this2.length--;
						_this2.pushmod = true;
						break;
					}
					pre1 = cur;
					cur = cur.next;
				}
			}
			if(body == null || xarb.b1 == body) {
				var _this3 = xarb.b2.arbiters;
				var pre2 = null;
				var cur1 = _this3.head;
				while(cur1 != null) {
					if(cur1.elt == xarb) {
						var old1;
						var ret5;
						if(pre2 == null) {
							old1 = _this3.head;
							ret5 = old1.next;
							_this3.head = ret5;
							if(_this3.head == null) {
								_this3.pushmod = true;
							}
						} else {
							old1 = pre2.next;
							ret5 = old1.next;
							pre2.next = ret5;
							if(ret5 == null) {
								_this3.pushmod = true;
							}
						}
						var o5 = old1;
						o5.elt = null;
						o5.next = ZNPNode_ZPP_Arbiter.zpp_pool;
						ZNPNode_ZPP_Arbiter.zpp_pool = o5;
						_this3.modified = true;
						_this3.length--;
						_this3.pushmod = true;
						break;
					}
					pre2 = cur1;
					cur1 = cur1.next;
				}
			}
			if(xarb.pair != null) {
				xarb.pair.arb = null;
				xarb.pair = null;
			}
			xarb.active = false;
			this.f_arbiters.modified = true;
			cx_ite = body.arbiters.erase(pre);
			continue;
		}
		pre = cx_ite;
		cx_ite = cx_ite.next;
	}
	this.bphase.remove(s);
	s.removedFromSpace();
};
ZPP_Space.prototype.addConstraint = function(con) {
	con.space = this;
	con.addedToSpace();
	if(con.active) {
		con.component.sleeping = true;
		this.wake_constraint(con,true);
	}
};
ZPP_Space.prototype.remConstraint = function(con) {
	if(con.active) {
		this.wake_constraint(con,true);
		this.live_constraints.remove(con);
	}
	con.removedFromSpace();
	con.space = null;
};
ZPP_Space.prototype.addCompound = function(x) {
	x.space = this;
	x.addedToSpace();
	var cx_ite = x.bodies.head;
	while(cx_ite != null) {
		this.addBody(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = x.constraints.head;
	while(cx_ite1 != null) {
		this.addConstraint(cx_ite1.elt);
		cx_ite1 = cx_ite1.next;
	}
	var cx_ite2 = x.compounds.head;
	while(cx_ite2 != null) {
		this.addCompound(cx_ite2.elt);
		cx_ite2 = cx_ite2.next;
	}
};
ZPP_Space.prototype.remCompound = function(x) {
	var cx_ite = x.bodies.head;
	while(cx_ite != null) {
		this.remBody(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = x.constraints.head;
	while(cx_ite1 != null) {
		this.remConstraint(cx_ite1.elt);
		cx_ite1 = cx_ite1.next;
	}
	var cx_ite2 = x.compounds.head;
	while(cx_ite2 != null) {
		this.remCompound(cx_ite2.elt);
		cx_ite2 = cx_ite2.next;
	}
	x.removedFromSpace();
	x.space = null;
};
ZPP_Space.prototype.addBody = function(body,flag) {
	if(flag == null) {
		flag = -1;
	}
	body.space = this;
	body.addedToSpace();
	body.component.sleeping = true;
	if(!body.world) {
		body.component.waket = this.stamp + (this.midstep?0:1);
		if(body.type == 3) {
			body.kinematicDelaySleep = true;
		}
		if(body.component.sleeping) {
			this.really_wake(body,true);
		}
	}
	var cx_ite = body.shapes.head;
	while(cx_ite != null) {
		var shape = cx_ite.elt;
		this.bphase.insert(shape);
		shape.addedToSpace();
		cx_ite = cx_ite.next;
	}
	if(body.type == 1) {
		this.static_validation(body);
	} else if(body.type != 2) {
		if(flag != 3) {
			this.kinematics.add(body);
		}
	}
};
ZPP_Space.prototype.remBody = function(body,flag) {
	if(flag == null) {
		flag = -1;
	}
	if(body.type == 1) {
		if(!body.world) {
			body.component.waket = this.stamp + (this.midstep?0:1);
			if(body.type == 3) {
				body.kinematicDelaySleep = true;
			}
			if(body.component.sleeping) {
				this.really_wake(body,true);
			}
		}
		this.staticsleep.remove(body);
	} else if(body.type == 2) {
		if(!body.world) {
			body.component.waket = this.stamp + (this.midstep?0:1);
			if(body.type == 3) {
				body.kinematicDelaySleep = true;
			}
			if(body.component.sleeping) {
				this.really_wake(body,true);
			}
		}
		this.live.remove(body);
	} else {
		if(flag != 3) {
			this.kinematics.remove(body);
		}
		if(!body.world) {
			body.component.waket = this.stamp + (this.midstep?0:1);
			if(body.type == 3) {
				body.kinematicDelaySleep = true;
			}
			if(body.component.sleeping) {
				this.really_wake(body,true);
			}
		}
		this.staticsleep.remove(body);
	}
	var cx_ite = body.shapes.head;
	while(cx_ite != null) {
		this.removed_shape(cx_ite.elt,true);
		cx_ite = cx_ite.next;
	}
	body.removedFromSpace();
	body.space = null;
};
ZPP_Space.prototype.shapesUnderPoint = function(x,y,filter,output) {
	return this.bphase.shapesUnderPoint(x,y,filter,output);
};
ZPP_Space.prototype.bodiesUnderPoint = function(x,y,filter,output) {
	return this.bphase.bodiesUnderPoint(x,y,filter,output);
};
ZPP_Space.prototype.shapesInAABB = function(aabb,strict,cont,filter,output) {
	return this.bphase.shapesInAABB(aabb.zpp_inner,strict,cont,filter,output);
};
ZPP_Space.prototype.bodiesInAABB = function(aabb,strict,cont,filter,output) {
	return this.bphase.bodiesInAABB(aabb.zpp_inner,strict,cont,filter,output);
};
ZPP_Space.prototype.shapesInCircle = function(pos,rad,cont,filter,output) {
	if(pos != null && pos.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = pos.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp = pos.zpp_inner.x;
	if(pos != null && pos.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = pos.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	return this.bphase.shapesInCircle(tmp,pos.zpp_inner.y,rad,cont,filter,output);
};
ZPP_Space.prototype.bodiesInCircle = function(pos,rad,cont,filter,output) {
	if(pos != null && pos.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this = pos.zpp_inner;
	if(_this._validate != null) {
		_this._validate();
	}
	var tmp = pos.zpp_inner.x;
	if(pos != null && pos.zpp_disp) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
	}
	var _this1 = pos.zpp_inner;
	if(_this1._validate != null) {
		_this1._validate();
	}
	return this.bphase.bodiesInCircle(tmp,pos.zpp_inner.y,rad,cont,filter,output);
};
ZPP_Space.prototype.shapesInShape = function(shape,cont,filter,output) {
	return this.bphase.shapesInShape(shape,cont,filter,output);
};
ZPP_Space.prototype.bodiesInShape = function(shape,cont,filter,output) {
	return this.bphase.bodiesInShape(shape,cont,filter,output);
};
ZPP_Space.prototype.rayCast = function(ray,inner,filter) {
	return this.bphase.rayCast(ray.zpp_inner,inner,filter == null?null:filter.zpp_inner);
};
ZPP_Space.prototype.rayMultiCast = function(ray,inner,filter,output) {
	return this.bphase.rayMultiCast(ray.zpp_inner,inner,filter == null?null:filter.zpp_inner,output);
};
ZPP_Space.prototype.convexShapeList = null;
ZPP_Space.prototype.convexCast = function(shape,deltaTime,filter,dynamics) {
	var toi;
	if(ZPP_ToiEvent.zpp_pool == null) {
		toi = new ZPP_ToiEvent();
	} else {
		toi = ZPP_ToiEvent.zpp_pool;
		ZPP_ToiEvent.zpp_pool = toi.next;
		toi.next = null;
	}
	toi.failed = false;
	toi.s1 = toi.s2 = null;
	toi.arbiter = null;
	if(shape.type == 0) {
		var _this = shape.circle;
		if(_this.zip_worldCOM) {
			if(_this.body != null) {
				_this.zip_worldCOM = false;
				if(_this.zip_localCOM) {
					_this.zip_localCOM = false;
					if(_this.type == 1) {
						var _this1 = _this.polygon;
						if(_this1.lverts.next == null) {
							throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
						}
						if(_this1.lverts.next.next == null) {
							_this1.localCOMx = _this1.lverts.next.x;
							_this1.localCOMy = _this1.lverts.next.y;
						} else if(_this1.lverts.next.next.next == null) {
							_this1.localCOMx = _this1.lverts.next.x;
							_this1.localCOMy = _this1.lverts.next.y;
							_this1.localCOMx += _this1.lverts.next.next.x;
							_this1.localCOMy += _this1.lverts.next.next.y;
							_this1.localCOMx *= 0.5;
							_this1.localCOMy *= 0.5;
						} else {
							_this1.localCOMx = 0;
							_this1.localCOMy = 0;
							var area = 0.0;
							var cx_ite = _this1.lverts.next;
							var u = cx_ite;
							cx_ite = cx_ite.next;
							var v = cx_ite;
							cx_ite = cx_ite.next;
							while(cx_ite != null) {
								var w = cx_ite;
								area += v.x * (w.y - u.y);
								var cf = w.y * v.x - w.x * v.y;
								_this1.localCOMx += (v.x + w.x) * cf;
								_this1.localCOMy += (v.y + w.y) * cf;
								u = v;
								v = w;
								cx_ite = cx_ite.next;
							}
							cx_ite = _this1.lverts.next;
							var w1 = cx_ite;
							area += v.x * (w1.y - u.y);
							var cf1 = w1.y * v.x - w1.x * v.y;
							_this1.localCOMx += (v.x + w1.x) * cf1;
							_this1.localCOMy += (v.y + w1.y) * cf1;
							u = v;
							cx_ite = cx_ite.next;
							var w2 = cx_ite;
							area += w1.x * (w2.y - u.y);
							var cf2 = w2.y * w1.x - w2.x * w1.y;
							_this1.localCOMx += (w1.x + w2.x) * cf2;
							_this1.localCOMy += (w1.y + w2.y) * cf2;
							area = 1 / (3 * area);
							var t = area;
							_this1.localCOMx *= t;
							_this1.localCOMy *= t;
						}
					}
					if(_this.wrap_localCOM != null) {
						_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
						_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
					}
				}
				var _this2 = _this.body;
				if(_this2.zip_axis) {
					_this2.zip_axis = false;
					_this2.axisx = Math.sin(_this2.rot);
					_this2.axisy = Math.cos(_this2.rot);
				}
				_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
				_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
			}
		}
	} else {
		var _this3 = shape.polygon;
		if(_this3.zip_gaxi) {
			if(_this3.body != null) {
				_this3.zip_gaxi = false;
				_this3.validate_laxi();
				var _this4 = _this3.body;
				if(_this4.zip_axis) {
					_this4.zip_axis = false;
					_this4.axisx = Math.sin(_this4.rot);
					_this4.axisy = Math.cos(_this4.rot);
				}
				if(_this3.zip_gverts) {
					if(_this3.body != null) {
						_this3.zip_gverts = false;
						_this3.validate_lverts();
						var _this5 = _this3.body;
						if(_this5.zip_axis) {
							_this5.zip_axis = false;
							_this5.axisx = Math.sin(_this5.rot);
							_this5.axisy = Math.cos(_this5.rot);
						}
						var li = _this3.lverts.next;
						var cx_ite1 = _this3.gverts.next;
						while(cx_ite1 != null) {
							var g = cx_ite1;
							var l = li;
							li = li.next;
							g.x = _this3.body.posx + (_this3.body.axisy * l.x - _this3.body.axisx * l.y);
							g.y = _this3.body.posy + (l.x * _this3.body.axisx + l.y * _this3.body.axisy);
							cx_ite1 = cx_ite1.next;
						}
					}
				}
				var ite = _this3.edges.head;
				var cx_ite2 = _this3.gverts.next;
				var u1 = cx_ite2;
				cx_ite2 = cx_ite2.next;
				while(cx_ite2 != null) {
					var v1 = cx_ite2;
					var e = ite.elt;
					ite = ite.next;
					e.gp0 = u1;
					e.gp1 = v1;
					e.gnormx = _this3.body.axisy * e.lnormx - _this3.body.axisx * e.lnormy;
					e.gnormy = e.lnormx * _this3.body.axisx + e.lnormy * _this3.body.axisy;
					e.gprojection = _this3.body.posx * e.gnormx + _this3.body.posy * e.gnormy + e.lprojection;
					if(e.wrap_gnorm != null) {
						e.wrap_gnorm.zpp_inner.x = e.gnormx;
						e.wrap_gnorm.zpp_inner.y = e.gnormy;
					}
					e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
					e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
					u1 = v1;
					cx_ite2 = cx_ite2.next;
				}
				var e1 = ite.elt;
				e1.gp0 = u1;
				e1.gp1 = _this3.gverts.next;
				e1.gnormx = _this3.body.axisy * e1.lnormx - _this3.body.axisx * e1.lnormy;
				e1.gnormy = e1.lnormx * _this3.body.axisx + e1.lnormy * _this3.body.axisy;
				e1.gprojection = _this3.body.posx * e1.gnormx + _this3.body.posy * e1.gnormy + e1.lprojection;
				if(e1.wrap_gnorm != null) {
					e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
					e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
				}
				e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
				e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
			}
		}
	}
	var body = shape.body;
	var prex = body.posx;
	var prey = body.posy;
	body.sweepTime = 0;
	body.sweep_angvel = body.angvel;
	var delta = deltaTime - body.sweepTime;
	if(delta != 0) {
		body.sweepTime = deltaTime;
		body.posx += body.velx * delta;
		body.posy += body.vely * delta;
		if(body.angvel != 0) {
			var dr = body.sweep_angvel * delta;
			body.rot += dr;
			if(dr * dr > 0.0001) {
				body.axisx = Math.sin(body.rot);
				body.axisy = Math.cos(body.rot);
			} else {
				var d2 = dr * dr;
				var p = 1 - 0.5 * d2;
				var m = 1 - d2 * d2 / 8;
				var nx = (p * body.axisx + dr * body.axisy) * m;
				body.axisy = (p * body.axisy - dr * body.axisx) * m;
				body.axisx = nx;
			}
		}
	}
	var postx = body.posx;
	var posty = body.posy;
	shape.validate_sweepRadius();
	var rad = shape.sweepRadius;
	var aabb;
	if(ZPP_AABB.zpp_pool == null) {
		aabb = new ZPP_AABB();
	} else {
		aabb = ZPP_AABB.zpp_pool;
		ZPP_AABB.zpp_pool = aabb.next;
		aabb.next = null;
	}
	aabb.minx = (prex < postx?prex:postx) - rad;
	aabb.maxx = (prex > postx?prex:postx) + rad;
	aabb.miny = (prey < posty?prey:posty) - rad;
	aabb.maxy = (prey > posty?prey:posty) + rad;
	var list = this.convexShapeList = this.bphase.shapesInAABB(aabb,false,false,filter == null?null:filter.zpp_inner,this.convexShapeList);
	var o = aabb;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o.wrap_min = o.wrap_max = null;
	o._invalidate = null;
	o._validate = null;
	o.next = ZPP_AABB.zpp_pool;
	ZPP_AABB.zpp_pool = o;
	var minAxisx = 0.0;
	var minAxisy = 0.0;
	minAxisx = 0;
	minAxisy = 0;
	var minPosx = 0.0;
	var minPosy = 0.0;
	minPosx = 0;
	minPosy = 0;
	var mins = null;
	var mint = deltaTime + 1;
	list.zpp_inner.valmod();
	var _g = ShapeIterator.get(list);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this6 = _g.zpp_inner;
		_this6.zpp_inner.valmod();
		if(_this6.zpp_inner.zip_length) {
			_this6.zpp_inner.zip_length = false;
			_this6.zpp_inner.user_length = _this6.zpp_inner.inner.length;
		}
		var length = _this6.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ShapeIterator.zpp_pool;
			ShapeIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var s = _g.zpp_inner.at(_g.zpp_i++);
		if(s != shape.outer && (s.zpp_inner.body != null?s.zpp_inner.body.outer:null) != body.outer) {
			toi.s1 = shape;
			toi.s2 = s.zpp_inner;
			if(dynamics) {
				s.zpp_inner.validate_sweepRadius();
				(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweep_angvel = (s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.angvel;
				(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepTime = 0;
				ZPP_SweepDistance.dynamicSweep(toi,deltaTime,0,0,true);
				var _this7 = (s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner;
				var delta1 = 0 - _this7.sweepTime;
				if(delta1 != 0) {
					_this7.sweepTime = 0;
					_this7.posx += _this7.velx * delta1;
					_this7.posy += _this7.vely * delta1;
					if(_this7.angvel != 0) {
						var dr1 = _this7.sweep_angvel * delta1;
						_this7.rot += dr1;
						if(dr1 * dr1 > 0.0001) {
							_this7.axisx = Math.sin(_this7.rot);
							_this7.axisy = Math.cos(_this7.rot);
						} else {
							var d21 = dr1 * dr1;
							var p1 = 1 - 0.5 * d21;
							var m1 = 1 - d21 * d21 / 8;
							var nx1 = (p1 * _this7.axisx + dr1 * _this7.axisy) * m1;
							_this7.axisy = (p1 * _this7.axisy - dr1 * _this7.axisx) * m1;
							_this7.axisx = nx1;
						}
					}
				}
				var _this8 = (s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner;
				var s1 = s.zpp_inner;
				if(s1.type == 0) {
					s1.worldCOMx = _this8.posx + (_this8.axisy * s1.localCOMx - _this8.axisx * s1.localCOMy);
					s1.worldCOMy = _this8.posy + (s1.localCOMx * _this8.axisx + s1.localCOMy * _this8.axisy);
				} else {
					var p2 = s1.polygon;
					var li1 = p2.lverts.next;
					var cx_ite3 = p2.gverts.next;
					while(cx_ite3 != null) {
						var g1 = cx_ite3;
						var l1 = li1;
						li1 = li1.next;
						g1.x = _this8.posx + (_this8.axisy * l1.x - _this8.axisx * l1.y);
						g1.y = _this8.posy + (l1.x * _this8.axisx + l1.y * _this8.axisy);
						cx_ite3 = cx_ite3.next;
					}
					var ite1 = p2.edges.head;
					var cx_ite4 = p2.gverts.next;
					var u2 = cx_ite4;
					cx_ite4 = cx_ite4.next;
					while(cx_ite4 != null) {
						var v2 = cx_ite4;
						var e2 = ite1.elt;
						ite1 = ite1.next;
						e2.gnormx = _this8.axisy * e2.lnormx - _this8.axisx * e2.lnormy;
						e2.gnormy = e2.lnormx * _this8.axisx + e2.lnormy * _this8.axisy;
						e2.gprojection = _this8.posx * e2.gnormx + _this8.posy * e2.gnormy + e2.lprojection;
						e2.tp0 = u2.y * e2.gnormx - u2.x * e2.gnormy;
						e2.tp1 = v2.y * e2.gnormx - v2.x * e2.gnormy;
						u2 = v2;
						cx_ite4 = cx_ite4.next;
					}
					var v3 = p2.gverts.next;
					var e3 = ite1.elt;
					e3.gnormx = _this8.axisy * e3.lnormx - _this8.axisx * e3.lnormy;
					e3.gnormy = e3.lnormx * _this8.axisx + e3.lnormy * _this8.axisy;
					e3.gprojection = _this8.posx * e3.gnormx + _this8.posy * e3.gnormy + e3.lprojection;
					e3.tp0 = u2.y * e3.gnormx - u2.x * e3.gnormy;
					e3.tp1 = v3.y * e3.gnormx - v3.x * e3.gnormy;
				}
			} else {
				ZPP_SweepDistance.staticSweep(toi,deltaTime,0,0);
			}
			toi.toi *= deltaTime;
			if(toi.toi > 0 && toi.toi < mint) {
				mint = toi.toi;
				minAxisx = toi.axis.x;
				minAxisy = toi.axis.y;
				minPosx = toi.c2.x;
				minPosy = toi.c2.y;
				mins = s;
			}
		}
	}
	list.clear();
	var o1 = toi;
	o1.next = ZPP_ToiEvent.zpp_pool;
	ZPP_ToiEvent.zpp_pool = o1;
	var delta2 = 0 - body.sweepTime;
	if(delta2 != 0) {
		body.sweepTime = 0;
		body.posx += body.velx * delta2;
		body.posy += body.vely * delta2;
		if(body.angvel != 0) {
			var dr2 = body.sweep_angvel * delta2;
			body.rot += dr2;
			if(dr2 * dr2 > 0.0001) {
				body.axisx = Math.sin(body.rot);
				body.axisy = Math.cos(body.rot);
			} else {
				var d22 = dr2 * dr2;
				var p3 = 1 - 0.5 * d22;
				var m2 = 1 - d22 * d22 / 8;
				var nx2 = (p3 * body.axisx + dr2 * body.axisy) * m2;
				body.axisy = (p3 * body.axisy - dr2 * body.axisx) * m2;
				body.axisx = nx2;
			}
		}
	}
	if(shape.type == 0) {
		shape.worldCOMx = body.posx + (body.axisy * shape.localCOMx - body.axisx * shape.localCOMy);
		shape.worldCOMy = body.posy + (shape.localCOMx * body.axisx + shape.localCOMy * body.axisy);
	} else {
		var p4 = shape.polygon;
		var li2 = p4.lverts.next;
		var cx_ite5 = p4.gverts.next;
		while(cx_ite5 != null) {
			var g2 = cx_ite5;
			var l2 = li2;
			li2 = li2.next;
			g2.x = body.posx + (body.axisy * l2.x - body.axisx * l2.y);
			g2.y = body.posy + (l2.x * body.axisx + l2.y * body.axisy);
			cx_ite5 = cx_ite5.next;
		}
		var ite2 = p4.edges.head;
		var cx_ite6 = p4.gverts.next;
		var u3 = cx_ite6;
		cx_ite6 = cx_ite6.next;
		while(cx_ite6 != null) {
			var v4 = cx_ite6;
			var e4 = ite2.elt;
			ite2 = ite2.next;
			e4.gnormx = body.axisy * e4.lnormx - body.axisx * e4.lnormy;
			e4.gnormy = e4.lnormx * body.axisx + e4.lnormy * body.axisy;
			e4.gprojection = body.posx * e4.gnormx + body.posy * e4.gnormy + e4.lprojection;
			e4.tp0 = u3.y * e4.gnormx - u3.x * e4.gnormy;
			e4.tp1 = v4.y * e4.gnormx - v4.x * e4.gnormy;
			u3 = v4;
			cx_ite6 = cx_ite6.next;
		}
		var v5 = p4.gverts.next;
		var e5 = ite2.elt;
		e5.gnormx = body.axisy * e5.lnormx - body.axisx * e5.lnormy;
		e5.gnormy = e5.lnormx * body.axisx + e5.lnormy * body.axisy;
		e5.gprojection = body.posx * e5.gnormx + body.posy * e5.gnormy + e5.lprojection;
		e5.tp0 = u3.y * e5.gnormx - u3.x * e5.gnormy;
		e5.tp1 = v5.y * e5.gnormx - v5.x * e5.gnormy;
	}
	if(mint <= deltaTime) {
		var x = -minAxisx;
		var y = -minAxisy;
		if(x != x || y != y) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret;
		if(ZPP_PubPool.poolVec2 == null) {
			ret = new Vec2();
		} else {
			ret = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret.zpp_inner == null) {
			var ret1;
			if(ZPP_Vec2.zpp_pool == null) {
				ret1 = new ZPP_Vec2();
			} else {
				ret1 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.weak = false;
			ret1._immutable = false;
			ret1.x = x;
			ret1.y = y;
			ret.zpp_inner = ret1;
			ret.zpp_inner.outer = ret;
		} else {
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this9 = ret.zpp_inner;
			if(_this9._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this9._isimmutable != null) {
				_this9._isimmutable();
			}
			if(x != x || y != y) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp1;
			if(ret != null && ret.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this10 = ret.zpp_inner;
			if(_this10._validate != null) {
				_this10._validate();
			}
			if(ret.zpp_inner.x == x) {
				if(ret != null && ret.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this11 = ret.zpp_inner;
				if(_this11._validate != null) {
					_this11._validate();
				}
				tmp1 = ret.zpp_inner.y == y;
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				ret.zpp_inner.x = x;
				ret.zpp_inner.y = y;
				var _this12 = ret.zpp_inner;
				if(_this12._invalidate != null) {
					_this12._invalidate(_this12);
				}
			}
		}
		ret.zpp_inner.weak = false;
		var tmp2 = ret;
		if(minPosx != minPosx || minPosy != minPosy) {
			throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
		}
		var ret2;
		if(ZPP_PubPool.poolVec2 == null) {
			ret2 = new Vec2();
		} else {
			ret2 = ZPP_PubPool.poolVec2;
			ZPP_PubPool.poolVec2 = ret2.zpp_pool;
			ret2.zpp_pool = null;
			ret2.zpp_disp = false;
			if(ret2 == ZPP_PubPool.nextVec2) {
				ZPP_PubPool.nextVec2 = null;
			}
		}
		if(ret2.zpp_inner == null) {
			var ret3;
			if(ZPP_Vec2.zpp_pool == null) {
				ret3 = new ZPP_Vec2();
			} else {
				ret3 = ZPP_Vec2.zpp_pool;
				ZPP_Vec2.zpp_pool = ret3.next;
				ret3.next = null;
			}
			ret3.weak = false;
			ret3._immutable = false;
			ret3.x = minPosx;
			ret3.y = minPosy;
			ret2.zpp_inner = ret3;
			ret2.zpp_inner.outer = ret2;
		} else {
			if(ret2 != null && ret2.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this13 = ret2.zpp_inner;
			if(_this13._immutable) {
				throw new js._Boot.HaxeError("Error: Vec2 is immutable");
			}
			if(_this13._isimmutable != null) {
				_this13._isimmutable();
			}
			if(minPosx != minPosx || minPosy != minPosy) {
				throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
			}
			var tmp3;
			if(ret2 != null && ret2.zpp_disp) {
				throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
			}
			var _this14 = ret2.zpp_inner;
			if(_this14._validate != null) {
				_this14._validate();
			}
			if(ret2.zpp_inner.x == minPosx) {
				if(ret2 != null && ret2.zpp_disp) {
					throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
				}
				var _this15 = ret2.zpp_inner;
				if(_this15._validate != null) {
					_this15._validate();
				}
				tmp3 = ret2.zpp_inner.y == minPosy;
			} else {
				tmp3 = false;
			}
			if(!tmp3) {
				ret2.zpp_inner.x = minPosx;
				ret2.zpp_inner.y = minPosy;
				var _this16 = ret2.zpp_inner;
				if(_this16._invalidate != null) {
					_this16._invalidate(_this16);
				}
			}
		}
		ret2.zpp_inner.weak = false;
		return ZPP_ConvexRayResult.getConvex(tmp2,ret2,mint,mins);
	} else {
		return null;
	}
};
ZPP_Space.prototype.prepareCast = function(s) {
	if(s.type == 0) {
		var _this = s.circle;
		if(_this.zip_worldCOM) {
			if(_this.body != null) {
				_this.zip_worldCOM = false;
				if(_this.zip_localCOM) {
					_this.zip_localCOM = false;
					if(_this.type == 1) {
						var _this1 = _this.polygon;
						if(_this1.lverts.next == null) {
							throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
						}
						if(_this1.lverts.next.next == null) {
							_this1.localCOMx = _this1.lverts.next.x;
							_this1.localCOMy = _this1.lverts.next.y;
						} else if(_this1.lverts.next.next.next == null) {
							_this1.localCOMx = _this1.lverts.next.x;
							_this1.localCOMy = _this1.lverts.next.y;
							_this1.localCOMx += _this1.lverts.next.next.x;
							_this1.localCOMy += _this1.lverts.next.next.y;
							_this1.localCOMx *= 0.5;
							_this1.localCOMy *= 0.5;
						} else {
							_this1.localCOMx = 0;
							_this1.localCOMy = 0;
							var area = 0.0;
							var cx_ite = _this1.lverts.next;
							var u = cx_ite;
							cx_ite = cx_ite.next;
							var v = cx_ite;
							cx_ite = cx_ite.next;
							while(cx_ite != null) {
								var w = cx_ite;
								area += v.x * (w.y - u.y);
								var cf = w.y * v.x - w.x * v.y;
								_this1.localCOMx += (v.x + w.x) * cf;
								_this1.localCOMy += (v.y + w.y) * cf;
								u = v;
								v = w;
								cx_ite = cx_ite.next;
							}
							cx_ite = _this1.lverts.next;
							var w1 = cx_ite;
							area += v.x * (w1.y - u.y);
							var cf1 = w1.y * v.x - w1.x * v.y;
							_this1.localCOMx += (v.x + w1.x) * cf1;
							_this1.localCOMy += (v.y + w1.y) * cf1;
							u = v;
							cx_ite = cx_ite.next;
							var w2 = cx_ite;
							area += w1.x * (w2.y - u.y);
							var cf2 = w2.y * w1.x - w2.x * w1.y;
							_this1.localCOMx += (w1.x + w2.x) * cf2;
							_this1.localCOMy += (w1.y + w2.y) * cf2;
							area = 1 / (3 * area);
							var t = area;
							_this1.localCOMx *= t;
							_this1.localCOMy *= t;
						}
					}
					if(_this.wrap_localCOM != null) {
						_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
						_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
					}
				}
				var _this2 = _this.body;
				if(_this2.zip_axis) {
					_this2.zip_axis = false;
					_this2.axisx = Math.sin(_this2.rot);
					_this2.axisy = Math.cos(_this2.rot);
				}
				_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
				_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
			}
		}
	} else {
		var _this3 = s.polygon;
		if(_this3.zip_gaxi) {
			if(_this3.body != null) {
				_this3.zip_gaxi = false;
				_this3.validate_laxi();
				var _this4 = _this3.body;
				if(_this4.zip_axis) {
					_this4.zip_axis = false;
					_this4.axisx = Math.sin(_this4.rot);
					_this4.axisy = Math.cos(_this4.rot);
				}
				if(_this3.zip_gverts) {
					if(_this3.body != null) {
						_this3.zip_gverts = false;
						_this3.validate_lverts();
						var _this5 = _this3.body;
						if(_this5.zip_axis) {
							_this5.zip_axis = false;
							_this5.axisx = Math.sin(_this5.rot);
							_this5.axisy = Math.cos(_this5.rot);
						}
						var li = _this3.lverts.next;
						var cx_ite1 = _this3.gverts.next;
						while(cx_ite1 != null) {
							var g = cx_ite1;
							var l = li;
							li = li.next;
							g.x = _this3.body.posx + (_this3.body.axisy * l.x - _this3.body.axisx * l.y);
							g.y = _this3.body.posy + (l.x * _this3.body.axisx + l.y * _this3.body.axisy);
							cx_ite1 = cx_ite1.next;
						}
					}
				}
				var ite = _this3.edges.head;
				var cx_ite2 = _this3.gverts.next;
				var u1 = cx_ite2;
				cx_ite2 = cx_ite2.next;
				while(cx_ite2 != null) {
					var v1 = cx_ite2;
					var e = ite.elt;
					ite = ite.next;
					e.gp0 = u1;
					e.gp1 = v1;
					e.gnormx = _this3.body.axisy * e.lnormx - _this3.body.axisx * e.lnormy;
					e.gnormy = e.lnormx * _this3.body.axisx + e.lnormy * _this3.body.axisy;
					e.gprojection = _this3.body.posx * e.gnormx + _this3.body.posy * e.gnormy + e.lprojection;
					if(e.wrap_gnorm != null) {
						e.wrap_gnorm.zpp_inner.x = e.gnormx;
						e.wrap_gnorm.zpp_inner.y = e.gnormy;
					}
					e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
					e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
					u1 = v1;
					cx_ite2 = cx_ite2.next;
				}
				var e1 = ite.elt;
				e1.gp0 = u1;
				e1.gp1 = _this3.gverts.next;
				e1.gnormx = _this3.body.axisy * e1.lnormx - _this3.body.axisx * e1.lnormy;
				e1.gnormy = e1.lnormx * _this3.body.axisx + e1.lnormy * _this3.body.axisy;
				e1.gprojection = _this3.body.posx * e1.gnormx + _this3.body.posy * e1.gnormy + e1.lprojection;
				if(e1.wrap_gnorm != null) {
					e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
					e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
				}
				e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
				e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
			}
		}
	}
};
ZPP_Space.prototype.convexMultiCast = function(shape,deltaTime,filter,dynamics,output) {
	var toi;
	if(ZPP_ToiEvent.zpp_pool == null) {
		toi = new ZPP_ToiEvent();
	} else {
		toi = ZPP_ToiEvent.zpp_pool;
		ZPP_ToiEvent.zpp_pool = toi.next;
		toi.next = null;
	}
	toi.failed = false;
	toi.s1 = toi.s2 = null;
	toi.arbiter = null;
	if(shape.type == 0) {
		var _this = shape.circle;
		if(_this.zip_worldCOM) {
			if(_this.body != null) {
				_this.zip_worldCOM = false;
				if(_this.zip_localCOM) {
					_this.zip_localCOM = false;
					if(_this.type == 1) {
						var _this1 = _this.polygon;
						if(_this1.lverts.next == null) {
							throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
						}
						if(_this1.lverts.next.next == null) {
							_this1.localCOMx = _this1.lverts.next.x;
							_this1.localCOMy = _this1.lverts.next.y;
						} else if(_this1.lverts.next.next.next == null) {
							_this1.localCOMx = _this1.lverts.next.x;
							_this1.localCOMy = _this1.lverts.next.y;
							_this1.localCOMx += _this1.lverts.next.next.x;
							_this1.localCOMy += _this1.lverts.next.next.y;
							_this1.localCOMx *= 0.5;
							_this1.localCOMy *= 0.5;
						} else {
							_this1.localCOMx = 0;
							_this1.localCOMy = 0;
							var area = 0.0;
							var cx_ite = _this1.lverts.next;
							var u = cx_ite;
							cx_ite = cx_ite.next;
							var v = cx_ite;
							cx_ite = cx_ite.next;
							while(cx_ite != null) {
								var w = cx_ite;
								area += v.x * (w.y - u.y);
								var cf = w.y * v.x - w.x * v.y;
								_this1.localCOMx += (v.x + w.x) * cf;
								_this1.localCOMy += (v.y + w.y) * cf;
								u = v;
								v = w;
								cx_ite = cx_ite.next;
							}
							cx_ite = _this1.lverts.next;
							var w1 = cx_ite;
							area += v.x * (w1.y - u.y);
							var cf1 = w1.y * v.x - w1.x * v.y;
							_this1.localCOMx += (v.x + w1.x) * cf1;
							_this1.localCOMy += (v.y + w1.y) * cf1;
							u = v;
							cx_ite = cx_ite.next;
							var w2 = cx_ite;
							area += w1.x * (w2.y - u.y);
							var cf2 = w2.y * w1.x - w2.x * w1.y;
							_this1.localCOMx += (w1.x + w2.x) * cf2;
							_this1.localCOMy += (w1.y + w2.y) * cf2;
							area = 1 / (3 * area);
							var t = area;
							_this1.localCOMx *= t;
							_this1.localCOMy *= t;
						}
					}
					if(_this.wrap_localCOM != null) {
						_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
						_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
					}
				}
				var _this2 = _this.body;
				if(_this2.zip_axis) {
					_this2.zip_axis = false;
					_this2.axisx = Math.sin(_this2.rot);
					_this2.axisy = Math.cos(_this2.rot);
				}
				_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
				_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
			}
		}
	} else {
		var _this3 = shape.polygon;
		if(_this3.zip_gaxi) {
			if(_this3.body != null) {
				_this3.zip_gaxi = false;
				_this3.validate_laxi();
				var _this4 = _this3.body;
				if(_this4.zip_axis) {
					_this4.zip_axis = false;
					_this4.axisx = Math.sin(_this4.rot);
					_this4.axisy = Math.cos(_this4.rot);
				}
				if(_this3.zip_gverts) {
					if(_this3.body != null) {
						_this3.zip_gverts = false;
						_this3.validate_lverts();
						var _this5 = _this3.body;
						if(_this5.zip_axis) {
							_this5.zip_axis = false;
							_this5.axisx = Math.sin(_this5.rot);
							_this5.axisy = Math.cos(_this5.rot);
						}
						var li = _this3.lverts.next;
						var cx_ite1 = _this3.gverts.next;
						while(cx_ite1 != null) {
							var g = cx_ite1;
							var l = li;
							li = li.next;
							g.x = _this3.body.posx + (_this3.body.axisy * l.x - _this3.body.axisx * l.y);
							g.y = _this3.body.posy + (l.x * _this3.body.axisx + l.y * _this3.body.axisy);
							cx_ite1 = cx_ite1.next;
						}
					}
				}
				var ite = _this3.edges.head;
				var cx_ite2 = _this3.gverts.next;
				var u1 = cx_ite2;
				cx_ite2 = cx_ite2.next;
				while(cx_ite2 != null) {
					var v1 = cx_ite2;
					var e = ite.elt;
					ite = ite.next;
					e.gp0 = u1;
					e.gp1 = v1;
					e.gnormx = _this3.body.axisy * e.lnormx - _this3.body.axisx * e.lnormy;
					e.gnormy = e.lnormx * _this3.body.axisx + e.lnormy * _this3.body.axisy;
					e.gprojection = _this3.body.posx * e.gnormx + _this3.body.posy * e.gnormy + e.lprojection;
					if(e.wrap_gnorm != null) {
						e.wrap_gnorm.zpp_inner.x = e.gnormx;
						e.wrap_gnorm.zpp_inner.y = e.gnormy;
					}
					e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
					e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
					u1 = v1;
					cx_ite2 = cx_ite2.next;
				}
				var e1 = ite.elt;
				e1.gp0 = u1;
				e1.gp1 = _this3.gverts.next;
				e1.gnormx = _this3.body.axisy * e1.lnormx - _this3.body.axisx * e1.lnormy;
				e1.gnormy = e1.lnormx * _this3.body.axisx + e1.lnormy * _this3.body.axisy;
				e1.gprojection = _this3.body.posx * e1.gnormx + _this3.body.posy * e1.gnormy + e1.lprojection;
				if(e1.wrap_gnorm != null) {
					e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
					e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
				}
				e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
				e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
			}
		}
	}
	var body = shape.body;
	var prex = body.posx;
	var prey = body.posy;
	body.sweepTime = 0;
	body.sweep_angvel = body.angvel;
	var delta = deltaTime - body.sweepTime;
	if(delta != 0) {
		body.sweepTime = deltaTime;
		body.posx += body.velx * delta;
		body.posy += body.vely * delta;
		if(body.angvel != 0) {
			var dr = body.sweep_angvel * delta;
			body.rot += dr;
			if(dr * dr > 0.0001) {
				body.axisx = Math.sin(body.rot);
				body.axisy = Math.cos(body.rot);
			} else {
				var d2 = dr * dr;
				var p = 1 - 0.5 * d2;
				var m = 1 - d2 * d2 / 8;
				var nx = (p * body.axisx + dr * body.axisy) * m;
				body.axisy = (p * body.axisy - dr * body.axisx) * m;
				body.axisx = nx;
			}
		}
	}
	var postx = body.posx;
	var posty = body.posy;
	shape.validate_sweepRadius();
	var rad = shape.sweepRadius;
	var aabb;
	if(ZPP_AABB.zpp_pool == null) {
		aabb = new ZPP_AABB();
	} else {
		aabb = ZPP_AABB.zpp_pool;
		ZPP_AABB.zpp_pool = aabb.next;
		aabb.next = null;
	}
	aabb.minx = (prex < postx?prex:postx) - rad;
	aabb.maxx = (prex > postx?prex:postx) + rad;
	aabb.miny = (prey < posty?prey:posty) - rad;
	aabb.maxy = (prey > posty?prey:posty) + rad;
	var list = this.convexShapeList = this.bphase.shapesInAABB(aabb,false,false,filter == null?null:filter.zpp_inner,this.convexShapeList);
	var o = aabb;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o.wrap_min = o.wrap_max = null;
	o._invalidate = null;
	o._validate = null;
	o.next = ZPP_AABB.zpp_pool;
	ZPP_AABB.zpp_pool = o;
	var ret = output == null?new ConvexResultList():output;
	list.zpp_inner.valmod();
	var _g = ShapeIterator.get(list);
	while(true) {
		_g.zpp_inner.zpp_inner.valmod();
		var _this6 = _g.zpp_inner;
		_this6.zpp_inner.valmod();
		if(_this6.zpp_inner.zip_length) {
			_this6.zpp_inner.zip_length = false;
			_this6.zpp_inner.user_length = _this6.zpp_inner.inner.length;
		}
		var length = _this6.zpp_inner.user_length;
		_g.zpp_critical = true;
		var tmp;
		if(_g.zpp_i < length) {
			tmp = true;
		} else {
			_g.zpp_next = ShapeIterator.zpp_pool;
			ShapeIterator.zpp_pool = _g;
			_g.zpp_inner = null;
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		_g.zpp_critical = false;
		var s = _g.zpp_inner.at(_g.zpp_i++);
		if(s != shape.outer && (s.zpp_inner.body != null?s.zpp_inner.body.outer:null) != body.outer) {
			toi.s1 = shape;
			toi.s2 = s.zpp_inner;
			if(dynamics) {
				s.zpp_inner.validate_sweepRadius();
				(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweep_angvel = (s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.angvel;
				(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepTime = 0;
				ZPP_SweepDistance.dynamicSweep(toi,deltaTime,0,0,true);
				var _this7 = (s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner;
				var delta1 = 0 - _this7.sweepTime;
				if(delta1 != 0) {
					_this7.sweepTime = 0;
					_this7.posx += _this7.velx * delta1;
					_this7.posy += _this7.vely * delta1;
					if(_this7.angvel != 0) {
						var dr1 = _this7.sweep_angvel * delta1;
						_this7.rot += dr1;
						if(dr1 * dr1 > 0.0001) {
							_this7.axisx = Math.sin(_this7.rot);
							_this7.axisy = Math.cos(_this7.rot);
						} else {
							var d21 = dr1 * dr1;
							var p1 = 1 - 0.5 * d21;
							var m1 = 1 - d21 * d21 / 8;
							var nx1 = (p1 * _this7.axisx + dr1 * _this7.axisy) * m1;
							_this7.axisy = (p1 * _this7.axisy - dr1 * _this7.axisx) * m1;
							_this7.axisx = nx1;
						}
					}
				}
				var _this8 = (s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner;
				var s1 = s.zpp_inner;
				if(s1.type == 0) {
					s1.worldCOMx = _this8.posx + (_this8.axisy * s1.localCOMx - _this8.axisx * s1.localCOMy);
					s1.worldCOMy = _this8.posy + (s1.localCOMx * _this8.axisx + s1.localCOMy * _this8.axisy);
				} else {
					var p2 = s1.polygon;
					var li1 = p2.lverts.next;
					var cx_ite3 = p2.gverts.next;
					while(cx_ite3 != null) {
						var g1 = cx_ite3;
						var l1 = li1;
						li1 = li1.next;
						g1.x = _this8.posx + (_this8.axisy * l1.x - _this8.axisx * l1.y);
						g1.y = _this8.posy + (l1.x * _this8.axisx + l1.y * _this8.axisy);
						cx_ite3 = cx_ite3.next;
					}
					var ite1 = p2.edges.head;
					var cx_ite4 = p2.gverts.next;
					var u2 = cx_ite4;
					cx_ite4 = cx_ite4.next;
					while(cx_ite4 != null) {
						var v2 = cx_ite4;
						var e2 = ite1.elt;
						ite1 = ite1.next;
						e2.gnormx = _this8.axisy * e2.lnormx - _this8.axisx * e2.lnormy;
						e2.gnormy = e2.lnormx * _this8.axisx + e2.lnormy * _this8.axisy;
						e2.gprojection = _this8.posx * e2.gnormx + _this8.posy * e2.gnormy + e2.lprojection;
						e2.tp0 = u2.y * e2.gnormx - u2.x * e2.gnormy;
						e2.tp1 = v2.y * e2.gnormx - v2.x * e2.gnormy;
						u2 = v2;
						cx_ite4 = cx_ite4.next;
					}
					var v3 = p2.gverts.next;
					var e3 = ite1.elt;
					e3.gnormx = _this8.axisy * e3.lnormx - _this8.axisx * e3.lnormy;
					e3.gnormy = e3.lnormx * _this8.axisx + e3.lnormy * _this8.axisy;
					e3.gprojection = _this8.posx * e3.gnormx + _this8.posy * e3.gnormy + e3.lprojection;
					e3.tp0 = u2.y * e3.gnormx - u2.x * e3.gnormy;
					e3.tp1 = v3.y * e3.gnormx - v3.x * e3.gnormy;
				}
			} else {
				ZPP_SweepDistance.staticSweep(toi,deltaTime,0,0);
			}
			toi.toi *= deltaTime;
			if(toi.toi > 0) {
				var x = -toi.axis.x;
				var y = -toi.axis.y;
				if(x != x || y != y) {
					throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
				}
				var ret1;
				if(ZPP_PubPool.poolVec2 == null) {
					ret1 = new Vec2();
				} else {
					ret1 = ZPP_PubPool.poolVec2;
					ZPP_PubPool.poolVec2 = ret1.zpp_pool;
					ret1.zpp_pool = null;
					ret1.zpp_disp = false;
					if(ret1 == ZPP_PubPool.nextVec2) {
						ZPP_PubPool.nextVec2 = null;
					}
				}
				if(ret1.zpp_inner == null) {
					var ret2;
					if(ZPP_Vec2.zpp_pool == null) {
						ret2 = new ZPP_Vec2();
					} else {
						ret2 = ZPP_Vec2.zpp_pool;
						ZPP_Vec2.zpp_pool = ret2.next;
						ret2.next = null;
					}
					ret2.weak = false;
					ret2._immutable = false;
					ret2.x = x;
					ret2.y = y;
					ret1.zpp_inner = ret2;
					ret1.zpp_inner.outer = ret1;
				} else {
					if(ret1 != null && ret1.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this9 = ret1.zpp_inner;
					if(_this9._immutable) {
						throw new js._Boot.HaxeError("Error: Vec2 is immutable");
					}
					if(_this9._isimmutable != null) {
						_this9._isimmutable();
					}
					if(x != x || y != y) {
						throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
					}
					var tmp1;
					if(ret1 != null && ret1.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this10 = ret1.zpp_inner;
					if(_this10._validate != null) {
						_this10._validate();
					}
					if(ret1.zpp_inner.x == x) {
						if(ret1 != null && ret1.zpp_disp) {
							throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this11 = ret1.zpp_inner;
						if(_this11._validate != null) {
							_this11._validate();
						}
						tmp1 = ret1.zpp_inner.y == y;
					} else {
						tmp1 = false;
					}
					if(!tmp1) {
						ret1.zpp_inner.x = x;
						ret1.zpp_inner.y = y;
						var _this12 = ret1.zpp_inner;
						if(_this12._invalidate != null) {
							_this12._invalidate(_this12);
						}
					}
				}
				ret1.zpp_inner.weak = false;
				var tmp2 = ret1;
				var x1 = toi.c2.x;
				var y1 = toi.c2.y;
				if(x1 != x1 || y1 != y1) {
					throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
				}
				var ret3;
				if(ZPP_PubPool.poolVec2 == null) {
					ret3 = new Vec2();
				} else {
					ret3 = ZPP_PubPool.poolVec2;
					ZPP_PubPool.poolVec2 = ret3.zpp_pool;
					ret3.zpp_pool = null;
					ret3.zpp_disp = false;
					if(ret3 == ZPP_PubPool.nextVec2) {
						ZPP_PubPool.nextVec2 = null;
					}
				}
				if(ret3.zpp_inner == null) {
					var ret4;
					if(ZPP_Vec2.zpp_pool == null) {
						ret4 = new ZPP_Vec2();
					} else {
						ret4 = ZPP_Vec2.zpp_pool;
						ZPP_Vec2.zpp_pool = ret4.next;
						ret4.next = null;
					}
					ret4.weak = false;
					ret4._immutable = false;
					ret4.x = x1;
					ret4.y = y1;
					ret3.zpp_inner = ret4;
					ret3.zpp_inner.outer = ret3;
				} else {
					if(ret3 != null && ret3.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this13 = ret3.zpp_inner;
					if(_this13._immutable) {
						throw new js._Boot.HaxeError("Error: Vec2 is immutable");
					}
					if(_this13._isimmutable != null) {
						_this13._isimmutable();
					}
					if(x1 != x1 || y1 != y1) {
						throw new js._Boot.HaxeError("Error: Vec2 components cannot be NaN");
					}
					var tmp3;
					if(ret3 != null && ret3.zpp_disp) {
						throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
					}
					var _this14 = ret3.zpp_inner;
					if(_this14._validate != null) {
						_this14._validate();
					}
					if(ret3.zpp_inner.x == x1) {
						if(ret3 != null && ret3.zpp_disp) {
							throw new js._Boot.HaxeError("Error: " + "Vec2" + " has been disposed and cannot be used!");
						}
						var _this15 = ret3.zpp_inner;
						if(_this15._validate != null) {
							_this15._validate();
						}
						tmp3 = ret3.zpp_inner.y == y1;
					} else {
						tmp3 = false;
					}
					if(!tmp3) {
						ret3.zpp_inner.x = x1;
						ret3.zpp_inner.y = y1;
						var _this16 = ret3.zpp_inner;
						if(_this16._invalidate != null) {
							_this16._invalidate(_this16);
						}
					}
				}
				ret3.zpp_inner.weak = false;
				var res = ZPP_ConvexRayResult.getConvex(tmp2,ret3,toi.toi,s);
				var pre = null;
				var cx_ite5 = ret.zpp_inner.inner.head;
				while(cx_ite5 != null) {
					var j = cx_ite5.elt;
					if(res.zpp_inner.next != null) {
						throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
					}
					var tmp4 = res.zpp_inner.toiDistance;
					if(j.zpp_inner.next != null) {
						throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
					}
					if(tmp4 < j.zpp_inner.toiDistance) {
						break;
					}
					pre = cx_ite5;
					cx_ite5 = cx_ite5.next;
				}
				var _this17 = ret.zpp_inner.inner;
				var ret5;
				if(ZNPNode_ConvexResult.zpp_pool == null) {
					ret5 = new ZNPNode_ConvexResult();
				} else {
					ret5 = ZNPNode_ConvexResult.zpp_pool;
					ZNPNode_ConvexResult.zpp_pool = ret5.next;
					ret5.next = null;
				}
				ret5.elt = res;
				var temp = ret5;
				if(pre == null) {
					temp.next = _this17.head;
					_this17.head = temp;
				} else {
					temp.next = pre.next;
					pre.next = temp;
				}
				_this17.pushmod = _this17.modified = true;
				_this17.length++;
			}
		}
	}
	list.clear();
	var o1 = toi;
	o1.next = ZPP_ToiEvent.zpp_pool;
	ZPP_ToiEvent.zpp_pool = o1;
	var delta2 = 0 - body.sweepTime;
	if(delta2 != 0) {
		body.sweepTime = 0;
		body.posx += body.velx * delta2;
		body.posy += body.vely * delta2;
		if(body.angvel != 0) {
			var dr2 = body.sweep_angvel * delta2;
			body.rot += dr2;
			if(dr2 * dr2 > 0.0001) {
				body.axisx = Math.sin(body.rot);
				body.axisy = Math.cos(body.rot);
			} else {
				var d22 = dr2 * dr2;
				var p3 = 1 - 0.5 * d22;
				var m2 = 1 - d22 * d22 / 8;
				var nx2 = (p3 * body.axisx + dr2 * body.axisy) * m2;
				body.axisy = (p3 * body.axisy - dr2 * body.axisx) * m2;
				body.axisx = nx2;
			}
		}
	}
	if(shape.type == 0) {
		shape.worldCOMx = body.posx + (body.axisy * shape.localCOMx - body.axisx * shape.localCOMy);
		shape.worldCOMy = body.posy + (shape.localCOMx * body.axisx + shape.localCOMy * body.axisy);
	} else {
		var p4 = shape.polygon;
		var li2 = p4.lverts.next;
		var cx_ite6 = p4.gverts.next;
		while(cx_ite6 != null) {
			var g2 = cx_ite6;
			var l2 = li2;
			li2 = li2.next;
			g2.x = body.posx + (body.axisy * l2.x - body.axisx * l2.y);
			g2.y = body.posy + (l2.x * body.axisx + l2.y * body.axisy);
			cx_ite6 = cx_ite6.next;
		}
		var ite2 = p4.edges.head;
		var cx_ite7 = p4.gverts.next;
		var u3 = cx_ite7;
		cx_ite7 = cx_ite7.next;
		while(cx_ite7 != null) {
			var v4 = cx_ite7;
			var e4 = ite2.elt;
			ite2 = ite2.next;
			e4.gnormx = body.axisy * e4.lnormx - body.axisx * e4.lnormy;
			e4.gnormy = e4.lnormx * body.axisx + e4.lnormy * body.axisy;
			e4.gprojection = body.posx * e4.gnormx + body.posy * e4.gnormy + e4.lprojection;
			e4.tp0 = u3.y * e4.gnormx - u3.x * e4.gnormy;
			e4.tp1 = v4.y * e4.gnormx - v4.x * e4.gnormy;
			u3 = v4;
			cx_ite7 = cx_ite7.next;
		}
		var v5 = p4.gverts.next;
		var e5 = ite2.elt;
		e5.gnormx = body.axisy * e5.lnormx - body.axisx * e5.lnormy;
		e5.gnormy = e5.lnormx * body.axisx + e5.lnormy * body.axisy;
		e5.gprojection = body.posx * e5.gnormx + body.posy * e5.gnormy + e5.lprojection;
		e5.tp0 = u3.y * e5.gnormx - u3.x * e5.gnormy;
		e5.tp1 = v5.y * e5.gnormx - v5.x * e5.gnormy;
	}
	return ret;
};
ZPP_Space.prototype.push_callback = function(i) {
	var cb;
	if(ZPP_Callback.zpp_pool == null) {
		cb = new ZPP_Callback();
	} else {
		cb = ZPP_Callback.zpp_pool;
		ZPP_Callback.zpp_pool = cb.next;
		cb.next = null;
	}
	this.callbacks.push(cb);
	cb.listener = i;
	return cb;
};
ZPP_Space.prototype.pre_dt = null;
ZPP_Space.prototype.step = function(deltaTime,velocityIterations,positionIterations) {
	var _gthis = this;
	if(this.midstep) {
		throw new js._Boot.HaxeError("Error: ... REALLY?? you're going to call space.step() inside of space.step()? COME ON!!");
	}
	this.time += deltaTime;
	this.pre_dt = deltaTime;
	this.midstep = true;
	this.stamp++;
	this.validation();
	this.bphase.broadphase(this,true);
	this.prestep(deltaTime);
	if(this.sortcontacts) {
		var xxlist = this.c_arbiters_false;
		if(xxlist.head != null && xxlist.head.next != null) {
			var head = xxlist.head;
			var tail = null;
			var left = null;
			var right = null;
			var nxt = null;
			var listSize = 1;
			var numMerges;
			var leftSize;
			var rightSize;
			while(true) {
				numMerges = 0;
				left = head;
				head = null;
				tail = head;
				while(left != null) {
					++numMerges;
					right = left;
					leftSize = 0;
					rightSize = listSize;
					while(right != null && leftSize < listSize) {
						++leftSize;
						right = right.next;
					}
					while(leftSize > 0 || rightSize > 0 && right != null) {
						if(leftSize == 0) {
							nxt = right;
							right = right.next;
							--rightSize;
						} else if(rightSize == 0 || right == null) {
							nxt = left;
							left = left.next;
							--leftSize;
						} else if(left.elt.active && right.elt.active?left.elt.oc1.dist < right.elt.oc1.dist:true) {
							nxt = left;
							left = left.next;
							--leftSize;
						} else {
							nxt = right;
							right = right.next;
							--rightSize;
						}
						if(tail != null) {
							tail.next = nxt;
						} else {
							head = nxt;
						}
						tail = nxt;
					}
					left = right;
				}
				tail.next = null;
				listSize <<= 1;
				if(!(numMerges > 1)) {
					break;
				}
			}
			xxlist.head = head;
			xxlist.modified = true;
			xxlist.pushmod = true;
		}
	}
	this.updateVel(deltaTime);
	this.warmStart();
	this.iterateVel(velocityIterations);
	var cx_ite = this.kinematics.head;
	while(cx_ite != null) {
		var cur = cx_ite.elt;
		cur.pre_posx = cur.posx;
		cur.pre_posy = cur.posy;
		cur.pre_rot = cur.rot;
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = this.live.head;
	while(cx_ite1 != null) {
		var cur1 = cx_ite1.elt;
		cur1.pre_posx = cur1.posx;
		cur1.pre_posy = cur1.posy;
		cur1.pre_rot = cur1.rot;
		cx_ite1 = cx_ite1.next;
	}
	this.updatePos(deltaTime);
	this.continuous = true;
	this.continuousCollisions(deltaTime);
	this.continuous = false;
	this.iteratePos(positionIterations);
	var cx_ite2 = this.kinematics.head;
	while(cx_ite2 != null) {
		var cur2 = cx_ite2.elt;
		var upos = !(cur2.posx == cur2.pre_posx && cur2.posy == cur2.pre_posy);
		var urot = cur2.pre_rot != cur2.rot;
		if(upos) {
			var cx_ite3 = cur2.shapes.head;
			while(cx_ite3 != null) {
				var s = cx_ite3.elt;
				if(s.type == 1) {
					s.polygon.invalidate_gverts();
					s.polygon.invalidate_gaxi();
				}
				s.invalidate_worldCOM();
				cx_ite3 = cx_ite3.next;
			}
			cur2.zip_worldCOM = true;
		}
		if(urot) {
			cur2.zip_axis = true;
			var cx_ite4 = cur2.shapes.head;
			while(cx_ite4 != null) {
				var s1 = cx_ite4.elt;
				if(s1.type == 1) {
					s1.polygon.invalidate_gverts();
					s1.polygon.invalidate_gaxi();
				}
				s1.invalidate_worldCOM();
				cx_ite4 = cx_ite4.next;
			}
			cur2.zip_worldCOM = true;
		}
		cx_ite2 = cx_ite2.next;
	}
	var cx_ite5 = this.live.head;
	while(cx_ite5 != null) {
		var cur3 = cx_ite5.elt;
		var upos1 = !(cur3.posx == cur3.pre_posx && cur3.posy == cur3.pre_posy);
		var urot1 = cur3.pre_rot != cur3.rot;
		if(upos1) {
			var cx_ite6 = cur3.shapes.head;
			while(cx_ite6 != null) {
				var s2 = cx_ite6.elt;
				if(s2.type == 1) {
					s2.polygon.invalidate_gverts();
					s2.polygon.invalidate_gaxi();
				}
				s2.invalidate_worldCOM();
				cx_ite6 = cx_ite6.next;
			}
			cur3.zip_worldCOM = true;
		}
		if(urot1) {
			cur3.zip_axis = true;
			var cx_ite7 = cur3.shapes.head;
			while(cx_ite7 != null) {
				var s3 = cx_ite7.elt;
				if(s3.type == 1) {
					s3.polygon.invalidate_gverts();
					s3.polygon.invalidate_gaxi();
				}
				s3.invalidate_worldCOM();
				cx_ite7 = cx_ite7.next;
			}
			cur3.zip_worldCOM = true;
		}
		cx_ite5 = cx_ite5.next;
	}
	var pre = null;
	var cx_ite8 = this.staticsleep.head;
	while(cx_ite8 != null) {
		var b = cx_ite8.elt;
		if(b.type != 3 || b.velx == 0 && b.vely == 0 && b.angvel == 0) {
			if(b.kinematicDelaySleep) {
				b.kinematicDelaySleep = false;
				cx_ite8 = cx_ite8.next;
				continue;
			}
			b.component.sleeping = true;
			var _this = this.staticsleep;
			var old;
			var ret;
			if(pre == null) {
				old = _this.head;
				ret = old.next;
				_this.head = ret;
				if(_this.head == null) {
					_this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					_this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Body.zpp_pool;
			ZNPNode_ZPP_Body.zpp_pool = o;
			_this.modified = true;
			_this.length--;
			_this.pushmod = true;
			cx_ite8 = ret;
			continue;
		}
		pre = cx_ite8;
		cx_ite8 = cx_ite8.next;
	}
	this.doForests(deltaTime);
	this.sleepArbiters();
	this.midstep = false;
	var pre1 = null;
	var cx_ite9 = this.callbackset_list.next;
	while(cx_ite9 != null) {
		var set = cx_ite9;
		if(set.arbiters.head == null) {
			var _this1 = this.callbackset_list;
			var old1;
			var ret1;
			if(pre1 == null) {
				old1 = _this1.next;
				ret1 = old1.next;
				_this1.next = ret1;
				if(_this1.next == null) {
					_this1.pushmod = true;
				}
			} else {
				old1 = pre1.next;
				ret1 = old1.next;
				pre1.next = ret1;
				if(ret1 == null) {
					_this1.pushmod = true;
				}
			}
			old1._inuse = false;
			_this1.modified = true;
			_this1.length--;
			_this1.pushmod = true;
			cx_ite9 = ret1;
			set.int1 = set.int2 = null;
			set.id = set.di = -1;
			set.freed = true;
			set.next = ZPP_CallbackSet.zpp_pool;
			ZPP_CallbackSet.zpp_pool = set;
			continue;
		}
		var ret2;
		ret2 = true;
		var cx_ite10 = set.arbiters.head;
		while(cx_ite10 != null) if(cx_ite10.elt.sleeping) {
			cx_ite10 = cx_ite10.next;
			continue;
		} else {
			ret2 = false;
			break;
		}
		var sleeping = ret2;
		var a = set.int1.cbSet;
		var b1 = set.int2.cbSet;
		var ret3 = null;
		var cx_ite11 = (a.cbpairs.length < b1.cbpairs.length?a.cbpairs:b1.cbpairs).head;
		while(cx_ite11 != null) {
			var p = cx_ite11.elt;
			if(p.a == a && p.b == b1 || p.a == b1 && p.b == a) {
				ret3 = p;
				break;
			}
			cx_ite11 = cx_ite11.next;
		}
		if(ret3 == null) {
			var ret4;
			if(ZPP_CbSetPair.zpp_pool == null) {
				ret4 = new ZPP_CbSetPair();
			} else {
				ret4 = ZPP_CbSetPair.zpp_pool;
				ZPP_CbSetPair.zpp_pool = ret4.next;
				ret4.next = null;
			}
			ret4.zip_listeners = true;
			if(ZPP_CbSet.setlt(a,b1)) {
				ret4.a = a;
				ret4.b = b1;
			} else {
				ret4.a = b1;
				ret4.b = a;
			}
			ret3 = ret4;
			a.cbpairs.add(ret3);
			if(b1 != a) {
				b1.cbpairs.add(ret3);
			}
		}
		if(ret3.zip_listeners) {
			ret3.zip_listeners = false;
			ret3.__validate();
		}
		var cx_ite12 = ret3.listeners.head;
		while(cx_ite12 != null) {
			var x = cx_ite12.elt;
			if(x.event == 6) {
				if((!sleeping || x.allowSleepingCallbacks) && !set.empty_arb(x.itype)) {
					var cb = _gthis.push_callback(x);
					cb.event = 6;
					var o1 = set.int1;
					var o2 = set.int2;
					var tmp;
					var _this2 = x.options1;
					var xs = o1.cbTypes;
					if(_this2.nonemptyintersection(xs,_this2.includes) && !_this2.nonemptyintersection(xs,_this2.excludes)) {
						var _this3 = x.options2;
						var xs1 = o2.cbTypes;
						if(_this3.nonemptyintersection(xs1,_this3.includes)) {
							tmp = !_this3.nonemptyintersection(xs1,_this3.excludes);
						} else {
							tmp = false;
						}
					} else {
						tmp = false;
					}
					if(tmp) {
						cb.int1 = o1;
						cb.int2 = o2;
					} else {
						cb.int1 = o2;
						cb.int2 = o1;
					}
					cb.set = set;
				}
			}
			cx_ite12 = cx_ite12.next;
		}
		pre1 = cx_ite9;
		cx_ite9 = cx_ite9.next;
	}
	while(!this.callbacks.empty()) {
		var cb1 = this.callbacks.pop();
		if(cb1.listener.type == 0) {
			cb1.listener.body.handler(cb1.wrapper_body());
		} else if(cb1.listener.type == 1) {
			cb1.listener.constraint.handler(cb1.wrapper_con());
		} else if(cb1.listener.type == 2) {
			cb1.listener.interaction.handleri(cb1.wrapper_int());
		}
		cb1.int1 = cb1.int2 = null;
		cb1.body = null;
		cb1.constraint = null;
		cb1.listener = null;
		if(cb1.wrap_arbiters != null) {
			cb1.wrap_arbiters.zpp_inner.inner = null;
		}
		cb1.set = null;
		cb1.next = ZPP_Callback.zpp_pool;
		ZPP_Callback.zpp_pool = cb1;
	}
};
ZPP_Space.prototype.toiEvents = null;
ZPP_Space.prototype.continuousCollisions = function(deltaTime) {
	var MAX_VEL = 2 * Math.PI / deltaTime;
	this.bphase.broadphase(this,false);
	var curTimeAlpha = 0.0;
	while(curTimeAlpha < 1 && this.toiEvents.head != null) {
		var minTOI = null;
		var minTime = 2.0;
		var minKinematic = false;
		var preMin = null;
		var pre = null;
		var cx_ite = this.toiEvents.head;
		while(cx_ite != null) {
			var toi = cx_ite.elt;
			var b1 = toi.s1.body;
			var b2 = toi.s2.body;
			if(b1.sweepFrozen && b2.sweepFrozen) {
				if(toi.toi != 0 && ZPP_Collide.testCollide_safe(toi.s1,toi.s2)) {
					toi.toi = 0;
				} else {
					cx_ite = this.toiEvents.erase(pre);
					toi.next = ZPP_ToiEvent.zpp_pool;
					ZPP_ToiEvent.zpp_pool = toi;
					continue;
				}
			}
			if(toi.frozen1 != b1.sweepFrozen || toi.frozen2 != b2.sweepFrozen) {
				if(!toi.kinematic) {
					toi.frozen1 = b1.sweepFrozen;
					toi.frozen2 = b2.sweepFrozen;
					if(toi.frozen1) {
						var tmp = toi.s1;
						toi.s1 = toi.s2;
						toi.s2 = tmp;
						toi.frozen1 = false;
						toi.frozen2 = true;
					}
					ZPP_SweepDistance.staticSweep(toi,deltaTime,0,Config.collisionSlopCCD);
					if(toi.toi < 0) {
						cx_ite = this.toiEvents.erase(pre);
						toi.next = ZPP_ToiEvent.zpp_pool;
						ZPP_ToiEvent.zpp_pool = toi;
						continue;
					}
				} else {
					cx_ite = this.toiEvents.erase(pre);
					toi.next = ZPP_ToiEvent.zpp_pool;
					ZPP_ToiEvent.zpp_pool = toi;
					continue;
				}
			}
			if(toi.toi >= 0 && (toi.toi < minTime || !minKinematic && toi.kinematic)) {
				minTOI = toi;
				minTime = toi.toi;
				minKinematic = toi.kinematic;
				preMin = pre;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		if(minTOI == null) {
			break;
		}
		this.toiEvents.erase(preMin);
		curTimeAlpha = minTOI.toi;
		var b11 = minTOI.s1.body;
		var b21 = minTOI.s2.body;
		if(!b11.sweepFrozen) {
			var dt = curTimeAlpha * deltaTime;
			var delta = dt - b11.sweepTime;
			if(delta != 0) {
				b11.sweepTime = dt;
				b11.posx += b11.velx * delta;
				b11.posy += b11.vely * delta;
				if(b11.angvel != 0) {
					var dr = b11.sweep_angvel * delta;
					b11.rot += dr;
					if(dr * dr > 0.0001) {
						b11.axisx = Math.sin(b11.rot);
						b11.axisy = Math.cos(b11.rot);
					} else {
						var d2 = dr * dr;
						var p = 1 - 0.5 * d2;
						var m = 1 - d2 * d2 / 8;
						var nx = (p * b11.axisx + dr * b11.axisy) * m;
						b11.axisy = (p * b11.axisy - dr * b11.axisx) * m;
						b11.axisx = nx;
					}
				}
			}
			var s = minTOI.s1;
			if(s.type == 0) {
				s.worldCOMx = b11.posx + (b11.axisy * s.localCOMx - b11.axisx * s.localCOMy);
				s.worldCOMy = b11.posy + (s.localCOMx * b11.axisx + s.localCOMy * b11.axisy);
			} else {
				var p1 = s.polygon;
				var li = p1.lverts.next;
				var cx_ite1 = p1.gverts.next;
				while(cx_ite1 != null) {
					var g = cx_ite1;
					var l = li;
					li = li.next;
					g.x = b11.posx + (b11.axisy * l.x - b11.axisx * l.y);
					g.y = b11.posy + (l.x * b11.axisx + l.y * b11.axisy);
					cx_ite1 = cx_ite1.next;
				}
				var ite = p1.edges.head;
				var cx_ite2 = p1.gverts.next;
				var u = cx_ite2;
				cx_ite2 = cx_ite2.next;
				while(cx_ite2 != null) {
					var v = cx_ite2;
					var e = ite.elt;
					ite = ite.next;
					e.gnormx = b11.axisy * e.lnormx - b11.axisx * e.lnormy;
					e.gnormy = e.lnormx * b11.axisx + e.lnormy * b11.axisy;
					e.gprojection = b11.posx * e.gnormx + b11.posy * e.gnormy + e.lprojection;
					e.tp0 = u.y * e.gnormx - u.x * e.gnormy;
					e.tp1 = v.y * e.gnormx - v.x * e.gnormy;
					u = v;
					cx_ite2 = cx_ite2.next;
				}
				var v1 = p1.gverts.next;
				var e1 = ite.elt;
				e1.gnormx = b11.axisy * e1.lnormx - b11.axisx * e1.lnormy;
				e1.gnormy = e1.lnormx * b11.axisx + e1.lnormy * b11.axisy;
				e1.gprojection = b11.posx * e1.gnormx + b11.posy * e1.gnormy + e1.lprojection;
				e1.tp0 = u.y * e1.gnormx - u.x * e1.gnormy;
				e1.tp1 = v1.y * e1.gnormx - v1.x * e1.gnormy;
			}
		}
		if(!b21.sweepFrozen) {
			var dt1 = curTimeAlpha * deltaTime;
			var delta1 = dt1 - b21.sweepTime;
			if(delta1 != 0) {
				b21.sweepTime = dt1;
				b21.posx += b21.velx * delta1;
				b21.posy += b21.vely * delta1;
				if(b21.angvel != 0) {
					var dr1 = b21.sweep_angvel * delta1;
					b21.rot += dr1;
					if(dr1 * dr1 > 0.0001) {
						b21.axisx = Math.sin(b21.rot);
						b21.axisy = Math.cos(b21.rot);
					} else {
						var d21 = dr1 * dr1;
						var p2 = 1 - 0.5 * d21;
						var m1 = 1 - d21 * d21 / 8;
						var nx1 = (p2 * b21.axisx + dr1 * b21.axisy) * m1;
						b21.axisy = (p2 * b21.axisy - dr1 * b21.axisx) * m1;
						b21.axisx = nx1;
					}
				}
			}
			var s1 = minTOI.s2;
			if(s1.type == 0) {
				s1.worldCOMx = b21.posx + (b21.axisy * s1.localCOMx - b21.axisx * s1.localCOMy);
				s1.worldCOMy = b21.posy + (s1.localCOMx * b21.axisx + s1.localCOMy * b21.axisy);
			} else {
				var p3 = s1.polygon;
				var li1 = p3.lverts.next;
				var cx_ite3 = p3.gverts.next;
				while(cx_ite3 != null) {
					var g1 = cx_ite3;
					var l1 = li1;
					li1 = li1.next;
					g1.x = b21.posx + (b21.axisy * l1.x - b21.axisx * l1.y);
					g1.y = b21.posy + (l1.x * b21.axisx + l1.y * b21.axisy);
					cx_ite3 = cx_ite3.next;
				}
				var ite1 = p3.edges.head;
				var cx_ite4 = p3.gverts.next;
				var u1 = cx_ite4;
				cx_ite4 = cx_ite4.next;
				while(cx_ite4 != null) {
					var v2 = cx_ite4;
					var e2 = ite1.elt;
					ite1 = ite1.next;
					e2.gnormx = b21.axisy * e2.lnormx - b21.axisx * e2.lnormy;
					e2.gnormy = e2.lnormx * b21.axisx + e2.lnormy * b21.axisy;
					e2.gprojection = b21.posx * e2.gnormx + b21.posy * e2.gnormy + e2.lprojection;
					e2.tp0 = u1.y * e2.gnormx - u1.x * e2.gnormy;
					e2.tp1 = v2.y * e2.gnormx - v2.x * e2.gnormy;
					u1 = v2;
					cx_ite4 = cx_ite4.next;
				}
				var v3 = p3.gverts.next;
				var e3 = ite1.elt;
				e3.gnormx = b21.axisy * e3.lnormx - b21.axisx * e3.lnormy;
				e3.gnormy = e3.lnormx * b21.axisx + e3.lnormy * b21.axisy;
				e3.gprojection = b21.posx * e3.gnormx + b21.posy * e3.gnormy + e3.lprojection;
				e3.tp0 = u1.y * e3.gnormx - u1.x * e3.gnormy;
				e3.tp1 = v3.y * e3.gnormx - v3.x * e3.gnormy;
			}
		}
		var arb = this.narrowPhase(minTOI.s1,minTOI.s2,true,minTOI.arbiter,true);
		if(arb == null) {
			if(minTOI.arbiter != null && minTOI.arbiter.pair != null) {
				minTOI.arbiter.pair.arb = null;
				minTOI.arbiter.pair = null;
			}
		} else if(!this.presteparb(arb,deltaTime,true)) {
			if(arb.type == ZPP_Arbiter.COL && (arb.active && (arb.immState & 1) != 0)) {
				var _this = arb.colarb;
				var jx = _this.nx * _this.c1.jnAcc - _this.ny * _this.c1.jtAcc;
				var jy = _this.ny * _this.c1.jnAcc + _this.nx * _this.c1.jtAcc;
				var t = _this.b1.imass;
				_this.b1.velx -= jx * t;
				_this.b1.vely -= jy * t;
				_this.b1.angvel -= _this.b1.iinertia * (jy * _this.c1.r1x - jx * _this.c1.r1y);
				var t1 = _this.b2.imass;
				_this.b2.velx += jx * t1;
				_this.b2.vely += jy * t1;
				_this.b2.angvel += _this.b2.iinertia * (jy * _this.c1.r2x - jx * _this.c1.r2y);
				if(_this.hc2) {
					var jx1 = _this.nx * _this.c2.jnAcc - _this.ny * _this.c2.jtAcc;
					var jy1 = _this.ny * _this.c2.jnAcc + _this.nx * _this.c2.jtAcc;
					var t2 = _this.b1.imass;
					_this.b1.velx -= jx1 * t2;
					_this.b1.vely -= jy1 * t2;
					_this.b1.angvel -= _this.b1.iinertia * (jy1 * _this.c2.r1x - jx1 * _this.c2.r1y);
					var t3 = _this.b2.imass;
					_this.b2.velx += jx1 * t3;
					_this.b2.vely += jy1 * t3;
					_this.b2.angvel += _this.b2.iinertia * (jy1 * _this.c2.r2x - jx1 * _this.c2.r2y);
				}
				_this.b2.angvel += _this.jrAcc * _this.b2.iinertia;
				_this.b1.angvel -= _this.jrAcc * _this.b1.iinertia;
				var _this1 = arb.colarb;
				var jx2;
				var jy2;
				var j;
				var jMax;
				var jOld;
				var cjAcc;
				var v1x = _this1.k1x + _this1.b2.velx - _this1.c1.r2y * _this1.b2.angvel - (_this1.b1.velx - _this1.c1.r1y * _this1.b1.angvel);
				var v1y = _this1.k1y + _this1.b2.vely + _this1.c1.r2x * _this1.b2.angvel - (_this1.b1.vely + _this1.c1.r1x * _this1.b1.angvel);
				j = (v1y * _this1.nx - v1x * _this1.ny + _this1.surfacex) * _this1.c1.tMass;
				jMax = _this1.c1.friction * _this1.c1.jnAcc;
				jOld = _this1.c1.jtAcc;
				cjAcc = jOld - j;
				if(cjAcc > jMax) {
					cjAcc = jMax;
				} else if(cjAcc < -jMax) {
					cjAcc = -jMax;
				}
				j = cjAcc - jOld;
				_this1.c1.jtAcc = cjAcc;
				jx2 = -_this1.ny * j;
				jy2 = _this1.nx * j;
				_this1.b2.velx += jx2 * _this1.b2.imass;
				_this1.b2.vely += jy2 * _this1.b2.imass;
				_this1.b1.velx -= jx2 * _this1.b1.imass;
				_this1.b1.vely -= jy2 * _this1.b1.imass;
				_this1.b2.angvel += _this1.rt1b * j * _this1.b2.iinertia;
				_this1.b1.angvel -= _this1.rt1a * j * _this1.b1.iinertia;
				if(_this1.hc2) {
					var v2x = _this1.k2x + _this1.b2.velx - _this1.c2.r2y * _this1.b2.angvel - (_this1.b1.velx - _this1.c2.r1y * _this1.b1.angvel);
					var v2y = _this1.k2y + _this1.b2.vely + _this1.c2.r2x * _this1.b2.angvel - (_this1.b1.vely + _this1.c2.r1x * _this1.b1.angvel);
					j = (v2y * _this1.nx - v2x * _this1.ny + _this1.surfacex) * _this1.c2.tMass;
					jMax = _this1.c2.friction * _this1.c2.jnAcc;
					jOld = _this1.c2.jtAcc;
					cjAcc = jOld - j;
					if(cjAcc > jMax) {
						cjAcc = jMax;
					} else if(cjAcc < -jMax) {
						cjAcc = -jMax;
					}
					j = cjAcc - jOld;
					_this1.c2.jtAcc = cjAcc;
					jx2 = -_this1.ny * j;
					jy2 = _this1.nx * j;
					_this1.b2.velx += jx2 * _this1.b2.imass;
					_this1.b2.vely += jy2 * _this1.b2.imass;
					_this1.b1.velx -= jx2 * _this1.b1.imass;
					_this1.b1.vely -= jy2 * _this1.b1.imass;
					_this1.b2.angvel += _this1.rt2b * j * _this1.b2.iinertia;
					_this1.b1.angvel -= _this1.rt2a * j * _this1.b1.iinertia;
					v1x = _this1.k1x + _this1.b2.velx - _this1.c1.r2y * _this1.b2.angvel - (_this1.b1.velx - _this1.c1.r1y * _this1.b1.angvel);
					v1y = _this1.k1y + _this1.b2.vely + _this1.c1.r2x * _this1.b2.angvel - (_this1.b1.vely + _this1.c1.r1x * _this1.b1.angvel);
					v2x = _this1.k2x + _this1.b2.velx - _this1.c2.r2y * _this1.b2.angvel - (_this1.b1.velx - _this1.c2.r1y * _this1.b1.angvel);
					v2y = _this1.k2y + _this1.b2.vely + _this1.c2.r2x * _this1.b2.angvel - (_this1.b1.vely + _this1.c2.r1x * _this1.b1.angvel);
					var ax = _this1.c1.jnAcc;
					var ay = _this1.c2.jnAcc;
					var jnx = v1x * _this1.nx + v1y * _this1.ny + _this1.surfacey + _this1.c1.bounce - (_this1.Ka * ax + _this1.Kb * ay);
					var jny = v2x * _this1.nx + v2y * _this1.ny + _this1.surfacey + _this1.c2.bounce - (_this1.Kb * ax + _this1.Kc * ay);
					var xx = -(_this1.kMassa * jnx + _this1.kMassb * jny);
					var xy = -(_this1.kMassb * jnx + _this1.kMassc * jny);
					if(xx >= 0 && xy >= 0) {
						jnx = xx - ax;
						jny = xy - ay;
						_this1.c1.jnAcc = xx;
						_this1.c2.jnAcc = xy;
					} else {
						xx = -_this1.c1.nMass * jnx;
						if(xx >= 0 && _this1.Kb * xx + jny >= 0) {
							jnx = xx - ax;
							jny = -ay;
							_this1.c1.jnAcc = xx;
							_this1.c2.jnAcc = 0;
						} else {
							xy = -_this1.c2.nMass * jny;
							if(xy >= 0 && _this1.Kb * xy + jnx >= 0) {
								jnx = -ax;
								jny = xy - ay;
								_this1.c1.jnAcc = 0;
								_this1.c2.jnAcc = xy;
							} else if(jnx >= 0 && jny >= 0) {
								jnx = -ax;
								jny = -ay;
								_this1.c1.jnAcc = _this1.c2.jnAcc = 0;
							} else {
								jnx = 0;
								jny = 0;
							}
						}
					}
					j = jnx + jny;
					jx2 = _this1.nx * j;
					jy2 = _this1.ny * j;
					_this1.b2.velx += jx2 * _this1.b2.imass;
					_this1.b2.vely += jy2 * _this1.b2.imass;
					_this1.b1.velx -= jx2 * _this1.b1.imass;
					_this1.b1.vely -= jy2 * _this1.b1.imass;
					_this1.b2.angvel += (_this1.rn1b * jnx + _this1.rn2b * jny) * _this1.b2.iinertia;
					_this1.b1.angvel -= (_this1.rn1a * jnx + _this1.rn2a * jny) * _this1.b1.iinertia;
				} else {
					if(_this1.radius != 0.0) {
						j = (_this1.b2.angvel - _this1.b1.angvel) * _this1.rMass;
						jMax = _this1.rfric * _this1.c1.jnAcc;
						jOld = _this1.jrAcc;
						_this1.jrAcc -= j;
						if(_this1.jrAcc > jMax) {
							_this1.jrAcc = jMax;
						} else if(_this1.jrAcc < -jMax) {
							_this1.jrAcc = -jMax;
						}
						j = _this1.jrAcc - jOld;
						_this1.b2.angvel += j * _this1.b2.iinertia;
						_this1.b1.angvel -= j * _this1.b1.iinertia;
					}
					v1x = _this1.k1x + _this1.b2.velx - _this1.c1.r2y * _this1.b2.angvel - (_this1.b1.velx - _this1.c1.r1y * _this1.b1.angvel);
					v1y = _this1.k1y + _this1.b2.vely + _this1.c1.r2x * _this1.b2.angvel - (_this1.b1.vely + _this1.c1.r1x * _this1.b1.angvel);
					j = (_this1.c1.bounce + (_this1.nx * v1x + _this1.ny * v1y) + _this1.surfacey) * _this1.c1.nMass;
					jOld = _this1.c1.jnAcc;
					cjAcc = jOld - j;
					if(cjAcc < 0.0) {
						cjAcc = 0.0;
					}
					j = cjAcc - jOld;
					_this1.c1.jnAcc = cjAcc;
					jx2 = _this1.nx * j;
					jy2 = _this1.ny * j;
					_this1.b2.velx += jx2 * _this1.b2.imass;
					_this1.b2.vely += jy2 * _this1.b2.imass;
					_this1.b1.velx -= jx2 * _this1.b1.imass;
					_this1.b1.vely -= jy2 * _this1.b1.imass;
					_this1.b2.angvel += _this1.rn1b * j * _this1.b2.iinertia;
					_this1.b1.angvel -= _this1.rn1a * j * _this1.b1.iinertia;
				}
				var _this2 = arb.colarb;
				var jx3;
				var jy3;
				var j1;
				var jMax1;
				var jOld1;
				var cjAcc1;
				var v1x1 = _this2.k1x + _this2.b2.velx - _this2.c1.r2y * _this2.b2.angvel - (_this2.b1.velx - _this2.c1.r1y * _this2.b1.angvel);
				var v1y1 = _this2.k1y + _this2.b2.vely + _this2.c1.r2x * _this2.b2.angvel - (_this2.b1.vely + _this2.c1.r1x * _this2.b1.angvel);
				j1 = (v1y1 * _this2.nx - v1x1 * _this2.ny + _this2.surfacex) * _this2.c1.tMass;
				jMax1 = _this2.c1.friction * _this2.c1.jnAcc;
				jOld1 = _this2.c1.jtAcc;
				cjAcc1 = jOld1 - j1;
				if(cjAcc1 > jMax1) {
					cjAcc1 = jMax1;
				} else if(cjAcc1 < -jMax1) {
					cjAcc1 = -jMax1;
				}
				j1 = cjAcc1 - jOld1;
				_this2.c1.jtAcc = cjAcc1;
				jx3 = -_this2.ny * j1;
				jy3 = _this2.nx * j1;
				_this2.b2.velx += jx3 * _this2.b2.imass;
				_this2.b2.vely += jy3 * _this2.b2.imass;
				_this2.b1.velx -= jx3 * _this2.b1.imass;
				_this2.b1.vely -= jy3 * _this2.b1.imass;
				_this2.b2.angvel += _this2.rt1b * j1 * _this2.b2.iinertia;
				_this2.b1.angvel -= _this2.rt1a * j1 * _this2.b1.iinertia;
				if(_this2.hc2) {
					var v2x1 = _this2.k2x + _this2.b2.velx - _this2.c2.r2y * _this2.b2.angvel - (_this2.b1.velx - _this2.c2.r1y * _this2.b1.angvel);
					var v2y1 = _this2.k2y + _this2.b2.vely + _this2.c2.r2x * _this2.b2.angvel - (_this2.b1.vely + _this2.c2.r1x * _this2.b1.angvel);
					j1 = (v2y1 * _this2.nx - v2x1 * _this2.ny + _this2.surfacex) * _this2.c2.tMass;
					jMax1 = _this2.c2.friction * _this2.c2.jnAcc;
					jOld1 = _this2.c2.jtAcc;
					cjAcc1 = jOld1 - j1;
					if(cjAcc1 > jMax1) {
						cjAcc1 = jMax1;
					} else if(cjAcc1 < -jMax1) {
						cjAcc1 = -jMax1;
					}
					j1 = cjAcc1 - jOld1;
					_this2.c2.jtAcc = cjAcc1;
					jx3 = -_this2.ny * j1;
					jy3 = _this2.nx * j1;
					_this2.b2.velx += jx3 * _this2.b2.imass;
					_this2.b2.vely += jy3 * _this2.b2.imass;
					_this2.b1.velx -= jx3 * _this2.b1.imass;
					_this2.b1.vely -= jy3 * _this2.b1.imass;
					_this2.b2.angvel += _this2.rt2b * j1 * _this2.b2.iinertia;
					_this2.b1.angvel -= _this2.rt2a * j1 * _this2.b1.iinertia;
					v1x1 = _this2.k1x + _this2.b2.velx - _this2.c1.r2y * _this2.b2.angvel - (_this2.b1.velx - _this2.c1.r1y * _this2.b1.angvel);
					v1y1 = _this2.k1y + _this2.b2.vely + _this2.c1.r2x * _this2.b2.angvel - (_this2.b1.vely + _this2.c1.r1x * _this2.b1.angvel);
					v2x1 = _this2.k2x + _this2.b2.velx - _this2.c2.r2y * _this2.b2.angvel - (_this2.b1.velx - _this2.c2.r1y * _this2.b1.angvel);
					v2y1 = _this2.k2y + _this2.b2.vely + _this2.c2.r2x * _this2.b2.angvel - (_this2.b1.vely + _this2.c2.r1x * _this2.b1.angvel);
					var ax1 = _this2.c1.jnAcc;
					var ay1 = _this2.c2.jnAcc;
					var jnx1 = v1x1 * _this2.nx + v1y1 * _this2.ny + _this2.surfacey + _this2.c1.bounce - (_this2.Ka * ax1 + _this2.Kb * ay1);
					var jny1 = v2x1 * _this2.nx + v2y1 * _this2.ny + _this2.surfacey + _this2.c2.bounce - (_this2.Kb * ax1 + _this2.Kc * ay1);
					var xx1 = -(_this2.kMassa * jnx1 + _this2.kMassb * jny1);
					var xy1 = -(_this2.kMassb * jnx1 + _this2.kMassc * jny1);
					if(xx1 >= 0 && xy1 >= 0) {
						jnx1 = xx1 - ax1;
						jny1 = xy1 - ay1;
						_this2.c1.jnAcc = xx1;
						_this2.c2.jnAcc = xy1;
					} else {
						xx1 = -_this2.c1.nMass * jnx1;
						if(xx1 >= 0 && _this2.Kb * xx1 + jny1 >= 0) {
							jnx1 = xx1 - ax1;
							jny1 = -ay1;
							_this2.c1.jnAcc = xx1;
							_this2.c2.jnAcc = 0;
						} else {
							xy1 = -_this2.c2.nMass * jny1;
							if(xy1 >= 0 && _this2.Kb * xy1 + jnx1 >= 0) {
								jnx1 = -ax1;
								jny1 = xy1 - ay1;
								_this2.c1.jnAcc = 0;
								_this2.c2.jnAcc = xy1;
							} else if(jnx1 >= 0 && jny1 >= 0) {
								jnx1 = -ax1;
								jny1 = -ay1;
								_this2.c1.jnAcc = _this2.c2.jnAcc = 0;
							} else {
								jnx1 = 0;
								jny1 = 0;
							}
						}
					}
					j1 = jnx1 + jny1;
					jx3 = _this2.nx * j1;
					jy3 = _this2.ny * j1;
					_this2.b2.velx += jx3 * _this2.b2.imass;
					_this2.b2.vely += jy3 * _this2.b2.imass;
					_this2.b1.velx -= jx3 * _this2.b1.imass;
					_this2.b1.vely -= jy3 * _this2.b1.imass;
					_this2.b2.angvel += (_this2.rn1b * jnx1 + _this2.rn2b * jny1) * _this2.b2.iinertia;
					_this2.b1.angvel -= (_this2.rn1a * jnx1 + _this2.rn2a * jny1) * _this2.b1.iinertia;
				} else {
					if(_this2.radius != 0.0) {
						j1 = (_this2.b2.angvel - _this2.b1.angvel) * _this2.rMass;
						jMax1 = _this2.rfric * _this2.c1.jnAcc;
						jOld1 = _this2.jrAcc;
						_this2.jrAcc -= j1;
						if(_this2.jrAcc > jMax1) {
							_this2.jrAcc = jMax1;
						} else if(_this2.jrAcc < -jMax1) {
							_this2.jrAcc = -jMax1;
						}
						j1 = _this2.jrAcc - jOld1;
						_this2.b2.angvel += j1 * _this2.b2.iinertia;
						_this2.b1.angvel -= j1 * _this2.b1.iinertia;
					}
					v1x1 = _this2.k1x + _this2.b2.velx - _this2.c1.r2y * _this2.b2.angvel - (_this2.b1.velx - _this2.c1.r1y * _this2.b1.angvel);
					v1y1 = _this2.k1y + _this2.b2.vely + _this2.c1.r2x * _this2.b2.angvel - (_this2.b1.vely + _this2.c1.r1x * _this2.b1.angvel);
					j1 = (_this2.c1.bounce + (_this2.nx * v1x1 + _this2.ny * v1y1) + _this2.surfacey) * _this2.c1.nMass;
					jOld1 = _this2.c1.jnAcc;
					cjAcc1 = jOld1 - j1;
					if(cjAcc1 < 0.0) {
						cjAcc1 = 0.0;
					}
					j1 = cjAcc1 - jOld1;
					_this2.c1.jnAcc = cjAcc1;
					jx3 = _this2.nx * j1;
					jy3 = _this2.ny * j1;
					_this2.b2.velx += jx3 * _this2.b2.imass;
					_this2.b2.vely += jy3 * _this2.b2.imass;
					_this2.b1.velx -= jx3 * _this2.b1.imass;
					_this2.b1.vely -= jy3 * _this2.b1.imass;
					_this2.b2.angvel += _this2.rn1b * j1 * _this2.b2.iinertia;
					_this2.b1.angvel -= _this2.rn1a * j1 * _this2.b1.iinertia;
				}
				var _this3 = arb.colarb;
				var jx4;
				var jy4;
				var j2;
				var jMax2;
				var jOld2;
				var cjAcc2;
				var v1x2 = _this3.k1x + _this3.b2.velx - _this3.c1.r2y * _this3.b2.angvel - (_this3.b1.velx - _this3.c1.r1y * _this3.b1.angvel);
				var v1y2 = _this3.k1y + _this3.b2.vely + _this3.c1.r2x * _this3.b2.angvel - (_this3.b1.vely + _this3.c1.r1x * _this3.b1.angvel);
				j2 = (v1y2 * _this3.nx - v1x2 * _this3.ny + _this3.surfacex) * _this3.c1.tMass;
				jMax2 = _this3.c1.friction * _this3.c1.jnAcc;
				jOld2 = _this3.c1.jtAcc;
				cjAcc2 = jOld2 - j2;
				if(cjAcc2 > jMax2) {
					cjAcc2 = jMax2;
				} else if(cjAcc2 < -jMax2) {
					cjAcc2 = -jMax2;
				}
				j2 = cjAcc2 - jOld2;
				_this3.c1.jtAcc = cjAcc2;
				jx4 = -_this3.ny * j2;
				jy4 = _this3.nx * j2;
				_this3.b2.velx += jx4 * _this3.b2.imass;
				_this3.b2.vely += jy4 * _this3.b2.imass;
				_this3.b1.velx -= jx4 * _this3.b1.imass;
				_this3.b1.vely -= jy4 * _this3.b1.imass;
				_this3.b2.angvel += _this3.rt1b * j2 * _this3.b2.iinertia;
				_this3.b1.angvel -= _this3.rt1a * j2 * _this3.b1.iinertia;
				if(_this3.hc2) {
					var v2x2 = _this3.k2x + _this3.b2.velx - _this3.c2.r2y * _this3.b2.angvel - (_this3.b1.velx - _this3.c2.r1y * _this3.b1.angvel);
					var v2y2 = _this3.k2y + _this3.b2.vely + _this3.c2.r2x * _this3.b2.angvel - (_this3.b1.vely + _this3.c2.r1x * _this3.b1.angvel);
					j2 = (v2y2 * _this3.nx - v2x2 * _this3.ny + _this3.surfacex) * _this3.c2.tMass;
					jMax2 = _this3.c2.friction * _this3.c2.jnAcc;
					jOld2 = _this3.c2.jtAcc;
					cjAcc2 = jOld2 - j2;
					if(cjAcc2 > jMax2) {
						cjAcc2 = jMax2;
					} else if(cjAcc2 < -jMax2) {
						cjAcc2 = -jMax2;
					}
					j2 = cjAcc2 - jOld2;
					_this3.c2.jtAcc = cjAcc2;
					jx4 = -_this3.ny * j2;
					jy4 = _this3.nx * j2;
					_this3.b2.velx += jx4 * _this3.b2.imass;
					_this3.b2.vely += jy4 * _this3.b2.imass;
					_this3.b1.velx -= jx4 * _this3.b1.imass;
					_this3.b1.vely -= jy4 * _this3.b1.imass;
					_this3.b2.angvel += _this3.rt2b * j2 * _this3.b2.iinertia;
					_this3.b1.angvel -= _this3.rt2a * j2 * _this3.b1.iinertia;
					v1x2 = _this3.k1x + _this3.b2.velx - _this3.c1.r2y * _this3.b2.angvel - (_this3.b1.velx - _this3.c1.r1y * _this3.b1.angvel);
					v1y2 = _this3.k1y + _this3.b2.vely + _this3.c1.r2x * _this3.b2.angvel - (_this3.b1.vely + _this3.c1.r1x * _this3.b1.angvel);
					v2x2 = _this3.k2x + _this3.b2.velx - _this3.c2.r2y * _this3.b2.angvel - (_this3.b1.velx - _this3.c2.r1y * _this3.b1.angvel);
					v2y2 = _this3.k2y + _this3.b2.vely + _this3.c2.r2x * _this3.b2.angvel - (_this3.b1.vely + _this3.c2.r1x * _this3.b1.angvel);
					var ax2 = _this3.c1.jnAcc;
					var ay2 = _this3.c2.jnAcc;
					var jnx2 = v1x2 * _this3.nx + v1y2 * _this3.ny + _this3.surfacey + _this3.c1.bounce - (_this3.Ka * ax2 + _this3.Kb * ay2);
					var jny2 = v2x2 * _this3.nx + v2y2 * _this3.ny + _this3.surfacey + _this3.c2.bounce - (_this3.Kb * ax2 + _this3.Kc * ay2);
					var xx2 = -(_this3.kMassa * jnx2 + _this3.kMassb * jny2);
					var xy2 = -(_this3.kMassb * jnx2 + _this3.kMassc * jny2);
					if(xx2 >= 0 && xy2 >= 0) {
						jnx2 = xx2 - ax2;
						jny2 = xy2 - ay2;
						_this3.c1.jnAcc = xx2;
						_this3.c2.jnAcc = xy2;
					} else {
						xx2 = -_this3.c1.nMass * jnx2;
						if(xx2 >= 0 && _this3.Kb * xx2 + jny2 >= 0) {
							jnx2 = xx2 - ax2;
							jny2 = -ay2;
							_this3.c1.jnAcc = xx2;
							_this3.c2.jnAcc = 0;
						} else {
							xy2 = -_this3.c2.nMass * jny2;
							if(xy2 >= 0 && _this3.Kb * xy2 + jnx2 >= 0) {
								jnx2 = -ax2;
								jny2 = xy2 - ay2;
								_this3.c1.jnAcc = 0;
								_this3.c2.jnAcc = xy2;
							} else if(jnx2 >= 0 && jny2 >= 0) {
								jnx2 = -ax2;
								jny2 = -ay2;
								_this3.c1.jnAcc = _this3.c2.jnAcc = 0;
							} else {
								jnx2 = 0;
								jny2 = 0;
							}
						}
					}
					j2 = jnx2 + jny2;
					jx4 = _this3.nx * j2;
					jy4 = _this3.ny * j2;
					_this3.b2.velx += jx4 * _this3.b2.imass;
					_this3.b2.vely += jy4 * _this3.b2.imass;
					_this3.b1.velx -= jx4 * _this3.b1.imass;
					_this3.b1.vely -= jy4 * _this3.b1.imass;
					_this3.b2.angvel += (_this3.rn1b * jnx2 + _this3.rn2b * jny2) * _this3.b2.iinertia;
					_this3.b1.angvel -= (_this3.rn1a * jnx2 + _this3.rn2a * jny2) * _this3.b1.iinertia;
				} else {
					if(_this3.radius != 0.0) {
						j2 = (_this3.b2.angvel - _this3.b1.angvel) * _this3.rMass;
						jMax2 = _this3.rfric * _this3.c1.jnAcc;
						jOld2 = _this3.jrAcc;
						_this3.jrAcc -= j2;
						if(_this3.jrAcc > jMax2) {
							_this3.jrAcc = jMax2;
						} else if(_this3.jrAcc < -jMax2) {
							_this3.jrAcc = -jMax2;
						}
						j2 = _this3.jrAcc - jOld2;
						_this3.b2.angvel += j2 * _this3.b2.iinertia;
						_this3.b1.angvel -= j2 * _this3.b1.iinertia;
					}
					v1x2 = _this3.k1x + _this3.b2.velx - _this3.c1.r2y * _this3.b2.angvel - (_this3.b1.velx - _this3.c1.r1y * _this3.b1.angvel);
					v1y2 = _this3.k1y + _this3.b2.vely + _this3.c1.r2x * _this3.b2.angvel - (_this3.b1.vely + _this3.c1.r1x * _this3.b1.angvel);
					j2 = (_this3.c1.bounce + (_this3.nx * v1x2 + _this3.ny * v1y2) + _this3.surfacey) * _this3.c1.nMass;
					jOld2 = _this3.c1.jnAcc;
					cjAcc2 = jOld2 - j2;
					if(cjAcc2 < 0.0) {
						cjAcc2 = 0.0;
					}
					j2 = cjAcc2 - jOld2;
					_this3.c1.jnAcc = cjAcc2;
					jx4 = _this3.nx * j2;
					jy4 = _this3.ny * j2;
					_this3.b2.velx += jx4 * _this3.b2.imass;
					_this3.b2.vely += jy4 * _this3.b2.imass;
					_this3.b1.velx -= jx4 * _this3.b1.imass;
					_this3.b1.vely -= jy4 * _this3.b1.imass;
					_this3.b2.angvel += _this3.rn1b * j2 * _this3.b2.iinertia;
					_this3.b1.angvel -= _this3.rn1a * j2 * _this3.b1.iinertia;
				}
				var _this4 = arb.colarb;
				var jx5;
				var jy5;
				var j3;
				var jMax3;
				var jOld3;
				var cjAcc3;
				var v1x3 = _this4.k1x + _this4.b2.velx - _this4.c1.r2y * _this4.b2.angvel - (_this4.b1.velx - _this4.c1.r1y * _this4.b1.angvel);
				var v1y3 = _this4.k1y + _this4.b2.vely + _this4.c1.r2x * _this4.b2.angvel - (_this4.b1.vely + _this4.c1.r1x * _this4.b1.angvel);
				j3 = (v1y3 * _this4.nx - v1x3 * _this4.ny + _this4.surfacex) * _this4.c1.tMass;
				jMax3 = _this4.c1.friction * _this4.c1.jnAcc;
				jOld3 = _this4.c1.jtAcc;
				cjAcc3 = jOld3 - j3;
				if(cjAcc3 > jMax3) {
					cjAcc3 = jMax3;
				} else if(cjAcc3 < -jMax3) {
					cjAcc3 = -jMax3;
				}
				j3 = cjAcc3 - jOld3;
				_this4.c1.jtAcc = cjAcc3;
				jx5 = -_this4.ny * j3;
				jy5 = _this4.nx * j3;
				_this4.b2.velx += jx5 * _this4.b2.imass;
				_this4.b2.vely += jy5 * _this4.b2.imass;
				_this4.b1.velx -= jx5 * _this4.b1.imass;
				_this4.b1.vely -= jy5 * _this4.b1.imass;
				_this4.b2.angvel += _this4.rt1b * j3 * _this4.b2.iinertia;
				_this4.b1.angvel -= _this4.rt1a * j3 * _this4.b1.iinertia;
				if(_this4.hc2) {
					var v2x3 = _this4.k2x + _this4.b2.velx - _this4.c2.r2y * _this4.b2.angvel - (_this4.b1.velx - _this4.c2.r1y * _this4.b1.angvel);
					var v2y3 = _this4.k2y + _this4.b2.vely + _this4.c2.r2x * _this4.b2.angvel - (_this4.b1.vely + _this4.c2.r1x * _this4.b1.angvel);
					j3 = (v2y3 * _this4.nx - v2x3 * _this4.ny + _this4.surfacex) * _this4.c2.tMass;
					jMax3 = _this4.c2.friction * _this4.c2.jnAcc;
					jOld3 = _this4.c2.jtAcc;
					cjAcc3 = jOld3 - j3;
					if(cjAcc3 > jMax3) {
						cjAcc3 = jMax3;
					} else if(cjAcc3 < -jMax3) {
						cjAcc3 = -jMax3;
					}
					j3 = cjAcc3 - jOld3;
					_this4.c2.jtAcc = cjAcc3;
					jx5 = -_this4.ny * j3;
					jy5 = _this4.nx * j3;
					_this4.b2.velx += jx5 * _this4.b2.imass;
					_this4.b2.vely += jy5 * _this4.b2.imass;
					_this4.b1.velx -= jx5 * _this4.b1.imass;
					_this4.b1.vely -= jy5 * _this4.b1.imass;
					_this4.b2.angvel += _this4.rt2b * j3 * _this4.b2.iinertia;
					_this4.b1.angvel -= _this4.rt2a * j3 * _this4.b1.iinertia;
					v1x3 = _this4.k1x + _this4.b2.velx - _this4.c1.r2y * _this4.b2.angvel - (_this4.b1.velx - _this4.c1.r1y * _this4.b1.angvel);
					v1y3 = _this4.k1y + _this4.b2.vely + _this4.c1.r2x * _this4.b2.angvel - (_this4.b1.vely + _this4.c1.r1x * _this4.b1.angvel);
					v2x3 = _this4.k2x + _this4.b2.velx - _this4.c2.r2y * _this4.b2.angvel - (_this4.b1.velx - _this4.c2.r1y * _this4.b1.angvel);
					v2y3 = _this4.k2y + _this4.b2.vely + _this4.c2.r2x * _this4.b2.angvel - (_this4.b1.vely + _this4.c2.r1x * _this4.b1.angvel);
					var ax3 = _this4.c1.jnAcc;
					var ay3 = _this4.c2.jnAcc;
					var jnx3 = v1x3 * _this4.nx + v1y3 * _this4.ny + _this4.surfacey + _this4.c1.bounce - (_this4.Ka * ax3 + _this4.Kb * ay3);
					var jny3 = v2x3 * _this4.nx + v2y3 * _this4.ny + _this4.surfacey + _this4.c2.bounce - (_this4.Kb * ax3 + _this4.Kc * ay3);
					var xx3 = -(_this4.kMassa * jnx3 + _this4.kMassb * jny3);
					var xy3 = -(_this4.kMassb * jnx3 + _this4.kMassc * jny3);
					if(xx3 >= 0 && xy3 >= 0) {
						jnx3 = xx3 - ax3;
						jny3 = xy3 - ay3;
						_this4.c1.jnAcc = xx3;
						_this4.c2.jnAcc = xy3;
					} else {
						xx3 = -_this4.c1.nMass * jnx3;
						if(xx3 >= 0 && _this4.Kb * xx3 + jny3 >= 0) {
							jnx3 = xx3 - ax3;
							jny3 = -ay3;
							_this4.c1.jnAcc = xx3;
							_this4.c2.jnAcc = 0;
						} else {
							xy3 = -_this4.c2.nMass * jny3;
							if(xy3 >= 0 && _this4.Kb * xy3 + jnx3 >= 0) {
								jnx3 = -ax3;
								jny3 = xy3 - ay3;
								_this4.c1.jnAcc = 0;
								_this4.c2.jnAcc = xy3;
							} else if(jnx3 >= 0 && jny3 >= 0) {
								jnx3 = -ax3;
								jny3 = -ay3;
								_this4.c1.jnAcc = _this4.c2.jnAcc = 0;
							} else {
								jnx3 = 0;
								jny3 = 0;
							}
						}
					}
					j3 = jnx3 + jny3;
					jx5 = _this4.nx * j3;
					jy5 = _this4.ny * j3;
					_this4.b2.velx += jx5 * _this4.b2.imass;
					_this4.b2.vely += jy5 * _this4.b2.imass;
					_this4.b1.velx -= jx5 * _this4.b1.imass;
					_this4.b1.vely -= jy5 * _this4.b1.imass;
					_this4.b2.angvel += (_this4.rn1b * jnx3 + _this4.rn2b * jny3) * _this4.b2.iinertia;
					_this4.b1.angvel -= (_this4.rn1a * jnx3 + _this4.rn2a * jny3) * _this4.b1.iinertia;
				} else {
					if(_this4.radius != 0.0) {
						j3 = (_this4.b2.angvel - _this4.b1.angvel) * _this4.rMass;
						jMax3 = _this4.rfric * _this4.c1.jnAcc;
						jOld3 = _this4.jrAcc;
						_this4.jrAcc -= j3;
						if(_this4.jrAcc > jMax3) {
							_this4.jrAcc = jMax3;
						} else if(_this4.jrAcc < -jMax3) {
							_this4.jrAcc = -jMax3;
						}
						j3 = _this4.jrAcc - jOld3;
						_this4.b2.angvel += j3 * _this4.b2.iinertia;
						_this4.b1.angvel -= j3 * _this4.b1.iinertia;
					}
					v1x3 = _this4.k1x + _this4.b2.velx - _this4.c1.r2y * _this4.b2.angvel - (_this4.b1.velx - _this4.c1.r1y * _this4.b1.angvel);
					v1y3 = _this4.k1y + _this4.b2.vely + _this4.c1.r2x * _this4.b2.angvel - (_this4.b1.vely + _this4.c1.r1x * _this4.b1.angvel);
					j3 = (_this4.c1.bounce + (_this4.nx * v1x3 + _this4.ny * v1y3) + _this4.surfacey) * _this4.c1.nMass;
					jOld3 = _this4.c1.jnAcc;
					cjAcc3 = jOld3 - j3;
					if(cjAcc3 < 0.0) {
						cjAcc3 = 0.0;
					}
					j3 = cjAcc3 - jOld3;
					_this4.c1.jnAcc = cjAcc3;
					jx5 = _this4.nx * j3;
					jy5 = _this4.ny * j3;
					_this4.b2.velx += jx5 * _this4.b2.imass;
					_this4.b2.vely += jy5 * _this4.b2.imass;
					_this4.b1.velx -= jx5 * _this4.b1.imass;
					_this4.b1.vely -= jy5 * _this4.b1.imass;
					_this4.b2.angvel += _this4.rn1b * j3 * _this4.b2.iinertia;
					_this4.b1.angvel -= _this4.rn1a * j3 * _this4.b1.iinertia;
				}
				b11.sweep_angvel = b11.angvel % MAX_VEL;
				b21.sweep_angvel = b21.angvel % MAX_VEL;
			}
		}
		if(arb != null && (arb.active && (arb.immState & 1) != 0) && arb.type == ZPP_Arbiter.COL) {
			if(!b11.sweepFrozen && b11.type != 3) {
				b11.sweepFrozen = true;
				if(minTOI.failed) {
					b11.angvel = b11.sweep_angvel = 0;
				} else if(minTOI.slipped) {
					b11.angvel = b11.sweep_angvel *= Config.angularCCDSlipScale;
				} else {
					b11.angvel = b11.sweep_angvel;
				}
			}
			if(!b21.sweepFrozen && b21.type != 3) {
				b21.sweepFrozen = true;
				if(minTOI.failed) {
					b21.angvel = b21.sweep_angvel = 0;
				} else if(minTOI.slipped) {
					b21.angvel = b21.sweep_angvel *= Config.angularCCDSlipScale;
				} else {
					b21.angvel = b21.sweep_angvel;
				}
			}
		}
		var o = minTOI;
		o.next = ZPP_ToiEvent.zpp_pool;
		ZPP_ToiEvent.zpp_pool = o;
	}
	while(this.toiEvents.head != null) {
		var toi1 = this.toiEvents.pop_unsafe();
		toi1.next = ZPP_ToiEvent.zpp_pool;
		ZPP_ToiEvent.zpp_pool = toi1;
	}
	var cx_ite5 = this.kinematics.head;
	while(cx_ite5 != null) {
		var cur = cx_ite5.elt;
		var delta2 = deltaTime - cur.sweepTime;
		if(delta2 != 0) {
			cur.sweepTime = deltaTime;
			cur.posx += cur.velx * delta2;
			cur.posy += cur.vely * delta2;
			if(cur.angvel != 0) {
				var dr2 = cur.sweep_angvel * delta2;
				cur.rot += dr2;
				if(dr2 * dr2 > 0.0001) {
					cur.axisx = Math.sin(cur.rot);
					cur.axisy = Math.cos(cur.rot);
				} else {
					var d22 = dr2 * dr2;
					var p4 = 1 - 0.5 * d22;
					var m2 = 1 - d22 * d22 / 8;
					var nx2 = (p4 * cur.axisx + dr2 * cur.axisy) * m2;
					cur.axisy = (p4 * cur.axisy - dr2 * cur.axisx) * m2;
					cur.axisx = nx2;
				}
			}
		}
		cur.sweepTime = 0;
		cx_ite5 = cx_ite5.next;
	}
	var cx_ite6 = this.live.head;
	while(cx_ite6 != null) {
		var cur1 = cx_ite6.elt;
		if(!cur1.sweepFrozen) {
			var delta3 = deltaTime - cur1.sweepTime;
			if(delta3 != 0) {
				cur1.sweepTime = deltaTime;
				cur1.posx += cur1.velx * delta3;
				cur1.posy += cur1.vely * delta3;
				if(cur1.angvel != 0) {
					var dr3 = cur1.sweep_angvel * delta3;
					cur1.rot += dr3;
					if(dr3 * dr3 > 0.0001) {
						cur1.axisx = Math.sin(cur1.rot);
						cur1.axisy = Math.cos(cur1.rot);
					} else {
						var d23 = dr3 * dr3;
						var p5 = 1 - 0.5 * d23;
						var m3 = 1 - d23 * d23 / 8;
						var nx3 = (p5 * cur1.axisx + dr3 * cur1.axisy) * m3;
						cur1.axisy = (p5 * cur1.axisy - dr3 * cur1.axisx) * m3;
						cur1.axisx = nx3;
					}
				}
			}
		}
		cur1.sweepTime = 0;
		cx_ite6 = cx_ite6.next;
	}
};
ZPP_Space.prototype.continuousEvent = function(s1,s2,stat,in_arb,_) {
	if(s1.body.sweepFrozen && s2.body.sweepFrozen) {
		return in_arb;
	}
	if(s1.body.disableCCD || s2.body.disableCCD) {
		return in_arb;
	}
	var tmp;
	if(!(in_arb != null && in_arb.colarb == null)) {
		var b1 = s1.body;
		var b2 = s2.body;
		var con_ignore;
		con_ignore = false;
		var cx_ite = b1.constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.ignore && con.pair_exists(b1.id,b2.id)) {
				con_ignore = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		var tmp1;
		var tmp2;
		if(!con_ignore) {
			var cur = s1;
			while(cur != null && cur.group == null) if(cur.ishape != null) {
				cur = cur.ishape.body;
			} else if(cur.icompound != null) {
				cur = cur.icompound.compound;
			} else {
				cur = cur.ibody.compound;
			}
			var g1 = cur == null?null:cur.group;
			var tmp3;
			if(g1 == null) {
				tmp3 = false;
			} else {
				var cur1 = s2;
				while(cur1 != null && cur1.group == null) if(cur1.ishape != null) {
					cur1 = cur1.ishape.body;
				} else if(cur1.icompound != null) {
					cur1 = cur1.icompound.compound;
				} else {
					cur1 = cur1.ibody.compound;
				}
				var g2 = cur1 == null?null:cur1.group;
				if(g2 == null) {
					tmp3 = false;
				} else {
					var ret = false;
					while(g1 != null && g2 != null) {
						if(g1 == g2) {
							ret = g1.ignore;
							break;
						}
						if(g1.depth < g2.depth) {
							g2 = g2.group;
						} else {
							g1 = g1.group;
						}
					}
					tmp3 = ret;
				}
			}
			tmp2 = !tmp3;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			var tmp4;
			if(s1.sensorEnabled || s2.sensorEnabled) {
				var _this = s1.filter;
				var x = s2.filter;
				if((_this.sensorMask & x.sensorGroup) != 0) {
					tmp4 = (x.sensorMask & _this.sensorGroup) != 0;
				} else {
					tmp4 = false;
				}
			} else {
				tmp4 = false;
			}
			if(tmp4) {
				tmp1 = 2;
			} else {
				var tmp5;
				var tmp6;
				if(s1.fluidEnabled || s2.fluidEnabled) {
					var _this1 = s1.filter;
					var x1 = s2.filter;
					if((_this1.fluidMask & x1.fluidGroup) != 0) {
						tmp6 = (x1.fluidMask & _this1.fluidGroup) != 0;
					} else {
						tmp6 = false;
					}
				} else {
					tmp6 = false;
				}
				if(tmp6) {
					tmp5 = !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0);
				} else {
					tmp5 = false;
				}
				if(tmp5) {
					tmp1 = 0;
				} else {
					var tmp7;
					var _this2 = s1.filter;
					var x2 = s2.filter;
					if((_this2.collisionMask & x2.collisionGroup) != 0 && (x2.collisionMask & _this2.collisionGroup) != 0) {
						tmp7 = !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0);
					} else {
						tmp7 = false;
					}
					if(tmp7) {
						tmp1 = 1;
					} else {
						tmp1 = -1;
					}
				}
			}
		} else {
			tmp1 = -1;
		}
		tmp = tmp1 <= 0;
	} else {
		tmp = true;
	}
	if(tmp) {
		return in_arb;
	}
	var b11 = s1.body;
	var b21 = s2.body;
	if(stat || b11.bullet || b21.bullet) {
		var toi;
		if(ZPP_ToiEvent.zpp_pool == null) {
			toi = new ZPP_ToiEvent();
		} else {
			toi = ZPP_ToiEvent.zpp_pool;
			ZPP_ToiEvent.zpp_pool = toi.next;
			toi.next = null;
		}
		toi.failed = false;
		toi.s1 = toi.s2 = null;
		toi.arbiter = null;
		var kin = b11.type == 3 || b21.type == 3;
		if(stat && !kin) {
			if(s1.body.type != 2) {
				toi.s2 = s1;
				toi.s1 = s2;
			} else {
				toi.s1 = s1;
				toi.s2 = s2;
			}
			toi.kinematic = false;
			ZPP_SweepDistance.staticSweep(toi,this.pre_dt,0,Config.collisionSlopCCD);
		} else {
			toi.s1 = s1;
			toi.s2 = s2;
			toi.kinematic = kin;
			if(toi.s1.body.sweepFrozen || toi.s2.body.sweepFrozen) {
				if(toi.s1.body.sweepFrozen) {
					var tmp8 = toi.s1;
					toi.s1 = toi.s2;
					toi.s2 = tmp8;
					toi.frozen1 = false;
					toi.frozen2 = true;
				}
				ZPP_SweepDistance.staticSweep(toi,this.pre_dt,0,Config.collisionSlopCCD);
			} else {
				ZPP_SweepDistance.dynamicSweep(toi,this.pre_dt,0,Config.collisionSlopCCD);
			}
		}
		if(stat && toi.toi < 0 || toi.failed) {
			var o = toi;
			o.next = ZPP_ToiEvent.zpp_pool;
			ZPP_ToiEvent.zpp_pool = o;
		} else {
			this.toiEvents.add(toi);
			toi.frozen1 = toi.s1.body.sweepFrozen;
			toi.frozen2 = toi.s2.body.sweepFrozen;
			toi.arbiter = in_arb != null?in_arb.colarb:null;
		}
	}
	return in_arb;
};
ZPP_Space.prototype.bodyCbWake = function(b) {
	if(b.type == 2 && b.cbSet != null) {
		if(this.midstep) {
			var cx_ite = b.cbSet.bodylisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != 2) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = 2;
				cb.body = b;
				cx_ite = cx_ite.next;
			}
		} else {
			b.component.woken = true;
		}
	}
};
ZPP_Space.prototype.bodyCbSleep = function(b) {
	if(b.type == 2 && b.cbSet != null) {
		var cx_ite = b.cbSet.bodylisteners.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.event != 3) {
				cx_ite = cx_ite.next;
				continue;
			}
			var cb = this.push_callback(i);
			cb.event = 3;
			cb.body = b;
			cx_ite = cx_ite.next;
		}
	}
};
ZPP_Space.prototype.constraintCbWake = function(con) {
	if(con.cbSet != null) {
		if(this.midstep) {
			var cx_ite = con.cbSet.conlisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != 2) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = 2;
				cb.constraint = con;
				cx_ite = cx_ite.next;
			}
		} else {
			con.component.woken = true;
		}
	}
};
ZPP_Space.prototype.constraintCbSleep = function(con) {
	if(con.cbSet != null) {
		var cx_ite = con.cbSet.conlisteners.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.event != 3) {
				cx_ite = cx_ite.next;
				continue;
			}
			var cb = this.push_callback(i);
			cb.event = 3;
			cb.constraint = con;
			cx_ite = cx_ite.next;
		}
	}
};
ZPP_Space.prototype.constraintCbBreak = function(con) {
	if(con.cbSet != null) {
		var cx_ite = con.cbSet.conlisteners.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.event != 4) {
				cx_ite = cx_ite.next;
				continue;
			}
			var cb = this.push_callback(i);
			cb.event = 4;
			cb.constraint = con;
			cx_ite = cx_ite.next;
		}
	}
};
ZPP_Space.prototype.nullListenerType = function(cb1,cb2) {
	var stack = new ZNPList_ZPP_Interactor();
	var cx_ite = cb1.interactors.head;
	while(cx_ite != null) {
		stack.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
	if(cb1 != cb2) {
		var cx_ite1 = cb2.interactors.head;
		while(cx_ite1 != null) {
			stack.add(cx_ite1.elt);
			cx_ite1 = cx_ite1.next;
		}
	}
	while(stack.head != null) {
		var intx = stack.pop_unsafe();
		if(intx.icompound != null) {
			var comp = intx.icompound;
			var cx_ite2 = comp.bodies.head;
			while(cx_ite2 != null) {
				stack.add(cx_ite2.elt);
				cx_ite2 = cx_ite2.next;
			}
			var cx_ite3 = comp.compounds.head;
			while(cx_ite3 != null) {
				stack.add(cx_ite3.elt);
				cx_ite3 = cx_ite3.next;
			}
		} else {
			var xbody = intx.ibody != null?intx.ibody:intx.ishape.body;
			var xshp = intx.ishape != null?intx.ishape:null;
			var cx_ite4 = xbody.arbiters.head;
			while(cx_ite4 != null) {
				var xarb = cx_ite4.elt;
				if(xarb.present == 0) {
					cx_ite4 = cx_ite4.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite4 = cx_ite4.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite5 = this.mrca1.head;
				while(cx_ite5 != null) {
					var i1 = cx_ite5.elt;
					if(i1.cbSet != cb1 && i1.cbSet != cb2) {
						cx_ite5 = cx_ite5.next;
						continue;
					}
					var cx_ite6 = this.mrca2.head;
					while(cx_ite6 != null) {
						var i2 = cx_ite6.elt;
						if(i1.cbSet == cb1 && i2.cbSet != cb2 || i1.cbSet == cb2 && i2.cbSet != cb1) {
							cx_ite6 = cx_ite6.next;
							continue;
						}
						var callbackset = ZPP_Interactor.get(i1,i2);
						if(callbackset != null) {
							while(callbackset.arbiters.head != null) callbackset.arbiters.pop_unsafe().present--;
							this.remove_callbackset(callbackset);
						}
						cx_ite6 = cx_ite6.next;
					}
					cx_ite5 = cx_ite5.next;
				}
				cx_ite4 = cx_ite4.next;
			}
		}
	}
};
ZPP_Space.prototype.nullInteractorType = function(intx,me) {
	if(me == null) {
		me = intx;
	}
	if(intx.icompound != null) {
		var comp = intx.icompound;
		var cx_ite = comp.bodies.head;
		while(cx_ite != null) {
			this.nullInteractorType(cx_ite.elt,me);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = comp.compounds.head;
		while(cx_ite1 != null) {
			this.nullInteractorType(cx_ite1.elt,me);
			cx_ite1 = cx_ite1.next;
		}
	} else {
		var xbody = intx.ibody != null?intx.ibody:intx.ishape.body;
		var xshp = intx.ishape != null?intx.ishape:null;
		var cx_ite2 = xbody.arbiters.head;
		while(cx_ite2 != null) {
			var xarb = cx_ite2.elt;
			if(xarb.present == 0) {
				cx_ite2 = cx_ite2.next;
				continue;
			}
			if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
				cx_ite2 = cx_ite2.next;
				continue;
			}
			this.MRCA_chains(xarb.ws1,xarb.ws2);
			var cx_ite3 = this.mrca1.head;
			while(cx_ite3 != null) {
				var i1 = cx_ite3.elt;
				var cx_ite4 = this.mrca2.head;
				while(cx_ite4 != null) {
					var i2 = cx_ite4.elt;
					if(i1 != me && i2 != me) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					var callbackset = ZPP_Interactor.get(i1,i2);
					if(callbackset != null) {
						xarb.present--;
						callbackset.remove_arb(xarb);
						if(callbackset.arbiters.head == null) {
							this.remove_callbackset(callbackset);
						}
					}
					cx_ite4 = cx_ite4.next;
				}
				cx_ite3 = cx_ite3.next;
			}
			cx_ite2 = cx_ite2.next;
		}
	}
};
ZPP_Space.prototype.freshListenerType = function(cb1,cb2) {
	var stack = new ZNPList_ZPP_Interactor();
	var cx_ite = cb1.interactors.head;
	while(cx_ite != null) {
		stack.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
	if(cb1 != cb2) {
		var cx_ite1 = cb2.interactors.head;
		while(cx_ite1 != null) {
			stack.add(cx_ite1.elt);
			cx_ite1 = cx_ite1.next;
		}
	}
	while(stack.head != null) {
		var intx = stack.pop_unsafe();
		if(intx.icompound != null) {
			var comp = intx.icompound;
			var cx_ite2 = comp.bodies.head;
			while(cx_ite2 != null) {
				stack.add(cx_ite2.elt);
				cx_ite2 = cx_ite2.next;
			}
			var cx_ite3 = comp.compounds.head;
			while(cx_ite3 != null) {
				stack.add(cx_ite3.elt);
				cx_ite3 = cx_ite3.next;
			}
		} else {
			var xbody = intx.ibody != null?intx.ibody:intx.ishape.body;
			var xshp = intx.ishape != null?intx.ishape:null;
			var cx_ite4 = xbody.arbiters.head;
			while(cx_ite4 != null) {
				var xarb = cx_ite4.elt;
				if(!xarb.presentable) {
					cx_ite4 = cx_ite4.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite4 = cx_ite4.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite5 = this.mrca1.head;
				while(cx_ite5 != null) {
					var i1 = cx_ite5.elt;
					if(i1.cbSet != cb1 && i1.cbSet != cb2) {
						cx_ite5 = cx_ite5.next;
						continue;
					}
					var cx_ite6 = this.mrca2.head;
					while(cx_ite6 != null) {
						var i2 = cx_ite6.elt;
						if(i1.cbSet == cb1 && i2.cbSet != cb2 || i1.cbSet == cb2 && i2.cbSet != cb1) {
							cx_ite6 = cx_ite6.next;
							continue;
						}
						var callbackset = ZPP_Interactor.get(i1,i2);
						if(callbackset == null) {
							callbackset = ZPP_CallbackSet.get(i1,i2);
							this.add_callbackset(callbackset);
						}
						var tmp;
						var ret;
						ret = false;
						var cx_ite7 = callbackset.arbiters.head;
						while(cx_ite7 != null) {
							if(cx_ite7.elt == xarb) {
								ret = true;
								break;
							}
							cx_ite7 = cx_ite7.next;
						}
						if(!ret) {
							var _this = callbackset.arbiters;
							var ret1;
							if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
								ret1 = new ZNPNode_ZPP_Arbiter();
							} else {
								ret1 = ZNPNode_ZPP_Arbiter.zpp_pool;
								ZNPNode_ZPP_Arbiter.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.elt = xarb;
							var temp = ret1;
							temp.next = _this.head;
							_this.head = temp;
							_this.modified = true;
							_this.length++;
							tmp = true;
						} else {
							tmp = false;
						}
						if(tmp) {
							xarb.present++;
						}
						cx_ite6 = cx_ite6.next;
					}
					cx_ite5 = cx_ite5.next;
				}
				cx_ite4 = cx_ite4.next;
			}
		}
	}
};
ZPP_Space.prototype.freshInteractorType = function(intx,me) {
	if(me == null) {
		me = intx;
	}
	if(intx.icompound != null) {
		var comp = intx.icompound;
		var cx_ite = comp.bodies.head;
		while(cx_ite != null) {
			this.freshInteractorType(cx_ite.elt,me);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = comp.compounds.head;
		while(cx_ite1 != null) {
			this.freshInteractorType(cx_ite1.elt,me);
			cx_ite1 = cx_ite1.next;
		}
	} else {
		var xbody = intx.ibody != null?intx.ibody:intx.ishape.body;
		var xshp = intx.ishape != null?intx.ishape:null;
		var cx_ite2 = xbody.arbiters.head;
		while(cx_ite2 != null) {
			var xarb = cx_ite2.elt;
			if(!xarb.presentable) {
				cx_ite2 = cx_ite2.next;
				continue;
			}
			if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
				cx_ite2 = cx_ite2.next;
				continue;
			}
			this.MRCA_chains(xarb.ws1,xarb.ws2);
			var cx_ite3 = this.mrca1.head;
			while(cx_ite3 != null) {
				var i1 = cx_ite3.elt;
				var cx_ite4 = this.mrca2.head;
				while(cx_ite4 != null) {
					var i2 = cx_ite4.elt;
					if(i1 != me && i2 != me) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					var cb1 = i1.cbSet;
					var cb2 = i2.cbSet;
					cb1.validate();
					cb2.validate();
					var ret = null;
					var cx_ite5 = (cb1.cbpairs.length < cb2.cbpairs.length?cb1.cbpairs:cb2.cbpairs).head;
					while(cx_ite5 != null) {
						var p = cx_ite5.elt;
						if(p.a == cb1 && p.b == cb2 || p.a == cb2 && p.b == cb1) {
							ret = p;
							break;
						}
						cx_ite5 = cx_ite5.next;
					}
					if(ret == null) {
						var ret1;
						if(ZPP_CbSetPair.zpp_pool == null) {
							ret1 = new ZPP_CbSetPair();
						} else {
							ret1 = ZPP_CbSetPair.zpp_pool;
							ZPP_CbSetPair.zpp_pool = ret1.next;
							ret1.next = null;
						}
						ret1.zip_listeners = true;
						if(ZPP_CbSet.setlt(cb1,cb2)) {
							ret1.a = cb1;
							ret1.b = cb2;
						} else {
							ret1.a = cb2;
							ret1.b = cb1;
						}
						ret = ret1;
						cb1.cbpairs.add(ret);
						if(cb2 != cb1) {
							cb2.cbpairs.add(ret);
						}
					}
					if(ret.zip_listeners) {
						ret.zip_listeners = false;
						ret.__validate();
					}
					if(ret.listeners.head != null) {
						var callbackset = ZPP_Interactor.get(i1,i2);
						if(callbackset == null) {
							callbackset = ZPP_CallbackSet.get(i1,i2);
							this.add_callbackset(callbackset);
						}
						var tmp;
						var ret2;
						ret2 = false;
						var cx_ite6 = callbackset.arbiters.head;
						while(cx_ite6 != null) {
							if(cx_ite6.elt == xarb) {
								ret2 = true;
								break;
							}
							cx_ite6 = cx_ite6.next;
						}
						if(!ret2) {
							var _this = callbackset.arbiters;
							var ret3;
							if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
								ret3 = new ZNPNode_ZPP_Arbiter();
							} else {
								ret3 = ZNPNode_ZPP_Arbiter.zpp_pool;
								ZNPNode_ZPP_Arbiter.zpp_pool = ret3.next;
								ret3.next = null;
							}
							ret3.elt = xarb;
							var temp = ret3;
							temp.next = _this.head;
							_this.head = temp;
							_this.modified = true;
							_this.length++;
							tmp = true;
						} else {
							tmp = false;
						}
						if(tmp) {
							xarb.present++;
						}
					}
					cx_ite4 = cx_ite4.next;
				}
				cx_ite3 = cx_ite3.next;
			}
			cx_ite2 = cx_ite2.next;
		}
	}
};
ZPP_Space.prototype.wakeCompound = function(x) {
	var cx_ite = x.bodies.head;
	while(cx_ite != null) {
		var y = cx_ite.elt;
		if(!y.world) {
			y.component.waket = this.stamp + (this.midstep?0:1);
			if(y.type == 3) {
				y.kinematicDelaySleep = true;
			}
			if(y.component.sleeping) {
				this.really_wake(y,false);
			}
		}
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = x.constraints.head;
	while(cx_ite1 != null) {
		this.wake_constraint(cx_ite1.elt);
		cx_ite1 = cx_ite1.next;
	}
	var cx_ite2 = x.compounds.head;
	while(cx_ite2 != null) {
		this.wakeCompound(cx_ite2.elt);
		cx_ite2 = cx_ite2.next;
	}
};
ZPP_Space.prototype.wakeIsland = function(i) {
	while(i.comps.head != null) {
		var c = i.comps.pop_unsafe();
		c.waket = this.stamp + (this.midstep?0:1);
		if(c.isBody) {
			var b = c.body;
			this.live.add(b);
			var cx_ite = b.arbiters.head;
			while(cx_ite != null) {
				var arb = cx_ite.elt;
				if(arb.sleeping) {
					arb.sleeping = false;
					arb.up_stamp += this.stamp - arb.sleep_stamp;
					if(arb.type == ZPP_Arbiter.COL) {
						var carb = arb.colarb;
						if(carb.stat) {
							var _this = this.c_arbiters_true;
							var ret;
							if(ZNPNode_ZPP_ColArbiter.zpp_pool == null) {
								ret = new ZNPNode_ZPP_ColArbiter();
							} else {
								ret = ZNPNode_ZPP_ColArbiter.zpp_pool;
								ZNPNode_ZPP_ColArbiter.zpp_pool = ret.next;
								ret.next = null;
							}
							ret.elt = carb;
							var temp = ret;
							temp.next = _this.head;
							_this.head = temp;
							_this.modified = true;
							_this.length++;
						} else {
							var _this1 = this.c_arbiters_false;
							var ret1;
							if(ZNPNode_ZPP_ColArbiter.zpp_pool == null) {
								ret1 = new ZNPNode_ZPP_ColArbiter();
							} else {
								ret1 = ZNPNode_ZPP_ColArbiter.zpp_pool;
								ZNPNode_ZPP_ColArbiter.zpp_pool = ret1.next;
								ret1.next = null;
							}
							ret1.elt = carb;
							var temp1 = ret1;
							temp1.next = _this1.head;
							_this1.head = temp1;
							_this1.modified = true;
							_this1.length++;
						}
					} else if(arb.type == ZPP_Arbiter.FLUID) {
						var _this2 = this.f_arbiters;
						var o = arb.fluidarb;
						var ret2;
						if(ZNPNode_ZPP_FluidArbiter.zpp_pool == null) {
							ret2 = new ZNPNode_ZPP_FluidArbiter();
						} else {
							ret2 = ZNPNode_ZPP_FluidArbiter.zpp_pool;
							ZNPNode_ZPP_FluidArbiter.zpp_pool = ret2.next;
							ret2.next = null;
						}
						ret2.elt = o;
						var temp2 = ret2;
						temp2.next = _this2.head;
						_this2.head = temp2;
						_this2.modified = true;
						_this2.length++;
					} else {
						var _this3 = this.s_arbiters;
						var o1 = arb.sensorarb;
						var ret3;
						if(ZNPNode_ZPP_SensorArbiter.zpp_pool == null) {
							ret3 = new ZNPNode_ZPP_SensorArbiter();
						} else {
							ret3 = ZNPNode_ZPP_SensorArbiter.zpp_pool;
							ZNPNode_ZPP_SensorArbiter.zpp_pool = ret3.next;
							ret3.next = null;
						}
						ret3.elt = o1;
						var temp3 = ret3;
						temp3.next = _this3.head;
						_this3.head = temp3;
						_this3.modified = true;
						_this3.length++;
					}
				}
				cx_ite = cx_ite.next;
			}
			this.bodyCbWake(b);
			c.sleeping = false;
			c.island = null;
			c.parent = c;
			c.rank = 0;
			if(b.type != 1) {
				var cx_ite1 = b.shapes.head;
				while(cx_ite1 != null) {
					var shape = cx_ite1.elt;
					if(shape.node != null) {
						this.bphase.sync(shape);
					}
					cx_ite1 = cx_ite1.next;
				}
			}
		} else {
			var con = c.constraint;
			var _this4 = this.live_constraints;
			var ret4;
			if(ZNPNode_ZPP_Constraint.zpp_pool == null) {
				ret4 = new ZNPNode_ZPP_Constraint();
			} else {
				ret4 = ZNPNode_ZPP_Constraint.zpp_pool;
				ZNPNode_ZPP_Constraint.zpp_pool = ret4.next;
				ret4.next = null;
			}
			ret4.elt = con;
			var temp4 = ret4;
			temp4.next = _this4.head;
			_this4.head = temp4;
			_this4.modified = true;
			_this4.length++;
			this.constraintCbWake(con);
			c.sleeping = false;
			c.island = null;
			c.parent = c;
			c.rank = 0;
		}
	}
	i.next = ZPP_Island.zpp_pool;
	ZPP_Island.zpp_pool = i;
};
ZPP_Space.prototype.non_inlined_wake = function(o,fst) {
	if(fst == null) {
		fst = false;
	}
	if(!o.world) {
		o.component.waket = this.stamp + (this.midstep?0:1);
		if(o.type == 3) {
			o.kinematicDelaySleep = true;
		}
		if(o.component.sleeping) {
			this.really_wake(o,fst);
		}
	}
};
ZPP_Space.prototype.really_wake = function(o,fst) {
	if(fst == null) {
		fst = false;
	}
	if(o.component.island == null) {
		o.component.sleeping = false;
		if(o.type == 3 || o.type == 1) {
			var _this = this.staticsleep;
			var ret;
			if(ZNPNode_ZPP_Body.zpp_pool == null) {
				ret = new ZNPNode_ZPP_Body();
			} else {
				ret = ZNPNode_ZPP_Body.zpp_pool;
				ZNPNode_ZPP_Body.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.elt = o;
			var temp = ret;
			temp.next = _this.head;
			_this.head = temp;
			_this.modified = true;
			_this.length++;
		} else {
			var _this1 = this.live;
			var ret1;
			if(ZNPNode_ZPP_Body.zpp_pool == null) {
				ret1 = new ZNPNode_ZPP_Body();
			} else {
				ret1 = ZNPNode_ZPP_Body.zpp_pool;
				ZNPNode_ZPP_Body.zpp_pool = ret1.next;
				ret1.next = null;
			}
			ret1.elt = o;
			var temp1 = ret1;
			temp1.next = _this1.head;
			_this1.head = temp1;
			_this1.modified = true;
			_this1.length++;
		}
		var cx_ite = o.constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.space == this) {
				this.wake_constraint(con);
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = o.arbiters.head;
		while(cx_ite1 != null) {
			var arb = cx_ite1.elt;
			if(arb.sleeping) {
				arb.sleeping = false;
				arb.up_stamp += this.stamp + (this.midstep?0:1) - arb.sleep_stamp;
				if(arb.type == ZPP_Arbiter.COL) {
					var carb = arb.colarb;
					if(carb.stat) {
						var _this2 = this.c_arbiters_true;
						var ret2;
						if(ZNPNode_ZPP_ColArbiter.zpp_pool == null) {
							ret2 = new ZNPNode_ZPP_ColArbiter();
						} else {
							ret2 = ZNPNode_ZPP_ColArbiter.zpp_pool;
							ZNPNode_ZPP_ColArbiter.zpp_pool = ret2.next;
							ret2.next = null;
						}
						ret2.elt = carb;
						var temp2 = ret2;
						temp2.next = _this2.head;
						_this2.head = temp2;
						_this2.modified = true;
						_this2.length++;
					} else {
						var _this3 = this.c_arbiters_false;
						var ret3;
						if(ZNPNode_ZPP_ColArbiter.zpp_pool == null) {
							ret3 = new ZNPNode_ZPP_ColArbiter();
						} else {
							ret3 = ZNPNode_ZPP_ColArbiter.zpp_pool;
							ZNPNode_ZPP_ColArbiter.zpp_pool = ret3.next;
							ret3.next = null;
						}
						ret3.elt = carb;
						var temp3 = ret3;
						temp3.next = _this3.head;
						_this3.head = temp3;
						_this3.modified = true;
						_this3.length++;
					}
				} else if(arb.type == ZPP_Arbiter.FLUID) {
					var _this4 = this.f_arbiters;
					var o1 = arb.fluidarb;
					var ret4;
					if(ZNPNode_ZPP_FluidArbiter.zpp_pool == null) {
						ret4 = new ZNPNode_ZPP_FluidArbiter();
					} else {
						ret4 = ZNPNode_ZPP_FluidArbiter.zpp_pool;
						ZNPNode_ZPP_FluidArbiter.zpp_pool = ret4.next;
						ret4.next = null;
					}
					ret4.elt = o1;
					var temp4 = ret4;
					temp4.next = _this4.head;
					_this4.head = temp4;
					_this4.modified = true;
					_this4.length++;
				} else {
					var _this5 = this.s_arbiters;
					var o2 = arb.sensorarb;
					var ret5;
					if(ZNPNode_ZPP_SensorArbiter.zpp_pool == null) {
						ret5 = new ZNPNode_ZPP_SensorArbiter();
					} else {
						ret5 = ZNPNode_ZPP_SensorArbiter.zpp_pool;
						ZNPNode_ZPP_SensorArbiter.zpp_pool = ret5.next;
						ret5.next = null;
					}
					ret5.elt = o2;
					var temp5 = ret5;
					temp5.next = _this5.head;
					_this5.head = temp5;
					_this5.modified = true;
					_this5.length++;
				}
			}
			if(arb.type != ZPP_Arbiter.SENSOR && !arb.cleared && arb.up_stamp >= this.stamp && (arb.immState & 1) != 0) {
				if(arb.b1.type == 2 && arb.b1.component.sleeping) {
					var o3 = arb.b1;
					if(!o3.world) {
						o3.component.waket = this.stamp + (this.midstep?0:1);
						if(o3.type == 3) {
							o3.kinematicDelaySleep = true;
						}
						if(o3.component.sleeping) {
							this.really_wake(o3,false);
						}
					}
				}
				if(arb.b2.type == 2 && arb.b2.component.sleeping) {
					var o4 = arb.b2;
					if(!o4.world) {
						o4.component.waket = this.stamp + (this.midstep?0:1);
						if(o4.type == 3) {
							o4.kinematicDelaySleep = true;
						}
						if(o4.component.sleeping) {
							this.really_wake(o4,false);
						}
					}
				}
			}
			cx_ite1 = cx_ite1.next;
		}
		if(!fst && o.type == 2) {
			this.bodyCbWake(o);
		}
		if(!fst && !this.bphase.is_sweep && o.type != 1) {
			var cx_ite2 = o.shapes.head;
			while(cx_ite2 != null) {
				var shape = cx_ite2.elt;
				if(shape.node != null) {
					this.bphase.sync(shape);
				}
				cx_ite2 = cx_ite2.next;
			}
		}
	} else {
		this.wakeIsland(o.component.island);
	}
};
ZPP_Space.prototype.wake_constraint = function(con,fst) {
	if(fst == null) {
		fst = false;
	}
	if(con.active) {
		con.component.waket = this.stamp + (this.midstep?0:1);
		if(con.component.sleeping) {
			if(con.component.island == null) {
				con.component.sleeping = false;
				var _this = this.live_constraints;
				var ret;
				if(ZNPNode_ZPP_Constraint.zpp_pool == null) {
					ret = new ZNPNode_ZPP_Constraint();
				} else {
					ret = ZNPNode_ZPP_Constraint.zpp_pool;
					ZNPNode_ZPP_Constraint.zpp_pool = ret.next;
					ret.next = null;
				}
				ret.elt = con;
				var temp = ret;
				temp.next = _this.head;
				_this.head = temp;
				_this.modified = true;
				_this.length++;
				con.wake_connected();
				if(!fst) {
					this.constraintCbWake(con);
				}
			} else {
				this.wakeIsland(con.component.island);
			}
			return true;
		} else {
			return false;
		}
	} else {
		return false;
	}
};
ZPP_Space.prototype.doForests = function(dt) {
	var cx_ite = this.c_arbiters_false.head;
	while(cx_ite != null) {
		var arb = cx_ite.elt;
		if(!arb.cleared && arb.up_stamp == this.stamp && (arb.immState & 1) != 0) {
			if(arb.b1.type == 2 && arb.b2.type == 2) {
				var xr;
				if(arb.b1.component == arb.b1.component.parent) {
					xr = arb.b1.component;
				} else {
					var obj = arb.b1.component;
					var stack = null;
					while(obj != obj.parent) {
						var nxt = obj.parent;
						obj.parent = stack;
						stack = obj;
						obj = nxt;
					}
					while(stack != null) {
						var nxt1 = stack.parent;
						stack.parent = obj;
						stack = nxt1;
					}
					xr = obj;
				}
				var yr;
				if(arb.b2.component == arb.b2.component.parent) {
					yr = arb.b2.component;
				} else {
					var obj1 = arb.b2.component;
					var stack1 = null;
					while(obj1 != obj1.parent) {
						var nxt2 = obj1.parent;
						obj1.parent = stack1;
						stack1 = obj1;
						obj1 = nxt2;
					}
					while(stack1 != null) {
						var nxt3 = stack1.parent;
						stack1.parent = obj1;
						stack1 = nxt3;
					}
					yr = obj1;
				}
				if(xr != yr) {
					if(xr.rank < yr.rank) {
						xr.parent = yr;
					} else if(xr.rank > yr.rank) {
						yr.parent = xr;
					} else {
						yr.parent = xr;
						xr.rank++;
					}
				}
			}
		}
		cx_ite = cx_ite.next;
	}
	var cx_ite1 = this.f_arbiters.head;
	while(cx_ite1 != null) {
		var arb1 = cx_ite1.elt;
		if(!arb1.cleared && arb1.up_stamp == this.stamp && (arb1.immState & 1) != 0) {
			if(arb1.b1.type == 2 && arb1.b2.type == 2) {
				var xr1;
				if(arb1.b1.component == arb1.b1.component.parent) {
					xr1 = arb1.b1.component;
				} else {
					var obj2 = arb1.b1.component;
					var stack2 = null;
					while(obj2 != obj2.parent) {
						var nxt4 = obj2.parent;
						obj2.parent = stack2;
						stack2 = obj2;
						obj2 = nxt4;
					}
					while(stack2 != null) {
						var nxt5 = stack2.parent;
						stack2.parent = obj2;
						stack2 = nxt5;
					}
					xr1 = obj2;
				}
				var yr1;
				if(arb1.b2.component == arb1.b2.component.parent) {
					yr1 = arb1.b2.component;
				} else {
					var obj3 = arb1.b2.component;
					var stack3 = null;
					while(obj3 != obj3.parent) {
						var nxt6 = obj3.parent;
						obj3.parent = stack3;
						stack3 = obj3;
						obj3 = nxt6;
					}
					while(stack3 != null) {
						var nxt7 = stack3.parent;
						stack3.parent = obj3;
						stack3 = nxt7;
					}
					yr1 = obj3;
				}
				if(xr1 != yr1) {
					if(xr1.rank < yr1.rank) {
						xr1.parent = yr1;
					} else if(xr1.rank > yr1.rank) {
						yr1.parent = xr1;
					} else {
						yr1.parent = xr1;
						xr1.rank++;
					}
				}
			}
		}
		cx_ite1 = cx_ite1.next;
	}
	var cx_ite2 = this.live_constraints.head;
	while(cx_ite2 != null) {
		cx_ite2.elt.forest();
		cx_ite2 = cx_ite2.next;
	}
	while(this.live.head != null) {
		var _this = this.live;
		var ret = _this.head.elt;
		_this.pop();
		var oc = ret.component;
		var root;
		if(oc == oc.parent) {
			root = oc;
		} else {
			var obj4 = oc;
			var stack4 = null;
			while(obj4 != obj4.parent) {
				var nxt8 = obj4.parent;
				obj4.parent = stack4;
				stack4 = obj4;
				obj4 = nxt8;
			}
			while(stack4 != null) {
				var nxt9 = stack4.parent;
				stack4.parent = obj4;
				stack4 = nxt9;
			}
			root = obj4;
		}
		if(root.island == null) {
			if(ZPP_Island.zpp_pool == null) {
				root.island = new ZPP_Island();
			} else {
				root.island = ZPP_Island.zpp_pool;
				ZPP_Island.zpp_pool = root.island.next;
				root.island.next = null;
			}
			root.island.waket = 0;
			var _this1 = this.islands;
			var o = root.island;
			o._inuse = true;
			o.next = _this1.next;
			_this1.next = o;
			_this1.modified = true;
			_this1.length++;
			root.island.sleep = true;
		}
		oc.island = root.island;
		var _this2 = oc.island.comps;
		var ret1;
		if(ZNPNode_ZPP_Component.zpp_pool == null) {
			ret1 = new ZNPNode_ZPP_Component();
		} else {
			ret1 = ZNPNode_ZPP_Component.zpp_pool;
			ZNPNode_ZPP_Component.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.elt = oc;
		var temp = ret1;
		temp.next = _this2.head;
		_this2.head = temp;
		_this2.modified = true;
		_this2.length++;
		var rest = ret.atRest(dt);
		oc.island.sleep = oc.island.sleep && rest;
		if(oc.waket > oc.island.waket) {
			oc.island.waket = oc.waket;
		}
	}
	while(this.live_constraints.head != null) {
		var _this3 = this.live_constraints;
		var ret2 = _this3.head.elt;
		_this3.pop();
		var oc1 = ret2.component;
		var root1;
		if(oc1 == oc1.parent) {
			root1 = oc1;
		} else {
			var obj5 = oc1;
			var stack5 = null;
			while(obj5 != obj5.parent) {
				var nxt10 = obj5.parent;
				obj5.parent = stack5;
				stack5 = obj5;
				obj5 = nxt10;
			}
			while(stack5 != null) {
				var nxt11 = stack5.parent;
				stack5.parent = obj5;
				stack5 = nxt11;
			}
			root1 = obj5;
		}
		oc1.island = root1.island;
		var _this4 = oc1.island.comps;
		var ret3;
		if(ZNPNode_ZPP_Component.zpp_pool == null) {
			ret3 = new ZNPNode_ZPP_Component();
		} else {
			ret3 = ZNPNode_ZPP_Component.zpp_pool;
			ZNPNode_ZPP_Component.zpp_pool = ret3.next;
			ret3.next = null;
		}
		ret3.elt = oc1;
		var temp1 = ret3;
		temp1.next = _this4.head;
		_this4.head = temp1;
		_this4.modified = true;
		_this4.length++;
		if(oc1.waket > oc1.island.waket) {
			oc1.island.waket = oc1.waket;
		}
	}
	while(this.islands.next != null) {
		var _this5 = this.islands;
		var ret4 = _this5.next;
		_this5.pop();
		if(ret4.sleep) {
			var cx_ite3 = ret4.comps.head;
			while(cx_ite3 != null) {
				var c = cx_ite3.elt;
				if(c.isBody) {
					var b = c.body;
					b.velx = 0;
					b.vely = 0;
					b.angvel = 0;
					c.sleeping = true;
					var cx_ite4 = b.shapes.head;
					while(cx_ite4 != null) {
						this.bphase.sync(cx_ite4.elt);
						cx_ite4 = cx_ite4.next;
					}
					this.bodyCbSleep(b);
				} else {
					this.constraintCbSleep(c.constraint);
					c.sleeping = true;
				}
				cx_ite3 = cx_ite3.next;
			}
		} else {
			while(ret4.comps.head != null) {
				var _this6 = ret4.comps;
				var ret5 = _this6.head.elt;
				_this6.pop();
				ret5.waket = ret4.waket;
				if(ret5.isBody) {
					var _this7 = this.live;
					var o1 = ret5.body;
					var ret6;
					if(ZNPNode_ZPP_Body.zpp_pool == null) {
						ret6 = new ZNPNode_ZPP_Body();
					} else {
						ret6 = ZNPNode_ZPP_Body.zpp_pool;
						ZNPNode_ZPP_Body.zpp_pool = ret6.next;
						ret6.next = null;
					}
					ret6.elt = o1;
					var temp2 = ret6;
					temp2.next = _this7.head;
					_this7.head = temp2;
					_this7.modified = true;
					_this7.length++;
				} else {
					var _this8 = this.live_constraints;
					var o2 = ret5.constraint;
					var ret7;
					if(ZNPNode_ZPP_Constraint.zpp_pool == null) {
						ret7 = new ZNPNode_ZPP_Constraint();
					} else {
						ret7 = ZNPNode_ZPP_Constraint.zpp_pool;
						ZNPNode_ZPP_Constraint.zpp_pool = ret7.next;
						ret7.next = null;
					}
					ret7.elt = o2;
					var temp3 = ret7;
					temp3.next = _this8.head;
					_this8.head = temp3;
					_this8.modified = true;
					_this8.length++;
				}
				ret5.sleeping = false;
				ret5.island = null;
				ret5.parent = ret5;
				ret5.rank = 0;
			}
			ret4.next = ZPP_Island.zpp_pool;
			ZPP_Island.zpp_pool = ret4;
		}
	}
};
ZPP_Space.prototype.sleepArbiters = function() {
	var pre = null;
	var arbs = this.c_arbiters_true;
	var arbite = arbs.head;
	var fst = this.c_arbiters_false != null;
	if(fst && arbite == null) {
		fst = false;
		arbite = this.c_arbiters_false.head;
		arbs = this.c_arbiters_false;
		pre = null;
	}
	while(arbite != null) {
		var arb = arbite.elt;
		if(arb.b1.component.sleeping && arb.b2.component.sleeping) {
			arb.sleep_stamp = this.stamp;
			arb.sleeping = true;
			var old;
			var ret;
			if(pre == null) {
				old = arbs.head;
				ret = old.next;
				arbs.head = ret;
				if(arbs.head == null) {
					arbs.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					arbs.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_ColArbiter.zpp_pool;
			ZNPNode_ZPP_ColArbiter.zpp_pool = o;
			arbs.modified = true;
			arbs.length--;
			arbs.pushmod = true;
			arbite = ret;
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.head;
				arbs = this.c_arbiters_false;
				pre = null;
			}
			continue;
		}
		pre = arbite;
		arbite = arbite.next;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.head;
			arbs = this.c_arbiters_false;
			pre = null;
		}
	}
	var pre1 = null;
	var arbs1 = this.f_arbiters;
	var arbite1 = arbs1.head;
	while(arbite1 != null) {
		var arb1 = arbite1.elt;
		if(arb1.b1.component.sleeping && arb1.b2.component.sleeping) {
			arb1.sleep_stamp = this.stamp;
			arb1.sleeping = true;
			var old1;
			var ret1;
			if(pre1 == null) {
				old1 = arbs1.head;
				ret1 = old1.next;
				arbs1.head = ret1;
				if(arbs1.head == null) {
					arbs1.pushmod = true;
				}
			} else {
				old1 = pre1.next;
				ret1 = old1.next;
				pre1.next = ret1;
				if(ret1 == null) {
					arbs1.pushmod = true;
				}
			}
			var o1 = old1;
			o1.elt = null;
			o1.next = ZNPNode_ZPP_FluidArbiter.zpp_pool;
			ZNPNode_ZPP_FluidArbiter.zpp_pool = o1;
			arbs1.modified = true;
			arbs1.length--;
			arbs1.pushmod = true;
			arbite1 = ret1;
			continue;
		}
		pre1 = arbite1;
		arbite1 = arbite1.next;
	}
	var pre2 = null;
	var arbs2 = this.s_arbiters;
	var arbite2 = arbs2.head;
	while(arbite2 != null) {
		var arb2 = arbite2.elt;
		if(arb2.b1.component.sleeping && arb2.b2.component.sleeping) {
			arb2.sleep_stamp = this.stamp;
			arb2.sleeping = true;
			var old2;
			var ret2;
			if(pre2 == null) {
				old2 = arbs2.head;
				ret2 = old2.next;
				arbs2.head = ret2;
				if(arbs2.head == null) {
					arbs2.pushmod = true;
				}
			} else {
				old2 = pre2.next;
				ret2 = old2.next;
				pre2.next = ret2;
				if(ret2 == null) {
					arbs2.pushmod = true;
				}
			}
			var o2 = old2;
			o2.elt = null;
			o2.next = ZNPNode_ZPP_SensorArbiter.zpp_pool;
			ZNPNode_ZPP_SensorArbiter.zpp_pool = o2;
			arbs2.modified = true;
			arbs2.length--;
			arbs2.pushmod = true;
			arbite2 = ret2;
			continue;
		}
		pre2 = arbite2;
		arbite2 = arbite2.next;
	}
};
ZPP_Space.prototype.static_validation = function(body) {
	if(body.shapes.head != null) {
		if(body.shapes.head == null) {
			throw new js._Boot.HaxeError("Error: Body bounds only makes sense if it contains shapes");
		}
		if(body.zip_aabb) {
			body.zip_aabb = false;
			body.aabb.minx = Infinity;
			body.aabb.miny = Infinity;
			body.aabb.maxx = -Infinity;
			body.aabb.maxy = -Infinity;
			var cx_ite = body.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.zip_aabb) {
					if(s.body != null) {
						s.zip_aabb = false;
						if(s.type == 0) {
							var _this = s.circle;
							if(_this.zip_worldCOM) {
								if(_this.body != null) {
									_this.zip_worldCOM = false;
									if(_this.zip_localCOM) {
										_this.zip_localCOM = false;
										if(_this.type == 1) {
											var _this1 = _this.polygon;
											if(_this1.lverts.next == null) {
												throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
											}
											if(_this1.lverts.next.next == null) {
												_this1.localCOMx = _this1.lverts.next.x;
												_this1.localCOMy = _this1.lverts.next.y;
											} else if(_this1.lverts.next.next.next == null) {
												_this1.localCOMx = _this1.lverts.next.x;
												_this1.localCOMy = _this1.lverts.next.y;
												_this1.localCOMx += _this1.lverts.next.next.x;
												_this1.localCOMy += _this1.lverts.next.next.y;
												_this1.localCOMx *= 0.5;
												_this1.localCOMy *= 0.5;
											} else {
												_this1.localCOMx = 0;
												_this1.localCOMy = 0;
												var area = 0.0;
												var cx_ite1 = _this1.lverts.next;
												var u = cx_ite1;
												cx_ite1 = cx_ite1.next;
												var v = cx_ite1;
												cx_ite1 = cx_ite1.next;
												while(cx_ite1 != null) {
													var w = cx_ite1;
													area += v.x * (w.y - u.y);
													var cf = w.y * v.x - w.x * v.y;
													_this1.localCOMx += (v.x + w.x) * cf;
													_this1.localCOMy += (v.y + w.y) * cf;
													u = v;
													v = w;
													cx_ite1 = cx_ite1.next;
												}
												cx_ite1 = _this1.lverts.next;
												var w1 = cx_ite1;
												area += v.x * (w1.y - u.y);
												var cf1 = w1.y * v.x - w1.x * v.y;
												_this1.localCOMx += (v.x + w1.x) * cf1;
												_this1.localCOMy += (v.y + w1.y) * cf1;
												u = v;
												cx_ite1 = cx_ite1.next;
												var w2 = cx_ite1;
												area += w1.x * (w2.y - u.y);
												var cf2 = w2.y * w1.x - w2.x * w1.y;
												_this1.localCOMx += (w1.x + w2.x) * cf2;
												_this1.localCOMy += (w1.y + w2.y) * cf2;
												area = 1 / (3 * area);
												var t = area;
												_this1.localCOMx *= t;
												_this1.localCOMy *= t;
											}
										}
										if(_this.wrap_localCOM != null) {
											_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
											_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
										}
									}
									var _this2 = _this.body;
									if(_this2.zip_axis) {
										_this2.zip_axis = false;
										_this2.axisx = Math.sin(_this2.rot);
										_this2.axisy = Math.cos(_this2.rot);
									}
									_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
									_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
								}
							}
							var rx = _this.radius;
							var ry = _this.radius;
							_this.aabb.minx = _this.worldCOMx - rx;
							_this.aabb.miny = _this.worldCOMy - ry;
							_this.aabb.maxx = _this.worldCOMx + rx;
							_this.aabb.maxy = _this.worldCOMy + ry;
						} else {
							var _this3 = s.polygon;
							if(_this3.zip_gverts) {
								if(_this3.body != null) {
									_this3.zip_gverts = false;
									_this3.validate_lverts();
									var _this4 = _this3.body;
									if(_this4.zip_axis) {
										_this4.zip_axis = false;
										_this4.axisx = Math.sin(_this4.rot);
										_this4.axisy = Math.cos(_this4.rot);
									}
									var li = _this3.lverts.next;
									var cx_ite2 = _this3.gverts.next;
									while(cx_ite2 != null) {
										var g = cx_ite2;
										var l = li;
										li = li.next;
										g.x = _this3.body.posx + (_this3.body.axisy * l.x - _this3.body.axisx * l.y);
										g.y = _this3.body.posy + (l.x * _this3.body.axisx + l.y * _this3.body.axisy);
										cx_ite2 = cx_ite2.next;
									}
								}
							}
							if(_this3.lverts.next == null) {
								throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful bounds");
							}
							var p0 = _this3.gverts.next;
							_this3.aabb.minx = p0.x;
							_this3.aabb.miny = p0.y;
							_this3.aabb.maxx = p0.x;
							_this3.aabb.maxy = p0.y;
							var cx_ite3 = _this3.gverts.next.next;
							while(cx_ite3 != null) {
								var p = cx_ite3;
								if(p.x < _this3.aabb.minx) {
									_this3.aabb.minx = p.x;
								}
								if(p.x > _this3.aabb.maxx) {
									_this3.aabb.maxx = p.x;
								}
								if(p.y < _this3.aabb.miny) {
									_this3.aabb.miny = p.y;
								}
								if(p.y > _this3.aabb.maxy) {
									_this3.aabb.maxy = p.y;
								}
								cx_ite3 = cx_ite3.next;
							}
						}
					}
				}
				var _this5 = body.aabb;
				var x = s.aabb;
				if(x.minx < _this5.minx) {
					_this5.minx = x.minx;
				}
				if(x.maxx > _this5.maxx) {
					_this5.maxx = x.maxx;
				}
				if(x.miny < _this5.miny) {
					_this5.miny = x.miny;
				}
				if(x.maxy > _this5.maxy) {
					_this5.maxy = x.maxy;
				}
				cx_ite = cx_ite.next;
			}
		}
	}
	body.validate_mass();
	body.validate_inertia();
	if(body.velx != 0 || body.vely != 0 || body.angvel != 0) {
		throw new js._Boot.HaxeError("Error: Static body cannot have any real velocity, only kinematic or surface velocities");
	}
	var cx_ite4 = body.shapes.head;
	while(cx_ite4 != null) {
		var s1 = cx_ite4.elt;
		if(s1.type == 1) {
			var _this6 = s1.polygon;
			if(_this6.zip_sanitation) {
				_this6.zip_sanitation = false;
				_this6.splice_collinear_real();
			}
			var res = s1.polygon.valid();
			if(ZPP_Flags.ValidationResult_VALID == null) {
				ZPP_Flags.internal = true;
				ZPP_Flags.ValidationResult_VALID = new ValidationResult();
				ZPP_Flags.internal = false;
			}
			if(res != ZPP_Flags.ValidationResult_VALID) {
				throw new js._Boot.HaxeError("Error: Cannot simulate with an invalid Polygon : " + s1.polygon.outer.toString() + " is invalid : " + res.toString());
			}
			var _this7 = s1.polygon;
			if(_this7.zip_gaxi) {
				if(_this7.body != null) {
					_this7.zip_gaxi = false;
					_this7.validate_laxi();
					var _this8 = _this7.body;
					if(_this8.zip_axis) {
						_this8.zip_axis = false;
						_this8.axisx = Math.sin(_this8.rot);
						_this8.axisy = Math.cos(_this8.rot);
					}
					if(_this7.zip_gverts) {
						if(_this7.body != null) {
							_this7.zip_gverts = false;
							_this7.validate_lverts();
							var _this9 = _this7.body;
							if(_this9.zip_axis) {
								_this9.zip_axis = false;
								_this9.axisx = Math.sin(_this9.rot);
								_this9.axisy = Math.cos(_this9.rot);
							}
							var li1 = _this7.lverts.next;
							var cx_ite5 = _this7.gverts.next;
							while(cx_ite5 != null) {
								var g1 = cx_ite5;
								var l1 = li1;
								li1 = li1.next;
								g1.x = _this7.body.posx + (_this7.body.axisy * l1.x - _this7.body.axisx * l1.y);
								g1.y = _this7.body.posy + (l1.x * _this7.body.axisx + l1.y * _this7.body.axisy);
								cx_ite5 = cx_ite5.next;
							}
						}
					}
					var ite = _this7.edges.head;
					var cx_ite6 = _this7.gverts.next;
					var u1 = cx_ite6;
					cx_ite6 = cx_ite6.next;
					while(cx_ite6 != null) {
						var v1 = cx_ite6;
						var e = ite.elt;
						ite = ite.next;
						e.gp0 = u1;
						e.gp1 = v1;
						e.gnormx = _this7.body.axisy * e.lnormx - _this7.body.axisx * e.lnormy;
						e.gnormy = e.lnormx * _this7.body.axisx + e.lnormy * _this7.body.axisy;
						e.gprojection = _this7.body.posx * e.gnormx + _this7.body.posy * e.gnormy + e.lprojection;
						if(e.wrap_gnorm != null) {
							e.wrap_gnorm.zpp_inner.x = e.gnormx;
							e.wrap_gnorm.zpp_inner.y = e.gnormy;
						}
						e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
						e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
						u1 = v1;
						cx_ite6 = cx_ite6.next;
					}
					var e1 = ite.elt;
					e1.gp0 = u1;
					e1.gp1 = _this7.gverts.next;
					e1.gnormx = _this7.body.axisy * e1.lnormx - _this7.body.axisx * e1.lnormy;
					e1.gnormy = e1.lnormx * _this7.body.axisx + e1.lnormy * _this7.body.axisy;
					e1.gprojection = _this7.body.posx * e1.gnormx + _this7.body.posy * e1.gnormy + e1.lprojection;
					if(e1.wrap_gnorm != null) {
						e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
						e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
					}
					e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
					e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
				}
			}
		}
		cx_ite4 = cx_ite4.next;
	}
	body.sweepFrozen = true;
};
ZPP_Space.prototype.validation = function() {
	var _this = this.cbsets;
	if(!_this.cbsets.empty()) {
		var set_ite = _this.cbsets.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			set_ite.data.validate();
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	var cx_ite = this.live.head;
	while(cx_ite != null) {
		var cur = cx_ite.elt;
		cur.sweepRadius = 0;
		var cx_ite1 = cur.shapes.head;
		while(cx_ite1 != null) {
			var s = cx_ite1.elt;
			if(s.type == 1) {
				var _this1 = s.polygon;
				if(_this1.zip_sanitation) {
					_this1.zip_sanitation = false;
					_this1.splice_collinear_real();
				}
				var res = s.polygon.valid();
				if(ZPP_Flags.ValidationResult_VALID == null) {
					ZPP_Flags.internal = true;
					ZPP_Flags.ValidationResult_VALID = new ValidationResult();
					ZPP_Flags.internal = false;
				}
				if(res != ZPP_Flags.ValidationResult_VALID) {
					throw new js._Boot.HaxeError("Error: Cannot simulate with an invalid Polygon : " + s.polygon.outer.toString() + " is invalid : " + res.toString());
				}
				var _this2 = s.polygon;
				if(_this2.zip_gaxi) {
					if(_this2.body != null) {
						_this2.zip_gaxi = false;
						_this2.validate_laxi();
						var _this3 = _this2.body;
						if(_this3.zip_axis) {
							_this3.zip_axis = false;
							_this3.axisx = Math.sin(_this3.rot);
							_this3.axisy = Math.cos(_this3.rot);
						}
						if(_this2.zip_gverts) {
							if(_this2.body != null) {
								_this2.zip_gverts = false;
								_this2.validate_lverts();
								var _this4 = _this2.body;
								if(_this4.zip_axis) {
									_this4.zip_axis = false;
									_this4.axisx = Math.sin(_this4.rot);
									_this4.axisy = Math.cos(_this4.rot);
								}
								var li = _this2.lverts.next;
								var cx_ite2 = _this2.gverts.next;
								while(cx_ite2 != null) {
									var g = cx_ite2;
									var l = li;
									li = li.next;
									g.x = _this2.body.posx + (_this2.body.axisy * l.x - _this2.body.axisx * l.y);
									g.y = _this2.body.posy + (l.x * _this2.body.axisx + l.y * _this2.body.axisy);
									cx_ite2 = cx_ite2.next;
								}
							}
						}
						var ite = _this2.edges.head;
						var cx_ite3 = _this2.gverts.next;
						var u = cx_ite3;
						cx_ite3 = cx_ite3.next;
						while(cx_ite3 != null) {
							var v = cx_ite3;
							var e = ite.elt;
							ite = ite.next;
							e.gp0 = u;
							e.gp1 = v;
							e.gnormx = _this2.body.axisy * e.lnormx - _this2.body.axisx * e.lnormy;
							e.gnormy = e.lnormx * _this2.body.axisx + e.lnormy * _this2.body.axisy;
							e.gprojection = _this2.body.posx * e.gnormx + _this2.body.posy * e.gnormy + e.lprojection;
							if(e.wrap_gnorm != null) {
								e.wrap_gnorm.zpp_inner.x = e.gnormx;
								e.wrap_gnorm.zpp_inner.y = e.gnormy;
							}
							e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
							e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
							u = v;
							cx_ite3 = cx_ite3.next;
						}
						var e1 = ite.elt;
						e1.gp0 = u;
						e1.gp1 = _this2.gverts.next;
						e1.gnormx = _this2.body.axisy * e1.lnormx - _this2.body.axisx * e1.lnormy;
						e1.gnormy = e1.lnormx * _this2.body.axisx + e1.lnormy * _this2.body.axisy;
						e1.gprojection = _this2.body.posx * e1.gnormx + _this2.body.posy * e1.gnormy + e1.lprojection;
						if(e1.wrap_gnorm != null) {
							e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
							e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
						}
						e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
						e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
					}
				}
			}
			s.validate_sweepRadius();
			if(s.sweepRadius > cur.sweepRadius) {
				cur.sweepRadius = s.sweepRadius;
			}
			cx_ite1 = cx_ite1.next;
		}
		cur.validate_mass();
		cur.validate_inertia();
		if(cur.shapes.head != null) {
			if(cur.shapes.head == null) {
				throw new js._Boot.HaxeError("Error: Body bounds only makes sense if it contains shapes");
			}
			if(cur.zip_aabb) {
				cur.zip_aabb = false;
				cur.aabb.minx = Infinity;
				cur.aabb.miny = Infinity;
				cur.aabb.maxx = -Infinity;
				cur.aabb.maxy = -Infinity;
				var cx_ite4 = cur.shapes.head;
				while(cx_ite4 != null) {
					var s1 = cx_ite4.elt;
					if(s1.zip_aabb) {
						if(s1.body != null) {
							s1.zip_aabb = false;
							if(s1.type == 0) {
								var _this5 = s1.circle;
								if(_this5.zip_worldCOM) {
									if(_this5.body != null) {
										_this5.zip_worldCOM = false;
										if(_this5.zip_localCOM) {
											_this5.zip_localCOM = false;
											if(_this5.type == 1) {
												var _this6 = _this5.polygon;
												if(_this6.lverts.next == null) {
													throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
												}
												if(_this6.lverts.next.next == null) {
													_this6.localCOMx = _this6.lverts.next.x;
													_this6.localCOMy = _this6.lverts.next.y;
												} else if(_this6.lverts.next.next.next == null) {
													_this6.localCOMx = _this6.lverts.next.x;
													_this6.localCOMy = _this6.lverts.next.y;
													_this6.localCOMx += _this6.lverts.next.next.x;
													_this6.localCOMy += _this6.lverts.next.next.y;
													_this6.localCOMx *= 0.5;
													_this6.localCOMy *= 0.5;
												} else {
													_this6.localCOMx = 0;
													_this6.localCOMy = 0;
													var area = 0.0;
													var cx_ite5 = _this6.lverts.next;
													var u1 = cx_ite5;
													cx_ite5 = cx_ite5.next;
													var v1 = cx_ite5;
													cx_ite5 = cx_ite5.next;
													while(cx_ite5 != null) {
														var w = cx_ite5;
														area += v1.x * (w.y - u1.y);
														var cf = w.y * v1.x - w.x * v1.y;
														_this6.localCOMx += (v1.x + w.x) * cf;
														_this6.localCOMy += (v1.y + w.y) * cf;
														u1 = v1;
														v1 = w;
														cx_ite5 = cx_ite5.next;
													}
													cx_ite5 = _this6.lverts.next;
													var w1 = cx_ite5;
													area += v1.x * (w1.y - u1.y);
													var cf1 = w1.y * v1.x - w1.x * v1.y;
													_this6.localCOMx += (v1.x + w1.x) * cf1;
													_this6.localCOMy += (v1.y + w1.y) * cf1;
													u1 = v1;
													cx_ite5 = cx_ite5.next;
													var w2 = cx_ite5;
													area += w1.x * (w2.y - u1.y);
													var cf2 = w2.y * w1.x - w2.x * w1.y;
													_this6.localCOMx += (w1.x + w2.x) * cf2;
													_this6.localCOMy += (w1.y + w2.y) * cf2;
													area = 1 / (3 * area);
													var t = area;
													_this6.localCOMx *= t;
													_this6.localCOMy *= t;
												}
											}
											if(_this5.wrap_localCOM != null) {
												_this5.wrap_localCOM.zpp_inner.x = _this5.localCOMx;
												_this5.wrap_localCOM.zpp_inner.y = _this5.localCOMy;
											}
										}
										var _this7 = _this5.body;
										if(_this7.zip_axis) {
											_this7.zip_axis = false;
											_this7.axisx = Math.sin(_this7.rot);
											_this7.axisy = Math.cos(_this7.rot);
										}
										_this5.worldCOMx = _this5.body.posx + (_this5.body.axisy * _this5.localCOMx - _this5.body.axisx * _this5.localCOMy);
										_this5.worldCOMy = _this5.body.posy + (_this5.localCOMx * _this5.body.axisx + _this5.localCOMy * _this5.body.axisy);
									}
								}
								var rx = _this5.radius;
								var ry = _this5.radius;
								_this5.aabb.minx = _this5.worldCOMx - rx;
								_this5.aabb.miny = _this5.worldCOMy - ry;
								_this5.aabb.maxx = _this5.worldCOMx + rx;
								_this5.aabb.maxy = _this5.worldCOMy + ry;
							} else {
								var _this8 = s1.polygon;
								if(_this8.zip_gverts) {
									if(_this8.body != null) {
										_this8.zip_gverts = false;
										_this8.validate_lverts();
										var _this9 = _this8.body;
										if(_this9.zip_axis) {
											_this9.zip_axis = false;
											_this9.axisx = Math.sin(_this9.rot);
											_this9.axisy = Math.cos(_this9.rot);
										}
										var li1 = _this8.lverts.next;
										var cx_ite6 = _this8.gverts.next;
										while(cx_ite6 != null) {
											var g1 = cx_ite6;
											var l1 = li1;
											li1 = li1.next;
											g1.x = _this8.body.posx + (_this8.body.axisy * l1.x - _this8.body.axisx * l1.y);
											g1.y = _this8.body.posy + (l1.x * _this8.body.axisx + l1.y * _this8.body.axisy);
											cx_ite6 = cx_ite6.next;
										}
									}
								}
								if(_this8.lverts.next == null) {
									throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful bounds");
								}
								var p0 = _this8.gverts.next;
								_this8.aabb.minx = p0.x;
								_this8.aabb.miny = p0.y;
								_this8.aabb.maxx = p0.x;
								_this8.aabb.maxy = p0.y;
								var cx_ite7 = _this8.gverts.next.next;
								while(cx_ite7 != null) {
									var p = cx_ite7;
									if(p.x < _this8.aabb.minx) {
										_this8.aabb.minx = p.x;
									}
									if(p.x > _this8.aabb.maxx) {
										_this8.aabb.maxx = p.x;
									}
									if(p.y < _this8.aabb.miny) {
										_this8.aabb.miny = p.y;
									}
									if(p.y > _this8.aabb.maxy) {
										_this8.aabb.maxy = p.y;
									}
									cx_ite7 = cx_ite7.next;
								}
							}
						}
					}
					var _this10 = cur.aabb;
					var x = s1.aabb;
					if(x.minx < _this10.minx) {
						_this10.minx = x.minx;
					}
					if(x.maxx > _this10.maxx) {
						_this10.maxx = x.maxx;
					}
					if(x.miny < _this10.miny) {
						_this10.miny = x.miny;
					}
					if(x.maxy > _this10.maxy) {
						_this10.maxy = x.maxy;
					}
					cx_ite4 = cx_ite4.next;
				}
			}
			cur.validate_worldCOM();
		}
		cur.validate_gravMass();
		if(cur.zip_axis) {
			cur.zip_axis = false;
			cur.axisx = Math.sin(cur.rot);
			cur.axisy = Math.cos(cur.rot);
		}
		if(!cur.nomove && cur.type == 2 && cur.mass == 0) {
			throw new js._Boot.HaxeError("Error: Dynamic Body cannot be simulated with 0 mass unless allowMovement is false");
		}
		if(!cur.norotate && cur.type == 2 && cur.inertia == 0) {
			throw new js._Boot.HaxeError("Error: Dynamic Body cannot be simulated with 0 inertia unless allowRotation is false");
		}
		if(cur.component.woken && cur.cbSet != null) {
			var cx_ite8 = cur.cbSet.bodylisteners.head;
			while(cx_ite8 != null) {
				var i = cx_ite8.elt;
				if(i.event != 2) {
					cx_ite8 = cx_ite8.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = 2;
				cb.body = cur;
				cx_ite8 = cx_ite8.next;
			}
		}
		cur.component.woken = false;
		var cx_ite9 = cur.shapes.head;
		while(cx_ite9 != null) {
			this.bphase.sync(cx_ite9.elt);
			cx_ite9 = cx_ite9.next;
		}
		cx_ite = cx_ite.next;
	}
	var cx_ite10 = this.kinematics.head;
	while(cx_ite10 != null) {
		var cur1 = cx_ite10.elt;
		cur1.sweepRadius = 0;
		var cx_ite11 = cur1.shapes.head;
		while(cx_ite11 != null) {
			var s2 = cx_ite11.elt;
			if(s2.type == 1) {
				var _this11 = s2.polygon;
				if(_this11.zip_sanitation) {
					_this11.zip_sanitation = false;
					_this11.splice_collinear_real();
				}
				var res1 = s2.polygon.valid();
				if(ZPP_Flags.ValidationResult_VALID == null) {
					ZPP_Flags.internal = true;
					ZPP_Flags.ValidationResult_VALID = new ValidationResult();
					ZPP_Flags.internal = false;
				}
				if(res1 != ZPP_Flags.ValidationResult_VALID) {
					throw new js._Boot.HaxeError("Error: Cannot simulate with an invalid Polygon : " + s2.polygon.outer.toString() + " is invalid : " + res1.toString());
				}
				var _this12 = s2.polygon;
				if(_this12.zip_gaxi) {
					if(_this12.body != null) {
						_this12.zip_gaxi = false;
						_this12.validate_laxi();
						var _this13 = _this12.body;
						if(_this13.zip_axis) {
							_this13.zip_axis = false;
							_this13.axisx = Math.sin(_this13.rot);
							_this13.axisy = Math.cos(_this13.rot);
						}
						if(_this12.zip_gverts) {
							if(_this12.body != null) {
								_this12.zip_gverts = false;
								_this12.validate_lverts();
								var _this14 = _this12.body;
								if(_this14.zip_axis) {
									_this14.zip_axis = false;
									_this14.axisx = Math.sin(_this14.rot);
									_this14.axisy = Math.cos(_this14.rot);
								}
								var li2 = _this12.lverts.next;
								var cx_ite12 = _this12.gverts.next;
								while(cx_ite12 != null) {
									var g2 = cx_ite12;
									var l2 = li2;
									li2 = li2.next;
									g2.x = _this12.body.posx + (_this12.body.axisy * l2.x - _this12.body.axisx * l2.y);
									g2.y = _this12.body.posy + (l2.x * _this12.body.axisx + l2.y * _this12.body.axisy);
									cx_ite12 = cx_ite12.next;
								}
							}
						}
						var ite1 = _this12.edges.head;
						var cx_ite13 = _this12.gverts.next;
						var u2 = cx_ite13;
						cx_ite13 = cx_ite13.next;
						while(cx_ite13 != null) {
							var v2 = cx_ite13;
							var e2 = ite1.elt;
							ite1 = ite1.next;
							e2.gp0 = u2;
							e2.gp1 = v2;
							e2.gnormx = _this12.body.axisy * e2.lnormx - _this12.body.axisx * e2.lnormy;
							e2.gnormy = e2.lnormx * _this12.body.axisx + e2.lnormy * _this12.body.axisy;
							e2.gprojection = _this12.body.posx * e2.gnormx + _this12.body.posy * e2.gnormy + e2.lprojection;
							if(e2.wrap_gnorm != null) {
								e2.wrap_gnorm.zpp_inner.x = e2.gnormx;
								e2.wrap_gnorm.zpp_inner.y = e2.gnormy;
							}
							e2.tp0 = e2.gp0.y * e2.gnormx - e2.gp0.x * e2.gnormy;
							e2.tp1 = e2.gp1.y * e2.gnormx - e2.gp1.x * e2.gnormy;
							u2 = v2;
							cx_ite13 = cx_ite13.next;
						}
						var e3 = ite1.elt;
						e3.gp0 = u2;
						e3.gp1 = _this12.gverts.next;
						e3.gnormx = _this12.body.axisy * e3.lnormx - _this12.body.axisx * e3.lnormy;
						e3.gnormy = e3.lnormx * _this12.body.axisx + e3.lnormy * _this12.body.axisy;
						e3.gprojection = _this12.body.posx * e3.gnormx + _this12.body.posy * e3.gnormy + e3.lprojection;
						if(e3.wrap_gnorm != null) {
							e3.wrap_gnorm.zpp_inner.x = e3.gnormx;
							e3.wrap_gnorm.zpp_inner.y = e3.gnormy;
						}
						e3.tp0 = e3.gp0.y * e3.gnormx - e3.gp0.x * e3.gnormy;
						e3.tp1 = e3.gp1.y * e3.gnormx - e3.gp1.x * e3.gnormy;
					}
				}
			}
			s2.validate_sweepRadius();
			if(s2.sweepRadius > cur1.sweepRadius) {
				cur1.sweepRadius = s2.sweepRadius;
			}
			cx_ite11 = cx_ite11.next;
		}
		cur1.validate_mass();
		cur1.validate_inertia();
		if(cur1.shapes.head != null) {
			if(cur1.shapes.head == null) {
				throw new js._Boot.HaxeError("Error: Body bounds only makes sense if it contains shapes");
			}
			if(cur1.zip_aabb) {
				cur1.zip_aabb = false;
				cur1.aabb.minx = Infinity;
				cur1.aabb.miny = Infinity;
				cur1.aabb.maxx = -Infinity;
				cur1.aabb.maxy = -Infinity;
				var cx_ite14 = cur1.shapes.head;
				while(cx_ite14 != null) {
					var s3 = cx_ite14.elt;
					if(s3.zip_aabb) {
						if(s3.body != null) {
							s3.zip_aabb = false;
							if(s3.type == 0) {
								var _this15 = s3.circle;
								if(_this15.zip_worldCOM) {
									if(_this15.body != null) {
										_this15.zip_worldCOM = false;
										if(_this15.zip_localCOM) {
											_this15.zip_localCOM = false;
											if(_this15.type == 1) {
												var _this16 = _this15.polygon;
												if(_this16.lverts.next == null) {
													throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
												}
												if(_this16.lverts.next.next == null) {
													_this16.localCOMx = _this16.lverts.next.x;
													_this16.localCOMy = _this16.lverts.next.y;
												} else if(_this16.lverts.next.next.next == null) {
													_this16.localCOMx = _this16.lverts.next.x;
													_this16.localCOMy = _this16.lverts.next.y;
													_this16.localCOMx += _this16.lverts.next.next.x;
													_this16.localCOMy += _this16.lverts.next.next.y;
													_this16.localCOMx *= 0.5;
													_this16.localCOMy *= 0.5;
												} else {
													_this16.localCOMx = 0;
													_this16.localCOMy = 0;
													var area1 = 0.0;
													var cx_ite15 = _this16.lverts.next;
													var u3 = cx_ite15;
													cx_ite15 = cx_ite15.next;
													var v3 = cx_ite15;
													cx_ite15 = cx_ite15.next;
													while(cx_ite15 != null) {
														var w3 = cx_ite15;
														area1 += v3.x * (w3.y - u3.y);
														var cf3 = w3.y * v3.x - w3.x * v3.y;
														_this16.localCOMx += (v3.x + w3.x) * cf3;
														_this16.localCOMy += (v3.y + w3.y) * cf3;
														u3 = v3;
														v3 = w3;
														cx_ite15 = cx_ite15.next;
													}
													cx_ite15 = _this16.lverts.next;
													var w4 = cx_ite15;
													area1 += v3.x * (w4.y - u3.y);
													var cf4 = w4.y * v3.x - w4.x * v3.y;
													_this16.localCOMx += (v3.x + w4.x) * cf4;
													_this16.localCOMy += (v3.y + w4.y) * cf4;
													u3 = v3;
													cx_ite15 = cx_ite15.next;
													var w5 = cx_ite15;
													area1 += w4.x * (w5.y - u3.y);
													var cf5 = w5.y * w4.x - w5.x * w4.y;
													_this16.localCOMx += (w4.x + w5.x) * cf5;
													_this16.localCOMy += (w4.y + w5.y) * cf5;
													area1 = 1 / (3 * area1);
													var t1 = area1;
													_this16.localCOMx *= t1;
													_this16.localCOMy *= t1;
												}
											}
											if(_this15.wrap_localCOM != null) {
												_this15.wrap_localCOM.zpp_inner.x = _this15.localCOMx;
												_this15.wrap_localCOM.zpp_inner.y = _this15.localCOMy;
											}
										}
										var _this17 = _this15.body;
										if(_this17.zip_axis) {
											_this17.zip_axis = false;
											_this17.axisx = Math.sin(_this17.rot);
											_this17.axisy = Math.cos(_this17.rot);
										}
										_this15.worldCOMx = _this15.body.posx + (_this15.body.axisy * _this15.localCOMx - _this15.body.axisx * _this15.localCOMy);
										_this15.worldCOMy = _this15.body.posy + (_this15.localCOMx * _this15.body.axisx + _this15.localCOMy * _this15.body.axisy);
									}
								}
								var rx1 = _this15.radius;
								var ry1 = _this15.radius;
								_this15.aabb.minx = _this15.worldCOMx - rx1;
								_this15.aabb.miny = _this15.worldCOMy - ry1;
								_this15.aabb.maxx = _this15.worldCOMx + rx1;
								_this15.aabb.maxy = _this15.worldCOMy + ry1;
							} else {
								var _this18 = s3.polygon;
								if(_this18.zip_gverts) {
									if(_this18.body != null) {
										_this18.zip_gverts = false;
										_this18.validate_lverts();
										var _this19 = _this18.body;
										if(_this19.zip_axis) {
											_this19.zip_axis = false;
											_this19.axisx = Math.sin(_this19.rot);
											_this19.axisy = Math.cos(_this19.rot);
										}
										var li3 = _this18.lverts.next;
										var cx_ite16 = _this18.gverts.next;
										while(cx_ite16 != null) {
											var g3 = cx_ite16;
											var l3 = li3;
											li3 = li3.next;
											g3.x = _this18.body.posx + (_this18.body.axisy * l3.x - _this18.body.axisx * l3.y);
											g3.y = _this18.body.posy + (l3.x * _this18.body.axisx + l3.y * _this18.body.axisy);
											cx_ite16 = cx_ite16.next;
										}
									}
								}
								if(_this18.lverts.next == null) {
									throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful bounds");
								}
								var p01 = _this18.gverts.next;
								_this18.aabb.minx = p01.x;
								_this18.aabb.miny = p01.y;
								_this18.aabb.maxx = p01.x;
								_this18.aabb.maxy = p01.y;
								var cx_ite17 = _this18.gverts.next.next;
								while(cx_ite17 != null) {
									var p1 = cx_ite17;
									if(p1.x < _this18.aabb.minx) {
										_this18.aabb.minx = p1.x;
									}
									if(p1.x > _this18.aabb.maxx) {
										_this18.aabb.maxx = p1.x;
									}
									if(p1.y < _this18.aabb.miny) {
										_this18.aabb.miny = p1.y;
									}
									if(p1.y > _this18.aabb.maxy) {
										_this18.aabb.maxy = p1.y;
									}
									cx_ite17 = cx_ite17.next;
								}
							}
						}
					}
					var _this20 = cur1.aabb;
					var x1 = s3.aabb;
					if(x1.minx < _this20.minx) {
						_this20.minx = x1.minx;
					}
					if(x1.maxx > _this20.maxx) {
						_this20.maxx = x1.maxx;
					}
					if(x1.miny < _this20.miny) {
						_this20.miny = x1.miny;
					}
					if(x1.maxy > _this20.maxy) {
						_this20.maxy = x1.maxy;
					}
					cx_ite14 = cx_ite14.next;
				}
			}
			cur1.validate_worldCOM();
		}
		cur1.validate_gravMass();
		if(cur1.zip_axis) {
			cur1.zip_axis = false;
			cur1.axisx = Math.sin(cur1.rot);
			cur1.axisy = Math.cos(cur1.rot);
		}
		if(!cur1.nomove && cur1.type == 2 && cur1.mass == 0) {
			throw new js._Boot.HaxeError("Error: Dynamic Body cannot be simulated with 0 mass unless allowMovement is false");
		}
		if(!cur1.norotate && cur1.type == 2 && cur1.inertia == 0) {
			throw new js._Boot.HaxeError("Error: Dynamic Body cannot be simulated with 0 inertia unless allowRotation is false");
		}
		var cx_ite18 = cur1.shapes.head;
		while(cx_ite18 != null) {
			this.bphase.sync(cx_ite18.elt);
			cx_ite18 = cx_ite18.next;
		}
		cx_ite10 = cx_ite10.next;
	}
	var cx_ite19 = this.live_constraints.head;
	while(cx_ite19 != null) {
		var con = cx_ite19.elt;
		if(con.active) {
			con.validate();
			if(con.component.woken && con.cbSet != null) {
				var cx_ite20 = con.cbSet.conlisteners.head;
				while(cx_ite20 != null) {
					var i1 = cx_ite20.elt;
					if(i1.event != 2) {
						cx_ite20 = cx_ite20.next;
						continue;
					}
					var cb1 = this.push_callback(i1);
					cb1.event = 2;
					cb1.constraint = con;
					cx_ite20 = cx_ite20.next;
				}
			}
			con.component.woken = false;
		}
		cx_ite19 = cx_ite19.next;
	}
};
ZPP_Space.prototype.updateVel = function(dt) {
	var linDrag = 1 - dt * this.global_lin_drag;
	var angDrag = 1 - dt * this.global_ang_drag;
	var cx_ite = this.live.head;
	while(cx_ite != null) {
		var cur = cx_ite.elt;
		if(cur.smass != 0.0) {
			var time = dt * cur.imass;
			cur.velx = linDrag * cur.velx + (cur.forcex + this.gravityx * cur.gravMass) * time;
			cur.vely = linDrag * cur.vely + (cur.forcey + this.gravityy * cur.gravMass) * time;
		}
		if(cur.sinertia != 0.0) {
			var dpx = 0.0;
			var dpy = 0.0;
			dpx = cur.worldCOMx - cur.posx;
			dpy = cur.worldCOMy - cur.posy;
			cur.angvel = angDrag * cur.angvel + (cur.torque + (this.gravityy * dpx - this.gravityx * dpy) * cur.gravMass) * dt * cur.iinertia;
		}
		cx_ite = cx_ite.next;
	}
};
ZPP_Space.prototype.updatePos = function(dt) {
	var MAX_VEL = 2 * Math.PI / dt;
	var cx_ite = this.live.head;
	while(cx_ite != null) {
		var cur = cx_ite.elt;
		cur.pre_posx = cur.posx;
		cur.pre_posy = cur.posy;
		cur.pre_rot = cur.rot;
		cur.sweepTime = 0;
		cur.sweep_angvel = cur.angvel % MAX_VEL;
		var delta = dt - cur.sweepTime;
		if(delta != 0) {
			cur.sweepTime = dt;
			cur.posx += cur.velx * delta;
			cur.posy += cur.vely * delta;
			if(cur.angvel != 0) {
				var dr = cur.sweep_angvel * delta;
				cur.rot += dr;
				if(dr * dr > 0.0001) {
					cur.axisx = Math.sin(cur.rot);
					cur.axisy = Math.cos(cur.rot);
				} else {
					var d2 = dr * dr;
					var p = 1 - 0.5 * d2;
					var m = 1 - d2 * d2 / 8;
					var nx = (p * cur.axisx + dr * cur.axisy) * m;
					cur.axisy = (p * cur.axisy - dr * cur.axisx) * m;
					cur.axisx = nx;
				}
			}
		}
		if(!cur.disableCCD) {
			var linThreshold = Config.staticCCDLinearThreshold * cur.sweepRadius;
			var angThreshold = Config.staticCCDAngularThreshold;
			if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold * linThreshold || cur.angvel * cur.angvel * dt * dt > angThreshold * angThreshold || cur.type == 3) {
				var angvel = cur.sweep_angvel;
				if(angvel < 0) {
					angvel = -angvel;
				}
				var iangvel = 1 / angvel;
				var cx_ite1 = cur.shapes.head;
				while(cx_ite1 != null) {
					var s = cx_ite1.elt;
					var aabb = s.aabb;
					var minx = aabb.minx;
					var miny = aabb.miny;
					var maxx = aabb.maxx;
					var maxy = aabb.maxy;
					var count = angvel * dt * s.sweepCoef * 0.0083333333333333332 | 0;
					if(count > 8) {
						count = 8;
					}
					var anginc = angvel * dt / count;
					var delta1 = dt - cur.sweepTime;
					if(delta1 != 0) {
						cur.sweepTime = dt;
						cur.posx += cur.velx * delta1;
						cur.posy += cur.vely * delta1;
						if(cur.angvel != 0) {
							var dr1 = cur.sweep_angvel * delta1;
							cur.rot += dr1;
							if(dr1 * dr1 > 0.0001) {
								cur.axisx = Math.sin(cur.rot);
								cur.axisy = Math.cos(cur.rot);
							} else {
								var d21 = dr1 * dr1;
								var p1 = 1 - 0.5 * d21;
								var m1 = 1 - d21 * d21 / 8;
								var nx1 = (p1 * cur.axisx + dr1 * cur.axisy) * m1;
								cur.axisy = (p1 * cur.axisy - dr1 * cur.axisx) * m1;
								cur.axisx = nx1;
							}
						}
					}
					if(s.type == 0) {
						var _this = s.circle;
						_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
						_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
						_this.aabb.minx = _this.worldCOMx - _this.radius;
						_this.aabb.miny = _this.worldCOMy - _this.radius;
						_this.aabb.maxx = _this.worldCOMx + _this.radius;
						_this.aabb.maxy = _this.worldCOMy + _this.radius;
					} else {
						var _this1 = s.polygon;
						var li = _this1.lverts.next;
						var p0 = _this1.gverts.next;
						var l = li;
						li = li.next;
						p0.x = _this1.body.posx + (_this1.body.axisy * l.x - _this1.body.axisx * l.y);
						p0.y = _this1.body.posy + (l.x * _this1.body.axisx + l.y * _this1.body.axisy);
						_this1.aabb.minx = p0.x;
						_this1.aabb.miny = p0.y;
						_this1.aabb.maxx = p0.x;
						_this1.aabb.maxy = p0.y;
						var cx_ite2 = _this1.gverts.next.next;
						while(cx_ite2 != null) {
							var p2 = cx_ite2;
							var l1 = li;
							li = li.next;
							p2.x = _this1.body.posx + (_this1.body.axisy * l1.x - _this1.body.axisx * l1.y);
							p2.y = _this1.body.posy + (l1.x * _this1.body.axisx + l1.y * _this1.body.axisy);
							if(p2.x < _this1.aabb.minx) {
								_this1.aabb.minx = p2.x;
							}
							if(p2.x > _this1.aabb.maxx) {
								_this1.aabb.maxx = p2.x;
							}
							if(p2.y < _this1.aabb.miny) {
								_this1.aabb.miny = p2.y;
							}
							if(p2.y > _this1.aabb.maxy) {
								_this1.aabb.maxy = p2.y;
							}
							cx_ite2 = cx_ite2.next;
						}
					}
					if(minx < aabb.minx) {
						aabb.minx = minx;
					} else {
						minx = aabb.minx;
					}
					if(miny < aabb.miny) {
						aabb.miny = miny;
					} else {
						miny = aabb.miny;
					}
					if(maxx > aabb.maxx) {
						aabb.maxx = maxx;
					} else {
						maxx = aabb.maxx;
					}
					if(maxy > aabb.maxy) {
						aabb.maxy = maxy;
					} else {
						maxy = aabb.maxy;
					}
					var _g1 = 1;
					var _g = count;
					while(_g1 < _g) {
						var dt1 = anginc * _g1++ * iangvel;
						var delta2 = dt1 - cur.sweepTime;
						if(delta2 != 0) {
							cur.sweepTime = dt1;
							cur.posx += cur.velx * delta2;
							cur.posy += cur.vely * delta2;
							if(cur.angvel != 0) {
								var dr2 = cur.sweep_angvel * delta2;
								cur.rot += dr2;
								if(dr2 * dr2 > 0.0001) {
									cur.axisx = Math.sin(cur.rot);
									cur.axisy = Math.cos(cur.rot);
								} else {
									var d22 = dr2 * dr2;
									var p3 = 1 - 0.5 * d22;
									var m2 = 1 - d22 * d22 / 8;
									var nx2 = (p3 * cur.axisx + dr2 * cur.axisy) * m2;
									cur.axisy = (p3 * cur.axisy - dr2 * cur.axisx) * m2;
									cur.axisx = nx2;
								}
							}
						}
						if(s.type == 0) {
							var _this2 = s.circle;
							_this2.worldCOMx = _this2.body.posx + (_this2.body.axisy * _this2.localCOMx - _this2.body.axisx * _this2.localCOMy);
							_this2.worldCOMy = _this2.body.posy + (_this2.localCOMx * _this2.body.axisx + _this2.localCOMy * _this2.body.axisy);
							_this2.aabb.minx = _this2.worldCOMx - _this2.radius;
							_this2.aabb.miny = _this2.worldCOMy - _this2.radius;
							_this2.aabb.maxx = _this2.worldCOMx + _this2.radius;
							_this2.aabb.maxy = _this2.worldCOMy + _this2.radius;
						} else {
							var _this3 = s.polygon;
							var li1 = _this3.lverts.next;
							var p01 = _this3.gverts.next;
							var l2 = li1;
							li1 = li1.next;
							p01.x = _this3.body.posx + (_this3.body.axisy * l2.x - _this3.body.axisx * l2.y);
							p01.y = _this3.body.posy + (l2.x * _this3.body.axisx + l2.y * _this3.body.axisy);
							_this3.aabb.minx = p01.x;
							_this3.aabb.miny = p01.y;
							_this3.aabb.maxx = p01.x;
							_this3.aabb.maxy = p01.y;
							var cx_ite3 = _this3.gverts.next.next;
							while(cx_ite3 != null) {
								var p4 = cx_ite3;
								var l3 = li1;
								li1 = li1.next;
								p4.x = _this3.body.posx + (_this3.body.axisy * l3.x - _this3.body.axisx * l3.y);
								p4.y = _this3.body.posy + (l3.x * _this3.body.axisx + l3.y * _this3.body.axisy);
								if(p4.x < _this3.aabb.minx) {
									_this3.aabb.minx = p4.x;
								}
								if(p4.x > _this3.aabb.maxx) {
									_this3.aabb.maxx = p4.x;
								}
								if(p4.y < _this3.aabb.miny) {
									_this3.aabb.miny = p4.y;
								}
								if(p4.y > _this3.aabb.maxy) {
									_this3.aabb.maxy = p4.y;
								}
								cx_ite3 = cx_ite3.next;
							}
						}
						if(minx < aabb.minx) {
							aabb.minx = minx;
						} else {
							minx = aabb.minx;
						}
						if(miny < aabb.miny) {
							aabb.miny = miny;
						} else {
							miny = aabb.miny;
						}
						if(maxx > aabb.maxx) {
							aabb.maxx = maxx;
						} else {
							maxx = aabb.maxx;
						}
						if(maxy > aabb.maxy) {
							aabb.maxy = maxy;
						} else {
							maxy = aabb.maxy;
						}
					}
					this.bphase.sync(s);
					cx_ite1 = cx_ite1.next;
				}
				cur.sweepFrozen = false;
				if(cur.type == 2 && cur.bulletEnabled) {
					var linThreshold2 = Config.bulletCCDLinearThreshold * cur.sweepRadius;
					var angThreshold2 = Config.bulletCCDAngularThreshold;
					if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold2 * linThreshold2 || cur.angvel * cur.angvel * dt * dt > angThreshold2 * angThreshold2) {
						cur.bullet = true;
					}
				}
			} else {
				cur.sweepFrozen = true;
				cur.bullet = false;
			}
		} else {
			cur.sweepFrozen = true;
			cur.bullet = false;
		}
		cx_ite = cx_ite.next;
	}
	var cx_ite4 = this.kinematics.head;
	while(cx_ite4 != null) {
		var cur1 = cx_ite4.elt;
		cur1.pre_posx = cur1.posx;
		cur1.pre_posy = cur1.posy;
		cur1.pre_rot = cur1.rot;
		cur1.sweepTime = 0;
		cur1.sweep_angvel = cur1.angvel % MAX_VEL;
		var delta3 = dt - cur1.sweepTime;
		if(delta3 != 0) {
			cur1.sweepTime = dt;
			cur1.posx += cur1.velx * delta3;
			cur1.posy += cur1.vely * delta3;
			if(cur1.angvel != 0) {
				var dr3 = cur1.sweep_angvel * delta3;
				cur1.rot += dr3;
				if(dr3 * dr3 > 0.0001) {
					cur1.axisx = Math.sin(cur1.rot);
					cur1.axisy = Math.cos(cur1.rot);
				} else {
					var d23 = dr3 * dr3;
					var p5 = 1 - 0.5 * d23;
					var m3 = 1 - d23 * d23 / 8;
					var nx3 = (p5 * cur1.axisx + dr3 * cur1.axisy) * m3;
					cur1.axisy = (p5 * cur1.axisy - dr3 * cur1.axisx) * m3;
					cur1.axisx = nx3;
				}
			}
		}
		if(!cur1.disableCCD) {
			var linThreshold1 = Config.staticCCDLinearThreshold * cur1.sweepRadius;
			var angThreshold1 = Config.staticCCDAngularThreshold;
			if((cur1.velx * cur1.velx + cur1.vely * cur1.vely) * dt * dt > linThreshold1 * linThreshold1 || cur1.angvel * cur1.angvel * dt * dt > angThreshold1 * angThreshold1 || cur1.type == 3) {
				var angvel1 = cur1.sweep_angvel;
				if(angvel1 < 0) {
					angvel1 = -angvel1;
				}
				var iangvel1 = 1 / angvel1;
				var cx_ite5 = cur1.shapes.head;
				while(cx_ite5 != null) {
					var s1 = cx_ite5.elt;
					var aabb1 = s1.aabb;
					var minx1 = aabb1.minx;
					var miny1 = aabb1.miny;
					var maxx1 = aabb1.maxx;
					var maxy1 = aabb1.maxy;
					var count1 = angvel1 * dt * s1.sweepCoef * 0.0083333333333333332 | 0;
					if(count1 > 8) {
						count1 = 8;
					}
					var anginc1 = angvel1 * dt / count1;
					var delta4 = dt - cur1.sweepTime;
					if(delta4 != 0) {
						cur1.sweepTime = dt;
						cur1.posx += cur1.velx * delta4;
						cur1.posy += cur1.vely * delta4;
						if(cur1.angvel != 0) {
							var dr4 = cur1.sweep_angvel * delta4;
							cur1.rot += dr4;
							if(dr4 * dr4 > 0.0001) {
								cur1.axisx = Math.sin(cur1.rot);
								cur1.axisy = Math.cos(cur1.rot);
							} else {
								var d24 = dr4 * dr4;
								var p6 = 1 - 0.5 * d24;
								var m4 = 1 - d24 * d24 / 8;
								var nx4 = (p6 * cur1.axisx + dr4 * cur1.axisy) * m4;
								cur1.axisy = (p6 * cur1.axisy - dr4 * cur1.axisx) * m4;
								cur1.axisx = nx4;
							}
						}
					}
					if(s1.type == 0) {
						var _this4 = s1.circle;
						_this4.worldCOMx = _this4.body.posx + (_this4.body.axisy * _this4.localCOMx - _this4.body.axisx * _this4.localCOMy);
						_this4.worldCOMy = _this4.body.posy + (_this4.localCOMx * _this4.body.axisx + _this4.localCOMy * _this4.body.axisy);
						_this4.aabb.minx = _this4.worldCOMx - _this4.radius;
						_this4.aabb.miny = _this4.worldCOMy - _this4.radius;
						_this4.aabb.maxx = _this4.worldCOMx + _this4.radius;
						_this4.aabb.maxy = _this4.worldCOMy + _this4.radius;
					} else {
						var _this5 = s1.polygon;
						var li2 = _this5.lverts.next;
						var p02 = _this5.gverts.next;
						var l4 = li2;
						li2 = li2.next;
						p02.x = _this5.body.posx + (_this5.body.axisy * l4.x - _this5.body.axisx * l4.y);
						p02.y = _this5.body.posy + (l4.x * _this5.body.axisx + l4.y * _this5.body.axisy);
						_this5.aabb.minx = p02.x;
						_this5.aabb.miny = p02.y;
						_this5.aabb.maxx = p02.x;
						_this5.aabb.maxy = p02.y;
						var cx_ite6 = _this5.gverts.next.next;
						while(cx_ite6 != null) {
							var p7 = cx_ite6;
							var l5 = li2;
							li2 = li2.next;
							p7.x = _this5.body.posx + (_this5.body.axisy * l5.x - _this5.body.axisx * l5.y);
							p7.y = _this5.body.posy + (l5.x * _this5.body.axisx + l5.y * _this5.body.axisy);
							if(p7.x < _this5.aabb.minx) {
								_this5.aabb.minx = p7.x;
							}
							if(p7.x > _this5.aabb.maxx) {
								_this5.aabb.maxx = p7.x;
							}
							if(p7.y < _this5.aabb.miny) {
								_this5.aabb.miny = p7.y;
							}
							if(p7.y > _this5.aabb.maxy) {
								_this5.aabb.maxy = p7.y;
							}
							cx_ite6 = cx_ite6.next;
						}
					}
					if(minx1 < aabb1.minx) {
						aabb1.minx = minx1;
					} else {
						minx1 = aabb1.minx;
					}
					if(miny1 < aabb1.miny) {
						aabb1.miny = miny1;
					} else {
						miny1 = aabb1.miny;
					}
					if(maxx1 > aabb1.maxx) {
						aabb1.maxx = maxx1;
					} else {
						maxx1 = aabb1.maxx;
					}
					if(maxy1 > aabb1.maxy) {
						aabb1.maxy = maxy1;
					} else {
						maxy1 = aabb1.maxy;
					}
					var _g11 = 1;
					var _g2 = count1;
					while(_g11 < _g2) {
						var dt2 = anginc1 * _g11++ * iangvel1;
						var delta5 = dt2 - cur1.sweepTime;
						if(delta5 != 0) {
							cur1.sweepTime = dt2;
							cur1.posx += cur1.velx * delta5;
							cur1.posy += cur1.vely * delta5;
							if(cur1.angvel != 0) {
								var dr5 = cur1.sweep_angvel * delta5;
								cur1.rot += dr5;
								if(dr5 * dr5 > 0.0001) {
									cur1.axisx = Math.sin(cur1.rot);
									cur1.axisy = Math.cos(cur1.rot);
								} else {
									var d25 = dr5 * dr5;
									var p8 = 1 - 0.5 * d25;
									var m5 = 1 - d25 * d25 / 8;
									var nx5 = (p8 * cur1.axisx + dr5 * cur1.axisy) * m5;
									cur1.axisy = (p8 * cur1.axisy - dr5 * cur1.axisx) * m5;
									cur1.axisx = nx5;
								}
							}
						}
						if(s1.type == 0) {
							var _this6 = s1.circle;
							_this6.worldCOMx = _this6.body.posx + (_this6.body.axisy * _this6.localCOMx - _this6.body.axisx * _this6.localCOMy);
							_this6.worldCOMy = _this6.body.posy + (_this6.localCOMx * _this6.body.axisx + _this6.localCOMy * _this6.body.axisy);
							_this6.aabb.minx = _this6.worldCOMx - _this6.radius;
							_this6.aabb.miny = _this6.worldCOMy - _this6.radius;
							_this6.aabb.maxx = _this6.worldCOMx + _this6.radius;
							_this6.aabb.maxy = _this6.worldCOMy + _this6.radius;
						} else {
							var _this7 = s1.polygon;
							var li3 = _this7.lverts.next;
							var p03 = _this7.gverts.next;
							var l6 = li3;
							li3 = li3.next;
							p03.x = _this7.body.posx + (_this7.body.axisy * l6.x - _this7.body.axisx * l6.y);
							p03.y = _this7.body.posy + (l6.x * _this7.body.axisx + l6.y * _this7.body.axisy);
							_this7.aabb.minx = p03.x;
							_this7.aabb.miny = p03.y;
							_this7.aabb.maxx = p03.x;
							_this7.aabb.maxy = p03.y;
							var cx_ite7 = _this7.gverts.next.next;
							while(cx_ite7 != null) {
								var p9 = cx_ite7;
								var l7 = li3;
								li3 = li3.next;
								p9.x = _this7.body.posx + (_this7.body.axisy * l7.x - _this7.body.axisx * l7.y);
								p9.y = _this7.body.posy + (l7.x * _this7.body.axisx + l7.y * _this7.body.axisy);
								if(p9.x < _this7.aabb.minx) {
									_this7.aabb.minx = p9.x;
								}
								if(p9.x > _this7.aabb.maxx) {
									_this7.aabb.maxx = p9.x;
								}
								if(p9.y < _this7.aabb.miny) {
									_this7.aabb.miny = p9.y;
								}
								if(p9.y > _this7.aabb.maxy) {
									_this7.aabb.maxy = p9.y;
								}
								cx_ite7 = cx_ite7.next;
							}
						}
						if(minx1 < aabb1.minx) {
							aabb1.minx = minx1;
						} else {
							minx1 = aabb1.minx;
						}
						if(miny1 < aabb1.miny) {
							aabb1.miny = miny1;
						} else {
							miny1 = aabb1.miny;
						}
						if(maxx1 > aabb1.maxx) {
							aabb1.maxx = maxx1;
						} else {
							maxx1 = aabb1.maxx;
						}
						if(maxy1 > aabb1.maxy) {
							aabb1.maxy = maxy1;
						} else {
							maxy1 = aabb1.maxy;
						}
					}
					this.bphase.sync(s1);
					cx_ite5 = cx_ite5.next;
				}
				cur1.sweepFrozen = false;
				if(cur1.type == 2 && cur1.bulletEnabled) {
					var linThreshold21 = Config.bulletCCDLinearThreshold * cur1.sweepRadius;
					var angThreshold21 = Config.bulletCCDAngularThreshold;
					if((cur1.velx * cur1.velx + cur1.vely * cur1.vely) * dt * dt > linThreshold21 * linThreshold21 || cur1.angvel * cur1.angvel * dt * dt > angThreshold21 * angThreshold21) {
						cur1.bullet = true;
					}
				}
			} else {
				cur1.sweepFrozen = true;
				cur1.bullet = false;
			}
		} else {
			cur1.sweepFrozen = true;
			cur1.bullet = false;
		}
		cx_ite4 = cx_ite4.next;
	}
};
ZPP_Space.prototype.continuous = null;
ZPP_Space.prototype.presteparb = function(arb,dt,cont) {
	if(cont == null) {
		cont = false;
	}
	var _gthis = this;
	if(!arb.cleared && (arb.b1.component.sleeping && arb.b2.component.sleeping)) {
		arb.sleep_stamp = this.stamp;
		arb.sleeping = true;
		return true;
	}
	if(!arb.cleared || arb.present != 0 || arb.intchange) {
		var endcb = !cont && arb.up_stamp == this.stamp - 1 && !arb.cleared && !arb.intchange;
		var begcb = arb.fresh && !arb.cleared && !arb.intchange;
		if(endcb) {
			arb.endGenerated = this.stamp;
		}
		if(begcb || endcb || arb.cleared || arb.intchange) {
			var s1 = arb.ws1;
			var s2 = arb.ws2;
			var _this = this.mrca1;
			while(_this.head != null) {
				var ret = _this.head;
				_this.head = ret.next;
				ret.elt = null;
				ret.next = ZNPNode_ZPP_Interactor.zpp_pool;
				ZNPNode_ZPP_Interactor.zpp_pool = ret;
				if(_this.head == null) {
					_this.pushmod = true;
				}
				_this.modified = true;
				_this.length--;
			}
			_this.pushmod = true;
			var _this1 = this.mrca2;
			while(_this1.head != null) {
				var ret1 = _this1.head;
				_this1.head = ret1.next;
				ret1.elt = null;
				ret1.next = ZNPNode_ZPP_Interactor.zpp_pool;
				ZNPNode_ZPP_Interactor.zpp_pool = ret1;
				if(_this1.head == null) {
					_this1.pushmod = true;
				}
				_this1.modified = true;
				_this1.length--;
			}
			_this1.pushmod = true;
			if(s1.cbSet != null) {
				var _this2 = this.mrca1;
				var ret2;
				if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
					ret2 = new ZNPNode_ZPP_Interactor();
				} else {
					ret2 = ZNPNode_ZPP_Interactor.zpp_pool;
					ZNPNode_ZPP_Interactor.zpp_pool = ret2.next;
					ret2.next = null;
				}
				ret2.elt = s1;
				var temp = ret2;
				temp.next = _this2.head;
				_this2.head = temp;
				_this2.modified = true;
				_this2.length++;
			}
			if(s1.body.cbSet != null) {
				var _this3 = this.mrca1;
				var o = s1.body;
				var ret3;
				if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
					ret3 = new ZNPNode_ZPP_Interactor();
				} else {
					ret3 = ZNPNode_ZPP_Interactor.zpp_pool;
					ZNPNode_ZPP_Interactor.zpp_pool = ret3.next;
					ret3.next = null;
				}
				ret3.elt = o;
				var temp1 = ret3;
				temp1.next = _this3.head;
				_this3.head = temp1;
				_this3.modified = true;
				_this3.length++;
			}
			if(s2.cbSet != null) {
				var _this4 = this.mrca2;
				var ret4;
				if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
					ret4 = new ZNPNode_ZPP_Interactor();
				} else {
					ret4 = ZNPNode_ZPP_Interactor.zpp_pool;
					ZNPNode_ZPP_Interactor.zpp_pool = ret4.next;
					ret4.next = null;
				}
				ret4.elt = s2;
				var temp2 = ret4;
				temp2.next = _this4.head;
				_this4.head = temp2;
				_this4.modified = true;
				_this4.length++;
			}
			if(s2.body.cbSet != null) {
				var _this5 = this.mrca2;
				var o1 = s2.body;
				var ret5;
				if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
					ret5 = new ZNPNode_ZPP_Interactor();
				} else {
					ret5 = ZNPNode_ZPP_Interactor.zpp_pool;
					ZNPNode_ZPP_Interactor.zpp_pool = ret5.next;
					ret5.next = null;
				}
				ret5.elt = o1;
				var temp3 = ret5;
				temp3.next = _this5.head;
				_this5.head = temp3;
				_this5.modified = true;
				_this5.length++;
			}
			var c1 = s1.body.compound;
			var c2 = s2.body.compound;
			while(c1 != c2) if((c1 == null?0:c1.depth) < (c2 == null?0:c2.depth)) {
				if(c2.cbSet != null) {
					var _this6 = this.mrca2;
					var ret6;
					if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
						ret6 = new ZNPNode_ZPP_Interactor();
					} else {
						ret6 = ZNPNode_ZPP_Interactor.zpp_pool;
						ZNPNode_ZPP_Interactor.zpp_pool = ret6.next;
						ret6.next = null;
					}
					ret6.elt = c2;
					var temp4 = ret6;
					temp4.next = _this6.head;
					_this6.head = temp4;
					_this6.modified = true;
					_this6.length++;
				}
				c2 = c2.compound;
			} else {
				if(c1.cbSet != null) {
					var _this7 = this.mrca1;
					var ret7;
					if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
						ret7 = new ZNPNode_ZPP_Interactor();
					} else {
						ret7 = ZNPNode_ZPP_Interactor.zpp_pool;
						ZNPNode_ZPP_Interactor.zpp_pool = ret7.next;
						ret7.next = null;
					}
					ret7.elt = c1;
					var temp5 = ret7;
					temp5.next = _this7.head;
					_this7.head = temp5;
					_this7.modified = true;
					_this7.length++;
				}
				c1 = c1.compound;
			}
			var cx_ite = this.mrca1.head;
			while(cx_ite != null) {
				var i1 = cx_ite.elt;
				var cx_ite1 = this.mrca2.head;
				while(cx_ite1 != null) {
					var i2 = cx_ite1.elt;
					var cb1 = i1.cbSet;
					var cb2 = i2.cbSet;
					var ret8 = null;
					var cx_ite2 = (cb1.cbpairs.length < cb2.cbpairs.length?cb1.cbpairs:cb2.cbpairs).head;
					while(cx_ite2 != null) {
						var p = cx_ite2.elt;
						if(p.a == cb1 && p.b == cb2 || p.a == cb2 && p.b == cb1) {
							ret8 = p;
							break;
						}
						cx_ite2 = cx_ite2.next;
					}
					if(ret8 == null) {
						var ret9;
						if(ZPP_CbSetPair.zpp_pool == null) {
							ret9 = new ZPP_CbSetPair();
						} else {
							ret9 = ZPP_CbSetPair.zpp_pool;
							ZPP_CbSetPair.zpp_pool = ret9.next;
							ret9.next = null;
						}
						ret9.zip_listeners = true;
						if(ZPP_CbSet.setlt(cb1,cb2)) {
							ret9.a = cb1;
							ret9.b = cb2;
						} else {
							ret9.a = cb2;
							ret9.b = cb1;
						}
						ret8 = ret9;
						cb1.cbpairs.add(ret8);
						if(cb2 != cb1) {
							cb2.cbpairs.add(ret8);
						}
					}
					if(ret8.zip_listeners) {
						ret8.zip_listeners = false;
						ret8.__validate();
					}
					if(ret8.listeners.head == null) {
						cx_ite1 = cx_ite1.next;
						continue;
					}
					var callbackset = ZPP_Interactor.get(i1,i2);
					if(begcb || arb.intchange) {
						if(callbackset == null) {
							callbackset = ZPP_CallbackSet.get(i1,i2);
							this.add_callbackset(callbackset);
						}
						var ret10 = null;
						var cx_ite3 = (cb1.cbpairs.length < cb2.cbpairs.length?cb1.cbpairs:cb2.cbpairs).head;
						while(cx_ite3 != null) {
							var p1 = cx_ite3.elt;
							if(p1.a == cb1 && p1.b == cb2 || p1.a == cb2 && p1.b == cb1) {
								ret10 = p1;
								break;
							}
							cx_ite3 = cx_ite3.next;
						}
						if(ret10 == null) {
							var ret11;
							if(ZPP_CbSetPair.zpp_pool == null) {
								ret11 = new ZPP_CbSetPair();
							} else {
								ret11 = ZPP_CbSetPair.zpp_pool;
								ZPP_CbSetPair.zpp_pool = ret11.next;
								ret11.next = null;
							}
							ret11.zip_listeners = true;
							if(ZPP_CbSet.setlt(cb1,cb2)) {
								ret11.a = cb1;
								ret11.b = cb2;
							} else {
								ret11.a = cb2;
								ret11.b = cb1;
							}
							ret10 = ret11;
							cb1.cbpairs.add(ret10);
							if(cb2 != cb1) {
								cb2.cbpairs.add(ret10);
							}
						}
						if(ret10.zip_listeners) {
							ret10.zip_listeners = false;
							ret10.__validate();
						}
						var cx_ite4 = ret10.listeners.head;
						while(cx_ite4 != null) {
							var x = cx_ite4.elt;
							if(x.event == 0) {
								if((x.itype & arb.type) != 0 && callbackset.empty_arb(x.itype)) {
									var cb = _gthis.push_callback(x);
									cb.event = 0;
									var o11 = callbackset.int1;
									var o2 = callbackset.int2;
									var tmp;
									var _this8 = x.options1;
									var xs = o11.cbTypes;
									if(_this8.nonemptyintersection(xs,_this8.includes) && !_this8.nonemptyintersection(xs,_this8.excludes)) {
										var _this9 = x.options2;
										var xs1 = o2.cbTypes;
										if(_this9.nonemptyintersection(xs1,_this9.includes)) {
											tmp = !_this9.nonemptyintersection(xs1,_this9.excludes);
										} else {
											tmp = false;
										}
									} else {
										tmp = false;
									}
									if(tmp) {
										cb.int1 = o11;
										cb.int2 = o2;
									} else {
										cb.int1 = o2;
										cb.int2 = o11;
									}
									cb.set = callbackset;
								}
							}
							cx_ite4 = cx_ite4.next;
						}
						var tmp1;
						var ret12;
						ret12 = false;
						var cx_ite5 = callbackset.arbiters.head;
						while(cx_ite5 != null) {
							if(cx_ite5.elt == arb) {
								ret12 = true;
								break;
							}
							cx_ite5 = cx_ite5.next;
						}
						if(!ret12) {
							var _this10 = callbackset.arbiters;
							var ret13;
							if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
								ret13 = new ZNPNode_ZPP_Arbiter();
							} else {
								ret13 = ZNPNode_ZPP_Arbiter.zpp_pool;
								ZNPNode_ZPP_Arbiter.zpp_pool = ret13.next;
								ret13.next = null;
							}
							ret13.elt = arb;
							var temp6 = ret13;
							temp6.next = _this10.head;
							_this10.head = temp6;
							_this10.modified = true;
							_this10.length++;
							tmp1 = true;
						} else {
							tmp1 = false;
						}
						if(tmp1) {
							arb.present++;
						}
					} else {
						arb.present--;
						callbackset.remove_arb(arb);
						var ret14 = null;
						var cx_ite6 = (cb1.cbpairs.length < cb2.cbpairs.length?cb1.cbpairs:cb2.cbpairs).head;
						while(cx_ite6 != null) {
							var p2 = cx_ite6.elt;
							if(p2.a == cb1 && p2.b == cb2 || p2.a == cb2 && p2.b == cb1) {
								ret14 = p2;
								break;
							}
							cx_ite6 = cx_ite6.next;
						}
						if(ret14 == null) {
							var ret15;
							if(ZPP_CbSetPair.zpp_pool == null) {
								ret15 = new ZPP_CbSetPair();
							} else {
								ret15 = ZPP_CbSetPair.zpp_pool;
								ZPP_CbSetPair.zpp_pool = ret15.next;
								ret15.next = null;
							}
							ret15.zip_listeners = true;
							if(ZPP_CbSet.setlt(cb1,cb2)) {
								ret15.a = cb1;
								ret15.b = cb2;
							} else {
								ret15.a = cb2;
								ret15.b = cb1;
							}
							ret14 = ret15;
							cb1.cbpairs.add(ret14);
							if(cb2 != cb1) {
								cb2.cbpairs.add(ret14);
							}
						}
						if(ret14.zip_listeners) {
							ret14.zip_listeners = false;
							ret14.__validate();
						}
						var cx_ite7 = ret14.listeners.head;
						while(cx_ite7 != null) {
							var x1 = cx_ite7.elt;
							if(x1.event == 1) {
								if((x1.itype & arb.type) != 0 && callbackset.empty_arb(x1.itype)) {
									var cb3 = _gthis.push_callback(x1);
									cb3.event = 1;
									var o12 = callbackset.int1;
									var o21 = callbackset.int2;
									var tmp2;
									var _this11 = x1.options1;
									var xs2 = o12.cbTypes;
									if(_this11.nonemptyintersection(xs2,_this11.includes) && !_this11.nonemptyintersection(xs2,_this11.excludes)) {
										var _this12 = x1.options2;
										var xs3 = o21.cbTypes;
										if(_this12.nonemptyintersection(xs3,_this12.includes)) {
											tmp2 = !_this12.nonemptyintersection(xs3,_this12.excludes);
										} else {
											tmp2 = false;
										}
									} else {
										tmp2 = false;
									}
									if(tmp2) {
										cb3.int1 = o12;
										cb3.int2 = o21;
									} else {
										cb3.int1 = o21;
										cb3.int2 = o12;
									}
									cb3.set = callbackset;
								}
							}
							cx_ite7 = cx_ite7.next;
						}
						if(callbackset.arbiters.head == null) {
							this.remove_callbackset(callbackset);
						}
					}
					cx_ite1 = cx_ite1.next;
				}
				cx_ite = cx_ite.next;
			}
		}
		arb.fresh = false;
		arb.intchange = false;
	}
	if(arb.cleared || arb.up_stamp + (arb.type == ZPP_Arbiter.COL?Config.arbiterExpirationDelay:0) < this.stamp) {
		if(arb.type == ZPP_Arbiter.SENSOR) {
			var _this13 = arb.sensorarb;
			if(!_this13.cleared) {
				var _this14 = _this13.b1.arbiters;
				var pre = null;
				var cur = _this14.head;
				while(cur != null) {
					if(cur.elt == _this13) {
						var old;
						var ret16;
						if(pre == null) {
							old = _this14.head;
							ret16 = old.next;
							_this14.head = ret16;
							if(_this14.head == null) {
								_this14.pushmod = true;
							}
						} else {
							old = pre.next;
							ret16 = old.next;
							pre.next = ret16;
							if(ret16 == null) {
								_this14.pushmod = true;
							}
						}
						var o3 = old;
						o3.elt = null;
						o3.next = ZNPNode_ZPP_Arbiter.zpp_pool;
						ZNPNode_ZPP_Arbiter.zpp_pool = o3;
						_this14.modified = true;
						_this14.length--;
						_this14.pushmod = true;
						break;
					}
					pre = cur;
					cur = cur.next;
				}
				var _this15 = _this13.b2.arbiters;
				var pre1 = null;
				var cur1 = _this15.head;
				while(cur1 != null) {
					if(cur1.elt == _this13) {
						var old1;
						var ret17;
						if(pre1 == null) {
							old1 = _this15.head;
							ret17 = old1.next;
							_this15.head = ret17;
							if(_this15.head == null) {
								_this15.pushmod = true;
							}
						} else {
							old1 = pre1.next;
							ret17 = old1.next;
							pre1.next = ret17;
							if(ret17 == null) {
								_this15.pushmod = true;
							}
						}
						var o4 = old1;
						o4.elt = null;
						o4.next = ZNPNode_ZPP_Arbiter.zpp_pool;
						ZNPNode_ZPP_Arbiter.zpp_pool = o4;
						_this15.modified = true;
						_this15.length--;
						_this15.pushmod = true;
						break;
					}
					pre1 = cur1;
					cur1 = cur1.next;
				}
				if(_this13.pair != null) {
					_this13.pair.arb = null;
					_this13.pair = null;
				}
			}
			_this13.b1 = _this13.b2 = null;
			_this13.active = false;
			_this13.intchange = false;
			_this13.next = ZPP_SensorArbiter.zpp_pool;
			ZPP_SensorArbiter.zpp_pool = _this13;
		} else if(arb.type == ZPP_Arbiter.FLUID) {
			var _this16 = arb.fluidarb;
			if(!_this16.cleared) {
				var _this17 = _this16.b1.arbiters;
				var pre2 = null;
				var cur2 = _this17.head;
				while(cur2 != null) {
					if(cur2.elt == _this16) {
						var old2;
						var ret18;
						if(pre2 == null) {
							old2 = _this17.head;
							ret18 = old2.next;
							_this17.head = ret18;
							if(_this17.head == null) {
								_this17.pushmod = true;
							}
						} else {
							old2 = pre2.next;
							ret18 = old2.next;
							pre2.next = ret18;
							if(ret18 == null) {
								_this17.pushmod = true;
							}
						}
						var o5 = old2;
						o5.elt = null;
						o5.next = ZNPNode_ZPP_Arbiter.zpp_pool;
						ZNPNode_ZPP_Arbiter.zpp_pool = o5;
						_this17.modified = true;
						_this17.length--;
						_this17.pushmod = true;
						break;
					}
					pre2 = cur2;
					cur2 = cur2.next;
				}
				var _this18 = _this16.b2.arbiters;
				var pre3 = null;
				var cur3 = _this18.head;
				while(cur3 != null) {
					if(cur3.elt == _this16) {
						var old3;
						var ret19;
						if(pre3 == null) {
							old3 = _this18.head;
							ret19 = old3.next;
							_this18.head = ret19;
							if(_this18.head == null) {
								_this18.pushmod = true;
							}
						} else {
							old3 = pre3.next;
							ret19 = old3.next;
							pre3.next = ret19;
							if(ret19 == null) {
								_this18.pushmod = true;
							}
						}
						var o6 = old3;
						o6.elt = null;
						o6.next = ZNPNode_ZPP_Arbiter.zpp_pool;
						ZNPNode_ZPP_Arbiter.zpp_pool = o6;
						_this18.modified = true;
						_this18.length--;
						_this18.pushmod = true;
						break;
					}
					pre3 = cur3;
					cur3 = cur3.next;
				}
				if(_this16.pair != null) {
					_this16.pair.arb = null;
					_this16.pair = null;
				}
			}
			_this16.b1 = _this16.b2 = null;
			_this16.active = false;
			_this16.intchange = false;
			_this16.next = ZPP_FluidArbiter.zpp_pool;
			ZPP_FluidArbiter.zpp_pool = _this16;
			_this16.pre_dt = -1.0;
		} else {
			var _this19 = arb.colarb;
			if(!_this19.cleared) {
				var _this20 = _this19.b1.arbiters;
				var pre4 = null;
				var cur4 = _this20.head;
				while(cur4 != null) {
					if(cur4.elt == _this19) {
						var old4;
						var ret20;
						if(pre4 == null) {
							old4 = _this20.head;
							ret20 = old4.next;
							_this20.head = ret20;
							if(_this20.head == null) {
								_this20.pushmod = true;
							}
						} else {
							old4 = pre4.next;
							ret20 = old4.next;
							pre4.next = ret20;
							if(ret20 == null) {
								_this20.pushmod = true;
							}
						}
						var o7 = old4;
						o7.elt = null;
						o7.next = ZNPNode_ZPP_Arbiter.zpp_pool;
						ZNPNode_ZPP_Arbiter.zpp_pool = o7;
						_this20.modified = true;
						_this20.length--;
						_this20.pushmod = true;
						break;
					}
					pre4 = cur4;
					cur4 = cur4.next;
				}
				var _this21 = _this19.b2.arbiters;
				var pre5 = null;
				var cur5 = _this21.head;
				while(cur5 != null) {
					if(cur5.elt == _this19) {
						var old5;
						var ret21;
						if(pre5 == null) {
							old5 = _this21.head;
							ret21 = old5.next;
							_this21.head = ret21;
							if(_this21.head == null) {
								_this21.pushmod = true;
							}
						} else {
							old5 = pre5.next;
							ret21 = old5.next;
							pre5.next = ret21;
							if(ret21 == null) {
								_this21.pushmod = true;
							}
						}
						var o8 = old5;
						o8.elt = null;
						o8.next = ZNPNode_ZPP_Arbiter.zpp_pool;
						ZNPNode_ZPP_Arbiter.zpp_pool = o8;
						_this21.modified = true;
						_this21.length--;
						_this21.pushmod = true;
						break;
					}
					pre5 = cur5;
					cur5 = cur5.next;
				}
				if(_this19.pair != null) {
					_this19.pair.arb = null;
					_this19.pair = null;
				}
			}
			_this19.b1 = _this19.b2 = null;
			_this19.active = false;
			_this19.intchange = false;
			while(_this19.contacts.next != null) {
				var _this22 = _this19.contacts;
				var ret22 = _this22.next;
				_this22.pop();
				ret22.arbiter = null;
				ret22.next = ZPP_Contact.zpp_pool;
				ZPP_Contact.zpp_pool = ret22;
				var _this23 = _this19.innards;
				var ret23 = _this23.next;
				_this23.next = ret23.next;
				ret23._inuse = false;
				if(_this23.next == null) {
					_this23.pushmod = true;
				}
				_this23.modified = true;
				_this23.length--;
			}
			_this19.userdef_dyn_fric = false;
			_this19.userdef_stat_fric = false;
			_this19.userdef_restitution = false;
			_this19.userdef_rfric = false;
			_this19.__ref_edge1 = _this19.__ref_edge2 = null;
			_this19.next = ZPP_ColArbiter.zpp_pool;
			ZPP_ColArbiter.zpp_pool = _this19;
			_this19.pre_dt = -1.0;
		}
		return true;
	}
	var pact = arb.active;
	arb.active = arb.presentable = arb.up_stamp == this.stamp;
	if((arb.immState & 1) != 0) {
		if(arb.active && arb.type != ZPP_Arbiter.SENSOR) {
			if(arb.colarb != null) {
				var _this24 = arb.colarb;
				if(_this24.invalidated) {
					_this24.invalidated = false;
					if(!_this24.userdef_restitution) {
						if(_this24.s1.material.elasticity <= -Infinity || _this24.s2.material.elasticity <= -Infinity) {
							_this24.restitution = 0;
						} else if(_this24.s1.material.elasticity >= Infinity || _this24.s2.material.elasticity >= Infinity) {
							_this24.restitution = 1;
						} else {
							_this24.restitution = (_this24.s1.material.elasticity + _this24.s2.material.elasticity) / 2;
						}
						if(_this24.restitution < 0) {
							_this24.restitution = 0;
						}
						if(_this24.restitution > 1) {
							_this24.restitution = 1;
						}
					}
					if(!_this24.userdef_dyn_fric) {
						_this24.dyn_fric = Math.sqrt(_this24.s1.material.dynamicFriction * _this24.s2.material.dynamicFriction);
					}
					if(!_this24.userdef_stat_fric) {
						_this24.stat_fric = Math.sqrt(_this24.s1.material.staticFriction * _this24.s2.material.staticFriction);
					}
					if(!_this24.userdef_rfric) {
						_this24.rfric = Math.sqrt(_this24.s1.material.rollingFriction * _this24.s2.material.rollingFriction);
					}
				}
				if(_this24.pre_dt == -1.0) {
					_this24.pre_dt = dt;
				}
				var dtratio = dt / _this24.pre_dt;
				_this24.pre_dt = dt;
				var mass_sum = _this24.b1.smass + _this24.b2.smass;
				_this24.hc2 = false;
				var fst = true;
				_this24.biasCoef = _this24.b1.type != 2 || _this24.b2.type != 2?_this24.continuous?Config.contactContinuousStaticBiasCoef:Config.contactStaticBiasCoef:_this24.continuous?Config.contactContinuousBiasCoef:Config.contactBiasCoef;
				_this24.continuous = false;
				var pre6 = null;
				var prei = null;
				var cx_itei = _this24.innards.next;
				var cx_ite8 = _this24.contacts.next;
				while(cx_ite8 != null) {
					var c = cx_ite8;
					if(c.stamp + Config.arbiterExpirationDelay < _this24.stamp) {
						var _this25 = _this24.contacts;
						var old6;
						var ret24;
						if(pre6 == null) {
							old6 = _this25.next;
							ret24 = old6.next;
							_this25.next = ret24;
							if(_this25.next == null) {
								_this25.pushmod = true;
							}
						} else {
							old6 = pre6.next;
							ret24 = old6.next;
							pre6.next = ret24;
							if(ret24 == null) {
								_this25.pushmod = true;
							}
						}
						old6._inuse = false;
						_this25.modified = true;
						_this25.length--;
						_this25.pushmod = true;
						cx_ite8 = ret24;
						var _this26 = _this24.innards;
						var old7;
						var ret25;
						if(prei == null) {
							old7 = _this26.next;
							ret25 = old7.next;
							_this26.next = ret25;
							if(_this26.next == null) {
								_this26.pushmod = true;
							}
						} else {
							old7 = prei.next;
							ret25 = old7.next;
							prei.next = ret25;
							if(ret25 == null) {
								_this26.pushmod = true;
							}
						}
						old7._inuse = false;
						_this26.modified = true;
						_this26.length--;
						_this26.pushmod = true;
						cx_itei = ret25;
						c.arbiter = null;
						c.next = ZPP_Contact.zpp_pool;
						ZPP_Contact.zpp_pool = c;
						continue;
					}
					var ci = c.inner;
					var pact1 = c.active;
					c.active = c.stamp == _this24.stamp;
					if(c.active) {
						if(fst) {
							fst = false;
							_this24.c1 = ci;
							_this24.oc1 = c;
						} else {
							_this24.hc2 = true;
							_this24.c2 = ci;
							_this24.oc2 = c;
						}
						ci.r2x = c.px - _this24.b2.posx;
						ci.r2y = c.py - _this24.b2.posy;
						ci.r1x = c.px - _this24.b1.posx;
						ci.r1y = c.py - _this24.b1.posy;
						var x2 = ci.r2x * _this24.nx + ci.r2y * _this24.ny;
						var kt = mass_sum + _this24.b2.sinertia * (x2 * x2);
						var x3 = ci.r1x * _this24.nx + ci.r1y * _this24.ny;
						kt += _this24.b1.sinertia * (x3 * x3);
						ci.tMass = kt < Config.epsilon * Config.epsilon?0:1.0 / kt;
						var x4 = _this24.ny * ci.r2x - _this24.nx * ci.r2y;
						var nt = mass_sum + _this24.b2.sinertia * (x4 * x4);
						var x5 = _this24.ny * ci.r1x - _this24.nx * ci.r1y;
						nt += _this24.b1.sinertia * (x5 * x5);
						ci.nMass = nt < Config.epsilon * Config.epsilon?0:1.0 / nt;
						var vrx = 0.0;
						var vry = 0.0;
						var ang = _this24.b2.angvel + _this24.b2.kinangvel;
						vrx = _this24.b2.velx + _this24.b2.kinvelx - ci.r2y * ang;
						vry = _this24.b2.vely + _this24.b2.kinvely + ci.r2x * ang;
						ang = _this24.b1.angvel + _this24.b1.kinangvel;
						vrx -= _this24.b1.velx + _this24.b1.kinvelx - ci.r1y * ang;
						vry -= _this24.b1.vely + _this24.b1.kinvely + ci.r1x * ang;
						var vdot = _this24.nx * vrx + _this24.ny * vry;
						c.elasticity = _this24.restitution;
						ci.bounce = vdot * c.elasticity;
						if(ci.bounce > -Config.elasticThreshold) {
							ci.bounce = 0;
						}
						vdot = vry * _this24.nx - vrx * _this24.ny;
						var thr = Config.staticFrictionThreshold;
						if(vdot * vdot > thr * thr) {
							ci.friction = _this24.dyn_fric;
						} else {
							ci.friction = _this24.stat_fric;
						}
						ci.jnAcc *= dtratio;
						ci.jtAcc *= dtratio;
					}
					if(pact1 != c.active) {
						_this24.contacts.modified = true;
					}
					pre6 = cx_ite8;
					prei = cx_itei;
					cx_itei = cx_itei.next;
					cx_ite8 = cx_ite8.next;
				}
				if(_this24.hc2) {
					_this24.hpc2 = true;
					if(_this24.oc1.posOnly) {
						var tmp3 = _this24.c1;
						_this24.c1 = _this24.c2;
						_this24.c2 = tmp3;
						var tmp21 = _this24.oc1;
						_this24.oc1 = _this24.oc2;
						_this24.oc2 = tmp21;
						_this24.hc2 = false;
					} else if(_this24.oc2.posOnly) {
						_this24.hc2 = false;
					}
					if(_this24.oc1.posOnly) {
						fst = true;
					}
				} else {
					_this24.hpc2 = false;
				}
				_this24.jrAcc *= dtratio;
				if(!fst) {
					_this24.rn1a = _this24.ny * _this24.c1.r1x - _this24.nx * _this24.c1.r1y;
					_this24.rt1a = _this24.c1.r1x * _this24.nx + _this24.c1.r1y * _this24.ny;
					_this24.rn1b = _this24.ny * _this24.c1.r2x - _this24.nx * _this24.c1.r2y;
					_this24.rt1b = _this24.c1.r2x * _this24.nx + _this24.c1.r2y * _this24.ny;
					_this24.k1x = _this24.b2.kinvelx - _this24.c1.r2y * _this24.b2.kinangvel - (_this24.b1.kinvelx - _this24.c1.r1y * _this24.b1.kinangvel);
					_this24.k1y = _this24.b2.kinvely + _this24.c1.r2x * _this24.b2.kinangvel - (_this24.b1.kinvely + _this24.c1.r1x * _this24.b1.kinangvel);
				}
				if(_this24.hc2) {
					_this24.rn2a = _this24.ny * _this24.c2.r1x - _this24.nx * _this24.c2.r1y;
					_this24.rt2a = _this24.c2.r1x * _this24.nx + _this24.c2.r1y * _this24.ny;
					_this24.rn2b = _this24.ny * _this24.c2.r2x - _this24.nx * _this24.c2.r2y;
					_this24.rt2b = _this24.c2.r2x * _this24.nx + _this24.c2.r2y * _this24.ny;
					_this24.k2x = _this24.b2.kinvelx - _this24.c2.r2y * _this24.b2.kinangvel - (_this24.b1.kinvelx - _this24.c2.r1y * _this24.b1.kinangvel);
					_this24.k2y = _this24.b2.kinvely + _this24.c2.r2x * _this24.b2.kinangvel - (_this24.b1.kinvely + _this24.c2.r1x * _this24.b1.kinangvel);
					_this24.kMassa = mass_sum + _this24.b1.sinertia * _this24.rn1a * _this24.rn1a + _this24.b2.sinertia * _this24.rn1b * _this24.rn1b;
					_this24.kMassb = mass_sum + _this24.b1.sinertia * _this24.rn1a * _this24.rn2a + _this24.b2.sinertia * _this24.rn1b * _this24.rn2b;
					_this24.kMassc = mass_sum + _this24.b1.sinertia * _this24.rn2a * _this24.rn2a + _this24.b2.sinertia * _this24.rn2b * _this24.rn2b;
					if(_this24.kMassa * _this24.kMassa + 2 * _this24.kMassb * _this24.kMassb + _this24.kMassc * _this24.kMassc < Config.illConditionedThreshold * (_this24.kMassa * _this24.kMassc - _this24.kMassb * _this24.kMassb)) {
						_this24.Ka = _this24.kMassa;
						_this24.Kb = _this24.kMassb;
						_this24.Kc = _this24.kMassc;
						var det = _this24.kMassa * _this24.kMassc - _this24.kMassb * _this24.kMassb;
						if(det != det) {
							_this24.kMassa = _this24.kMassb = _this24.kMassc = 0;
						} else if(det == 0) {
							if(_this24.kMassa != 0) {
								_this24.kMassa = 1 / _this24.kMassa;
							} else {
								_this24.kMassa = 0;
							}
							if(_this24.kMassc != 0) {
								_this24.kMassc = 1 / _this24.kMassc;
							} else {
								_this24.kMassc = 0;
							}
							_this24.kMassb = 0;
						} else {
							det = 1 / det;
							var t = _this24.kMassc * det;
							_this24.kMassc = _this24.kMassa * det;
							_this24.kMassa = t;
							_this24.kMassb *= -det;
						}
					} else {
						_this24.hc2 = false;
						if(_this24.oc2.dist < _this24.oc1.dist) {
							var t1 = _this24.c1;
							_this24.c1 = _this24.c2;
							_this24.c2 = t1;
						}
						_this24.oc2.active = false;
						_this24.contacts.modified = true;
					}
				}
				_this24.surfacex = _this24.b2.svelx;
				_this24.surfacey = _this24.b2.svely;
				_this24.surfacex += _this24.b1.svelx;
				_this24.surfacey += _this24.b1.svely;
				_this24.surfacex = -_this24.surfacex;
				_this24.surfacey = -_this24.surfacey;
				_this24.rMass = _this24.b1.sinertia + _this24.b2.sinertia;
				if(_this24.rMass != 0) {
					_this24.rMass = 1 / _this24.rMass;
				}
				if(fst) {
					arb.active = false;
				}
			} else {
				var _this27 = arb.fluidarb;
				if(_this27.pre_dt == -1.0) {
					_this27.pre_dt = dt;
				}
				var dtratio1 = dt / _this27.pre_dt;
				_this27.pre_dt = dt;
				_this27.r1x = _this27.centroidx - _this27.b1.posx;
				_this27.r1y = _this27.centroidy - _this27.b1.posy;
				_this27.r2x = _this27.centroidx - _this27.b2.posx;
				_this27.r2y = _this27.centroidy - _this27.b2.posy;
				var g1x = 0.0;
				var g1y = 0.0;
				if(_this27.ws1.fluidEnabled && _this27.ws1.fluidProperties.wrap_gravity != null) {
					g1x = _this27.ws1.fluidProperties.gravityx;
					g1y = _this27.ws1.fluidProperties.gravityy;
				} else {
					g1x = this.gravityx;
					g1y = this.gravityy;
				}
				var g2x = 0.0;
				var g2y = 0.0;
				if(_this27.ws2.fluidEnabled && _this27.ws2.fluidProperties.wrap_gravity != null) {
					g2x = _this27.ws2.fluidProperties.gravityx;
					g2y = _this27.ws2.fluidProperties.gravityy;
				} else {
					g2x = this.gravityx;
					g2y = this.gravityy;
				}
				var buoyx = 0;
				var buoyy = 0;
				if(_this27.ws1.fluidEnabled && _this27.ws2.fluidEnabled) {
					var mass1 = _this27.overlap * _this27.ws1.fluidProperties.density;
					var mass2 = _this27.overlap * _this27.ws2.fluidProperties.density;
					if(mass1 > mass2) {
						var t2 = mass1 + mass2;
						buoyx -= g1x * t2;
						buoyy -= g1y * t2;
					} else if(mass1 < mass2) {
						var t3 = mass1 + mass2;
						buoyx += g2x * t3;
						buoyy += g2y * t3;
					} else {
						var gx = 0.0;
						var gy = 0.0;
						gx = g1x + g2x;
						gy = g1y + g2y;
						gx *= 0.5;
						gy *= 0.5;
						if(_this27.ws1.worldCOMx * gx + _this27.ws1.worldCOMy * gy > _this27.ws2.worldCOMx * gx + _this27.ws2.worldCOMy * gy) {
							var t4 = mass1 + mass2;
							buoyx -= gx * t4;
							buoyy -= gy * t4;
						} else {
							var t5 = mass1 + mass2;
							buoyx += gx * t5;
							buoyy += gy * t5;
						}
					}
				} else if(_this27.ws1.fluidEnabled) {
					var mass = _this27.overlap * _this27.ws1.fluidProperties.density;
					buoyx -= g1x * mass;
					buoyy -= g1y * mass;
				} else if(_this27.ws2.fluidEnabled) {
					var mass3 = _this27.overlap * _this27.ws2.fluidProperties.density;
					buoyx += g2x * mass3;
					buoyy += g2y * mass3;
				}
				buoyx *= dt;
				buoyy *= dt;
				_this27.buoyx = buoyx;
				_this27.buoyy = buoyy;
				if(_this27.b1.type == 2) {
					var t6 = _this27.b1.imass;
					_this27.b1.velx -= buoyx * t6;
					_this27.b1.vely -= buoyy * t6;
					_this27.b1.angvel -= (buoyy * _this27.r1x - buoyx * _this27.r1y) * _this27.b1.iinertia;
				}
				if(_this27.b2.type == 2) {
					var t7 = _this27.b2.imass;
					_this27.b2.velx += buoyx * t7;
					_this27.b2.vely += buoyy * t7;
					_this27.b2.angvel += (buoyy * _this27.r2x - buoyx * _this27.r2y) * _this27.b2.iinertia;
				}
				if((!_this27.ws1.fluidEnabled || _this27.ws1.fluidProperties.viscosity == 0) && (!_this27.ws2.fluidEnabled || _this27.ws2.fluidProperties.viscosity == 0)) {
					_this27.nodrag = true;
					_this27.dampx = 0;
					_this27.dampy = 0;
					_this27.adamp = 0;
				} else {
					_this27.nodrag = false;
					var tViscosity = 0.0;
					if(_this27.ws1.fluidEnabled) {
						_this27.ws2.validate_angDrag();
						tViscosity = _this27.ws1.fluidProperties.viscosity * _this27.ws2.angDrag * _this27.overlap / _this27.ws2.area;
					}
					if(_this27.ws2.fluidEnabled) {
						_this27.ws1.validate_angDrag();
						tViscosity += _this27.ws2.fluidProperties.viscosity * _this27.ws1.angDrag * _this27.overlap / _this27.ws1.area;
					}
					if(tViscosity != 0) {
						var iSum = _this27.b1.sinertia + _this27.b2.sinertia;
						if(iSum != 0) {
							_this27.wMass = 1 / iSum;
						} else {
							_this27.wMass = 0.0;
						}
						tViscosity *= 0.0004;
						var omega = 2 * Math.PI * tViscosity;
						_this27.agamma = 1 / (dt * omega * (2 + omega * dt));
						var ig = 1 / (1 + _this27.agamma);
						_this27.agamma *= ig;
						_this27.wMass *= ig;
					} else {
						_this27.wMass = 0.0;
						_this27.agamma = 0.0;
					}
					var vrnx = _this27.b2.velx + _this27.b2.kinvelx - _this27.r2y * (_this27.b2.angvel + _this27.b2.kinangvel) - (_this27.b1.velx + _this27.b1.kinvelx - _this27.r1y * (_this27.b2.angvel + _this27.b2.kinangvel));
					var vrny = _this27.b2.vely + _this27.b2.kinvely + _this27.r2x * (_this27.b2.angvel + _this27.b2.kinangvel) - (_this27.b1.vely + _this27.b1.kinvely + _this27.r1x * (_this27.b1.angvel + _this27.b1.kinangvel));
					if(!(vrnx * vrnx + vrny * vrny < Config.epsilon * Config.epsilon)) {
						var imag = 1.0 / Math.sqrt(vrnx * vrnx + vrny * vrny);
						vrnx *= imag;
						vrny *= imag;
						_this27.nx = vrnx;
						_this27.ny = vrny;
					}
					var tViscosity1 = 0.0;
					if(_this27.ws1.fluidEnabled) {
						var f = -_this27.ws1.fluidProperties.viscosity * _this27.overlap / _this27.ws2.area;
						if(_this27.ws2.type == 0) {
							tViscosity1 = 0.0 - f * _this27.ws2.circle.radius * Config.fluidLinearDrag / (2 * _this27.ws2.circle.radius * Math.PI);
						} else {
							var poly = _this27.ws2.polygon;
							var bord = 0.0;
							var acc = 0.0;
							var cx_ite9 = poly.edges.head;
							while(cx_ite9 != null) {
								var ex = cx_ite9.elt;
								bord += ex.length;
								var fact = f * ex.length * (ex.gnormx * _this27.nx + ex.gnormy * _this27.ny);
								if(fact > 0) {
									fact *= -Config.fluidVacuumDrag;
									fact = fact;
								}
								acc -= fact * 0.5 * Config.fluidLinearDrag;
								cx_ite9 = cx_ite9.next;
							}
							tViscosity1 = acc / bord;
						}
					}
					if(_this27.ws2.fluidEnabled) {
						var f1 = -_this27.ws2.fluidProperties.viscosity * _this27.overlap / _this27.ws1.area;
						if(_this27.ws1.type == 0) {
							tViscosity1 -= f1 * _this27.ws1.circle.radius * Config.fluidLinearDrag / (2 * _this27.ws1.circle.radius * Math.PI);
						} else {
							var poly1 = _this27.ws1.polygon;
							var bord1 = 0.0;
							var acc1 = 0.0;
							var cx_ite10 = poly1.edges.head;
							while(cx_ite10 != null) {
								var ex1 = cx_ite10.elt;
								bord1 += ex1.length;
								var fact1 = f1 * ex1.length * (ex1.gnormx * _this27.nx + ex1.gnormy * _this27.ny);
								if(fact1 > 0) {
									fact1 *= -Config.fluidVacuumDrag;
									fact1 = fact1;
								}
								acc1 -= fact1 * 0.5 * Config.fluidLinearDrag;
								cx_ite10 = cx_ite10.next;
							}
							tViscosity1 += acc1 / bord1;
						}
					}
					if(tViscosity1 != 0) {
						var m = _this27.b1.smass + _this27.b2.smass;
						var Ka = 0.0;
						var Kb = 0.0;
						var Kc = 0.0;
						Ka = m;
						Kb = 0;
						Kc = m;
						if(_this27.b1.sinertia != 0) {
							var X = _this27.r1x * _this27.b1.sinertia;
							var Y = _this27.r1y * _this27.b1.sinertia;
							Ka = m + Y * _this27.r1y;
							Kb += -Y * _this27.r1x;
							Kc = m + X * _this27.r1x;
						}
						if(_this27.b2.sinertia != 0) {
							var X1 = _this27.r2x * _this27.b2.sinertia;
							var Y1 = _this27.r2y * _this27.b2.sinertia;
							Ka += Y1 * _this27.r2y;
							Kb += -Y1 * _this27.r2x;
							Kc += X1 * _this27.r2x;
						}
						var det1 = Ka * Kc - Kb * Kb;
						if(det1 != det1) {
							Kc = 0;
							Kb = Kc;
							Ka = Kb;
						} else if(det1 == 0) {
							if(Ka != 0) {
								Ka = 1 / Ka;
							} else {
								Ka = 0;
							}
							if(Kc != 0) {
								Kc = 1 / Kc;
							} else {
								Kc = 0;
							}
							Kb = 0;
						} else {
							det1 = 1 / det1;
							var t8 = Kc * det1;
							Kc = Ka * det1;
							Ka = t8;
							Kb *= -det1;
						}
						_this27.vMassa = Ka;
						_this27.vMassb = Kb;
						_this27.vMassc = Kc;
						var omega1 = 2 * Math.PI * tViscosity1;
						_this27.lgamma = 1 / (dt * omega1 * (2 + omega1 * dt));
						var ig1 = 1 / (1 + _this27.lgamma);
						_this27.lgamma *= ig1;
						_this27.vMassa *= ig1;
						_this27.vMassb *= ig1;
						_this27.vMassc *= ig1;
					} else {
						_this27.vMassa = 0;
						_this27.vMassb = 0;
						_this27.vMassc = 0;
						_this27.lgamma = 0.0;
					}
				}
				_this27.dampx *= dtratio1;
				_this27.dampy *= dtratio1;
				_this27.adamp *= dtratio1;
			}
		}
	} else if(arb.colarb != null) {
		var _this28 = arb.colarb;
		var fst1 = true;
		var pre7 = null;
		var prei1 = null;
		var cx_itei1 = _this28.innards.next;
		_this28.hc2 = false;
		var cx_ite11 = _this28.contacts.next;
		while(cx_ite11 != null) {
			var c3 = cx_ite11;
			if(c3.stamp + Config.arbiterExpirationDelay < _this28.stamp) {
				var _this29 = _this28.contacts;
				var old8;
				var ret26;
				if(pre7 == null) {
					old8 = _this29.next;
					ret26 = old8.next;
					_this29.next = ret26;
					if(_this29.next == null) {
						_this29.pushmod = true;
					}
				} else {
					old8 = pre7.next;
					ret26 = old8.next;
					pre7.next = ret26;
					if(ret26 == null) {
						_this29.pushmod = true;
					}
				}
				old8._inuse = false;
				_this29.modified = true;
				_this29.length--;
				_this29.pushmod = true;
				cx_ite11 = ret26;
				var _this30 = _this28.innards;
				var old9;
				var ret27;
				if(prei1 == null) {
					old9 = _this30.next;
					ret27 = old9.next;
					_this30.next = ret27;
					if(_this30.next == null) {
						_this30.pushmod = true;
					}
				} else {
					old9 = prei1.next;
					ret27 = old9.next;
					prei1.next = ret27;
					if(ret27 == null) {
						_this30.pushmod = true;
					}
				}
				old9._inuse = false;
				_this30.modified = true;
				_this30.length--;
				_this30.pushmod = true;
				cx_itei1 = ret27;
				c3.arbiter = null;
				c3.next = ZPP_Contact.zpp_pool;
				ZPP_Contact.zpp_pool = c3;
				continue;
			}
			var ci1 = c3.inner;
			var pact2 = c3.active;
			c3.active = c3.stamp == _this28.stamp;
			if(c3.active) {
				if(fst1) {
					fst1 = false;
					_this28.c1 = ci1;
					_this28.oc1 = c3;
				} else {
					_this28.hc2 = true;
					_this28.c2 = ci1;
					_this28.oc2 = c3;
				}
			}
			if(pact2 != c3.active) {
				_this28.contacts.modified = true;
			}
			pre7 = cx_ite11;
			prei1 = cx_itei1;
			cx_itei1 = cx_itei1.next;
			cx_ite11 = cx_ite11.next;
		}
		if(_this28.hc2) {
			_this28.hpc2 = true;
			if(_this28.oc1.posOnly) {
				var tmp4 = _this28.c1;
				_this28.c1 = _this28.c2;
				_this28.c2 = tmp4;
				var tmp22 = _this28.oc1;
				_this28.oc1 = _this28.oc2;
				_this28.oc2 = tmp22;
				_this28.hc2 = false;
			} else if(_this28.oc2.posOnly) {
				_this28.hc2 = false;
			}
			if(_this28.oc1.posOnly) {
				fst1 = true;
			}
		} else {
			_this28.hpc2 = false;
		}
		if(fst1) {
			arb.active = false;
		}
	}
	if(pact != arb.active) {
		arb.b1.arbiters.modified = true;
		arb.b2.arbiters.modified = true;
		this.c_arbiters_true.modified = this.c_arbiters_false.modified = true;
		this.s_arbiters.modified = this.f_arbiters.modified = true;
	}
	return false;
};
ZPP_Space.prototype.prestep = function(dt) {
	var pre = null;
	var cx_ite = this.live_constraints.head;
	while(cx_ite != null) {
		var con = cx_ite.elt;
		if(con.preStep(dt)) {
			cx_ite = this.live_constraints.erase(pre);
			con.broken();
			this.constraintCbBreak(con);
			if(con.removeOnBreak) {
				con.component.sleeping = true;
				this.midstep = false;
				if(con.compound != null) {
					con.compound.wrap_constraints.remove(con.outer);
				} else {
					this.wrap_constraints.remove(con.outer);
				}
				this.midstep = true;
			} else {
				con.active = false;
			}
			con.clearcache();
			continue;
		}
		pre = cx_ite;
		cx_ite = cx_ite.next;
	}
	var pre1 = null;
	var arbs = this.c_arbiters_true;
	var arbite = arbs.head;
	var fst = this.c_arbiters_false != null;
	if(fst && arbite == null) {
		fst = false;
		arbite = this.c_arbiters_false.head;
		arbs = this.c_arbiters_false;
		pre1 = null;
	}
	while(arbite != null) {
		if(this.presteparb(arbite.elt,dt)) {
			var old;
			var ret;
			if(pre1 == null) {
				old = arbs.head;
				ret = old.next;
				arbs.head = ret;
				if(arbs.head == null) {
					arbs.pushmod = true;
				}
			} else {
				old = pre1.next;
				ret = old.next;
				pre1.next = ret;
				if(ret == null) {
					arbs.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_ColArbiter.zpp_pool;
			ZNPNode_ZPP_ColArbiter.zpp_pool = o;
			arbs.modified = true;
			arbs.length--;
			arbs.pushmod = true;
			arbite = ret;
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.head;
				arbs = this.c_arbiters_false;
				pre1 = null;
			}
			continue;
		}
		pre1 = arbite;
		arbite = arbite.next;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.head;
			arbs = this.c_arbiters_false;
			pre1 = null;
		}
	}
	var pre2 = null;
	var arbs1 = this.f_arbiters;
	var arbite1 = arbs1.head;
	while(arbite1 != null) {
		if(this.presteparb(arbite1.elt,dt)) {
			var old1;
			var ret1;
			if(pre2 == null) {
				old1 = arbs1.head;
				ret1 = old1.next;
				arbs1.head = ret1;
				if(arbs1.head == null) {
					arbs1.pushmod = true;
				}
			} else {
				old1 = pre2.next;
				ret1 = old1.next;
				pre2.next = ret1;
				if(ret1 == null) {
					arbs1.pushmod = true;
				}
			}
			var o1 = old1;
			o1.elt = null;
			o1.next = ZNPNode_ZPP_FluidArbiter.zpp_pool;
			ZNPNode_ZPP_FluidArbiter.zpp_pool = o1;
			arbs1.modified = true;
			arbs1.length--;
			arbs1.pushmod = true;
			arbite1 = ret1;
			continue;
		}
		pre2 = arbite1;
		arbite1 = arbite1.next;
	}
	var pre3 = null;
	var arbs2 = this.s_arbiters;
	var arbite2 = arbs2.head;
	while(arbite2 != null) {
		if(this.presteparb(arbite2.elt,dt)) {
			var old2;
			var ret2;
			if(pre3 == null) {
				old2 = arbs2.head;
				ret2 = old2.next;
				arbs2.head = ret2;
				if(arbs2.head == null) {
					arbs2.pushmod = true;
				}
			} else {
				old2 = pre3.next;
				ret2 = old2.next;
				pre3.next = ret2;
				if(ret2 == null) {
					arbs2.pushmod = true;
				}
			}
			var o2 = old2;
			o2.elt = null;
			o2.next = ZNPNode_ZPP_SensorArbiter.zpp_pool;
			ZNPNode_ZPP_SensorArbiter.zpp_pool = o2;
			arbs2.modified = true;
			arbs2.length--;
			arbs2.pushmod = true;
			arbite2 = ret2;
			continue;
		}
		pre3 = arbite2;
		arbite2 = arbite2.next;
	}
};
ZPP_Space.prototype.warmStart = function() {
	var cx_ite = this.f_arbiters.head;
	while(cx_ite != null) {
		var arb = cx_ite.elt;
		if(arb.active && (arb.immState & 1) != 0) {
			var t = arb.b1.imass;
			arb.b1.velx -= arb.dampx * t;
			arb.b1.vely -= arb.dampy * t;
			var t1 = arb.b2.imass;
			arb.b2.velx += arb.dampx * t1;
			arb.b2.vely += arb.dampy * t1;
			arb.b1.angvel -= arb.b1.iinertia * (arb.dampy * arb.r1x - arb.dampx * arb.r1y);
			arb.b2.angvel += arb.b2.iinertia * (arb.dampy * arb.r2x - arb.dampx * arb.r2y);
			arb.b1.angvel -= arb.adamp * arb.b1.iinertia;
			arb.b2.angvel += arb.adamp * arb.b2.iinertia;
		}
		cx_ite = cx_ite.next;
	}
	var arbi = this.c_arbiters_false.head;
	var fst = true;
	if(arbi == null) {
		arbi = this.c_arbiters_true.head;
		fst = false;
	}
	while(arbi != null) {
		var arb1 = arbi.elt;
		if(arb1.active && (arb1.immState & 1) != 0) {
			var jx = arb1.nx * arb1.c1.jnAcc - arb1.ny * arb1.c1.jtAcc;
			var jy = arb1.ny * arb1.c1.jnAcc + arb1.nx * arb1.c1.jtAcc;
			var t2 = arb1.b1.imass;
			arb1.b1.velx -= jx * t2;
			arb1.b1.vely -= jy * t2;
			arb1.b1.angvel -= arb1.b1.iinertia * (jy * arb1.c1.r1x - jx * arb1.c1.r1y);
			var t3 = arb1.b2.imass;
			arb1.b2.velx += jx * t3;
			arb1.b2.vely += jy * t3;
			arb1.b2.angvel += arb1.b2.iinertia * (jy * arb1.c1.r2x - jx * arb1.c1.r2y);
			if(arb1.hc2) {
				var jx1 = arb1.nx * arb1.c2.jnAcc - arb1.ny * arb1.c2.jtAcc;
				var jy1 = arb1.ny * arb1.c2.jnAcc + arb1.nx * arb1.c2.jtAcc;
				var t4 = arb1.b1.imass;
				arb1.b1.velx -= jx1 * t4;
				arb1.b1.vely -= jy1 * t4;
				arb1.b1.angvel -= arb1.b1.iinertia * (jy1 * arb1.c2.r1x - jx1 * arb1.c2.r1y);
				var t5 = arb1.b2.imass;
				arb1.b2.velx += jx1 * t5;
				arb1.b2.vely += jy1 * t5;
				arb1.b2.angvel += arb1.b2.iinertia * (jy1 * arb1.c2.r2x - jx1 * arb1.c2.r2y);
			}
			arb1.b2.angvel += arb1.jrAcc * arb1.b2.iinertia;
			arb1.b1.angvel -= arb1.jrAcc * arb1.b1.iinertia;
		}
		arbi = arbi.next;
		if(fst && arbi == null) {
			arbi = this.c_arbiters_true.head;
			fst = false;
		}
	}
	var cx_ite1 = this.live_constraints.head;
	while(cx_ite1 != null) {
		cx_ite1.elt.warmStart();
		cx_ite1 = cx_ite1.next;
	}
};
ZPP_Space.prototype.iterateVel = function(times) {
	var _g1 = 0;
	while(_g1 < times) {
		++_g1;
		var cx_ite = this.f_arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(arb.active && (arb.immState & 1) != 0) {
				if(!arb.nodrag) {
					var w1 = arb.b1.angvel + arb.b1.kinangvel;
					var w2 = arb.b2.angvel + arb.b2.kinangvel;
					var jx = arb.b1.velx + arb.b1.kinvelx - arb.r1y * w1 - (arb.b2.velx + arb.b2.kinvelx - arb.r2y * w2);
					var jy = arb.b1.vely + arb.b1.kinvely + arb.r1x * w1 - (arb.b2.vely + arb.b2.kinvely + arb.r2x * w2);
					var t = arb.vMassa * jx + arb.vMassb * jy;
					jy = arb.vMassb * jx + arb.vMassc * jy;
					jx = t;
					var t1 = arb.lgamma;
					jx -= arb.dampx * t1;
					jy -= arb.dampy * t1;
					arb.dampx += jx;
					arb.dampy += jy;
					var t2 = arb.b1.imass;
					arb.b1.velx -= jx * t2;
					arb.b1.vely -= jy * t2;
					var t3 = arb.b2.imass;
					arb.b2.velx += jx * t3;
					arb.b2.vely += jy * t3;
					arb.b1.angvel -= arb.b1.iinertia * (jy * arb.r1x - jx * arb.r1y);
					arb.b2.angvel += arb.b2.iinertia * (jy * arb.r2x - jx * arb.r2y);
					var j_damp = (w1 - w2) * arb.wMass - arb.adamp * arb.agamma;
					arb.adamp += j_damp;
					arb.b1.angvel -= j_damp * arb.b1.iinertia;
					arb.b2.angvel += j_damp * arb.b2.iinertia;
				}
			}
			cx_ite = cx_ite.next;
		}
		var pre = null;
		var cx_ite1 = this.live_constraints.head;
		while(cx_ite1 != null) {
			var con = cx_ite1.elt;
			if(con.applyImpulseVel()) {
				cx_ite1 = this.live_constraints.erase(pre);
				con.broken();
				this.constraintCbBreak(con);
				if(con.removeOnBreak) {
					con.component.sleeping = true;
					this.midstep = false;
					if(con.compound != null) {
						con.compound.wrap_constraints.remove(con.outer);
					} else {
						this.wrap_constraints.remove(con.outer);
					}
					this.midstep = true;
				} else {
					con.active = false;
				}
				con.clearcache();
				continue;
			}
			pre = cx_ite1;
			cx_ite1 = cx_ite1.next;
		}
		var arbi = this.c_arbiters_false.head;
		var fst = true;
		if(arbi == null) {
			arbi = this.c_arbiters_true.head;
			fst = false;
		}
		while(arbi != null) {
			var arb1 = arbi.elt;
			if(arb1.active && (arb1.immState & 1) != 0) {
				var jx1;
				var jy1;
				var j;
				var jMax;
				var jOld;
				var cjAcc;
				var v1x = arb1.k1x + arb1.b2.velx - arb1.c1.r2y * arb1.b2.angvel - (arb1.b1.velx - arb1.c1.r1y * arb1.b1.angvel);
				var v1y = arb1.k1y + arb1.b2.vely + arb1.c1.r2x * arb1.b2.angvel - (arb1.b1.vely + arb1.c1.r1x * arb1.b1.angvel);
				j = (v1y * arb1.nx - v1x * arb1.ny + arb1.surfacex) * arb1.c1.tMass;
				jMax = arb1.c1.friction * arb1.c1.jnAcc;
				jOld = arb1.c1.jtAcc;
				cjAcc = jOld - j;
				if(cjAcc > jMax) {
					cjAcc = jMax;
				} else if(cjAcc < -jMax) {
					cjAcc = -jMax;
				}
				j = cjAcc - jOld;
				arb1.c1.jtAcc = cjAcc;
				jx1 = -arb1.ny * j;
				jy1 = arb1.nx * j;
				arb1.b2.velx += jx1 * arb1.b2.imass;
				arb1.b2.vely += jy1 * arb1.b2.imass;
				arb1.b1.velx -= jx1 * arb1.b1.imass;
				arb1.b1.vely -= jy1 * arb1.b1.imass;
				arb1.b2.angvel += arb1.rt1b * j * arb1.b2.iinertia;
				arb1.b1.angvel -= arb1.rt1a * j * arb1.b1.iinertia;
				if(arb1.hc2) {
					var v2x = arb1.k2x + arb1.b2.velx - arb1.c2.r2y * arb1.b2.angvel - (arb1.b1.velx - arb1.c2.r1y * arb1.b1.angvel);
					var v2y = arb1.k2y + arb1.b2.vely + arb1.c2.r2x * arb1.b2.angvel - (arb1.b1.vely + arb1.c2.r1x * arb1.b1.angvel);
					j = (v2y * arb1.nx - v2x * arb1.ny + arb1.surfacex) * arb1.c2.tMass;
					jMax = arb1.c2.friction * arb1.c2.jnAcc;
					jOld = arb1.c2.jtAcc;
					cjAcc = jOld - j;
					if(cjAcc > jMax) {
						cjAcc = jMax;
					} else if(cjAcc < -jMax) {
						cjAcc = -jMax;
					}
					j = cjAcc - jOld;
					arb1.c2.jtAcc = cjAcc;
					jx1 = -arb1.ny * j;
					jy1 = arb1.nx * j;
					arb1.b2.velx += jx1 * arb1.b2.imass;
					arb1.b2.vely += jy1 * arb1.b2.imass;
					arb1.b1.velx -= jx1 * arb1.b1.imass;
					arb1.b1.vely -= jy1 * arb1.b1.imass;
					arb1.b2.angvel += arb1.rt2b * j * arb1.b2.iinertia;
					arb1.b1.angvel -= arb1.rt2a * j * arb1.b1.iinertia;
					v1x = arb1.k1x + arb1.b2.velx - arb1.c1.r2y * arb1.b2.angvel - (arb1.b1.velx - arb1.c1.r1y * arb1.b1.angvel);
					v1y = arb1.k1y + arb1.b2.vely + arb1.c1.r2x * arb1.b2.angvel - (arb1.b1.vely + arb1.c1.r1x * arb1.b1.angvel);
					v2x = arb1.k2x + arb1.b2.velx - arb1.c2.r2y * arb1.b2.angvel - (arb1.b1.velx - arb1.c2.r1y * arb1.b1.angvel);
					v2y = arb1.k2y + arb1.b2.vely + arb1.c2.r2x * arb1.b2.angvel - (arb1.b1.vely + arb1.c2.r1x * arb1.b1.angvel);
					var ax = arb1.c1.jnAcc;
					var ay = arb1.c2.jnAcc;
					var jnx = v1x * arb1.nx + v1y * arb1.ny + arb1.surfacey + arb1.c1.bounce - (arb1.Ka * ax + arb1.Kb * ay);
					var jny = v2x * arb1.nx + v2y * arb1.ny + arb1.surfacey + arb1.c2.bounce - (arb1.Kb * ax + arb1.Kc * ay);
					var xx = -(arb1.kMassa * jnx + arb1.kMassb * jny);
					var xy = -(arb1.kMassb * jnx + arb1.kMassc * jny);
					if(xx >= 0 && xy >= 0) {
						jnx = xx - ax;
						jny = xy - ay;
						arb1.c1.jnAcc = xx;
						arb1.c2.jnAcc = xy;
					} else {
						xx = -arb1.c1.nMass * jnx;
						if(xx >= 0 && arb1.Kb * xx + jny >= 0) {
							jnx = xx - ax;
							jny = -ay;
							arb1.c1.jnAcc = xx;
							arb1.c2.jnAcc = 0;
						} else {
							xy = -arb1.c2.nMass * jny;
							if(xy >= 0 && arb1.Kb * xy + jnx >= 0) {
								jnx = -ax;
								jny = xy - ay;
								arb1.c1.jnAcc = 0;
								arb1.c2.jnAcc = xy;
							} else if(jnx >= 0 && jny >= 0) {
								jnx = -ax;
								jny = -ay;
								arb1.c1.jnAcc = arb1.c2.jnAcc = 0;
							} else {
								jnx = 0;
								jny = 0;
							}
						}
					}
					j = jnx + jny;
					jx1 = arb1.nx * j;
					jy1 = arb1.ny * j;
					arb1.b2.velx += jx1 * arb1.b2.imass;
					arb1.b2.vely += jy1 * arb1.b2.imass;
					arb1.b1.velx -= jx1 * arb1.b1.imass;
					arb1.b1.vely -= jy1 * arb1.b1.imass;
					arb1.b2.angvel += (arb1.rn1b * jnx + arb1.rn2b * jny) * arb1.b2.iinertia;
					arb1.b1.angvel -= (arb1.rn1a * jnx + arb1.rn2a * jny) * arb1.b1.iinertia;
				} else {
					if(arb1.radius != 0.0) {
						j = (arb1.b2.angvel - arb1.b1.angvel) * arb1.rMass;
						jMax = arb1.rfric * arb1.c1.jnAcc;
						jOld = arb1.jrAcc;
						arb1.jrAcc -= j;
						if(arb1.jrAcc > jMax) {
							arb1.jrAcc = jMax;
						} else if(arb1.jrAcc < -jMax) {
							arb1.jrAcc = -jMax;
						}
						j = arb1.jrAcc - jOld;
						arb1.b2.angvel += j * arb1.b2.iinertia;
						arb1.b1.angvel -= j * arb1.b1.iinertia;
					}
					v1x = arb1.k1x + arb1.b2.velx - arb1.c1.r2y * arb1.b2.angvel - (arb1.b1.velx - arb1.c1.r1y * arb1.b1.angvel);
					v1y = arb1.k1y + arb1.b2.vely + arb1.c1.r2x * arb1.b2.angvel - (arb1.b1.vely + arb1.c1.r1x * arb1.b1.angvel);
					j = (arb1.c1.bounce + (arb1.nx * v1x + arb1.ny * v1y) + arb1.surfacey) * arb1.c1.nMass;
					jOld = arb1.c1.jnAcc;
					cjAcc = jOld - j;
					if(cjAcc < 0.0) {
						cjAcc = 0.0;
					}
					j = cjAcc - jOld;
					arb1.c1.jnAcc = cjAcc;
					jx1 = arb1.nx * j;
					jy1 = arb1.ny * j;
					arb1.b2.velx += jx1 * arb1.b2.imass;
					arb1.b2.vely += jy1 * arb1.b2.imass;
					arb1.b1.velx -= jx1 * arb1.b1.imass;
					arb1.b1.vely -= jy1 * arb1.b1.imass;
					arb1.b2.angvel += arb1.rn1b * j * arb1.b2.iinertia;
					arb1.b1.angvel -= arb1.rn1a * j * arb1.b1.iinertia;
				}
			}
			arbi = arbi.next;
			if(fst && arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
		}
	}
};
ZPP_Space.prototype.iteratePos = function(times) {
	var _g1 = 0;
	while(_g1 < times) {
		++_g1;
		var pre = null;
		var cx_ite = this.live_constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(!con.__velocity && con.stiff) {
				if(con.applyImpulsePos()) {
					cx_ite = this.live_constraints.erase(pre);
					con.broken();
					this.constraintCbBreak(con);
					if(con.removeOnBreak) {
						con.component.sleeping = true;
						this.midstep = false;
						if(con.compound != null) {
							con.compound.wrap_constraints.remove(con.outer);
						} else {
							this.wrap_constraints.remove(con.outer);
						}
						this.midstep = true;
					} else {
						con.active = false;
					}
					con.clearcache();
					continue;
				}
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		var arbi = this.c_arbiters_false.head;
		var fst = true;
		if(arbi == null) {
			arbi = this.c_arbiters_true.head;
			fst = false;
		}
		while(arbi != null) {
			var arb = arbi.elt;
			if(arb.active && (arb.immState & 1) != 0) {
				if(arb.ptype == 2) {
					var c = arb.c1;
					var r2x = 0.0;
					var r2y = 0.0;
					r2x = arb.b2.axisy * c.lr2x - arb.b2.axisx * c.lr2y;
					r2y = c.lr2x * arb.b2.axisx + c.lr2y * arb.b2.axisy;
					r2x += arb.b2.posx;
					r2y += arb.b2.posy;
					var r1x = 0.0;
					var r1y = 0.0;
					r1x = arb.b1.axisy * c.lr1x - arb.b1.axisx * c.lr1y;
					r1y = c.lr1x * arb.b1.axisx + c.lr1y * arb.b1.axisy;
					r1x += arb.b1.posx;
					r1y += arb.b1.posy;
					var dx = 0.0;
					var dy = 0.0;
					dx = r2x - r1x;
					dy = r2y - r1y;
					var dl = Math.sqrt(dx * dx + dy * dy);
					var r = arb.radius - Config.collisionSlop;
					var err = dl - r;
					if(dx * arb.nx + dy * arb.ny < 0) {
						dx = -dx;
						dy = -dy;
						err -= arb.radius;
					}
					if(err < 0) {
						if(dl < Config.epsilon) {
							if(arb.b1.smass != 0.0) {
								arb.b1.posx += Config.epsilon * 10;
							} else {
								arb.b2.posx += Config.epsilon * 10;
							}
						} else {
							var t = 1.0 / dl;
							dx *= t;
							dy *= t;
							var px = 0.5 * (r1x + r2x);
							var py = 0.5 * (r1y + r2y);
							var pen = dl - r;
							r1x = px - arb.b1.posx;
							r1y = py - arb.b1.posy;
							r2x = px - arb.b2.posx;
							r2y = py - arb.b2.posy;
							var rn1 = dy * r1x - dx * r1y;
							var rn2 = dy * r2x - dx * r2y;
							var K = arb.b2.smass + rn2 * rn2 * arb.b2.sinertia + arb.b1.smass + rn1 * rn1 * arb.b1.sinertia;
							if(K != 0) {
								var jn = -arb.biasCoef * pen / K;
								var Jx = 0.0;
								var Jy = 0.0;
								Jx = dx * jn;
								Jy = dy * jn;
								var t1 = arb.b1.imass;
								arb.b1.posx -= Jx * t1;
								arb.b1.posy -= Jy * t1;
								var _this = arb.b1;
								var dr = -rn1 * arb.b1.iinertia * jn;
								_this.rot += dr;
								if(dr * dr > 0.0001) {
									_this.axisx = Math.sin(_this.rot);
									_this.axisy = Math.cos(_this.rot);
								} else {
									var d2 = dr * dr;
									var p = 1 - 0.5 * d2;
									var m = 1 - d2 * d2 / 8;
									var nx = (p * _this.axisx + dr * _this.axisy) * m;
									_this.axisy = (p * _this.axisy - dr * _this.axisx) * m;
									_this.axisx = nx;
								}
								var t2 = arb.b2.imass;
								arb.b2.posx += Jx * t2;
								arb.b2.posy += Jy * t2;
								var _this1 = arb.b2;
								var dr1 = rn2 * arb.b2.iinertia * jn;
								_this1.rot += dr1;
								if(dr1 * dr1 > 0.0001) {
									_this1.axisx = Math.sin(_this1.rot);
									_this1.axisy = Math.cos(_this1.rot);
								} else {
									var d21 = dr1 * dr1;
									var p1 = 1 - 0.5 * d21;
									var m1 = 1 - d21 * d21 / 8;
									var nx1 = (p1 * _this1.axisx + dr1 * _this1.axisy) * m1;
									_this1.axisy = (p1 * _this1.axisy - dr1 * _this1.axisx) * m1;
									_this1.axisx = nx1;
								}
							}
						}
					}
				} else {
					var gnormx = 0.0;
					var gnormy = 0.0;
					var gproj;
					var clip1x = 0.0;
					var clip1y = 0.0;
					var clip2x = 0;
					var clip2y = 0;
					if(arb.ptype == 0) {
						gnormx = arb.b1.axisy * arb.lnormx - arb.b1.axisx * arb.lnormy;
						gnormy = arb.lnormx * arb.b1.axisx + arb.lnormy * arb.b1.axisy;
						gproj = arb.lproj + (gnormx * arb.b1.posx + gnormy * arb.b1.posy);
						clip1x = arb.b2.axisy * arb.c1.lr1x - arb.b2.axisx * arb.c1.lr1y;
						clip1y = arb.c1.lr1x * arb.b2.axisx + arb.c1.lr1y * arb.b2.axisy;
						clip1x += arb.b2.posx;
						clip1y += arb.b2.posy;
						if(arb.hpc2) {
							clip2x = arb.b2.axisy * arb.c2.lr1x - arb.b2.axisx * arb.c2.lr1y;
							clip2y = arb.c2.lr1x * arb.b2.axisx + arb.c2.lr1y * arb.b2.axisy;
							clip2x += arb.b2.posx;
							clip2y += arb.b2.posy;
						}
					} else {
						gnormx = arb.b2.axisy * arb.lnormx - arb.b2.axisx * arb.lnormy;
						gnormy = arb.lnormx * arb.b2.axisx + arb.lnormy * arb.b2.axisy;
						gproj = arb.lproj + (gnormx * arb.b2.posx + gnormy * arb.b2.posy);
						clip1x = arb.b1.axisy * arb.c1.lr1x - arb.b1.axisx * arb.c1.lr1y;
						clip1y = arb.c1.lr1x * arb.b1.axisx + arb.c1.lr1y * arb.b1.axisy;
						clip1x += arb.b1.posx;
						clip1y += arb.b1.posy;
						if(arb.hpc2) {
							clip2x = arb.b1.axisy * arb.c2.lr1x - arb.b1.axisx * arb.c2.lr1y;
							clip2y = arb.c2.lr1x * arb.b1.axisx + arb.c2.lr1y * arb.b1.axisy;
							clip2x += arb.b1.posx;
							clip2y += arb.b1.posy;
						}
					}
					var err1 = clip1x * gnormx + clip1y * gnormy - gproj - arb.radius;
					err1 += Config.collisionSlop;
					var err2 = 0.0;
					if(arb.hpc2) {
						err2 = clip2x * gnormx + clip2y * gnormy - gproj - arb.radius;
						err2 += Config.collisionSlop;
					}
					if(err1 < 0 || err2 < 0) {
						if(arb.rev) {
							gnormx = -gnormx;
							gnormy = -gnormy;
						}
						var c1r1x = 0.0;
						var c1r1y = 0.0;
						c1r1x = clip1x - arb.b1.posx;
						c1r1y = clip1y - arb.b1.posy;
						var c1r2x = 0.0;
						var c1r2y = 0.0;
						c1r2x = clip1x - arb.b2.posx;
						c1r2y = clip1y - arb.b2.posy;
						var c2r1x = 0;
						var c2r1y = 0;
						var c2r2x = 0;
						var c2r2y = 0;
						if(arb.hpc2) {
							c2r1x = clip2x - arb.b1.posx;
							c2r1y = clip2y - arb.b1.posy;
							c2r2x = clip2x - arb.b2.posx;
							c2r2y = clip2y - arb.b2.posy;
							var rn1a = gnormy * c1r1x - gnormx * c1r1y;
							var rn1b = gnormy * c1r2x - gnormx * c1r2y;
							var rn2a = gnormy * c2r1x - gnormx * c2r1y;
							var rn2b = gnormy * c2r2x - gnormx * c2r2y;
							var mass_sum = arb.b1.smass + arb.b2.smass;
							arb.kMassa = mass_sum + arb.b1.sinertia * rn1a * rn1a + arb.b2.sinertia * rn1b * rn1b;
							arb.kMassb = mass_sum + arb.b1.sinertia * rn1a * rn2a + arb.b2.sinertia * rn1b * rn2b;
							arb.kMassc = mass_sum + arb.b1.sinertia * rn2a * rn2a + arb.b2.sinertia * rn2b * rn2b;
							var Ka = 0.0;
							var Kb = 0.0;
							var Kc = 0.0;
							Ka = arb.kMassa;
							Kb = arb.kMassb;
							Kc = arb.kMassc;
							var bx = err1 * arb.biasCoef;
							var by = err2 * arb.biasCoef;
							while(true) {
								var xx = 0.0;
								var xy = 0.0;
								xx = bx;
								xy = by;
								xx = -bx;
								xy = -by;
								var det = arb.kMassa * arb.kMassc - arb.kMassb * arb.kMassb;
								if(det != det) {
									xy = 0;
									xx = xy;
								} else if(det == 0) {
									if(arb.kMassa != 0) {
										xx /= arb.kMassa;
									} else {
										xx = 0;
									}
									if(arb.kMassc != 0) {
										xy /= arb.kMassc;
									} else {
										xy = 0;
									}
								} else {
									det = 1 / det;
									var t3 = det * (arb.kMassc * xx - arb.kMassb * xy);
									xy = det * (arb.kMassa * xy - arb.kMassb * xx);
									xx = t3;
								}
								if(xx >= 0 && xy >= 0) {
									var t4 = (xx + xy) * arb.b1.imass;
									arb.b1.posx -= gnormx * t4;
									arb.b1.posy -= gnormy * t4;
									var _this2 = arb.b1;
									var dr2 = -arb.b1.iinertia * (rn1a * xx + rn2a * xy);
									_this2.rot += dr2;
									if(dr2 * dr2 > 0.0001) {
										_this2.axisx = Math.sin(_this2.rot);
										_this2.axisy = Math.cos(_this2.rot);
									} else {
										var d22 = dr2 * dr2;
										var p2 = 1 - 0.5 * d22;
										var m2 = 1 - d22 * d22 / 8;
										var nx2 = (p2 * _this2.axisx + dr2 * _this2.axisy) * m2;
										_this2.axisy = (p2 * _this2.axisy - dr2 * _this2.axisx) * m2;
										_this2.axisx = nx2;
									}
									var t5 = (xx + xy) * arb.b2.imass;
									arb.b2.posx += gnormx * t5;
									arb.b2.posy += gnormy * t5;
									var _this3 = arb.b2;
									var dr3 = arb.b2.iinertia * (rn1b * xx + rn2b * xy);
									_this3.rot += dr3;
									if(dr3 * dr3 > 0.0001) {
										_this3.axisx = Math.sin(_this3.rot);
										_this3.axisy = Math.cos(_this3.rot);
									} else {
										var d23 = dr3 * dr3;
										var p3 = 1 - 0.5 * d23;
										var m3 = 1 - d23 * d23 / 8;
										var nx3 = (p3 * _this3.axisx + dr3 * _this3.axisy) * m3;
										_this3.axisy = (p3 * _this3.axisy - dr3 * _this3.axisx) * m3;
										_this3.axisx = nx3;
									}
									break;
								}
								xx = -bx / Ka;
								xy = 0;
								var vn2 = Kb * xx + by;
								if(xx >= 0 && vn2 >= 0) {
									var t6 = (xx + xy) * arb.b1.imass;
									arb.b1.posx -= gnormx * t6;
									arb.b1.posy -= gnormy * t6;
									var _this4 = arb.b1;
									var dr4 = -arb.b1.iinertia * (rn1a * xx + rn2a * xy);
									_this4.rot += dr4;
									if(dr4 * dr4 > 0.0001) {
										_this4.axisx = Math.sin(_this4.rot);
										_this4.axisy = Math.cos(_this4.rot);
									} else {
										var d24 = dr4 * dr4;
										var p4 = 1 - 0.5 * d24;
										var m4 = 1 - d24 * d24 / 8;
										var nx4 = (p4 * _this4.axisx + dr4 * _this4.axisy) * m4;
										_this4.axisy = (p4 * _this4.axisy - dr4 * _this4.axisx) * m4;
										_this4.axisx = nx4;
									}
									var t7 = (xx + xy) * arb.b2.imass;
									arb.b2.posx += gnormx * t7;
									arb.b2.posy += gnormy * t7;
									var _this5 = arb.b2;
									var dr5 = arb.b2.iinertia * (rn1b * xx + rn2b * xy);
									_this5.rot += dr5;
									if(dr5 * dr5 > 0.0001) {
										_this5.axisx = Math.sin(_this5.rot);
										_this5.axisy = Math.cos(_this5.rot);
									} else {
										var d25 = dr5 * dr5;
										var p5 = 1 - 0.5 * d25;
										var m5 = 1 - d25 * d25 / 8;
										var nx5 = (p5 * _this5.axisx + dr5 * _this5.axisy) * m5;
										_this5.axisy = (p5 * _this5.axisy - dr5 * _this5.axisx) * m5;
										_this5.axisx = nx5;
									}
									break;
								}
								xx = 0;
								xy = -by / Kc;
								var vn1 = Kb * xy + bx;
								if(xy >= 0 && vn1 >= 0) {
									var t8 = (xx + xy) * arb.b1.imass;
									arb.b1.posx -= gnormx * t8;
									arb.b1.posy -= gnormy * t8;
									var _this6 = arb.b1;
									var dr6 = -arb.b1.iinertia * (rn1a * xx + rn2a * xy);
									_this6.rot += dr6;
									if(dr6 * dr6 > 0.0001) {
										_this6.axisx = Math.sin(_this6.rot);
										_this6.axisy = Math.cos(_this6.rot);
									} else {
										var d26 = dr6 * dr6;
										var p6 = 1 - 0.5 * d26;
										var m6 = 1 - d26 * d26 / 8;
										var nx6 = (p6 * _this6.axisx + dr6 * _this6.axisy) * m6;
										_this6.axisy = (p6 * _this6.axisy - dr6 * _this6.axisx) * m6;
										_this6.axisx = nx6;
									}
									var t9 = (xx + xy) * arb.b2.imass;
									arb.b2.posx += gnormx * t9;
									arb.b2.posy += gnormy * t9;
									var _this7 = arb.b2;
									var dr7 = arb.b2.iinertia * (rn1b * xx + rn2b * xy);
									_this7.rot += dr7;
									if(dr7 * dr7 > 0.0001) {
										_this7.axisx = Math.sin(_this7.rot);
										_this7.axisy = Math.cos(_this7.rot);
									} else {
										var d27 = dr7 * dr7;
										var p7 = 1 - 0.5 * d27;
										var m7 = 1 - d27 * d27 / 8;
										var nx7 = (p7 * _this7.axisx + dr7 * _this7.axisy) * m7;
										_this7.axisy = (p7 * _this7.axisy - dr7 * _this7.axisx) * m7;
										_this7.axisx = nx7;
									}
									break;
								}
								break;
							}
						} else {
							var rn11 = gnormy * c1r1x - gnormx * c1r1y;
							var rn21 = gnormy * c1r2x - gnormx * c1r2y;
							var K1 = arb.b2.smass + rn21 * rn21 * arb.b2.sinertia + arb.b1.smass + rn11 * rn11 * arb.b1.sinertia;
							if(K1 != 0) {
								var jn1 = -arb.biasCoef * err1 / K1;
								var Jx1 = 0.0;
								var Jy1 = 0.0;
								Jx1 = gnormx * jn1;
								Jy1 = gnormy * jn1;
								var t10 = arb.b1.imass;
								arb.b1.posx -= Jx1 * t10;
								arb.b1.posy -= Jy1 * t10;
								var _this8 = arb.b1;
								var dr8 = -rn11 * arb.b1.iinertia * jn1;
								_this8.rot += dr8;
								if(dr8 * dr8 > 0.0001) {
									_this8.axisx = Math.sin(_this8.rot);
									_this8.axisy = Math.cos(_this8.rot);
								} else {
									var d28 = dr8 * dr8;
									var p8 = 1 - 0.5 * d28;
									var m8 = 1 - d28 * d28 / 8;
									var nx8 = (p8 * _this8.axisx + dr8 * _this8.axisy) * m8;
									_this8.axisy = (p8 * _this8.axisy - dr8 * _this8.axisx) * m8;
									_this8.axisx = nx8;
								}
								var t11 = arb.b2.imass;
								arb.b2.posx += Jx1 * t11;
								arb.b2.posy += Jy1 * t11;
								var _this9 = arb.b2;
								var dr9 = rn21 * arb.b2.iinertia * jn1;
								_this9.rot += dr9;
								if(dr9 * dr9 > 0.0001) {
									_this9.axisx = Math.sin(_this9.rot);
									_this9.axisy = Math.cos(_this9.rot);
								} else {
									var d29 = dr9 * dr9;
									var p9 = 1 - 0.5 * d29;
									var m9 = 1 - d29 * d29 / 8;
									var nx9 = (p9 * _this9.axisx + dr9 * _this9.axisy) * m9;
									_this9.axisy = (p9 * _this9.axisy - dr9 * _this9.axisx) * m9;
									_this9.axisx = nx9;
								}
							}
						}
					}
				}
			}
			arbi = arbi.next;
			if(fst && arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
		}
	}
};
ZPP_Space.prototype.group_ignore = function(s1,s2) {
	var cur = s1;
	while(cur != null && cur.group == null) if(cur.ishape != null) {
		cur = cur.ishape.body;
	} else if(cur.icompound != null) {
		cur = cur.icompound.compound;
	} else {
		cur = cur.ibody.compound;
	}
	var g1 = cur == null?null:cur.group;
	if(g1 == null) {
		return false;
	} else {
		var cur1 = s2;
		while(cur1 != null && cur1.group == null) if(cur1.ishape != null) {
			cur1 = cur1.ishape.body;
		} else if(cur1.icompound != null) {
			cur1 = cur1.icompound.compound;
		} else {
			cur1 = cur1.ibody.compound;
		}
		var g2 = cur1 == null?null:cur1.group;
		if(g2 == null) {
			return false;
		} else {
			var ret = false;
			while(g1 != null && g2 != null) {
				if(g1 == g2) {
					ret = g1.ignore;
					break;
				}
				if(g1.depth < g2.depth) {
					g2 = g2.group;
				} else {
					g1 = g1.group;
				}
			}
			return ret;
		}
	}
};
ZPP_Space.prototype.interactionType = function(s1,s2,b1,b2) {
	var con_ignore;
	con_ignore = false;
	var cx_ite = b1.constraints.head;
	while(cx_ite != null) {
		var con = cx_ite.elt;
		if(con.ignore && con.pair_exists(b1.id,b2.id)) {
			con_ignore = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	var tmp;
	if(!con_ignore) {
		var cur = s1;
		while(cur != null && cur.group == null) if(cur.ishape != null) {
			cur = cur.ishape.body;
		} else if(cur.icompound != null) {
			cur = cur.icompound.compound;
		} else {
			cur = cur.ibody.compound;
		}
		var g1 = cur == null?null:cur.group;
		var tmp1;
		if(g1 == null) {
			tmp1 = false;
		} else {
			var cur1 = s2;
			while(cur1 != null && cur1.group == null) if(cur1.ishape != null) {
				cur1 = cur1.ishape.body;
			} else if(cur1.icompound != null) {
				cur1 = cur1.icompound.compound;
			} else {
				cur1 = cur1.ibody.compound;
			}
			var g2 = cur1 == null?null:cur1.group;
			if(g2 == null) {
				tmp1 = false;
			} else {
				var ret = false;
				while(g1 != null && g2 != null) {
					if(g1 == g2) {
						ret = g1.ignore;
						break;
					}
					if(g1.depth < g2.depth) {
						g2 = g2.group;
					} else {
						g1 = g1.group;
					}
				}
				tmp1 = ret;
			}
		}
		tmp = !tmp1;
	} else {
		tmp = false;
	}
	if(tmp) {
		var tmp2;
		if(s1.sensorEnabled || s2.sensorEnabled) {
			var _this = s1.filter;
			var x = s2.filter;
			if((_this.sensorMask & x.sensorGroup) != 0) {
				tmp2 = (x.sensorMask & _this.sensorGroup) != 0;
			} else {
				tmp2 = false;
			}
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			return 2;
		} else {
			var tmp3;
			var tmp4;
			if(s1.fluidEnabled || s2.fluidEnabled) {
				var _this1 = s1.filter;
				var x1 = s2.filter;
				if((_this1.fluidMask & x1.fluidGroup) != 0) {
					tmp4 = (x1.fluidMask & _this1.fluidGroup) != 0;
				} else {
					tmp4 = false;
				}
			} else {
				tmp4 = false;
			}
			if(tmp4) {
				tmp3 = !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0);
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				return 0;
			} else {
				var tmp5;
				var _this2 = s1.filter;
				var x2 = s2.filter;
				if((_this2.collisionMask & x2.collisionGroup) != 0 && (x2.collisionMask & _this2.collisionGroup) != 0) {
					tmp5 = !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0);
				} else {
					tmp5 = false;
				}
				if(tmp5) {
					return 1;
				} else {
					return -1;
				}
			}
		}
	} else {
		return -1;
	}
};
ZPP_Space.prototype.precb = null;
ZPP_Space.prototype.prelisteners = null;
ZPP_Space.prototype.narrowPhase = function(s1,s2,stat,in_arb,continuous) {
	var _gthis = this;
	var ret = null;
	var b1 = s1.body;
	var b2 = s2.body;
	var con_ignore;
	con_ignore = false;
	var cx_ite = b1.constraints.head;
	while(cx_ite != null) {
		var con = cx_ite.elt;
		if(con.ignore && con.pair_exists(b1.id,b2.id)) {
			con_ignore = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	var itype;
	var tmp;
	if(!con_ignore) {
		var cur = s1;
		while(cur != null && cur.group == null) if(cur.ishape != null) {
			cur = cur.ishape.body;
		} else if(cur.icompound != null) {
			cur = cur.icompound.compound;
		} else {
			cur = cur.ibody.compound;
		}
		var g1 = cur == null?null:cur.group;
		var tmp1;
		if(g1 == null) {
			tmp1 = false;
		} else {
			var cur1 = s2;
			while(cur1 != null && cur1.group == null) if(cur1.ishape != null) {
				cur1 = cur1.ishape.body;
			} else if(cur1.icompound != null) {
				cur1 = cur1.icompound.compound;
			} else {
				cur1 = cur1.ibody.compound;
			}
			var g2 = cur1 == null?null:cur1.group;
			if(g2 == null) {
				tmp1 = false;
			} else {
				var ret1 = false;
				while(g1 != null && g2 != null) {
					if(g1 == g2) {
						ret1 = g1.ignore;
						break;
					}
					if(g1.depth < g2.depth) {
						g2 = g2.group;
					} else {
						g1 = g1.group;
					}
				}
				tmp1 = ret1;
			}
		}
		tmp = !tmp1;
	} else {
		tmp = false;
	}
	if(tmp) {
		var tmp2;
		if(s1.sensorEnabled || s2.sensorEnabled) {
			var _this = s1.filter;
			var x = s2.filter;
			if((_this.sensorMask & x.sensorGroup) != 0) {
				tmp2 = (x.sensorMask & _this.sensorGroup) != 0;
			} else {
				tmp2 = false;
			}
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			itype = 2;
		} else {
			var tmp3;
			var tmp4;
			if(s1.fluidEnabled || s2.fluidEnabled) {
				var _this1 = s1.filter;
				var x1 = s2.filter;
				if((_this1.fluidMask & x1.fluidGroup) != 0) {
					tmp4 = (x1.fluidMask & _this1.fluidGroup) != 0;
				} else {
					tmp4 = false;
				}
			} else {
				tmp4 = false;
			}
			if(tmp4) {
				tmp3 = !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0);
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				itype = 0;
			} else {
				var tmp5;
				var _this2 = s1.filter;
				var x2 = s2.filter;
				if((_this2.collisionMask & x2.collisionGroup) != 0 && (x2.collisionMask & _this2.collisionGroup) != 0) {
					tmp5 = !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0);
				} else {
					tmp5 = false;
				}
				if(tmp5) {
					itype = 1;
				} else {
					itype = -1;
				}
			}
		}
	} else {
		itype = -1;
	}
	if(itype != -1) {
		var sa;
		var sb;
		if(s1.type > s2.type) {
			sa = s2;
			sb = s1;
		} else if(s1.type == s2.type) {
			if(s1.id < s2.id) {
				sa = s1;
				sb = s2;
			} else {
				sb = s1;
				sa = s2;
			}
		} else {
			sa = s1;
			sb = s2;
		}
		var reverse = sa == s2;
		if(itype == 0) {
			var xarb;
			if(in_arb == null) {
				var ret2 = null;
				var cx_ite1 = (b1.arbiters.length < b2.arbiters.length?b1:b2).arbiters.head;
				while(cx_ite1 != null) {
					var arb = cx_ite1.elt;
					if(arb.id == sa.id && arb.di == sb.id) {
						ret2 = arb;
						break;
					}
					cx_ite1 = cx_ite1.next;
				}
				xarb = ret2;
			} else {
				xarb = in_arb;
			}
			var first = xarb == null;
			var arb1;
			var swapped = false;
			if(first) {
				if(ZPP_FluidArbiter.zpp_pool == null) {
					arb1 = new ZPP_FluidArbiter();
				} else {
					arb1 = ZPP_FluidArbiter.zpp_pool;
					ZPP_FluidArbiter.zpp_pool = arb1.next;
					arb1.next = null;
				}
			} else if(xarb.fluidarb == null) {
				xarb.cleared = true;
				var _this3 = xarb.b1.arbiters;
				var pre = null;
				var cur2 = _this3.head;
				while(cur2 != null) {
					if(cur2.elt == xarb) {
						var old;
						var ret3;
						if(pre == null) {
							old = _this3.head;
							ret3 = old.next;
							_this3.head = ret3;
							if(_this3.head == null) {
								_this3.pushmod = true;
							}
						} else {
							old = pre.next;
							ret3 = old.next;
							pre.next = ret3;
							if(ret3 == null) {
								_this3.pushmod = true;
							}
						}
						var o = old;
						o.elt = null;
						o.next = ZNPNode_ZPP_Arbiter.zpp_pool;
						ZNPNode_ZPP_Arbiter.zpp_pool = o;
						_this3.modified = true;
						_this3.length--;
						_this3.pushmod = true;
						break;
					}
					pre = cur2;
					cur2 = cur2.next;
				}
				var _this4 = xarb.b2.arbiters;
				var pre1 = null;
				var cur3 = _this4.head;
				while(cur3 != null) {
					if(cur3.elt == xarb) {
						var old1;
						var ret4;
						if(pre1 == null) {
							old1 = _this4.head;
							ret4 = old1.next;
							_this4.head = ret4;
							if(_this4.head == null) {
								_this4.pushmod = true;
							}
						} else {
							old1 = pre1.next;
							ret4 = old1.next;
							pre1.next = ret4;
							if(ret4 == null) {
								_this4.pushmod = true;
							}
						}
						var o1 = old1;
						o1.elt = null;
						o1.next = ZNPNode_ZPP_Arbiter.zpp_pool;
						ZNPNode_ZPP_Arbiter.zpp_pool = o1;
						_this4.modified = true;
						_this4.length--;
						_this4.pushmod = true;
						break;
					}
					pre1 = cur3;
					cur3 = cur3.next;
				}
				if(xarb.pair != null) {
					xarb.pair.arb = null;
					xarb.pair = null;
				}
				xarb.active = false;
				this.f_arbiters.modified = true;
				if(ZPP_FluidArbiter.zpp_pool == null) {
					arb1 = new ZPP_FluidArbiter();
				} else {
					arb1 = ZPP_FluidArbiter.zpp_pool;
					ZPP_FluidArbiter.zpp_pool = arb1.next;
					arb1.next = null;
				}
				arb1.intchange = true;
				first = true;
				swapped = true;
			} else {
				arb1 = xarb.fluidarb;
			}
			if(first || arb1.stamp != this.stamp || continuous) {
				arb1.stamp = this.stamp;
				if(ZPP_Collide.flowCollide(sa,sb,arb1)) {
					if(first) {
						var id = sa.id;
						var di = sb.id;
						arb1.b1 = s1.body;
						arb1.ws1 = s1;
						arb1.b2 = s2.body;
						arb1.ws2 = s2;
						arb1.id = id;
						arb1.di = di;
						var _this5 = arb1.b1.arbiters;
						var ret5;
						if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
							ret5 = new ZNPNode_ZPP_Arbiter();
						} else {
							ret5 = ZNPNode_ZPP_Arbiter.zpp_pool;
							ZNPNode_ZPP_Arbiter.zpp_pool = ret5.next;
							ret5.next = null;
						}
						ret5.elt = arb1;
						var temp = ret5;
						temp.next = _this5.head;
						_this5.head = temp;
						_this5.modified = true;
						_this5.length++;
						var _this6 = arb1.b2.arbiters;
						var ret6;
						if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
							ret6 = new ZNPNode_ZPP_Arbiter();
						} else {
							ret6 = ZNPNode_ZPP_Arbiter.zpp_pool;
							ZNPNode_ZPP_Arbiter.zpp_pool = ret6.next;
							ret6.next = null;
						}
						ret6.elt = arb1;
						var temp1 = ret6;
						temp1.next = _this6.head;
						_this6.head = temp1;
						_this6.modified = true;
						_this6.length++;
						arb1.active = true;
						arb1.present = 0;
						arb1.cleared = false;
						arb1.sleeping = false;
						arb1.fresh = false;
						arb1.presentable = false;
						arb1.nx = 0;
						arb1.ny = 1;
						arb1.dampx = 0;
						arb1.dampy = 0;
						arb1.adamp = 0.0;
						var _this7 = this.f_arbiters;
						var ret7;
						if(ZNPNode_ZPP_FluidArbiter.zpp_pool == null) {
							ret7 = new ZNPNode_ZPP_FluidArbiter();
						} else {
							ret7 = ZNPNode_ZPP_FluidArbiter.zpp_pool;
							ZNPNode_ZPP_FluidArbiter.zpp_pool = ret7.next;
							ret7.next = null;
						}
						ret7.elt = arb1;
						var temp2 = ret7;
						temp2.next = _this7.head;
						_this7.head = temp2;
						_this7.modified = true;
						_this7.length++;
						arb1.fresh = !swapped;
					} else {
						arb1.fresh = arb1.up_stamp < this.stamp - 1 || arb1.endGenerated == this.stamp && continuous;
					}
					arb1.up_stamp = arb1.stamp;
					if(arb1.fresh || (arb1.immState & 4) == 0) {
						arb1.immState = 1;
						var anyimpure = false;
						var arbs1 = arb1.ws1.id > arb1.ws2.id?arb1.ws2:arb1.ws1;
						var arbs2 = arb1.ws1.id > arb1.ws2.id?arb1.ws1:arb1.ws2;
						var _this8 = this.mrca1;
						while(_this8.head != null) {
							var ret8 = _this8.head;
							_this8.head = ret8.next;
							ret8.elt = null;
							ret8.next = ZNPNode_ZPP_Interactor.zpp_pool;
							ZNPNode_ZPP_Interactor.zpp_pool = ret8;
							if(_this8.head == null) {
								_this8.pushmod = true;
							}
							_this8.modified = true;
							_this8.length--;
						}
						_this8.pushmod = true;
						var _this9 = this.mrca2;
						while(_this9.head != null) {
							var ret9 = _this9.head;
							_this9.head = ret9.next;
							ret9.elt = null;
							ret9.next = ZNPNode_ZPP_Interactor.zpp_pool;
							ZNPNode_ZPP_Interactor.zpp_pool = ret9;
							if(_this9.head == null) {
								_this9.pushmod = true;
							}
							_this9.modified = true;
							_this9.length--;
						}
						_this9.pushmod = true;
						if(arbs1.cbSet != null) {
							var _this10 = this.mrca1;
							var ret10;
							if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
								ret10 = new ZNPNode_ZPP_Interactor();
							} else {
								ret10 = ZNPNode_ZPP_Interactor.zpp_pool;
								ZNPNode_ZPP_Interactor.zpp_pool = ret10.next;
								ret10.next = null;
							}
							ret10.elt = arbs1;
							var temp3 = ret10;
							temp3.next = _this10.head;
							_this10.head = temp3;
							_this10.modified = true;
							_this10.length++;
						}
						if(arbs1.body.cbSet != null) {
							var _this11 = this.mrca1;
							var o2 = arbs1.body;
							var ret11;
							if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
								ret11 = new ZNPNode_ZPP_Interactor();
							} else {
								ret11 = ZNPNode_ZPP_Interactor.zpp_pool;
								ZNPNode_ZPP_Interactor.zpp_pool = ret11.next;
								ret11.next = null;
							}
							ret11.elt = o2;
							var temp4 = ret11;
							temp4.next = _this11.head;
							_this11.head = temp4;
							_this11.modified = true;
							_this11.length++;
						}
						if(arbs2.cbSet != null) {
							var _this12 = this.mrca2;
							var ret12;
							if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
								ret12 = new ZNPNode_ZPP_Interactor();
							} else {
								ret12 = ZNPNode_ZPP_Interactor.zpp_pool;
								ZNPNode_ZPP_Interactor.zpp_pool = ret12.next;
								ret12.next = null;
							}
							ret12.elt = arbs2;
							var temp5 = ret12;
							temp5.next = _this12.head;
							_this12.head = temp5;
							_this12.modified = true;
							_this12.length++;
						}
						if(arbs2.body.cbSet != null) {
							var _this13 = this.mrca2;
							var o3 = arbs2.body;
							var ret13;
							if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
								ret13 = new ZNPNode_ZPP_Interactor();
							} else {
								ret13 = ZNPNode_ZPP_Interactor.zpp_pool;
								ZNPNode_ZPP_Interactor.zpp_pool = ret13.next;
								ret13.next = null;
							}
							ret13.elt = o3;
							var temp6 = ret13;
							temp6.next = _this13.head;
							_this13.head = temp6;
							_this13.modified = true;
							_this13.length++;
						}
						var c1 = arbs1.body.compound;
						var c2 = arbs2.body.compound;
						while(c1 != c2) if((c1 == null?0:c1.depth) < (c2 == null?0:c2.depth)) {
							if(c2.cbSet != null) {
								var _this14 = this.mrca2;
								var ret14;
								if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
									ret14 = new ZNPNode_ZPP_Interactor();
								} else {
									ret14 = ZNPNode_ZPP_Interactor.zpp_pool;
									ZNPNode_ZPP_Interactor.zpp_pool = ret14.next;
									ret14.next = null;
								}
								ret14.elt = c2;
								var temp7 = ret14;
								temp7.next = _this14.head;
								_this14.head = temp7;
								_this14.modified = true;
								_this14.length++;
							}
							c2 = c2.compound;
						} else {
							if(c1.cbSet != null) {
								var _this15 = this.mrca1;
								var ret15;
								if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
									ret15 = new ZNPNode_ZPP_Interactor();
								} else {
									ret15 = ZNPNode_ZPP_Interactor.zpp_pool;
									ZNPNode_ZPP_Interactor.zpp_pool = ret15.next;
									ret15.next = null;
								}
								ret15.elt = c1;
								var temp8 = ret15;
								temp8.next = _this15.head;
								_this15.head = temp8;
								_this15.modified = true;
								_this15.length++;
							}
							c1 = c1.compound;
						}
						var cx_ite2 = this.mrca1.head;
						while(cx_ite2 != null) {
							var i1 = cx_ite2.elt;
							var cx_ite3 = this.mrca2.head;
							while(cx_ite3 != null) {
								var i2 = cx_ite3.elt;
								var cb1 = i1.cbSet;
								var cb2 = i2.cbSet;
								var ret16 = null;
								var cx_ite4 = (cb1.cbpairs.length < cb2.cbpairs.length?cb1.cbpairs:cb2.cbpairs).head;
								while(cx_ite4 != null) {
									var p = cx_ite4.elt;
									if(p.a == cb1 && p.b == cb2 || p.a == cb2 && p.b == cb1) {
										ret16 = p;
										break;
									}
									cx_ite4 = cx_ite4.next;
								}
								if(ret16 == null) {
									var ret17;
									if(ZPP_CbSetPair.zpp_pool == null) {
										ret17 = new ZPP_CbSetPair();
									} else {
										ret17 = ZPP_CbSetPair.zpp_pool;
										ZPP_CbSetPair.zpp_pool = ret17.next;
										ret17.next = null;
									}
									ret17.zip_listeners = true;
									if(ZPP_CbSet.setlt(cb1,cb2)) {
										ret17.a = cb1;
										ret17.b = cb2;
									} else {
										ret17.a = cb2;
										ret17.b = cb1;
									}
									ret16 = ret17;
									cb1.cbpairs.add(ret16);
									if(cb2 != cb1) {
										cb2.cbpairs.add(ret16);
									}
								}
								if(ret16.zip_listeners) {
									ret16.zip_listeners = false;
									ret16.__validate();
								}
								if(ret16.listeners.head == null) {
									cx_ite3 = cx_ite3.next;
									continue;
								}
								var callbackset = null;
								var ncallbackset = null;
								var _this16 = this.prelisteners;
								while(_this16.head != null) {
									var ret18 = _this16.head;
									_this16.head = ret18.next;
									ret18.elt = null;
									ret18.next = ZNPNode_ZPP_InteractionListener.zpp_pool;
									ZNPNode_ZPP_InteractionListener.zpp_pool = ret18;
									if(_this16.head == null) {
										_this16.pushmod = true;
									}
									_this16.modified = true;
									_this16.length--;
								}
								_this16.pushmod = true;
								var lite = null;
								var ret19 = null;
								var cx_ite5 = (cb1.cbpairs.length < cb2.cbpairs.length?cb1.cbpairs:cb2.cbpairs).head;
								while(cx_ite5 != null) {
									var p1 = cx_ite5.elt;
									if(p1.a == cb1 && p1.b == cb2 || p1.a == cb2 && p1.b == cb1) {
										ret19 = p1;
										break;
									}
									cx_ite5 = cx_ite5.next;
								}
								if(ret19 == null) {
									var ret20;
									if(ZPP_CbSetPair.zpp_pool == null) {
										ret20 = new ZPP_CbSetPair();
									} else {
										ret20 = ZPP_CbSetPair.zpp_pool;
										ZPP_CbSetPair.zpp_pool = ret20.next;
										ret20.next = null;
									}
									ret20.zip_listeners = true;
									if(ZPP_CbSet.setlt(cb1,cb2)) {
										ret20.a = cb1;
										ret20.b = cb2;
									} else {
										ret20.a = cb2;
										ret20.b = cb1;
									}
									ret19 = ret20;
									cb1.cbpairs.add(ret19);
									if(cb2 != cb1) {
										cb2.cbpairs.add(ret19);
									}
								}
								if(ret19.zip_listeners) {
									ret19.zip_listeners = false;
									ret19.__validate();
								}
								var cx_ite6 = ret19.listeners.head;
								while(cx_ite6 != null) {
									var x3 = cx_ite6.elt;
									if(x3.event == 5) {
										if((x3.itype & 4) != 0) {
											var _this17 = _gthis.prelisteners;
											var ret21;
											if(ZNPNode_ZPP_InteractionListener.zpp_pool == null) {
												ret21 = new ZNPNode_ZPP_InteractionListener();
											} else {
												ret21 = ZNPNode_ZPP_InteractionListener.zpp_pool;
												ZNPNode_ZPP_InteractionListener.zpp_pool = ret21.next;
												ret21.next = null;
											}
											ret21.elt = x3;
											var temp9 = ret21;
											if(lite == null) {
												temp9.next = _this17.head;
												_this17.head = temp9;
											} else {
												temp9.next = lite.next;
												lite.next = temp9;
											}
											_this17.pushmod = _this17.modified = true;
											_this17.length++;
											lite = temp9;
											if(!anyimpure) {
												anyimpure = !x3.pure;
											} else {
												anyimpure = true;
											}
										}
									}
									cx_ite6 = cx_ite6.next;
								}
								if(this.prelisteners.head == null) {
									cx_ite3 = cx_ite3.next;
									continue;
								}
								callbackset = ZPP_Interactor.get(i1,i2);
								if(callbackset == null) {
									ncallbackset = ZPP_CallbackSet.get(i1,i2);
									this.add_callbackset(ncallbackset);
								}
								if(callbackset == null || (callbackset.FLUIDstamp != this.stamp || continuous) && (callbackset.FLUIDstate & 4) == 0) {
									if(ncallbackset != null) {
										callbackset = ncallbackset;
									}
									if(callbackset != null) {
										var cx_ite7 = this.prelisteners.head;
										while(cx_ite7 != null) {
											if(cx_ite7.elt.itype == 7) {
												callbackset.COLLISIONstamp = this.stamp;
												callbackset.SENSORstamp = this.stamp;
												callbackset.FLUIDstamp = this.stamp;
											} else {
												callbackset.FLUIDstamp = this.stamp;
											}
											cx_ite7 = cx_ite7.next;
										}
									}
									arb1.mutable = true;
									if(arb1.wrap_position != null) {
										arb1.wrap_position.zpp_inner._immutable = false;
									}
									var pact = arb1.active;
									arb1.active = true;
									this.precb.zpp_inner.pre_arbiter = arb1;
									this.precb.zpp_inner.set = callbackset;
									var cx_ite8 = this.prelisteners.head;
									while(cx_ite8 != null) {
										var listener = cx_ite8.elt;
										this.precb.zpp_inner.listener = listener;
										var cb = this.precb.zpp_inner;
										var o11 = callbackset.int1;
										var o21 = callbackset.int2;
										var tmp6;
										var _this18 = listener.options1;
										var xs = o11.cbTypes;
										if(_this18.nonemptyintersection(xs,_this18.includes) && !_this18.nonemptyintersection(xs,_this18.excludes)) {
											var _this19 = listener.options2;
											var xs1 = o21.cbTypes;
											if(_this19.nonemptyintersection(xs1,_this19.includes)) {
												tmp6 = !_this19.nonemptyintersection(xs1,_this19.excludes);
											} else {
												tmp6 = false;
											}
										} else {
											tmp6 = false;
										}
										if(tmp6) {
											cb.int1 = o11;
											cb.int2 = o21;
										} else {
											cb.int1 = o21;
											cb.int2 = o11;
										}
										this.precb.zpp_inner.pre_swapped = i1 != this.precb.zpp_inner.int1;
										var ret22 = listener.handlerp(this.precb);
										if(ret22 != null) {
											var tmp7;
											if(ZPP_Flags.PreFlag_ACCEPT == null) {
												ZPP_Flags.internal = true;
												ZPP_Flags.PreFlag_ACCEPT = new PreFlag();
												ZPP_Flags.internal = false;
											}
											if(ret22 == ZPP_Flags.PreFlag_ACCEPT) {
												tmp7 = 5;
											} else {
												if(ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
													ZPP_Flags.internal = true;
													ZPP_Flags.PreFlag_ACCEPT_ONCE = new PreFlag();
													ZPP_Flags.internal = false;
												}
												if(ret22 == ZPP_Flags.PreFlag_ACCEPT_ONCE) {
													tmp7 = 1;
												} else {
													if(ZPP_Flags.PreFlag_IGNORE == null) {
														ZPP_Flags.internal = true;
														ZPP_Flags.PreFlag_IGNORE = new PreFlag();
														ZPP_Flags.internal = false;
													}
													if(ret22 == ZPP_Flags.PreFlag_IGNORE) {
														tmp7 = 6;
													} else {
														tmp7 = 2;
													}
												}
											}
											arb1.immState = tmp7;
										}
										cx_ite8 = cx_ite8.next;
									}
									arb1.mutable = false;
									if(arb1.wrap_position != null) {
										arb1.wrap_position.zpp_inner._immutable = true;
									}
									arb1.active = pact;
									if(callbackset != null) {
										var cx_ite9 = this.prelisteners.head;
										while(cx_ite9 != null) {
											if(cx_ite9.elt.itype == 7) {
												callbackset.COLLISIONstate = arb1.immState;
												callbackset.SENSORstate = arb1.immState;
												callbackset.FLUIDstate = arb1.immState;
											} else {
												callbackset.FLUIDstate = arb1.immState;
											}
											cx_ite9 = cx_ite9.next;
										}
									}
								} else if(callbackset == null) {
									if((arb1.immState & 4) == 0) {
										arb1.immState = 1;
									}
								} else {
									arb1.immState = callbackset.FLUIDstate;
								}
								cx_ite3 = cx_ite3.next;
							}
							cx_ite2 = cx_ite2.next;
						}
						if(anyimpure && (arb1.immState & 4) == 0) {
							if(arb1.b1.type == 2) {
								var o4 = arb1.b1;
								if(!o4.world) {
									o4.component.waket = this.stamp + (this.midstep?0:1);
									if(o4.type == 3) {
										o4.kinematicDelaySleep = true;
									}
									if(o4.component.sleeping) {
										this.really_wake(o4,false);
									}
								}
							}
							if(arb1.b1.type == 2) {
								var o5 = arb1.b2;
								if(!o5.world) {
									o5.component.waket = this.stamp + (this.midstep?0:1);
									if(o5.type == 3) {
										o5.kinematicDelaySleep = true;
									}
									if(o5.component.sleeping) {
										this.really_wake(o5,false);
									}
								}
							}
						}
					}
					if((arb1.immState & 1) != 0) {
						if(arb1.b1.type == 2 && arb1.b1.component.sleeping) {
							var o6 = arb1.b1;
							if(!o6.world) {
								o6.component.waket = this.stamp + (this.midstep?0:1);
								if(o6.type == 3) {
									o6.kinematicDelaySleep = true;
								}
								if(o6.component.sleeping) {
									this.really_wake(o6,false);
								}
							}
						}
						if(arb1.b2.type == 2 && arb1.b2.component.sleeping) {
							var o7 = arb1.b2;
							if(!o7.world) {
								o7.component.waket = this.stamp + (this.midstep?0:1);
								if(o7.type == 3) {
									o7.kinematicDelaySleep = true;
								}
								if(o7.component.sleeping) {
									this.really_wake(o7,false);
								}
							}
						}
					}
					if(arb1.sleeping) {
						arb1.sleeping = false;
						var _this20 = this.f_arbiters;
						var ret23;
						if(ZNPNode_ZPP_FluidArbiter.zpp_pool == null) {
							ret23 = new ZNPNode_ZPP_FluidArbiter();
						} else {
							ret23 = ZNPNode_ZPP_FluidArbiter.zpp_pool;
							ZNPNode_ZPP_FluidArbiter.zpp_pool = ret23.next;
							ret23.next = null;
						}
						ret23.elt = arb1;
						var temp10 = ret23;
						temp10.next = _this20.head;
						_this20.head = temp10;
						_this20.modified = true;
						_this20.length++;
					}
					ret = arb1;
				} else if(first) {
					var o8 = arb1;
					o8.next = ZPP_FluidArbiter.zpp_pool;
					ZPP_FluidArbiter.zpp_pool = o8;
					ret = null;
				} else {
					ret = arb1;
				}
			} else {
				ret = arb1;
			}
		} else if(itype == 1) {
			var carbs = stat?this.c_arbiters_true:this.c_arbiters_false;
			var xarb1;
			if(in_arb == null) {
				var ret24 = null;
				var cx_ite10 = (b1.arbiters.length < b2.arbiters.length?b1:b2).arbiters.head;
				while(cx_ite10 != null) {
					var arb2 = cx_ite10.elt;
					if(arb2.id == sa.id && arb2.di == sb.id) {
						ret24 = arb2;
						break;
					}
					cx_ite10 = cx_ite10.next;
				}
				xarb1 = ret24;
			} else {
				xarb1 = in_arb;
			}
			var first1 = xarb1 == null;
			var arb3;
			var swapped1 = false;
			if(first1) {
				if(ZPP_ColArbiter.zpp_pool == null) {
					arb3 = new ZPP_ColArbiter();
				} else {
					arb3 = ZPP_ColArbiter.zpp_pool;
					ZPP_ColArbiter.zpp_pool = arb3.next;
					arb3.next = null;
				}
				arb3.stat = stat;
			} else if(xarb1.colarb == null) {
				xarb1.cleared = true;
				var _this21 = xarb1.b1.arbiters;
				var pre2 = null;
				var cur4 = _this21.head;
				while(cur4 != null) {
					if(cur4.elt == xarb1) {
						var old2;
						var ret25;
						if(pre2 == null) {
							old2 = _this21.head;
							ret25 = old2.next;
							_this21.head = ret25;
							if(_this21.head == null) {
								_this21.pushmod = true;
							}
						} else {
							old2 = pre2.next;
							ret25 = old2.next;
							pre2.next = ret25;
							if(ret25 == null) {
								_this21.pushmod = true;
							}
						}
						var o9 = old2;
						o9.elt = null;
						o9.next = ZNPNode_ZPP_Arbiter.zpp_pool;
						ZNPNode_ZPP_Arbiter.zpp_pool = o9;
						_this21.modified = true;
						_this21.length--;
						_this21.pushmod = true;
						break;
					}
					pre2 = cur4;
					cur4 = cur4.next;
				}
				var _this22 = xarb1.b2.arbiters;
				var pre3 = null;
				var cur5 = _this22.head;
				while(cur5 != null) {
					if(cur5.elt == xarb1) {
						var old3;
						var ret26;
						if(pre3 == null) {
							old3 = _this22.head;
							ret26 = old3.next;
							_this22.head = ret26;
							if(_this22.head == null) {
								_this22.pushmod = true;
							}
						} else {
							old3 = pre3.next;
							ret26 = old3.next;
							pre3.next = ret26;
							if(ret26 == null) {
								_this22.pushmod = true;
							}
						}
						var o10 = old3;
						o10.elt = null;
						o10.next = ZNPNode_ZPP_Arbiter.zpp_pool;
						ZNPNode_ZPP_Arbiter.zpp_pool = o10;
						_this22.modified = true;
						_this22.length--;
						_this22.pushmod = true;
						break;
					}
					pre3 = cur5;
					cur5 = cur5.next;
				}
				if(xarb1.pair != null) {
					xarb1.pair.arb = null;
					xarb1.pair = null;
				}
				xarb1.active = false;
				this.f_arbiters.modified = true;
				if(ZPP_ColArbiter.zpp_pool == null) {
					arb3 = new ZPP_ColArbiter();
				} else {
					arb3 = ZPP_ColArbiter.zpp_pool;
					ZPP_ColArbiter.zpp_pool = arb3.next;
					arb3.next = null;
				}
				arb3.intchange = true;
				arb3.stat = stat;
				first1 = true;
				swapped1 = true;
			} else {
				arb3 = xarb1.colarb;
				reverse = sa != arb3.s1;
				if(arb3.stat != stat) {
					arb3.stat = stat;
					if(!arb3.sleeping) {
						(stat?this.c_arbiters_false:this.c_arbiters_true).remove(arb3);
						carbs.add(arb3);
					}
				}
			}
			if(first1 || arb3.stamp != this.stamp || continuous) {
				arb3.stamp = this.stamp;
				if(ZPP_Collide.contactCollide(sa,sb,arb3,reverse)) {
					if(first1) {
						var id1 = sa.id;
						var di1 = sb.id;
						arb3.b1 = s1.body;
						arb3.ws1 = s1;
						arb3.b2 = s2.body;
						arb3.ws2 = s2;
						arb3.id = id1;
						arb3.di = di1;
						var _this23 = arb3.b1.arbiters;
						var ret27;
						if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
							ret27 = new ZNPNode_ZPP_Arbiter();
						} else {
							ret27 = ZNPNode_ZPP_Arbiter.zpp_pool;
							ZNPNode_ZPP_Arbiter.zpp_pool = ret27.next;
							ret27.next = null;
						}
						ret27.elt = arb3;
						var temp11 = ret27;
						temp11.next = _this23.head;
						_this23.head = temp11;
						_this23.modified = true;
						_this23.length++;
						var _this24 = arb3.b2.arbiters;
						var ret28;
						if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
							ret28 = new ZNPNode_ZPP_Arbiter();
						} else {
							ret28 = ZNPNode_ZPP_Arbiter.zpp_pool;
							ZNPNode_ZPP_Arbiter.zpp_pool = ret28.next;
							ret28.next = null;
						}
						ret28.elt = arb3;
						var temp12 = ret28;
						temp12.next = _this24.head;
						_this24.head = temp12;
						_this24.modified = true;
						_this24.length++;
						arb3.active = true;
						arb3.present = 0;
						arb3.cleared = false;
						arb3.sleeping = false;
						arb3.fresh = false;
						arb3.presentable = false;
						arb3.s1 = s1;
						arb3.s2 = s2;
						if(!arb3.userdef_restitution) {
							if(arb3.s1.material.elasticity <= -Infinity || arb3.s2.material.elasticity <= -Infinity) {
								arb3.restitution = 0;
							} else if(arb3.s1.material.elasticity >= Infinity || arb3.s2.material.elasticity >= Infinity) {
								arb3.restitution = 1;
							} else {
								arb3.restitution = (arb3.s1.material.elasticity + arb3.s2.material.elasticity) / 2;
							}
							if(arb3.restitution < 0) {
								arb3.restitution = 0;
							}
							if(arb3.restitution > 1) {
								arb3.restitution = 1;
							}
						}
						if(!arb3.userdef_dyn_fric) {
							arb3.dyn_fric = Math.sqrt(arb3.s1.material.dynamicFriction * arb3.s2.material.dynamicFriction);
						}
						if(!arb3.userdef_stat_fric) {
							arb3.stat_fric = Math.sqrt(arb3.s1.material.staticFriction * arb3.s2.material.staticFriction);
						}
						if(!arb3.userdef_rfric) {
							arb3.rfric = Math.sqrt(arb3.s1.material.rollingFriction * arb3.s2.material.rollingFriction);
						}
						var ret29;
						if(ZNPNode_ZPP_ColArbiter.zpp_pool == null) {
							ret29 = new ZNPNode_ZPP_ColArbiter();
						} else {
							ret29 = ZNPNode_ZPP_ColArbiter.zpp_pool;
							ZNPNode_ZPP_ColArbiter.zpp_pool = ret29.next;
							ret29.next = null;
						}
						ret29.elt = arb3;
						var temp13 = ret29;
						temp13.next = carbs.head;
						carbs.head = temp13;
						carbs.modified = true;
						carbs.length++;
						arb3.fresh = !swapped1;
					} else {
						arb3.fresh = arb3.up_stamp < this.stamp - 1 || arb3.endGenerated == this.stamp && continuous;
					}
					arb3.up_stamp = arb3.stamp;
					if(arb3.fresh || (arb3.immState & 4) == 0) {
						arb3.immState = 1;
						var anyimpure1 = false;
						var arbs11 = arb3.ws1.id > arb3.ws2.id?arb3.ws2:arb3.ws1;
						var arbs21 = arb3.ws1.id > arb3.ws2.id?arb3.ws1:arb3.ws2;
						var _this25 = this.mrca1;
						while(_this25.head != null) {
							var ret30 = _this25.head;
							_this25.head = ret30.next;
							ret30.elt = null;
							ret30.next = ZNPNode_ZPP_Interactor.zpp_pool;
							ZNPNode_ZPP_Interactor.zpp_pool = ret30;
							if(_this25.head == null) {
								_this25.pushmod = true;
							}
							_this25.modified = true;
							_this25.length--;
						}
						_this25.pushmod = true;
						var _this26 = this.mrca2;
						while(_this26.head != null) {
							var ret31 = _this26.head;
							_this26.head = ret31.next;
							ret31.elt = null;
							ret31.next = ZNPNode_ZPP_Interactor.zpp_pool;
							ZNPNode_ZPP_Interactor.zpp_pool = ret31;
							if(_this26.head == null) {
								_this26.pushmod = true;
							}
							_this26.modified = true;
							_this26.length--;
						}
						_this26.pushmod = true;
						if(arbs11.cbSet != null) {
							var _this27 = this.mrca1;
							var ret32;
							if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
								ret32 = new ZNPNode_ZPP_Interactor();
							} else {
								ret32 = ZNPNode_ZPP_Interactor.zpp_pool;
								ZNPNode_ZPP_Interactor.zpp_pool = ret32.next;
								ret32.next = null;
							}
							ret32.elt = arbs11;
							var temp14 = ret32;
							temp14.next = _this27.head;
							_this27.head = temp14;
							_this27.modified = true;
							_this27.length++;
						}
						if(arbs11.body.cbSet != null) {
							var _this28 = this.mrca1;
							var o12 = arbs11.body;
							var ret33;
							if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
								ret33 = new ZNPNode_ZPP_Interactor();
							} else {
								ret33 = ZNPNode_ZPP_Interactor.zpp_pool;
								ZNPNode_ZPP_Interactor.zpp_pool = ret33.next;
								ret33.next = null;
							}
							ret33.elt = o12;
							var temp15 = ret33;
							temp15.next = _this28.head;
							_this28.head = temp15;
							_this28.modified = true;
							_this28.length++;
						}
						if(arbs21.cbSet != null) {
							var _this29 = this.mrca2;
							var ret34;
							if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
								ret34 = new ZNPNode_ZPP_Interactor();
							} else {
								ret34 = ZNPNode_ZPP_Interactor.zpp_pool;
								ZNPNode_ZPP_Interactor.zpp_pool = ret34.next;
								ret34.next = null;
							}
							ret34.elt = arbs21;
							var temp16 = ret34;
							temp16.next = _this29.head;
							_this29.head = temp16;
							_this29.modified = true;
							_this29.length++;
						}
						if(arbs21.body.cbSet != null) {
							var _this30 = this.mrca2;
							var o13 = arbs21.body;
							var ret35;
							if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
								ret35 = new ZNPNode_ZPP_Interactor();
							} else {
								ret35 = ZNPNode_ZPP_Interactor.zpp_pool;
								ZNPNode_ZPP_Interactor.zpp_pool = ret35.next;
								ret35.next = null;
							}
							ret35.elt = o13;
							var temp17 = ret35;
							temp17.next = _this30.head;
							_this30.head = temp17;
							_this30.modified = true;
							_this30.length++;
						}
						var c11 = arbs11.body.compound;
						var c21 = arbs21.body.compound;
						while(c11 != c21) if((c11 == null?0:c11.depth) < (c21 == null?0:c21.depth)) {
							if(c21.cbSet != null) {
								var _this31 = this.mrca2;
								var ret36;
								if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
									ret36 = new ZNPNode_ZPP_Interactor();
								} else {
									ret36 = ZNPNode_ZPP_Interactor.zpp_pool;
									ZNPNode_ZPP_Interactor.zpp_pool = ret36.next;
									ret36.next = null;
								}
								ret36.elt = c21;
								var temp18 = ret36;
								temp18.next = _this31.head;
								_this31.head = temp18;
								_this31.modified = true;
								_this31.length++;
							}
							c21 = c21.compound;
						} else {
							if(c11.cbSet != null) {
								var _this32 = this.mrca1;
								var ret37;
								if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
									ret37 = new ZNPNode_ZPP_Interactor();
								} else {
									ret37 = ZNPNode_ZPP_Interactor.zpp_pool;
									ZNPNode_ZPP_Interactor.zpp_pool = ret37.next;
									ret37.next = null;
								}
								ret37.elt = c11;
								var temp19 = ret37;
								temp19.next = _this32.head;
								_this32.head = temp19;
								_this32.modified = true;
								_this32.length++;
							}
							c11 = c11.compound;
						}
						var cx_ite11 = this.mrca1.head;
						while(cx_ite11 != null) {
							var i11 = cx_ite11.elt;
							var cx_ite12 = this.mrca2.head;
							while(cx_ite12 != null) {
								var i21 = cx_ite12.elt;
								var cb11 = i11.cbSet;
								var cb21 = i21.cbSet;
								var ret38 = null;
								var cx_ite13 = (cb11.cbpairs.length < cb21.cbpairs.length?cb11.cbpairs:cb21.cbpairs).head;
								while(cx_ite13 != null) {
									var p2 = cx_ite13.elt;
									if(p2.a == cb11 && p2.b == cb21 || p2.a == cb21 && p2.b == cb11) {
										ret38 = p2;
										break;
									}
									cx_ite13 = cx_ite13.next;
								}
								if(ret38 == null) {
									var ret39;
									if(ZPP_CbSetPair.zpp_pool == null) {
										ret39 = new ZPP_CbSetPair();
									} else {
										ret39 = ZPP_CbSetPair.zpp_pool;
										ZPP_CbSetPair.zpp_pool = ret39.next;
										ret39.next = null;
									}
									ret39.zip_listeners = true;
									if(ZPP_CbSet.setlt(cb11,cb21)) {
										ret39.a = cb11;
										ret39.b = cb21;
									} else {
										ret39.a = cb21;
										ret39.b = cb11;
									}
									ret38 = ret39;
									cb11.cbpairs.add(ret38);
									if(cb21 != cb11) {
										cb21.cbpairs.add(ret38);
									}
								}
								if(ret38.zip_listeners) {
									ret38.zip_listeners = false;
									ret38.__validate();
								}
								if(ret38.listeners.head == null) {
									cx_ite12 = cx_ite12.next;
									continue;
								}
								var callbackset1 = null;
								var ncallbackset1 = null;
								var _this33 = this.prelisteners;
								while(_this33.head != null) {
									var ret40 = _this33.head;
									_this33.head = ret40.next;
									ret40.elt = null;
									ret40.next = ZNPNode_ZPP_InteractionListener.zpp_pool;
									ZNPNode_ZPP_InteractionListener.zpp_pool = ret40;
									if(_this33.head == null) {
										_this33.pushmod = true;
									}
									_this33.modified = true;
									_this33.length--;
								}
								_this33.pushmod = true;
								var lite1 = null;
								var ret41 = null;
								var cx_ite14 = (cb11.cbpairs.length < cb21.cbpairs.length?cb11.cbpairs:cb21.cbpairs).head;
								while(cx_ite14 != null) {
									var p3 = cx_ite14.elt;
									if(p3.a == cb11 && p3.b == cb21 || p3.a == cb21 && p3.b == cb11) {
										ret41 = p3;
										break;
									}
									cx_ite14 = cx_ite14.next;
								}
								if(ret41 == null) {
									var ret42;
									if(ZPP_CbSetPair.zpp_pool == null) {
										ret42 = new ZPP_CbSetPair();
									} else {
										ret42 = ZPP_CbSetPair.zpp_pool;
										ZPP_CbSetPair.zpp_pool = ret42.next;
										ret42.next = null;
									}
									ret42.zip_listeners = true;
									if(ZPP_CbSet.setlt(cb11,cb21)) {
										ret42.a = cb11;
										ret42.b = cb21;
									} else {
										ret42.a = cb21;
										ret42.b = cb11;
									}
									ret41 = ret42;
									cb11.cbpairs.add(ret41);
									if(cb21 != cb11) {
										cb21.cbpairs.add(ret41);
									}
								}
								if(ret41.zip_listeners) {
									ret41.zip_listeners = false;
									ret41.__validate();
								}
								var cx_ite15 = ret41.listeners.head;
								while(cx_ite15 != null) {
									var x4 = cx_ite15.elt;
									if(x4.event == 5) {
										if((x4.itype & 1) != 0) {
											var _this34 = _gthis.prelisteners;
											var ret43;
											if(ZNPNode_ZPP_InteractionListener.zpp_pool == null) {
												ret43 = new ZNPNode_ZPP_InteractionListener();
											} else {
												ret43 = ZNPNode_ZPP_InteractionListener.zpp_pool;
												ZNPNode_ZPP_InteractionListener.zpp_pool = ret43.next;
												ret43.next = null;
											}
											ret43.elt = x4;
											var temp20 = ret43;
											if(lite1 == null) {
												temp20.next = _this34.head;
												_this34.head = temp20;
											} else {
												temp20.next = lite1.next;
												lite1.next = temp20;
											}
											_this34.pushmod = _this34.modified = true;
											_this34.length++;
											lite1 = temp20;
											if(!anyimpure1) {
												anyimpure1 = !x4.pure;
											} else {
												anyimpure1 = true;
											}
										}
									}
									cx_ite15 = cx_ite15.next;
								}
								if(this.prelisteners.head == null) {
									cx_ite12 = cx_ite12.next;
									continue;
								}
								callbackset1 = ZPP_Interactor.get(i11,i21);
								if(callbackset1 == null) {
									ncallbackset1 = ZPP_CallbackSet.get(i11,i21);
									this.add_callbackset(ncallbackset1);
								}
								if(callbackset1 == null || (callbackset1.COLLISIONstamp != this.stamp || continuous) && (callbackset1.COLLISIONstate & 4) == 0) {
									if(ncallbackset1 != null) {
										callbackset1 = ncallbackset1;
									}
									if(callbackset1 != null) {
										var cx_ite16 = this.prelisteners.head;
										while(cx_ite16 != null) {
											if(cx_ite16.elt.itype == 7) {
												callbackset1.COLLISIONstamp = this.stamp;
												callbackset1.SENSORstamp = this.stamp;
												callbackset1.FLUIDstamp = this.stamp;
											} else {
												callbackset1.COLLISIONstamp = this.stamp;
											}
											cx_ite16 = cx_ite16.next;
										}
									}
									arb3.mutable = true;
									if(arb3.wrap_normal != null) {
										arb3.wrap_normal.zpp_inner._immutable = false;
									}
									if(arb3.wrap_contacts != null) {
										arb3.wrap_contacts.zpp_inner.immutable = false;
									}
									var pact1 = arb3.active;
									arb3.active = true;
									var fst = true;
									var pre4 = null;
									var prei = null;
									var cx_itei = arb3.innards.next;
									arb3.hc2 = false;
									var cx_ite17 = arb3.contacts.next;
									while(cx_ite17 != null) {
										var c = cx_ite17;
										if(c.stamp + Config.arbiterExpirationDelay < arb3.stamp) {
											var _this35 = arb3.contacts;
											var old4;
											var ret44;
											if(pre4 == null) {
												old4 = _this35.next;
												ret44 = old4.next;
												_this35.next = ret44;
												if(_this35.next == null) {
													_this35.pushmod = true;
												}
											} else {
												old4 = pre4.next;
												ret44 = old4.next;
												pre4.next = ret44;
												if(ret44 == null) {
													_this35.pushmod = true;
												}
											}
											old4._inuse = false;
											_this35.modified = true;
											_this35.length--;
											_this35.pushmod = true;
											cx_ite17 = ret44;
											var _this36 = arb3.innards;
											var old5;
											var ret45;
											if(prei == null) {
												old5 = _this36.next;
												ret45 = old5.next;
												_this36.next = ret45;
												if(_this36.next == null) {
													_this36.pushmod = true;
												}
											} else {
												old5 = prei.next;
												ret45 = old5.next;
												prei.next = ret45;
												if(ret45 == null) {
													_this36.pushmod = true;
												}
											}
											old5._inuse = false;
											_this36.modified = true;
											_this36.length--;
											_this36.pushmod = true;
											cx_itei = ret45;
											c.arbiter = null;
											c.next = ZPP_Contact.zpp_pool;
											ZPP_Contact.zpp_pool = c;
											continue;
										}
										var ci = c.inner;
										var pact2 = c.active;
										c.active = c.stamp == arb3.stamp;
										if(c.active) {
											if(fst) {
												fst = false;
												arb3.c1 = ci;
												arb3.oc1 = c;
											} else {
												arb3.hc2 = true;
												arb3.c2 = ci;
												arb3.oc2 = c;
											}
										}
										if(pact2 != c.active) {
											arb3.contacts.modified = true;
										}
										pre4 = cx_ite17;
										prei = cx_itei;
										cx_itei = cx_itei.next;
										cx_ite17 = cx_ite17.next;
									}
									if(arb3.hc2) {
										arb3.hpc2 = true;
										if(arb3.oc1.posOnly) {
											var tmp8 = arb3.c1;
											arb3.c1 = arb3.c2;
											arb3.c2 = tmp8;
											var tmp21 = arb3.oc1;
											arb3.oc1 = arb3.oc2;
											arb3.oc2 = tmp21;
											arb3.hc2 = false;
										} else if(arb3.oc2.posOnly) {
											arb3.hc2 = false;
										}
									} else {
										arb3.hpc2 = false;
									}
									this.precb.zpp_inner.pre_arbiter = arb3;
									this.precb.zpp_inner.set = callbackset1;
									var cx_ite18 = this.prelisteners.head;
									while(cx_ite18 != null) {
										var listener1 = cx_ite18.elt;
										this.precb.zpp_inner.listener = listener1;
										var cb3 = this.precb.zpp_inner;
										var o14 = callbackset1.int1;
										var o22 = callbackset1.int2;
										var tmp9;
										var _this37 = listener1.options1;
										var xs2 = o14.cbTypes;
										if(_this37.nonemptyintersection(xs2,_this37.includes) && !_this37.nonemptyintersection(xs2,_this37.excludes)) {
											var _this38 = listener1.options2;
											var xs3 = o22.cbTypes;
											if(_this38.nonemptyintersection(xs3,_this38.includes)) {
												tmp9 = !_this38.nonemptyintersection(xs3,_this38.excludes);
											} else {
												tmp9 = false;
											}
										} else {
											tmp9 = false;
										}
										if(tmp9) {
											cb3.int1 = o14;
											cb3.int2 = o22;
										} else {
											cb3.int1 = o22;
											cb3.int2 = o14;
										}
										this.precb.zpp_inner.pre_swapped = i11 != this.precb.zpp_inner.int1;
										var ret46 = listener1.handlerp(this.precb);
										if(ret46 != null) {
											var tmp10;
											if(ZPP_Flags.PreFlag_ACCEPT == null) {
												ZPP_Flags.internal = true;
												ZPP_Flags.PreFlag_ACCEPT = new PreFlag();
												ZPP_Flags.internal = false;
											}
											if(ret46 == ZPP_Flags.PreFlag_ACCEPT) {
												tmp10 = 5;
											} else {
												if(ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
													ZPP_Flags.internal = true;
													ZPP_Flags.PreFlag_ACCEPT_ONCE = new PreFlag();
													ZPP_Flags.internal = false;
												}
												if(ret46 == ZPP_Flags.PreFlag_ACCEPT_ONCE) {
													tmp10 = 1;
												} else {
													if(ZPP_Flags.PreFlag_IGNORE == null) {
														ZPP_Flags.internal = true;
														ZPP_Flags.PreFlag_IGNORE = new PreFlag();
														ZPP_Flags.internal = false;
													}
													if(ret46 == ZPP_Flags.PreFlag_IGNORE) {
														tmp10 = 6;
													} else {
														tmp10 = 2;
													}
												}
											}
											arb3.immState = tmp10;
										}
										cx_ite18 = cx_ite18.next;
									}
									arb3.mutable = false;
									if(arb3.wrap_normal != null) {
										arb3.wrap_normal.zpp_inner._immutable = true;
									}
									if(arb3.wrap_contacts != null) {
										arb3.wrap_contacts.zpp_inner.immutable = true;
									}
									arb3.active = pact1;
									if(callbackset1 != null) {
										var cx_ite19 = this.prelisteners.head;
										while(cx_ite19 != null) {
											if(cx_ite19.elt.itype == 7) {
												callbackset1.COLLISIONstate = arb3.immState;
												callbackset1.SENSORstate = arb3.immState;
												callbackset1.FLUIDstate = arb3.immState;
											} else {
												callbackset1.COLLISIONstate = arb3.immState;
											}
											cx_ite19 = cx_ite19.next;
										}
									}
								} else if(callbackset1 == null) {
									if((arb3.immState & 4) == 0) {
										arb3.immState = 1;
									}
								} else {
									arb3.immState = callbackset1.COLLISIONstate;
								}
								cx_ite12 = cx_ite12.next;
							}
							cx_ite11 = cx_ite11.next;
						}
						if(anyimpure1 && (arb3.immState & 4) == 0) {
							if(arb3.b1.type == 2) {
								var o15 = arb3.b1;
								if(!o15.world) {
									o15.component.waket = this.stamp + (this.midstep?0:1);
									if(o15.type == 3) {
										o15.kinematicDelaySleep = true;
									}
									if(o15.component.sleeping) {
										this.really_wake(o15,false);
									}
								}
							}
							if(arb3.b1.type == 2) {
								var o16 = arb3.b2;
								if(!o16.world) {
									o16.component.waket = this.stamp + (this.midstep?0:1);
									if(o16.type == 3) {
										o16.kinematicDelaySleep = true;
									}
									if(o16.component.sleeping) {
										this.really_wake(o16,false);
									}
								}
							}
						}
					}
					if((arb3.immState & 1) != 0) {
						if(arb3.b1.type == 2 && arb3.b1.component.sleeping) {
							var o17 = arb3.b1;
							if(!o17.world) {
								o17.component.waket = this.stamp + (this.midstep?0:1);
								if(o17.type == 3) {
									o17.kinematicDelaySleep = true;
								}
								if(o17.component.sleeping) {
									this.really_wake(o17,false);
								}
							}
						}
						if(arb3.b2.type == 2 && arb3.b2.component.sleeping) {
							var o18 = arb3.b2;
							if(!o18.world) {
								o18.component.waket = this.stamp + (this.midstep?0:1);
								if(o18.type == 3) {
									o18.kinematicDelaySleep = true;
								}
								if(o18.component.sleeping) {
									this.really_wake(o18,false);
								}
							}
						}
					}
					if(arb3.sleeping) {
						arb3.sleeping = false;
						var ret47;
						if(ZNPNode_ZPP_ColArbiter.zpp_pool == null) {
							ret47 = new ZNPNode_ZPP_ColArbiter();
						} else {
							ret47 = ZNPNode_ZPP_ColArbiter.zpp_pool;
							ZNPNode_ZPP_ColArbiter.zpp_pool = ret47.next;
							ret47.next = null;
						}
						ret47.elt = arb3;
						var temp21 = ret47;
						temp21.next = carbs.head;
						carbs.head = temp21;
						carbs.modified = true;
						carbs.length++;
					}
					ret = arb3;
				} else if(first1) {
					var o19 = arb3;
					o19.userdef_dyn_fric = false;
					o19.userdef_stat_fric = false;
					o19.userdef_restitution = false;
					o19.userdef_rfric = false;
					o19.__ref_edge1 = o19.__ref_edge2 = null;
					o19.next = ZPP_ColArbiter.zpp_pool;
					ZPP_ColArbiter.zpp_pool = o19;
					ret = null;
				} else {
					ret = arb3;
				}
			} else {
				ret = arb3;
			}
		} else {
			var xarb2;
			if(in_arb == null) {
				var ret48 = null;
				var cx_ite20 = (b1.arbiters.length < b2.arbiters.length?b1:b2).arbiters.head;
				while(cx_ite20 != null) {
					var arb4 = cx_ite20.elt;
					if(arb4.id == sa.id && arb4.di == sb.id) {
						ret48 = arb4;
						break;
					}
					cx_ite20 = cx_ite20.next;
				}
				xarb2 = ret48;
			} else {
				xarb2 = in_arb;
			}
			var first2 = xarb2 == null;
			var arb5;
			var swapped2 = false;
			if(first2) {
				if(ZPP_SensorArbiter.zpp_pool == null) {
					arb5 = new ZPP_SensorArbiter();
				} else {
					arb5 = ZPP_SensorArbiter.zpp_pool;
					ZPP_SensorArbiter.zpp_pool = arb5.next;
					arb5.next = null;
				}
			} else if(xarb2.sensorarb == null) {
				xarb2.cleared = true;
				var _this39 = xarb2.b1.arbiters;
				var pre5 = null;
				var cur6 = _this39.head;
				while(cur6 != null) {
					if(cur6.elt == xarb2) {
						var old6;
						var ret49;
						if(pre5 == null) {
							old6 = _this39.head;
							ret49 = old6.next;
							_this39.head = ret49;
							if(_this39.head == null) {
								_this39.pushmod = true;
							}
						} else {
							old6 = pre5.next;
							ret49 = old6.next;
							pre5.next = ret49;
							if(ret49 == null) {
								_this39.pushmod = true;
							}
						}
						var o20 = old6;
						o20.elt = null;
						o20.next = ZNPNode_ZPP_Arbiter.zpp_pool;
						ZNPNode_ZPP_Arbiter.zpp_pool = o20;
						_this39.modified = true;
						_this39.length--;
						_this39.pushmod = true;
						break;
					}
					pre5 = cur6;
					cur6 = cur6.next;
				}
				var _this40 = xarb2.b2.arbiters;
				var pre6 = null;
				var cur7 = _this40.head;
				while(cur7 != null) {
					if(cur7.elt == xarb2) {
						var old7;
						var ret50;
						if(pre6 == null) {
							old7 = _this40.head;
							ret50 = old7.next;
							_this40.head = ret50;
							if(_this40.head == null) {
								_this40.pushmod = true;
							}
						} else {
							old7 = pre6.next;
							ret50 = old7.next;
							pre6.next = ret50;
							if(ret50 == null) {
								_this40.pushmod = true;
							}
						}
						var o23 = old7;
						o23.elt = null;
						o23.next = ZNPNode_ZPP_Arbiter.zpp_pool;
						ZNPNode_ZPP_Arbiter.zpp_pool = o23;
						_this40.modified = true;
						_this40.length--;
						_this40.pushmod = true;
						break;
					}
					pre6 = cur7;
					cur7 = cur7.next;
				}
				if(xarb2.pair != null) {
					xarb2.pair.arb = null;
					xarb2.pair = null;
				}
				xarb2.active = false;
				this.f_arbiters.modified = true;
				if(ZPP_SensorArbiter.zpp_pool == null) {
					arb5 = new ZPP_SensorArbiter();
				} else {
					arb5 = ZPP_SensorArbiter.zpp_pool;
					ZPP_SensorArbiter.zpp_pool = arb5.next;
					arb5.next = null;
				}
				arb5.intchange = true;
				first2 = true;
				swapped2 = true;
			} else {
				arb5 = xarb2.sensorarb;
			}
			if(first2 || arb5.stamp != this.stamp || continuous) {
				arb5.stamp = this.stamp;
				if(ZPP_Collide.testCollide(sa,sb)) {
					if(first2) {
						var id2 = sa.id;
						var di2 = sb.id;
						arb5.b1 = s1.body;
						arb5.ws1 = s1;
						arb5.b2 = s2.body;
						arb5.ws2 = s2;
						arb5.id = id2;
						arb5.di = di2;
						var _this41 = arb5.b1.arbiters;
						var ret51;
						if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
							ret51 = new ZNPNode_ZPP_Arbiter();
						} else {
							ret51 = ZNPNode_ZPP_Arbiter.zpp_pool;
							ZNPNode_ZPP_Arbiter.zpp_pool = ret51.next;
							ret51.next = null;
						}
						ret51.elt = arb5;
						var temp22 = ret51;
						temp22.next = _this41.head;
						_this41.head = temp22;
						_this41.modified = true;
						_this41.length++;
						var _this42 = arb5.b2.arbiters;
						var ret52;
						if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
							ret52 = new ZNPNode_ZPP_Arbiter();
						} else {
							ret52 = ZNPNode_ZPP_Arbiter.zpp_pool;
							ZNPNode_ZPP_Arbiter.zpp_pool = ret52.next;
							ret52.next = null;
						}
						ret52.elt = arb5;
						var temp23 = ret52;
						temp23.next = _this42.head;
						_this42.head = temp23;
						_this42.modified = true;
						_this42.length++;
						arb5.active = true;
						arb5.present = 0;
						arb5.cleared = false;
						arb5.sleeping = false;
						arb5.fresh = false;
						arb5.presentable = false;
						var _this43 = this.s_arbiters;
						var ret53;
						if(ZNPNode_ZPP_SensorArbiter.zpp_pool == null) {
							ret53 = new ZNPNode_ZPP_SensorArbiter();
						} else {
							ret53 = ZNPNode_ZPP_SensorArbiter.zpp_pool;
							ZNPNode_ZPP_SensorArbiter.zpp_pool = ret53.next;
							ret53.next = null;
						}
						ret53.elt = arb5;
						var temp24 = ret53;
						temp24.next = _this43.head;
						_this43.head = temp24;
						_this43.modified = true;
						_this43.length++;
						arb5.fresh = !swapped2;
					} else {
						arb5.fresh = arb5.up_stamp < this.stamp - 1 || arb5.endGenerated == this.stamp && continuous;
					}
					arb5.up_stamp = arb5.stamp;
					if(arb5.fresh || (arb5.immState & 4) == 0) {
						arb5.immState = 1;
						var anyimpure2 = false;
						var arbs12 = arb5.ws1.id > arb5.ws2.id?arb5.ws2:arb5.ws1;
						var arbs22 = arb5.ws1.id > arb5.ws2.id?arb5.ws1:arb5.ws2;
						var _this44 = this.mrca1;
						while(_this44.head != null) {
							var ret54 = _this44.head;
							_this44.head = ret54.next;
							ret54.elt = null;
							ret54.next = ZNPNode_ZPP_Interactor.zpp_pool;
							ZNPNode_ZPP_Interactor.zpp_pool = ret54;
							if(_this44.head == null) {
								_this44.pushmod = true;
							}
							_this44.modified = true;
							_this44.length--;
						}
						_this44.pushmod = true;
						var _this45 = this.mrca2;
						while(_this45.head != null) {
							var ret55 = _this45.head;
							_this45.head = ret55.next;
							ret55.elt = null;
							ret55.next = ZNPNode_ZPP_Interactor.zpp_pool;
							ZNPNode_ZPP_Interactor.zpp_pool = ret55;
							if(_this45.head == null) {
								_this45.pushmod = true;
							}
							_this45.modified = true;
							_this45.length--;
						}
						_this45.pushmod = true;
						if(arbs12.cbSet != null) {
							var _this46 = this.mrca1;
							var ret56;
							if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
								ret56 = new ZNPNode_ZPP_Interactor();
							} else {
								ret56 = ZNPNode_ZPP_Interactor.zpp_pool;
								ZNPNode_ZPP_Interactor.zpp_pool = ret56.next;
								ret56.next = null;
							}
							ret56.elt = arbs12;
							var temp25 = ret56;
							temp25.next = _this46.head;
							_this46.head = temp25;
							_this46.modified = true;
							_this46.length++;
						}
						if(arbs12.body.cbSet != null) {
							var _this47 = this.mrca1;
							var o24 = arbs12.body;
							var ret57;
							if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
								ret57 = new ZNPNode_ZPP_Interactor();
							} else {
								ret57 = ZNPNode_ZPP_Interactor.zpp_pool;
								ZNPNode_ZPP_Interactor.zpp_pool = ret57.next;
								ret57.next = null;
							}
							ret57.elt = o24;
							var temp26 = ret57;
							temp26.next = _this47.head;
							_this47.head = temp26;
							_this47.modified = true;
							_this47.length++;
						}
						if(arbs22.cbSet != null) {
							var _this48 = this.mrca2;
							var ret58;
							if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
								ret58 = new ZNPNode_ZPP_Interactor();
							} else {
								ret58 = ZNPNode_ZPP_Interactor.zpp_pool;
								ZNPNode_ZPP_Interactor.zpp_pool = ret58.next;
								ret58.next = null;
							}
							ret58.elt = arbs22;
							var temp27 = ret58;
							temp27.next = _this48.head;
							_this48.head = temp27;
							_this48.modified = true;
							_this48.length++;
						}
						if(arbs22.body.cbSet != null) {
							var _this49 = this.mrca2;
							var o25 = arbs22.body;
							var ret59;
							if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
								ret59 = new ZNPNode_ZPP_Interactor();
							} else {
								ret59 = ZNPNode_ZPP_Interactor.zpp_pool;
								ZNPNode_ZPP_Interactor.zpp_pool = ret59.next;
								ret59.next = null;
							}
							ret59.elt = o25;
							var temp28 = ret59;
							temp28.next = _this49.head;
							_this49.head = temp28;
							_this49.modified = true;
							_this49.length++;
						}
						var c12 = arbs12.body.compound;
						var c22 = arbs22.body.compound;
						while(c12 != c22) if((c12 == null?0:c12.depth) < (c22 == null?0:c22.depth)) {
							if(c22.cbSet != null) {
								var _this50 = this.mrca2;
								var ret60;
								if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
									ret60 = new ZNPNode_ZPP_Interactor();
								} else {
									ret60 = ZNPNode_ZPP_Interactor.zpp_pool;
									ZNPNode_ZPP_Interactor.zpp_pool = ret60.next;
									ret60.next = null;
								}
								ret60.elt = c22;
								var temp29 = ret60;
								temp29.next = _this50.head;
								_this50.head = temp29;
								_this50.modified = true;
								_this50.length++;
							}
							c22 = c22.compound;
						} else {
							if(c12.cbSet != null) {
								var _this51 = this.mrca1;
								var ret61;
								if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
									ret61 = new ZNPNode_ZPP_Interactor();
								} else {
									ret61 = ZNPNode_ZPP_Interactor.zpp_pool;
									ZNPNode_ZPP_Interactor.zpp_pool = ret61.next;
									ret61.next = null;
								}
								ret61.elt = c12;
								var temp30 = ret61;
								temp30.next = _this51.head;
								_this51.head = temp30;
								_this51.modified = true;
								_this51.length++;
							}
							c12 = c12.compound;
						}
						var cx_ite21 = this.mrca1.head;
						while(cx_ite21 != null) {
							var i12 = cx_ite21.elt;
							var cx_ite22 = this.mrca2.head;
							while(cx_ite22 != null) {
								var i22 = cx_ite22.elt;
								var cb12 = i12.cbSet;
								var cb22 = i22.cbSet;
								var ret62 = null;
								var cx_ite23 = (cb12.cbpairs.length < cb22.cbpairs.length?cb12.cbpairs:cb22.cbpairs).head;
								while(cx_ite23 != null) {
									var p4 = cx_ite23.elt;
									if(p4.a == cb12 && p4.b == cb22 || p4.a == cb22 && p4.b == cb12) {
										ret62 = p4;
										break;
									}
									cx_ite23 = cx_ite23.next;
								}
								if(ret62 == null) {
									var ret63;
									if(ZPP_CbSetPair.zpp_pool == null) {
										ret63 = new ZPP_CbSetPair();
									} else {
										ret63 = ZPP_CbSetPair.zpp_pool;
										ZPP_CbSetPair.zpp_pool = ret63.next;
										ret63.next = null;
									}
									ret63.zip_listeners = true;
									if(ZPP_CbSet.setlt(cb12,cb22)) {
										ret63.a = cb12;
										ret63.b = cb22;
									} else {
										ret63.a = cb22;
										ret63.b = cb12;
									}
									ret62 = ret63;
									cb12.cbpairs.add(ret62);
									if(cb22 != cb12) {
										cb22.cbpairs.add(ret62);
									}
								}
								if(ret62.zip_listeners) {
									ret62.zip_listeners = false;
									ret62.__validate();
								}
								if(ret62.listeners.head == null) {
									cx_ite22 = cx_ite22.next;
									continue;
								}
								var callbackset2 = null;
								var ncallbackset2 = null;
								var _this52 = this.prelisteners;
								while(_this52.head != null) {
									var ret64 = _this52.head;
									_this52.head = ret64.next;
									ret64.elt = null;
									ret64.next = ZNPNode_ZPP_InteractionListener.zpp_pool;
									ZNPNode_ZPP_InteractionListener.zpp_pool = ret64;
									if(_this52.head == null) {
										_this52.pushmod = true;
									}
									_this52.modified = true;
									_this52.length--;
								}
								_this52.pushmod = true;
								var lite2 = null;
								var ret65 = null;
								var cx_ite24 = (cb12.cbpairs.length < cb22.cbpairs.length?cb12.cbpairs:cb22.cbpairs).head;
								while(cx_ite24 != null) {
									var p5 = cx_ite24.elt;
									if(p5.a == cb12 && p5.b == cb22 || p5.a == cb22 && p5.b == cb12) {
										ret65 = p5;
										break;
									}
									cx_ite24 = cx_ite24.next;
								}
								if(ret65 == null) {
									var ret66;
									if(ZPP_CbSetPair.zpp_pool == null) {
										ret66 = new ZPP_CbSetPair();
									} else {
										ret66 = ZPP_CbSetPair.zpp_pool;
										ZPP_CbSetPair.zpp_pool = ret66.next;
										ret66.next = null;
									}
									ret66.zip_listeners = true;
									if(ZPP_CbSet.setlt(cb12,cb22)) {
										ret66.a = cb12;
										ret66.b = cb22;
									} else {
										ret66.a = cb22;
										ret66.b = cb12;
									}
									ret65 = ret66;
									cb12.cbpairs.add(ret65);
									if(cb22 != cb12) {
										cb22.cbpairs.add(ret65);
									}
								}
								if(ret65.zip_listeners) {
									ret65.zip_listeners = false;
									ret65.__validate();
								}
								var cx_ite25 = ret65.listeners.head;
								while(cx_ite25 != null) {
									var x5 = cx_ite25.elt;
									if(x5.event == 5) {
										if((x5.itype & 2) != 0) {
											var _this53 = _gthis.prelisteners;
											var ret67;
											if(ZNPNode_ZPP_InteractionListener.zpp_pool == null) {
												ret67 = new ZNPNode_ZPP_InteractionListener();
											} else {
												ret67 = ZNPNode_ZPP_InteractionListener.zpp_pool;
												ZNPNode_ZPP_InteractionListener.zpp_pool = ret67.next;
												ret67.next = null;
											}
											ret67.elt = x5;
											var temp31 = ret67;
											if(lite2 == null) {
												temp31.next = _this53.head;
												_this53.head = temp31;
											} else {
												temp31.next = lite2.next;
												lite2.next = temp31;
											}
											_this53.pushmod = _this53.modified = true;
											_this53.length++;
											lite2 = temp31;
											if(!anyimpure2) {
												anyimpure2 = !x5.pure;
											} else {
												anyimpure2 = true;
											}
										}
									}
									cx_ite25 = cx_ite25.next;
								}
								if(this.prelisteners.head == null) {
									cx_ite22 = cx_ite22.next;
									continue;
								}
								callbackset2 = ZPP_Interactor.get(i12,i22);
								if(callbackset2 == null) {
									ncallbackset2 = ZPP_CallbackSet.get(i12,i22);
									this.add_callbackset(ncallbackset2);
								}
								if(callbackset2 == null || (callbackset2.SENSORstamp != this.stamp || continuous) && (callbackset2.SENSORstate & 4) == 0) {
									if(ncallbackset2 != null) {
										callbackset2 = ncallbackset2;
									}
									if(callbackset2 != null) {
										var cx_ite26 = this.prelisteners.head;
										while(cx_ite26 != null) {
											if(cx_ite26.elt.itype == 7) {
												callbackset2.COLLISIONstamp = this.stamp;
												callbackset2.SENSORstamp = this.stamp;
												callbackset2.FLUIDstamp = this.stamp;
											} else {
												callbackset2.SENSORstamp = this.stamp;
											}
											cx_ite26 = cx_ite26.next;
										}
									}
									var pact3 = arb5.active;
									arb5.active = true;
									this.precb.zpp_inner.pre_arbiter = arb5;
									this.precb.zpp_inner.set = callbackset2;
									var cx_ite27 = this.prelisteners.head;
									while(cx_ite27 != null) {
										var listener2 = cx_ite27.elt;
										this.precb.zpp_inner.listener = listener2;
										var cb4 = this.precb.zpp_inner;
										var o110 = callbackset2.int1;
										var o26 = callbackset2.int2;
										var tmp11;
										var _this54 = listener2.options1;
										var xs4 = o110.cbTypes;
										if(_this54.nonemptyintersection(xs4,_this54.includes) && !_this54.nonemptyintersection(xs4,_this54.excludes)) {
											var _this55 = listener2.options2;
											var xs5 = o26.cbTypes;
											if(_this55.nonemptyintersection(xs5,_this55.includes)) {
												tmp11 = !_this55.nonemptyintersection(xs5,_this55.excludes);
											} else {
												tmp11 = false;
											}
										} else {
											tmp11 = false;
										}
										if(tmp11) {
											cb4.int1 = o110;
											cb4.int2 = o26;
										} else {
											cb4.int1 = o26;
											cb4.int2 = o110;
										}
										this.precb.zpp_inner.pre_swapped = i12 != this.precb.zpp_inner.int1;
										var ret68 = listener2.handlerp(this.precb);
										if(ret68 != null) {
											var tmp12;
											if(ZPP_Flags.PreFlag_ACCEPT == null) {
												ZPP_Flags.internal = true;
												ZPP_Flags.PreFlag_ACCEPT = new PreFlag();
												ZPP_Flags.internal = false;
											}
											if(ret68 == ZPP_Flags.PreFlag_ACCEPT) {
												tmp12 = 5;
											} else {
												if(ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
													ZPP_Flags.internal = true;
													ZPP_Flags.PreFlag_ACCEPT_ONCE = new PreFlag();
													ZPP_Flags.internal = false;
												}
												if(ret68 == ZPP_Flags.PreFlag_ACCEPT_ONCE) {
													tmp12 = 1;
												} else {
													if(ZPP_Flags.PreFlag_IGNORE == null) {
														ZPP_Flags.internal = true;
														ZPP_Flags.PreFlag_IGNORE = new PreFlag();
														ZPP_Flags.internal = false;
													}
													if(ret68 == ZPP_Flags.PreFlag_IGNORE) {
														tmp12 = 6;
													} else {
														tmp12 = 2;
													}
												}
											}
											arb5.immState = tmp12;
										}
										cx_ite27 = cx_ite27.next;
									}
									arb5.active = pact3;
									if(callbackset2 != null) {
										var cx_ite28 = this.prelisteners.head;
										while(cx_ite28 != null) {
											if(cx_ite28.elt.itype == 7) {
												callbackset2.COLLISIONstate = arb5.immState;
												callbackset2.SENSORstate = arb5.immState;
												callbackset2.FLUIDstate = arb5.immState;
											} else {
												callbackset2.SENSORstate = arb5.immState;
											}
											cx_ite28 = cx_ite28.next;
										}
									}
								} else if(callbackset2 == null) {
									if((arb5.immState & 4) == 0) {
										arb5.immState = 1;
									}
								} else {
									arb5.immState = callbackset2.SENSORstate;
								}
								cx_ite22 = cx_ite22.next;
							}
							cx_ite21 = cx_ite21.next;
						}
						if(anyimpure2 && (arb5.immState & 4) == 0) {
							if(arb5.b1.type != 1) {
								var o27 = arb5.b1;
								if(!o27.world) {
									o27.component.waket = this.stamp + (this.midstep?0:1);
									if(o27.type == 3) {
										o27.kinematicDelaySleep = true;
									}
									if(o27.component.sleeping) {
										this.really_wake(o27,false);
									}
								}
							}
							if(arb5.b2.type != 1) {
								var o28 = arb5.b2;
								if(!o28.world) {
									o28.component.waket = this.stamp + (this.midstep?0:1);
									if(o28.type == 3) {
										o28.kinematicDelaySleep = true;
									}
									if(o28.component.sleeping) {
										this.really_wake(o28,false);
									}
								}
							}
						}
					}
					if(arb5.sleeping) {
						arb5.sleeping = false;
						var _this56 = this.s_arbiters;
						var ret69;
						if(ZNPNode_ZPP_SensorArbiter.zpp_pool == null) {
							ret69 = new ZNPNode_ZPP_SensorArbiter();
						} else {
							ret69 = ZNPNode_ZPP_SensorArbiter.zpp_pool;
							ZNPNode_ZPP_SensorArbiter.zpp_pool = ret69.next;
							ret69.next = null;
						}
						ret69.elt = arb5;
						var temp32 = ret69;
						temp32.next = _this56.head;
						_this56.head = temp32;
						_this56.modified = true;
						_this56.length++;
					}
					ret = arb5;
				} else if(first2) {
					var o29 = arb5;
					o29.next = ZPP_SensorArbiter.zpp_pool;
					ZPP_SensorArbiter.zpp_pool = o29;
					ret = null;
				} else {
					ret = arb5;
				}
			} else {
				ret = arb5;
			}
		}
	}
	return ret;
};
ZPP_Space.prototype.mrca1 = null;
ZPP_Space.prototype.mrca2 = null;
ZPP_Space.prototype.MRCA_chains = function(s1,s2) {
	var _this = this.mrca1;
	while(_this.head != null) {
		var ret = _this.head;
		_this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Interactor.zpp_pool;
		ZNPNode_ZPP_Interactor.zpp_pool = ret;
		if(_this.head == null) {
			_this.pushmod = true;
		}
		_this.modified = true;
		_this.length--;
	}
	_this.pushmod = true;
	var _this1 = this.mrca2;
	while(_this1.head != null) {
		var ret1 = _this1.head;
		_this1.head = ret1.next;
		ret1.elt = null;
		ret1.next = ZNPNode_ZPP_Interactor.zpp_pool;
		ZNPNode_ZPP_Interactor.zpp_pool = ret1;
		if(_this1.head == null) {
			_this1.pushmod = true;
		}
		_this1.modified = true;
		_this1.length--;
	}
	_this1.pushmod = true;
	if(s1.cbSet != null) {
		var _this2 = this.mrca1;
		var ret2;
		if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
			ret2 = new ZNPNode_ZPP_Interactor();
		} else {
			ret2 = ZNPNode_ZPP_Interactor.zpp_pool;
			ZNPNode_ZPP_Interactor.zpp_pool = ret2.next;
			ret2.next = null;
		}
		ret2.elt = s1;
		var temp = ret2;
		temp.next = _this2.head;
		_this2.head = temp;
		_this2.modified = true;
		_this2.length++;
	}
	if(s1.body.cbSet != null) {
		var _this3 = this.mrca1;
		var o = s1.body;
		var ret3;
		if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
			ret3 = new ZNPNode_ZPP_Interactor();
		} else {
			ret3 = ZNPNode_ZPP_Interactor.zpp_pool;
			ZNPNode_ZPP_Interactor.zpp_pool = ret3.next;
			ret3.next = null;
		}
		ret3.elt = o;
		var temp1 = ret3;
		temp1.next = _this3.head;
		_this3.head = temp1;
		_this3.modified = true;
		_this3.length++;
	}
	if(s2.cbSet != null) {
		var _this4 = this.mrca2;
		var ret4;
		if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
			ret4 = new ZNPNode_ZPP_Interactor();
		} else {
			ret4 = ZNPNode_ZPP_Interactor.zpp_pool;
			ZNPNode_ZPP_Interactor.zpp_pool = ret4.next;
			ret4.next = null;
		}
		ret4.elt = s2;
		var temp2 = ret4;
		temp2.next = _this4.head;
		_this4.head = temp2;
		_this4.modified = true;
		_this4.length++;
	}
	if(s2.body.cbSet != null) {
		var _this5 = this.mrca2;
		var o1 = s2.body;
		var ret5;
		if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
			ret5 = new ZNPNode_ZPP_Interactor();
		} else {
			ret5 = ZNPNode_ZPP_Interactor.zpp_pool;
			ZNPNode_ZPP_Interactor.zpp_pool = ret5.next;
			ret5.next = null;
		}
		ret5.elt = o1;
		var temp3 = ret5;
		temp3.next = _this5.head;
		_this5.head = temp3;
		_this5.modified = true;
		_this5.length++;
	}
	var c1 = s1.body.compound;
	var c2 = s2.body.compound;
	while(c1 != c2) if((c1 == null?0:c1.depth) < (c2 == null?0:c2.depth)) {
		if(c2.cbSet != null) {
			var _this6 = this.mrca2;
			var ret6;
			if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
				ret6 = new ZNPNode_ZPP_Interactor();
			} else {
				ret6 = ZNPNode_ZPP_Interactor.zpp_pool;
				ZNPNode_ZPP_Interactor.zpp_pool = ret6.next;
				ret6.next = null;
			}
			ret6.elt = c2;
			var temp4 = ret6;
			temp4.next = _this6.head;
			_this6.head = temp4;
			_this6.modified = true;
			_this6.length++;
		}
		c2 = c2.compound;
	} else {
		if(c1.cbSet != null) {
			var _this7 = this.mrca1;
			var ret7;
			if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
				ret7 = new ZNPNode_ZPP_Interactor();
			} else {
				ret7 = ZNPNode_ZPP_Interactor.zpp_pool;
				ZNPNode_ZPP_Interactor.zpp_pool = ret7.next;
				ret7.next = null;
			}
			ret7.elt = c1;
			var temp5 = ret7;
			temp5.next = _this7.head;
			_this7.head = temp5;
			_this7.modified = true;
			_this7.length++;
		}
		c1 = c1.compound;
	}
};
ZPP_Space.prototype.inlined_MRCA_chains = function(s1,s2) {
	var _this = this.mrca1;
	while(_this.head != null) {
		var ret = _this.head;
		_this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Interactor.zpp_pool;
		ZNPNode_ZPP_Interactor.zpp_pool = ret;
		if(_this.head == null) {
			_this.pushmod = true;
		}
		_this.modified = true;
		_this.length--;
	}
	_this.pushmod = true;
	var _this1 = this.mrca2;
	while(_this1.head != null) {
		var ret1 = _this1.head;
		_this1.head = ret1.next;
		ret1.elt = null;
		ret1.next = ZNPNode_ZPP_Interactor.zpp_pool;
		ZNPNode_ZPP_Interactor.zpp_pool = ret1;
		if(_this1.head == null) {
			_this1.pushmod = true;
		}
		_this1.modified = true;
		_this1.length--;
	}
	_this1.pushmod = true;
	if(s1.cbSet != null) {
		var _this2 = this.mrca1;
		var ret2;
		if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
			ret2 = new ZNPNode_ZPP_Interactor();
		} else {
			ret2 = ZNPNode_ZPP_Interactor.zpp_pool;
			ZNPNode_ZPP_Interactor.zpp_pool = ret2.next;
			ret2.next = null;
		}
		ret2.elt = s1;
		var temp = ret2;
		temp.next = _this2.head;
		_this2.head = temp;
		_this2.modified = true;
		_this2.length++;
	}
	if(s1.body.cbSet != null) {
		var _this3 = this.mrca1;
		var o = s1.body;
		var ret3;
		if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
			ret3 = new ZNPNode_ZPP_Interactor();
		} else {
			ret3 = ZNPNode_ZPP_Interactor.zpp_pool;
			ZNPNode_ZPP_Interactor.zpp_pool = ret3.next;
			ret3.next = null;
		}
		ret3.elt = o;
		var temp1 = ret3;
		temp1.next = _this3.head;
		_this3.head = temp1;
		_this3.modified = true;
		_this3.length++;
	}
	if(s2.cbSet != null) {
		var _this4 = this.mrca2;
		var ret4;
		if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
			ret4 = new ZNPNode_ZPP_Interactor();
		} else {
			ret4 = ZNPNode_ZPP_Interactor.zpp_pool;
			ZNPNode_ZPP_Interactor.zpp_pool = ret4.next;
			ret4.next = null;
		}
		ret4.elt = s2;
		var temp2 = ret4;
		temp2.next = _this4.head;
		_this4.head = temp2;
		_this4.modified = true;
		_this4.length++;
	}
	if(s2.body.cbSet != null) {
		var _this5 = this.mrca2;
		var o1 = s2.body;
		var ret5;
		if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
			ret5 = new ZNPNode_ZPP_Interactor();
		} else {
			ret5 = ZNPNode_ZPP_Interactor.zpp_pool;
			ZNPNode_ZPP_Interactor.zpp_pool = ret5.next;
			ret5.next = null;
		}
		ret5.elt = o1;
		var temp3 = ret5;
		temp3.next = _this5.head;
		_this5.head = temp3;
		_this5.modified = true;
		_this5.length++;
	}
	var c1 = s1.body.compound;
	var c2 = s2.body.compound;
	while(c1 != c2) if((c1 == null?0:c1.depth) < (c2 == null?0:c2.depth)) {
		if(c2.cbSet != null) {
			var _this6 = this.mrca2;
			var ret6;
			if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
				ret6 = new ZNPNode_ZPP_Interactor();
			} else {
				ret6 = ZNPNode_ZPP_Interactor.zpp_pool;
				ZNPNode_ZPP_Interactor.zpp_pool = ret6.next;
				ret6.next = null;
			}
			ret6.elt = c2;
			var temp4 = ret6;
			temp4.next = _this6.head;
			_this6.head = temp4;
			_this6.modified = true;
			_this6.length++;
		}
		c2 = c2.compound;
	} else {
		if(c1.cbSet != null) {
			var _this7 = this.mrca1;
			var ret7;
			if(ZNPNode_ZPP_Interactor.zpp_pool == null) {
				ret7 = new ZNPNode_ZPP_Interactor();
			} else {
				ret7 = ZNPNode_ZPP_Interactor.zpp_pool;
				ZNPNode_ZPP_Interactor.zpp_pool = ret7.next;
				ret7.next = null;
			}
			ret7.elt = c1;
			var temp5 = ret7;
			temp5.next = _this7.head;
			_this7.head = temp5;
			_this7.modified = true;
			_this7.length++;
		}
		c1 = c1.compound;
	}
};
ZPP_Space.prototype.__class__ = ZPP_Space;
var ZPP_SweepData = zpp_nape.space.ZPP_SweepData = function() {
	this.aabb = null;
	this.shape = null;
	this.prev = null;
	this.next = null;
};
ZPP_SweepData.__name__ = ["zpp_nape","space","ZPP_SweepData"];
ZPP_SweepData.prototype.next = null;
ZPP_SweepData.prototype.prev = null;
ZPP_SweepData.prototype.shape = null;
ZPP_SweepData.prototype.aabb = null;
ZPP_SweepData.prototype.free = function() {
	this.prev = null;
	this.shape = null;
	this.aabb = null;
};
ZPP_SweepData.prototype.alloc = function() {
};
ZPP_SweepData.prototype.gt = function(x) {
	return this.aabb.minx > x.aabb.minx;
};
ZPP_SweepData.prototype.__class__ = ZPP_SweepData;
var ZPP_SweepPhase = zpp_nape.space.ZPP_SweepPhase = function(space) {
	this.failed = null;
	this.list = null;
	ZPP_Broadphase.call(this);
	this.space = space;
	this.is_sweep = true;
	this.sweep = this;
};
ZPP_SweepPhase.__name__ = ["zpp_nape","space","ZPP_SweepPhase"];
ZPP_SweepPhase.__super__ = ZPP_Broadphase;
// for(var k in ZPP_Broadphase.prototype ) ZPP_SweepPhase.prototype[k] = ZPP_Broadphase.prototype[k];
ZPP_SweepPhase.prototype = Object.create(ZPP_Broadphase.prototype);
ZPP_SweepPhase.prototype.list = null;
ZPP_SweepPhase.prototype.__insert = function(shape) {
	var dat;
	if(ZPP_SweepData.zpp_pool == null) {
		dat = new ZPP_SweepData();
	} else {
		dat = ZPP_SweepData.zpp_pool;
		ZPP_SweepData.zpp_pool = dat.next;
		dat.next = null;
	}
	shape.sweep = dat;
	dat.shape = shape;
	dat.aabb = shape.aabb;
	dat.next = this.list;
	if(this.list != null) {
		this.list.prev = dat;
	}
	this.list = dat;
};
ZPP_SweepPhase.prototype.__remove = function(shape) {
	var dat = shape.sweep;
	if(dat.prev == null) {
		this.list = dat.next;
	} else {
		dat.prev.next = dat.next;
	}
	if(dat.next != null) {
		dat.next.prev = dat.prev;
	}
	shape.sweep = null;
	dat.prev = null;
	dat.shape = null;
	dat.aabb = null;
	dat.next = ZPP_SweepData.zpp_pool;
	ZPP_SweepData.zpp_pool = dat;
};
ZPP_SweepPhase.prototype.__sync = function(shape) {
	if(!this.space.continuous) {
		if(shape.zip_aabb) {
			if(shape.body != null) {
				shape.zip_aabb = false;
				if(shape.type == 0) {
					var _this = shape.circle;
					if(_this.zip_worldCOM) {
						if(_this.body != null) {
							_this.zip_worldCOM = false;
							if(_this.zip_localCOM) {
								_this.zip_localCOM = false;
								if(_this.type == 1) {
									var _this1 = _this.polygon;
									if(_this1.lverts.next == null) {
										throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful localCOM");
									}
									if(_this1.lverts.next.next == null) {
										_this1.localCOMx = _this1.lverts.next.x;
										_this1.localCOMy = _this1.lverts.next.y;
									} else if(_this1.lverts.next.next.next == null) {
										_this1.localCOMx = _this1.lverts.next.x;
										_this1.localCOMy = _this1.lverts.next.y;
										_this1.localCOMx += _this1.lverts.next.next.x;
										_this1.localCOMy += _this1.lverts.next.next.y;
										_this1.localCOMx *= 0.5;
										_this1.localCOMy *= 0.5;
									} else {
										_this1.localCOMx = 0;
										_this1.localCOMy = 0;
										var area = 0.0;
										var cx_ite = _this1.lverts.next;
										var u = cx_ite;
										cx_ite = cx_ite.next;
										var v = cx_ite;
										cx_ite = cx_ite.next;
										while(cx_ite != null) {
											var w = cx_ite;
											area += v.x * (w.y - u.y);
											var cf = w.y * v.x - w.x * v.y;
											_this1.localCOMx += (v.x + w.x) * cf;
											_this1.localCOMy += (v.y + w.y) * cf;
											u = v;
											v = w;
											cx_ite = cx_ite.next;
										}
										cx_ite = _this1.lverts.next;
										var w1 = cx_ite;
										area += v.x * (w1.y - u.y);
										var cf1 = w1.y * v.x - w1.x * v.y;
										_this1.localCOMx += (v.x + w1.x) * cf1;
										_this1.localCOMy += (v.y + w1.y) * cf1;
										u = v;
										cx_ite = cx_ite.next;
										var w2 = cx_ite;
										area += w1.x * (w2.y - u.y);
										var cf2 = w2.y * w1.x - w2.x * w1.y;
										_this1.localCOMx += (w1.x + w2.x) * cf2;
										_this1.localCOMy += (w1.y + w2.y) * cf2;
										area = 1 / (3 * area);
										var t = area;
										_this1.localCOMx *= t;
										_this1.localCOMy *= t;
									}
								}
								if(_this.wrap_localCOM != null) {
									_this.wrap_localCOM.zpp_inner.x = _this.localCOMx;
									_this.wrap_localCOM.zpp_inner.y = _this.localCOMy;
								}
							}
							var _this2 = _this.body;
							if(_this2.zip_axis) {
								_this2.zip_axis = false;
								_this2.axisx = Math.sin(_this2.rot);
								_this2.axisy = Math.cos(_this2.rot);
							}
							_this.worldCOMx = _this.body.posx + (_this.body.axisy * _this.localCOMx - _this.body.axisx * _this.localCOMy);
							_this.worldCOMy = _this.body.posy + (_this.localCOMx * _this.body.axisx + _this.localCOMy * _this.body.axisy);
						}
					}
					var rx = _this.radius;
					var ry = _this.radius;
					_this.aabb.minx = _this.worldCOMx - rx;
					_this.aabb.miny = _this.worldCOMy - ry;
					_this.aabb.maxx = _this.worldCOMx + rx;
					_this.aabb.maxy = _this.worldCOMy + ry;
				} else {
					var _this3 = shape.polygon;
					if(_this3.zip_gverts) {
						if(_this3.body != null) {
							_this3.zip_gverts = false;
							_this3.validate_lverts();
							var _this4 = _this3.body;
							if(_this4.zip_axis) {
								_this4.zip_axis = false;
								_this4.axisx = Math.sin(_this4.rot);
								_this4.axisy = Math.cos(_this4.rot);
							}
							var li = _this3.lverts.next;
							var cx_ite1 = _this3.gverts.next;
							while(cx_ite1 != null) {
								var g = cx_ite1;
								var l = li;
								li = li.next;
								g.x = _this3.body.posx + (_this3.body.axisy * l.x - _this3.body.axisx * l.y);
								g.y = _this3.body.posy + (l.x * _this3.body.axisx + l.y * _this3.body.axisy);
								cx_ite1 = cx_ite1.next;
							}
						}
					}
					if(_this3.lverts.next == null) {
						throw new js._Boot.HaxeError("Error: An empty polygon has no meaningful bounds");
					}
					var p0 = _this3.gverts.next;
					_this3.aabb.minx = p0.x;
					_this3.aabb.miny = p0.y;
					_this3.aabb.maxx = p0.x;
					_this3.aabb.maxy = p0.y;
					var cx_ite2 = _this3.gverts.next.next;
					while(cx_ite2 != null) {
						var p = cx_ite2;
						if(p.x < _this3.aabb.minx) {
							_this3.aabb.minx = p.x;
						}
						if(p.x > _this3.aabb.maxx) {
							_this3.aabb.maxx = p.x;
						}
						if(p.y < _this3.aabb.miny) {
							_this3.aabb.miny = p.y;
						}
						if(p.y > _this3.aabb.maxy) {
							_this3.aabb.maxy = p.y;
						}
						cx_ite2 = cx_ite2.next;
					}
				}
			}
		}
	}
};
ZPP_SweepPhase.prototype.sync_broadphase = function() {
	this.space.validation();
	if(this.list != null) {
		var a = this.list.next;
		while(a != null) {
			var n = a.next;
			var b = a.prev;
			if(a.aabb.minx > b.aabb.minx) {
				a = n;
				continue;
			}
			while(b.prev != null && b.prev.aabb.minx > a.aabb.minx) b = b.prev;
			var prev = a.prev;
			prev.next = a.next;
			if(a.next != null) {
				a.next.prev = prev;
			}
			if(b.prev == null) {
				a.prev = null;
				this.list = a;
				a.next = b;
				b.prev = a;
			} else {
				a.prev = b.prev;
				b.prev = a;
				a.prev.next = a;
				a.next = b;
			}
			a = n;
		}
	}
};
ZPP_SweepPhase.prototype.sync_broadphase_fast = function() {
	var a = this.list.next;
	while(a != null) {
		var n = a.next;
		var b = a.prev;
		if(a.aabb.minx > b.aabb.minx) {
			a = n;
			continue;
		}
		while(b.prev != null && b.prev.aabb.minx > a.aabb.minx) b = b.prev;
		var prev = a.prev;
		prev.next = a.next;
		if(a.next != null) {
			a.next.prev = prev;
		}
		if(b.prev == null) {
			a.prev = null;
			this.list = a;
			a.next = b;
			b.prev = a;
		} else {
			a.prev = b.prev;
			b.prev = a;
			a.prev.next = a;
			a.next = b;
		}
		a = n;
	}
};
ZPP_SweepPhase.prototype.broadphase = function(space,discrete) {
	if(this.list != null) {
		var a = this.list.next;
		while(a != null) {
			var n = a.next;
			var b = a.prev;
			if(a.aabb.minx > b.aabb.minx) {
				a = n;
				continue;
			}
			while(b.prev != null && b.prev.aabb.minx > a.aabb.minx) b = b.prev;
			var prev = a.prev;
			prev.next = a.next;
			if(a.next != null) {
				a.next.prev = prev;
			}
			if(b.prev == null) {
				a.prev = null;
				this.list = a;
				a.next = b;
				b.prev = a;
			} else {
				a.prev = b.prev;
				b.prev = a;
				a.prev.next = a;
				a.next = b;
			}
			a = n;
		}
		var d1 = this.list;
		while(d1 != null) {
			var d2 = d1.next;
			var s1 = d1.shape;
			var b1 = s1.body;
			var bottom = d1.aabb.maxx;
			while(d2 != null) {
				if(d2.aabb.minx > bottom) {
					break;
				}
				var s2 = d2.shape;
				var b2 = s2.body;
				if(b2 == b1) {
					d2 = d2.next;
					continue;
				}
				if(b1.type == 1 && b2.type == 1) {
					d2 = d2.next;
					continue;
				}
				if(b1.component.sleeping && b2.component.sleeping) {
					d2 = d2.next;
					continue;
				}
				var _this = s1.aabb;
				var x = s2.aabb;
				if(!(x.miny > _this.maxy || _this.miny > x.maxy)) {
					if(discrete) {
						space.narrowPhase(s1,s2,b1.type != 2 || b2.type != 2,null,false);
					} else {
						space.continuousEvent(s1,s2,b1.type != 2 || b2.type != 2,null,false);
					}
				}
				d2 = d2.next;
			}
			d1 = d1.next;
		}
	}
};
ZPP_SweepPhase.prototype.clear = function() {
	while(this.list != null) {
		this.list.shape.removedFromSpace();
		this.__remove(this.list.shape);
	}
};
ZPP_SweepPhase.prototype.shapesUnderPoint = function(x,y,filter,output) {
	this.sync_broadphase();
	var ret;
	if(ZPP_Vec2.zpp_pool == null) {
		ret = new ZPP_Vec2();
	} else {
		ret = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.weak = false;
	ret._immutable = false;
	ret.x = x;
	ret.y = y;
	var v = ret;
	var ret1 = output == null?new ShapeList():output;
	var a = this.list;
	while(a != null && a.aabb.minx > x) a = a.next;
	while(a != null && a.aabb.minx <= x) {
		if(a.aabb.maxx >= x && a.aabb.miny <= y && a.aabb.maxy >= y) {
			var shape = a.shape;
			var tmp;
			if(filter != null) {
				var _this = shape.filter;
				if((_this.collisionMask & filter.collisionGroup) != 0) {
					tmp = (filter.collisionMask & _this.collisionGroup) != 0;
				} else {
					tmp = false;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				if(shape.type == 0) {
					if(ZPP_Collide.circleContains(shape.circle,v)) {
						ret1.push(shape.outer);
					}
				} else if(ZPP_Collide.polyContains(shape.polygon,v)) {
					ret1.push(shape.outer);
				}
			}
		}
		a = a.next;
	}
	if(v.outer != null) {
		v.outer.zpp_inner = null;
		v.outer = null;
	}
	v._isimmutable = null;
	v._validate = null;
	v._invalidate = null;
	v.next = ZPP_Vec2.zpp_pool;
	ZPP_Vec2.zpp_pool = v;
	return ret1;
};
ZPP_SweepPhase.prototype.bodiesUnderPoint = function(x,y,filter,output) {
	this.sync_broadphase();
	var ret;
	if(ZPP_Vec2.zpp_pool == null) {
		ret = new ZPP_Vec2();
	} else {
		ret = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.weak = false;
	ret._immutable = false;
	ret.x = x;
	ret.y = y;
	var v = ret;
	var ret1 = output == null?new BodyList():output;
	var a = this.list;
	while(a != null && a.aabb.minx > x) a = a.next;
	while(a != null && a.aabb.minx <= x) {
		if(a.aabb.maxx >= x && a.aabb.miny <= y && a.aabb.maxy >= y) {
			var shape = a.shape;
			var body = shape.body.outer;
			if(!ret1.has(body)) {
				var tmp;
				if(filter != null) {
					var _this = shape.filter;
					if((_this.collisionMask & filter.collisionGroup) != 0) {
						tmp = (filter.collisionMask & _this.collisionGroup) != 0;
					} else {
						tmp = false;
					}
				} else {
					tmp = true;
				}
				if(tmp) {
					if(shape.type == 0) {
						if(ZPP_Collide.circleContains(shape.circle,v)) {
							ret1.push(body);
						}
					} else if(ZPP_Collide.polyContains(shape.polygon,v)) {
						ret1.push(body);
					}
				}
			}
		}
		a = a.next;
	}
	if(v.outer != null) {
		v.outer.zpp_inner = null;
		v.outer = null;
	}
	v._isimmutable = null;
	v._validate = null;
	v._invalidate = null;
	v.next = ZPP_Vec2.zpp_pool;
	ZPP_Vec2.zpp_pool = v;
	return ret1;
};
ZPP_SweepPhase.prototype.shapesInAABB = function(aabb,strict,containment,filter,output) {
	this.sync_broadphase();
	this.updateAABBShape(aabb);
	var ab = this.aabbShape.zpp_inner.aabb;
	var ret = output == null?new ShapeList():output;
	var a = this.list;
	while(a != null && a.aabb.maxx < ab.minx) a = a.next;
	while(a != null && a.aabb.minx <= ab.maxx) {
		var shape = a.shape;
		var tmp;
		if(filter != null) {
			var _this = shape.filter;
			if((_this.collisionMask & filter.collisionGroup) != 0) {
				tmp = (filter.collisionMask & _this.collisionGroup) != 0;
			} else {
				tmp = false;
			}
		} else {
			tmp = true;
		}
		if(tmp) {
			if(strict) {
				if(containment) {
					if(ZPP_Collide.containTest(this.aabbShape.zpp_inner,shape)) {
						ret.push(shape.outer);
					}
				} else {
					var x = a.aabb;
					if(x.minx >= ab.minx && x.miny >= ab.miny && x.maxx <= ab.maxx && x.maxy <= ab.maxy) {
						ret.push(shape.outer);
					} else {
						var _this1 = a.aabb;
						if(ab.miny <= _this1.maxy && _this1.miny <= ab.maxy && ab.minx <= _this1.maxx && _this1.minx <= ab.maxx) {
							if(ZPP_Collide.testCollide_safe(shape,this.aabbShape.zpp_inner)) {
								ret.push(shape.outer);
							}
						}
					}
				}
			} else {
				var tmp1;
				if(containment) {
					var x1 = a.aabb;
					if(x1.minx >= ab.minx && x1.miny >= ab.miny && x1.maxx <= ab.maxx) {
						tmp1 = x1.maxy <= ab.maxy;
					} else {
						tmp1 = false;
					}
				} else {
					var _this2 = a.aabb;
					if(ab.miny <= _this2.maxy && _this2.miny <= ab.maxy && ab.minx <= _this2.maxx) {
						tmp1 = _this2.minx <= ab.maxx;
					} else {
						tmp1 = false;
					}
				}
				if(tmp1) {
					ret.push(shape.outer);
				}
			}
		}
		a = a.next;
	}
	return ret;
};
ZPP_SweepPhase.prototype.failed = null;
ZPP_SweepPhase.prototype.bodiesInAABB = function(aabb,strict,containment,filter,output) {
	this.sync_broadphase();
	this.updateAABBShape(aabb);
	var ab = this.aabbShape.zpp_inner.aabb;
	var ret = output == null?new BodyList():output;
	if(this.failed == null) {
		this.failed = new BodyList();
	}
	var a = this.list;
	while(a != null && a.aabb.maxx < ab.minx) a = a.next;
	while(a != null && a.aabb.minx <= ab.maxx) {
		var shape = a.shape;
		var body = shape.body.outer;
		var _this = a.aabb;
		if(ab.miny <= _this.maxy && _this.miny <= ab.maxy && ab.minx <= _this.maxx && _this.minx <= ab.maxx) {
			var tmp;
			if(filter != null) {
				var _this1 = shape.filter;
				if((_this1.collisionMask & filter.collisionGroup) != 0) {
					tmp = (filter.collisionMask & _this1.collisionGroup) != 0;
				} else {
					tmp = false;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				if(strict) {
					if(containment) {
						if(!this.failed.has(body)) {
							var col = ZPP_Collide.containTest(this.aabbShape.zpp_inner,shape);
							if(!ret.has(body) && col) {
								ret.push(body);
							} else if(!col) {
								ret.remove(body);
								this.failed.push(body);
							}
						}
					} else if(!ret.has(body) && ZPP_Collide.testCollide_safe(shape,this.aabbShape.zpp_inner)) {
						ret.push(body);
					}
				} else if(containment) {
					if(!this.failed.has(body)) {
						var x = shape.aabb;
						var col1 = x.minx >= ab.minx && x.miny >= ab.miny && x.maxx <= ab.maxx && x.maxy <= ab.maxy;
						if(!ret.has(body) && col1) {
							ret.push(body);
						} else if(!col1) {
							ret.remove(body);
							this.failed.push(body);
						}
					}
				} else {
					var tmp1;
					if(!ret.has(body)) {
						var x1 = shape.aabb;
						if(x1.minx >= ab.minx && x1.miny >= ab.miny && x1.maxx <= ab.maxx) {
							tmp1 = x1.maxy <= ab.maxy;
						} else {
							tmp1 = false;
						}
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						ret.push(body);
					}
				}
			}
		}
		a = a.next;
	}
	this.failed.clear();
	return ret;
};
ZPP_SweepPhase.prototype.shapesInCircle = function(x,y,r,containment,filter,output) {
	this.sync_broadphase();
	this.updateCircShape(x,y,r);
	var ab = this.circShape.zpp_inner.aabb;
	var ret = output == null?new ShapeList():output;
	var a = this.list;
	while(a != null && a.aabb.maxx < ab.minx) a = a.next;
	while(a != null && a.aabb.minx <= ab.maxx) {
		var _this = a.aabb;
		if(ab.miny <= _this.maxy && _this.miny <= ab.maxy && ab.minx <= _this.maxx && _this.minx <= ab.maxx) {
			var shape = a.shape;
			var tmp;
			if(filter != null) {
				var _this1 = shape.filter;
				if((_this1.collisionMask & filter.collisionGroup) != 0) {
					tmp = (filter.collisionMask & _this1.collisionGroup) != 0;
				} else {
					tmp = false;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				if(containment) {
					if(ZPP_Collide.containTest(this.circShape.zpp_inner,shape)) {
						ret.push(shape.outer);
					}
				} else if(ZPP_Collide.testCollide_safe(shape,this.circShape.zpp_inner)) {
					ret.push(shape.outer);
				}
			}
		}
		a = a.next;
	}
	return ret;
};
ZPP_SweepPhase.prototype.bodiesInCircle = function(x,y,r,containment,filter,output) {
	this.sync_broadphase();
	this.updateCircShape(x,y,r);
	var ab = this.circShape.zpp_inner.aabb;
	var ret = output == null?new BodyList():output;
	if(this.failed == null) {
		this.failed = new BodyList();
	}
	var a = this.list;
	while(a != null && a.aabb.maxx < ab.minx) a = a.next;
	while(a != null && a.aabb.minx <= ab.maxx) {
		var _this = a.aabb;
		if(ab.miny <= _this.maxy && _this.miny <= ab.maxy && ab.minx <= _this.maxx && _this.minx <= ab.maxx) {
			var shape = a.shape;
			var body = shape.body.outer;
			var tmp;
			if(filter != null) {
				var _this1 = shape.filter;
				if((_this1.collisionMask & filter.collisionGroup) != 0) {
					tmp = (filter.collisionMask & _this1.collisionGroup) != 0;
				} else {
					tmp = false;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				if(containment) {
					if(!this.failed.has(body)) {
						var col = ZPP_Collide.containTest(this.circShape.zpp_inner,shape);
						if(!ret.has(body) && col) {
							ret.push(body);
						} else if(!col) {
							ret.remove(body);
							this.failed.push(body);
						}
					}
				} else if(!ret.has(body) && ZPP_Collide.testCollide_safe(shape,this.circShape.zpp_inner)) {
					ret.push(body);
				}
			}
		}
		a = a.next;
	}
	this.failed.clear();
	return ret;
};
ZPP_SweepPhase.prototype.shapesInShape = function(shape,containment,filter,output) {
	this.sync_broadphase();
	this.validateShape(shape);
	var ab = shape.aabb;
	var ret = output == null?new ShapeList():output;
	var a = this.list;
	while(a != null && a.aabb.maxx < ab.minx) a = a.next;
	while(a != null && a.aabb.minx <= ab.maxx) {
		var _this = a.aabb;
		if(ab.miny <= _this.maxy && _this.miny <= ab.maxy && ab.minx <= _this.maxx && _this.minx <= ab.maxx) {
			var shape2 = a.shape;
			var tmp;
			if(filter != null) {
				var _this1 = shape2.filter;
				if((_this1.collisionMask & filter.collisionGroup) != 0) {
					tmp = (filter.collisionMask & _this1.collisionGroup) != 0;
				} else {
					tmp = false;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				if(containment) {
					if(ZPP_Collide.containTest(shape,shape2)) {
						ret.push(shape2.outer);
					}
				} else if(ZPP_Collide.testCollide_safe(shape2,shape)) {
					ret.push(shape2.outer);
				}
			}
		}
		a = a.next;
	}
	return ret;
};
ZPP_SweepPhase.prototype.bodiesInShape = function(shape,containment,filter,output) {
	this.sync_broadphase();
	this.validateShape(shape);
	var ab = shape.aabb;
	var ret = output == null?new BodyList():output;
	if(this.failed == null) {
		this.failed = new BodyList();
	}
	var a = this.list;
	while(a != null && a.aabb.maxx < ab.minx) a = a.next;
	while(a != null && a.aabb.minx <= ab.maxx) {
		var _this = a.aabb;
		if(ab.miny <= _this.maxy && _this.miny <= ab.maxy && ab.minx <= _this.maxx && _this.minx <= ab.maxx) {
			var shape2 = a.shape;
			var body = shape2.body.outer;
			var tmp;
			if(filter != null) {
				var _this1 = shape2.filter;
				if((_this1.collisionMask & filter.collisionGroup) != 0) {
					tmp = (filter.collisionMask & _this1.collisionGroup) != 0;
				} else {
					tmp = false;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				if(containment) {
					if(!this.failed.has(body)) {
						var col = ZPP_Collide.containTest(shape,shape2);
						if(!ret.has(body) && col) {
							ret.push(body);
						} else if(!col) {
							ret.remove(body);
							this.failed.push(body);
						}
					}
				} else if(!ret.has(body) && ZPP_Collide.testCollide_safe(shape,shape2)) {
					ret.push(body);
				}
			}
		}
		a = a.next;
	}
	this.failed.clear();
	return ret;
};
ZPP_SweepPhase.prototype.rayCast = function(ray,inner,filter) {
	this.sync_broadphase();
	ray.validate_dir();
	var rayab = ray.rayAABB();
	var mint = ray.maxdist;
	var minres = null;
	if(ray.dirx == 0) {
		var a = this.list;
		while(a != null && a.aabb.minx <= rayab.minx) {
			var tmp;
			var _this = a.aabb;
			if(rayab.miny <= _this.maxy && _this.miny <= rayab.maxy && rayab.minx <= _this.maxx && _this.minx <= rayab.maxx) {
				if(filter != null) {
					var _this1 = a.shape.filter;
					if((_this1.collisionMask & filter.collisionGroup) != 0) {
						tmp = (filter.collisionMask & _this1.collisionGroup) != 0;
					} else {
						tmp = false;
					}
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				var t = ray.aabbsect(a.aabb);
				if(t >= 0 && t < mint) {
					var result = a.shape.type == 0?ray.circlesect(a.shape.circle,inner,mint):ray.polysect(a.shape.polygon,inner,mint);
					if(result != null) {
						if(result.zpp_inner.next != null) {
							throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
						}
						mint = result.zpp_inner.toiDistance;
						if(minres != null) {
							if(minres.zpp_inner.next != null) {
								throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
							}
							minres.zpp_inner.free();
						}
						minres = result;
					}
				}
			}
			a = a.next;
		}
	} else if(ray.dirx < 0) {
		var a1 = this.list;
		var b = null;
		while(a1 != null && a1.aabb.minx <= rayab.maxx) {
			b = a1;
			a1 = a1.next;
		}
		a1 = b;
		while(a1 != null) {
			var tmp1;
			var _this2 = a1.aabb;
			if(rayab.miny <= _this2.maxy && _this2.miny <= rayab.maxy && rayab.minx <= _this2.maxx && _this2.minx <= rayab.maxx) {
				if(filter != null) {
					var _this3 = a1.shape.filter;
					if((_this3.collisionMask & filter.collisionGroup) != 0) {
						tmp1 = (filter.collisionMask & _this3.collisionGroup) != 0;
					} else {
						tmp1 = false;
					}
				} else {
					tmp1 = true;
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var t1 = ray.aabbsect(a1.aabb);
				if(t1 >= 0 && t1 < mint) {
					var result1 = a1.shape.type == 0?ray.circlesect(a1.shape.circle,inner,mint):ray.polysect(a1.shape.polygon,inner,mint);
					if(result1 != null) {
						if(result1.zpp_inner.next != null) {
							throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
						}
						mint = result1.zpp_inner.toiDistance;
						if(minres != null) {
							if(minres.zpp_inner.next != null) {
								throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
							}
							minres.zpp_inner.free();
						}
						minres = result1;
					}
				}
			}
			a1 = a1.prev;
		}
	} else {
		var a2 = this.list;
		while(a2 != null && a2.aabb.minx <= rayab.maxx && a2.aabb.minx < ray.originx + ray.dirx * mint) {
			var tmp2;
			var _this4 = a2.aabb;
			if(rayab.miny <= _this4.maxy && _this4.miny <= rayab.maxy && rayab.minx <= _this4.maxx && _this4.minx <= rayab.maxx) {
				if(filter != null) {
					var _this5 = a2.shape.filter;
					if((_this5.collisionMask & filter.collisionGroup) != 0) {
						tmp2 = (filter.collisionMask & _this5.collisionGroup) != 0;
					} else {
						tmp2 = false;
					}
				} else {
					tmp2 = true;
				}
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				var t2 = ray.aabbsect(a2.aabb);
				if(t2 >= 0 && t2 < mint) {
					var result2 = a2.shape.type == 0?ray.circlesect(a2.shape.circle,inner,mint):ray.polysect(a2.shape.polygon,inner,mint);
					if(result2 != null) {
						if(result2.zpp_inner.next != null) {
							throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
						}
						mint = result2.zpp_inner.toiDistance;
						if(minres != null) {
							if(minres.zpp_inner.next != null) {
								throw new js._Boot.HaxeError("Error: This object has been disposed of and cannot be used");
							}
							minres.zpp_inner.free();
						}
						minres = result2;
					}
				}
			}
			a2 = a2.next;
		}
	}
	if(rayab.outer != null) {
		rayab.outer.zpp_inner = null;
		rayab.outer = null;
	}
	rayab.wrap_min = rayab.wrap_max = null;
	rayab._invalidate = null;
	rayab._validate = null;
	rayab.next = ZPP_AABB.zpp_pool;
	ZPP_AABB.zpp_pool = rayab;
	return minres;
};
ZPP_SweepPhase.prototype.rayMultiCast = function(ray,inner,filter,output) {
	this.sync_broadphase();
	ray.validate_dir();
	var rayab = ray.rayAABB();
	var ret = output == null?new RayResultList():output;
	if(ray.dirx == 0) {
		var a = this.list;
		while(a != null && a.aabb.minx <= rayab.minx) {
			var tmp;
			var _this = a.aabb;
			if(rayab.miny <= _this.maxy && _this.miny <= rayab.maxy && rayab.minx <= _this.maxx && _this.minx <= rayab.maxx) {
				if(filter != null) {
					var _this1 = a.shape.filter;
					if((_this1.collisionMask & filter.collisionGroup) != 0) {
						tmp = (filter.collisionMask & _this1.collisionGroup) != 0;
					} else {
						tmp = false;
					}
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				if(ray.aabbsect(a.aabb) >= 0) {
					if(a.shape.type == 0) {
						ray.circlesect2(a.shape.circle,inner,ret);
					} else {
						ray.polysect2(a.shape.polygon,inner,ret);
					}
				}
			}
			a = a.next;
		}
	} else if(ray.dirx < 0) {
		var a1 = this.list;
		var b = null;
		while(a1 != null && a1.aabb.minx <= rayab.maxx) {
			b = a1;
			a1 = a1.next;
		}
		a1 = b;
		while(a1 != null) {
			var tmp1;
			var _this2 = a1.aabb;
			if(rayab.miny <= _this2.maxy && _this2.miny <= rayab.maxy && rayab.minx <= _this2.maxx && _this2.minx <= rayab.maxx) {
				if(filter != null) {
					var _this3 = a1.shape.filter;
					if((_this3.collisionMask & filter.collisionGroup) != 0) {
						tmp1 = (filter.collisionMask & _this3.collisionGroup) != 0;
					} else {
						tmp1 = false;
					}
				} else {
					tmp1 = true;
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				if(ray.aabbsect(a1.aabb) >= 0) {
					if(a1.shape.type == 0) {
						ray.circlesect2(a1.shape.circle,inner,ret);
					} else {
						ray.polysect2(a1.shape.polygon,inner,ret);
					}
				}
			}
			a1 = a1.prev;
		}
	} else {
		var a2 = this.list;
		while(a2 != null && a2.aabb.minx <= rayab.maxx) {
			var tmp2;
			var _this4 = a2.aabb;
			if(rayab.miny <= _this4.maxy && _this4.miny <= rayab.maxy && rayab.minx <= _this4.maxx && _this4.minx <= rayab.maxx) {
				if(filter != null) {
					var _this5 = a2.shape.filter;
					if((_this5.collisionMask & filter.collisionGroup) != 0) {
						tmp2 = (filter.collisionMask & _this5.collisionGroup) != 0;
					} else {
						tmp2 = false;
					}
				} else {
					tmp2 = true;
				}
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				if(ray.aabbsect(a2.aabb) >= 0) {
					if(a2.shape.type == 0) {
						ray.circlesect2(a2.shape.circle,inner,ret);
					} else {
						ray.polysect2(a2.shape.polygon,inner,ret);
					}
				}
			}
			a2 = a2.next;
		}
	}
	if(rayab.outer != null) {
		rayab.outer.zpp_inner = null;
		rayab.outer = null;
	}
	rayab.wrap_min = rayab.wrap_max = null;
	rayab._invalidate = null;
	rayab._validate = null;
	rayab.next = ZPP_AABB.zpp_pool;
	ZPP_AABB.zpp_pool = rayab;
	return ret;
};
ZPP_SweepPhase.prototype.__class__ = ZPP_SweepPhase;
var ZNPArray2_Float = zpp_nape.util.ZNPArray2_Float = function(width,height) {
	this.width = 0;
	this.list = null;
	this.width = width;
	this.list = [];
};
ZNPArray2_Float.__name__ = ["zpp_nape","util","ZNPArray2_Float"];
ZNPArray2_Float.prototype.list = null;
ZNPArray2_Float.prototype.width = null;
ZNPArray2_Float.prototype.resize = function(width,height,def) {
	this.width = width;
	var _g1 = 0;
	var _g = width * height;
	while(_g1 < _g) this.list[_g1++] = def;
};
ZNPArray2_Float.prototype.get = function(x,y) {
	return this.list[y * this.width + x];
};
ZNPArray2_Float.prototype.set = function(x,y,obj) {
	return this.list[y * this.width + x] = obj;
};
ZNPArray2_Float.prototype.__class__ = ZNPArray2_Float;
var ZNPArray2_ZPP_GeomVert = zpp_nape.util.ZNPArray2_ZPP_GeomVert = function(width,height) {
	this.width = 0;
	this.list = null;
	this.width = width;
	this.list = [];
};
ZNPArray2_ZPP_GeomVert.__name__ = ["zpp_nape","util","ZNPArray2_ZPP_GeomVert"];
ZNPArray2_ZPP_GeomVert.prototype.list = null;
ZNPArray2_ZPP_GeomVert.prototype.width = null;
ZNPArray2_ZPP_GeomVert.prototype.resize = function(width,height,def) {
	this.width = width;
	var _g1 = 0;
	var _g = width * height;
	while(_g1 < _g) this.list[_g1++] = def;
};
ZNPArray2_ZPP_GeomVert.prototype.get = function(x,y) {
	return this.list[y * this.width + x];
};
ZNPArray2_ZPP_GeomVert.prototype.set = function(x,y,obj) {
	return this.list[y * this.width + x] = obj;
};
ZNPArray2_ZPP_GeomVert.prototype.__class__ = ZNPArray2_ZPP_GeomVert;
var ZNPArray2_ZPP_MarchPair = zpp_nape.util.ZNPArray2_ZPP_MarchPair = function(width,height) {
	this.width = 0;
	this.list = null;
	this.width = width;
	this.list = [];
};
ZNPArray2_ZPP_MarchPair.__name__ = ["zpp_nape","util","ZNPArray2_ZPP_MarchPair"];
ZNPArray2_ZPP_MarchPair.prototype.list = null;
ZNPArray2_ZPP_MarchPair.prototype.width = null;
ZNPArray2_ZPP_MarchPair.prototype.resize = function(width,height,def) {
	this.width = width;
	var _g1 = 0;
	var _g = width * height;
	while(_g1 < _g) this.list[_g1++] = def;
};
ZNPArray2_ZPP_MarchPair.prototype.get = function(x,y) {
	return this.list[y * this.width + x];
};
ZNPArray2_ZPP_MarchPair.prototype.set = function(x,y,obj) {
	return this.list[y * this.width + x] = obj;
};
ZNPArray2_ZPP_MarchPair.prototype.__class__ = ZNPArray2_ZPP_MarchPair;
var Hashable2_Boolfalse = zpp_nape.util.Hashable2_Boolfalse = function() {
	this.di = 0;
	this.id = 0;
	this.hnext = null;
	this.next = null;
	this.value = false;
};
Hashable2_Boolfalse.__name__ = ["zpp_nape","util","Hashable2_Boolfalse"];
Hashable2_Boolfalse.get = function(id,di,val) {
	var ret;
	if(Hashable2_Boolfalse.zpp_pool == null) {
		ret = new Hashable2_Boolfalse();
	} else {
		ret = Hashable2_Boolfalse.zpp_pool;
		Hashable2_Boolfalse.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.id = id;
	ret.di = di;
	var ret1 = ret;
	ret1.value = val;
	return ret1;
};
Hashable2_Boolfalse.getpersist = function(id,di) {
	var ret;
	if(Hashable2_Boolfalse.zpp_pool == null) {
		ret = new Hashable2_Boolfalse();
	} else {
		ret = Hashable2_Boolfalse.zpp_pool;
		Hashable2_Boolfalse.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.id = id;
	ret.di = di;
	return ret;
};
Hashable2_Boolfalse.ordered_get = function(id,di,val) {
	if(id <= di) {
		var ret;
		if(Hashable2_Boolfalse.zpp_pool == null) {
			ret = new Hashable2_Boolfalse();
		} else {
			ret = Hashable2_Boolfalse.zpp_pool;
			Hashable2_Boolfalse.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.id = id;
		ret.di = di;
		var ret1 = ret;
		ret1.value = val;
		return ret1;
	} else {
		var ret2;
		if(Hashable2_Boolfalse.zpp_pool == null) {
			ret2 = new Hashable2_Boolfalse();
		} else {
			ret2 = Hashable2_Boolfalse.zpp_pool;
			Hashable2_Boolfalse.zpp_pool = ret2.next;
			ret2.next = null;
		}
		ret2.id = di;
		ret2.di = id;
		var ret3 = ret2;
		ret3.value = val;
		return ret3;
	}
};
Hashable2_Boolfalse.ordered_get_persist = function(id,di) {
	if(id <= di) {
		var ret;
		if(Hashable2_Boolfalse.zpp_pool == null) {
			ret = new Hashable2_Boolfalse();
		} else {
			ret = Hashable2_Boolfalse.zpp_pool;
			Hashable2_Boolfalse.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.id = id;
		ret.di = di;
		return ret;
	} else {
		var ret1;
		if(Hashable2_Boolfalse.zpp_pool == null) {
			ret1 = new Hashable2_Boolfalse();
		} else {
			ret1 = Hashable2_Boolfalse.zpp_pool;
			Hashable2_Boolfalse.zpp_pool = ret1.next;
			ret1.next = null;
		}
		ret1.id = di;
		ret1.di = id;
		return ret1;
	}
};
Hashable2_Boolfalse.prototype.value = null;
Hashable2_Boolfalse.prototype.next = null;
Hashable2_Boolfalse.prototype.hnext = null;
Hashable2_Boolfalse.prototype.id = null;
Hashable2_Boolfalse.prototype.di = null;
Hashable2_Boolfalse.prototype.free = function() {
};
Hashable2_Boolfalse.prototype.alloc = function() {
};
Hashable2_Boolfalse.prototype.__class__ = Hashable2_Boolfalse;
var FastHash2_Hashable2_Boolfalse = zpp_nape.util.FastHash2_Hashable2_Boolfalse = function() {
	this.cnt = 0;
	this.table = null;
	this.cnt = 0;
	this.table = [];
	var _g1 = 0;
	while(_g1 < 1048576) {
		++_g1;
		this.table.push(null);
	}
};
FastHash2_Hashable2_Boolfalse.__name__ = ["zpp_nape","util","FastHash2_Hashable2_Boolfalse"];
FastHash2_Hashable2_Boolfalse.prototype.table = null;
FastHash2_Hashable2_Boolfalse.prototype.cnt = null;
FastHash2_Hashable2_Boolfalse.prototype.empty = function() {
	return this.cnt == 0;
};
FastHash2_Hashable2_Boolfalse.prototype.clear = function() {
	var _g1 = 0;
	var _g = this.table.length;
	while(_g1 < _g) {
		var i = _g1++;
		var n = this.table[i];
		if(n == null) {
			continue;
		}
		while(n != null) {
			var t = n.hnext;
			n.hnext = null;
			n = t;
		}
		this.table[i] = null;
	}
};
FastHash2_Hashable2_Boolfalse.prototype.get = function(id,di) {
	var n = this.table[id * 106039 + di & 1048575];
	if(n == null) {
		return null;
	} else if(n.id == id && n.di == di) {
		return n;
	} else {
		while(true) {
			n = n.hnext;
			if(!(n != null && (n.id != id || n.di != di))) {
				break;
			}
		}
		return n;
	}
};
FastHash2_Hashable2_Boolfalse.prototype.ordered_get = function(id,di) {
	if(id > di) {
		var t = id;
		id = di;
		di = t;
	}
	var n = this.table[id * 106039 + di & 1048575];
	if(n == null) {
		return null;
	} else if(n.id == id && n.di == di) {
		return n;
	} else {
		while(true) {
			n = n.hnext;
			if(!(n != null && (n.id != id || n.di != di))) {
				break;
			}
		}
		return n;
	}
};
FastHash2_Hashable2_Boolfalse.prototype.has = function(id,di) {
	var n = this.table[id * 106039 + di & 1048575];
	if(n == null) {
		return false;
	} else if(n.id == id && n.di == di) {
		return true;
	} else {
		while(true) {
			n = n.hnext;
			if(!(n != null && (n.id != id || n.di != di))) {
				break;
			}
		}
		return n != null;
	}
};
FastHash2_Hashable2_Boolfalse.prototype.maybeAdd = function(arb) {
	var h = arb.id * 106039 + arb.di & 1048575;
	var n = this.table[h];
	if(n == null) {
		this.table[h] = arb;
		arb.hnext = null;
	} else {
		arb.hnext = n.hnext;
		n.hnext = arb;
	}
	this.cnt++;
};
FastHash2_Hashable2_Boolfalse.prototype.add = function(arb) {
	var h = arb.id * 106039 + arb.di & 1048575;
	var n = this.table[h];
	if(n == null) {
		this.table[h] = arb;
		arb.hnext = null;
	} else {
		arb.hnext = n.hnext;
		n.hnext = arb;
	}
	this.cnt++;
};
FastHash2_Hashable2_Boolfalse.prototype.remove = function(arb) {
	var h = arb.id * 106039 + arb.di & 1048575;
	var n = this.table[h];
	if(n == arb) {
		this.table[h] = n.hnext;
	} else if(n != null) {
		var pre;
		while(true) {
			pre = n;
			n = n.hnext;
			if(!(n != null && n != arb)) {
				break;
			}
		}
		pre.hnext = n.hnext;
	}
	arb.hnext = null;
	this.cnt--;
};
FastHash2_Hashable2_Boolfalse.prototype.hash = function(id,di) {
	return id * 106039 + di & 1048575;
};
FastHash2_Hashable2_Boolfalse.prototype.__class__ = FastHash2_Hashable2_Boolfalse;
var ZNPList_ZPP_CallbackSet = zpp_nape.util.ZNPList_ZPP_CallbackSet = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_CallbackSet.__name__ = ["zpp_nape","util","ZNPList_ZPP_CallbackSet"];
ZNPList_ZPP_CallbackSet.prototype.head = null;
ZNPList_ZPP_CallbackSet.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_CallbackSet.prototype.modified = null;
ZNPList_ZPP_CallbackSet.prototype.pushmod = null;
ZNPList_ZPP_CallbackSet.prototype.length = null;
ZNPList_ZPP_CallbackSet.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_CallbackSet.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_CallbackSet.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CallbackSet();
	} else {
		ret = ZNPNode_ZPP_CallbackSet.zpp_pool;
		ZNPNode_ZPP_CallbackSet.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_CallbackSet.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_CallbackSet.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CallbackSet();
	} else {
		ret = ZNPNode_ZPP_CallbackSet.zpp_pool;
		ZNPNode_ZPP_CallbackSet.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_CallbackSet.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_CallbackSet.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_CallbackSet.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CallbackSet();
	} else {
		ret = ZNPNode_ZPP_CallbackSet.zpp_pool;
		ZNPNode_ZPP_CallbackSet.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_CallbackSet.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_CallbackSet.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CallbackSet();
	} else {
		ret = ZNPNode_ZPP_CallbackSet.zpp_pool;
		ZNPNode_ZPP_CallbackSet.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_CallbackSet.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_CallbackSet.zpp_pool;
	ZNPNode_ZPP_CallbackSet.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_CallbackSet.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_CallbackSet.zpp_pool;
	ZNPNode_ZPP_CallbackSet.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_CallbackSet.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_CallbackSet.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_CallbackSet.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_CallbackSet.zpp_pool;
			ZNPNode_ZPP_CallbackSet.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_CallbackSet.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_CallbackSet.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_CallbackSet.zpp_pool;
			ZNPNode_ZPP_CallbackSet.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_CallbackSet.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_CallbackSet.zpp_pool;
			ZNPNode_ZPP_CallbackSet.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_CallbackSet.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_CallbackSet.zpp_pool;
	ZNPNode_ZPP_CallbackSet.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_CallbackSet.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_CallbackSet.zpp_pool;
	ZNPNode_ZPP_CallbackSet.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_CallbackSet.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_CallbackSet.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_CallbackSet.zpp_pool;
		ZNPNode_ZPP_CallbackSet.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_CallbackSet.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_CallbackSet.zpp_pool;
		ZNPNode_ZPP_CallbackSet.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_CallbackSet.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_CallbackSet.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_CallbackSet.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_CallbackSet.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_CallbackSet.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_CallbackSet.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_CallbackSet.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_CallbackSet.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_CallbackSet.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_CallbackSet.prototype.__class__ = ZNPList_ZPP_CallbackSet;
var ZNPList_ZPP_Shape = zpp_nape.util.ZNPList_ZPP_Shape = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_Shape.__name__ = ["zpp_nape","util","ZNPList_ZPP_Shape"];
ZNPList_ZPP_Shape.prototype.head = null;
ZNPList_ZPP_Shape.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_Shape.prototype.modified = null;
ZNPList_ZPP_Shape.prototype.pushmod = null;
ZNPList_ZPP_Shape.prototype.length = null;
ZNPList_ZPP_Shape.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_Shape.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_Shape.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Shape();
	} else {
		ret = ZNPNode_ZPP_Shape.zpp_pool;
		ZNPNode_ZPP_Shape.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_Shape.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_Shape.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Shape();
	} else {
		ret = ZNPNode_ZPP_Shape.zpp_pool;
		ZNPNode_ZPP_Shape.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_Shape.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_Shape.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_Shape.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Shape();
	} else {
		ret = ZNPNode_ZPP_Shape.zpp_pool;
		ZNPNode_ZPP_Shape.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_Shape.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_Shape.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Shape();
	} else {
		ret = ZNPNode_ZPP_Shape.zpp_pool;
		ZNPNode_ZPP_Shape.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_Shape.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_Shape.zpp_pool;
	ZNPNode_ZPP_Shape.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_Shape.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_Shape.zpp_pool;
	ZNPNode_ZPP_Shape.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_Shape.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_Shape.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_Shape.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Shape.zpp_pool;
			ZNPNode_ZPP_Shape.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_Shape.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_Shape.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Shape.zpp_pool;
			ZNPNode_ZPP_Shape.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_Shape.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Shape.zpp_pool;
			ZNPNode_ZPP_Shape.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_Shape.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_Shape.zpp_pool;
	ZNPNode_ZPP_Shape.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_Shape.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_Shape.zpp_pool;
	ZNPNode_ZPP_Shape.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_Shape.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_Shape.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Shape.zpp_pool;
		ZNPNode_ZPP_Shape.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_Shape.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Shape.zpp_pool;
		ZNPNode_ZPP_Shape.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_Shape.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_Shape.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_Shape.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_Shape.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_Shape.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_Shape.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_Shape.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_Shape.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_Shape.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_Shape.prototype.__class__ = ZNPList_ZPP_Shape;
var ZNPList_ZPP_Body = zpp_nape.util.ZNPList_ZPP_Body = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_Body.__name__ = ["zpp_nape","util","ZNPList_ZPP_Body"];
ZNPList_ZPP_Body.prototype.head = null;
ZNPList_ZPP_Body.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_Body.prototype.modified = null;
ZNPList_ZPP_Body.prototype.pushmod = null;
ZNPList_ZPP_Body.prototype.length = null;
ZNPList_ZPP_Body.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_Body.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_Body.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Body();
	} else {
		ret = ZNPNode_ZPP_Body.zpp_pool;
		ZNPNode_ZPP_Body.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_Body.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_Body.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Body();
	} else {
		ret = ZNPNode_ZPP_Body.zpp_pool;
		ZNPNode_ZPP_Body.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_Body.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_Body.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_Body.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Body();
	} else {
		ret = ZNPNode_ZPP_Body.zpp_pool;
		ZNPNode_ZPP_Body.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_Body.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_Body.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Body();
	} else {
		ret = ZNPNode_ZPP_Body.zpp_pool;
		ZNPNode_ZPP_Body.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_Body.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_Body.zpp_pool;
	ZNPNode_ZPP_Body.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_Body.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_Body.zpp_pool;
	ZNPNode_ZPP_Body.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_Body.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_Body.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_Body.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Body.zpp_pool;
			ZNPNode_ZPP_Body.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_Body.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_Body.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Body.zpp_pool;
			ZNPNode_ZPP_Body.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_Body.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Body.zpp_pool;
			ZNPNode_ZPP_Body.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_Body.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_Body.zpp_pool;
	ZNPNode_ZPP_Body.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_Body.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_Body.zpp_pool;
	ZNPNode_ZPP_Body.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_Body.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_Body.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Body.zpp_pool;
		ZNPNode_ZPP_Body.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_Body.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Body.zpp_pool;
		ZNPNode_ZPP_Body.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_Body.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_Body.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_Body.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_Body.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_Body.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_Body.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_Body.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_Body.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_Body.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_Body.prototype.__class__ = ZNPList_ZPP_Body;
var ZNPList_ZPP_Compound = zpp_nape.util.ZNPList_ZPP_Compound = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_Compound.__name__ = ["zpp_nape","util","ZNPList_ZPP_Compound"];
ZNPList_ZPP_Compound.prototype.head = null;
ZNPList_ZPP_Compound.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_Compound.prototype.modified = null;
ZNPList_ZPP_Compound.prototype.pushmod = null;
ZNPList_ZPP_Compound.prototype.length = null;
ZNPList_ZPP_Compound.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_Compound.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_Compound.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Compound();
	} else {
		ret = ZNPNode_ZPP_Compound.zpp_pool;
		ZNPNode_ZPP_Compound.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_Compound.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_Compound.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Compound();
	} else {
		ret = ZNPNode_ZPP_Compound.zpp_pool;
		ZNPNode_ZPP_Compound.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_Compound.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_Compound.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_Compound.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Compound();
	} else {
		ret = ZNPNode_ZPP_Compound.zpp_pool;
		ZNPNode_ZPP_Compound.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_Compound.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_Compound.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Compound();
	} else {
		ret = ZNPNode_ZPP_Compound.zpp_pool;
		ZNPNode_ZPP_Compound.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_Compound.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_Compound.zpp_pool;
	ZNPNode_ZPP_Compound.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_Compound.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_Compound.zpp_pool;
	ZNPNode_ZPP_Compound.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_Compound.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_Compound.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_Compound.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Compound.zpp_pool;
			ZNPNode_ZPP_Compound.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_Compound.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_Compound.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Compound.zpp_pool;
			ZNPNode_ZPP_Compound.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_Compound.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Compound.zpp_pool;
			ZNPNode_ZPP_Compound.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_Compound.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_Compound.zpp_pool;
	ZNPNode_ZPP_Compound.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_Compound.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_Compound.zpp_pool;
	ZNPNode_ZPP_Compound.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_Compound.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_Compound.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Compound.zpp_pool;
		ZNPNode_ZPP_Compound.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_Compound.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Compound.zpp_pool;
		ZNPNode_ZPP_Compound.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_Compound.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_Compound.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_Compound.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_Compound.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_Compound.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_Compound.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_Compound.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_Compound.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_Compound.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_Compound.prototype.__class__ = ZNPList_ZPP_Compound;
var ZNPList_ZPP_Arbiter = zpp_nape.util.ZNPList_ZPP_Arbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_Arbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_Arbiter"];
ZNPList_ZPP_Arbiter.prototype.head = null;
ZNPList_ZPP_Arbiter.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_Arbiter.prototype.modified = null;
ZNPList_ZPP_Arbiter.prototype.pushmod = null;
ZNPList_ZPP_Arbiter.prototype.length = null;
ZNPList_ZPP_Arbiter.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_Arbiter.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Arbiter();
	} else {
		ret = ZNPNode_ZPP_Arbiter.zpp_pool;
		ZNPNode_ZPP_Arbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_Arbiter.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Arbiter();
	} else {
		ret = ZNPNode_ZPP_Arbiter.zpp_pool;
		ZNPNode_ZPP_Arbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_Arbiter.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_Arbiter.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Arbiter();
	} else {
		ret = ZNPNode_ZPP_Arbiter.zpp_pool;
		ZNPNode_ZPP_Arbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_Arbiter.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_Arbiter.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Arbiter();
	} else {
		ret = ZNPNode_ZPP_Arbiter.zpp_pool;
		ZNPNode_ZPP_Arbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_Arbiter.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_Arbiter.zpp_pool;
	ZNPNode_ZPP_Arbiter.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_Arbiter.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_Arbiter.zpp_pool;
	ZNPNode_ZPP_Arbiter.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_Arbiter.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_Arbiter.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_Arbiter.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Arbiter.zpp_pool;
			ZNPNode_ZPP_Arbiter.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_Arbiter.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_Arbiter.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Arbiter.zpp_pool;
			ZNPNode_ZPP_Arbiter.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_Arbiter.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Arbiter.zpp_pool;
			ZNPNode_ZPP_Arbiter.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_Arbiter.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_Arbiter.zpp_pool;
	ZNPNode_ZPP_Arbiter.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_Arbiter.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_Arbiter.zpp_pool;
	ZNPNode_ZPP_Arbiter.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_Arbiter.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_Arbiter.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Arbiter.zpp_pool;
		ZNPNode_ZPP_Arbiter.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_Arbiter.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Arbiter.zpp_pool;
		ZNPNode_ZPP_Arbiter.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_Arbiter.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_Arbiter.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_Arbiter.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_Arbiter.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_Arbiter.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_Arbiter.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_Arbiter.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_Arbiter.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_Arbiter.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_Arbiter.prototype.__class__ = ZNPList_ZPP_Arbiter;
var ZNPList_ZPP_CbSetPair = zpp_nape.util.ZNPList_ZPP_CbSetPair = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_CbSetPair.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbSetPair"];
ZNPList_ZPP_CbSetPair.prototype.head = null;
ZNPList_ZPP_CbSetPair.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_CbSetPair.prototype.modified = null;
ZNPList_ZPP_CbSetPair.prototype.pushmod = null;
ZNPList_ZPP_CbSetPair.prototype.length = null;
ZNPList_ZPP_CbSetPair.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_CbSetPair.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_CbSetPair.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CbSetPair();
	} else {
		ret = ZNPNode_ZPP_CbSetPair.zpp_pool;
		ZNPNode_ZPP_CbSetPair.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_CbSetPair.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_CbSetPair.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CbSetPair();
	} else {
		ret = ZNPNode_ZPP_CbSetPair.zpp_pool;
		ZNPNode_ZPP_CbSetPair.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_CbSetPair.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_CbSetPair.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_CbSetPair.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CbSetPair();
	} else {
		ret = ZNPNode_ZPP_CbSetPair.zpp_pool;
		ZNPNode_ZPP_CbSetPair.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_CbSetPair.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_CbSetPair.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CbSetPair();
	} else {
		ret = ZNPNode_ZPP_CbSetPair.zpp_pool;
		ZNPNode_ZPP_CbSetPair.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_CbSetPair.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_CbSetPair.zpp_pool;
	ZNPNode_ZPP_CbSetPair.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_CbSetPair.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_CbSetPair.zpp_pool;
	ZNPNode_ZPP_CbSetPair.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_CbSetPair.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_CbSetPair.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_CbSetPair.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_CbSetPair.zpp_pool;
			ZNPNode_ZPP_CbSetPair.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_CbSetPair.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_CbSetPair.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_CbSetPair.zpp_pool;
			ZNPNode_ZPP_CbSetPair.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_CbSetPair.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_CbSetPair.zpp_pool;
			ZNPNode_ZPP_CbSetPair.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_CbSetPair.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_CbSetPair.zpp_pool;
	ZNPNode_ZPP_CbSetPair.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_CbSetPair.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_CbSetPair.zpp_pool;
	ZNPNode_ZPP_CbSetPair.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_CbSetPair.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_CbSetPair.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_CbSetPair.zpp_pool;
		ZNPNode_ZPP_CbSetPair.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_CbSetPair.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_CbSetPair.zpp_pool;
		ZNPNode_ZPP_CbSetPair.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_CbSetPair.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_CbSetPair.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_CbSetPair.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_CbSetPair.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_CbSetPair.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_CbSetPair.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_CbSetPair.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_CbSetPair.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_CbSetPair.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_CbSetPair.prototype.__class__ = ZNPList_ZPP_CbSetPair;
var ZNPList_ZPP_CutInt = zpp_nape.util.ZNPList_ZPP_CutInt = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_CutInt.__name__ = ["zpp_nape","util","ZNPList_ZPP_CutInt"];
ZNPList_ZPP_CutInt.prototype.head = null;
ZNPList_ZPP_CutInt.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_CutInt.prototype.modified = null;
ZNPList_ZPP_CutInt.prototype.pushmod = null;
ZNPList_ZPP_CutInt.prototype.length = null;
ZNPList_ZPP_CutInt.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_CutInt.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_CutInt.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CutInt();
	} else {
		ret = ZNPNode_ZPP_CutInt.zpp_pool;
		ZNPNode_ZPP_CutInt.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_CutInt.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_CutInt.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CutInt();
	} else {
		ret = ZNPNode_ZPP_CutInt.zpp_pool;
		ZNPNode_ZPP_CutInt.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_CutInt.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_CutInt.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_CutInt.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CutInt();
	} else {
		ret = ZNPNode_ZPP_CutInt.zpp_pool;
		ZNPNode_ZPP_CutInt.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_CutInt.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_CutInt.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CutInt();
	} else {
		ret = ZNPNode_ZPP_CutInt.zpp_pool;
		ZNPNode_ZPP_CutInt.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_CutInt.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_CutInt.zpp_pool;
	ZNPNode_ZPP_CutInt.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_CutInt.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_CutInt.zpp_pool;
	ZNPNode_ZPP_CutInt.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_CutInt.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_CutInt.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_CutInt.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_CutInt.zpp_pool;
			ZNPNode_ZPP_CutInt.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_CutInt.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_CutInt.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_CutInt.zpp_pool;
			ZNPNode_ZPP_CutInt.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_CutInt.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_CutInt.zpp_pool;
			ZNPNode_ZPP_CutInt.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_CutInt.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_CutInt.zpp_pool;
	ZNPNode_ZPP_CutInt.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_CutInt.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_CutInt.zpp_pool;
	ZNPNode_ZPP_CutInt.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_CutInt.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_CutInt.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_CutInt.zpp_pool;
		ZNPNode_ZPP_CutInt.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_CutInt.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_CutInt.zpp_pool;
		ZNPNode_ZPP_CutInt.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_CutInt.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_CutInt.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_CutInt.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_CutInt.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_CutInt.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_CutInt.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_CutInt.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_CutInt.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_CutInt.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_CutInt.prototype.__class__ = ZNPList_ZPP_CutInt;
var ZNPList_ZPP_CutVert = zpp_nape.util.ZNPList_ZPP_CutVert = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_CutVert.__name__ = ["zpp_nape","util","ZNPList_ZPP_CutVert"];
ZNPList_ZPP_CutVert.prototype.head = null;
ZNPList_ZPP_CutVert.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_CutVert.prototype.modified = null;
ZNPList_ZPP_CutVert.prototype.pushmod = null;
ZNPList_ZPP_CutVert.prototype.length = null;
ZNPList_ZPP_CutVert.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_CutVert.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_CutVert.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CutVert();
	} else {
		ret = ZNPNode_ZPP_CutVert.zpp_pool;
		ZNPNode_ZPP_CutVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_CutVert.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_CutVert.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CutVert();
	} else {
		ret = ZNPNode_ZPP_CutVert.zpp_pool;
		ZNPNode_ZPP_CutVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_CutVert.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_CutVert.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_CutVert.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CutVert();
	} else {
		ret = ZNPNode_ZPP_CutVert.zpp_pool;
		ZNPNode_ZPP_CutVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_CutVert.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_CutVert.zpp_pool == null) {
		ret = new ZNPNode_ZPP_CutVert();
	} else {
		ret = ZNPNode_ZPP_CutVert.zpp_pool;
		ZNPNode_ZPP_CutVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_CutVert.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_CutVert.zpp_pool;
	ZNPNode_ZPP_CutVert.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_CutVert.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_CutVert.zpp_pool;
	ZNPNode_ZPP_CutVert.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_CutVert.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_CutVert.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_CutVert.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_CutVert.zpp_pool;
			ZNPNode_ZPP_CutVert.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_CutVert.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_CutVert.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_CutVert.zpp_pool;
			ZNPNode_ZPP_CutVert.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_CutVert.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_CutVert.zpp_pool;
			ZNPNode_ZPP_CutVert.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_CutVert.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_CutVert.zpp_pool;
	ZNPNode_ZPP_CutVert.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_CutVert.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_CutVert.zpp_pool;
	ZNPNode_ZPP_CutVert.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_CutVert.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_CutVert.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_CutVert.zpp_pool;
		ZNPNode_ZPP_CutVert.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_CutVert.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_CutVert.zpp_pool;
		ZNPNode_ZPP_CutVert.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_CutVert.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_CutVert.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_CutVert.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_CutVert.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_CutVert.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_CutVert.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_CutVert.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_CutVert.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_CutVert.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_CutVert.prototype.__class__ = ZNPList_ZPP_CutVert;
var ZNPList_ZPP_PartitionVertex = zpp_nape.util.ZNPList_ZPP_PartitionVertex = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_PartitionVertex.__name__ = ["zpp_nape","util","ZNPList_ZPP_PartitionVertex"];
ZNPList_ZPP_PartitionVertex.prototype.head = null;
ZNPList_ZPP_PartitionVertex.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_PartitionVertex.prototype.modified = null;
ZNPList_ZPP_PartitionVertex.prototype.pushmod = null;
ZNPList_ZPP_PartitionVertex.prototype.length = null;
ZNPList_ZPP_PartitionVertex.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_PartitionVertex.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_PartitionVertex.zpp_pool == null) {
		ret = new ZNPNode_ZPP_PartitionVertex();
	} else {
		ret = ZNPNode_ZPP_PartitionVertex.zpp_pool;
		ZNPNode_ZPP_PartitionVertex.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_PartitionVertex.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_PartitionVertex.zpp_pool == null) {
		ret = new ZNPNode_ZPP_PartitionVertex();
	} else {
		ret = ZNPNode_ZPP_PartitionVertex.zpp_pool;
		ZNPNode_ZPP_PartitionVertex.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_PartitionVertex.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_PartitionVertex.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_PartitionVertex.zpp_pool == null) {
		ret = new ZNPNode_ZPP_PartitionVertex();
	} else {
		ret = ZNPNode_ZPP_PartitionVertex.zpp_pool;
		ZNPNode_ZPP_PartitionVertex.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_PartitionVertex.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_PartitionVertex.zpp_pool == null) {
		ret = new ZNPNode_ZPP_PartitionVertex();
	} else {
		ret = ZNPNode_ZPP_PartitionVertex.zpp_pool;
		ZNPNode_ZPP_PartitionVertex.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_PartitionVertex.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_PartitionVertex.zpp_pool;
	ZNPNode_ZPP_PartitionVertex.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_PartitionVertex.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_PartitionVertex.zpp_pool;
	ZNPNode_ZPP_PartitionVertex.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_PartitionVertex.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_PartitionVertex.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_PartitionVertex.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_PartitionVertex.zpp_pool;
			ZNPNode_ZPP_PartitionVertex.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_PartitionVertex.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_PartitionVertex.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_PartitionVertex.zpp_pool;
			ZNPNode_ZPP_PartitionVertex.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_PartitionVertex.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_PartitionVertex.zpp_pool;
			ZNPNode_ZPP_PartitionVertex.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_PartitionVertex.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_PartitionVertex.zpp_pool;
	ZNPNode_ZPP_PartitionVertex.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_PartitionVertex.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_PartitionVertex.zpp_pool;
	ZNPNode_ZPP_PartitionVertex.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_PartitionVertex.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_PartitionVertex.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_PartitionVertex.zpp_pool;
		ZNPNode_ZPP_PartitionVertex.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_PartitionVertex.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_PartitionVertex.zpp_pool;
		ZNPNode_ZPP_PartitionVertex.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_PartitionVertex.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_PartitionVertex.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_PartitionVertex.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_PartitionVertex.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_PartitionVertex.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_PartitionVertex.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_PartitionVertex.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_PartitionVertex.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_PartitionVertex.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_PartitionVertex.prototype.__class__ = ZNPList_ZPP_PartitionVertex;
var ZNPList_ZPP_SimplifyP = zpp_nape.util.ZNPList_ZPP_SimplifyP = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_SimplifyP.__name__ = ["zpp_nape","util","ZNPList_ZPP_SimplifyP"];
ZNPList_ZPP_SimplifyP.prototype.head = null;
ZNPList_ZPP_SimplifyP.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_SimplifyP.prototype.modified = null;
ZNPList_ZPP_SimplifyP.prototype.pushmod = null;
ZNPList_ZPP_SimplifyP.prototype.length = null;
ZNPList_ZPP_SimplifyP.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_SimplifyP.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_SimplifyP.zpp_pool == null) {
		ret = new ZNPNode_ZPP_SimplifyP();
	} else {
		ret = ZNPNode_ZPP_SimplifyP.zpp_pool;
		ZNPNode_ZPP_SimplifyP.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_SimplifyP.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_SimplifyP.zpp_pool == null) {
		ret = new ZNPNode_ZPP_SimplifyP();
	} else {
		ret = ZNPNode_ZPP_SimplifyP.zpp_pool;
		ZNPNode_ZPP_SimplifyP.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_SimplifyP.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_SimplifyP.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_SimplifyP.zpp_pool == null) {
		ret = new ZNPNode_ZPP_SimplifyP();
	} else {
		ret = ZNPNode_ZPP_SimplifyP.zpp_pool;
		ZNPNode_ZPP_SimplifyP.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_SimplifyP.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_SimplifyP.zpp_pool == null) {
		ret = new ZNPNode_ZPP_SimplifyP();
	} else {
		ret = ZNPNode_ZPP_SimplifyP.zpp_pool;
		ZNPNode_ZPP_SimplifyP.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_SimplifyP.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_SimplifyP.zpp_pool;
	ZNPNode_ZPP_SimplifyP.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_SimplifyP.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_SimplifyP.zpp_pool;
	ZNPNode_ZPP_SimplifyP.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_SimplifyP.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_SimplifyP.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_SimplifyP.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_SimplifyP.zpp_pool;
			ZNPNode_ZPP_SimplifyP.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_SimplifyP.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_SimplifyP.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_SimplifyP.zpp_pool;
			ZNPNode_ZPP_SimplifyP.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_SimplifyP.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_SimplifyP.zpp_pool;
			ZNPNode_ZPP_SimplifyP.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_SimplifyP.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_SimplifyP.zpp_pool;
	ZNPNode_ZPP_SimplifyP.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_SimplifyP.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_SimplifyP.zpp_pool;
	ZNPNode_ZPP_SimplifyP.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_SimplifyP.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_SimplifyP.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_SimplifyP.zpp_pool;
		ZNPNode_ZPP_SimplifyP.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_SimplifyP.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_SimplifyP.zpp_pool;
		ZNPNode_ZPP_SimplifyP.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_SimplifyP.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_SimplifyP.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_SimplifyP.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_SimplifyP.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_SimplifyP.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_SimplifyP.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_SimplifyP.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_SimplifyP.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_SimplifyP.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_SimplifyP.prototype.__class__ = ZNPList_ZPP_SimplifyP;
var ZNPList_ZPP_PartitionedPoly = zpp_nape.util.ZNPList_ZPP_PartitionedPoly = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_PartitionedPoly.__name__ = ["zpp_nape","util","ZNPList_ZPP_PartitionedPoly"];
ZNPList_ZPP_PartitionedPoly.prototype.head = null;
ZNPList_ZPP_PartitionedPoly.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_PartitionedPoly.prototype.modified = null;
ZNPList_ZPP_PartitionedPoly.prototype.pushmod = null;
ZNPList_ZPP_PartitionedPoly.prototype.length = null;
ZNPList_ZPP_PartitionedPoly.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_PartitionedPoly.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_PartitionedPoly.zpp_pool == null) {
		ret = new ZNPNode_ZPP_PartitionedPoly();
	} else {
		ret = ZNPNode_ZPP_PartitionedPoly.zpp_pool;
		ZNPNode_ZPP_PartitionedPoly.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_PartitionedPoly.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_PartitionedPoly.zpp_pool == null) {
		ret = new ZNPNode_ZPP_PartitionedPoly();
	} else {
		ret = ZNPNode_ZPP_PartitionedPoly.zpp_pool;
		ZNPNode_ZPP_PartitionedPoly.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_PartitionedPoly.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_PartitionedPoly.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_PartitionedPoly.zpp_pool == null) {
		ret = new ZNPNode_ZPP_PartitionedPoly();
	} else {
		ret = ZNPNode_ZPP_PartitionedPoly.zpp_pool;
		ZNPNode_ZPP_PartitionedPoly.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_PartitionedPoly.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_PartitionedPoly.zpp_pool == null) {
		ret = new ZNPNode_ZPP_PartitionedPoly();
	} else {
		ret = ZNPNode_ZPP_PartitionedPoly.zpp_pool;
		ZNPNode_ZPP_PartitionedPoly.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_PartitionedPoly.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_PartitionedPoly.zpp_pool;
	ZNPNode_ZPP_PartitionedPoly.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_PartitionedPoly.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_PartitionedPoly.zpp_pool;
	ZNPNode_ZPP_PartitionedPoly.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_PartitionedPoly.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_PartitionedPoly.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_PartitionedPoly.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_PartitionedPoly.zpp_pool;
			ZNPNode_ZPP_PartitionedPoly.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_PartitionedPoly.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_PartitionedPoly.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_PartitionedPoly.zpp_pool;
			ZNPNode_ZPP_PartitionedPoly.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_PartitionedPoly.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_PartitionedPoly.zpp_pool;
			ZNPNode_ZPP_PartitionedPoly.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_PartitionedPoly.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_PartitionedPoly.zpp_pool;
	ZNPNode_ZPP_PartitionedPoly.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_PartitionedPoly.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_PartitionedPoly.zpp_pool;
	ZNPNode_ZPP_PartitionedPoly.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_PartitionedPoly.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_PartitionedPoly.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_PartitionedPoly.zpp_pool;
		ZNPNode_ZPP_PartitionedPoly.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_PartitionedPoly.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_PartitionedPoly.zpp_pool;
		ZNPNode_ZPP_PartitionedPoly.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_PartitionedPoly.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_PartitionedPoly.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_PartitionedPoly.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_PartitionedPoly.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_PartitionedPoly.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_PartitionedPoly.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_PartitionedPoly.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_PartitionedPoly.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_PartitionedPoly.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_PartitionedPoly.prototype.__class__ = ZNPList_ZPP_PartitionedPoly;
var ZNPList_ZPP_GeomVert = zpp_nape.util.ZNPList_ZPP_GeomVert = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_GeomVert.__name__ = ["zpp_nape","util","ZNPList_ZPP_GeomVert"];
ZNPList_ZPP_GeomVert.prototype.head = null;
ZNPList_ZPP_GeomVert.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_GeomVert.prototype.modified = null;
ZNPList_ZPP_GeomVert.prototype.pushmod = null;
ZNPList_ZPP_GeomVert.prototype.length = null;
ZNPList_ZPP_GeomVert.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_GeomVert.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_GeomVert.zpp_pool == null) {
		ret = new ZNPNode_ZPP_GeomVert();
	} else {
		ret = ZNPNode_ZPP_GeomVert.zpp_pool;
		ZNPNode_ZPP_GeomVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_GeomVert.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_GeomVert.zpp_pool == null) {
		ret = new ZNPNode_ZPP_GeomVert();
	} else {
		ret = ZNPNode_ZPP_GeomVert.zpp_pool;
		ZNPNode_ZPP_GeomVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_GeomVert.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_GeomVert.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_GeomVert.zpp_pool == null) {
		ret = new ZNPNode_ZPP_GeomVert();
	} else {
		ret = ZNPNode_ZPP_GeomVert.zpp_pool;
		ZNPNode_ZPP_GeomVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_GeomVert.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_GeomVert.zpp_pool == null) {
		ret = new ZNPNode_ZPP_GeomVert();
	} else {
		ret = ZNPNode_ZPP_GeomVert.zpp_pool;
		ZNPNode_ZPP_GeomVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_GeomVert.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_GeomVert.zpp_pool;
	ZNPNode_ZPP_GeomVert.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_GeomVert.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_GeomVert.zpp_pool;
	ZNPNode_ZPP_GeomVert.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_GeomVert.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_GeomVert.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_GeomVert.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_GeomVert.zpp_pool;
			ZNPNode_ZPP_GeomVert.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_GeomVert.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_GeomVert.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_GeomVert.zpp_pool;
			ZNPNode_ZPP_GeomVert.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_GeomVert.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_GeomVert.zpp_pool;
			ZNPNode_ZPP_GeomVert.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_GeomVert.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_GeomVert.zpp_pool;
	ZNPNode_ZPP_GeomVert.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_GeomVert.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_GeomVert.zpp_pool;
	ZNPNode_ZPP_GeomVert.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_GeomVert.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_GeomVert.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_GeomVert.zpp_pool;
		ZNPNode_ZPP_GeomVert.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_GeomVert.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_GeomVert.zpp_pool;
		ZNPNode_ZPP_GeomVert.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_GeomVert.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_GeomVert.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_GeomVert.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_GeomVert.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_GeomVert.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_GeomVert.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_GeomVert.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_GeomVert.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_GeomVert.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_GeomVert.prototype.__class__ = ZNPList_ZPP_GeomVert;
var ZNPList_ZPP_SimpleVert = zpp_nape.util.ZNPList_ZPP_SimpleVert = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_SimpleVert.__name__ = ["zpp_nape","util","ZNPList_ZPP_SimpleVert"];
ZNPList_ZPP_SimpleVert.prototype.head = null;
ZNPList_ZPP_SimpleVert.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_SimpleVert.prototype.modified = null;
ZNPList_ZPP_SimpleVert.prototype.pushmod = null;
ZNPList_ZPP_SimpleVert.prototype.length = null;
ZNPList_ZPP_SimpleVert.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_SimpleVert.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_SimpleVert.zpp_pool == null) {
		ret = new ZNPNode_ZPP_SimpleVert();
	} else {
		ret = ZNPNode_ZPP_SimpleVert.zpp_pool;
		ZNPNode_ZPP_SimpleVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_SimpleVert.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_SimpleVert.zpp_pool == null) {
		ret = new ZNPNode_ZPP_SimpleVert();
	} else {
		ret = ZNPNode_ZPP_SimpleVert.zpp_pool;
		ZNPNode_ZPP_SimpleVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_SimpleVert.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_SimpleVert.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_SimpleVert.zpp_pool == null) {
		ret = new ZNPNode_ZPP_SimpleVert();
	} else {
		ret = ZNPNode_ZPP_SimpleVert.zpp_pool;
		ZNPNode_ZPP_SimpleVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_SimpleVert.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_SimpleVert.zpp_pool == null) {
		ret = new ZNPNode_ZPP_SimpleVert();
	} else {
		ret = ZNPNode_ZPP_SimpleVert.zpp_pool;
		ZNPNode_ZPP_SimpleVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_SimpleVert.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_SimpleVert.zpp_pool;
	ZNPNode_ZPP_SimpleVert.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_SimpleVert.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_SimpleVert.zpp_pool;
	ZNPNode_ZPP_SimpleVert.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_SimpleVert.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_SimpleVert.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_SimpleVert.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_SimpleVert.zpp_pool;
			ZNPNode_ZPP_SimpleVert.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_SimpleVert.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_SimpleVert.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_SimpleVert.zpp_pool;
			ZNPNode_ZPP_SimpleVert.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_SimpleVert.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_SimpleVert.zpp_pool;
			ZNPNode_ZPP_SimpleVert.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_SimpleVert.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_SimpleVert.zpp_pool;
	ZNPNode_ZPP_SimpleVert.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_SimpleVert.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_SimpleVert.zpp_pool;
	ZNPNode_ZPP_SimpleVert.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_SimpleVert.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_SimpleVert.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_SimpleVert.zpp_pool;
		ZNPNode_ZPP_SimpleVert.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_SimpleVert.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_SimpleVert.zpp_pool;
		ZNPNode_ZPP_SimpleVert.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_SimpleVert.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_SimpleVert.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_SimpleVert.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_SimpleVert.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_SimpleVert.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_SimpleVert.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_SimpleVert.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_SimpleVert.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_SimpleVert.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_SimpleVert.prototype.__class__ = ZNPList_ZPP_SimpleVert;
var ZNPList_ZPP_SimpleEvent = zpp_nape.util.ZNPList_ZPP_SimpleEvent = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_SimpleEvent.__name__ = ["zpp_nape","util","ZNPList_ZPP_SimpleEvent"];
ZNPList_ZPP_SimpleEvent.prototype.head = null;
ZNPList_ZPP_SimpleEvent.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_SimpleEvent.prototype.modified = null;
ZNPList_ZPP_SimpleEvent.prototype.pushmod = null;
ZNPList_ZPP_SimpleEvent.prototype.length = null;
ZNPList_ZPP_SimpleEvent.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_SimpleEvent.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_SimpleEvent.zpp_pool == null) {
		ret = new ZNPNode_ZPP_SimpleEvent();
	} else {
		ret = ZNPNode_ZPP_SimpleEvent.zpp_pool;
		ZNPNode_ZPP_SimpleEvent.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_SimpleEvent.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_SimpleEvent.zpp_pool == null) {
		ret = new ZNPNode_ZPP_SimpleEvent();
	} else {
		ret = ZNPNode_ZPP_SimpleEvent.zpp_pool;
		ZNPNode_ZPP_SimpleEvent.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_SimpleEvent.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_SimpleEvent.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_SimpleEvent.zpp_pool == null) {
		ret = new ZNPNode_ZPP_SimpleEvent();
	} else {
		ret = ZNPNode_ZPP_SimpleEvent.zpp_pool;
		ZNPNode_ZPP_SimpleEvent.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_SimpleEvent.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_SimpleEvent.zpp_pool == null) {
		ret = new ZNPNode_ZPP_SimpleEvent();
	} else {
		ret = ZNPNode_ZPP_SimpleEvent.zpp_pool;
		ZNPNode_ZPP_SimpleEvent.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_SimpleEvent.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_SimpleEvent.zpp_pool;
	ZNPNode_ZPP_SimpleEvent.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_SimpleEvent.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_SimpleEvent.zpp_pool;
	ZNPNode_ZPP_SimpleEvent.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_SimpleEvent.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_SimpleEvent.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_SimpleEvent.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_SimpleEvent.zpp_pool;
			ZNPNode_ZPP_SimpleEvent.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_SimpleEvent.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_SimpleEvent.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_SimpleEvent.zpp_pool;
			ZNPNode_ZPP_SimpleEvent.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_SimpleEvent.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_SimpleEvent.zpp_pool;
			ZNPNode_ZPP_SimpleEvent.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_SimpleEvent.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_SimpleEvent.zpp_pool;
	ZNPNode_ZPP_SimpleEvent.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_SimpleEvent.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_SimpleEvent.zpp_pool;
	ZNPNode_ZPP_SimpleEvent.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_SimpleEvent.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_SimpleEvent.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_SimpleEvent.zpp_pool;
		ZNPNode_ZPP_SimpleEvent.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_SimpleEvent.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_SimpleEvent.zpp_pool;
		ZNPNode_ZPP_SimpleEvent.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_SimpleEvent.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_SimpleEvent.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_SimpleEvent.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_SimpleEvent.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_SimpleEvent.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_SimpleEvent.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_SimpleEvent.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_SimpleEvent.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_SimpleEvent.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_SimpleEvent.prototype.__class__ = ZNPList_ZPP_SimpleEvent;
var ZNPList_ZPP_AABBPair = zpp_nape.util.ZNPList_ZPP_AABBPair = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_AABBPair.__name__ = ["zpp_nape","util","ZNPList_ZPP_AABBPair"];
ZNPList_ZPP_AABBPair.prototype.head = null;
ZNPList_ZPP_AABBPair.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_AABBPair.prototype.modified = null;
ZNPList_ZPP_AABBPair.prototype.pushmod = null;
ZNPList_ZPP_AABBPair.prototype.length = null;
ZNPList_ZPP_AABBPair.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_AABBPair.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_AABBPair.zpp_pool == null) {
		ret = new ZNPNode_ZPP_AABBPair();
	} else {
		ret = ZNPNode_ZPP_AABBPair.zpp_pool;
		ZNPNode_ZPP_AABBPair.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_AABBPair.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_AABBPair.zpp_pool == null) {
		ret = new ZNPNode_ZPP_AABBPair();
	} else {
		ret = ZNPNode_ZPP_AABBPair.zpp_pool;
		ZNPNode_ZPP_AABBPair.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_AABBPair.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_AABBPair.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_AABBPair.zpp_pool == null) {
		ret = new ZNPNode_ZPP_AABBPair();
	} else {
		ret = ZNPNode_ZPP_AABBPair.zpp_pool;
		ZNPNode_ZPP_AABBPair.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_AABBPair.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_AABBPair.zpp_pool == null) {
		ret = new ZNPNode_ZPP_AABBPair();
	} else {
		ret = ZNPNode_ZPP_AABBPair.zpp_pool;
		ZNPNode_ZPP_AABBPair.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_AABBPair.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_AABBPair.zpp_pool;
	ZNPNode_ZPP_AABBPair.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_AABBPair.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_AABBPair.zpp_pool;
	ZNPNode_ZPP_AABBPair.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_AABBPair.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_AABBPair.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_AABBPair.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_AABBPair.zpp_pool;
			ZNPNode_ZPP_AABBPair.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_AABBPair.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_AABBPair.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_AABBPair.zpp_pool;
			ZNPNode_ZPP_AABBPair.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_AABBPair.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_AABBPair.zpp_pool;
			ZNPNode_ZPP_AABBPair.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_AABBPair.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_AABBPair.zpp_pool;
	ZNPNode_ZPP_AABBPair.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_AABBPair.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_AABBPair.zpp_pool;
	ZNPNode_ZPP_AABBPair.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_AABBPair.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_AABBPair.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_AABBPair.zpp_pool;
		ZNPNode_ZPP_AABBPair.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_AABBPair.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_AABBPair.zpp_pool;
		ZNPNode_ZPP_AABBPair.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_AABBPair.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_AABBPair.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_AABBPair.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_AABBPair.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_AABBPair.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_AABBPair.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_AABBPair.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_AABBPair.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_AABBPair.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_AABBPair.prototype.__class__ = ZNPList_ZPP_AABBPair;
var ZNPList_ZPP_Edge = zpp_nape.util.ZNPList_ZPP_Edge = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_Edge.__name__ = ["zpp_nape","util","ZNPList_ZPP_Edge"];
ZNPList_ZPP_Edge.prototype.head = null;
ZNPList_ZPP_Edge.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_Edge.prototype.modified = null;
ZNPList_ZPP_Edge.prototype.pushmod = null;
ZNPList_ZPP_Edge.prototype.length = null;
ZNPList_ZPP_Edge.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_Edge.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_Edge.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Edge();
	} else {
		ret = ZNPNode_ZPP_Edge.zpp_pool;
		ZNPNode_ZPP_Edge.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_Edge.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_Edge.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Edge();
	} else {
		ret = ZNPNode_ZPP_Edge.zpp_pool;
		ZNPNode_ZPP_Edge.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_Edge.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_Edge.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_Edge.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Edge();
	} else {
		ret = ZNPNode_ZPP_Edge.zpp_pool;
		ZNPNode_ZPP_Edge.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_Edge.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_Edge.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Edge();
	} else {
		ret = ZNPNode_ZPP_Edge.zpp_pool;
		ZNPNode_ZPP_Edge.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_Edge.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_Edge.zpp_pool;
	ZNPNode_ZPP_Edge.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_Edge.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_Edge.zpp_pool;
	ZNPNode_ZPP_Edge.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_Edge.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_Edge.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_Edge.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Edge.zpp_pool;
			ZNPNode_ZPP_Edge.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_Edge.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_Edge.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Edge.zpp_pool;
			ZNPNode_ZPP_Edge.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_Edge.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Edge.zpp_pool;
			ZNPNode_ZPP_Edge.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_Edge.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_Edge.zpp_pool;
	ZNPNode_ZPP_Edge.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_Edge.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_Edge.zpp_pool;
	ZNPNode_ZPP_Edge.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_Edge.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_Edge.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Edge.zpp_pool;
		ZNPNode_ZPP_Edge.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_Edge.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Edge.zpp_pool;
		ZNPNode_ZPP_Edge.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_Edge.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_Edge.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_Edge.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_Edge.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_Edge.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_Edge.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_Edge.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_Edge.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_Edge.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_Edge.prototype.__class__ = ZNPList_ZPP_Edge;
var ZNPList_ZPP_AABBNode = zpp_nape.util.ZNPList_ZPP_AABBNode = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_AABBNode.__name__ = ["zpp_nape","util","ZNPList_ZPP_AABBNode"];
ZNPList_ZPP_AABBNode.prototype.head = null;
ZNPList_ZPP_AABBNode.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_AABBNode.prototype.modified = null;
ZNPList_ZPP_AABBNode.prototype.pushmod = null;
ZNPList_ZPP_AABBNode.prototype.length = null;
ZNPList_ZPP_AABBNode.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_AABBNode.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_AABBNode.zpp_pool == null) {
		ret = new ZNPNode_ZPP_AABBNode();
	} else {
		ret = ZNPNode_ZPP_AABBNode.zpp_pool;
		ZNPNode_ZPP_AABBNode.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_AABBNode.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_AABBNode.zpp_pool == null) {
		ret = new ZNPNode_ZPP_AABBNode();
	} else {
		ret = ZNPNode_ZPP_AABBNode.zpp_pool;
		ZNPNode_ZPP_AABBNode.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_AABBNode.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_AABBNode.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_AABBNode.zpp_pool == null) {
		ret = new ZNPNode_ZPP_AABBNode();
	} else {
		ret = ZNPNode_ZPP_AABBNode.zpp_pool;
		ZNPNode_ZPP_AABBNode.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_AABBNode.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_AABBNode.zpp_pool == null) {
		ret = new ZNPNode_ZPP_AABBNode();
	} else {
		ret = ZNPNode_ZPP_AABBNode.zpp_pool;
		ZNPNode_ZPP_AABBNode.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_AABBNode.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_AABBNode.zpp_pool;
	ZNPNode_ZPP_AABBNode.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_AABBNode.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_AABBNode.zpp_pool;
	ZNPNode_ZPP_AABBNode.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_AABBNode.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_AABBNode.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_AABBNode.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_AABBNode.zpp_pool;
			ZNPNode_ZPP_AABBNode.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_AABBNode.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_AABBNode.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_AABBNode.zpp_pool;
			ZNPNode_ZPP_AABBNode.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_AABBNode.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_AABBNode.zpp_pool;
			ZNPNode_ZPP_AABBNode.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_AABBNode.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_AABBNode.zpp_pool;
	ZNPNode_ZPP_AABBNode.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_AABBNode.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_AABBNode.zpp_pool;
	ZNPNode_ZPP_AABBNode.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_AABBNode.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_AABBNode.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_AABBNode.zpp_pool;
		ZNPNode_ZPP_AABBNode.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_AABBNode.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_AABBNode.zpp_pool;
		ZNPNode_ZPP_AABBNode.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_AABBNode.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_AABBNode.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_AABBNode.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_AABBNode.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_AABBNode.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_AABBNode.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_AABBNode.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_AABBNode.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_AABBNode.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_AABBNode.prototype.__class__ = ZNPList_ZPP_AABBNode;
var ZNPList_ZPP_Component = zpp_nape.util.ZNPList_ZPP_Component = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_Component.__name__ = ["zpp_nape","util","ZNPList_ZPP_Component"];
ZNPList_ZPP_Component.prototype.head = null;
ZNPList_ZPP_Component.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_Component.prototype.modified = null;
ZNPList_ZPP_Component.prototype.pushmod = null;
ZNPList_ZPP_Component.prototype.length = null;
ZNPList_ZPP_Component.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_Component.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_Component.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Component();
	} else {
		ret = ZNPNode_ZPP_Component.zpp_pool;
		ZNPNode_ZPP_Component.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_Component.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_Component.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Component();
	} else {
		ret = ZNPNode_ZPP_Component.zpp_pool;
		ZNPNode_ZPP_Component.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_Component.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_Component.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_Component.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Component();
	} else {
		ret = ZNPNode_ZPP_Component.zpp_pool;
		ZNPNode_ZPP_Component.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_Component.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_Component.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Component();
	} else {
		ret = ZNPNode_ZPP_Component.zpp_pool;
		ZNPNode_ZPP_Component.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_Component.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_Component.zpp_pool;
	ZNPNode_ZPP_Component.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_Component.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_Component.zpp_pool;
	ZNPNode_ZPP_Component.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_Component.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_Component.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_Component.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Component.zpp_pool;
			ZNPNode_ZPP_Component.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_Component.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_Component.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Component.zpp_pool;
			ZNPNode_ZPP_Component.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_Component.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Component.zpp_pool;
			ZNPNode_ZPP_Component.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_Component.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_Component.zpp_pool;
	ZNPNode_ZPP_Component.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_Component.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_Component.zpp_pool;
	ZNPNode_ZPP_Component.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_Component.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_Component.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Component.zpp_pool;
		ZNPNode_ZPP_Component.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_Component.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Component.zpp_pool;
		ZNPNode_ZPP_Component.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_Component.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_Component.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_Component.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_Component.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_Component.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_Component.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_Component.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_Component.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_Component.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_Component.prototype.__class__ = ZNPList_ZPP_Component;
var ZNPList_ZPP_FluidArbiter = zpp_nape.util.ZNPList_ZPP_FluidArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_FluidArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_FluidArbiter"];
ZNPList_ZPP_FluidArbiter.prototype.head = null;
ZNPList_ZPP_FluidArbiter.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_FluidArbiter.prototype.modified = null;
ZNPList_ZPP_FluidArbiter.prototype.pushmod = null;
ZNPList_ZPP_FluidArbiter.prototype.length = null;
ZNPList_ZPP_FluidArbiter.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_FluidArbiter.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_FluidArbiter.zpp_pool == null) {
		ret = new ZNPNode_ZPP_FluidArbiter();
	} else {
		ret = ZNPNode_ZPP_FluidArbiter.zpp_pool;
		ZNPNode_ZPP_FluidArbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_FluidArbiter.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_FluidArbiter.zpp_pool == null) {
		ret = new ZNPNode_ZPP_FluidArbiter();
	} else {
		ret = ZNPNode_ZPP_FluidArbiter.zpp_pool;
		ZNPNode_ZPP_FluidArbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_FluidArbiter.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_FluidArbiter.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_FluidArbiter.zpp_pool == null) {
		ret = new ZNPNode_ZPP_FluidArbiter();
	} else {
		ret = ZNPNode_ZPP_FluidArbiter.zpp_pool;
		ZNPNode_ZPP_FluidArbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_FluidArbiter.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_FluidArbiter.zpp_pool == null) {
		ret = new ZNPNode_ZPP_FluidArbiter();
	} else {
		ret = ZNPNode_ZPP_FluidArbiter.zpp_pool;
		ZNPNode_ZPP_FluidArbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_FluidArbiter.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_FluidArbiter.zpp_pool;
	ZNPNode_ZPP_FluidArbiter.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_FluidArbiter.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_FluidArbiter.zpp_pool;
	ZNPNode_ZPP_FluidArbiter.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_FluidArbiter.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_FluidArbiter.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_FluidArbiter.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_FluidArbiter.zpp_pool;
			ZNPNode_ZPP_FluidArbiter.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_FluidArbiter.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_FluidArbiter.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_FluidArbiter.zpp_pool;
			ZNPNode_ZPP_FluidArbiter.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_FluidArbiter.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_FluidArbiter.zpp_pool;
			ZNPNode_ZPP_FluidArbiter.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_FluidArbiter.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_FluidArbiter.zpp_pool;
	ZNPNode_ZPP_FluidArbiter.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_FluidArbiter.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_FluidArbiter.zpp_pool;
	ZNPNode_ZPP_FluidArbiter.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_FluidArbiter.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_FluidArbiter.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_FluidArbiter.zpp_pool;
		ZNPNode_ZPP_FluidArbiter.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_FluidArbiter.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_FluidArbiter.zpp_pool;
		ZNPNode_ZPP_FluidArbiter.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_FluidArbiter.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_FluidArbiter.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_FluidArbiter.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_FluidArbiter.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_FluidArbiter.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_FluidArbiter.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_FluidArbiter.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_FluidArbiter.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_FluidArbiter.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_FluidArbiter.prototype.__class__ = ZNPList_ZPP_FluidArbiter;
var ZNPList_ZPP_SensorArbiter = zpp_nape.util.ZNPList_ZPP_SensorArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_SensorArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_SensorArbiter"];
ZNPList_ZPP_SensorArbiter.prototype.head = null;
ZNPList_ZPP_SensorArbiter.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_SensorArbiter.prototype.modified = null;
ZNPList_ZPP_SensorArbiter.prototype.pushmod = null;
ZNPList_ZPP_SensorArbiter.prototype.length = null;
ZNPList_ZPP_SensorArbiter.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_SensorArbiter.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_SensorArbiter.zpp_pool == null) {
		ret = new ZNPNode_ZPP_SensorArbiter();
	} else {
		ret = ZNPNode_ZPP_SensorArbiter.zpp_pool;
		ZNPNode_ZPP_SensorArbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_SensorArbiter.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_SensorArbiter.zpp_pool == null) {
		ret = new ZNPNode_ZPP_SensorArbiter();
	} else {
		ret = ZNPNode_ZPP_SensorArbiter.zpp_pool;
		ZNPNode_ZPP_SensorArbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_SensorArbiter.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_SensorArbiter.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_SensorArbiter.zpp_pool == null) {
		ret = new ZNPNode_ZPP_SensorArbiter();
	} else {
		ret = ZNPNode_ZPP_SensorArbiter.zpp_pool;
		ZNPNode_ZPP_SensorArbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_SensorArbiter.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_SensorArbiter.zpp_pool == null) {
		ret = new ZNPNode_ZPP_SensorArbiter();
	} else {
		ret = ZNPNode_ZPP_SensorArbiter.zpp_pool;
		ZNPNode_ZPP_SensorArbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_SensorArbiter.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_SensorArbiter.zpp_pool;
	ZNPNode_ZPP_SensorArbiter.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_SensorArbiter.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_SensorArbiter.zpp_pool;
	ZNPNode_ZPP_SensorArbiter.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_SensorArbiter.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_SensorArbiter.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_SensorArbiter.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_SensorArbiter.zpp_pool;
			ZNPNode_ZPP_SensorArbiter.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_SensorArbiter.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_SensorArbiter.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_SensorArbiter.zpp_pool;
			ZNPNode_ZPP_SensorArbiter.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_SensorArbiter.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_SensorArbiter.zpp_pool;
			ZNPNode_ZPP_SensorArbiter.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_SensorArbiter.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_SensorArbiter.zpp_pool;
	ZNPNode_ZPP_SensorArbiter.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_SensorArbiter.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_SensorArbiter.zpp_pool;
	ZNPNode_ZPP_SensorArbiter.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_SensorArbiter.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_SensorArbiter.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_SensorArbiter.zpp_pool;
		ZNPNode_ZPP_SensorArbiter.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_SensorArbiter.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_SensorArbiter.zpp_pool;
		ZNPNode_ZPP_SensorArbiter.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_SensorArbiter.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_SensorArbiter.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_SensorArbiter.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_SensorArbiter.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_SensorArbiter.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_SensorArbiter.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_SensorArbiter.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_SensorArbiter.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_SensorArbiter.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_SensorArbiter.prototype.__class__ = ZNPList_ZPP_SensorArbiter;
var ZNPList_ZPP_Listener = zpp_nape.util.ZNPList_ZPP_Listener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_Listener.__name__ = ["zpp_nape","util","ZNPList_ZPP_Listener"];
ZNPList_ZPP_Listener.prototype.head = null;
ZNPList_ZPP_Listener.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_Listener.prototype.modified = null;
ZNPList_ZPP_Listener.prototype.pushmod = null;
ZNPList_ZPP_Listener.prototype.length = null;
ZNPList_ZPP_Listener.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_Listener.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_Listener.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Listener();
	} else {
		ret = ZNPNode_ZPP_Listener.zpp_pool;
		ZNPNode_ZPP_Listener.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_Listener.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_Listener.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Listener();
	} else {
		ret = ZNPNode_ZPP_Listener.zpp_pool;
		ZNPNode_ZPP_Listener.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_Listener.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_Listener.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_Listener.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Listener();
	} else {
		ret = ZNPNode_ZPP_Listener.zpp_pool;
		ZNPNode_ZPP_Listener.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_Listener.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_Listener.zpp_pool == null) {
		ret = new ZNPNode_ZPP_Listener();
	} else {
		ret = ZNPNode_ZPP_Listener.zpp_pool;
		ZNPNode_ZPP_Listener.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_Listener.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_Listener.zpp_pool;
	ZNPNode_ZPP_Listener.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_Listener.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_Listener.zpp_pool;
	ZNPNode_ZPP_Listener.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_Listener.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_Listener.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_Listener.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Listener.zpp_pool;
			ZNPNode_ZPP_Listener.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_Listener.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_Listener.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Listener.zpp_pool;
			ZNPNode_ZPP_Listener.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_Listener.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_Listener.zpp_pool;
			ZNPNode_ZPP_Listener.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_Listener.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_Listener.zpp_pool;
	ZNPNode_ZPP_Listener.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_Listener.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_Listener.zpp_pool;
	ZNPNode_ZPP_Listener.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_Listener.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_Listener.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Listener.zpp_pool;
		ZNPNode_ZPP_Listener.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_Listener.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_Listener.zpp_pool;
		ZNPNode_ZPP_Listener.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_Listener.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_Listener.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_Listener.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_Listener.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_Listener.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_Listener.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_Listener.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_Listener.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_Listener.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_Listener.prototype.__class__ = ZNPList_ZPP_Listener;
var ZNPList_ZPP_ColArbiter = zpp_nape.util.ZNPList_ZPP_ColArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_ColArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_ColArbiter"];
ZNPList_ZPP_ColArbiter.prototype.head = null;
ZNPList_ZPP_ColArbiter.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_ColArbiter.prototype.modified = null;
ZNPList_ZPP_ColArbiter.prototype.pushmod = null;
ZNPList_ZPP_ColArbiter.prototype.length = null;
ZNPList_ZPP_ColArbiter.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_ColArbiter.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_ColArbiter.zpp_pool == null) {
		ret = new ZNPNode_ZPP_ColArbiter();
	} else {
		ret = ZNPNode_ZPP_ColArbiter.zpp_pool;
		ZNPNode_ZPP_ColArbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_ColArbiter.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_ColArbiter.zpp_pool == null) {
		ret = new ZNPNode_ZPP_ColArbiter();
	} else {
		ret = ZNPNode_ZPP_ColArbiter.zpp_pool;
		ZNPNode_ZPP_ColArbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_ColArbiter.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_ColArbiter.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_ColArbiter.zpp_pool == null) {
		ret = new ZNPNode_ZPP_ColArbiter();
	} else {
		ret = ZNPNode_ZPP_ColArbiter.zpp_pool;
		ZNPNode_ZPP_ColArbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_ColArbiter.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_ColArbiter.zpp_pool == null) {
		ret = new ZNPNode_ZPP_ColArbiter();
	} else {
		ret = ZNPNode_ZPP_ColArbiter.zpp_pool;
		ZNPNode_ZPP_ColArbiter.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_ColArbiter.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_ColArbiter.zpp_pool;
	ZNPNode_ZPP_ColArbiter.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_ColArbiter.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_ColArbiter.zpp_pool;
	ZNPNode_ZPP_ColArbiter.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_ColArbiter.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_ColArbiter.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_ColArbiter.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_ColArbiter.zpp_pool;
			ZNPNode_ZPP_ColArbiter.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_ColArbiter.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_ColArbiter.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_ColArbiter.zpp_pool;
			ZNPNode_ZPP_ColArbiter.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_ColArbiter.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_ColArbiter.zpp_pool;
			ZNPNode_ZPP_ColArbiter.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_ColArbiter.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_ColArbiter.zpp_pool;
	ZNPNode_ZPP_ColArbiter.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_ColArbiter.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_ColArbiter.zpp_pool;
	ZNPNode_ZPP_ColArbiter.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_ColArbiter.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_ColArbiter.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_ColArbiter.zpp_pool;
		ZNPNode_ZPP_ColArbiter.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_ColArbiter.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_ColArbiter.zpp_pool;
		ZNPNode_ZPP_ColArbiter.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_ColArbiter.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_ColArbiter.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_ColArbiter.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_ColArbiter.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_ColArbiter.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_ColArbiter.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_ColArbiter.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_ColArbiter.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_ColArbiter.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_ColArbiter.prototype.__class__ = ZNPList_ZPP_ColArbiter;
var ZNPList_ZPP_InteractionGroup = zpp_nape.util.ZNPList_ZPP_InteractionGroup = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_InteractionGroup.__name__ = ["zpp_nape","util","ZNPList_ZPP_InteractionGroup"];
ZNPList_ZPP_InteractionGroup.prototype.head = null;
ZNPList_ZPP_InteractionGroup.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_InteractionGroup.prototype.modified = null;
ZNPList_ZPP_InteractionGroup.prototype.pushmod = null;
ZNPList_ZPP_InteractionGroup.prototype.length = null;
ZNPList_ZPP_InteractionGroup.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_InteractionGroup.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_InteractionGroup.zpp_pool == null) {
		ret = new ZNPNode_ZPP_InteractionGroup();
	} else {
		ret = ZNPNode_ZPP_InteractionGroup.zpp_pool;
		ZNPNode_ZPP_InteractionGroup.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_InteractionGroup.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_InteractionGroup.zpp_pool == null) {
		ret = new ZNPNode_ZPP_InteractionGroup();
	} else {
		ret = ZNPNode_ZPP_InteractionGroup.zpp_pool;
		ZNPNode_ZPP_InteractionGroup.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_InteractionGroup.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_InteractionGroup.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_InteractionGroup.zpp_pool == null) {
		ret = new ZNPNode_ZPP_InteractionGroup();
	} else {
		ret = ZNPNode_ZPP_InteractionGroup.zpp_pool;
		ZNPNode_ZPP_InteractionGroup.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_InteractionGroup.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_InteractionGroup.zpp_pool == null) {
		ret = new ZNPNode_ZPP_InteractionGroup();
	} else {
		ret = ZNPNode_ZPP_InteractionGroup.zpp_pool;
		ZNPNode_ZPP_InteractionGroup.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_InteractionGroup.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_InteractionGroup.zpp_pool;
	ZNPNode_ZPP_InteractionGroup.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_InteractionGroup.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_InteractionGroup.zpp_pool;
	ZNPNode_ZPP_InteractionGroup.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_InteractionGroup.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_InteractionGroup.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_InteractionGroup.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_InteractionGroup.zpp_pool;
			ZNPNode_ZPP_InteractionGroup.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_InteractionGroup.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_InteractionGroup.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_InteractionGroup.zpp_pool;
			ZNPNode_ZPP_InteractionGroup.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_InteractionGroup.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_InteractionGroup.zpp_pool;
			ZNPNode_ZPP_InteractionGroup.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_InteractionGroup.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_InteractionGroup.zpp_pool;
	ZNPNode_ZPP_InteractionGroup.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_InteractionGroup.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_InteractionGroup.zpp_pool;
	ZNPNode_ZPP_InteractionGroup.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_InteractionGroup.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_InteractionGroup.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_InteractionGroup.zpp_pool;
		ZNPNode_ZPP_InteractionGroup.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_InteractionGroup.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_InteractionGroup.zpp_pool;
		ZNPNode_ZPP_InteractionGroup.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_InteractionGroup.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_InteractionGroup.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_InteractionGroup.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_InteractionGroup.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_InteractionGroup.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_InteractionGroup.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_InteractionGroup.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_InteractionGroup.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_InteractionGroup.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_InteractionGroup.prototype.__class__ = ZNPList_ZPP_InteractionGroup;
var ZNPList_ZPP_ToiEvent = zpp_nape.util.ZNPList_ZPP_ToiEvent = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_ToiEvent.__name__ = ["zpp_nape","util","ZNPList_ZPP_ToiEvent"];
ZNPList_ZPP_ToiEvent.prototype.head = null;
ZNPList_ZPP_ToiEvent.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_ToiEvent.prototype.modified = null;
ZNPList_ZPP_ToiEvent.prototype.pushmod = null;
ZNPList_ZPP_ToiEvent.prototype.length = null;
ZNPList_ZPP_ToiEvent.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_ToiEvent.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_ToiEvent.zpp_pool == null) {
		ret = new ZNPNode_ZPP_ToiEvent();
	} else {
		ret = ZNPNode_ZPP_ToiEvent.zpp_pool;
		ZNPNode_ZPP_ToiEvent.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_ToiEvent.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_ToiEvent.zpp_pool == null) {
		ret = new ZNPNode_ZPP_ToiEvent();
	} else {
		ret = ZNPNode_ZPP_ToiEvent.zpp_pool;
		ZNPNode_ZPP_ToiEvent.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_ToiEvent.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_ToiEvent.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_ToiEvent.zpp_pool == null) {
		ret = new ZNPNode_ZPP_ToiEvent();
	} else {
		ret = ZNPNode_ZPP_ToiEvent.zpp_pool;
		ZNPNode_ZPP_ToiEvent.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_ToiEvent.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_ToiEvent.zpp_pool == null) {
		ret = new ZNPNode_ZPP_ToiEvent();
	} else {
		ret = ZNPNode_ZPP_ToiEvent.zpp_pool;
		ZNPNode_ZPP_ToiEvent.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_ToiEvent.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_ToiEvent.zpp_pool;
	ZNPNode_ZPP_ToiEvent.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_ToiEvent.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_ToiEvent.zpp_pool;
	ZNPNode_ZPP_ToiEvent.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_ToiEvent.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_ToiEvent.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_ToiEvent.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_ToiEvent.zpp_pool;
			ZNPNode_ZPP_ToiEvent.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_ToiEvent.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_ToiEvent.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_ToiEvent.zpp_pool;
			ZNPNode_ZPP_ToiEvent.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_ToiEvent.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_ToiEvent.zpp_pool;
			ZNPNode_ZPP_ToiEvent.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_ToiEvent.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_ToiEvent.zpp_pool;
	ZNPNode_ZPP_ToiEvent.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_ToiEvent.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_ToiEvent.zpp_pool;
	ZNPNode_ZPP_ToiEvent.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_ToiEvent.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_ToiEvent.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_ToiEvent.zpp_pool;
		ZNPNode_ZPP_ToiEvent.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_ToiEvent.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_ToiEvent.zpp_pool;
		ZNPNode_ZPP_ToiEvent.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_ToiEvent.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_ToiEvent.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_ToiEvent.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_ToiEvent.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_ToiEvent.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_ToiEvent.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_ToiEvent.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_ToiEvent.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_ToiEvent.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_ToiEvent.prototype.__class__ = ZNPList_ZPP_ToiEvent;
var ZNPList_ConvexResult = zpp_nape.util.ZNPList_ConvexResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ConvexResult.__name__ = ["zpp_nape","util","ZNPList_ConvexResult"];
ZNPList_ConvexResult.prototype.head = null;
ZNPList_ConvexResult.prototype.begin = function() {
	return this.head;
};
ZNPList_ConvexResult.prototype.modified = null;
ZNPList_ConvexResult.prototype.pushmod = null;
ZNPList_ConvexResult.prototype.length = null;
ZNPList_ConvexResult.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ConvexResult.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ConvexResult.zpp_pool == null) {
		ret = new ZNPNode_ConvexResult();
	} else {
		ret = ZNPNode_ConvexResult.zpp_pool;
		ZNPNode_ConvexResult.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ConvexResult.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ConvexResult.zpp_pool == null) {
		ret = new ZNPNode_ConvexResult();
	} else {
		ret = ZNPNode_ConvexResult.zpp_pool;
		ZNPNode_ConvexResult.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ConvexResult.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ConvexResult.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ConvexResult.zpp_pool == null) {
		ret = new ZNPNode_ConvexResult();
	} else {
		ret = ZNPNode_ConvexResult.zpp_pool;
		ZNPNode_ConvexResult.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ConvexResult.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ConvexResult.zpp_pool == null) {
		ret = new ZNPNode_ConvexResult();
	} else {
		ret = ZNPNode_ConvexResult.zpp_pool;
		ZNPNode_ConvexResult.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ConvexResult.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ConvexResult.zpp_pool;
	ZNPNode_ConvexResult.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ConvexResult.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ConvexResult.zpp_pool;
	ZNPNode_ConvexResult.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ConvexResult.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ConvexResult.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ConvexResult.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ConvexResult.zpp_pool;
			ZNPNode_ConvexResult.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ConvexResult.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ConvexResult.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ConvexResult.zpp_pool;
			ZNPNode_ConvexResult.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ConvexResult.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ConvexResult.zpp_pool;
			ZNPNode_ConvexResult.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ConvexResult.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ConvexResult.zpp_pool;
	ZNPNode_ConvexResult.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ConvexResult.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ConvexResult.zpp_pool;
	ZNPNode_ConvexResult.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ConvexResult.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ConvexResult.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ConvexResult.zpp_pool;
		ZNPNode_ConvexResult.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ConvexResult.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ConvexResult.zpp_pool;
		ZNPNode_ConvexResult.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ConvexResult.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ConvexResult.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ConvexResult.prototype.size = function() {
	return this.length;
};
ZNPList_ConvexResult.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ConvexResult.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ConvexResult.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ConvexResult.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ConvexResult.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ConvexResult.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ConvexResult.prototype.__class__ = ZNPList_ConvexResult;
var ZNPList_ZPP_GeomPoly = zpp_nape.util.ZNPList_ZPP_GeomPoly = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_ZPP_GeomPoly.__name__ = ["zpp_nape","util","ZNPList_ZPP_GeomPoly"];
ZNPList_ZPP_GeomPoly.prototype.head = null;
ZNPList_ZPP_GeomPoly.prototype.begin = function() {
	return this.head;
};
ZNPList_ZPP_GeomPoly.prototype.modified = null;
ZNPList_ZPP_GeomPoly.prototype.pushmod = null;
ZNPList_ZPP_GeomPoly.prototype.length = null;
ZNPList_ZPP_GeomPoly.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_GeomPoly.prototype.add = function(o) {
	var ret;
	if(ZNPNode_ZPP_GeomPoly.zpp_pool == null) {
		ret = new ZNPNode_ZPP_GeomPoly();
	} else {
		ret = ZNPNode_ZPP_GeomPoly.zpp_pool;
		ZNPNode_ZPP_GeomPoly.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_GeomPoly.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_ZPP_GeomPoly.zpp_pool == null) {
		ret = new ZNPNode_ZPP_GeomPoly();
	} else {
		ret = ZNPNode_ZPP_GeomPoly.zpp_pool;
		ZNPNode_ZPP_GeomPoly.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_ZPP_GeomPoly.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_ZPP_GeomPoly.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_GeomPoly.zpp_pool == null) {
		ret = new ZNPNode_ZPP_GeomPoly();
	} else {
		ret = ZNPNode_ZPP_GeomPoly.zpp_pool;
		ZNPNode_ZPP_GeomPoly.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_GeomPoly.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_ZPP_GeomPoly.zpp_pool == null) {
		ret = new ZNPNode_ZPP_GeomPoly();
	} else {
		ret = ZNPNode_ZPP_GeomPoly.zpp_pool;
		ZNPNode_ZPP_GeomPoly.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_ZPP_GeomPoly.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_GeomPoly.zpp_pool;
	ZNPNode_ZPP_GeomPoly.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_GeomPoly.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_ZPP_GeomPoly.zpp_pool;
	ZNPNode_ZPP_GeomPoly.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_ZPP_GeomPoly.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_GeomPoly.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_ZPP_GeomPoly.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_GeomPoly.zpp_pool;
			ZNPNode_ZPP_GeomPoly.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_GeomPoly.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_GeomPoly.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_GeomPoly.zpp_pool;
			ZNPNode_ZPP_GeomPoly.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_ZPP_GeomPoly.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_ZPP_GeomPoly.zpp_pool;
			ZNPNode_ZPP_GeomPoly.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_ZPP_GeomPoly.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_GeomPoly.zpp_pool;
	ZNPNode_ZPP_GeomPoly.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_GeomPoly.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_ZPP_GeomPoly.zpp_pool;
	ZNPNode_ZPP_GeomPoly.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_ZPP_GeomPoly.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_ZPP_GeomPoly.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_GeomPoly.zpp_pool;
		ZNPNode_ZPP_GeomPoly.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_GeomPoly.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_ZPP_GeomPoly.zpp_pool;
		ZNPNode_ZPP_GeomPoly.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_ZPP_GeomPoly.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_ZPP_GeomPoly.prototype.empty = function() {
	return this.head == null;
};
ZNPList_ZPP_GeomPoly.prototype.size = function() {
	return this.length;
};
ZNPList_ZPP_GeomPoly.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_GeomPoly.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_ZPP_GeomPoly.prototype.front = function() {
	return this.head.elt;
};
ZNPList_ZPP_GeomPoly.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_ZPP_GeomPoly.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_ZPP_GeomPoly.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_ZPP_GeomPoly.prototype.__class__ = ZNPList_ZPP_GeomPoly;
var ZNPList_RayResult = zpp_nape.util.ZNPList_RayResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
ZNPList_RayResult.__name__ = ["zpp_nape","util","ZNPList_RayResult"];
ZNPList_RayResult.prototype.head = null;
ZNPList_RayResult.prototype.begin = function() {
	return this.head;
};
ZNPList_RayResult.prototype.modified = null;
ZNPList_RayResult.prototype.pushmod = null;
ZNPList_RayResult.prototype.length = null;
ZNPList_RayResult.prototype.setbegin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
};
ZNPList_RayResult.prototype.add = function(o) {
	var ret;
	if(ZNPNode_RayResult.zpp_pool == null) {
		ret = new ZNPNode_RayResult();
	} else {
		ret = ZNPNode_RayResult.zpp_pool;
		ZNPNode_RayResult.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_RayResult.prototype.inlined_add = function(o) {
	var ret;
	if(ZNPNode_RayResult.zpp_pool == null) {
		ret = new ZNPNode_RayResult();
	} else {
		ret = ZNPNode_RayResult.zpp_pool;
		ZNPNode_RayResult.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.length++;
	return o;
};
ZNPList_RayResult.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		this.add(cx_ite.elt);
		cx_ite = cx_ite.next;
	}
};
ZNPList_RayResult.prototype.insert = function(cur,o) {
	var ret;
	if(ZNPNode_RayResult.zpp_pool == null) {
		ret = new ZNPNode_RayResult();
	} else {
		ret = ZNPNode_RayResult.zpp_pool;
		ZNPNode_RayResult.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_RayResult.prototype.inlined_insert = function(cur,o) {
	var ret;
	if(ZNPNode_RayResult.zpp_pool == null) {
		ret = new ZNPNode_RayResult();
	} else {
		ret = ZNPNode_RayResult.zpp_pool;
		ZNPNode_RayResult.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.elt = o;
	var temp = ret;
	if(cur == null) {
		temp.next = this.head;
		this.head = temp;
	} else {
		temp.next = cur.next;
		cur.next = temp;
	}
	this.pushmod = this.modified = true;
	this.length++;
	return temp;
};
ZNPList_RayResult.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_RayResult.zpp_pool;
	ZNPNode_RayResult.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_RayResult.prototype.inlined_pop = function() {
	var ret = this.head;
	this.head = ret.next;
	ret.elt = null;
	ret.next = ZNPNode_RayResult.zpp_pool;
	ZNPNode_RayResult.zpp_pool = ret;
	if(this.head == null) {
		this.pushmod = true;
	}
	this.modified = true;
	this.length--;
};
ZNPList_RayResult.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_RayResult.prototype.inlined_pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
};
ZNPList_RayResult.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_RayResult.zpp_pool;
			ZNPNode_RayResult.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_RayResult.prototype.try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_RayResult.prototype.inlined_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret;
			if(pre == null) {
				old = this.head;
				ret = old.next;
				this.head = ret;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret = old.next;
				pre.next = ret;
				if(ret == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_RayResult.zpp_pool;
			ZNPNode_RayResult.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
};
ZNPList_RayResult.prototype.inlined_try_remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			var old;
			var ret1;
			if(pre == null) {
				old = this.head;
				ret1 = old.next;
				this.head = ret1;
				if(this.head == null) {
					this.pushmod = true;
				}
			} else {
				old = pre.next;
				ret1 = old.next;
				pre.next = ret1;
				if(ret1 == null) {
					this.pushmod = true;
				}
			}
			var o = old;
			o.elt = null;
			o.next = ZNPNode_RayResult.zpp_pool;
			ZNPNode_RayResult.zpp_pool = o;
			this.modified = true;
			this.length--;
			this.pushmod = true;
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
};
ZNPList_RayResult.prototype.erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_RayResult.zpp_pool;
	ZNPNode_RayResult.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_RayResult.prototype.inlined_erase = function(pre) {
	var old;
	var ret;
	if(pre == null) {
		old = this.head;
		ret = old.next;
		this.head = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
	} else {
		old = pre.next;
		ret = old.next;
		pre.next = ret;
		if(ret == null) {
			this.pushmod = true;
		}
	}
	var o = old;
	o.elt = null;
	o.next = ZNPNode_RayResult.zpp_pool;
	ZNPNode_RayResult.zpp_pool = o;
	this.modified = true;
	this.length--;
	this.pushmod = true;
	return ret;
};
ZNPList_RayResult.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
};
ZNPList_RayResult.prototype.clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_RayResult.zpp_pool;
		ZNPNode_RayResult.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_RayResult.prototype.inlined_clear = function() {
	while(this.head != null) {
		var ret = this.head;
		this.head = ret.next;
		ret.elt = null;
		ret.next = ZNPNode_RayResult.zpp_pool;
		ZNPNode_RayResult.zpp_pool = ret;
		if(this.head == null) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	this.pushmod = true;
};
ZNPList_RayResult.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
};
ZNPList_RayResult.prototype.empty = function() {
	return this.head == null;
};
ZNPList_RayResult.prototype.size = function() {
	return this.length;
};
ZNPList_RayResult.prototype.has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_RayResult.prototype.inlined_has = function(obj) {
	var ret;
	ret = false;
	var cx_ite = this.head;
	while(cx_ite != null) {
		if(cx_ite.elt == obj) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
ZNPList_RayResult.prototype.front = function() {
	return this.head.elt;
};
ZNPList_RayResult.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
};
ZNPList_RayResult.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
};
ZNPList_RayResult.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	if(it != null) {
		return it.elt;
	} else {
		return null;
	}
};
ZNPList_RayResult.prototype.__class__ = ZNPList_RayResult;
var ZNPNode_ZPP_CbType = zpp_nape.util.ZNPNode_ZPP_CbType = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_CbType.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbType"];
ZNPNode_ZPP_CbType.prototype.next = null;
ZNPNode_ZPP_CbType.prototype.alloc = function() {
};
ZNPNode_ZPP_CbType.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_CbType.prototype.elt = null;
ZNPNode_ZPP_CbType.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_CbType.prototype.__class__ = ZNPNode_ZPP_CbType;
var ZNPNode_ZPP_CallbackSet = zpp_nape.util.ZNPNode_ZPP_CallbackSet = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_CallbackSet.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CallbackSet"];
ZNPNode_ZPP_CallbackSet.prototype.next = null;
ZNPNode_ZPP_CallbackSet.prototype.alloc = function() {
};
ZNPNode_ZPP_CallbackSet.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_CallbackSet.prototype.elt = null;
ZNPNode_ZPP_CallbackSet.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_CallbackSet.prototype.__class__ = ZNPNode_ZPP_CallbackSet;
var ZNPNode_ZPP_Shape = zpp_nape.util.ZNPNode_ZPP_Shape = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_Shape.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Shape"];
ZNPNode_ZPP_Shape.prototype.next = null;
ZNPNode_ZPP_Shape.prototype.alloc = function() {
};
ZNPNode_ZPP_Shape.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_Shape.prototype.elt = null;
ZNPNode_ZPP_Shape.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_Shape.prototype.__class__ = ZNPNode_ZPP_Shape;
var ZNPNode_ZPP_Body = zpp_nape.util.ZNPNode_ZPP_Body = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_Body.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Body"];
ZNPNode_ZPP_Body.prototype.next = null;
ZNPNode_ZPP_Body.prototype.alloc = function() {
};
ZNPNode_ZPP_Body.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_Body.prototype.elt = null;
ZNPNode_ZPP_Body.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_Body.prototype.__class__ = ZNPNode_ZPP_Body;
var ZNPNode_ZPP_Constraint = zpp_nape.util.ZNPNode_ZPP_Constraint = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_Constraint.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Constraint"];
ZNPNode_ZPP_Constraint.prototype.next = null;
ZNPNode_ZPP_Constraint.prototype.alloc = function() {
};
ZNPNode_ZPP_Constraint.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_Constraint.prototype.elt = null;
ZNPNode_ZPP_Constraint.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_Constraint.prototype.__class__ = ZNPNode_ZPP_Constraint;
var ZNPNode_ZPP_Compound = zpp_nape.util.ZNPNode_ZPP_Compound = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_Compound.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Compound"];
ZNPNode_ZPP_Compound.prototype.next = null;
ZNPNode_ZPP_Compound.prototype.alloc = function() {
};
ZNPNode_ZPP_Compound.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_Compound.prototype.elt = null;
ZNPNode_ZPP_Compound.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_Compound.prototype.__class__ = ZNPNode_ZPP_Compound;
var ZNPNode_ZPP_Arbiter = zpp_nape.util.ZNPNode_ZPP_Arbiter = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_Arbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Arbiter"];
ZNPNode_ZPP_Arbiter.prototype.next = null;
ZNPNode_ZPP_Arbiter.prototype.alloc = function() {
};
ZNPNode_ZPP_Arbiter.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_Arbiter.prototype.elt = null;
ZNPNode_ZPP_Arbiter.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_Arbiter.prototype.__class__ = ZNPNode_ZPP_Arbiter;
var ZNPNode_ZPP_InteractionListener = zpp_nape.util.ZNPNode_ZPP_InteractionListener = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_InteractionListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_InteractionListener"];
ZNPNode_ZPP_InteractionListener.prototype.next = null;
ZNPNode_ZPP_InteractionListener.prototype.alloc = function() {
};
ZNPNode_ZPP_InteractionListener.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_InteractionListener.prototype.elt = null;
ZNPNode_ZPP_InteractionListener.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_InteractionListener.prototype.__class__ = ZNPNode_ZPP_InteractionListener;
var ZNPNode_ZPP_CbSet = zpp_nape.util.ZNPNode_ZPP_CbSet = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_CbSet.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbSet"];
ZNPNode_ZPP_CbSet.prototype.next = null;
ZNPNode_ZPP_CbSet.prototype.alloc = function() {
};
ZNPNode_ZPP_CbSet.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_CbSet.prototype.elt = null;
ZNPNode_ZPP_CbSet.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_CbSet.prototype.__class__ = ZNPNode_ZPP_CbSet;
var ZNPNode_ZPP_Interactor = zpp_nape.util.ZNPNode_ZPP_Interactor = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_Interactor.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Interactor"];
ZNPNode_ZPP_Interactor.prototype.next = null;
ZNPNode_ZPP_Interactor.prototype.alloc = function() {
};
ZNPNode_ZPP_Interactor.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_Interactor.prototype.elt = null;
ZNPNode_ZPP_Interactor.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_Interactor.prototype.__class__ = ZNPNode_ZPP_Interactor;
var ZNPNode_ZPP_BodyListener = zpp_nape.util.ZNPNode_ZPP_BodyListener = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_BodyListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_BodyListener"];
ZNPNode_ZPP_BodyListener.prototype.next = null;
ZNPNode_ZPP_BodyListener.prototype.alloc = function() {
};
ZNPNode_ZPP_BodyListener.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_BodyListener.prototype.elt = null;
ZNPNode_ZPP_BodyListener.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_BodyListener.prototype.__class__ = ZNPNode_ZPP_BodyListener;
var ZNPNode_ZPP_CbSetPair = zpp_nape.util.ZNPNode_ZPP_CbSetPair = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_CbSetPair.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbSetPair"];
ZNPNode_ZPP_CbSetPair.prototype.next = null;
ZNPNode_ZPP_CbSetPair.prototype.alloc = function() {
};
ZNPNode_ZPP_CbSetPair.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_CbSetPair.prototype.elt = null;
ZNPNode_ZPP_CbSetPair.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_CbSetPair.prototype.__class__ = ZNPNode_ZPP_CbSetPair;
var ZNPNode_ZPP_ConstraintListener = zpp_nape.util.ZNPNode_ZPP_ConstraintListener = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_ConstraintListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ConstraintListener"];
ZNPNode_ZPP_ConstraintListener.prototype.next = null;
ZNPNode_ZPP_ConstraintListener.prototype.alloc = function() {
};
ZNPNode_ZPP_ConstraintListener.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_ConstraintListener.prototype.elt = null;
ZNPNode_ZPP_ConstraintListener.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_ConstraintListener.prototype.__class__ = ZNPNode_ZPP_ConstraintListener;
var ZNPNode_ZPP_CutInt = zpp_nape.util.ZNPNode_ZPP_CutInt = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_CutInt.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CutInt"];
ZNPNode_ZPP_CutInt.prototype.next = null;
ZNPNode_ZPP_CutInt.prototype.alloc = function() {
};
ZNPNode_ZPP_CutInt.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_CutInt.prototype.elt = null;
ZNPNode_ZPP_CutInt.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_CutInt.prototype.__class__ = ZNPNode_ZPP_CutInt;
var ZNPNode_ZPP_CutVert = zpp_nape.util.ZNPNode_ZPP_CutVert = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_CutVert.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CutVert"];
ZNPNode_ZPP_CutVert.prototype.next = null;
ZNPNode_ZPP_CutVert.prototype.alloc = function() {
};
ZNPNode_ZPP_CutVert.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_CutVert.prototype.elt = null;
ZNPNode_ZPP_CutVert.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_CutVert.prototype.__class__ = ZNPNode_ZPP_CutVert;
var ZNPNode_ZPP_PartitionVertex = zpp_nape.util.ZNPNode_ZPP_PartitionVertex = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_PartitionVertex.__name__ = ["zpp_nape","util","ZNPNode_ZPP_PartitionVertex"];
ZNPNode_ZPP_PartitionVertex.prototype.next = null;
ZNPNode_ZPP_PartitionVertex.prototype.alloc = function() {
};
ZNPNode_ZPP_PartitionVertex.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_PartitionVertex.prototype.elt = null;
ZNPNode_ZPP_PartitionVertex.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_PartitionVertex.prototype.__class__ = ZNPNode_ZPP_PartitionVertex;
var ZNPNode_ZPP_SimplifyP = zpp_nape.util.ZNPNode_ZPP_SimplifyP = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_SimplifyP.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SimplifyP"];
ZNPNode_ZPP_SimplifyP.prototype.next = null;
ZNPNode_ZPP_SimplifyP.prototype.alloc = function() {
};
ZNPNode_ZPP_SimplifyP.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_SimplifyP.prototype.elt = null;
ZNPNode_ZPP_SimplifyP.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_SimplifyP.prototype.__class__ = ZNPNode_ZPP_SimplifyP;
var ZNPNode_ZPP_PartitionedPoly = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_PartitionedPoly.__name__ = ["zpp_nape","util","ZNPNode_ZPP_PartitionedPoly"];
ZNPNode_ZPP_PartitionedPoly.prototype.next = null;
ZNPNode_ZPP_PartitionedPoly.prototype.alloc = function() {
};
ZNPNode_ZPP_PartitionedPoly.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_PartitionedPoly.prototype.elt = null;
ZNPNode_ZPP_PartitionedPoly.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_PartitionedPoly.prototype.__class__ = ZNPNode_ZPP_PartitionedPoly;
var ZNPNode_ZPP_GeomVert = zpp_nape.util.ZNPNode_ZPP_GeomVert = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_GeomVert.__name__ = ["zpp_nape","util","ZNPNode_ZPP_GeomVert"];
ZNPNode_ZPP_GeomVert.prototype.next = null;
ZNPNode_ZPP_GeomVert.prototype.alloc = function() {
};
ZNPNode_ZPP_GeomVert.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_GeomVert.prototype.elt = null;
ZNPNode_ZPP_GeomVert.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_GeomVert.prototype.__class__ = ZNPNode_ZPP_GeomVert;
var ZNPNode_ZPP_SimpleVert = zpp_nape.util.ZNPNode_ZPP_SimpleVert = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_SimpleVert.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SimpleVert"];
ZNPNode_ZPP_SimpleVert.prototype.next = null;
ZNPNode_ZPP_SimpleVert.prototype.alloc = function() {
};
ZNPNode_ZPP_SimpleVert.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_SimpleVert.prototype.elt = null;
ZNPNode_ZPP_SimpleVert.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_SimpleVert.prototype.__class__ = ZNPNode_ZPP_SimpleVert;
var ZNPNode_ZPP_SimpleEvent = zpp_nape.util.ZNPNode_ZPP_SimpleEvent = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_SimpleEvent.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SimpleEvent"];
ZNPNode_ZPP_SimpleEvent.prototype.next = null;
ZNPNode_ZPP_SimpleEvent.prototype.alloc = function() {
};
ZNPNode_ZPP_SimpleEvent.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_SimpleEvent.prototype.elt = null;
ZNPNode_ZPP_SimpleEvent.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_SimpleEvent.prototype.__class__ = ZNPNode_ZPP_SimpleEvent;
var ZNPNode_ZPP_Vec2 = zpp_nape.util.ZNPNode_ZPP_Vec2 = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_Vec2.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Vec2"];
ZNPNode_ZPP_Vec2.prototype.next = null;
ZNPNode_ZPP_Vec2.prototype.alloc = function() {
};
ZNPNode_ZPP_Vec2.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_Vec2.prototype.elt = null;
ZNPNode_ZPP_Vec2.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_Vec2.prototype.__class__ = ZNPNode_ZPP_Vec2;
var ZNPNode_ZPP_AABBPair = zpp_nape.util.ZNPNode_ZPP_AABBPair = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_AABBPair.__name__ = ["zpp_nape","util","ZNPNode_ZPP_AABBPair"];
ZNPNode_ZPP_AABBPair.prototype.next = null;
ZNPNode_ZPP_AABBPair.prototype.alloc = function() {
};
ZNPNode_ZPP_AABBPair.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_AABBPair.prototype.elt = null;
ZNPNode_ZPP_AABBPair.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_AABBPair.prototype.__class__ = ZNPNode_ZPP_AABBPair;
var ZNPNode_ZPP_Edge = zpp_nape.util.ZNPNode_ZPP_Edge = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_Edge.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Edge"];
ZNPNode_ZPP_Edge.prototype.next = null;
ZNPNode_ZPP_Edge.prototype.alloc = function() {
};
ZNPNode_ZPP_Edge.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_Edge.prototype.elt = null;
ZNPNode_ZPP_Edge.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_Edge.prototype.__class__ = ZNPNode_ZPP_Edge;
var ZNPNode_ZPP_AABBNode = zpp_nape.util.ZNPNode_ZPP_AABBNode = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_AABBNode.__name__ = ["zpp_nape","util","ZNPNode_ZPP_AABBNode"];
ZNPNode_ZPP_AABBNode.prototype.next = null;
ZNPNode_ZPP_AABBNode.prototype.alloc = function() {
};
ZNPNode_ZPP_AABBNode.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_AABBNode.prototype.elt = null;
ZNPNode_ZPP_AABBNode.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_AABBNode.prototype.__class__ = ZNPNode_ZPP_AABBNode;
var ZNPNode_ZPP_Component = zpp_nape.util.ZNPNode_ZPP_Component = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_Component.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Component"];
ZNPNode_ZPP_Component.prototype.next = null;
ZNPNode_ZPP_Component.prototype.alloc = function() {
};
ZNPNode_ZPP_Component.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_Component.prototype.elt = null;
ZNPNode_ZPP_Component.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_Component.prototype.__class__ = ZNPNode_ZPP_Component;
var ZNPNode_ZPP_FluidArbiter = zpp_nape.util.ZNPNode_ZPP_FluidArbiter = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_FluidArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_FluidArbiter"];
ZNPNode_ZPP_FluidArbiter.prototype.next = null;
ZNPNode_ZPP_FluidArbiter.prototype.alloc = function() {
};
ZNPNode_ZPP_FluidArbiter.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_FluidArbiter.prototype.elt = null;
ZNPNode_ZPP_FluidArbiter.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_FluidArbiter.prototype.__class__ = ZNPNode_ZPP_FluidArbiter;
var ZNPNode_ZPP_SensorArbiter = zpp_nape.util.ZNPNode_ZPP_SensorArbiter = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_SensorArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SensorArbiter"];
ZNPNode_ZPP_SensorArbiter.prototype.next = null;
ZNPNode_ZPP_SensorArbiter.prototype.alloc = function() {
};
ZNPNode_ZPP_SensorArbiter.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_SensorArbiter.prototype.elt = null;
ZNPNode_ZPP_SensorArbiter.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_SensorArbiter.prototype.__class__ = ZNPNode_ZPP_SensorArbiter;
var ZNPNode_ZPP_Listener = zpp_nape.util.ZNPNode_ZPP_Listener = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_Listener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Listener"];
ZNPNode_ZPP_Listener.prototype.next = null;
ZNPNode_ZPP_Listener.prototype.alloc = function() {
};
ZNPNode_ZPP_Listener.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_Listener.prototype.elt = null;
ZNPNode_ZPP_Listener.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_Listener.prototype.__class__ = ZNPNode_ZPP_Listener;
var ZNPNode_ZPP_ColArbiter = zpp_nape.util.ZNPNode_ZPP_ColArbiter = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_ColArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ColArbiter"];
ZNPNode_ZPP_ColArbiter.prototype.next = null;
ZNPNode_ZPP_ColArbiter.prototype.alloc = function() {
};
ZNPNode_ZPP_ColArbiter.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_ColArbiter.prototype.elt = null;
ZNPNode_ZPP_ColArbiter.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_ColArbiter.prototype.__class__ = ZNPNode_ZPP_ColArbiter;
var ZNPNode_ZPP_InteractionGroup = zpp_nape.util.ZNPNode_ZPP_InteractionGroup = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_InteractionGroup.__name__ = ["zpp_nape","util","ZNPNode_ZPP_InteractionGroup"];
ZNPNode_ZPP_InteractionGroup.prototype.next = null;
ZNPNode_ZPP_InteractionGroup.prototype.alloc = function() {
};
ZNPNode_ZPP_InteractionGroup.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_InteractionGroup.prototype.elt = null;
ZNPNode_ZPP_InteractionGroup.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_InteractionGroup.prototype.__class__ = ZNPNode_ZPP_InteractionGroup;
var ZNPNode_ZPP_ToiEvent = zpp_nape.util.ZNPNode_ZPP_ToiEvent = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_ToiEvent.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ToiEvent"];
ZNPNode_ZPP_ToiEvent.prototype.next = null;
ZNPNode_ZPP_ToiEvent.prototype.alloc = function() {
};
ZNPNode_ZPP_ToiEvent.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_ToiEvent.prototype.elt = null;
ZNPNode_ZPP_ToiEvent.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_ToiEvent.prototype.__class__ = ZNPNode_ZPP_ToiEvent;
var ZNPNode_ConvexResult = zpp_nape.util.ZNPNode_ConvexResult = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ConvexResult.__name__ = ["zpp_nape","util","ZNPNode_ConvexResult"];
ZNPNode_ConvexResult.prototype.next = null;
ZNPNode_ConvexResult.prototype.alloc = function() {
};
ZNPNode_ConvexResult.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ConvexResult.prototype.elt = null;
ZNPNode_ConvexResult.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ConvexResult.prototype.__class__ = ZNPNode_ConvexResult;
var ZNPNode_ZPP_GeomPoly = zpp_nape.util.ZNPNode_ZPP_GeomPoly = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_ZPP_GeomPoly.__name__ = ["zpp_nape","util","ZNPNode_ZPP_GeomPoly"];
ZNPNode_ZPP_GeomPoly.prototype.next = null;
ZNPNode_ZPP_GeomPoly.prototype.alloc = function() {
};
ZNPNode_ZPP_GeomPoly.prototype.free = function() {
	this.elt = null;
};
ZNPNode_ZPP_GeomPoly.prototype.elt = null;
ZNPNode_ZPP_GeomPoly.prototype.elem = function() {
	return this.elt;
};
ZNPNode_ZPP_GeomPoly.prototype.__class__ = ZNPNode_ZPP_GeomPoly;
var ZNPNode_RayResult = zpp_nape.util.ZNPNode_RayResult = function() {
	this.elt = null;
	this.next = null;
};
ZNPNode_RayResult.__name__ = ["zpp_nape","util","ZNPNode_RayResult"];
ZNPNode_RayResult.prototype.next = null;
ZNPNode_RayResult.prototype.alloc = function() {
};
ZNPNode_RayResult.prototype.free = function() {
	this.elt = null;
};
ZNPNode_RayResult.prototype.elt = null;
ZNPNode_RayResult.prototype.elem = function() {
	return this.elt;
};
ZNPNode_RayResult.prototype.__class__ = ZNPNode_RayResult;
var ZPP_MixVec2List = zpp_nape.util.ZPP_MixVec2List = function() {
	this.at_index = 0;
	this.at_ite = null;
	this.zip_length = false;
	this._length = 0;
	this.inner = null;
	Vec2List.call(this);
	this.at_ite = null;
	this.at_index = 0;
	this.zip_length = true;
	this._length = 0;
};
ZPP_MixVec2List.__name__ = ["zpp_nape","util","ZPP_MixVec2List"];
ZPP_MixVec2List.__super__ = Vec2List;
// for(var k in Vec2List.prototype ) ZPP_MixVec2List.prototype[k] = Vec2List.prototype[k];
ZPP_MixVec2List.prototype = Object.create(Vec2List.prototype);
ZPP_MixVec2List.get = function(list,immutable) {
	if(immutable == null) {
		immutable = false;
	}
	var ret = new ZPP_MixVec2List();
	ret.inner = list;
	ret.zpp_inner.immutable = immutable;
	return ret;
};
ZPP_MixVec2List.prototype.inner = null;
ZPP_MixVec2List.prototype._length = null;
ZPP_MixVec2List.prototype.zip_length = null;
ZPP_MixVec2List.prototype.at_ite = null;
ZPP_MixVec2List.prototype.at_index = null;
ZPP_MixVec2List.prototype.zpp_gl = function() {
	this.zpp_vm();
	if(this.zip_length) {
		this._length = 0;
		var cx_ite = this.inner.next;
		while(cx_ite != null) {
			this._length++;
			cx_ite = cx_ite.next;
		}
		this.zip_length = false;
	}
	return this._length;
};
ZPP_MixVec2List.prototype.zpp_vm = function() {
	this.zpp_inner.validate();
	if(this.inner.modified) {
		this.zip_length = true;
		this._length = 0;
		this.at_ite = null;
	}
};
ZPP_MixVec2List.prototype.at = function(index) {
	this.zpp_vm();
	if(index < 0 || index >= this.zpp_gl()) {
		throw new js._Boot.HaxeError("Error: Index out of bounds");
	}
	if(this.zpp_inner.reverse_flag) {
		index = this.zpp_gl() - 1 - index;
	}
	if(index < this.at_index || this.at_ite == null) {
		this.at_index = 0;
		this.at_ite = this.inner.next;
		while(true) break;
	}
	while(this.at_index != index) {
		this.at_index++;
		this.at_ite = this.at_ite.next;
		while(true) break;
	}
	var _this = this.at_ite;
	if(_this.outer == null) {
		_this.outer = new Vec2();
		var o = _this.outer.zpp_inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = o;
		_this.outer.zpp_inner = _this;
	}
	return _this.outer;
};
ZPP_MixVec2List.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_vm();
	if(obj.zpp_inner._inuse) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " is already in use");
	}
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			this.inner.add(obj.zpp_inner);
		} else {
			this.inner.insert(this.inner.iterator_at(this.zpp_gl() - 1),obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
ZPP_MixVec2List.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_vm();
	if(obj.zpp_inner._inuse) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + " is already in use");
	}
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			this.inner.insert(this.inner.iterator_at(this.zpp_gl() - 1),obj.zpp_inner);
		} else {
			this.inner.add(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) {
			this.zpp_inner.post_adder(obj);
		}
	}
	return cont;
};
ZPP_MixVec2List.prototype.pop = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.empty()) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_vm();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.inner.next;
		if(ret.outer == null) {
			ret.outer = new Vec2();
			var o = ret.outer.zpp_inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o._isimmutable = null;
			o._validate = null;
			o._invalidate = null;
			o.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = o;
			ret.outer.zpp_inner = ret;
		}
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.inner.pop();
		}
	} else {
		if(this.at_ite != null && this.at_ite.next == null) {
			this.at_ite = null;
		}
		var ite = this.zpp_gl() == 1?null:this.inner.iterator_at(this.zpp_gl() - 2);
		if(ite == null) {
			ret = this.inner.next;
		} else {
			ret = ite.next;
		}
		if(ret.outer == null) {
			ret.outer = new Vec2();
			var o1 = ret.outer.zpp_inner;
			if(o1.outer != null) {
				o1.outer.zpp_inner = null;
				o1.outer = null;
			}
			o1._isimmutable = null;
			o1._validate = null;
			o1._invalidate = null;
			o1.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = o1;
			ret.outer.zpp_inner = ret;
		}
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.inner.erase(ite);
		}
	}
	this.zpp_inner.invalidate();
	if(ret.outer == null) {
		ret.outer = new Vec2();
		var o2 = ret.outer.zpp_inner;
		if(o2.outer != null) {
			o2.outer.zpp_inner = null;
			o2.outer = null;
		}
		o2._isimmutable = null;
		o2._validate = null;
		o2._invalidate = null;
		o2.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = o2;
		ret.outer.zpp_inner = ret;
	}
	return ret.outer;
};
ZPP_MixVec2List.prototype.shift = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	if(this.empty()) {
		throw new js._Boot.HaxeError("Error: Cannot remove from empty list");
	}
	this.zpp_vm();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.at_ite != null && this.at_ite.next == null) {
			this.at_ite = null;
		}
		var ite = this.zpp_gl() == 1?null:this.inner.iterator_at(this.zpp_gl() - 2);
		if(ite == null) {
			ret = this.inner.next;
		} else {
			ret = ite.next;
		}
		if(ret.outer == null) {
			ret.outer = new Vec2();
			var o = ret.outer.zpp_inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o._isimmutable = null;
			o._validate = null;
			o._invalidate = null;
			o.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = o;
			ret.outer.zpp_inner = ret;
		}
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx);
		}
		if(!this.zpp_inner.dontremove) {
			this.inner.erase(ite);
		}
	} else {
		ret = this.inner.next;
		if(ret.outer == null) {
			ret.outer = new Vec2();
			var o1 = ret.outer.zpp_inner;
			if(o1.outer != null) {
				o1.outer.zpp_inner = null;
				o1.outer = null;
			}
			o1._isimmutable = null;
			o1._validate = null;
			o1._invalidate = null;
			o1.next = ZPP_Vec2.zpp_pool;
			ZPP_Vec2.zpp_pool = o1;
			ret.outer.zpp_inner = ret;
		}
		var retx1 = ret.outer;
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(retx1);
		}
		if(!this.zpp_inner.dontremove) {
			this.inner.pop();
		}
	}
	this.zpp_inner.invalidate();
	if(ret.outer == null) {
		ret.outer = new Vec2();
		var o2 = ret.outer.zpp_inner;
		if(o2.outer != null) {
			o2.outer.zpp_inner = null;
			o2.outer = null;
		}
		o2._isimmutable = null;
		o2._validate = null;
		o2._invalidate = null;
		o2.next = ZPP_Vec2.zpp_pool;
		ZPP_Vec2.zpp_pool = o2;
		ret.outer.zpp_inner = ret;
	}
	return ret.outer;
};
ZPP_MixVec2List.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + "List is immutable");
	}
	this.zpp_inner.modify_test();
	this.zpp_vm();
	var ret;
	ret = false;
	var cx_ite = this.inner.next;
	while(cx_ite != null) {
		if(obj.zpp_inner == cx_ite) {
			ret = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(ret) {
		if(this.zpp_inner.subber != null) {
			this.zpp_inner.subber(obj);
		}
		if(!this.zpp_inner.dontremove) {
			this.inner.remove(obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
	}
	return ret;
};
ZPP_MixVec2List.prototype.clear = function() {
	if(this.zpp_inner.immutable) {
		throw new js._Boot.HaxeError("Error: " + "Vec2" + "List is immutable");
	}
	if(this.zpp_inner.reverse_flag) {
		while(!this.empty()) this.pop();
	} else {
		while(!this.empty()) this.shift();
	}
};
ZPP_MixVec2List.prototype.__class__ = ZPP_MixVec2List;
var ZPP_ConstraintList = zpp_nape.util.ZPP_ConstraintList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new ZNPList_ZPP_Constraint();
	this._invalidated = true;
};
ZPP_ConstraintList.__name__ = ["zpp_nape","util","ZPP_ConstraintList"];
ZPP_ConstraintList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new ConstraintList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
ZPP_ConstraintList.prototype.outer = null;
ZPP_ConstraintList.prototype.inner = null;
ZPP_ConstraintList.prototype.immutable = null;
ZPP_ConstraintList.prototype._invalidated = null;
ZPP_ConstraintList.prototype._invalidate = null;
ZPP_ConstraintList.prototype._validate = null;
ZPP_ConstraintList.prototype._modifiable = null;
ZPP_ConstraintList.prototype.adder = null;
ZPP_ConstraintList.prototype.post_adder = null;
ZPP_ConstraintList.prototype.subber = null;
ZPP_ConstraintList.prototype.dontremove = null;
ZPP_ConstraintList.prototype.reverse_flag = null;
ZPP_ConstraintList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) {
			this.push_ite = null;
		}
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
ZPP_ConstraintList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
ZPP_ConstraintList.prototype.modify_test = function() {
	if(this._modifiable != null) {
		this._modifiable();
	}
};
ZPP_ConstraintList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) {
			this._validate();
		}
	}
};
ZPP_ConstraintList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) {
		this._invalidate(this);
	}
};
ZPP_ConstraintList.prototype.at_index = null;
ZPP_ConstraintList.prototype.at_ite = null;
ZPP_ConstraintList.prototype.push_ite = null;
ZPP_ConstraintList.prototype.zip_length = null;
ZPP_ConstraintList.prototype.user_length = null;
ZPP_ConstraintList.prototype.__class__ = ZPP_ConstraintList;
var ZPP_BodyList = zpp_nape.util.ZPP_BodyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new ZNPList_ZPP_Body();
	this._invalidated = true;
};
ZPP_BodyList.__name__ = ["zpp_nape","util","ZPP_BodyList"];
ZPP_BodyList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new BodyList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
ZPP_BodyList.prototype.outer = null;
ZPP_BodyList.prototype.inner = null;
ZPP_BodyList.prototype.immutable = null;
ZPP_BodyList.prototype._invalidated = null;
ZPP_BodyList.prototype._invalidate = null;
ZPP_BodyList.prototype._validate = null;
ZPP_BodyList.prototype._modifiable = null;
ZPP_BodyList.prototype.adder = null;
ZPP_BodyList.prototype.post_adder = null;
ZPP_BodyList.prototype.subber = null;
ZPP_BodyList.prototype.dontremove = null;
ZPP_BodyList.prototype.reverse_flag = null;
ZPP_BodyList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) {
			this.push_ite = null;
		}
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
ZPP_BodyList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
ZPP_BodyList.prototype.modify_test = function() {
	if(this._modifiable != null) {
		this._modifiable();
	}
};
ZPP_BodyList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) {
			this._validate();
		}
	}
};
ZPP_BodyList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) {
		this._invalidate(this);
	}
};
ZPP_BodyList.prototype.at_index = null;
ZPP_BodyList.prototype.at_ite = null;
ZPP_BodyList.prototype.push_ite = null;
ZPP_BodyList.prototype.zip_length = null;
ZPP_BodyList.prototype.user_length = null;
ZPP_BodyList.prototype.__class__ = ZPP_BodyList;
var ZPP_InteractorList = zpp_nape.util.ZPP_InteractorList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new ZNPList_ZPP_Interactor();
	this._invalidated = true;
};
ZPP_InteractorList.__name__ = ["zpp_nape","util","ZPP_InteractorList"];
ZPP_InteractorList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new InteractorList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
ZPP_InteractorList.prototype.outer = null;
ZPP_InteractorList.prototype.inner = null;
ZPP_InteractorList.prototype.immutable = null;
ZPP_InteractorList.prototype._invalidated = null;
ZPP_InteractorList.prototype._invalidate = null;
ZPP_InteractorList.prototype._validate = null;
ZPP_InteractorList.prototype._modifiable = null;
ZPP_InteractorList.prototype.adder = null;
ZPP_InteractorList.prototype.post_adder = null;
ZPP_InteractorList.prototype.subber = null;
ZPP_InteractorList.prototype.dontremove = null;
ZPP_InteractorList.prototype.reverse_flag = null;
ZPP_InteractorList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) {
			this.push_ite = null;
		}
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
ZPP_InteractorList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
ZPP_InteractorList.prototype.modify_test = function() {
	if(this._modifiable != null) {
		this._modifiable();
	}
};
ZPP_InteractorList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) {
			this._validate();
		}
	}
};
ZPP_InteractorList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) {
		this._invalidate(this);
	}
};
ZPP_InteractorList.prototype.at_index = null;
ZPP_InteractorList.prototype.at_ite = null;
ZPP_InteractorList.prototype.push_ite = null;
ZPP_InteractorList.prototype.zip_length = null;
ZPP_InteractorList.prototype.user_length = null;
ZPP_InteractorList.prototype.__class__ = ZPP_InteractorList;
var ZPP_CompoundList = zpp_nape.util.ZPP_CompoundList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new ZNPList_ZPP_Compound();
	this._invalidated = true;
};
ZPP_CompoundList.__name__ = ["zpp_nape","util","ZPP_CompoundList"];
ZPP_CompoundList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new CompoundList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
ZPP_CompoundList.prototype.outer = null;
ZPP_CompoundList.prototype.inner = null;
ZPP_CompoundList.prototype.immutable = null;
ZPP_CompoundList.prototype._invalidated = null;
ZPP_CompoundList.prototype._invalidate = null;
ZPP_CompoundList.prototype._validate = null;
ZPP_CompoundList.prototype._modifiable = null;
ZPP_CompoundList.prototype.adder = null;
ZPP_CompoundList.prototype.post_adder = null;
ZPP_CompoundList.prototype.subber = null;
ZPP_CompoundList.prototype.dontremove = null;
ZPP_CompoundList.prototype.reverse_flag = null;
ZPP_CompoundList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) {
			this.push_ite = null;
		}
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
ZPP_CompoundList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
ZPP_CompoundList.prototype.modify_test = function() {
	if(this._modifiable != null) {
		this._modifiable();
	}
};
ZPP_CompoundList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) {
			this._validate();
		}
	}
};
ZPP_CompoundList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) {
		this._invalidate(this);
	}
};
ZPP_CompoundList.prototype.at_index = null;
ZPP_CompoundList.prototype.at_ite = null;
ZPP_CompoundList.prototype.push_ite = null;
ZPP_CompoundList.prototype.zip_length = null;
ZPP_CompoundList.prototype.user_length = null;
ZPP_CompoundList.prototype.__class__ = ZPP_CompoundList;
var ZPP_ListenerList = zpp_nape.util.ZPP_ListenerList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new ZNPList_ZPP_Listener();
	this._invalidated = true;
};
ZPP_ListenerList.__name__ = ["zpp_nape","util","ZPP_ListenerList"];
ZPP_ListenerList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new ListenerList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
ZPP_ListenerList.prototype.outer = null;
ZPP_ListenerList.prototype.inner = null;
ZPP_ListenerList.prototype.immutable = null;
ZPP_ListenerList.prototype._invalidated = null;
ZPP_ListenerList.prototype._invalidate = null;
ZPP_ListenerList.prototype._validate = null;
ZPP_ListenerList.prototype._modifiable = null;
ZPP_ListenerList.prototype.adder = null;
ZPP_ListenerList.prototype.post_adder = null;
ZPP_ListenerList.prototype.subber = null;
ZPP_ListenerList.prototype.dontremove = null;
ZPP_ListenerList.prototype.reverse_flag = null;
ZPP_ListenerList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) {
			this.push_ite = null;
		}
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
ZPP_ListenerList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
ZPP_ListenerList.prototype.modify_test = function() {
	if(this._modifiable != null) {
		this._modifiable();
	}
};
ZPP_ListenerList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) {
			this._validate();
		}
	}
};
ZPP_ListenerList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) {
		this._invalidate(this);
	}
};
ZPP_ListenerList.prototype.at_index = null;
ZPP_ListenerList.prototype.at_ite = null;
ZPP_ListenerList.prototype.push_ite = null;
ZPP_ListenerList.prototype.zip_length = null;
ZPP_ListenerList.prototype.user_length = null;
ZPP_ListenerList.prototype.__class__ = ZPP_ListenerList;
var ZPP_CbTypeList = zpp_nape.util.ZPP_CbTypeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new ZNPList_ZPP_CbType();
	this._invalidated = true;
};
ZPP_CbTypeList.__name__ = ["zpp_nape","util","ZPP_CbTypeList"];
ZPP_CbTypeList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new CbTypeList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
ZPP_CbTypeList.prototype.outer = null;
ZPP_CbTypeList.prototype.inner = null;
ZPP_CbTypeList.prototype.immutable = null;
ZPP_CbTypeList.prototype._invalidated = null;
ZPP_CbTypeList.prototype._invalidate = null;
ZPP_CbTypeList.prototype._validate = null;
ZPP_CbTypeList.prototype._modifiable = null;
ZPP_CbTypeList.prototype.adder = null;
ZPP_CbTypeList.prototype.post_adder = null;
ZPP_CbTypeList.prototype.subber = null;
ZPP_CbTypeList.prototype.dontremove = null;
ZPP_CbTypeList.prototype.reverse_flag = null;
ZPP_CbTypeList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) {
			this.push_ite = null;
		}
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
ZPP_CbTypeList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
ZPP_CbTypeList.prototype.modify_test = function() {
	if(this._modifiable != null) {
		this._modifiable();
	}
};
ZPP_CbTypeList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) {
			this._validate();
		}
	}
};
ZPP_CbTypeList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) {
		this._invalidate(this);
	}
};
ZPP_CbTypeList.prototype.at_index = null;
ZPP_CbTypeList.prototype.at_ite = null;
ZPP_CbTypeList.prototype.push_ite = null;
ZPP_CbTypeList.prototype.zip_length = null;
ZPP_CbTypeList.prototype.user_length = null;
ZPP_CbTypeList.prototype.__class__ = ZPP_CbTypeList;
var ZPP_Vec2List = zpp_nape.util.ZPP_Vec2List = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new ZNPList_ZPP_Vec2();
	this._invalidated = true;
};
ZPP_Vec2List.__name__ = ["zpp_nape","util","ZPP_Vec2List"];
ZPP_Vec2List.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new Vec2List();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
ZPP_Vec2List.prototype.outer = null;
ZPP_Vec2List.prototype.inner = null;
ZPP_Vec2List.prototype.immutable = null;
ZPP_Vec2List.prototype._invalidated = null;
ZPP_Vec2List.prototype._invalidate = null;
ZPP_Vec2List.prototype._validate = null;
ZPP_Vec2List.prototype._modifiable = null;
ZPP_Vec2List.prototype.adder = null;
ZPP_Vec2List.prototype.post_adder = null;
ZPP_Vec2List.prototype.subber = null;
ZPP_Vec2List.prototype.dontremove = null;
ZPP_Vec2List.prototype.reverse_flag = null;
ZPP_Vec2List.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) {
			this.push_ite = null;
		}
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
ZPP_Vec2List.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
ZPP_Vec2List.prototype.modify_test = function() {
	if(this._modifiable != null) {
		this._modifiable();
	}
};
ZPP_Vec2List.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) {
			this._validate();
		}
	}
};
ZPP_Vec2List.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) {
		this._invalidate(this);
	}
};
ZPP_Vec2List.prototype.at_index = null;
ZPP_Vec2List.prototype.at_ite = null;
ZPP_Vec2List.prototype.push_ite = null;
ZPP_Vec2List.prototype.zip_length = null;
ZPP_Vec2List.prototype.user_length = null;
ZPP_Vec2List.prototype.__class__ = ZPP_Vec2List;
var ZPP_GeomPolyList = zpp_nape.util.ZPP_GeomPolyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new ZNPList_ZPP_GeomPoly();
	this._invalidated = true;
};
ZPP_GeomPolyList.__name__ = ["zpp_nape","util","ZPP_GeomPolyList"];
ZPP_GeomPolyList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new GeomPolyList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
ZPP_GeomPolyList.prototype.outer = null;
ZPP_GeomPolyList.prototype.inner = null;
ZPP_GeomPolyList.prototype.immutable = null;
ZPP_GeomPolyList.prototype._invalidated = null;
ZPP_GeomPolyList.prototype._invalidate = null;
ZPP_GeomPolyList.prototype._validate = null;
ZPP_GeomPolyList.prototype._modifiable = null;
ZPP_GeomPolyList.prototype.adder = null;
ZPP_GeomPolyList.prototype.post_adder = null;
ZPP_GeomPolyList.prototype.subber = null;
ZPP_GeomPolyList.prototype.dontremove = null;
ZPP_GeomPolyList.prototype.reverse_flag = null;
ZPP_GeomPolyList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) {
			this.push_ite = null;
		}
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
ZPP_GeomPolyList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
ZPP_GeomPolyList.prototype.modify_test = function() {
	if(this._modifiable != null) {
		this._modifiable();
	}
};
ZPP_GeomPolyList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) {
			this._validate();
		}
	}
};
ZPP_GeomPolyList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) {
		this._invalidate(this);
	}
};
ZPP_GeomPolyList.prototype.at_index = null;
ZPP_GeomPolyList.prototype.at_ite = null;
ZPP_GeomPolyList.prototype.push_ite = null;
ZPP_GeomPolyList.prototype.zip_length = null;
ZPP_GeomPolyList.prototype.user_length = null;
ZPP_GeomPolyList.prototype.__class__ = ZPP_GeomPolyList;
var ZPP_RayResultList = zpp_nape.util.ZPP_RayResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new ZNPList_RayResult();
	this._invalidated = true;
};
ZPP_RayResultList.__name__ = ["zpp_nape","util","ZPP_RayResultList"];
ZPP_RayResultList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new RayResultList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
ZPP_RayResultList.prototype.outer = null;
ZPP_RayResultList.prototype.inner = null;
ZPP_RayResultList.prototype.immutable = null;
ZPP_RayResultList.prototype._invalidated = null;
ZPP_RayResultList.prototype._invalidate = null;
ZPP_RayResultList.prototype._validate = null;
ZPP_RayResultList.prototype._modifiable = null;
ZPP_RayResultList.prototype.adder = null;
ZPP_RayResultList.prototype.post_adder = null;
ZPP_RayResultList.prototype.subber = null;
ZPP_RayResultList.prototype.dontremove = null;
ZPP_RayResultList.prototype.reverse_flag = null;
ZPP_RayResultList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) {
			this.push_ite = null;
		}
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
ZPP_RayResultList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
ZPP_RayResultList.prototype.modify_test = function() {
	if(this._modifiable != null) {
		this._modifiable();
	}
};
ZPP_RayResultList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) {
			this._validate();
		}
	}
};
ZPP_RayResultList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) {
		this._invalidate(this);
	}
};
ZPP_RayResultList.prototype.at_index = null;
ZPP_RayResultList.prototype.at_ite = null;
ZPP_RayResultList.prototype.push_ite = null;
ZPP_RayResultList.prototype.zip_length = null;
ZPP_RayResultList.prototype.user_length = null;
ZPP_RayResultList.prototype.__class__ = ZPP_RayResultList;
var ZPP_ConvexResultList = zpp_nape.util.ZPP_ConvexResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new ZNPList_ConvexResult();
	this._invalidated = true;
};
ZPP_ConvexResultList.__name__ = ["zpp_nape","util","ZPP_ConvexResultList"];
ZPP_ConvexResultList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new ConvexResultList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
ZPP_ConvexResultList.prototype.outer = null;
ZPP_ConvexResultList.prototype.inner = null;
ZPP_ConvexResultList.prototype.immutable = null;
ZPP_ConvexResultList.prototype._invalidated = null;
ZPP_ConvexResultList.prototype._invalidate = null;
ZPP_ConvexResultList.prototype._validate = null;
ZPP_ConvexResultList.prototype._modifiable = null;
ZPP_ConvexResultList.prototype.adder = null;
ZPP_ConvexResultList.prototype.post_adder = null;
ZPP_ConvexResultList.prototype.subber = null;
ZPP_ConvexResultList.prototype.dontremove = null;
ZPP_ConvexResultList.prototype.reverse_flag = null;
ZPP_ConvexResultList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) {
			this.push_ite = null;
		}
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
ZPP_ConvexResultList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
ZPP_ConvexResultList.prototype.modify_test = function() {
	if(this._modifiable != null) {
		this._modifiable();
	}
};
ZPP_ConvexResultList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) {
			this._validate();
		}
	}
};
ZPP_ConvexResultList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) {
		this._invalidate(this);
	}
};
ZPP_ConvexResultList.prototype.at_index = null;
ZPP_ConvexResultList.prototype.at_ite = null;
ZPP_ConvexResultList.prototype.push_ite = null;
ZPP_ConvexResultList.prototype.zip_length = null;
ZPP_ConvexResultList.prototype.user_length = null;
ZPP_ConvexResultList.prototype.__class__ = ZPP_ConvexResultList;
var ZPP_EdgeList = zpp_nape.util.ZPP_EdgeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new ZNPList_ZPP_Edge();
	this._invalidated = true;
};
ZPP_EdgeList.__name__ = ["zpp_nape","util","ZPP_EdgeList"];
ZPP_EdgeList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new EdgeList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
ZPP_EdgeList.prototype.outer = null;
ZPP_EdgeList.prototype.inner = null;
ZPP_EdgeList.prototype.immutable = null;
ZPP_EdgeList.prototype._invalidated = null;
ZPP_EdgeList.prototype._invalidate = null;
ZPP_EdgeList.prototype._validate = null;
ZPP_EdgeList.prototype._modifiable = null;
ZPP_EdgeList.prototype.adder = null;
ZPP_EdgeList.prototype.post_adder = null;
ZPP_EdgeList.prototype.subber = null;
ZPP_EdgeList.prototype.dontremove = null;
ZPP_EdgeList.prototype.reverse_flag = null;
ZPP_EdgeList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) {
			this.push_ite = null;
		}
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
ZPP_EdgeList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
ZPP_EdgeList.prototype.modify_test = function() {
	if(this._modifiable != null) {
		this._modifiable();
	}
};
ZPP_EdgeList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) {
			this._validate();
		}
	}
};
ZPP_EdgeList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) {
		this._invalidate(this);
	}
};
ZPP_EdgeList.prototype.at_index = null;
ZPP_EdgeList.prototype.at_ite = null;
ZPP_EdgeList.prototype.push_ite = null;
ZPP_EdgeList.prototype.zip_length = null;
ZPP_EdgeList.prototype.user_length = null;
ZPP_EdgeList.prototype.__class__ = ZPP_EdgeList;
var ZPP_ShapeList = zpp_nape.util.ZPP_ShapeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new ZNPList_ZPP_Shape();
	this._invalidated = true;
};
ZPP_ShapeList.__name__ = ["zpp_nape","util","ZPP_ShapeList"];
ZPP_ShapeList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new ShapeList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
ZPP_ShapeList.prototype.outer = null;
ZPP_ShapeList.prototype.inner = null;
ZPP_ShapeList.prototype.immutable = null;
ZPP_ShapeList.prototype._invalidated = null;
ZPP_ShapeList.prototype._invalidate = null;
ZPP_ShapeList.prototype._validate = null;
ZPP_ShapeList.prototype._modifiable = null;
ZPP_ShapeList.prototype.adder = null;
ZPP_ShapeList.prototype.post_adder = null;
ZPP_ShapeList.prototype.subber = null;
ZPP_ShapeList.prototype.dontremove = null;
ZPP_ShapeList.prototype.reverse_flag = null;
ZPP_ShapeList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) {
			this.push_ite = null;
		}
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
ZPP_ShapeList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
ZPP_ShapeList.prototype.modify_test = function() {
	if(this._modifiable != null) {
		this._modifiable();
	}
};
ZPP_ShapeList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) {
			this._validate();
		}
	}
};
ZPP_ShapeList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) {
		this._invalidate(this);
	}
};
ZPP_ShapeList.prototype.at_index = null;
ZPP_ShapeList.prototype.at_ite = null;
ZPP_ShapeList.prototype.push_ite = null;
ZPP_ShapeList.prototype.zip_length = null;
ZPP_ShapeList.prototype.user_length = null;
ZPP_ShapeList.prototype.__class__ = ZPP_ShapeList;
var ZPP_InteractionGroupList = zpp_nape.util.ZPP_InteractionGroupList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new ZNPList_ZPP_InteractionGroup();
	this._invalidated = true;
};
ZPP_InteractionGroupList.__name__ = ["zpp_nape","util","ZPP_InteractionGroupList"];
ZPP_InteractionGroupList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new InteractionGroupList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
ZPP_InteractionGroupList.prototype.outer = null;
ZPP_InteractionGroupList.prototype.inner = null;
ZPP_InteractionGroupList.prototype.immutable = null;
ZPP_InteractionGroupList.prototype._invalidated = null;
ZPP_InteractionGroupList.prototype._invalidate = null;
ZPP_InteractionGroupList.prototype._validate = null;
ZPP_InteractionGroupList.prototype._modifiable = null;
ZPP_InteractionGroupList.prototype.adder = null;
ZPP_InteractionGroupList.prototype.post_adder = null;
ZPP_InteractionGroupList.prototype.subber = null;
ZPP_InteractionGroupList.prototype.dontremove = null;
ZPP_InteractionGroupList.prototype.reverse_flag = null;
ZPP_InteractionGroupList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) {
			this.push_ite = null;
		}
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
ZPP_InteractionGroupList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
ZPP_InteractionGroupList.prototype.modify_test = function() {
	if(this._modifiable != null) {
		this._modifiable();
	}
};
ZPP_InteractionGroupList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) {
			this._validate();
		}
	}
};
ZPP_InteractionGroupList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) {
		this._invalidate(this);
	}
};
ZPP_InteractionGroupList.prototype.at_index = null;
ZPP_InteractionGroupList.prototype.at_ite = null;
ZPP_InteractionGroupList.prototype.push_ite = null;
ZPP_InteractionGroupList.prototype.zip_length = null;
ZPP_InteractionGroupList.prototype.user_length = null;
ZPP_InteractionGroupList.prototype.__class__ = ZPP_InteractionGroupList;
var ZPP_ArbiterList = zpp_nape.util.ZPP_ArbiterList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new ZNPList_ZPP_Arbiter();
	this._invalidated = true;
};
ZPP_ArbiterList.__name__ = ["zpp_nape","util","ZPP_ArbiterList"];
ZPP_ArbiterList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new ArbiterList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
ZPP_ArbiterList.prototype.outer = null;
ZPP_ArbiterList.prototype.inner = null;
ZPP_ArbiterList.prototype.immutable = null;
ZPP_ArbiterList.prototype._invalidated = null;
ZPP_ArbiterList.prototype._invalidate = null;
ZPP_ArbiterList.prototype._validate = null;
ZPP_ArbiterList.prototype._modifiable = null;
ZPP_ArbiterList.prototype.adder = null;
ZPP_ArbiterList.prototype.post_adder = null;
ZPP_ArbiterList.prototype.subber = null;
ZPP_ArbiterList.prototype.dontremove = null;
ZPP_ArbiterList.prototype.reverse_flag = null;
ZPP_ArbiterList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) {
			this.push_ite = null;
		}
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
ZPP_ArbiterList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
ZPP_ArbiterList.prototype.modify_test = function() {
	if(this._modifiable != null) {
		this._modifiable();
	}
};
ZPP_ArbiterList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) {
			this._validate();
		}
	}
};
ZPP_ArbiterList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) {
		this._invalidate(this);
	}
};
ZPP_ArbiterList.prototype.at_index = null;
ZPP_ArbiterList.prototype.at_ite = null;
ZPP_ArbiterList.prototype.push_ite = null;
ZPP_ArbiterList.prototype.zip_length = null;
ZPP_ArbiterList.prototype.user_length = null;
ZPP_ArbiterList.prototype.__class__ = ZPP_ArbiterList;
var ZPP_ContactList = zpp_nape.util.ZPP_ContactList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new ZPP_Contact();
	this._invalidated = true;
};
ZPP_ContactList.__name__ = ["zpp_nape","util","ZPP_ContactList"];
ZPP_ContactList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new ContactList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
ZPP_ContactList.prototype.outer = null;
ZPP_ContactList.prototype.inner = null;
ZPP_ContactList.prototype.immutable = null;
ZPP_ContactList.prototype._invalidated = null;
ZPP_ContactList.prototype._invalidate = null;
ZPP_ContactList.prototype._validate = null;
ZPP_ContactList.prototype._modifiable = null;
ZPP_ContactList.prototype.adder = null;
ZPP_ContactList.prototype.post_adder = null;
ZPP_ContactList.prototype.subber = null;
ZPP_ContactList.prototype.dontremove = null;
ZPP_ContactList.prototype.reverse_flag = null;
ZPP_ContactList.prototype.valmod = function() {
	this.validate();
	if(this.inner.modified) {
		if(this.inner.pushmod) {
			this.push_ite = null;
		}
		this.at_ite = null;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.zip_length = true;
	}
};
ZPP_ContactList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
};
ZPP_ContactList.prototype.modify_test = function() {
	if(this._modifiable != null) {
		this._modifiable();
	}
};
ZPP_ContactList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) {
			this._validate();
		}
	}
};
ZPP_ContactList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) {
		this._invalidate(this);
	}
};
ZPP_ContactList.prototype.at_index = null;
ZPP_ContactList.prototype.at_ite = null;
ZPP_ContactList.prototype.push_ite = null;
ZPP_ContactList.prototype.zip_length = null;
ZPP_ContactList.prototype.user_length = null;
ZPP_ContactList.prototype.__class__ = ZPP_ContactList;
var ZPP_Math = zpp_nape.util.ZPP_Math = function() { };
ZPP_Math.__name__ = ["zpp_nape","util","ZPP_Math"];
ZPP_Math.sqrt = function(x) {
	return Math.sqrt(x);
};
ZPP_Math.invsqrt = function(x) {
	return 1.0 / Math.sqrt(x);
};
ZPP_Math.sqr = function(x) {
	return x * x;
};
ZPP_Math.clamp2 = function(x,a) {
	var a1 = -a;
	if(x < a1) {
		return a1;
	} else if(x > a) {
		return a;
	} else {
		return x;
	}
};
ZPP_Math.clamp = function(x,a,b) {
	if(x < a) {
		return a;
	} else if(x > b) {
		return b;
	} else {
		return x;
	}
};
ZPP_Math.prototype.__class__ = ZPP_Math;
var ZPP_PubPool = zpp_nape.util.ZPP_PubPool = function() { };
ZPP_PubPool.__name__ = ["zpp_nape","util","ZPP_PubPool"];
ZPP_PubPool.prototype.__class__ = ZPP_PubPool;
var ZPP_Set_ZPP_Body = zpp_nape.util.ZPP_Set_ZPP_Body = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
ZPP_Set_ZPP_Body.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_Body"];
ZPP_Set_ZPP_Body.prototype.free = function() {
	this.data = null;
	this.lt = null;
	this.swapped = null;
};
ZPP_Set_ZPP_Body.prototype.alloc = function() {
};
ZPP_Set_ZPP_Body.prototype.lt = null;
ZPP_Set_ZPP_Body.prototype.swapped = null;
ZPP_Set_ZPP_Body.prototype.data = null;
ZPP_Set_ZPP_Body.prototype.prev = null;
ZPP_Set_ZPP_Body.prototype.next = null;
ZPP_Set_ZPP_Body.prototype.parent = null;
ZPP_Set_ZPP_Body.prototype.colour = null;
ZPP_Set_ZPP_Body.prototype.verify = function() {
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			var prei = true;
			if(!this.empty()) {
				var set_ite1 = this.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var j = set_ite1.data;
					if(!prei) {
						if(!this.lt(i,j) && this.lt(j,i)) {
							return false;
						}
					} else if(i == j) {
						prei = false;
					} else if(!this.lt(j,i) && this.lt(i,j)) {
						return false;
					}
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return true;
};
ZPP_Set_ZPP_Body.prototype.empty = function() {
	return this.parent == null;
};
ZPP_Set_ZPP_Body.prototype.singular = function() {
	if(this.parent != null && this.parent.prev == null) {
		return this.parent.next == null;
	} else {
		return false;
	}
};
ZPP_Set_ZPP_Body.prototype.size = function() {
	var ret = 0;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			++ret;
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
ZPP_Set_ZPP_Body.prototype.has = function(obj) {
	return this.find(obj) != null;
};
ZPP_Set_ZPP_Body.prototype.find = function(obj) {
	var cur = this.parent;
	while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) {
		cur = cur.prev;
	} else {
		cur = cur.next;
	}
	return cur;
};
ZPP_Set_ZPP_Body.prototype.has_weak = function(obj) {
	return this.find_weak(obj) != null;
};
ZPP_Set_ZPP_Body.prototype.find_weak = function(obj) {
	var cur = this.parent;
	while(cur != null) if(this.lt(obj,cur.data)) {
		cur = cur.prev;
	} else if(this.lt(cur.data,obj)) {
		cur = cur.next;
	} else {
		break;
	}
	return cur;
};
ZPP_Set_ZPP_Body.prototype.lower_bound = function(obj) {
	var ret = null;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var elt = set_ite.data;
			if(!this.lt(elt,obj)) {
				ret = elt;
				break;
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
ZPP_Set_ZPP_Body.prototype.first = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	return cur.data;
};
ZPP_Set_ZPP_Body.prototype.pop_front = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	var ret = cur.data;
	this.remove_node(cur);
	return ret;
};
ZPP_Set_ZPP_Body.prototype.remove = function(obj) {
	this.remove_node(this.find(obj));
};
ZPP_Set_ZPP_Body.prototype.successor_node = function(cur) {
	if(cur.next != null) {
		cur = cur.next;
		while(cur.prev != null) cur = cur.prev;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.prev != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
ZPP_Set_ZPP_Body.prototype.predecessor_node = function(cur) {
	if(cur.prev != null) {
		cur = cur.prev;
		while(cur.next != null) cur = cur.next;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.next != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
ZPP_Set_ZPP_Body.prototype.successor = function(obj) {
	var node = this.successor_node(this.find(obj));
	if(node == null) {
		return null;
	} else {
		return node.data;
	}
};
ZPP_Set_ZPP_Body.prototype.predecessor = function(obj) {
	var node = this.predecessor_node(this.find(obj));
	if(node == null) {
		return null;
	} else {
		return node.data;
	}
};
ZPP_Set_ZPP_Body.prototype.remove_node = function(cur) {
	if(cur.next != null && cur.prev != null) {
		var sm = cur.next;
		while(sm.prev != null) sm = sm.prev;
		var t = cur.data;
		cur.data = sm.data;
		sm.data = t;
		if(this.swapped != null) {
			this.swapped(cur.data,sm.data);
		}
		cur = sm;
	}
	var child = cur.prev == null?cur.next:cur.prev;
	if(cur.colour == 1) {
		if(cur.prev != null || cur.next != null) {
			child.colour = 1;
		} else if(cur.parent != null) {
			var parent = cur.parent;
			while(true) {
				parent.colour++;
				parent.prev.colour--;
				parent.next.colour--;
				var child1 = parent.prev;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				var child2 = parent.next;
				if(child2.colour == -1) {
					this.__fix_neg_red(child2);
					break;
				} else if(child2.colour == 0) {
					if(child2.prev != null && child2.prev.colour == 0) {
						this.__fix_dbl_red(child2.prev);
						break;
					}
					if(child2.next != null && child2.next.colour == 0) {
						this.__fix_dbl_red(child2.next);
						break;
					}
				}
				if(parent.colour == 2) {
					if(parent.parent == null) {
						parent.colour = 1;
					} else {
						parent = parent.parent;
						continue;
					}
				}
				break;
			}
		}
	}
	var par = cur.parent;
	if(par == null) {
		this.parent = child;
	} else if(par.prev == cur) {
		par.prev = child;
	} else {
		par.next = child;
	}
	if(child != null) {
		child.parent = par;
	}
	cur.parent = cur.prev = cur.next = null;
	var o = cur;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = ZPP_Set_ZPP_Body.zpp_pool;
	ZPP_Set_ZPP_Body.zpp_pool = o;
};
ZPP_Set_ZPP_Body.prototype.clear = function() {
	if(this.parent != null) {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) {
			cur = cur.prev;
		} else if(cur.next != null) {
			cur = cur.next;
		} else {
			var ret = cur.parent;
			if(ret != null) {
				if(cur == ret.prev) {
					ret.prev = null;
				} else {
					ret.next = null;
				}
				cur.parent = null;
			}
			var o = cur;
			o.data = null;
			o.lt = null;
			o.swapped = null;
			o.next = ZPP_Set_ZPP_Body.zpp_pool;
			ZPP_Set_ZPP_Body.zpp_pool = o;
			cur = ret;
		}
		this.parent = null;
	}
};
ZPP_Set_ZPP_Body.prototype.clear_with = function(lambda) {
	if(this.parent == null) {
		return;
	} else {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) {
			cur = cur.prev;
		} else if(cur.next != null) {
			cur = cur.next;
		} else {
			lambda(cur.data);
			var ret = cur.parent;
			if(ret != null) {
				if(cur == ret.prev) {
					ret.prev = null;
				} else {
					ret.next = null;
				}
				cur.parent = null;
			}
			var o = cur;
			o.data = null;
			o.lt = null;
			o.swapped = null;
			o.next = ZPP_Set_ZPP_Body.zpp_pool;
			ZPP_Set_ZPP_Body.zpp_pool = o;
			cur = ret;
		}
		this.parent = null;
	}
};
ZPP_Set_ZPP_Body.prototype.clear_node = function(node,lambda) {
	lambda(node.data);
	var ret = node.parent;
	if(ret != null) {
		if(node == ret.prev) {
			ret.prev = null;
		} else {
			ret.next = null;
		}
		node.parent = null;
	}
	node.data = null;
	node.lt = null;
	node.swapped = null;
	node.next = ZPP_Set_ZPP_Body.zpp_pool;
	ZPP_Set_ZPP_Body.zpp_pool = node;
	return ret;
};
ZPP_Set_ZPP_Body.prototype.__fix_neg_red = function(negred) {
	var parent = negred.parent;
	var child;
	if(parent.prev == negred) {
		var nl = negred.prev;
		var nr = negred.next;
		var trl = nr.prev;
		var trr = nr.next;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		negred.next = trl;
		if(trl != null) {
			trl.parent = negred;
		}
		var t = parent.data;
		parent.data = nr.data;
		nr.data = t;
		if(this.swapped != null) {
			this.swapped(parent.data,nr.data);
		}
		nr.prev = trr;
		if(trr != null) {
			trr.parent = nr;
		}
		nr.next = parent.next;
		if(parent.next != null) {
			parent.next.parent = nr;
		}
		parent.next = nr;
		if(nr != null) {
			nr.parent = parent;
		}
		child = nl;
	} else {
		var nl1 = negred.next;
		var nr1 = negred.prev;
		var trl1 = nr1.next;
		var trr1 = nr1.prev;
		nl1.colour = 0;
		negred.colour = parent.colour = 1;
		negred.prev = trl1;
		if(trl1 != null) {
			trl1.parent = negred;
		}
		var t1 = parent.data;
		parent.data = nr1.data;
		nr1.data = t1;
		if(this.swapped != null) {
			this.swapped(parent.data,nr1.data);
		}
		nr1.next = trr1;
		if(trr1 != null) {
			trr1.parent = nr1;
		}
		nr1.prev = parent.prev;
		if(parent.prev != null) {
			parent.prev.parent = nr1;
		}
		parent.prev = nr1;
		if(nr1 != null) {
			nr1.parent = parent;
		}
		child = nl1;
	}
	if(child.prev != null && child.prev.colour == 0) {
		this.__fix_dbl_red(child.prev);
	} else if(child.next != null && child.next.colour == 0) {
		this.__fix_dbl_red(child.next);
	}
};
ZPP_Set_ZPP_Body.prototype.__fix_dbl_red = function(x) {
	while(true) {
		var par = x.parent;
		var g = par.parent;
		if(g == null) {
			par.colour = 1;
			break;
		}
		var n1;
		var n2;
		var n3;
		var t1;
		var t2;
		var t3;
		var t4;
		if(par == g.prev) {
			n3 = g;
			t4 = g.next;
			if(x == par.prev) {
				n1 = x;
				n2 = par;
				t1 = x.prev;
				t2 = x.next;
				t3 = par.next;
			} else {
				n1 = par;
				n2 = x;
				t1 = par.prev;
				t2 = x.prev;
				t3 = x.next;
			}
		} else {
			n1 = g;
			t1 = g.prev;
			if(x == par.prev) {
				n2 = x;
				n3 = par;
				t2 = x.prev;
				t3 = x.next;
				t4 = par.next;
			} else {
				n2 = par;
				n3 = x;
				t2 = par.prev;
				t3 = x.prev;
				t4 = x.next;
			}
		}
		var par1 = g.parent;
		if(par1 == null) {
			this.parent = n2;
		} else if(par1.prev == g) {
			par1.prev = n2;
		} else {
			par1.next = n2;
		}
		if(n2 != null) {
			n2.parent = par1;
		}
		n1.prev = t1;
		if(t1 != null) {
			t1.parent = n1;
		}
		n1.next = t2;
		if(t2 != null) {
			t2.parent = n1;
		}
		n2.prev = n1;
		if(n1 != null) {
			n1.parent = n2;
		}
		n2.next = n3;
		if(n3 != null) {
			n3.parent = n2;
		}
		n3.prev = t3;
		if(t3 != null) {
			t3.parent = n3;
		}
		n3.next = t4;
		if(t4 != null) {
			t4.parent = n3;
		}
		n2.colour = g.colour - 1;
		n1.colour = 1;
		n3.colour = 1;
		if(n2 == this.parent) {
			this.parent.colour = 1;
		} else if(n2.colour == 0 && n2.parent.colour == 0) {
			x = n2;
			continue;
		}
		break;
	}
};
ZPP_Set_ZPP_Body.prototype.try_insert_bool = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(ZPP_Set_ZPP_Body.zpp_pool == null) {
			x = new ZPP_Set_ZPP_Body();
		} else {
			x = ZPP_Set_ZPP_Body.zpp_pool;
			ZPP_Set_ZPP_Body.zpp_pool = x.next;
			x.next = null;
		}
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(ZPP_Set_ZPP_Body.zpp_pool == null) {
					x = new ZPP_Set_ZPP_Body();
				} else {
					x = ZPP_Set_ZPP_Body.zpp_pool;
					ZPP_Set_ZPP_Body.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(ZPP_Set_ZPP_Body.zpp_pool == null) {
					x = new ZPP_Set_ZPP_Body();
				} else {
					x = ZPP_Set_ZPP_Body.zpp_pool;
					ZPP_Set_ZPP_Body.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.next;
			}
		} else {
			break;
		}
	}
	if(x == null) {
		return false;
	} else {
		if(x.parent == null) {
			x.colour = 1;
		} else {
			x.colour = 0;
			if(x.parent.colour == 0) {
				this.__fix_dbl_red(x);
			}
		}
		return true;
	}
};
ZPP_Set_ZPP_Body.prototype.try_insert = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(ZPP_Set_ZPP_Body.zpp_pool == null) {
			x = new ZPP_Set_ZPP_Body();
		} else {
			x = ZPP_Set_ZPP_Body.zpp_pool;
			ZPP_Set_ZPP_Body.zpp_pool = x.next;
			x.next = null;
		}
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(ZPP_Set_ZPP_Body.zpp_pool == null) {
					x = new ZPP_Set_ZPP_Body();
				} else {
					x = ZPP_Set_ZPP_Body.zpp_pool;
					ZPP_Set_ZPP_Body.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(ZPP_Set_ZPP_Body.zpp_pool == null) {
					x = new ZPP_Set_ZPP_Body();
				} else {
					x = ZPP_Set_ZPP_Body.zpp_pool;
					ZPP_Set_ZPP_Body.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.next;
			}
		} else {
			break;
		}
	}
	if(x == null) {
		return cur;
	} else {
		if(x.parent == null) {
			x.colour = 1;
		} else {
			x.colour = 0;
			if(x.parent.colour == 0) {
				this.__fix_dbl_red(x);
			}
		}
		return x;
	}
};
ZPP_Set_ZPP_Body.prototype.insert = function(obj) {
	var x;
	if(ZPP_Set_ZPP_Body.zpp_pool == null) {
		x = new ZPP_Set_ZPP_Body();
	} else {
		x = ZPP_Set_ZPP_Body.zpp_pool;
		ZPP_Set_ZPP_Body.zpp_pool = x.next;
		x.next = null;
	}
	x.data = obj;
	if(this.parent == null) {
		this.parent = x;
	} else {
		var cur = this.parent;
		while(true) if(this.lt(x.data,cur.data)) {
			if(cur.prev == null) {
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(cur.next == null) {
			cur.next = x;
			x.parent = cur;
			break;
		} else {
			cur = cur.next;
		}
	}
	if(x.parent == null) {
		x.colour = 1;
	} else {
		x.colour = 0;
		if(x.parent.colour == 0) {
			this.__fix_dbl_red(x);
		}
	}
	return x;
};
ZPP_Set_ZPP_Body.prototype.__class__ = ZPP_Set_ZPP_Body;
var ZPP_Set_ZPP_CbSetPair = zpp_nape.util.ZPP_Set_ZPP_CbSetPair = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
ZPP_Set_ZPP_CbSetPair.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_CbSetPair"];
ZPP_Set_ZPP_CbSetPair.prototype.free = function() {
	this.data = null;
	this.lt = null;
	this.swapped = null;
};
ZPP_Set_ZPP_CbSetPair.prototype.alloc = function() {
};
ZPP_Set_ZPP_CbSetPair.prototype.lt = null;
ZPP_Set_ZPP_CbSetPair.prototype.swapped = null;
ZPP_Set_ZPP_CbSetPair.prototype.data = null;
ZPP_Set_ZPP_CbSetPair.prototype.prev = null;
ZPP_Set_ZPP_CbSetPair.prototype.next = null;
ZPP_Set_ZPP_CbSetPair.prototype.parent = null;
ZPP_Set_ZPP_CbSetPair.prototype.colour = null;
ZPP_Set_ZPP_CbSetPair.prototype.verify = function() {
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			var prei = true;
			if(!this.empty()) {
				var set_ite1 = this.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var j = set_ite1.data;
					if(!prei) {
						if(!this.lt(i,j) && this.lt(j,i)) {
							return false;
						}
					} else if(i == j) {
						prei = false;
					} else if(!this.lt(j,i) && this.lt(i,j)) {
						return false;
					}
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return true;
};
ZPP_Set_ZPP_CbSetPair.prototype.empty = function() {
	return this.parent == null;
};
ZPP_Set_ZPP_CbSetPair.prototype.singular = function() {
	if(this.parent != null && this.parent.prev == null) {
		return this.parent.next == null;
	} else {
		return false;
	}
};
ZPP_Set_ZPP_CbSetPair.prototype.size = function() {
	var ret = 0;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			++ret;
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
ZPP_Set_ZPP_CbSetPair.prototype.has = function(obj) {
	return this.find(obj) != null;
};
ZPP_Set_ZPP_CbSetPair.prototype.find = function(obj) {
	var cur = this.parent;
	while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) {
		cur = cur.prev;
	} else {
		cur = cur.next;
	}
	return cur;
};
ZPP_Set_ZPP_CbSetPair.prototype.has_weak = function(obj) {
	return this.find_weak(obj) != null;
};
ZPP_Set_ZPP_CbSetPair.prototype.find_weak = function(obj) {
	var cur = this.parent;
	while(cur != null) if(this.lt(obj,cur.data)) {
		cur = cur.prev;
	} else if(this.lt(cur.data,obj)) {
		cur = cur.next;
	} else {
		break;
	}
	return cur;
};
ZPP_Set_ZPP_CbSetPair.prototype.lower_bound = function(obj) {
	var ret = null;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var elt = set_ite.data;
			if(!this.lt(elt,obj)) {
				ret = elt;
				break;
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
ZPP_Set_ZPP_CbSetPair.prototype.first = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	return cur.data;
};
ZPP_Set_ZPP_CbSetPair.prototype.pop_front = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	var ret = cur.data;
	this.remove_node(cur);
	return ret;
};
ZPP_Set_ZPP_CbSetPair.prototype.remove = function(obj) {
	this.remove_node(this.find(obj));
};
ZPP_Set_ZPP_CbSetPair.prototype.successor_node = function(cur) {
	if(cur.next != null) {
		cur = cur.next;
		while(cur.prev != null) cur = cur.prev;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.prev != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
ZPP_Set_ZPP_CbSetPair.prototype.predecessor_node = function(cur) {
	if(cur.prev != null) {
		cur = cur.prev;
		while(cur.next != null) cur = cur.next;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.next != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
ZPP_Set_ZPP_CbSetPair.prototype.successor = function(obj) {
	var node = this.successor_node(this.find(obj));
	if(node == null) {
		return null;
	} else {
		return node.data;
	}
};
ZPP_Set_ZPP_CbSetPair.prototype.predecessor = function(obj) {
	var node = this.predecessor_node(this.find(obj));
	if(node == null) {
		return null;
	} else {
		return node.data;
	}
};
ZPP_Set_ZPP_CbSetPair.prototype.remove_node = function(cur) {
	if(cur.next != null && cur.prev != null) {
		var sm = cur.next;
		while(sm.prev != null) sm = sm.prev;
		var t = cur.data;
		cur.data = sm.data;
		sm.data = t;
		if(this.swapped != null) {
			this.swapped(cur.data,sm.data);
		}
		cur = sm;
	}
	var child = cur.prev == null?cur.next:cur.prev;
	if(cur.colour == 1) {
		if(cur.prev != null || cur.next != null) {
			child.colour = 1;
		} else if(cur.parent != null) {
			var parent = cur.parent;
			while(true) {
				parent.colour++;
				parent.prev.colour--;
				parent.next.colour--;
				var child1 = parent.prev;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				var child2 = parent.next;
				if(child2.colour == -1) {
					this.__fix_neg_red(child2);
					break;
				} else if(child2.colour == 0) {
					if(child2.prev != null && child2.prev.colour == 0) {
						this.__fix_dbl_red(child2.prev);
						break;
					}
					if(child2.next != null && child2.next.colour == 0) {
						this.__fix_dbl_red(child2.next);
						break;
					}
				}
				if(parent.colour == 2) {
					if(parent.parent == null) {
						parent.colour = 1;
					} else {
						parent = parent.parent;
						continue;
					}
				}
				break;
			}
		}
	}
	var par = cur.parent;
	if(par == null) {
		this.parent = child;
	} else if(par.prev == cur) {
		par.prev = child;
	} else {
		par.next = child;
	}
	if(child != null) {
		child.parent = par;
	}
	cur.parent = cur.prev = cur.next = null;
	var o = cur;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = ZPP_Set_ZPP_CbSetPair.zpp_pool;
	ZPP_Set_ZPP_CbSetPair.zpp_pool = o;
};
ZPP_Set_ZPP_CbSetPair.prototype.clear = function() {
	if(this.parent != null) {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) {
			cur = cur.prev;
		} else if(cur.next != null) {
			cur = cur.next;
		} else {
			var ret = cur.parent;
			if(ret != null) {
				if(cur == ret.prev) {
					ret.prev = null;
				} else {
					ret.next = null;
				}
				cur.parent = null;
			}
			var o = cur;
			o.data = null;
			o.lt = null;
			o.swapped = null;
			o.next = ZPP_Set_ZPP_CbSetPair.zpp_pool;
			ZPP_Set_ZPP_CbSetPair.zpp_pool = o;
			cur = ret;
		}
		this.parent = null;
	}
};
ZPP_Set_ZPP_CbSetPair.prototype.clear_with = function(lambda) {
	if(this.parent == null) {
		return;
	} else {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) {
			cur = cur.prev;
		} else if(cur.next != null) {
			cur = cur.next;
		} else {
			lambda(cur.data);
			var ret = cur.parent;
			if(ret != null) {
				if(cur == ret.prev) {
					ret.prev = null;
				} else {
					ret.next = null;
				}
				cur.parent = null;
			}
			var o = cur;
			o.data = null;
			o.lt = null;
			o.swapped = null;
			o.next = ZPP_Set_ZPP_CbSetPair.zpp_pool;
			ZPP_Set_ZPP_CbSetPair.zpp_pool = o;
			cur = ret;
		}
		this.parent = null;
	}
};
ZPP_Set_ZPP_CbSetPair.prototype.clear_node = function(node,lambda) {
	lambda(node.data);
	var ret = node.parent;
	if(ret != null) {
		if(node == ret.prev) {
			ret.prev = null;
		} else {
			ret.next = null;
		}
		node.parent = null;
	}
	node.data = null;
	node.lt = null;
	node.swapped = null;
	node.next = ZPP_Set_ZPP_CbSetPair.zpp_pool;
	ZPP_Set_ZPP_CbSetPair.zpp_pool = node;
	return ret;
};
ZPP_Set_ZPP_CbSetPair.prototype.__fix_neg_red = function(negred) {
	var parent = negred.parent;
	var child;
	if(parent.prev == negred) {
		var nl = negred.prev;
		var nr = negred.next;
		var trl = nr.prev;
		var trr = nr.next;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		negred.next = trl;
		if(trl != null) {
			trl.parent = negred;
		}
		var t = parent.data;
		parent.data = nr.data;
		nr.data = t;
		if(this.swapped != null) {
			this.swapped(parent.data,nr.data);
		}
		nr.prev = trr;
		if(trr != null) {
			trr.parent = nr;
		}
		nr.next = parent.next;
		if(parent.next != null) {
			parent.next.parent = nr;
		}
		parent.next = nr;
		if(nr != null) {
			nr.parent = parent;
		}
		child = nl;
	} else {
		var nl1 = negred.next;
		var nr1 = negred.prev;
		var trl1 = nr1.next;
		var trr1 = nr1.prev;
		nl1.colour = 0;
		negred.colour = parent.colour = 1;
		negred.prev = trl1;
		if(trl1 != null) {
			trl1.parent = negred;
		}
		var t1 = parent.data;
		parent.data = nr1.data;
		nr1.data = t1;
		if(this.swapped != null) {
			this.swapped(parent.data,nr1.data);
		}
		nr1.next = trr1;
		if(trr1 != null) {
			trr1.parent = nr1;
		}
		nr1.prev = parent.prev;
		if(parent.prev != null) {
			parent.prev.parent = nr1;
		}
		parent.prev = nr1;
		if(nr1 != null) {
			nr1.parent = parent;
		}
		child = nl1;
	}
	if(child.prev != null && child.prev.colour == 0) {
		this.__fix_dbl_red(child.prev);
	} else if(child.next != null && child.next.colour == 0) {
		this.__fix_dbl_red(child.next);
	}
};
ZPP_Set_ZPP_CbSetPair.prototype.__fix_dbl_red = function(x) {
	while(true) {
		var par = x.parent;
		var g = par.parent;
		if(g == null) {
			par.colour = 1;
			break;
		}
		var n1;
		var n2;
		var n3;
		var t1;
		var t2;
		var t3;
		var t4;
		if(par == g.prev) {
			n3 = g;
			t4 = g.next;
			if(x == par.prev) {
				n1 = x;
				n2 = par;
				t1 = x.prev;
				t2 = x.next;
				t3 = par.next;
			} else {
				n1 = par;
				n2 = x;
				t1 = par.prev;
				t2 = x.prev;
				t3 = x.next;
			}
		} else {
			n1 = g;
			t1 = g.prev;
			if(x == par.prev) {
				n2 = x;
				n3 = par;
				t2 = x.prev;
				t3 = x.next;
				t4 = par.next;
			} else {
				n2 = par;
				n3 = x;
				t2 = par.prev;
				t3 = x.prev;
				t4 = x.next;
			}
		}
		var par1 = g.parent;
		if(par1 == null) {
			this.parent = n2;
		} else if(par1.prev == g) {
			par1.prev = n2;
		} else {
			par1.next = n2;
		}
		if(n2 != null) {
			n2.parent = par1;
		}
		n1.prev = t1;
		if(t1 != null) {
			t1.parent = n1;
		}
		n1.next = t2;
		if(t2 != null) {
			t2.parent = n1;
		}
		n2.prev = n1;
		if(n1 != null) {
			n1.parent = n2;
		}
		n2.next = n3;
		if(n3 != null) {
			n3.parent = n2;
		}
		n3.prev = t3;
		if(t3 != null) {
			t3.parent = n3;
		}
		n3.next = t4;
		if(t4 != null) {
			t4.parent = n3;
		}
		n2.colour = g.colour - 1;
		n1.colour = 1;
		n3.colour = 1;
		if(n2 == this.parent) {
			this.parent.colour = 1;
		} else if(n2.colour == 0 && n2.parent.colour == 0) {
			x = n2;
			continue;
		}
		break;
	}
};
ZPP_Set_ZPP_CbSetPair.prototype.try_insert_bool = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(ZPP_Set_ZPP_CbSetPair.zpp_pool == null) {
			x = new ZPP_Set_ZPP_CbSetPair();
		} else {
			x = ZPP_Set_ZPP_CbSetPair.zpp_pool;
			ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
			x.next = null;
		}
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(ZPP_Set_ZPP_CbSetPair.zpp_pool == null) {
					x = new ZPP_Set_ZPP_CbSetPair();
				} else {
					x = ZPP_Set_ZPP_CbSetPair.zpp_pool;
					ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(ZPP_Set_ZPP_CbSetPair.zpp_pool == null) {
					x = new ZPP_Set_ZPP_CbSetPair();
				} else {
					x = ZPP_Set_ZPP_CbSetPair.zpp_pool;
					ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.next;
			}
		} else {
			break;
		}
	}
	if(x == null) {
		return false;
	} else {
		if(x.parent == null) {
			x.colour = 1;
		} else {
			x.colour = 0;
			if(x.parent.colour == 0) {
				this.__fix_dbl_red(x);
			}
		}
		return true;
	}
};
ZPP_Set_ZPP_CbSetPair.prototype.try_insert = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(ZPP_Set_ZPP_CbSetPair.zpp_pool == null) {
			x = new ZPP_Set_ZPP_CbSetPair();
		} else {
			x = ZPP_Set_ZPP_CbSetPair.zpp_pool;
			ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
			x.next = null;
		}
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(ZPP_Set_ZPP_CbSetPair.zpp_pool == null) {
					x = new ZPP_Set_ZPP_CbSetPair();
				} else {
					x = ZPP_Set_ZPP_CbSetPair.zpp_pool;
					ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(ZPP_Set_ZPP_CbSetPair.zpp_pool == null) {
					x = new ZPP_Set_ZPP_CbSetPair();
				} else {
					x = ZPP_Set_ZPP_CbSetPair.zpp_pool;
					ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.next;
			}
		} else {
			break;
		}
	}
	if(x == null) {
		return cur;
	} else {
		if(x.parent == null) {
			x.colour = 1;
		} else {
			x.colour = 0;
			if(x.parent.colour == 0) {
				this.__fix_dbl_red(x);
			}
		}
		return x;
	}
};
ZPP_Set_ZPP_CbSetPair.prototype.insert = function(obj) {
	var x;
	if(ZPP_Set_ZPP_CbSetPair.zpp_pool == null) {
		x = new ZPP_Set_ZPP_CbSetPair();
	} else {
		x = ZPP_Set_ZPP_CbSetPair.zpp_pool;
		ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
		x.next = null;
	}
	x.data = obj;
	if(this.parent == null) {
		this.parent = x;
	} else {
		var cur = this.parent;
		while(true) if(this.lt(x.data,cur.data)) {
			if(cur.prev == null) {
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(cur.next == null) {
			cur.next = x;
			x.parent = cur;
			break;
		} else {
			cur = cur.next;
		}
	}
	if(x.parent == null) {
		x.colour = 1;
	} else {
		x.colour = 0;
		if(x.parent.colour == 0) {
			this.__fix_dbl_red(x);
		}
	}
	return x;
};
ZPP_Set_ZPP_CbSetPair.prototype.__class__ = ZPP_Set_ZPP_CbSetPair;
var ZPP_Set_ZPP_PartitionVertex = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
ZPP_Set_ZPP_PartitionVertex.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_PartitionVertex"];
ZPP_Set_ZPP_PartitionVertex.prototype.free = function() {
	this.data = null;
	this.lt = null;
	this.swapped = null;
};
ZPP_Set_ZPP_PartitionVertex.prototype.alloc = function() {
};
ZPP_Set_ZPP_PartitionVertex.prototype.lt = null;
ZPP_Set_ZPP_PartitionVertex.prototype.swapped = null;
ZPP_Set_ZPP_PartitionVertex.prototype.data = null;
ZPP_Set_ZPP_PartitionVertex.prototype.prev = null;
ZPP_Set_ZPP_PartitionVertex.prototype.next = null;
ZPP_Set_ZPP_PartitionVertex.prototype.parent = null;
ZPP_Set_ZPP_PartitionVertex.prototype.colour = null;
ZPP_Set_ZPP_PartitionVertex.prototype.verify = function() {
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			var prei = true;
			if(!this.empty()) {
				var set_ite1 = this.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var j = set_ite1.data;
					if(!prei) {
						if(!this.lt(i,j) && this.lt(j,i)) {
							return false;
						}
					} else if(i == j) {
						prei = false;
					} else if(!this.lt(j,i) && this.lt(i,j)) {
						return false;
					}
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return true;
};
ZPP_Set_ZPP_PartitionVertex.prototype.empty = function() {
	return this.parent == null;
};
ZPP_Set_ZPP_PartitionVertex.prototype.singular = function() {
	if(this.parent != null && this.parent.prev == null) {
		return this.parent.next == null;
	} else {
		return false;
	}
};
ZPP_Set_ZPP_PartitionVertex.prototype.size = function() {
	var ret = 0;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			++ret;
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
ZPP_Set_ZPP_PartitionVertex.prototype.has = function(obj) {
	return this.find(obj) != null;
};
ZPP_Set_ZPP_PartitionVertex.prototype.find = function(obj) {
	var cur = this.parent;
	while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) {
		cur = cur.prev;
	} else {
		cur = cur.next;
	}
	return cur;
};
ZPP_Set_ZPP_PartitionVertex.prototype.has_weak = function(obj) {
	return this.find_weak(obj) != null;
};
ZPP_Set_ZPP_PartitionVertex.prototype.find_weak = function(obj) {
	var cur = this.parent;
	while(cur != null) if(this.lt(obj,cur.data)) {
		cur = cur.prev;
	} else if(this.lt(cur.data,obj)) {
		cur = cur.next;
	} else {
		break;
	}
	return cur;
};
ZPP_Set_ZPP_PartitionVertex.prototype.lower_bound = function(obj) {
	var ret = null;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var elt = set_ite.data;
			if(!this.lt(elt,obj)) {
				ret = elt;
				break;
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
ZPP_Set_ZPP_PartitionVertex.prototype.first = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	return cur.data;
};
ZPP_Set_ZPP_PartitionVertex.prototype.pop_front = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	var ret = cur.data;
	this.remove_node(cur);
	return ret;
};
ZPP_Set_ZPP_PartitionVertex.prototype.remove = function(obj) {
	this.remove_node(this.find(obj));
};
ZPP_Set_ZPP_PartitionVertex.prototype.successor_node = function(cur) {
	if(cur.next != null) {
		cur = cur.next;
		while(cur.prev != null) cur = cur.prev;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.prev != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
ZPP_Set_ZPP_PartitionVertex.prototype.predecessor_node = function(cur) {
	if(cur.prev != null) {
		cur = cur.prev;
		while(cur.next != null) cur = cur.next;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.next != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
ZPP_Set_ZPP_PartitionVertex.prototype.successor = function(obj) {
	var node = this.successor_node(this.find(obj));
	if(node == null) {
		return null;
	} else {
		return node.data;
	}
};
ZPP_Set_ZPP_PartitionVertex.prototype.predecessor = function(obj) {
	var node = this.predecessor_node(this.find(obj));
	if(node == null) {
		return null;
	} else {
		return node.data;
	}
};
ZPP_Set_ZPP_PartitionVertex.prototype.remove_node = function(cur) {
	if(cur.next != null && cur.prev != null) {
		var sm = cur.next;
		while(sm.prev != null) sm = sm.prev;
		var t = cur.data;
		cur.data = sm.data;
		sm.data = t;
		if(this.swapped != null) {
			this.swapped(cur.data,sm.data);
		}
		cur = sm;
	}
	var child = cur.prev == null?cur.next:cur.prev;
	if(cur.colour == 1) {
		if(cur.prev != null || cur.next != null) {
			child.colour = 1;
		} else if(cur.parent != null) {
			var parent = cur.parent;
			while(true) {
				parent.colour++;
				parent.prev.colour--;
				parent.next.colour--;
				var child1 = parent.prev;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				var child2 = parent.next;
				if(child2.colour == -1) {
					this.__fix_neg_red(child2);
					break;
				} else if(child2.colour == 0) {
					if(child2.prev != null && child2.prev.colour == 0) {
						this.__fix_dbl_red(child2.prev);
						break;
					}
					if(child2.next != null && child2.next.colour == 0) {
						this.__fix_dbl_red(child2.next);
						break;
					}
				}
				if(parent.colour == 2) {
					if(parent.parent == null) {
						parent.colour = 1;
					} else {
						parent = parent.parent;
						continue;
					}
				}
				break;
			}
		}
	}
	var par = cur.parent;
	if(par == null) {
		this.parent = child;
	} else if(par.prev == cur) {
		par.prev = child;
	} else {
		par.next = child;
	}
	if(child != null) {
		child.parent = par;
	}
	cur.parent = cur.prev = cur.next = null;
	var o = cur;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = ZPP_Set_ZPP_PartitionVertex.zpp_pool;
	ZPP_Set_ZPP_PartitionVertex.zpp_pool = o;
};
ZPP_Set_ZPP_PartitionVertex.prototype.clear = function() {
	if(this.parent != null) {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) {
			cur = cur.prev;
		} else if(cur.next != null) {
			cur = cur.next;
		} else {
			var ret = cur.parent;
			if(ret != null) {
				if(cur == ret.prev) {
					ret.prev = null;
				} else {
					ret.next = null;
				}
				cur.parent = null;
			}
			var o = cur;
			o.data = null;
			o.lt = null;
			o.swapped = null;
			o.next = ZPP_Set_ZPP_PartitionVertex.zpp_pool;
			ZPP_Set_ZPP_PartitionVertex.zpp_pool = o;
			cur = ret;
		}
		this.parent = null;
	}
};
ZPP_Set_ZPP_PartitionVertex.prototype.clear_with = function(lambda) {
	if(this.parent == null) {
		return;
	} else {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) {
			cur = cur.prev;
		} else if(cur.next != null) {
			cur = cur.next;
		} else {
			lambda(cur.data);
			var ret = cur.parent;
			if(ret != null) {
				if(cur == ret.prev) {
					ret.prev = null;
				} else {
					ret.next = null;
				}
				cur.parent = null;
			}
			var o = cur;
			o.data = null;
			o.lt = null;
			o.swapped = null;
			o.next = ZPP_Set_ZPP_PartitionVertex.zpp_pool;
			ZPP_Set_ZPP_PartitionVertex.zpp_pool = o;
			cur = ret;
		}
		this.parent = null;
	}
};
ZPP_Set_ZPP_PartitionVertex.prototype.clear_node = function(node,lambda) {
	lambda(node.data);
	var ret = node.parent;
	if(ret != null) {
		if(node == ret.prev) {
			ret.prev = null;
		} else {
			ret.next = null;
		}
		node.parent = null;
	}
	node.data = null;
	node.lt = null;
	node.swapped = null;
	node.next = ZPP_Set_ZPP_PartitionVertex.zpp_pool;
	ZPP_Set_ZPP_PartitionVertex.zpp_pool = node;
	return ret;
};
ZPP_Set_ZPP_PartitionVertex.prototype.__fix_neg_red = function(negred) {
	var parent = negred.parent;
	var child;
	if(parent.prev == negred) {
		var nl = negred.prev;
		var nr = negred.next;
		var trl = nr.prev;
		var trr = nr.next;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		negred.next = trl;
		if(trl != null) {
			trl.parent = negred;
		}
		var t = parent.data;
		parent.data = nr.data;
		nr.data = t;
		if(this.swapped != null) {
			this.swapped(parent.data,nr.data);
		}
		nr.prev = trr;
		if(trr != null) {
			trr.parent = nr;
		}
		nr.next = parent.next;
		if(parent.next != null) {
			parent.next.parent = nr;
		}
		parent.next = nr;
		if(nr != null) {
			nr.parent = parent;
		}
		child = nl;
	} else {
		var nl1 = negred.next;
		var nr1 = negred.prev;
		var trl1 = nr1.next;
		var trr1 = nr1.prev;
		nl1.colour = 0;
		negred.colour = parent.colour = 1;
		negred.prev = trl1;
		if(trl1 != null) {
			trl1.parent = negred;
		}
		var t1 = parent.data;
		parent.data = nr1.data;
		nr1.data = t1;
		if(this.swapped != null) {
			this.swapped(parent.data,nr1.data);
		}
		nr1.next = trr1;
		if(trr1 != null) {
			trr1.parent = nr1;
		}
		nr1.prev = parent.prev;
		if(parent.prev != null) {
			parent.prev.parent = nr1;
		}
		parent.prev = nr1;
		if(nr1 != null) {
			nr1.parent = parent;
		}
		child = nl1;
	}
	if(child.prev != null && child.prev.colour == 0) {
		this.__fix_dbl_red(child.prev);
	} else if(child.next != null && child.next.colour == 0) {
		this.__fix_dbl_red(child.next);
	}
};
ZPP_Set_ZPP_PartitionVertex.prototype.__fix_dbl_red = function(x) {
	while(true) {
		var par = x.parent;
		var g = par.parent;
		if(g == null) {
			par.colour = 1;
			break;
		}
		var n1;
		var n2;
		var n3;
		var t1;
		var t2;
		var t3;
		var t4;
		if(par == g.prev) {
			n3 = g;
			t4 = g.next;
			if(x == par.prev) {
				n1 = x;
				n2 = par;
				t1 = x.prev;
				t2 = x.next;
				t3 = par.next;
			} else {
				n1 = par;
				n2 = x;
				t1 = par.prev;
				t2 = x.prev;
				t3 = x.next;
			}
		} else {
			n1 = g;
			t1 = g.prev;
			if(x == par.prev) {
				n2 = x;
				n3 = par;
				t2 = x.prev;
				t3 = x.next;
				t4 = par.next;
			} else {
				n2 = par;
				n3 = x;
				t2 = par.prev;
				t3 = x.prev;
				t4 = x.next;
			}
		}
		var par1 = g.parent;
		if(par1 == null) {
			this.parent = n2;
		} else if(par1.prev == g) {
			par1.prev = n2;
		} else {
			par1.next = n2;
		}
		if(n2 != null) {
			n2.parent = par1;
		}
		n1.prev = t1;
		if(t1 != null) {
			t1.parent = n1;
		}
		n1.next = t2;
		if(t2 != null) {
			t2.parent = n1;
		}
		n2.prev = n1;
		if(n1 != null) {
			n1.parent = n2;
		}
		n2.next = n3;
		if(n3 != null) {
			n3.parent = n2;
		}
		n3.prev = t3;
		if(t3 != null) {
			t3.parent = n3;
		}
		n3.next = t4;
		if(t4 != null) {
			t4.parent = n3;
		}
		n2.colour = g.colour - 1;
		n1.colour = 1;
		n3.colour = 1;
		if(n2 == this.parent) {
			this.parent.colour = 1;
		} else if(n2.colour == 0 && n2.parent.colour == 0) {
			x = n2;
			continue;
		}
		break;
	}
};
ZPP_Set_ZPP_PartitionVertex.prototype.try_insert_bool = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) {
			x = new ZPP_Set_ZPP_PartitionVertex();
		} else {
			x = ZPP_Set_ZPP_PartitionVertex.zpp_pool;
			ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
			x.next = null;
		}
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) {
					x = new ZPP_Set_ZPP_PartitionVertex();
				} else {
					x = ZPP_Set_ZPP_PartitionVertex.zpp_pool;
					ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) {
					x = new ZPP_Set_ZPP_PartitionVertex();
				} else {
					x = ZPP_Set_ZPP_PartitionVertex.zpp_pool;
					ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.next;
			}
		} else {
			break;
		}
	}
	if(x == null) {
		return false;
	} else {
		if(x.parent == null) {
			x.colour = 1;
		} else {
			x.colour = 0;
			if(x.parent.colour == 0) {
				this.__fix_dbl_red(x);
			}
		}
		return true;
	}
};
ZPP_Set_ZPP_PartitionVertex.prototype.try_insert = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) {
			x = new ZPP_Set_ZPP_PartitionVertex();
		} else {
			x = ZPP_Set_ZPP_PartitionVertex.zpp_pool;
			ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
			x.next = null;
		}
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) {
					x = new ZPP_Set_ZPP_PartitionVertex();
				} else {
					x = ZPP_Set_ZPP_PartitionVertex.zpp_pool;
					ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) {
					x = new ZPP_Set_ZPP_PartitionVertex();
				} else {
					x = ZPP_Set_ZPP_PartitionVertex.zpp_pool;
					ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.next;
			}
		} else {
			break;
		}
	}
	if(x == null) {
		return cur;
	} else {
		if(x.parent == null) {
			x.colour = 1;
		} else {
			x.colour = 0;
			if(x.parent.colour == 0) {
				this.__fix_dbl_red(x);
			}
		}
		return x;
	}
};
ZPP_Set_ZPP_PartitionVertex.prototype.insert = function(obj) {
	var x;
	if(ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) {
		x = new ZPP_Set_ZPP_PartitionVertex();
	} else {
		x = ZPP_Set_ZPP_PartitionVertex.zpp_pool;
		ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
		x.next = null;
	}
	x.data = obj;
	if(this.parent == null) {
		this.parent = x;
	} else {
		var cur = this.parent;
		while(true) if(this.lt(x.data,cur.data)) {
			if(cur.prev == null) {
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(cur.next == null) {
			cur.next = x;
			x.parent = cur;
			break;
		} else {
			cur = cur.next;
		}
	}
	if(x.parent == null) {
		x.colour = 1;
	} else {
		x.colour = 0;
		if(x.parent.colour == 0) {
			this.__fix_dbl_red(x);
		}
	}
	return x;
};
ZPP_Set_ZPP_PartitionVertex.prototype.__class__ = ZPP_Set_ZPP_PartitionVertex;
var ZPP_Set_ZPP_PartitionPair = zpp_nape.util.ZPP_Set_ZPP_PartitionPair = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
ZPP_Set_ZPP_PartitionPair.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_PartitionPair"];
ZPP_Set_ZPP_PartitionPair.prototype.free = function() {
	this.data = null;
	this.lt = null;
	this.swapped = null;
};
ZPP_Set_ZPP_PartitionPair.prototype.alloc = function() {
};
ZPP_Set_ZPP_PartitionPair.prototype.lt = null;
ZPP_Set_ZPP_PartitionPair.prototype.swapped = null;
ZPP_Set_ZPP_PartitionPair.prototype.data = null;
ZPP_Set_ZPP_PartitionPair.prototype.prev = null;
ZPP_Set_ZPP_PartitionPair.prototype.next = null;
ZPP_Set_ZPP_PartitionPair.prototype.parent = null;
ZPP_Set_ZPP_PartitionPair.prototype.colour = null;
ZPP_Set_ZPP_PartitionPair.prototype.verify = function() {
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			var prei = true;
			if(!this.empty()) {
				var set_ite1 = this.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var j = set_ite1.data;
					if(!prei) {
						if(!this.lt(i,j) && this.lt(j,i)) {
							return false;
						}
					} else if(i == j) {
						prei = false;
					} else if(!this.lt(j,i) && this.lt(i,j)) {
						return false;
					}
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return true;
};
ZPP_Set_ZPP_PartitionPair.prototype.empty = function() {
	return this.parent == null;
};
ZPP_Set_ZPP_PartitionPair.prototype.singular = function() {
	if(this.parent != null && this.parent.prev == null) {
		return this.parent.next == null;
	} else {
		return false;
	}
};
ZPP_Set_ZPP_PartitionPair.prototype.size = function() {
	var ret = 0;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			++ret;
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
ZPP_Set_ZPP_PartitionPair.prototype.has = function(obj) {
	return this.find(obj) != null;
};
ZPP_Set_ZPP_PartitionPair.prototype.find = function(obj) {
	var cur = this.parent;
	while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) {
		cur = cur.prev;
	} else {
		cur = cur.next;
	}
	return cur;
};
ZPP_Set_ZPP_PartitionPair.prototype.has_weak = function(obj) {
	return this.find_weak(obj) != null;
};
ZPP_Set_ZPP_PartitionPair.prototype.find_weak = function(obj) {
	var cur = this.parent;
	while(cur != null) if(this.lt(obj,cur.data)) {
		cur = cur.prev;
	} else if(this.lt(cur.data,obj)) {
		cur = cur.next;
	} else {
		break;
	}
	return cur;
};
ZPP_Set_ZPP_PartitionPair.prototype.lower_bound = function(obj) {
	var ret = null;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var elt = set_ite.data;
			if(!this.lt(elt,obj)) {
				ret = elt;
				break;
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
ZPP_Set_ZPP_PartitionPair.prototype.first = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	return cur.data;
};
ZPP_Set_ZPP_PartitionPair.prototype.pop_front = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	var ret = cur.data;
	this.remove_node(cur);
	return ret;
};
ZPP_Set_ZPP_PartitionPair.prototype.remove = function(obj) {
	this.remove_node(this.find(obj));
};
ZPP_Set_ZPP_PartitionPair.prototype.successor_node = function(cur) {
	if(cur.next != null) {
		cur = cur.next;
		while(cur.prev != null) cur = cur.prev;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.prev != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
ZPP_Set_ZPP_PartitionPair.prototype.predecessor_node = function(cur) {
	if(cur.prev != null) {
		cur = cur.prev;
		while(cur.next != null) cur = cur.next;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.next != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
ZPP_Set_ZPP_PartitionPair.prototype.successor = function(obj) {
	var node = this.successor_node(this.find(obj));
	if(node == null) {
		return null;
	} else {
		return node.data;
	}
};
ZPP_Set_ZPP_PartitionPair.prototype.predecessor = function(obj) {
	var node = this.predecessor_node(this.find(obj));
	if(node == null) {
		return null;
	} else {
		return node.data;
	}
};
ZPP_Set_ZPP_PartitionPair.prototype.remove_node = function(cur) {
	if(cur.next != null && cur.prev != null) {
		var sm = cur.next;
		while(sm.prev != null) sm = sm.prev;
		var t = cur.data;
		cur.data = sm.data;
		sm.data = t;
		if(this.swapped != null) {
			this.swapped(cur.data,sm.data);
		}
		cur = sm;
	}
	var child = cur.prev == null?cur.next:cur.prev;
	if(cur.colour == 1) {
		if(cur.prev != null || cur.next != null) {
			child.colour = 1;
		} else if(cur.parent != null) {
			var parent = cur.parent;
			while(true) {
				parent.colour++;
				parent.prev.colour--;
				parent.next.colour--;
				var child1 = parent.prev;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				var child2 = parent.next;
				if(child2.colour == -1) {
					this.__fix_neg_red(child2);
					break;
				} else if(child2.colour == 0) {
					if(child2.prev != null && child2.prev.colour == 0) {
						this.__fix_dbl_red(child2.prev);
						break;
					}
					if(child2.next != null && child2.next.colour == 0) {
						this.__fix_dbl_red(child2.next);
						break;
					}
				}
				if(parent.colour == 2) {
					if(parent.parent == null) {
						parent.colour = 1;
					} else {
						parent = parent.parent;
						continue;
					}
				}
				break;
			}
		}
	}
	var par = cur.parent;
	if(par == null) {
		this.parent = child;
	} else if(par.prev == cur) {
		par.prev = child;
	} else {
		par.next = child;
	}
	if(child != null) {
		child.parent = par;
	}
	cur.parent = cur.prev = cur.next = null;
	var o = cur;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = ZPP_Set_ZPP_PartitionPair.zpp_pool;
	ZPP_Set_ZPP_PartitionPair.zpp_pool = o;
};
ZPP_Set_ZPP_PartitionPair.prototype.clear = function() {
	if(this.parent != null) {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) {
			cur = cur.prev;
		} else if(cur.next != null) {
			cur = cur.next;
		} else {
			var ret = cur.parent;
			if(ret != null) {
				if(cur == ret.prev) {
					ret.prev = null;
				} else {
					ret.next = null;
				}
				cur.parent = null;
			}
			var o = cur;
			o.data = null;
			o.lt = null;
			o.swapped = null;
			o.next = ZPP_Set_ZPP_PartitionPair.zpp_pool;
			ZPP_Set_ZPP_PartitionPair.zpp_pool = o;
			cur = ret;
		}
		this.parent = null;
	}
};
ZPP_Set_ZPP_PartitionPair.prototype.clear_with = function(lambda) {
	if(this.parent == null) {
		return;
	} else {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) {
			cur = cur.prev;
		} else if(cur.next != null) {
			cur = cur.next;
		} else {
			lambda(cur.data);
			var ret = cur.parent;
			if(ret != null) {
				if(cur == ret.prev) {
					ret.prev = null;
				} else {
					ret.next = null;
				}
				cur.parent = null;
			}
			var o = cur;
			o.data = null;
			o.lt = null;
			o.swapped = null;
			o.next = ZPP_Set_ZPP_PartitionPair.zpp_pool;
			ZPP_Set_ZPP_PartitionPair.zpp_pool = o;
			cur = ret;
		}
		this.parent = null;
	}
};
ZPP_Set_ZPP_PartitionPair.prototype.clear_node = function(node,lambda) {
	lambda(node.data);
	var ret = node.parent;
	if(ret != null) {
		if(node == ret.prev) {
			ret.prev = null;
		} else {
			ret.next = null;
		}
		node.parent = null;
	}
	node.data = null;
	node.lt = null;
	node.swapped = null;
	node.next = ZPP_Set_ZPP_PartitionPair.zpp_pool;
	ZPP_Set_ZPP_PartitionPair.zpp_pool = node;
	return ret;
};
ZPP_Set_ZPP_PartitionPair.prototype.__fix_neg_red = function(negred) {
	var parent = negred.parent;
	var child;
	if(parent.prev == negred) {
		var nl = negred.prev;
		var nr = negred.next;
		var trl = nr.prev;
		var trr = nr.next;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		negred.next = trl;
		if(trl != null) {
			trl.parent = negred;
		}
		var t = parent.data;
		parent.data = nr.data;
		nr.data = t;
		if(this.swapped != null) {
			this.swapped(parent.data,nr.data);
		}
		nr.prev = trr;
		if(trr != null) {
			trr.parent = nr;
		}
		nr.next = parent.next;
		if(parent.next != null) {
			parent.next.parent = nr;
		}
		parent.next = nr;
		if(nr != null) {
			nr.parent = parent;
		}
		child = nl;
	} else {
		var nl1 = negred.next;
		var nr1 = negred.prev;
		var trl1 = nr1.next;
		var trr1 = nr1.prev;
		nl1.colour = 0;
		negred.colour = parent.colour = 1;
		negred.prev = trl1;
		if(trl1 != null) {
			trl1.parent = negred;
		}
		var t1 = parent.data;
		parent.data = nr1.data;
		nr1.data = t1;
		if(this.swapped != null) {
			this.swapped(parent.data,nr1.data);
		}
		nr1.next = trr1;
		if(trr1 != null) {
			trr1.parent = nr1;
		}
		nr1.prev = parent.prev;
		if(parent.prev != null) {
			parent.prev.parent = nr1;
		}
		parent.prev = nr1;
		if(nr1 != null) {
			nr1.parent = parent;
		}
		child = nl1;
	}
	if(child.prev != null && child.prev.colour == 0) {
		this.__fix_dbl_red(child.prev);
	} else if(child.next != null && child.next.colour == 0) {
		this.__fix_dbl_red(child.next);
	}
};
ZPP_Set_ZPP_PartitionPair.prototype.__fix_dbl_red = function(x) {
	while(true) {
		var par = x.parent;
		var g = par.parent;
		if(g == null) {
			par.colour = 1;
			break;
		}
		var n1;
		var n2;
		var n3;
		var t1;
		var t2;
		var t3;
		var t4;
		if(par == g.prev) {
			n3 = g;
			t4 = g.next;
			if(x == par.prev) {
				n1 = x;
				n2 = par;
				t1 = x.prev;
				t2 = x.next;
				t3 = par.next;
			} else {
				n1 = par;
				n2 = x;
				t1 = par.prev;
				t2 = x.prev;
				t3 = x.next;
			}
		} else {
			n1 = g;
			t1 = g.prev;
			if(x == par.prev) {
				n2 = x;
				n3 = par;
				t2 = x.prev;
				t3 = x.next;
				t4 = par.next;
			} else {
				n2 = par;
				n3 = x;
				t2 = par.prev;
				t3 = x.prev;
				t4 = x.next;
			}
		}
		var par1 = g.parent;
		if(par1 == null) {
			this.parent = n2;
		} else if(par1.prev == g) {
			par1.prev = n2;
		} else {
			par1.next = n2;
		}
		if(n2 != null) {
			n2.parent = par1;
		}
		n1.prev = t1;
		if(t1 != null) {
			t1.parent = n1;
		}
		n1.next = t2;
		if(t2 != null) {
			t2.parent = n1;
		}
		n2.prev = n1;
		if(n1 != null) {
			n1.parent = n2;
		}
		n2.next = n3;
		if(n3 != null) {
			n3.parent = n2;
		}
		n3.prev = t3;
		if(t3 != null) {
			t3.parent = n3;
		}
		n3.next = t4;
		if(t4 != null) {
			t4.parent = n3;
		}
		n2.colour = g.colour - 1;
		n1.colour = 1;
		n3.colour = 1;
		if(n2 == this.parent) {
			this.parent.colour = 1;
		} else if(n2.colour == 0 && n2.parent.colour == 0) {
			x = n2;
			continue;
		}
		break;
	}
};
ZPP_Set_ZPP_PartitionPair.prototype.try_insert_bool = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(ZPP_Set_ZPP_PartitionPair.zpp_pool == null) {
			x = new ZPP_Set_ZPP_PartitionPair();
		} else {
			x = ZPP_Set_ZPP_PartitionPair.zpp_pool;
			ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
			x.next = null;
		}
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(ZPP_Set_ZPP_PartitionPair.zpp_pool == null) {
					x = new ZPP_Set_ZPP_PartitionPair();
				} else {
					x = ZPP_Set_ZPP_PartitionPair.zpp_pool;
					ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(ZPP_Set_ZPP_PartitionPair.zpp_pool == null) {
					x = new ZPP_Set_ZPP_PartitionPair();
				} else {
					x = ZPP_Set_ZPP_PartitionPair.zpp_pool;
					ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.next;
			}
		} else {
			break;
		}
	}
	if(x == null) {
		return false;
	} else {
		if(x.parent == null) {
			x.colour = 1;
		} else {
			x.colour = 0;
			if(x.parent.colour == 0) {
				this.__fix_dbl_red(x);
			}
		}
		return true;
	}
};
ZPP_Set_ZPP_PartitionPair.prototype.try_insert = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(ZPP_Set_ZPP_PartitionPair.zpp_pool == null) {
			x = new ZPP_Set_ZPP_PartitionPair();
		} else {
			x = ZPP_Set_ZPP_PartitionPair.zpp_pool;
			ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
			x.next = null;
		}
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(ZPP_Set_ZPP_PartitionPair.zpp_pool == null) {
					x = new ZPP_Set_ZPP_PartitionPair();
				} else {
					x = ZPP_Set_ZPP_PartitionPair.zpp_pool;
					ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(ZPP_Set_ZPP_PartitionPair.zpp_pool == null) {
					x = new ZPP_Set_ZPP_PartitionPair();
				} else {
					x = ZPP_Set_ZPP_PartitionPair.zpp_pool;
					ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.next;
			}
		} else {
			break;
		}
	}
	if(x == null) {
		return cur;
	} else {
		if(x.parent == null) {
			x.colour = 1;
		} else {
			x.colour = 0;
			if(x.parent.colour == 0) {
				this.__fix_dbl_red(x);
			}
		}
		return x;
	}
};
ZPP_Set_ZPP_PartitionPair.prototype.insert = function(obj) {
	var x;
	if(ZPP_Set_ZPP_PartitionPair.zpp_pool == null) {
		x = new ZPP_Set_ZPP_PartitionPair();
	} else {
		x = ZPP_Set_ZPP_PartitionPair.zpp_pool;
		ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
		x.next = null;
	}
	x.data = obj;
	if(this.parent == null) {
		this.parent = x;
	} else {
		var cur = this.parent;
		while(true) if(this.lt(x.data,cur.data)) {
			if(cur.prev == null) {
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(cur.next == null) {
			cur.next = x;
			x.parent = cur;
			break;
		} else {
			cur = cur.next;
		}
	}
	if(x.parent == null) {
		x.colour = 1;
	} else {
		x.colour = 0;
		if(x.parent.colour == 0) {
			this.__fix_dbl_red(x);
		}
	}
	return x;
};
ZPP_Set_ZPP_PartitionPair.prototype.__class__ = ZPP_Set_ZPP_PartitionPair;
var ZPP_Set_ZPP_SimpleVert = zpp_nape.util.ZPP_Set_ZPP_SimpleVert = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
ZPP_Set_ZPP_SimpleVert.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_SimpleVert"];
ZPP_Set_ZPP_SimpleVert.prototype.free = function() {
	this.data = null;
	this.lt = null;
	this.swapped = null;
};
ZPP_Set_ZPP_SimpleVert.prototype.alloc = function() {
};
ZPP_Set_ZPP_SimpleVert.prototype.lt = null;
ZPP_Set_ZPP_SimpleVert.prototype.swapped = null;
ZPP_Set_ZPP_SimpleVert.prototype.data = null;
ZPP_Set_ZPP_SimpleVert.prototype.prev = null;
ZPP_Set_ZPP_SimpleVert.prototype.next = null;
ZPP_Set_ZPP_SimpleVert.prototype.parent = null;
ZPP_Set_ZPP_SimpleVert.prototype.colour = null;
ZPP_Set_ZPP_SimpleVert.prototype.verify = function() {
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			var prei = true;
			if(!this.empty()) {
				var set_ite1 = this.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var j = set_ite1.data;
					if(!prei) {
						if(!this.lt(i,j) && this.lt(j,i)) {
							return false;
						}
					} else if(i == j) {
						prei = false;
					} else if(!this.lt(j,i) && this.lt(i,j)) {
						return false;
					}
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return true;
};
ZPP_Set_ZPP_SimpleVert.prototype.empty = function() {
	return this.parent == null;
};
ZPP_Set_ZPP_SimpleVert.prototype.singular = function() {
	if(this.parent != null && this.parent.prev == null) {
		return this.parent.next == null;
	} else {
		return false;
	}
};
ZPP_Set_ZPP_SimpleVert.prototype.size = function() {
	var ret = 0;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			++ret;
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
ZPP_Set_ZPP_SimpleVert.prototype.has = function(obj) {
	return this.find(obj) != null;
};
ZPP_Set_ZPP_SimpleVert.prototype.find = function(obj) {
	var cur = this.parent;
	while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) {
		cur = cur.prev;
	} else {
		cur = cur.next;
	}
	return cur;
};
ZPP_Set_ZPP_SimpleVert.prototype.has_weak = function(obj) {
	return this.find_weak(obj) != null;
};
ZPP_Set_ZPP_SimpleVert.prototype.find_weak = function(obj) {
	var cur = this.parent;
	while(cur != null) if(this.lt(obj,cur.data)) {
		cur = cur.prev;
	} else if(this.lt(cur.data,obj)) {
		cur = cur.next;
	} else {
		break;
	}
	return cur;
};
ZPP_Set_ZPP_SimpleVert.prototype.lower_bound = function(obj) {
	var ret = null;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var elt = set_ite.data;
			if(!this.lt(elt,obj)) {
				ret = elt;
				break;
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
ZPP_Set_ZPP_SimpleVert.prototype.first = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	return cur.data;
};
ZPP_Set_ZPP_SimpleVert.prototype.pop_front = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	var ret = cur.data;
	this.remove_node(cur);
	return ret;
};
ZPP_Set_ZPP_SimpleVert.prototype.remove = function(obj) {
	this.remove_node(this.find(obj));
};
ZPP_Set_ZPP_SimpleVert.prototype.successor_node = function(cur) {
	if(cur.next != null) {
		cur = cur.next;
		while(cur.prev != null) cur = cur.prev;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.prev != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
ZPP_Set_ZPP_SimpleVert.prototype.predecessor_node = function(cur) {
	if(cur.prev != null) {
		cur = cur.prev;
		while(cur.next != null) cur = cur.next;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.next != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
ZPP_Set_ZPP_SimpleVert.prototype.successor = function(obj) {
	var node = this.successor_node(this.find(obj));
	if(node == null) {
		return null;
	} else {
		return node.data;
	}
};
ZPP_Set_ZPP_SimpleVert.prototype.predecessor = function(obj) {
	var node = this.predecessor_node(this.find(obj));
	if(node == null) {
		return null;
	} else {
		return node.data;
	}
};
ZPP_Set_ZPP_SimpleVert.prototype.remove_node = function(cur) {
	if(cur.next != null && cur.prev != null) {
		var sm = cur.next;
		while(sm.prev != null) sm = sm.prev;
		var t = cur.data;
		cur.data = sm.data;
		sm.data = t;
		if(this.swapped != null) {
			this.swapped(cur.data,sm.data);
		}
		cur = sm;
	}
	var child = cur.prev == null?cur.next:cur.prev;
	if(cur.colour == 1) {
		if(cur.prev != null || cur.next != null) {
			child.colour = 1;
		} else if(cur.parent != null) {
			var parent = cur.parent;
			while(true) {
				parent.colour++;
				parent.prev.colour--;
				parent.next.colour--;
				var child1 = parent.prev;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				var child2 = parent.next;
				if(child2.colour == -1) {
					this.__fix_neg_red(child2);
					break;
				} else if(child2.colour == 0) {
					if(child2.prev != null && child2.prev.colour == 0) {
						this.__fix_dbl_red(child2.prev);
						break;
					}
					if(child2.next != null && child2.next.colour == 0) {
						this.__fix_dbl_red(child2.next);
						break;
					}
				}
				if(parent.colour == 2) {
					if(parent.parent == null) {
						parent.colour = 1;
					} else {
						parent = parent.parent;
						continue;
					}
				}
				break;
			}
		}
	}
	var par = cur.parent;
	if(par == null) {
		this.parent = child;
	} else if(par.prev == cur) {
		par.prev = child;
	} else {
		par.next = child;
	}
	if(child != null) {
		child.parent = par;
	}
	cur.parent = cur.prev = cur.next = null;
	var o = cur;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = ZPP_Set_ZPP_SimpleVert.zpp_pool;
	ZPP_Set_ZPP_SimpleVert.zpp_pool = o;
};
ZPP_Set_ZPP_SimpleVert.prototype.clear = function() {
	if(this.parent != null) {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) {
			cur = cur.prev;
		} else if(cur.next != null) {
			cur = cur.next;
		} else {
			var ret = cur.parent;
			if(ret != null) {
				if(cur == ret.prev) {
					ret.prev = null;
				} else {
					ret.next = null;
				}
				cur.parent = null;
			}
			var o = cur;
			o.data = null;
			o.lt = null;
			o.swapped = null;
			o.next = ZPP_Set_ZPP_SimpleVert.zpp_pool;
			ZPP_Set_ZPP_SimpleVert.zpp_pool = o;
			cur = ret;
		}
		this.parent = null;
	}
};
ZPP_Set_ZPP_SimpleVert.prototype.clear_with = function(lambda) {
	if(this.parent == null) {
		return;
	} else {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) {
			cur = cur.prev;
		} else if(cur.next != null) {
			cur = cur.next;
		} else {
			lambda(cur.data);
			var ret = cur.parent;
			if(ret != null) {
				if(cur == ret.prev) {
					ret.prev = null;
				} else {
					ret.next = null;
				}
				cur.parent = null;
			}
			var o = cur;
			o.data = null;
			o.lt = null;
			o.swapped = null;
			o.next = ZPP_Set_ZPP_SimpleVert.zpp_pool;
			ZPP_Set_ZPP_SimpleVert.zpp_pool = o;
			cur = ret;
		}
		this.parent = null;
	}
};
ZPP_Set_ZPP_SimpleVert.prototype.clear_node = function(node,lambda) {
	lambda(node.data);
	var ret = node.parent;
	if(ret != null) {
		if(node == ret.prev) {
			ret.prev = null;
		} else {
			ret.next = null;
		}
		node.parent = null;
	}
	node.data = null;
	node.lt = null;
	node.swapped = null;
	node.next = ZPP_Set_ZPP_SimpleVert.zpp_pool;
	ZPP_Set_ZPP_SimpleVert.zpp_pool = node;
	return ret;
};
ZPP_Set_ZPP_SimpleVert.prototype.__fix_neg_red = function(negred) {
	var parent = negred.parent;
	var child;
	if(parent.prev == negred) {
		var nl = negred.prev;
		var nr = negred.next;
		var trl = nr.prev;
		var trr = nr.next;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		negred.next = trl;
		if(trl != null) {
			trl.parent = negred;
		}
		var t = parent.data;
		parent.data = nr.data;
		nr.data = t;
		if(this.swapped != null) {
			this.swapped(parent.data,nr.data);
		}
		nr.prev = trr;
		if(trr != null) {
			trr.parent = nr;
		}
		nr.next = parent.next;
		if(parent.next != null) {
			parent.next.parent = nr;
		}
		parent.next = nr;
		if(nr != null) {
			nr.parent = parent;
		}
		child = nl;
	} else {
		var nl1 = negred.next;
		var nr1 = negred.prev;
		var trl1 = nr1.next;
		var trr1 = nr1.prev;
		nl1.colour = 0;
		negred.colour = parent.colour = 1;
		negred.prev = trl1;
		if(trl1 != null) {
			trl1.parent = negred;
		}
		var t1 = parent.data;
		parent.data = nr1.data;
		nr1.data = t1;
		if(this.swapped != null) {
			this.swapped(parent.data,nr1.data);
		}
		nr1.next = trr1;
		if(trr1 != null) {
			trr1.parent = nr1;
		}
		nr1.prev = parent.prev;
		if(parent.prev != null) {
			parent.prev.parent = nr1;
		}
		parent.prev = nr1;
		if(nr1 != null) {
			nr1.parent = parent;
		}
		child = nl1;
	}
	if(child.prev != null && child.prev.colour == 0) {
		this.__fix_dbl_red(child.prev);
	} else if(child.next != null && child.next.colour == 0) {
		this.__fix_dbl_red(child.next);
	}
};
ZPP_Set_ZPP_SimpleVert.prototype.__fix_dbl_red = function(x) {
	while(true) {
		var par = x.parent;
		var g = par.parent;
		if(g == null) {
			par.colour = 1;
			break;
		}
		var n1;
		var n2;
		var n3;
		var t1;
		var t2;
		var t3;
		var t4;
		if(par == g.prev) {
			n3 = g;
			t4 = g.next;
			if(x == par.prev) {
				n1 = x;
				n2 = par;
				t1 = x.prev;
				t2 = x.next;
				t3 = par.next;
			} else {
				n1 = par;
				n2 = x;
				t1 = par.prev;
				t2 = x.prev;
				t3 = x.next;
			}
		} else {
			n1 = g;
			t1 = g.prev;
			if(x == par.prev) {
				n2 = x;
				n3 = par;
				t2 = x.prev;
				t3 = x.next;
				t4 = par.next;
			} else {
				n2 = par;
				n3 = x;
				t2 = par.prev;
				t3 = x.prev;
				t4 = x.next;
			}
		}
		var par1 = g.parent;
		if(par1 == null) {
			this.parent = n2;
		} else if(par1.prev == g) {
			par1.prev = n2;
		} else {
			par1.next = n2;
		}
		if(n2 != null) {
			n2.parent = par1;
		}
		n1.prev = t1;
		if(t1 != null) {
			t1.parent = n1;
		}
		n1.next = t2;
		if(t2 != null) {
			t2.parent = n1;
		}
		n2.prev = n1;
		if(n1 != null) {
			n1.parent = n2;
		}
		n2.next = n3;
		if(n3 != null) {
			n3.parent = n2;
		}
		n3.prev = t3;
		if(t3 != null) {
			t3.parent = n3;
		}
		n3.next = t4;
		if(t4 != null) {
			t4.parent = n3;
		}
		n2.colour = g.colour - 1;
		n1.colour = 1;
		n3.colour = 1;
		if(n2 == this.parent) {
			this.parent.colour = 1;
		} else if(n2.colour == 0 && n2.parent.colour == 0) {
			x = n2;
			continue;
		}
		break;
	}
};
ZPP_Set_ZPP_SimpleVert.prototype.try_insert_bool = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(ZPP_Set_ZPP_SimpleVert.zpp_pool == null) {
			x = new ZPP_Set_ZPP_SimpleVert();
		} else {
			x = ZPP_Set_ZPP_SimpleVert.zpp_pool;
			ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
			x.next = null;
		}
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(ZPP_Set_ZPP_SimpleVert.zpp_pool == null) {
					x = new ZPP_Set_ZPP_SimpleVert();
				} else {
					x = ZPP_Set_ZPP_SimpleVert.zpp_pool;
					ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(ZPP_Set_ZPP_SimpleVert.zpp_pool == null) {
					x = new ZPP_Set_ZPP_SimpleVert();
				} else {
					x = ZPP_Set_ZPP_SimpleVert.zpp_pool;
					ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.next;
			}
		} else {
			break;
		}
	}
	if(x == null) {
		return false;
	} else {
		if(x.parent == null) {
			x.colour = 1;
		} else {
			x.colour = 0;
			if(x.parent.colour == 0) {
				this.__fix_dbl_red(x);
			}
		}
		return true;
	}
};
ZPP_Set_ZPP_SimpleVert.prototype.try_insert = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(ZPP_Set_ZPP_SimpleVert.zpp_pool == null) {
			x = new ZPP_Set_ZPP_SimpleVert();
		} else {
			x = ZPP_Set_ZPP_SimpleVert.zpp_pool;
			ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
			x.next = null;
		}
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(ZPP_Set_ZPP_SimpleVert.zpp_pool == null) {
					x = new ZPP_Set_ZPP_SimpleVert();
				} else {
					x = ZPP_Set_ZPP_SimpleVert.zpp_pool;
					ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(ZPP_Set_ZPP_SimpleVert.zpp_pool == null) {
					x = new ZPP_Set_ZPP_SimpleVert();
				} else {
					x = ZPP_Set_ZPP_SimpleVert.zpp_pool;
					ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.next;
			}
		} else {
			break;
		}
	}
	if(x == null) {
		return cur;
	} else {
		if(x.parent == null) {
			x.colour = 1;
		} else {
			x.colour = 0;
			if(x.parent.colour == 0) {
				this.__fix_dbl_red(x);
			}
		}
		return x;
	}
};
ZPP_Set_ZPP_SimpleVert.prototype.insert = function(obj) {
	var x;
	if(ZPP_Set_ZPP_SimpleVert.zpp_pool == null) {
		x = new ZPP_Set_ZPP_SimpleVert();
	} else {
		x = ZPP_Set_ZPP_SimpleVert.zpp_pool;
		ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
		x.next = null;
	}
	x.data = obj;
	if(this.parent == null) {
		this.parent = x;
	} else {
		var cur = this.parent;
		while(true) if(this.lt(x.data,cur.data)) {
			if(cur.prev == null) {
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(cur.next == null) {
			cur.next = x;
			x.parent = cur;
			break;
		} else {
			cur = cur.next;
		}
	}
	if(x.parent == null) {
		x.colour = 1;
	} else {
		x.colour = 0;
		if(x.parent.colour == 0) {
			this.__fix_dbl_red(x);
		}
	}
	return x;
};
ZPP_Set_ZPP_SimpleVert.prototype.__class__ = ZPP_Set_ZPP_SimpleVert;
var ZPP_Set_ZPP_SimpleSeg = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
ZPP_Set_ZPP_SimpleSeg.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_SimpleSeg"];
ZPP_Set_ZPP_SimpleSeg.prototype.free = function() {
	this.data = null;
	this.lt = null;
	this.swapped = null;
};
ZPP_Set_ZPP_SimpleSeg.prototype.alloc = function() {
};
ZPP_Set_ZPP_SimpleSeg.prototype.lt = null;
ZPP_Set_ZPP_SimpleSeg.prototype.swapped = null;
ZPP_Set_ZPP_SimpleSeg.prototype.data = null;
ZPP_Set_ZPP_SimpleSeg.prototype.prev = null;
ZPP_Set_ZPP_SimpleSeg.prototype.next = null;
ZPP_Set_ZPP_SimpleSeg.prototype.parent = null;
ZPP_Set_ZPP_SimpleSeg.prototype.colour = null;
ZPP_Set_ZPP_SimpleSeg.prototype.verify = function() {
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			var prei = true;
			if(!this.empty()) {
				var set_ite1 = this.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var j = set_ite1.data;
					if(!prei) {
						if(!this.lt(i,j) && this.lt(j,i)) {
							return false;
						}
					} else if(i == j) {
						prei = false;
					} else if(!this.lt(j,i) && this.lt(i,j)) {
						return false;
					}
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return true;
};
ZPP_Set_ZPP_SimpleSeg.prototype.empty = function() {
	return this.parent == null;
};
ZPP_Set_ZPP_SimpleSeg.prototype.singular = function() {
	if(this.parent != null && this.parent.prev == null) {
		return this.parent.next == null;
	} else {
		return false;
	}
};
ZPP_Set_ZPP_SimpleSeg.prototype.size = function() {
	var ret = 0;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			++ret;
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
ZPP_Set_ZPP_SimpleSeg.prototype.has = function(obj) {
	return this.find(obj) != null;
};
ZPP_Set_ZPP_SimpleSeg.prototype.find = function(obj) {
	var cur = this.parent;
	while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) {
		cur = cur.prev;
	} else {
		cur = cur.next;
	}
	return cur;
};
ZPP_Set_ZPP_SimpleSeg.prototype.has_weak = function(obj) {
	return this.find_weak(obj) != null;
};
ZPP_Set_ZPP_SimpleSeg.prototype.find_weak = function(obj) {
	var cur = this.parent;
	while(cur != null) if(this.lt(obj,cur.data)) {
		cur = cur.prev;
	} else if(this.lt(cur.data,obj)) {
		cur = cur.next;
	} else {
		break;
	}
	return cur;
};
ZPP_Set_ZPP_SimpleSeg.prototype.lower_bound = function(obj) {
	var ret = null;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var elt = set_ite.data;
			if(!this.lt(elt,obj)) {
				ret = elt;
				break;
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
ZPP_Set_ZPP_SimpleSeg.prototype.first = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	return cur.data;
};
ZPP_Set_ZPP_SimpleSeg.prototype.pop_front = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	var ret = cur.data;
	this.remove_node(cur);
	return ret;
};
ZPP_Set_ZPP_SimpleSeg.prototype.remove = function(obj) {
	this.remove_node(this.find(obj));
};
ZPP_Set_ZPP_SimpleSeg.prototype.successor_node = function(cur) {
	if(cur.next != null) {
		cur = cur.next;
		while(cur.prev != null) cur = cur.prev;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.prev != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
ZPP_Set_ZPP_SimpleSeg.prototype.predecessor_node = function(cur) {
	if(cur.prev != null) {
		cur = cur.prev;
		while(cur.next != null) cur = cur.next;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.next != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
ZPP_Set_ZPP_SimpleSeg.prototype.successor = function(obj) {
	var node = this.successor_node(this.find(obj));
	if(node == null) {
		return null;
	} else {
		return node.data;
	}
};
ZPP_Set_ZPP_SimpleSeg.prototype.predecessor = function(obj) {
	var node = this.predecessor_node(this.find(obj));
	if(node == null) {
		return null;
	} else {
		return node.data;
	}
};
ZPP_Set_ZPP_SimpleSeg.prototype.remove_node = function(cur) {
	if(cur.next != null && cur.prev != null) {
		var sm = cur.next;
		while(sm.prev != null) sm = sm.prev;
		var t = cur.data;
		cur.data = sm.data;
		sm.data = t;
		if(this.swapped != null) {
			this.swapped(cur.data,sm.data);
		}
		cur = sm;
	}
	var child = cur.prev == null?cur.next:cur.prev;
	if(cur.colour == 1) {
		if(cur.prev != null || cur.next != null) {
			child.colour = 1;
		} else if(cur.parent != null) {
			var parent = cur.parent;
			while(true) {
				parent.colour++;
				parent.prev.colour--;
				parent.next.colour--;
				var child1 = parent.prev;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				var child2 = parent.next;
				if(child2.colour == -1) {
					this.__fix_neg_red(child2);
					break;
				} else if(child2.colour == 0) {
					if(child2.prev != null && child2.prev.colour == 0) {
						this.__fix_dbl_red(child2.prev);
						break;
					}
					if(child2.next != null && child2.next.colour == 0) {
						this.__fix_dbl_red(child2.next);
						break;
					}
				}
				if(parent.colour == 2) {
					if(parent.parent == null) {
						parent.colour = 1;
					} else {
						parent = parent.parent;
						continue;
					}
				}
				break;
			}
		}
	}
	var par = cur.parent;
	if(par == null) {
		this.parent = child;
	} else if(par.prev == cur) {
		par.prev = child;
	} else {
		par.next = child;
	}
	if(child != null) {
		child.parent = par;
	}
	cur.parent = cur.prev = cur.next = null;
	var o = cur;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = ZPP_Set_ZPP_SimpleSeg.zpp_pool;
	ZPP_Set_ZPP_SimpleSeg.zpp_pool = o;
};
ZPP_Set_ZPP_SimpleSeg.prototype.clear = function() {
	if(this.parent != null) {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) {
			cur = cur.prev;
		} else if(cur.next != null) {
			cur = cur.next;
		} else {
			var ret = cur.parent;
			if(ret != null) {
				if(cur == ret.prev) {
					ret.prev = null;
				} else {
					ret.next = null;
				}
				cur.parent = null;
			}
			var o = cur;
			o.data = null;
			o.lt = null;
			o.swapped = null;
			o.next = ZPP_Set_ZPP_SimpleSeg.zpp_pool;
			ZPP_Set_ZPP_SimpleSeg.zpp_pool = o;
			cur = ret;
		}
		this.parent = null;
	}
};
ZPP_Set_ZPP_SimpleSeg.prototype.clear_with = function(lambda) {
	if(this.parent == null) {
		return;
	} else {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) {
			cur = cur.prev;
		} else if(cur.next != null) {
			cur = cur.next;
		} else {
			lambda(cur.data);
			var ret = cur.parent;
			if(ret != null) {
				if(cur == ret.prev) {
					ret.prev = null;
				} else {
					ret.next = null;
				}
				cur.parent = null;
			}
			var o = cur;
			o.data = null;
			o.lt = null;
			o.swapped = null;
			o.next = ZPP_Set_ZPP_SimpleSeg.zpp_pool;
			ZPP_Set_ZPP_SimpleSeg.zpp_pool = o;
			cur = ret;
		}
		this.parent = null;
	}
};
ZPP_Set_ZPP_SimpleSeg.prototype.clear_node = function(node,lambda) {
	lambda(node.data);
	var ret = node.parent;
	if(ret != null) {
		if(node == ret.prev) {
			ret.prev = null;
		} else {
			ret.next = null;
		}
		node.parent = null;
	}
	node.data = null;
	node.lt = null;
	node.swapped = null;
	node.next = ZPP_Set_ZPP_SimpleSeg.zpp_pool;
	ZPP_Set_ZPP_SimpleSeg.zpp_pool = node;
	return ret;
};
ZPP_Set_ZPP_SimpleSeg.prototype.__fix_neg_red = function(negred) {
	var parent = negred.parent;
	var child;
	if(parent.prev == negred) {
		var nl = negred.prev;
		var nr = negred.next;
		var trl = nr.prev;
		var trr = nr.next;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		negred.next = trl;
		if(trl != null) {
			trl.parent = negred;
		}
		var t = parent.data;
		parent.data = nr.data;
		nr.data = t;
		if(this.swapped != null) {
			this.swapped(parent.data,nr.data);
		}
		nr.prev = trr;
		if(trr != null) {
			trr.parent = nr;
		}
		nr.next = parent.next;
		if(parent.next != null) {
			parent.next.parent = nr;
		}
		parent.next = nr;
		if(nr != null) {
			nr.parent = parent;
		}
		child = nl;
	} else {
		var nl1 = negred.next;
		var nr1 = negred.prev;
		var trl1 = nr1.next;
		var trr1 = nr1.prev;
		nl1.colour = 0;
		negred.colour = parent.colour = 1;
		negred.prev = trl1;
		if(trl1 != null) {
			trl1.parent = negred;
		}
		var t1 = parent.data;
		parent.data = nr1.data;
		nr1.data = t1;
		if(this.swapped != null) {
			this.swapped(parent.data,nr1.data);
		}
		nr1.next = trr1;
		if(trr1 != null) {
			trr1.parent = nr1;
		}
		nr1.prev = parent.prev;
		if(parent.prev != null) {
			parent.prev.parent = nr1;
		}
		parent.prev = nr1;
		if(nr1 != null) {
			nr1.parent = parent;
		}
		child = nl1;
	}
	if(child.prev != null && child.prev.colour == 0) {
		this.__fix_dbl_red(child.prev);
	} else if(child.next != null && child.next.colour == 0) {
		this.__fix_dbl_red(child.next);
	}
};
ZPP_Set_ZPP_SimpleSeg.prototype.__fix_dbl_red = function(x) {
	while(true) {
		var par = x.parent;
		var g = par.parent;
		if(g == null) {
			par.colour = 1;
			break;
		}
		var n1;
		var n2;
		var n3;
		var t1;
		var t2;
		var t3;
		var t4;
		if(par == g.prev) {
			n3 = g;
			t4 = g.next;
			if(x == par.prev) {
				n1 = x;
				n2 = par;
				t1 = x.prev;
				t2 = x.next;
				t3 = par.next;
			} else {
				n1 = par;
				n2 = x;
				t1 = par.prev;
				t2 = x.prev;
				t3 = x.next;
			}
		} else {
			n1 = g;
			t1 = g.prev;
			if(x == par.prev) {
				n2 = x;
				n3 = par;
				t2 = x.prev;
				t3 = x.next;
				t4 = par.next;
			} else {
				n2 = par;
				n3 = x;
				t2 = par.prev;
				t3 = x.prev;
				t4 = x.next;
			}
		}
		var par1 = g.parent;
		if(par1 == null) {
			this.parent = n2;
		} else if(par1.prev == g) {
			par1.prev = n2;
		} else {
			par1.next = n2;
		}
		if(n2 != null) {
			n2.parent = par1;
		}
		n1.prev = t1;
		if(t1 != null) {
			t1.parent = n1;
		}
		n1.next = t2;
		if(t2 != null) {
			t2.parent = n1;
		}
		n2.prev = n1;
		if(n1 != null) {
			n1.parent = n2;
		}
		n2.next = n3;
		if(n3 != null) {
			n3.parent = n2;
		}
		n3.prev = t3;
		if(t3 != null) {
			t3.parent = n3;
		}
		n3.next = t4;
		if(t4 != null) {
			t4.parent = n3;
		}
		n2.colour = g.colour - 1;
		n1.colour = 1;
		n3.colour = 1;
		if(n2 == this.parent) {
			this.parent.colour = 1;
		} else if(n2.colour == 0 && n2.parent.colour == 0) {
			x = n2;
			continue;
		}
		break;
	}
};
ZPP_Set_ZPP_SimpleSeg.prototype.try_insert_bool = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) {
			x = new ZPP_Set_ZPP_SimpleSeg();
		} else {
			x = ZPP_Set_ZPP_SimpleSeg.zpp_pool;
			ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
			x.next = null;
		}
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) {
					x = new ZPP_Set_ZPP_SimpleSeg();
				} else {
					x = ZPP_Set_ZPP_SimpleSeg.zpp_pool;
					ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) {
					x = new ZPP_Set_ZPP_SimpleSeg();
				} else {
					x = ZPP_Set_ZPP_SimpleSeg.zpp_pool;
					ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.next;
			}
		} else {
			break;
		}
	}
	if(x == null) {
		return false;
	} else {
		if(x.parent == null) {
			x.colour = 1;
		} else {
			x.colour = 0;
			if(x.parent.colour == 0) {
				this.__fix_dbl_red(x);
			}
		}
		return true;
	}
};
ZPP_Set_ZPP_SimpleSeg.prototype.try_insert = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) {
			x = new ZPP_Set_ZPP_SimpleSeg();
		} else {
			x = ZPP_Set_ZPP_SimpleSeg.zpp_pool;
			ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
			x.next = null;
		}
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) {
					x = new ZPP_Set_ZPP_SimpleSeg();
				} else {
					x = ZPP_Set_ZPP_SimpleSeg.zpp_pool;
					ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) {
					x = new ZPP_Set_ZPP_SimpleSeg();
				} else {
					x = ZPP_Set_ZPP_SimpleSeg.zpp_pool;
					ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.next;
			}
		} else {
			break;
		}
	}
	if(x == null) {
		return cur;
	} else {
		if(x.parent == null) {
			x.colour = 1;
		} else {
			x.colour = 0;
			if(x.parent.colour == 0) {
				this.__fix_dbl_red(x);
			}
		}
		return x;
	}
};
ZPP_Set_ZPP_SimpleSeg.prototype.insert = function(obj) {
	var x;
	if(ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) {
		x = new ZPP_Set_ZPP_SimpleSeg();
	} else {
		x = ZPP_Set_ZPP_SimpleSeg.zpp_pool;
		ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
		x.next = null;
	}
	x.data = obj;
	if(this.parent == null) {
		this.parent = x;
	} else {
		var cur = this.parent;
		while(true) if(this.lt(x.data,cur.data)) {
			if(cur.prev == null) {
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(cur.next == null) {
			cur.next = x;
			x.parent = cur;
			break;
		} else {
			cur = cur.next;
		}
	}
	if(x.parent == null) {
		x.colour = 1;
	} else {
		x.colour = 0;
		if(x.parent.colour == 0) {
			this.__fix_dbl_red(x);
		}
	}
	return x;
};
ZPP_Set_ZPP_SimpleSeg.prototype.__class__ = ZPP_Set_ZPP_SimpleSeg;
var ZPP_Set_ZPP_SimpleEvent = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
ZPP_Set_ZPP_SimpleEvent.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_SimpleEvent"];
ZPP_Set_ZPP_SimpleEvent.prototype.free = function() {
	this.data = null;
	this.lt = null;
	this.swapped = null;
};
ZPP_Set_ZPP_SimpleEvent.prototype.alloc = function() {
};
ZPP_Set_ZPP_SimpleEvent.prototype.lt = null;
ZPP_Set_ZPP_SimpleEvent.prototype.swapped = null;
ZPP_Set_ZPP_SimpleEvent.prototype.data = null;
ZPP_Set_ZPP_SimpleEvent.prototype.prev = null;
ZPP_Set_ZPP_SimpleEvent.prototype.next = null;
ZPP_Set_ZPP_SimpleEvent.prototype.parent = null;
ZPP_Set_ZPP_SimpleEvent.prototype.colour = null;
ZPP_Set_ZPP_SimpleEvent.prototype.verify = function() {
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			var prei = true;
			if(!this.empty()) {
				var set_ite1 = this.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var j = set_ite1.data;
					if(!prei) {
						if(!this.lt(i,j) && this.lt(j,i)) {
							return false;
						}
					} else if(i == j) {
						prei = false;
					} else if(!this.lt(j,i) && this.lt(i,j)) {
						return false;
					}
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return true;
};
ZPP_Set_ZPP_SimpleEvent.prototype.empty = function() {
	return this.parent == null;
};
ZPP_Set_ZPP_SimpleEvent.prototype.singular = function() {
	if(this.parent != null && this.parent.prev == null) {
		return this.parent.next == null;
	} else {
		return false;
	}
};
ZPP_Set_ZPP_SimpleEvent.prototype.size = function() {
	var ret = 0;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			++ret;
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
ZPP_Set_ZPP_SimpleEvent.prototype.has = function(obj) {
	return this.find(obj) != null;
};
ZPP_Set_ZPP_SimpleEvent.prototype.find = function(obj) {
	var cur = this.parent;
	while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) {
		cur = cur.prev;
	} else {
		cur = cur.next;
	}
	return cur;
};
ZPP_Set_ZPP_SimpleEvent.prototype.has_weak = function(obj) {
	return this.find_weak(obj) != null;
};
ZPP_Set_ZPP_SimpleEvent.prototype.find_weak = function(obj) {
	var cur = this.parent;
	while(cur != null) if(this.lt(obj,cur.data)) {
		cur = cur.prev;
	} else if(this.lt(cur.data,obj)) {
		cur = cur.next;
	} else {
		break;
	}
	return cur;
};
ZPP_Set_ZPP_SimpleEvent.prototype.lower_bound = function(obj) {
	var ret = null;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var elt = set_ite.data;
			if(!this.lt(elt,obj)) {
				ret = elt;
				break;
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
ZPP_Set_ZPP_SimpleEvent.prototype.first = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	return cur.data;
};
ZPP_Set_ZPP_SimpleEvent.prototype.pop_front = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	var ret = cur.data;
	this.remove_node(cur);
	return ret;
};
ZPP_Set_ZPP_SimpleEvent.prototype.remove = function(obj) {
	this.remove_node(this.find(obj));
};
ZPP_Set_ZPP_SimpleEvent.prototype.successor_node = function(cur) {
	if(cur.next != null) {
		cur = cur.next;
		while(cur.prev != null) cur = cur.prev;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.prev != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
ZPP_Set_ZPP_SimpleEvent.prototype.predecessor_node = function(cur) {
	if(cur.prev != null) {
		cur = cur.prev;
		while(cur.next != null) cur = cur.next;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.next != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
ZPP_Set_ZPP_SimpleEvent.prototype.successor = function(obj) {
	var node = this.successor_node(this.find(obj));
	if(node == null) {
		return null;
	} else {
		return node.data;
	}
};
ZPP_Set_ZPP_SimpleEvent.prototype.predecessor = function(obj) {
	var node = this.predecessor_node(this.find(obj));
	if(node == null) {
		return null;
	} else {
		return node.data;
	}
};
ZPP_Set_ZPP_SimpleEvent.prototype.remove_node = function(cur) {
	if(cur.next != null && cur.prev != null) {
		var sm = cur.next;
		while(sm.prev != null) sm = sm.prev;
		var t = cur.data;
		cur.data = sm.data;
		sm.data = t;
		if(this.swapped != null) {
			this.swapped(cur.data,sm.data);
		}
		cur = sm;
	}
	var child = cur.prev == null?cur.next:cur.prev;
	if(cur.colour == 1) {
		if(cur.prev != null || cur.next != null) {
			child.colour = 1;
		} else if(cur.parent != null) {
			var parent = cur.parent;
			while(true) {
				parent.colour++;
				parent.prev.colour--;
				parent.next.colour--;
				var child1 = parent.prev;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				var child2 = parent.next;
				if(child2.colour == -1) {
					this.__fix_neg_red(child2);
					break;
				} else if(child2.colour == 0) {
					if(child2.prev != null && child2.prev.colour == 0) {
						this.__fix_dbl_red(child2.prev);
						break;
					}
					if(child2.next != null && child2.next.colour == 0) {
						this.__fix_dbl_red(child2.next);
						break;
					}
				}
				if(parent.colour == 2) {
					if(parent.parent == null) {
						parent.colour = 1;
					} else {
						parent = parent.parent;
						continue;
					}
				}
				break;
			}
		}
	}
	var par = cur.parent;
	if(par == null) {
		this.parent = child;
	} else if(par.prev == cur) {
		par.prev = child;
	} else {
		par.next = child;
	}
	if(child != null) {
		child.parent = par;
	}
	cur.parent = cur.prev = cur.next = null;
	var o = cur;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = ZPP_Set_ZPP_SimpleEvent.zpp_pool;
	ZPP_Set_ZPP_SimpleEvent.zpp_pool = o;
};
ZPP_Set_ZPP_SimpleEvent.prototype.clear = function() {
	if(this.parent != null) {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) {
			cur = cur.prev;
		} else if(cur.next != null) {
			cur = cur.next;
		} else {
			var ret = cur.parent;
			if(ret != null) {
				if(cur == ret.prev) {
					ret.prev = null;
				} else {
					ret.next = null;
				}
				cur.parent = null;
			}
			var o = cur;
			o.data = null;
			o.lt = null;
			o.swapped = null;
			o.next = ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			ZPP_Set_ZPP_SimpleEvent.zpp_pool = o;
			cur = ret;
		}
		this.parent = null;
	}
};
ZPP_Set_ZPP_SimpleEvent.prototype.clear_with = function(lambda) {
	if(this.parent == null) {
		return;
	} else {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) {
			cur = cur.prev;
		} else if(cur.next != null) {
			cur = cur.next;
		} else {
			lambda(cur.data);
			var ret = cur.parent;
			if(ret != null) {
				if(cur == ret.prev) {
					ret.prev = null;
				} else {
					ret.next = null;
				}
				cur.parent = null;
			}
			var o = cur;
			o.data = null;
			o.lt = null;
			o.swapped = null;
			o.next = ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			ZPP_Set_ZPP_SimpleEvent.zpp_pool = o;
			cur = ret;
		}
		this.parent = null;
	}
};
ZPP_Set_ZPP_SimpleEvent.prototype.clear_node = function(node,lambda) {
	lambda(node.data);
	var ret = node.parent;
	if(ret != null) {
		if(node == ret.prev) {
			ret.prev = null;
		} else {
			ret.next = null;
		}
		node.parent = null;
	}
	node.data = null;
	node.lt = null;
	node.swapped = null;
	node.next = ZPP_Set_ZPP_SimpleEvent.zpp_pool;
	ZPP_Set_ZPP_SimpleEvent.zpp_pool = node;
	return ret;
};
ZPP_Set_ZPP_SimpleEvent.prototype.__fix_neg_red = function(negred) {
	var parent = negred.parent;
	var child;
	if(parent.prev == negred) {
		var nl = negred.prev;
		var nr = negred.next;
		var trl = nr.prev;
		var trr = nr.next;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		negred.next = trl;
		if(trl != null) {
			trl.parent = negred;
		}
		var t = parent.data;
		parent.data = nr.data;
		nr.data = t;
		if(this.swapped != null) {
			this.swapped(parent.data,nr.data);
		}
		nr.prev = trr;
		if(trr != null) {
			trr.parent = nr;
		}
		nr.next = parent.next;
		if(parent.next != null) {
			parent.next.parent = nr;
		}
		parent.next = nr;
		if(nr != null) {
			nr.parent = parent;
		}
		child = nl;
	} else {
		var nl1 = negred.next;
		var nr1 = negred.prev;
		var trl1 = nr1.next;
		var trr1 = nr1.prev;
		nl1.colour = 0;
		negred.colour = parent.colour = 1;
		negred.prev = trl1;
		if(trl1 != null) {
			trl1.parent = negred;
		}
		var t1 = parent.data;
		parent.data = nr1.data;
		nr1.data = t1;
		if(this.swapped != null) {
			this.swapped(parent.data,nr1.data);
		}
		nr1.next = trr1;
		if(trr1 != null) {
			trr1.parent = nr1;
		}
		nr1.prev = parent.prev;
		if(parent.prev != null) {
			parent.prev.parent = nr1;
		}
		parent.prev = nr1;
		if(nr1 != null) {
			nr1.parent = parent;
		}
		child = nl1;
	}
	if(child.prev != null && child.prev.colour == 0) {
		this.__fix_dbl_red(child.prev);
	} else if(child.next != null && child.next.colour == 0) {
		this.__fix_dbl_red(child.next);
	}
};
ZPP_Set_ZPP_SimpleEvent.prototype.__fix_dbl_red = function(x) {
	while(true) {
		var par = x.parent;
		var g = par.parent;
		if(g == null) {
			par.colour = 1;
			break;
		}
		var n1;
		var n2;
		var n3;
		var t1;
		var t2;
		var t3;
		var t4;
		if(par == g.prev) {
			n3 = g;
			t4 = g.next;
			if(x == par.prev) {
				n1 = x;
				n2 = par;
				t1 = x.prev;
				t2 = x.next;
				t3 = par.next;
			} else {
				n1 = par;
				n2 = x;
				t1 = par.prev;
				t2 = x.prev;
				t3 = x.next;
			}
		} else {
			n1 = g;
			t1 = g.prev;
			if(x == par.prev) {
				n2 = x;
				n3 = par;
				t2 = x.prev;
				t3 = x.next;
				t4 = par.next;
			} else {
				n2 = par;
				n3 = x;
				t2 = par.prev;
				t3 = x.prev;
				t4 = x.next;
			}
		}
		var par1 = g.parent;
		if(par1 == null) {
			this.parent = n2;
		} else if(par1.prev == g) {
			par1.prev = n2;
		} else {
			par1.next = n2;
		}
		if(n2 != null) {
			n2.parent = par1;
		}
		n1.prev = t1;
		if(t1 != null) {
			t1.parent = n1;
		}
		n1.next = t2;
		if(t2 != null) {
			t2.parent = n1;
		}
		n2.prev = n1;
		if(n1 != null) {
			n1.parent = n2;
		}
		n2.next = n3;
		if(n3 != null) {
			n3.parent = n2;
		}
		n3.prev = t3;
		if(t3 != null) {
			t3.parent = n3;
		}
		n3.next = t4;
		if(t4 != null) {
			t4.parent = n3;
		}
		n2.colour = g.colour - 1;
		n1.colour = 1;
		n3.colour = 1;
		if(n2 == this.parent) {
			this.parent.colour = 1;
		} else if(n2.colour == 0 && n2.parent.colour == 0) {
			x = n2;
			continue;
		}
		break;
	}
};
ZPP_Set_ZPP_SimpleEvent.prototype.try_insert_bool = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) {
			x = new ZPP_Set_ZPP_SimpleEvent();
		} else {
			x = ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
			x.next = null;
		}
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) {
					x = new ZPP_Set_ZPP_SimpleEvent();
				} else {
					x = ZPP_Set_ZPP_SimpleEvent.zpp_pool;
					ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) {
					x = new ZPP_Set_ZPP_SimpleEvent();
				} else {
					x = ZPP_Set_ZPP_SimpleEvent.zpp_pool;
					ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.next;
			}
		} else {
			break;
		}
	}
	if(x == null) {
		return false;
	} else {
		if(x.parent == null) {
			x.colour = 1;
		} else {
			x.colour = 0;
			if(x.parent.colour == 0) {
				this.__fix_dbl_red(x);
			}
		}
		return true;
	}
};
ZPP_Set_ZPP_SimpleEvent.prototype.try_insert = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) {
			x = new ZPP_Set_ZPP_SimpleEvent();
		} else {
			x = ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
			x.next = null;
		}
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) {
					x = new ZPP_Set_ZPP_SimpleEvent();
				} else {
					x = ZPP_Set_ZPP_SimpleEvent.zpp_pool;
					ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) {
					x = new ZPP_Set_ZPP_SimpleEvent();
				} else {
					x = ZPP_Set_ZPP_SimpleEvent.zpp_pool;
					ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.next;
			}
		} else {
			break;
		}
	}
	if(x == null) {
		return cur;
	} else {
		if(x.parent == null) {
			x.colour = 1;
		} else {
			x.colour = 0;
			if(x.parent.colour == 0) {
				this.__fix_dbl_red(x);
			}
		}
		return x;
	}
};
ZPP_Set_ZPP_SimpleEvent.prototype.insert = function(obj) {
	var x;
	if(ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) {
		x = new ZPP_Set_ZPP_SimpleEvent();
	} else {
		x = ZPP_Set_ZPP_SimpleEvent.zpp_pool;
		ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
		x.next = null;
	}
	x.data = obj;
	if(this.parent == null) {
		this.parent = x;
	} else {
		var cur = this.parent;
		while(true) if(this.lt(x.data,cur.data)) {
			if(cur.prev == null) {
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(cur.next == null) {
			cur.next = x;
			x.parent = cur;
			break;
		} else {
			cur = cur.next;
		}
	}
	if(x.parent == null) {
		x.colour = 1;
	} else {
		x.colour = 0;
		if(x.parent.colour == 0) {
			this.__fix_dbl_red(x);
		}
	}
	return x;
};
ZPP_Set_ZPP_SimpleEvent.prototype.__class__ = ZPP_Set_ZPP_SimpleEvent;
var ZPP_Set_ZPP_CbSet = zpp_nape.util.ZPP_Set_ZPP_CbSet = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
ZPP_Set_ZPP_CbSet.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_CbSet"];
ZPP_Set_ZPP_CbSet.prototype.free = function() {
	this.data = null;
	this.lt = null;
	this.swapped = null;
};
ZPP_Set_ZPP_CbSet.prototype.alloc = function() {
};
ZPP_Set_ZPP_CbSet.prototype.lt = null;
ZPP_Set_ZPP_CbSet.prototype.swapped = null;
ZPP_Set_ZPP_CbSet.prototype.data = null;
ZPP_Set_ZPP_CbSet.prototype.prev = null;
ZPP_Set_ZPP_CbSet.prototype.next = null;
ZPP_Set_ZPP_CbSet.prototype.parent = null;
ZPP_Set_ZPP_CbSet.prototype.colour = null;
ZPP_Set_ZPP_CbSet.prototype.verify = function() {
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			var prei = true;
			if(!this.empty()) {
				var set_ite1 = this.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var j = set_ite1.data;
					if(!prei) {
						if(!this.lt(i,j) && this.lt(j,i)) {
							return false;
						}
					} else if(i == j) {
						prei = false;
					} else if(!this.lt(j,i) && this.lt(i,j)) {
						return false;
					}
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return true;
};
ZPP_Set_ZPP_CbSet.prototype.empty = function() {
	return this.parent == null;
};
ZPP_Set_ZPP_CbSet.prototype.singular = function() {
	if(this.parent != null && this.parent.prev == null) {
		return this.parent.next == null;
	} else {
		return false;
	}
};
ZPP_Set_ZPP_CbSet.prototype.size = function() {
	var ret = 0;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			++ret;
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
ZPP_Set_ZPP_CbSet.prototype.has = function(obj) {
	return this.find(obj) != null;
};
ZPP_Set_ZPP_CbSet.prototype.find = function(obj) {
	var cur = this.parent;
	while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) {
		cur = cur.prev;
	} else {
		cur = cur.next;
	}
	return cur;
};
ZPP_Set_ZPP_CbSet.prototype.has_weak = function(obj) {
	return this.find_weak(obj) != null;
};
ZPP_Set_ZPP_CbSet.prototype.find_weak = function(obj) {
	var cur = this.parent;
	while(cur != null) if(this.lt(obj,cur.data)) {
		cur = cur.prev;
	} else if(this.lt(cur.data,obj)) {
		cur = cur.next;
	} else {
		break;
	}
	return cur;
};
ZPP_Set_ZPP_CbSet.prototype.lower_bound = function(obj) {
	var ret = null;
	if(!this.empty()) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var elt = set_ite.data;
			if(!this.lt(elt,obj)) {
				ret = elt;
				break;
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
};
ZPP_Set_ZPP_CbSet.prototype.first = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	return cur.data;
};
ZPP_Set_ZPP_CbSet.prototype.pop_front = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	var ret = cur.data;
	this.remove_node(cur);
	return ret;
};
ZPP_Set_ZPP_CbSet.prototype.remove = function(obj) {
	this.remove_node(this.find(obj));
};
ZPP_Set_ZPP_CbSet.prototype.successor_node = function(cur) {
	if(cur.next != null) {
		cur = cur.next;
		while(cur.prev != null) cur = cur.prev;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.prev != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
ZPP_Set_ZPP_CbSet.prototype.predecessor_node = function(cur) {
	if(cur.prev != null) {
		cur = cur.prev;
		while(cur.next != null) cur = cur.next;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.next != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
};
ZPP_Set_ZPP_CbSet.prototype.successor = function(obj) {
	var node = this.successor_node(this.find(obj));
	if(node == null) {
		return null;
	} else {
		return node.data;
	}
};
ZPP_Set_ZPP_CbSet.prototype.predecessor = function(obj) {
	var node = this.predecessor_node(this.find(obj));
	if(node == null) {
		return null;
	} else {
		return node.data;
	}
};
ZPP_Set_ZPP_CbSet.prototype.remove_node = function(cur) {
	if(cur.next != null && cur.prev != null) {
		var sm = cur.next;
		while(sm.prev != null) sm = sm.prev;
		var t = cur.data;
		cur.data = sm.data;
		sm.data = t;
		if(this.swapped != null) {
			this.swapped(cur.data,sm.data);
		}
		cur = sm;
	}
	var child = cur.prev == null?cur.next:cur.prev;
	if(cur.colour == 1) {
		if(cur.prev != null || cur.next != null) {
			child.colour = 1;
		} else if(cur.parent != null) {
			var parent = cur.parent;
			while(true) {
				parent.colour++;
				parent.prev.colour--;
				parent.next.colour--;
				var child1 = parent.prev;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				var child2 = parent.next;
				if(child2.colour == -1) {
					this.__fix_neg_red(child2);
					break;
				} else if(child2.colour == 0) {
					if(child2.prev != null && child2.prev.colour == 0) {
						this.__fix_dbl_red(child2.prev);
						break;
					}
					if(child2.next != null && child2.next.colour == 0) {
						this.__fix_dbl_red(child2.next);
						break;
					}
				}
				if(parent.colour == 2) {
					if(parent.parent == null) {
						parent.colour = 1;
					} else {
						parent = parent.parent;
						continue;
					}
				}
				break;
			}
		}
	}
	var par = cur.parent;
	if(par == null) {
		this.parent = child;
	} else if(par.prev == cur) {
		par.prev = child;
	} else {
		par.next = child;
	}
	if(child != null) {
		child.parent = par;
	}
	cur.parent = cur.prev = cur.next = null;
	var o = cur;
	o.data = null;
	o.lt = null;
	o.swapped = null;
	o.next = ZPP_Set_ZPP_CbSet.zpp_pool;
	ZPP_Set_ZPP_CbSet.zpp_pool = o;
};
ZPP_Set_ZPP_CbSet.prototype.clear = function() {
	if(this.parent != null) {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) {
			cur = cur.prev;
		} else if(cur.next != null) {
			cur = cur.next;
		} else {
			var ret = cur.parent;
			if(ret != null) {
				if(cur == ret.prev) {
					ret.prev = null;
				} else {
					ret.next = null;
				}
				cur.parent = null;
			}
			var o = cur;
			o.data = null;
			o.lt = null;
			o.swapped = null;
			o.next = ZPP_Set_ZPP_CbSet.zpp_pool;
			ZPP_Set_ZPP_CbSet.zpp_pool = o;
			cur = ret;
		}
		this.parent = null;
	}
};
ZPP_Set_ZPP_CbSet.prototype.clear_with = function(lambda) {
	if(this.parent == null) {
		return;
	} else {
		var cur = this.parent;
		while(cur != null) if(cur.prev != null) {
			cur = cur.prev;
		} else if(cur.next != null) {
			cur = cur.next;
		} else {
			lambda(cur.data);
			var ret = cur.parent;
			if(ret != null) {
				if(cur == ret.prev) {
					ret.prev = null;
				} else {
					ret.next = null;
				}
				cur.parent = null;
			}
			var o = cur;
			o.data = null;
			o.lt = null;
			o.swapped = null;
			o.next = ZPP_Set_ZPP_CbSet.zpp_pool;
			ZPP_Set_ZPP_CbSet.zpp_pool = o;
			cur = ret;
		}
		this.parent = null;
	}
};
ZPP_Set_ZPP_CbSet.prototype.clear_node = function(node,lambda) {
	lambda(node.data);
	var ret = node.parent;
	if(ret != null) {
		if(node == ret.prev) {
			ret.prev = null;
		} else {
			ret.next = null;
		}
		node.parent = null;
	}
	node.data = null;
	node.lt = null;
	node.swapped = null;
	node.next = ZPP_Set_ZPP_CbSet.zpp_pool;
	ZPP_Set_ZPP_CbSet.zpp_pool = node;
	return ret;
};
ZPP_Set_ZPP_CbSet.prototype.__fix_neg_red = function(negred) {
	var parent = negred.parent;
	var child;
	if(parent.prev == negred) {
		var nl = negred.prev;
		var nr = negred.next;
		var trl = nr.prev;
		var trr = nr.next;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		negred.next = trl;
		if(trl != null) {
			trl.parent = negred;
		}
		var t = parent.data;
		parent.data = nr.data;
		nr.data = t;
		if(this.swapped != null) {
			this.swapped(parent.data,nr.data);
		}
		nr.prev = trr;
		if(trr != null) {
			trr.parent = nr;
		}
		nr.next = parent.next;
		if(parent.next != null) {
			parent.next.parent = nr;
		}
		parent.next = nr;
		if(nr != null) {
			nr.parent = parent;
		}
		child = nl;
	} else {
		var nl1 = negred.next;
		var nr1 = negred.prev;
		var trl1 = nr1.next;
		var trr1 = nr1.prev;
		nl1.colour = 0;
		negred.colour = parent.colour = 1;
		negred.prev = trl1;
		if(trl1 != null) {
			trl1.parent = negred;
		}
		var t1 = parent.data;
		parent.data = nr1.data;
		nr1.data = t1;
		if(this.swapped != null) {
			this.swapped(parent.data,nr1.data);
		}
		nr1.next = trr1;
		if(trr1 != null) {
			trr1.parent = nr1;
		}
		nr1.prev = parent.prev;
		if(parent.prev != null) {
			parent.prev.parent = nr1;
		}
		parent.prev = nr1;
		if(nr1 != null) {
			nr1.parent = parent;
		}
		child = nl1;
	}
	if(child.prev != null && child.prev.colour == 0) {
		this.__fix_dbl_red(child.prev);
	} else if(child.next != null && child.next.colour == 0) {
		this.__fix_dbl_red(child.next);
	}
};
ZPP_Set_ZPP_CbSet.prototype.__fix_dbl_red = function(x) {
	while(true) {
		var par = x.parent;
		var g = par.parent;
		if(g == null) {
			par.colour = 1;
			break;
		}
		var n1;
		var n2;
		var n3;
		var t1;
		var t2;
		var t3;
		var t4;
		if(par == g.prev) {
			n3 = g;
			t4 = g.next;
			if(x == par.prev) {
				n1 = x;
				n2 = par;
				t1 = x.prev;
				t2 = x.next;
				t3 = par.next;
			} else {
				n1 = par;
				n2 = x;
				t1 = par.prev;
				t2 = x.prev;
				t3 = x.next;
			}
		} else {
			n1 = g;
			t1 = g.prev;
			if(x == par.prev) {
				n2 = x;
				n3 = par;
				t2 = x.prev;
				t3 = x.next;
				t4 = par.next;
			} else {
				n2 = par;
				n3 = x;
				t2 = par.prev;
				t3 = x.prev;
				t4 = x.next;
			}
		}
		var par1 = g.parent;
		if(par1 == null) {
			this.parent = n2;
		} else if(par1.prev == g) {
			par1.prev = n2;
		} else {
			par1.next = n2;
		}
		if(n2 != null) {
			n2.parent = par1;
		}
		n1.prev = t1;
		if(t1 != null) {
			t1.parent = n1;
		}
		n1.next = t2;
		if(t2 != null) {
			t2.parent = n1;
		}
		n2.prev = n1;
		if(n1 != null) {
			n1.parent = n2;
		}
		n2.next = n3;
		if(n3 != null) {
			n3.parent = n2;
		}
		n3.prev = t3;
		if(t3 != null) {
			t3.parent = n3;
		}
		n3.next = t4;
		if(t4 != null) {
			t4.parent = n3;
		}
		n2.colour = g.colour - 1;
		n1.colour = 1;
		n3.colour = 1;
		if(n2 == this.parent) {
			this.parent.colour = 1;
		} else if(n2.colour == 0 && n2.parent.colour == 0) {
			x = n2;
			continue;
		}
		break;
	}
};
ZPP_Set_ZPP_CbSet.prototype.try_insert_bool = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(ZPP_Set_ZPP_CbSet.zpp_pool == null) {
			x = new ZPP_Set_ZPP_CbSet();
		} else {
			x = ZPP_Set_ZPP_CbSet.zpp_pool;
			ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
			x.next = null;
		}
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(ZPP_Set_ZPP_CbSet.zpp_pool == null) {
					x = new ZPP_Set_ZPP_CbSet();
				} else {
					x = ZPP_Set_ZPP_CbSet.zpp_pool;
					ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(ZPP_Set_ZPP_CbSet.zpp_pool == null) {
					x = new ZPP_Set_ZPP_CbSet();
				} else {
					x = ZPP_Set_ZPP_CbSet.zpp_pool;
					ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.next;
			}
		} else {
			break;
		}
	}
	if(x == null) {
		return false;
	} else {
		if(x.parent == null) {
			x.colour = 1;
		} else {
			x.colour = 0;
			if(x.parent.colour == 0) {
				this.__fix_dbl_red(x);
			}
		}
		return true;
	}
};
ZPP_Set_ZPP_CbSet.prototype.try_insert = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		if(ZPP_Set_ZPP_CbSet.zpp_pool == null) {
			x = new ZPP_Set_ZPP_CbSet();
		} else {
			x = ZPP_Set_ZPP_CbSet.zpp_pool;
			ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
			x.next = null;
		}
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				if(ZPP_Set_ZPP_CbSet.zpp_pool == null) {
					x = new ZPP_Set_ZPP_CbSet();
				} else {
					x = ZPP_Set_ZPP_CbSet.zpp_pool;
					ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				if(ZPP_Set_ZPP_CbSet.zpp_pool == null) {
					x = new ZPP_Set_ZPP_CbSet();
				} else {
					x = ZPP_Set_ZPP_CbSet.zpp_pool;
					ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
					x.next = null;
				}
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.next;
			}
		} else {
			break;
		}
	}
	if(x == null) {
		return cur;
	} else {
		if(x.parent == null) {
			x.colour = 1;
		} else {
			x.colour = 0;
			if(x.parent.colour == 0) {
				this.__fix_dbl_red(x);
			}
		}
		return x;
	}
};
ZPP_Set_ZPP_CbSet.prototype.insert = function(obj) {
	var x;
	if(ZPP_Set_ZPP_CbSet.zpp_pool == null) {
		x = new ZPP_Set_ZPP_CbSet();
	} else {
		x = ZPP_Set_ZPP_CbSet.zpp_pool;
		ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
		x.next = null;
	}
	x.data = obj;
	if(this.parent == null) {
		this.parent = x;
	} else {
		var cur = this.parent;
		while(true) if(this.lt(x.data,cur.data)) {
			if(cur.prev == null) {
				cur.prev = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.prev;
			}
		} else if(cur.next == null) {
			cur.next = x;
			x.parent = cur;
			break;
		} else {
			cur = cur.next;
		}
	}
	if(x.parent == null) {
		x.colour = 1;
	} else {
		x.colour = 0;
		if(x.parent.colour == 0) {
			this.__fix_dbl_red(x);
		}
	}
	return x;
};
ZPP_Set_ZPP_CbSet.prototype.__class__ = ZPP_Set_ZPP_CbSet;
{
	String.prototype.__class__ = String;
	String.__name__ = true;
	Array.__name__ = true;
	var Int = { __name__ : ["Int"]};
	var Dynamic = { __name__ : ["Dynamic"]};
	var Float = Number;
	Float.__name__ = ["Float"];
	var Bool = Boolean;
	Bool.__ename__ = ["Bool"];
	var Class = { __name__ : ["Class"]};
	var Enum = { };
};
js.Boot.__toStr = { }.toString;
Config.epsilon = 1e-8;
Config.fluidAngularDragFriction = 2.5;
Config.fluidAngularDrag = 100;
Config.fluidVacuumDrag = 0.5;
Config.fluidLinearDrag = 0.5;
Config.collisionSlop = 0.2;
Config.collisionSlopCCD = 0.5;
Config.distanceThresholdCCD = 0.05;
Config.staticCCDLinearThreshold = 0.05;
Config.staticCCDAngularThreshold = 0.005;
Config.bulletCCDLinearThreshold = 0.125;
Config.bulletCCDAngularThreshold = 0.0125;
Config.dynamicSweepLinearThreshold = 17;
Config.dynamicSweepAngularThreshold = 0.6;
Config.angularCCDSlipScale = 0.75;
Config.arbiterExpirationDelay = 6;
Config.staticFrictionThreshold = 2;
Config.elasticThreshold = 20;
Config.sleepDelay = 60;
Config.linearSleepThreshold = 0.2;
Config.angularSleepThreshold = 0.4;
Config.contactBiasCoef = 0.3;
Config.contactStaticBiasCoef = 0.6;
Config.contactContinuousBiasCoef = 0.4;
Config.contactContinuousStaticBiasCoef = 0.5;
Config.constraintLinearSlop = 0.1;
Config.constraintAngularSlop = 1e-3;
Config.illConditionedThreshold = 2e+8;
CbTypeIterator.zpp_pool = null;
ListenerIterator.zpp_pool = null;
Constraint.zpp_internalAlloc = false;
ConstraintIterator.zpp_pool = null;
ArbiterIterator.zpp_pool = null;
ContactIterator.zpp_pool = null;
InteractionGroupIterator.zpp_pool = null;
ConvexResultIterator.zpp_pool = null;
GeomPolyIterator.zpp_pool = null;
RayResultIterator.zpp_pool = null;
Vec2Iterator.zpp_pool = null;
Interactor.zpp_internalAlloc = false;
BodyIterator.zpp_pool = null;
CompoundIterator.zpp_pool = null;
InteractorIterator.zpp_pool = null;
Shape.zpp_internalAlloc = false;
EdgeIterator.zpp_pool = null;
ShapeIterator.zpp_pool = null;
zpp_nape.ZPP_Const.FMAX = 1e100;
zpp_nape.ZPP_ID._Constraint = 0;
zpp_nape.ZPP_ID._Interactor = 0;
zpp_nape.ZPP_ID._CbType = 0;
zpp_nape.ZPP_ID._CbSet = 0;
zpp_nape.ZPP_ID._Listener = 0;
zpp_nape.ZPP_ID._ZPP_SimpleVert = 0;
zpp_nape.ZPP_ID._ZPP_SimpleSeg = 0;
zpp_nape.ZPP_ID._Space = 0;
zpp_nape.ZPP_ID._InteractionGroup = 0;
ZPP_Callback.internal = false;
ZPP_Callback.zpp_pool = null;
ZPP_CbSet.zpp_pool = null;
ZPP_CbSetPair.zpp_pool = null;
ZPP_CbType.ANY_SHAPE = new CbType();
ZPP_CbType.ANY_BODY = new CbType();
ZPP_CbType.ANY_COMPOUND = new CbType();
ZPP_CbType.ANY_CONSTRAINT = new CbType();
ZPP_Flags.internal = false;
ZPP_Flags.id_ImmState_ACCEPT = 1;
ZPP_Flags.id_ImmState_IGNORE = 2;
ZPP_Flags.id_ImmState_ALWAYS = 4;
ZPP_Flags.id_GravMassMode_DEFAULT = 0;
ZPP_Flags.id_GravMassMode_FIXED = 1;
ZPP_Flags.id_GravMassMode_SCALED = 2;
ZPP_Flags.id_InertiaMode_DEFAULT = 0;
ZPP_Flags.id_InertiaMode_FIXED = 1;
ZPP_Flags.id_MassMode_DEFAULT = 0;
ZPP_Flags.id_MassMode_FIXED = 1;
ZPP_Flags.id_BodyType_STATIC = 1;
ZPP_Flags.id_BodyType_DYNAMIC = 2;
ZPP_Flags.id_BodyType_KINEMATIC = 3;
ZPP_Flags.id_ListenerType_BODY = 0;
ZPP_Flags.id_PreFlag_ACCEPT = 1;
ZPP_Flags.id_ListenerType_CONSTRAINT = 1;
ZPP_Flags.id_PreFlag_IGNORE = 2;
ZPP_Flags.id_ListenerType_INTERACTION = 2;
ZPP_Flags.id_PreFlag_ACCEPT_ONCE = 3;
ZPP_Flags.id_ListenerType_PRE = 3;
ZPP_Flags.id_PreFlag_IGNORE_ONCE = 4;
ZPP_Flags.id_CbEvent_BEGIN = 0;
ZPP_Flags.id_InteractionType_COLLISION = 1;
ZPP_Flags.id_CbEvent_ONGOING = 6;
ZPP_Flags.id_InteractionType_SENSOR = 2;
ZPP_Flags.id_CbEvent_END = 1;
ZPP_Flags.id_InteractionType_FLUID = 4;
ZPP_Flags.id_CbEvent_WAKE = 2;
ZPP_Flags.id_InteractionType_ANY = 7;
ZPP_Flags.id_CbEvent_SLEEP = 3;
ZPP_Flags.id_CbEvent_BREAK = 4;
ZPP_Flags.id_CbEvent_PRE = 5;
ZPP_Flags.id_Winding_UNDEFINED = 0;
ZPP_Flags.id_Winding_CLOCKWISE = 1;
ZPP_Flags.id_Winding_ANTICLOCKWISE = 2;
ZPP_Flags.id_ValidationResult_VALID = 0;
ZPP_Flags.id_ValidationResult_DEGENERATE = 1;
ZPP_Flags.id_ValidationResult_CONCAVE = 2;
ZPP_Flags.id_ValidationResult_SELF_INTERSECTING = 3;
ZPP_Flags.id_ShapeType_CIRCLE = 0;
ZPP_Flags.id_ShapeType_POLYGON = 1;
ZPP_Flags.id_Broadphase_DYNAMIC_AABB_TREE = 0;
ZPP_Flags.id_Broadphase_SWEEP_AND_PRUNE = 1;
ZPP_Flags.id_ArbiterType_COLLISION = 1;
ZPP_Flags.id_ArbiterType_SENSOR = 2;
ZPP_Flags.id_ArbiterType_FLUID = 4;
ZPP_Listener.internal = false;
ZPP_Listener.types = (function($this) {
	var $r;
	if(ZPP_Flags.ListenerType_BODY == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ListenerType_BODY = new ListenerType();
		ZPP_Flags.internal = false;
	}
	var tmp = ZPP_Flags.ListenerType_BODY;
	if(ZPP_Flags.ListenerType_CONSTRAINT == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ListenerType_CONSTRAINT = new ListenerType();
		ZPP_Flags.internal = false;
	}
	var tmp1 = ZPP_Flags.ListenerType_CONSTRAINT;
	if(ZPP_Flags.ListenerType_INTERACTION == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ListenerType_INTERACTION = new ListenerType();
		ZPP_Flags.internal = false;
	}
	var tmp2 = ZPP_Flags.ListenerType_INTERACTION;
	if(ZPP_Flags.ListenerType_PRE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ListenerType_PRE = new ListenerType();
		ZPP_Flags.internal = false;
	}
	$r = [tmp,tmp1,tmp2,ZPP_Flags.ListenerType_PRE];
	return $r;
}(this));
ZPP_Listener.events = (function($this) {
	var $r;
	if(ZPP_Flags.CbEvent_BEGIN == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.CbEvent_BEGIN = new CbEvent();
		ZPP_Flags.internal = false;
	}
	var tmp = ZPP_Flags.CbEvent_BEGIN;
	if(ZPP_Flags.CbEvent_END == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.CbEvent_END = new CbEvent();
		ZPP_Flags.internal = false;
	}
	var tmp1 = ZPP_Flags.CbEvent_END;
	if(ZPP_Flags.CbEvent_WAKE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.CbEvent_WAKE = new CbEvent();
		ZPP_Flags.internal = false;
	}
	var tmp2 = ZPP_Flags.CbEvent_WAKE;
	if(ZPP_Flags.CbEvent_SLEEP == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.CbEvent_SLEEP = new CbEvent();
		ZPP_Flags.internal = false;
	}
	var tmp3 = ZPP_Flags.CbEvent_SLEEP;
	if(ZPP_Flags.CbEvent_BREAK == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.CbEvent_BREAK = new CbEvent();
		ZPP_Flags.internal = false;
	}
	var tmp4 = ZPP_Flags.CbEvent_BREAK;
	if(ZPP_Flags.CbEvent_PRE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.CbEvent_PRE = new CbEvent();
		ZPP_Flags.internal = false;
	}
	var tmp5 = ZPP_Flags.CbEvent_PRE;
	if(ZPP_Flags.CbEvent_ONGOING == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.CbEvent_ONGOING = new CbEvent();
		ZPP_Flags.internal = false;
	}
	$r = [tmp,tmp1,tmp2,tmp3,tmp4,tmp5,ZPP_Flags.CbEvent_ONGOING];
	return $r;
}(this));
ZPP_InteractionListener.UCbSet = new ZNPList_ZPP_CbSet();
ZPP_InteractionListener.VCbSet = new ZNPList_ZPP_CbSet();
ZPP_InteractionListener.WCbSet = new ZNPList_ZPP_CbSet();
ZPP_InteractionListener.UCbType = new ZNPList_ZPP_CbType();
ZPP_InteractionListener.VCbType = new ZNPList_ZPP_CbType();
ZPP_InteractionListener.WCbType = new ZNPList_ZPP_CbType();
ZPP_Arbiter.internal = false;
ZPP_Arbiter.COL = 1;
ZPP_Arbiter.FLUID = 4;
ZPP_Arbiter.SENSOR = 2;
ZPP_Arbiter.types = (function($this) {
	var $r;
	if(ZPP_Flags.ArbiterType_COLLISION == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ArbiterType_COLLISION = new ArbiterType();
		ZPP_Flags.internal = false;
	}
	var tmp = ZPP_Flags.ArbiterType_COLLISION;
	if(ZPP_Flags.ArbiterType_SENSOR == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ArbiterType_SENSOR = new ArbiterType();
		ZPP_Flags.internal = false;
	}
	var tmp1 = ZPP_Flags.ArbiterType_SENSOR;
	if(ZPP_Flags.ArbiterType_FLUID == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ArbiterType_FLUID = new ArbiterType();
		ZPP_Flags.internal = false;
	}
	$r = [null,tmp,tmp1,null,ZPP_Flags.ArbiterType_FLUID];
	return $r;
}(this));
ZPP_SensorArbiter.zpp_pool = null;
ZPP_FluidArbiter.zpp_pool = null;
ZPP_ColArbiter.FACE1 = 0;
ZPP_ColArbiter.FACE2 = 1;
ZPP_ColArbiter.CIRCLE = 2;
ZPP_ColArbiter.zpp_pool = null;
ZPP_Contact.internal = false;
ZPP_Contact.zpp_pool = null;
ZPP_InteractionFilter.zpp_pool = null;
ZPP_InteractionGroup.SHAPE = 1;
ZPP_InteractionGroup.BODY = 2;
ZPP_AABB.zpp_pool = null;
ZPP_Collide.flowpoly = new ZNPList_ZPP_Vec2();
ZPP_Collide.flowsegs = new ZNPList_ZPP_Vec2();
ZPP_ConvexRayResult.convexPool = null;
ZPP_ConvexRayResult.rayPool = null;
ZPP_ConvexRayResult.internal = false;
ZPP_CutVert.zpp_pool = null;
ZPP_CutInt.zpp_pool = null;
ZPP_Cutter.ints = null;
ZPP_Cutter.paths = null;
ZPP_GeomVert.zpp_pool = null;
ZPP_GeomVertexIterator.zpp_pool = null;
ZPP_GeomVertexIterator.internal = false;
ZPP_MarchSpan.zpp_pool = null;
ZPP_MarchPair.zpp_pool = null;
ZPP_MarchingSquares.me = new ZPP_MarchingSquares();
ZPP_MarchingSquares.look_march = [-1,224,56,216,14,-1,54,214,131,99,-1,91,141,109,181,85];
ZPP_Mat23.zpp_pool = null;
ZPP_Monotone.queue = null;
ZPP_Monotone.edges = null;
ZPP_PartitionVertex.nextId = 0;
ZPP_PartitionVertex.zpp_pool = null;
ZPP_PartitionedPoly.zpp_pool = null;
ZPP_Ray.internal = false;
ZPP_SimpleVert.zpp_pool = null;
ZPP_SimpleSeg.zpp_pool = null;
ZPP_SimpleEvent.zpp_pool = null;
ZPP_Simple.sweep = null;
ZPP_Simple.inthash = null;
ZPP_Simple.vertices = null;
ZPP_Simple.queue = null;
ZPP_Simple.ints = null;
ZPP_Simple.list_vertices = null;
ZPP_Simple.list_queue = null;
ZPP_SimplifyV.zpp_pool = null;
ZPP_SimplifyP.zpp_pool = null;
ZPP_Simplify.stack = null;
ZPP_ToiEvent.zpp_pool = null;
ZPP_PartitionPair.zpp_pool = null;
ZPP_Triangular.queue = null;
ZPP_Triangular.stack = null;
ZPP_Triangular.edgeSet = null;
ZPP_Vec2.zpp_pool = null;
ZPP_Body.types = (function($this) {
	var $r;
	if(ZPP_Flags.BodyType_STATIC == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.BodyType_STATIC = new BodyType();
		ZPP_Flags.internal = false;
	}
	var tmp = ZPP_Flags.BodyType_STATIC;
	if(ZPP_Flags.BodyType_DYNAMIC == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.BodyType_DYNAMIC = new BodyType();
		ZPP_Flags.internal = false;
	}
	var tmp1 = ZPP_Flags.BodyType_DYNAMIC;
	if(ZPP_Flags.BodyType_KINEMATIC == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.BodyType_KINEMATIC = new BodyType();
		ZPP_Flags.internal = false;
	}
	$r = [null,tmp,tmp1,ZPP_Flags.BodyType_KINEMATIC];
	return $r;
}(this));
ZPP_Body.bodystack = null;
ZPP_Body.bodyset = null;
ZPP_Body.cur_graph_depth = 0;
ZPP_FluidProperties.zpp_pool = null;
ZPP_Material.zpp_pool = null;
ZPP_Material.WAKE = 1;
ZPP_Material.PROPS = 2;
ZPP_Material.ANGDRAG = 4;
ZPP_Material.ARBITERS = 8;
ZPP_Shape.types = (function($this) {
	var $r;
	if(ZPP_Flags.ShapeType_CIRCLE == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ShapeType_CIRCLE = new ShapeType();
		ZPP_Flags.internal = false;
	}
	var tmp = ZPP_Flags.ShapeType_CIRCLE;
	if(ZPP_Flags.ShapeType_POLYGON == null) {
		ZPP_Flags.internal = true;
		ZPP_Flags.ShapeType_POLYGON = new ShapeType();
		ZPP_Flags.internal = false;
	}
	$r = [tmp,ZPP_Flags.ShapeType_POLYGON];
	return $r;
}(this));
ZPP_Edge.zpp_pool = null;
ZPP_Edge.internal = false;
ZPP_AABBNode.zpp_pool = null;
ZPP_AABBPair.zpp_pool = null;
ZPP_AABBTree.tmpaabb = new ZPP_AABB();
ZPP_DynAABBPhase.FATTEN = 3.0;
ZPP_DynAABBPhase.VEL_STEPS = 2.0;
ZPP_Island.zpp_pool = null;
ZPP_Component.zpp_pool = null;
ZPP_CallbackSet.zpp_pool = null;
ZPP_SweepData.zpp_pool = null;
Hashable2_Boolfalse.zpp_pool = null;
ZNPNode_ZPP_CbType.zpp_pool = null;
ZNPNode_ZPP_CallbackSet.zpp_pool = null;
ZNPNode_ZPP_Shape.zpp_pool = null;
ZNPNode_ZPP_Body.zpp_pool = null;
ZNPNode_ZPP_Constraint.zpp_pool = null;
ZNPNode_ZPP_Compound.zpp_pool = null;
ZNPNode_ZPP_Arbiter.zpp_pool = null;
ZNPNode_ZPP_InteractionListener.zpp_pool = null;
ZNPNode_ZPP_CbSet.zpp_pool = null;
ZNPNode_ZPP_Interactor.zpp_pool = null;
ZNPNode_ZPP_BodyListener.zpp_pool = null;
ZNPNode_ZPP_CbSetPair.zpp_pool = null;
ZNPNode_ZPP_ConstraintListener.zpp_pool = null;
ZNPNode_ZPP_CutInt.zpp_pool = null;
ZNPNode_ZPP_CutVert.zpp_pool = null;
ZNPNode_ZPP_PartitionVertex.zpp_pool = null;
ZNPNode_ZPP_SimplifyP.zpp_pool = null;
ZNPNode_ZPP_PartitionedPoly.zpp_pool = null;
ZNPNode_ZPP_GeomVert.zpp_pool = null;
ZNPNode_ZPP_SimpleVert.zpp_pool = null;
ZNPNode_ZPP_SimpleEvent.zpp_pool = null;
ZNPNode_ZPP_Vec2.zpp_pool = null;
ZNPNode_ZPP_AABBPair.zpp_pool = null;
ZNPNode_ZPP_Edge.zpp_pool = null;
ZNPNode_ZPP_AABBNode.zpp_pool = null;
ZNPNode_ZPP_Component.zpp_pool = null;
ZNPNode_ZPP_FluidArbiter.zpp_pool = null;
ZNPNode_ZPP_SensorArbiter.zpp_pool = null;
ZNPNode_ZPP_Listener.zpp_pool = null;
ZNPNode_ZPP_ColArbiter.zpp_pool = null;
ZNPNode_ZPP_InteractionGroup.zpp_pool = null;
ZNPNode_ZPP_ToiEvent.zpp_pool = null;
ZNPNode_ConvexResult.zpp_pool = null;
ZNPNode_ZPP_GeomPoly.zpp_pool = null;
ZNPNode_RayResult.zpp_pool = null;
ZPP_ConstraintList.internal = false;
ZPP_BodyList.internal = false;
ZPP_InteractorList.internal = false;
ZPP_CompoundList.internal = false;
ZPP_ListenerList.internal = false;
ZPP_CbTypeList.internal = false;
ZPP_Vec2List.internal = false;
ZPP_GeomPolyList.internal = false;
ZPP_RayResultList.internal = false;
ZPP_ConvexResultList.internal = false;
ZPP_EdgeList.internal = false;
ZPP_ShapeList.internal = false;
ZPP_InteractionGroupList.internal = false;
ZPP_ArbiterList.internal = false;
ZPP_ContactList.internal = false;
ZPP_PubPool.poolGeomPoly = null;
ZPP_PubPool.nextGeomPoly = null;
ZPP_PubPool.poolVec2 = null;
ZPP_PubPool.nextVec2 = null;
ZPP_PubPool.poolVec3 = null;
ZPP_PubPool.nextVec3 = null;
ZPP_Set_ZPP_Body.zpp_pool = null;
ZPP_Set_ZPP_CbSetPair.zpp_pool = null;
ZPP_Set_ZPP_PartitionVertex.zpp_pool = null;
ZPP_Set_ZPP_PartitionPair.zpp_pool = null;
ZPP_Set_ZPP_SimpleVert.zpp_pool = null;
ZPP_Set_ZPP_SimpleSeg.zpp_pool = null;
ZPP_Set_ZPP_SimpleEvent.zpp_pool = null;
ZPP_Set_ZPP_CbSet.zpp_pool = null;

Object.defineProperty(Callback.prototype, "event", {get: Callback.prototype.get_event});
Object.defineProperty(Callback.prototype, "listener", {get: Callback.prototype.get_listener});
Object.defineProperty(BodyCallback.prototype, "body", {get: BodyCallback.prototype.get_body});
Object.defineProperty(Listener.prototype, "type", {get: Listener.prototype.get_type});
Object.defineProperty(Listener.prototype, "event", {get: Listener.prototype.get_event, set: Listener.prototype.set_event});
Object.defineProperty(Listener.prototype, "precedence", {get: Listener.prototype.get_precedence, set: Listener.prototype.set_precedence});
Object.defineProperty(Listener.prototype, "space", {get: Listener.prototype.get_space, set: Listener.prototype.set_space});
Object.defineProperty(BodyListener.prototype, "options", {get: BodyListener.prototype.get_options, set: BodyListener.prototype.set_options});
Object.defineProperty(BodyListener.prototype, "handler", {get: BodyListener.prototype.get_handler, set: BodyListener.prototype.set_handler});
Object.defineProperty(CbType.prototype, "id", {get: CbType.prototype.get_id});
Object.defineProperty(CbType.prototype, "userData", {get: CbType.prototype.get_userData});
Object.defineProperty(CbType.prototype, "interactors", {get: CbType.prototype.get_interactors});
Object.defineProperty(CbType.prototype, "constraints", {get: CbType.prototype.get_constraints});
Object.defineProperty(CbTypeList.prototype, "length", {get: CbTypeList.prototype.get_length});
Object.defineProperty(ConstraintCallback.prototype, "constraint", {get: ConstraintCallback.prototype.get_constraint});
Object.defineProperty(ConstraintListener.prototype, "options", {get: ConstraintListener.prototype.get_options, set: ConstraintListener.prototype.set_options});
Object.defineProperty(ConstraintListener.prototype, "handler", {get: ConstraintListener.prototype.get_handler, set: ConstraintListener.prototype.set_handler});
Object.defineProperty(InteractionCallback.prototype, "int1", {get: InteractionCallback.prototype.get_int1});
Object.defineProperty(InteractionCallback.prototype, "int2", {get: InteractionCallback.prototype.get_int2});
Object.defineProperty(InteractionCallback.prototype, "arbiters", {get: InteractionCallback.prototype.get_arbiters});
Object.defineProperty(InteractionListener.prototype, "options1", {get: InteractionListener.prototype.get_options1, set: InteractionListener.prototype.set_options1});
Object.defineProperty(InteractionListener.prototype, "options2", {get: InteractionListener.prototype.get_options2, set: InteractionListener.prototype.set_options2});
Object.defineProperty(InteractionListener.prototype, "interactionType", {get: InteractionListener.prototype.get_interactionType, set: InteractionListener.prototype.set_interactionType});
Object.defineProperty(InteractionListener.prototype, "handler", {get: InteractionListener.prototype.get_handler, set: InteractionListener.prototype.set_handler});
Object.defineProperty(InteractionListener.prototype, "allowSleepingCallbacks", {get: InteractionListener.prototype.get_allowSleepingCallbacks, set: InteractionListener.prototype.set_allowSleepingCallbacks});
Object.defineProperty(ListenerList.prototype, "length", {get: ListenerList.prototype.get_length});
Object.defineProperty(OptionType.prototype, "includes", {get: OptionType.prototype.get_includes});
Object.defineProperty(OptionType.prototype, "excludes", {get: OptionType.prototype.get_excludes});
Object.defineProperty(PreCallback.prototype, "arbiter", {get: PreCallback.prototype.get_arbiter});
Object.defineProperty(PreCallback.prototype, "int1", {get: PreCallback.prototype.get_int1});
Object.defineProperty(PreCallback.prototype, "int2", {get: PreCallback.prototype.get_int2});
Object.defineProperty(PreCallback.prototype, "swapped", {get: PreCallback.prototype.get_swapped});
Object.defineProperty(PreListener.prototype, "options1", {get: PreListener.prototype.get_options1, set: PreListener.prototype.set_options1});
Object.defineProperty(PreListener.prototype, "options2", {get: PreListener.prototype.get_options2, set: PreListener.prototype.set_options2});
Object.defineProperty(PreListener.prototype, "handler", {get: PreListener.prototype.get_handler, set: PreListener.prototype.set_handler});
Object.defineProperty(PreListener.prototype, "pure", {get: PreListener.prototype.get_pure, set: PreListener.prototype.set_pure});
Object.defineProperty(PreListener.prototype, "interactionType", {get: PreListener.prototype.get_interactionType, set: PreListener.prototype.set_interactionType});
Object.defineProperty(Constraint.prototype, "userData", {get: Constraint.prototype.get_userData});
Object.defineProperty(Constraint.prototype, "compound", {get: Constraint.prototype.get_compound, set: Constraint.prototype.set_compound});
Object.defineProperty(Constraint.prototype, "space", {get: Constraint.prototype.get_space, set: Constraint.prototype.set_space});
Object.defineProperty(Constraint.prototype, "isSleeping", {get: Constraint.prototype.get_isSleeping});
Object.defineProperty(Constraint.prototype, "active", {get: Constraint.prototype.get_active, set: Constraint.prototype.set_active});
Object.defineProperty(Constraint.prototype, "ignore", {get: Constraint.prototype.get_ignore, set: Constraint.prototype.set_ignore});
Object.defineProperty(Constraint.prototype, "stiff", {get: Constraint.prototype.get_stiff, set: Constraint.prototype.set_stiff});
Object.defineProperty(Constraint.prototype, "frequency", {get: Constraint.prototype.get_frequency, set: Constraint.prototype.set_frequency});
Object.defineProperty(Constraint.prototype, "damping", {get: Constraint.prototype.get_damping, set: Constraint.prototype.set_damping});
Object.defineProperty(Constraint.prototype, "maxForce", {get: Constraint.prototype.get_maxForce, set: Constraint.prototype.set_maxForce});
Object.defineProperty(Constraint.prototype, "maxError", {get: Constraint.prototype.get_maxError, set: Constraint.prototype.set_maxError});
Object.defineProperty(Constraint.prototype, "breakUnderForce", {get: Constraint.prototype.get_breakUnderForce, set: Constraint.prototype.set_breakUnderForce});
Object.defineProperty(Constraint.prototype, "breakUnderError", {get: Constraint.prototype.get_breakUnderError, set: Constraint.prototype.set_breakUnderError});
Object.defineProperty(Constraint.prototype, "removeOnBreak", {get: Constraint.prototype.get_removeOnBreak, set: Constraint.prototype.set_removeOnBreak});
Object.defineProperty(Constraint.prototype, "cbTypes", {get: Constraint.prototype.get_cbTypes});
Object.defineProperty(AngleJoint.prototype, "body1", {get: AngleJoint.prototype.get_body1, set: AngleJoint.prototype.set_body1});
Object.defineProperty(AngleJoint.prototype, "body2", {get: AngleJoint.prototype.get_body2, set: AngleJoint.prototype.set_body2});
Object.defineProperty(AngleJoint.prototype, "jointMin", {get: AngleJoint.prototype.get_jointMin, set: AngleJoint.prototype.set_jointMin});
Object.defineProperty(AngleJoint.prototype, "jointMax", {get: AngleJoint.prototype.get_jointMax, set: AngleJoint.prototype.set_jointMax});
Object.defineProperty(AngleJoint.prototype, "ratio", {get: AngleJoint.prototype.get_ratio, set: AngleJoint.prototype.set_ratio});
Object.defineProperty(ConstraintList.prototype, "length", {get: ConstraintList.prototype.get_length});
Object.defineProperty(DistanceJoint.prototype, "body1", {get: DistanceJoint.prototype.get_body1, set: DistanceJoint.prototype.set_body1});
Object.defineProperty(DistanceJoint.prototype, "body2", {get: DistanceJoint.prototype.get_body2, set: DistanceJoint.prototype.set_body2});
Object.defineProperty(DistanceJoint.prototype, "anchor1", {get: DistanceJoint.prototype.get_anchor1, set: DistanceJoint.prototype.set_anchor1});
Object.defineProperty(DistanceJoint.prototype, "anchor2", {get: DistanceJoint.prototype.get_anchor2, set: DistanceJoint.prototype.set_anchor2});
Object.defineProperty(DistanceJoint.prototype, "jointMin", {get: DistanceJoint.prototype.get_jointMin, set: DistanceJoint.prototype.set_jointMin});
Object.defineProperty(DistanceJoint.prototype, "jointMax", {get: DistanceJoint.prototype.get_jointMax, set: DistanceJoint.prototype.set_jointMax});
Object.defineProperty(LineJoint.prototype, "body1", {get: LineJoint.prototype.get_body1, set: LineJoint.prototype.set_body1});
Object.defineProperty(LineJoint.prototype, "body2", {get: LineJoint.prototype.get_body2, set: LineJoint.prototype.set_body2});
Object.defineProperty(LineJoint.prototype, "anchor1", {get: LineJoint.prototype.get_anchor1, set: LineJoint.prototype.set_anchor1});
Object.defineProperty(LineJoint.prototype, "anchor2", {get: LineJoint.prototype.get_anchor2, set: LineJoint.prototype.set_anchor2});
Object.defineProperty(LineJoint.prototype, "direction", {get: LineJoint.prototype.get_direction, set: LineJoint.prototype.set_direction});
Object.defineProperty(LineJoint.prototype, "jointMin", {get: LineJoint.prototype.get_jointMin, set: LineJoint.prototype.set_jointMin});
Object.defineProperty(LineJoint.prototype, "jointMax", {get: LineJoint.prototype.get_jointMax, set: LineJoint.prototype.set_jointMax});
Object.defineProperty(MotorJoint.prototype, "body1", {get: MotorJoint.prototype.get_body1, set: MotorJoint.prototype.set_body1});
Object.defineProperty(MotorJoint.prototype, "body2", {get: MotorJoint.prototype.get_body2, set: MotorJoint.prototype.set_body2});
Object.defineProperty(MotorJoint.prototype, "ratio", {get: MotorJoint.prototype.get_ratio, set: MotorJoint.prototype.set_ratio});
Object.defineProperty(MotorJoint.prototype, "rate", {get: MotorJoint.prototype.get_rate, set: MotorJoint.prototype.set_rate});
Object.defineProperty(PivotJoint.prototype, "body1", {get: PivotJoint.prototype.get_body1, set: PivotJoint.prototype.set_body1});
Object.defineProperty(PivotJoint.prototype, "body2", {get: PivotJoint.prototype.get_body2, set: PivotJoint.prototype.set_body2});
Object.defineProperty(PivotJoint.prototype, "anchor1", {get: PivotJoint.prototype.get_anchor1, set: PivotJoint.prototype.set_anchor1});
Object.defineProperty(PivotJoint.prototype, "anchor2", {get: PivotJoint.prototype.get_anchor2, set: PivotJoint.prototype.set_anchor2});
Object.defineProperty(PulleyJoint.prototype, "body1", {get: PulleyJoint.prototype.get_body1, set: PulleyJoint.prototype.set_body1});
Object.defineProperty(PulleyJoint.prototype, "body2", {get: PulleyJoint.prototype.get_body2, set: PulleyJoint.prototype.set_body2});
Object.defineProperty(PulleyJoint.prototype, "body3", {get: PulleyJoint.prototype.get_body3, set: PulleyJoint.prototype.set_body3});
Object.defineProperty(PulleyJoint.prototype, "body4", {get: PulleyJoint.prototype.get_body4, set: PulleyJoint.prototype.set_body4});
Object.defineProperty(PulleyJoint.prototype, "anchor1", {get: PulleyJoint.prototype.get_anchor1, set: PulleyJoint.prototype.set_anchor1});
Object.defineProperty(PulleyJoint.prototype, "anchor2", {get: PulleyJoint.prototype.get_anchor2, set: PulleyJoint.prototype.set_anchor2});
Object.defineProperty(PulleyJoint.prototype, "anchor3", {get: PulleyJoint.prototype.get_anchor3, set: PulleyJoint.prototype.set_anchor3});
Object.defineProperty(PulleyJoint.prototype, "anchor4", {get: PulleyJoint.prototype.get_anchor4, set: PulleyJoint.prototype.set_anchor4});
Object.defineProperty(PulleyJoint.prototype, "jointMin", {get: PulleyJoint.prototype.get_jointMin, set: PulleyJoint.prototype.set_jointMin});
Object.defineProperty(PulleyJoint.prototype, "jointMax", {get: PulleyJoint.prototype.get_jointMax, set: PulleyJoint.prototype.set_jointMax});
Object.defineProperty(PulleyJoint.prototype, "ratio", {get: PulleyJoint.prototype.get_ratio, set: PulleyJoint.prototype.set_ratio});
Object.defineProperty(WeldJoint.prototype, "body1", {get: WeldJoint.prototype.get_body1, set: WeldJoint.prototype.set_body1});
Object.defineProperty(WeldJoint.prototype, "body2", {get: WeldJoint.prototype.get_body2, set: WeldJoint.prototype.set_body2});
Object.defineProperty(WeldJoint.prototype, "anchor1", {get: WeldJoint.prototype.get_anchor1, set: WeldJoint.prototype.set_anchor1});
Object.defineProperty(WeldJoint.prototype, "anchor2", {get: WeldJoint.prototype.get_anchor2, set: WeldJoint.prototype.set_anchor2});
Object.defineProperty(WeldJoint.prototype, "phase", {get: WeldJoint.prototype.get_phase, set: WeldJoint.prototype.set_phase});
Object.defineProperty(ArbiterList.prototype, "length", {get: ArbiterList.prototype.get_length});
Object.defineProperty(CollisionArbiter.prototype, "contacts", {get: CollisionArbiter.prototype.get_contacts});
Object.defineProperty(CollisionArbiter.prototype, "normal", {get: CollisionArbiter.prototype.get_normal});
Object.defineProperty(CollisionArbiter.prototype, "radius", {get: CollisionArbiter.prototype.get_radius});
Object.defineProperty(CollisionArbiter.prototype, "referenceEdge1", {get: CollisionArbiter.prototype.get_referenceEdge1});
Object.defineProperty(CollisionArbiter.prototype, "referenceEdge2", {get: CollisionArbiter.prototype.get_referenceEdge2});
Object.defineProperty(CollisionArbiter.prototype, "elasticity", {get: CollisionArbiter.prototype.get_elasticity, set: CollisionArbiter.prototype.set_elasticity});
Object.defineProperty(CollisionArbiter.prototype, "dynamicFriction", {get: CollisionArbiter.prototype.get_dynamicFriction, set: CollisionArbiter.prototype.set_dynamicFriction});
Object.defineProperty(CollisionArbiter.prototype, "staticFriction", {get: CollisionArbiter.prototype.get_staticFriction, set: CollisionArbiter.prototype.set_staticFriction});
Object.defineProperty(CollisionArbiter.prototype, "rollingFriction", {get: CollisionArbiter.prototype.get_rollingFriction, set: CollisionArbiter.prototype.set_rollingFriction});
Object.defineProperty(Contact.prototype, "arbiter", {get: Contact.prototype.get_arbiter});
Object.defineProperty(Contact.prototype, "penetration", {get: Contact.prototype.get_penetration});
Object.defineProperty(Contact.prototype, "position", {get: Contact.prototype.get_position});
Object.defineProperty(Contact.prototype, "fresh", {get: Contact.prototype.get_fresh});
Object.defineProperty(Contact.prototype, "friction", {get: Contact.prototype.get_friction});
Object.defineProperty(ContactList.prototype, "length", {get: ContactList.prototype.get_length});
Object.defineProperty(FluidArbiter.prototype, "position", {get: FluidArbiter.prototype.get_position, set: FluidArbiter.prototype.set_position});
Object.defineProperty(FluidArbiter.prototype, "overlap", {get: FluidArbiter.prototype.get_overlap, set: FluidArbiter.prototype.set_overlap});
Object.defineProperty(InteractionFilter.prototype, "userData", {get: InteractionFilter.prototype.get_userData});
Object.defineProperty(InteractionFilter.prototype, "shapes", {get: InteractionFilter.prototype.get_shapes});
Object.defineProperty(InteractionFilter.prototype, "collisionGroup", {get: InteractionFilter.prototype.get_collisionGroup, set: InteractionFilter.prototype.set_collisionGroup});
Object.defineProperty(InteractionFilter.prototype, "collisionMask", {get: InteractionFilter.prototype.get_collisionMask, set: InteractionFilter.prototype.set_collisionMask});
Object.defineProperty(InteractionFilter.prototype, "sensorGroup", {get: InteractionFilter.prototype.get_sensorGroup, set: InteractionFilter.prototype.set_sensorGroup});
Object.defineProperty(InteractionFilter.prototype, "sensorMask", {get: InteractionFilter.prototype.get_sensorMask, set: InteractionFilter.prototype.set_sensorMask});
Object.defineProperty(InteractionFilter.prototype, "fluidGroup", {get: InteractionFilter.prototype.get_fluidGroup, set: InteractionFilter.prototype.set_fluidGroup});
Object.defineProperty(InteractionFilter.prototype, "fluidMask", {get: InteractionFilter.prototype.get_fluidMask, set: InteractionFilter.prototype.set_fluidMask});
Object.defineProperty(InteractionGroup.prototype, "group", {get: InteractionGroup.prototype.get_group, set: InteractionGroup.prototype.set_group});
Object.defineProperty(InteractionGroup.prototype, "ignore", {get: InteractionGroup.prototype.get_ignore, set: InteractionGroup.prototype.set_ignore});
Object.defineProperty(InteractionGroup.prototype, "interactors", {get: InteractionGroup.prototype.get_interactors});
Object.defineProperty(InteractionGroup.prototype, "groups", {get: InteractionGroup.prototype.get_groups});
Object.defineProperty(InteractionGroupList.prototype, "length", {get: InteractionGroupList.prototype.get_length});
Object.defineProperty(AABB.prototype, "min", {get: AABB.prototype.get_min, set: AABB.prototype.set_min});
Object.defineProperty(AABB.prototype, "max", {get: AABB.prototype.get_max, set: AABB.prototype.set_max});
Object.defineProperty(AABB.prototype, "x", {get: AABB.prototype.get_x, set: AABB.prototype.set_x});
Object.defineProperty(AABB.prototype, "y", {get: AABB.prototype.get_y, set: AABB.prototype.set_y});
Object.defineProperty(AABB.prototype, "width", {get: AABB.prototype.get_width, set: AABB.prototype.set_width});
Object.defineProperty(AABB.prototype, "height", {get: AABB.prototype.get_height, set: AABB.prototype.set_height});
Object.defineProperty(ConvexResult.prototype, "normal", {get: ConvexResult.prototype.get_normal});
Object.defineProperty(ConvexResult.prototype, "position", {get: ConvexResult.prototype.get_position});
Object.defineProperty(ConvexResult.prototype, "toi", {get: ConvexResult.prototype.get_toi});
Object.defineProperty(ConvexResult.prototype, "shape", {get: ConvexResult.prototype.get_shape});
Object.defineProperty(ConvexResultList.prototype, "length", {get: ConvexResultList.prototype.get_length});
Object.defineProperty(GeomPolyList.prototype, "length", {get: GeomPolyList.prototype.get_length});
Object.defineProperty(Mat23.prototype, "a", {get: Mat23.prototype.get_a, set: Mat23.prototype.set_a});
Object.defineProperty(Mat23.prototype, "b", {get: Mat23.prototype.get_b, set: Mat23.prototype.set_b});
Object.defineProperty(Mat23.prototype, "c", {get: Mat23.prototype.get_c, set: Mat23.prototype.set_c});
Object.defineProperty(Mat23.prototype, "d", {get: Mat23.prototype.get_d, set: Mat23.prototype.set_d});
Object.defineProperty(Mat23.prototype, "tx", {get: Mat23.prototype.get_tx, set: Mat23.prototype.set_tx});
Object.defineProperty(Mat23.prototype, "ty", {get: Mat23.prototype.get_ty, set: Mat23.prototype.set_ty});
Object.defineProperty(Mat23.prototype, "determinant", {get: Mat23.prototype.get_determinant});
Object.defineProperty(MatMN.prototype, "rows", {get: MatMN.prototype.get_rows});
Object.defineProperty(MatMN.prototype, "cols", {get: MatMN.prototype.get_cols});
Object.defineProperty(Ray.prototype, "userData", {get: Ray.prototype.get_userData});
Object.defineProperty(Ray.prototype, "origin", {get: Ray.prototype.get_origin, set: Ray.prototype.set_origin});
Object.defineProperty(Ray.prototype, "direction", {get: Ray.prototype.get_direction, set: Ray.prototype.set_direction});
Object.defineProperty(Ray.prototype, "maxDistance", {get: Ray.prototype.get_maxDistance, set: Ray.prototype.set_maxDistance});
Object.defineProperty(RayResult.prototype, "normal", {get: RayResult.prototype.get_normal});
Object.defineProperty(RayResult.prototype, "distance", {get: RayResult.prototype.get_distance});
Object.defineProperty(RayResult.prototype, "inner", {get: RayResult.prototype.get_inner});
Object.defineProperty(RayResult.prototype, "shape", {get: RayResult.prototype.get_shape});
Object.defineProperty(RayResultList.prototype, "length", {get: RayResultList.prototype.get_length});
Object.defineProperty(Vec2.prototype, "x", {get: Vec2.prototype.get_x, set: Vec2.prototype.set_x});
Object.defineProperty(Vec2.prototype, "y", {get: Vec2.prototype.get_y, set: Vec2.prototype.set_y});
Object.defineProperty(Vec2.prototype, "length", {get: Vec2.prototype.get_length, set: Vec2.prototype.set_length});
Object.defineProperty(Vec2.prototype, "angle", {get: Vec2.prototype.get_angle, set: Vec2.prototype.set_angle});
Object.defineProperty(Vec2List.prototype, "length", {get: Vec2List.prototype.get_length});
Object.defineProperty(Vec3.prototype, "x", {get: Vec3.prototype.get_x, set: Vec3.prototype.set_x});
Object.defineProperty(Vec3.prototype, "y", {get: Vec3.prototype.get_y, set: Vec3.prototype.set_y});
Object.defineProperty(Vec3.prototype, "z", {get: Vec3.prototype.get_z, set: Vec3.prototype.set_z});
Object.defineProperty(Vec3.prototype, "length", {get: Vec3.prototype.get_length, set: Vec3.prototype.set_length});
Object.defineProperty(Interactor.prototype, "id", {get: Interactor.prototype.get_id});
Object.defineProperty(Interactor.prototype, "userData", {get: Interactor.prototype.get_userData});
Object.defineProperty(Interactor.prototype, "castShape", {get: Interactor.prototype.get_castShape});
Object.defineProperty(Interactor.prototype, "castBody", {get: Interactor.prototype.get_castBody});
Object.defineProperty(Interactor.prototype, "castCompound", {get: Interactor.prototype.get_castCompound});
Object.defineProperty(Interactor.prototype, "group", {get: Interactor.prototype.get_group, set: Interactor.prototype.set_group});
Object.defineProperty(Interactor.prototype, "cbTypes", {get: Interactor.prototype.get_cbTypes});
Object.defineProperty(Body.prototype, "type", {get: Body.prototype.get_type, set: Body.prototype.set_type});
Object.defineProperty(Body.prototype, "isBullet", {get: Body.prototype.get_isBullet, set: Body.prototype.set_isBullet});
Object.defineProperty(Body.prototype, "disableCCD", {get: Body.prototype.get_disableCCD, set: Body.prototype.set_disableCCD});
Object.defineProperty(Body.prototype, "shapes", {get: Body.prototype.get_shapes});
Object.defineProperty(Body.prototype, "compound", {get: Body.prototype.get_compound, set: Body.prototype.set_compound});
Object.defineProperty(Body.prototype, "space", {get: Body.prototype.get_space, set: Body.prototype.set_space});
Object.defineProperty(Body.prototype, "arbiters", {get: Body.prototype.get_arbiters});
Object.defineProperty(Body.prototype, "isSleeping", {get: Body.prototype.get_isSleeping});
Object.defineProperty(Body.prototype, "constraints", {get: Body.prototype.get_constraints});
Object.defineProperty(Body.prototype, "position", {get: Body.prototype.get_position, set: Body.prototype.set_position});
Object.defineProperty(Body.prototype, "velocity", {get: Body.prototype.get_velocity, set: Body.prototype.set_velocity});
Object.defineProperty(Body.prototype, "kinematicVel", {get: Body.prototype.get_kinematicVel, set: Body.prototype.set_kinematicVel});
Object.defineProperty(Body.prototype, "surfaceVel", {get: Body.prototype.get_surfaceVel, set: Body.prototype.set_surfaceVel});
Object.defineProperty(Body.prototype, "force", {get: Body.prototype.get_force, set: Body.prototype.set_force});
Object.defineProperty(Body.prototype, "constraintVelocity", {get: Body.prototype.get_constraintVelocity});
Object.defineProperty(Body.prototype, "rotation", {get: Body.prototype.get_rotation, set: Body.prototype.set_rotation});
Object.defineProperty(Body.prototype, "angularVel", {get: Body.prototype.get_angularVel, set: Body.prototype.set_angularVel});
Object.defineProperty(Body.prototype, "kinAngVel", {get: Body.prototype.get_kinAngVel, set: Body.prototype.set_kinAngVel});
Object.defineProperty(Body.prototype, "torque", {get: Body.prototype.get_torque, set: Body.prototype.set_torque});
Object.defineProperty(Body.prototype, "bounds", {get: Body.prototype.get_bounds});
Object.defineProperty(Body.prototype, "allowMovement", {get: Body.prototype.get_allowMovement, set: Body.prototype.set_allowMovement});
Object.defineProperty(Body.prototype, "allowRotation", {get: Body.prototype.get_allowRotation, set: Body.prototype.set_allowRotation});
Object.defineProperty(Body.prototype, "massMode", {get: Body.prototype.get_massMode, set: Body.prototype.set_massMode});
Object.defineProperty(Body.prototype, "constraintMass", {get: Body.prototype.get_constraintMass});
Object.defineProperty(Body.prototype, "mass", {get: Body.prototype.get_mass, set: Body.prototype.set_mass});
Object.defineProperty(Body.prototype, "gravMassMode", {get: Body.prototype.get_gravMassMode, set: Body.prototype.set_gravMassMode});
Object.defineProperty(Body.prototype, "gravMass", {get: Body.prototype.get_gravMass, set: Body.prototype.set_gravMass});
Object.defineProperty(Body.prototype, "gravMassScale", {get: Body.prototype.get_gravMassScale, set: Body.prototype.set_gravMassScale});
Object.defineProperty(Body.prototype, "inertiaMode", {get: Body.prototype.get_inertiaMode, set: Body.prototype.set_inertiaMode});
Object.defineProperty(Body.prototype, "constraintInertia", {get: Body.prototype.get_constraintInertia});
Object.defineProperty(Body.prototype, "inertia", {get: Body.prototype.get_inertia, set: Body.prototype.set_inertia});
Object.defineProperty(Body.prototype, "localCOM", {get: Body.prototype.get_localCOM});
Object.defineProperty(Body.prototype, "worldCOM", {get: Body.prototype.get_worldCOM});
Object.defineProperty(BodyList.prototype, "length", {get: BodyList.prototype.get_length});
Object.defineProperty(Compound.prototype, "bodies", {get: Compound.prototype.get_bodies});
Object.defineProperty(Compound.prototype, "constraints", {get: Compound.prototype.get_constraints});
Object.defineProperty(Compound.prototype, "compounds", {get: Compound.prototype.get_compounds});
Object.defineProperty(Compound.prototype, "compound", {get: Compound.prototype.get_compound, set: Compound.prototype.set_compound});
Object.defineProperty(Compound.prototype, "space", {get: Compound.prototype.get_space, set: Compound.prototype.set_space});
Object.defineProperty(CompoundList.prototype, "length", {get: CompoundList.prototype.get_length});
Object.defineProperty(FluidProperties.prototype, "userData", {get: FluidProperties.prototype.get_userData});
Object.defineProperty(FluidProperties.prototype, "shapes", {get: FluidProperties.prototype.get_shapes});
Object.defineProperty(FluidProperties.prototype, "density", {get: FluidProperties.prototype.get_density, set: FluidProperties.prototype.set_density});
Object.defineProperty(FluidProperties.prototype, "viscosity", {get: FluidProperties.prototype.get_viscosity, set: FluidProperties.prototype.set_viscosity});
Object.defineProperty(FluidProperties.prototype, "gravity", {get: FluidProperties.prototype.get_gravity, set: FluidProperties.prototype.set_gravity});
Object.defineProperty(InteractorList.prototype, "length", {get: InteractorList.prototype.get_length});
Object.defineProperty(Material.prototype, "userData", {get: Material.prototype.get_userData});
Object.defineProperty(Material.prototype, "shapes", {get: Material.prototype.get_shapes});
Object.defineProperty(Material.prototype, "elasticity", {get: Material.prototype.get_elasticity, set: Material.prototype.set_elasticity});
Object.defineProperty(Material.prototype, "dynamicFriction", {get: Material.prototype.get_dynamicFriction, set: Material.prototype.set_dynamicFriction});
Object.defineProperty(Material.prototype, "staticFriction", {get: Material.prototype.get_staticFriction, set: Material.prototype.set_staticFriction});
Object.defineProperty(Material.prototype, "density", {get: Material.prototype.get_density, set: Material.prototype.set_density});
Object.defineProperty(Material.prototype, "rollingFriction", {get: Material.prototype.get_rollingFriction, set: Material.prototype.set_rollingFriction});
Object.defineProperty(Shape.prototype, "type", {get: Shape.prototype.get_type});
Object.defineProperty(Shape.prototype, "body", {get: Shape.prototype.get_body, set: Shape.prototype.set_body});
Object.defineProperty(Shape.prototype, "castCircle", {get: Shape.prototype.get_castCircle});
Object.defineProperty(Shape.prototype, "castPolygon", {get: Shape.prototype.get_castPolygon});
Object.defineProperty(Shape.prototype, "worldCOM", {get: Shape.prototype.get_worldCOM});
Object.defineProperty(Shape.prototype, "localCOM", {get: Shape.prototype.get_localCOM, set: Shape.prototype.set_localCOM});
Object.defineProperty(Shape.prototype, "area", {get: Shape.prototype.get_area});
Object.defineProperty(Shape.prototype, "inertia", {get: Shape.prototype.get_inertia});
Object.defineProperty(Shape.prototype, "angDrag", {get: Shape.prototype.get_angDrag});
Object.defineProperty(Shape.prototype, "material", {get: Shape.prototype.get_material, set: Shape.prototype.set_material});
Object.defineProperty(Shape.prototype, "filter", {get: Shape.prototype.get_filter, set: Shape.prototype.set_filter});
Object.defineProperty(Shape.prototype, "fluidProperties", {get: Shape.prototype.get_fluidProperties, set: Shape.prototype.set_fluidProperties});
Object.defineProperty(Shape.prototype, "fluidEnabled", {get: Shape.prototype.get_fluidEnabled, set: Shape.prototype.set_fluidEnabled});
Object.defineProperty(Shape.prototype, "sensorEnabled", {get: Shape.prototype.get_sensorEnabled, set: Shape.prototype.set_sensorEnabled});
Object.defineProperty(Shape.prototype, "bounds", {get: Shape.prototype.get_bounds});
Object.defineProperty(Circle.prototype, "radius", {get: Circle.prototype.get_radius, set: Circle.prototype.set_radius});
Object.defineProperty(Edge.prototype, "polygon", {get: Edge.prototype.get_polygon});
Object.defineProperty(Edge.prototype, "localNormal", {get: Edge.prototype.get_localNormal});
Object.defineProperty(Edge.prototype, "worldNormal", {get: Edge.prototype.get_worldNormal});
Object.defineProperty(Edge.prototype, "length", {get: Edge.prototype.get_length});
Object.defineProperty(Edge.prototype, "localProjection", {get: Edge.prototype.get_localProjection});
Object.defineProperty(Edge.prototype, "worldProjection", {get: Edge.prototype.get_worldProjection});
Object.defineProperty(Edge.prototype, "localVertex1", {get: Edge.prototype.get_localVertex1});
Object.defineProperty(Edge.prototype, "localVertex2", {get: Edge.prototype.get_localVertex2});
Object.defineProperty(Edge.prototype, "worldVertex1", {get: Edge.prototype.get_worldVertex1});
Object.defineProperty(Edge.prototype, "worldVertex2", {get: Edge.prototype.get_worldVertex2});
Object.defineProperty(EdgeList.prototype, "length", {get: EdgeList.prototype.get_length});
Object.defineProperty(Polygon.prototype, "localVerts", {get: Polygon.prototype.get_localVerts});
Object.defineProperty(Polygon.prototype, "worldVerts", {get: Polygon.prototype.get_worldVerts});
Object.defineProperty(Polygon.prototype, "edges", {get: Polygon.prototype.get_edges});
Object.defineProperty(ShapeList.prototype, "length", {get: ShapeList.prototype.get_length});
Object.defineProperty(Space.prototype, "userData", {get: Space.prototype.get_userData});
Object.defineProperty(Space.prototype, "gravity", {get: Space.prototype.get_gravity, set: Space.prototype.set_gravity});
Object.defineProperty(Space.prototype, "broadphase", {get: Space.prototype.get_broadphase});
Object.defineProperty(Space.prototype, "sortContacts", {get: Space.prototype.get_sortContacts, set: Space.prototype.set_sortContacts});
Object.defineProperty(Space.prototype, "worldAngularDrag", {get: Space.prototype.get_worldAngularDrag, set: Space.prototype.set_worldAngularDrag});
Object.defineProperty(Space.prototype, "worldLinearDrag", {get: Space.prototype.get_worldLinearDrag, set: Space.prototype.set_worldLinearDrag});
Object.defineProperty(Space.prototype, "compounds", {get: Space.prototype.get_compounds});
Object.defineProperty(Space.prototype, "bodies", {get: Space.prototype.get_bodies});
Object.defineProperty(Space.prototype, "liveBodies", {get: Space.prototype.get_liveBodies});
Object.defineProperty(Space.prototype, "constraints", {get: Space.prototype.get_constraints});
Object.defineProperty(Space.prototype, "liveConstraints", {get: Space.prototype.get_liveConstraints});
Object.defineProperty(Space.prototype, "world", {get: Space.prototype.get_world});
Object.defineProperty(Space.prototype, "arbiters", {get: Space.prototype.get_arbiters});
Object.defineProperty(Space.prototype, "listeners", {get: Space.prototype.get_listeners});
Object.defineProperty(Space.prototype, "timeStamp", {get: Space.prototype.get_timeStamp});
Object.defineProperty(Space.prototype, "elapsedTime", {get: Space.prototype.get_elapsedTime});
Object.defineProperty(BodyType, "STATIC", {get: BodyType.get_STATIC});
Object.defineProperty(BodyType, "DYNAMIC", {get: BodyType.get_DYNAMIC});
Object.defineProperty(BodyType, "KINEMATIC", {get: BodyType.get_KINEMATIC});
Object.defineProperty(CbType, "ANY_BODY", {get: CbType.get_ANY_BODY});
Object.defineProperty(CbType, "ANY_CONSTRAINT", {get: CbType.get_ANY_CONSTRAINT});
Object.defineProperty(CbType, "ANY_SHAPE", {get: CbType.get_ANY_SHAPE});
Object.defineProperty(CbType, "ANY_COMPOUND", {get: CbType.get_ANY_COMPOUND});
Object.defineProperty(CbEvent, "BEGIN", {get: CbEvent.get_BEGIN});
Object.defineProperty(CbEvent, "ONGOING", {get: CbEvent.get_ONGOING});
Object.defineProperty(CbEvent, "END", {get: CbEvent.get_END});
Object.defineProperty(CbEvent, "WAKE", {get: CbEvent.get_WAKE});
Object.defineProperty(CbEvent, "SLEEP", {get: CbEvent.get_SLEEP});
Object.defineProperty(CbEvent, "BREAK", {get: CbEvent.get_BREAK});
Object.defineProperty(CbEvent, "PRE", {get: CbEvent.get_PRE});
Object.defineProperty(InteractionType, "COLLISION", {get: InteractionType.get_COLLISION});
Object.defineProperty(InteractionType, "SENSOR", {get: InteractionType.get_SENSOR});
Object.defineProperty(InteractionType, "FLUID", {get: InteractionType.get_FLUID});
Object.defineProperty(InteractionType, "ANY", {get: InteractionType.get_ANY});
Object.defineProperty(ListenerType, "BODY", {get: ListenerType.get_BODY});
Object.defineProperty(ListenerType, "CONSTRAINT", {get: ListenerType.get_CONSTRAINT});
Object.defineProperty(ListenerType, "INTERACTION", {get: ListenerType.get_INTERACTION});
Object.defineProperty(ListenerType, "PRE", {get: ListenerType.get_PRE});
Object.defineProperty(PreFlag, "ACCEPT", {get: PreFlag.get_ACCEPT});
Object.defineProperty(PreFlag, "IGNORE", {get: PreFlag.get_IGNORE});
Object.defineProperty(PreFlag, "ACCEPT_ONCE", {get: PreFlag.get_ACCEPT_ONCE});
Object.defineProperty(PreFlag, "IGNORE_ONCE", {get: PreFlag.get_IGNORE_ONCE});
Object.defineProperty(ArbiterType, "COLLISION", {get: ArbiterType.get_COLLISION});
Object.defineProperty(ArbiterType, "SENSOR", {get: ArbiterType.get_SENSOR});
Object.defineProperty(ArbiterType, "FLUID", {get: ArbiterType.get_FLUID});
Object.defineProperty(Winding, "UNDEFINED", {get: Winding.get_UNDEFINED});
Object.defineProperty(Winding, "CLOCKWISE", {get: Winding.get_CLOCKWISE});
Object.defineProperty(Winding, "ANTICLOCKWISE", {get: Winding.get_ANTICLOCKWISE});
Object.defineProperty(GravMassMode, "DEFAULT", {get: GravMassMode.get_DEFAULT});
Object.defineProperty(GravMassMode, "FIXED", {get: GravMassMode.get_FIXED});
Object.defineProperty(GravMassMode, "SCALED", {get: GravMassMode.get_SCALED});
Object.defineProperty(InertiaMode, "DEFAULT", {get: InertiaMode.get_DEFAULT});
Object.defineProperty(InertiaMode, "FIXED", {get: InertiaMode.get_FIXED});
Object.defineProperty(MassMode, "DEFAULT", {get: MassMode.get_DEFAULT});
Object.defineProperty(MassMode, "FIXED", {get: MassMode.get_FIXED});
Object.defineProperty(ShapeType, "CIRCLE", {get: ShapeType.get_CIRCLE});
Object.defineProperty(ShapeType, "POLYGON", {get: ShapeType.get_POLYGON});
Object.defineProperty(ValidationResult, "VALID", {get: ValidationResult.get_VALID});
Object.defineProperty(ValidationResult, "DEGENERATE", {get: ValidationResult.get_DEGENERATE});
Object.defineProperty(ValidationResult, "CONCAVE", {get: ValidationResult.get_CONCAVE});
Object.defineProperty(ValidationResult, "SELF_INTERSECTING", {get: ValidationResult.get_SELF_INTERSECTING});
Object.defineProperty(Broadphase, "DYNAMIC_AABB_TREE", {get: Broadphase.get_DYNAMIC_AABB_TREE});
Object.defineProperty(Broadphase, "SWEEP_AND_PRUNE", {get: Broadphase.get_SWEEP_AND_PRUNE});

window['nape'] = nape;
window['zpp_nape'] = zpp_nape;
})();